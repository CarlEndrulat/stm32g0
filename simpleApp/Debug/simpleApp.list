
simpleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00020100  2**2
                  ALLOC
  2 .mysection    00000000  08075500  08075500  000101e8  2**0
                  CONTENTS
  3 .text         00003714  080080bc  080080bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000094  0800b7d0  0800b7d0  0000b7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800b864  0800b864  000101e8  2**0
                  CONTENTS
  6 .ARM          00000008  0800b864  0800b864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800b86c  0800b86c  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800b86c  0800b86c  0000b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800b870  0800b870  0000b870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000068  20000180  0800b874  00010180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000204  200001e8  0800b8dc  000101e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200003ec  0800b8dc  000103ec  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000b8c9  00000000  00000000  00010253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001cf0  00000000  00000000  0001bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000988  00000000  00000000  0001d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000074d  00000000  00000000  0001e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001c103  00000000  00000000  0001e8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000b81e  00000000  00000000  0003a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b211c  00000000  00000000  00046206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000273c  00000000  00000000  000f8324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  000faa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080bc <__do_global_dtors_aux>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <__do_global_dtors_aux+0x1c>)
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <__do_global_dtors_aux+0x1a>
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <__do_global_dtors_aux+0x20>)
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <__do_global_dtors_aux+0x16>
 80080cc:	4804      	ldr	r0, [pc, #16]	; (80080e0 <__do_global_dtors_aux+0x24>)
 80080ce:	e000      	b.n	80080d2 <__do_global_dtors_aux+0x16>
 80080d0:	bf00      	nop
 80080d2:	2301      	movs	r3, #1
 80080d4:	7023      	strb	r3, [r4, #0]
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	200001e8 	.word	0x200001e8
 80080dc:	00000000 	.word	0x00000000
 80080e0:	0800b7b8 	.word	0x0800b7b8

080080e4 <frame_dummy>:
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <frame_dummy+0x14>)
 80080e6:	b510      	push	{r4, lr}
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <frame_dummy+0x10>
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <frame_dummy+0x18>)
 80080ee:	4804      	ldr	r0, [pc, #16]	; (8008100 <frame_dummy+0x1c>)
 80080f0:	e000      	b.n	80080f4 <frame_dummy+0x10>
 80080f2:	bf00      	nop
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	00000000 	.word	0x00000000
 80080fc:	200001ec 	.word	0x200001ec
 8008100:	0800b7b8 	.word	0x0800b7b8

08008104 <__udivsi3>:
 8008104:	2200      	movs	r2, #0
 8008106:	0843      	lsrs	r3, r0, #1
 8008108:	428b      	cmp	r3, r1
 800810a:	d374      	bcc.n	80081f6 <__udivsi3+0xf2>
 800810c:	0903      	lsrs	r3, r0, #4
 800810e:	428b      	cmp	r3, r1
 8008110:	d35f      	bcc.n	80081d2 <__udivsi3+0xce>
 8008112:	0a03      	lsrs	r3, r0, #8
 8008114:	428b      	cmp	r3, r1
 8008116:	d344      	bcc.n	80081a2 <__udivsi3+0x9e>
 8008118:	0b03      	lsrs	r3, r0, #12
 800811a:	428b      	cmp	r3, r1
 800811c:	d328      	bcc.n	8008170 <__udivsi3+0x6c>
 800811e:	0c03      	lsrs	r3, r0, #16
 8008120:	428b      	cmp	r3, r1
 8008122:	d30d      	bcc.n	8008140 <__udivsi3+0x3c>
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	0209      	lsls	r1, r1, #8
 8008128:	ba12      	rev	r2, r2
 800812a:	0c03      	lsrs	r3, r0, #16
 800812c:	428b      	cmp	r3, r1
 800812e:	d302      	bcc.n	8008136 <__udivsi3+0x32>
 8008130:	1212      	asrs	r2, r2, #8
 8008132:	0209      	lsls	r1, r1, #8
 8008134:	d065      	beq.n	8008202 <__udivsi3+0xfe>
 8008136:	0b03      	lsrs	r3, r0, #12
 8008138:	428b      	cmp	r3, r1
 800813a:	d319      	bcc.n	8008170 <__udivsi3+0x6c>
 800813c:	e000      	b.n	8008140 <__udivsi3+0x3c>
 800813e:	0a09      	lsrs	r1, r1, #8
 8008140:	0bc3      	lsrs	r3, r0, #15
 8008142:	428b      	cmp	r3, r1
 8008144:	d301      	bcc.n	800814a <__udivsi3+0x46>
 8008146:	03cb      	lsls	r3, r1, #15
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	4152      	adcs	r2, r2
 800814c:	0b83      	lsrs	r3, r0, #14
 800814e:	428b      	cmp	r3, r1
 8008150:	d301      	bcc.n	8008156 <__udivsi3+0x52>
 8008152:	038b      	lsls	r3, r1, #14
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	4152      	adcs	r2, r2
 8008158:	0b43      	lsrs	r3, r0, #13
 800815a:	428b      	cmp	r3, r1
 800815c:	d301      	bcc.n	8008162 <__udivsi3+0x5e>
 800815e:	034b      	lsls	r3, r1, #13
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	4152      	adcs	r2, r2
 8008164:	0b03      	lsrs	r3, r0, #12
 8008166:	428b      	cmp	r3, r1
 8008168:	d301      	bcc.n	800816e <__udivsi3+0x6a>
 800816a:	030b      	lsls	r3, r1, #12
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	4152      	adcs	r2, r2
 8008170:	0ac3      	lsrs	r3, r0, #11
 8008172:	428b      	cmp	r3, r1
 8008174:	d301      	bcc.n	800817a <__udivsi3+0x76>
 8008176:	02cb      	lsls	r3, r1, #11
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	4152      	adcs	r2, r2
 800817c:	0a83      	lsrs	r3, r0, #10
 800817e:	428b      	cmp	r3, r1
 8008180:	d301      	bcc.n	8008186 <__udivsi3+0x82>
 8008182:	028b      	lsls	r3, r1, #10
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	4152      	adcs	r2, r2
 8008188:	0a43      	lsrs	r3, r0, #9
 800818a:	428b      	cmp	r3, r1
 800818c:	d301      	bcc.n	8008192 <__udivsi3+0x8e>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	4152      	adcs	r2, r2
 8008194:	0a03      	lsrs	r3, r0, #8
 8008196:	428b      	cmp	r3, r1
 8008198:	d301      	bcc.n	800819e <__udivsi3+0x9a>
 800819a:	020b      	lsls	r3, r1, #8
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	4152      	adcs	r2, r2
 80081a0:	d2cd      	bcs.n	800813e <__udivsi3+0x3a>
 80081a2:	09c3      	lsrs	r3, r0, #7
 80081a4:	428b      	cmp	r3, r1
 80081a6:	d301      	bcc.n	80081ac <__udivsi3+0xa8>
 80081a8:	01cb      	lsls	r3, r1, #7
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	4152      	adcs	r2, r2
 80081ae:	0983      	lsrs	r3, r0, #6
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d301      	bcc.n	80081b8 <__udivsi3+0xb4>
 80081b4:	018b      	lsls	r3, r1, #6
 80081b6:	1ac0      	subs	r0, r0, r3
 80081b8:	4152      	adcs	r2, r2
 80081ba:	0943      	lsrs	r3, r0, #5
 80081bc:	428b      	cmp	r3, r1
 80081be:	d301      	bcc.n	80081c4 <__udivsi3+0xc0>
 80081c0:	014b      	lsls	r3, r1, #5
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	4152      	adcs	r2, r2
 80081c6:	0903      	lsrs	r3, r0, #4
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d301      	bcc.n	80081d0 <__udivsi3+0xcc>
 80081cc:	010b      	lsls	r3, r1, #4
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	4152      	adcs	r2, r2
 80081d2:	08c3      	lsrs	r3, r0, #3
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d301      	bcc.n	80081dc <__udivsi3+0xd8>
 80081d8:	00cb      	lsls	r3, r1, #3
 80081da:	1ac0      	subs	r0, r0, r3
 80081dc:	4152      	adcs	r2, r2
 80081de:	0883      	lsrs	r3, r0, #2
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d301      	bcc.n	80081e8 <__udivsi3+0xe4>
 80081e4:	008b      	lsls	r3, r1, #2
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	4152      	adcs	r2, r2
 80081ea:	0843      	lsrs	r3, r0, #1
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d301      	bcc.n	80081f4 <__udivsi3+0xf0>
 80081f0:	004b      	lsls	r3, r1, #1
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	4152      	adcs	r2, r2
 80081f6:	1a41      	subs	r1, r0, r1
 80081f8:	d200      	bcs.n	80081fc <__udivsi3+0xf8>
 80081fa:	4601      	mov	r1, r0
 80081fc:	4152      	adcs	r2, r2
 80081fe:	4610      	mov	r0, r2
 8008200:	4770      	bx	lr
 8008202:	e7ff      	b.n	8008204 <__udivsi3+0x100>
 8008204:	b501      	push	{r0, lr}
 8008206:	2000      	movs	r0, #0
 8008208:	f000 f8f0 	bl	80083ec <__aeabi_idiv0>
 800820c:	bd02      	pop	{r1, pc}
 800820e:	46c0      	nop			; (mov r8, r8)

08008210 <__aeabi_uidivmod>:
 8008210:	2900      	cmp	r1, #0
 8008212:	d0f7      	beq.n	8008204 <__udivsi3+0x100>
 8008214:	e776      	b.n	8008104 <__udivsi3>
 8008216:	4770      	bx	lr

08008218 <__divsi3>:
 8008218:	4603      	mov	r3, r0
 800821a:	430b      	orrs	r3, r1
 800821c:	d47f      	bmi.n	800831e <__divsi3+0x106>
 800821e:	2200      	movs	r2, #0
 8008220:	0843      	lsrs	r3, r0, #1
 8008222:	428b      	cmp	r3, r1
 8008224:	d374      	bcc.n	8008310 <__divsi3+0xf8>
 8008226:	0903      	lsrs	r3, r0, #4
 8008228:	428b      	cmp	r3, r1
 800822a:	d35f      	bcc.n	80082ec <__divsi3+0xd4>
 800822c:	0a03      	lsrs	r3, r0, #8
 800822e:	428b      	cmp	r3, r1
 8008230:	d344      	bcc.n	80082bc <__divsi3+0xa4>
 8008232:	0b03      	lsrs	r3, r0, #12
 8008234:	428b      	cmp	r3, r1
 8008236:	d328      	bcc.n	800828a <__divsi3+0x72>
 8008238:	0c03      	lsrs	r3, r0, #16
 800823a:	428b      	cmp	r3, r1
 800823c:	d30d      	bcc.n	800825a <__divsi3+0x42>
 800823e:	22ff      	movs	r2, #255	; 0xff
 8008240:	0209      	lsls	r1, r1, #8
 8008242:	ba12      	rev	r2, r2
 8008244:	0c03      	lsrs	r3, r0, #16
 8008246:	428b      	cmp	r3, r1
 8008248:	d302      	bcc.n	8008250 <__divsi3+0x38>
 800824a:	1212      	asrs	r2, r2, #8
 800824c:	0209      	lsls	r1, r1, #8
 800824e:	d065      	beq.n	800831c <__divsi3+0x104>
 8008250:	0b03      	lsrs	r3, r0, #12
 8008252:	428b      	cmp	r3, r1
 8008254:	d319      	bcc.n	800828a <__divsi3+0x72>
 8008256:	e000      	b.n	800825a <__divsi3+0x42>
 8008258:	0a09      	lsrs	r1, r1, #8
 800825a:	0bc3      	lsrs	r3, r0, #15
 800825c:	428b      	cmp	r3, r1
 800825e:	d301      	bcc.n	8008264 <__divsi3+0x4c>
 8008260:	03cb      	lsls	r3, r1, #15
 8008262:	1ac0      	subs	r0, r0, r3
 8008264:	4152      	adcs	r2, r2
 8008266:	0b83      	lsrs	r3, r0, #14
 8008268:	428b      	cmp	r3, r1
 800826a:	d301      	bcc.n	8008270 <__divsi3+0x58>
 800826c:	038b      	lsls	r3, r1, #14
 800826e:	1ac0      	subs	r0, r0, r3
 8008270:	4152      	adcs	r2, r2
 8008272:	0b43      	lsrs	r3, r0, #13
 8008274:	428b      	cmp	r3, r1
 8008276:	d301      	bcc.n	800827c <__divsi3+0x64>
 8008278:	034b      	lsls	r3, r1, #13
 800827a:	1ac0      	subs	r0, r0, r3
 800827c:	4152      	adcs	r2, r2
 800827e:	0b03      	lsrs	r3, r0, #12
 8008280:	428b      	cmp	r3, r1
 8008282:	d301      	bcc.n	8008288 <__divsi3+0x70>
 8008284:	030b      	lsls	r3, r1, #12
 8008286:	1ac0      	subs	r0, r0, r3
 8008288:	4152      	adcs	r2, r2
 800828a:	0ac3      	lsrs	r3, r0, #11
 800828c:	428b      	cmp	r3, r1
 800828e:	d301      	bcc.n	8008294 <__divsi3+0x7c>
 8008290:	02cb      	lsls	r3, r1, #11
 8008292:	1ac0      	subs	r0, r0, r3
 8008294:	4152      	adcs	r2, r2
 8008296:	0a83      	lsrs	r3, r0, #10
 8008298:	428b      	cmp	r3, r1
 800829a:	d301      	bcc.n	80082a0 <__divsi3+0x88>
 800829c:	028b      	lsls	r3, r1, #10
 800829e:	1ac0      	subs	r0, r0, r3
 80082a0:	4152      	adcs	r2, r2
 80082a2:	0a43      	lsrs	r3, r0, #9
 80082a4:	428b      	cmp	r3, r1
 80082a6:	d301      	bcc.n	80082ac <__divsi3+0x94>
 80082a8:	024b      	lsls	r3, r1, #9
 80082aa:	1ac0      	subs	r0, r0, r3
 80082ac:	4152      	adcs	r2, r2
 80082ae:	0a03      	lsrs	r3, r0, #8
 80082b0:	428b      	cmp	r3, r1
 80082b2:	d301      	bcc.n	80082b8 <__divsi3+0xa0>
 80082b4:	020b      	lsls	r3, r1, #8
 80082b6:	1ac0      	subs	r0, r0, r3
 80082b8:	4152      	adcs	r2, r2
 80082ba:	d2cd      	bcs.n	8008258 <__divsi3+0x40>
 80082bc:	09c3      	lsrs	r3, r0, #7
 80082be:	428b      	cmp	r3, r1
 80082c0:	d301      	bcc.n	80082c6 <__divsi3+0xae>
 80082c2:	01cb      	lsls	r3, r1, #7
 80082c4:	1ac0      	subs	r0, r0, r3
 80082c6:	4152      	adcs	r2, r2
 80082c8:	0983      	lsrs	r3, r0, #6
 80082ca:	428b      	cmp	r3, r1
 80082cc:	d301      	bcc.n	80082d2 <__divsi3+0xba>
 80082ce:	018b      	lsls	r3, r1, #6
 80082d0:	1ac0      	subs	r0, r0, r3
 80082d2:	4152      	adcs	r2, r2
 80082d4:	0943      	lsrs	r3, r0, #5
 80082d6:	428b      	cmp	r3, r1
 80082d8:	d301      	bcc.n	80082de <__divsi3+0xc6>
 80082da:	014b      	lsls	r3, r1, #5
 80082dc:	1ac0      	subs	r0, r0, r3
 80082de:	4152      	adcs	r2, r2
 80082e0:	0903      	lsrs	r3, r0, #4
 80082e2:	428b      	cmp	r3, r1
 80082e4:	d301      	bcc.n	80082ea <__divsi3+0xd2>
 80082e6:	010b      	lsls	r3, r1, #4
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	4152      	adcs	r2, r2
 80082ec:	08c3      	lsrs	r3, r0, #3
 80082ee:	428b      	cmp	r3, r1
 80082f0:	d301      	bcc.n	80082f6 <__divsi3+0xde>
 80082f2:	00cb      	lsls	r3, r1, #3
 80082f4:	1ac0      	subs	r0, r0, r3
 80082f6:	4152      	adcs	r2, r2
 80082f8:	0883      	lsrs	r3, r0, #2
 80082fa:	428b      	cmp	r3, r1
 80082fc:	d301      	bcc.n	8008302 <__divsi3+0xea>
 80082fe:	008b      	lsls	r3, r1, #2
 8008300:	1ac0      	subs	r0, r0, r3
 8008302:	4152      	adcs	r2, r2
 8008304:	0843      	lsrs	r3, r0, #1
 8008306:	428b      	cmp	r3, r1
 8008308:	d301      	bcc.n	800830e <__divsi3+0xf6>
 800830a:	004b      	lsls	r3, r1, #1
 800830c:	1ac0      	subs	r0, r0, r3
 800830e:	4152      	adcs	r2, r2
 8008310:	1a41      	subs	r1, r0, r1
 8008312:	d200      	bcs.n	8008316 <__divsi3+0xfe>
 8008314:	4601      	mov	r1, r0
 8008316:	4152      	adcs	r2, r2
 8008318:	4610      	mov	r0, r2
 800831a:	4770      	bx	lr
 800831c:	e05d      	b.n	80083da <__divsi3+0x1c2>
 800831e:	0fca      	lsrs	r2, r1, #31
 8008320:	d000      	beq.n	8008324 <__divsi3+0x10c>
 8008322:	4249      	negs	r1, r1
 8008324:	1003      	asrs	r3, r0, #32
 8008326:	d300      	bcc.n	800832a <__divsi3+0x112>
 8008328:	4240      	negs	r0, r0
 800832a:	4053      	eors	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	469c      	mov	ip, r3
 8008330:	0903      	lsrs	r3, r0, #4
 8008332:	428b      	cmp	r3, r1
 8008334:	d32d      	bcc.n	8008392 <__divsi3+0x17a>
 8008336:	0a03      	lsrs	r3, r0, #8
 8008338:	428b      	cmp	r3, r1
 800833a:	d312      	bcc.n	8008362 <__divsi3+0x14a>
 800833c:	22fc      	movs	r2, #252	; 0xfc
 800833e:	0189      	lsls	r1, r1, #6
 8008340:	ba12      	rev	r2, r2
 8008342:	0a03      	lsrs	r3, r0, #8
 8008344:	428b      	cmp	r3, r1
 8008346:	d30c      	bcc.n	8008362 <__divsi3+0x14a>
 8008348:	0189      	lsls	r1, r1, #6
 800834a:	1192      	asrs	r2, r2, #6
 800834c:	428b      	cmp	r3, r1
 800834e:	d308      	bcc.n	8008362 <__divsi3+0x14a>
 8008350:	0189      	lsls	r1, r1, #6
 8008352:	1192      	asrs	r2, r2, #6
 8008354:	428b      	cmp	r3, r1
 8008356:	d304      	bcc.n	8008362 <__divsi3+0x14a>
 8008358:	0189      	lsls	r1, r1, #6
 800835a:	d03a      	beq.n	80083d2 <__divsi3+0x1ba>
 800835c:	1192      	asrs	r2, r2, #6
 800835e:	e000      	b.n	8008362 <__divsi3+0x14a>
 8008360:	0989      	lsrs	r1, r1, #6
 8008362:	09c3      	lsrs	r3, r0, #7
 8008364:	428b      	cmp	r3, r1
 8008366:	d301      	bcc.n	800836c <__divsi3+0x154>
 8008368:	01cb      	lsls	r3, r1, #7
 800836a:	1ac0      	subs	r0, r0, r3
 800836c:	4152      	adcs	r2, r2
 800836e:	0983      	lsrs	r3, r0, #6
 8008370:	428b      	cmp	r3, r1
 8008372:	d301      	bcc.n	8008378 <__divsi3+0x160>
 8008374:	018b      	lsls	r3, r1, #6
 8008376:	1ac0      	subs	r0, r0, r3
 8008378:	4152      	adcs	r2, r2
 800837a:	0943      	lsrs	r3, r0, #5
 800837c:	428b      	cmp	r3, r1
 800837e:	d301      	bcc.n	8008384 <__divsi3+0x16c>
 8008380:	014b      	lsls	r3, r1, #5
 8008382:	1ac0      	subs	r0, r0, r3
 8008384:	4152      	adcs	r2, r2
 8008386:	0903      	lsrs	r3, r0, #4
 8008388:	428b      	cmp	r3, r1
 800838a:	d301      	bcc.n	8008390 <__divsi3+0x178>
 800838c:	010b      	lsls	r3, r1, #4
 800838e:	1ac0      	subs	r0, r0, r3
 8008390:	4152      	adcs	r2, r2
 8008392:	08c3      	lsrs	r3, r0, #3
 8008394:	428b      	cmp	r3, r1
 8008396:	d301      	bcc.n	800839c <__divsi3+0x184>
 8008398:	00cb      	lsls	r3, r1, #3
 800839a:	1ac0      	subs	r0, r0, r3
 800839c:	4152      	adcs	r2, r2
 800839e:	0883      	lsrs	r3, r0, #2
 80083a0:	428b      	cmp	r3, r1
 80083a2:	d301      	bcc.n	80083a8 <__divsi3+0x190>
 80083a4:	008b      	lsls	r3, r1, #2
 80083a6:	1ac0      	subs	r0, r0, r3
 80083a8:	4152      	adcs	r2, r2
 80083aa:	d2d9      	bcs.n	8008360 <__divsi3+0x148>
 80083ac:	0843      	lsrs	r3, r0, #1
 80083ae:	428b      	cmp	r3, r1
 80083b0:	d301      	bcc.n	80083b6 <__divsi3+0x19e>
 80083b2:	004b      	lsls	r3, r1, #1
 80083b4:	1ac0      	subs	r0, r0, r3
 80083b6:	4152      	adcs	r2, r2
 80083b8:	1a41      	subs	r1, r0, r1
 80083ba:	d200      	bcs.n	80083be <__divsi3+0x1a6>
 80083bc:	4601      	mov	r1, r0
 80083be:	4663      	mov	r3, ip
 80083c0:	4152      	adcs	r2, r2
 80083c2:	105b      	asrs	r3, r3, #1
 80083c4:	4610      	mov	r0, r2
 80083c6:	d301      	bcc.n	80083cc <__divsi3+0x1b4>
 80083c8:	4240      	negs	r0, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d500      	bpl.n	80083d0 <__divsi3+0x1b8>
 80083ce:	4249      	negs	r1, r1
 80083d0:	4770      	bx	lr
 80083d2:	4663      	mov	r3, ip
 80083d4:	105b      	asrs	r3, r3, #1
 80083d6:	d300      	bcc.n	80083da <__divsi3+0x1c2>
 80083d8:	4240      	negs	r0, r0
 80083da:	b501      	push	{r0, lr}
 80083dc:	2000      	movs	r0, #0
 80083de:	f000 f805 	bl	80083ec <__aeabi_idiv0>
 80083e2:	bd02      	pop	{r1, pc}

080083e4 <__aeabi_idivmod>:
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d0f8      	beq.n	80083da <__divsi3+0x1c2>
 80083e8:	e716      	b.n	8008218 <__divsi3>
 80083ea:	4770      	bx	lr

080083ec <__aeabi_idiv0>:
 80083ec:	4770      	bx	lr
 80083ee:	46c0      	nop			; (mov r8, r8)

080083f0 <__aeabi_uldivmod>:
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d111      	bne.n	8008418 <__aeabi_uldivmod+0x28>
 80083f4:	2a00      	cmp	r2, #0
 80083f6:	d10f      	bne.n	8008418 <__aeabi_uldivmod+0x28>
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d100      	bne.n	80083fe <__aeabi_uldivmod+0xe>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d002      	beq.n	8008406 <__aeabi_uldivmod+0x16>
 8008400:	2100      	movs	r1, #0
 8008402:	43c9      	mvns	r1, r1
 8008404:	0008      	movs	r0, r1
 8008406:	b407      	push	{r0, r1, r2}
 8008408:	4802      	ldr	r0, [pc, #8]	; (8008414 <__aeabi_uldivmod+0x24>)
 800840a:	a102      	add	r1, pc, #8	; (adr r1, 8008414 <__aeabi_uldivmod+0x24>)
 800840c:	1840      	adds	r0, r0, r1
 800840e:	9002      	str	r0, [sp, #8]
 8008410:	bd03      	pop	{r0, r1, pc}
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	ffffffd9 	.word	0xffffffd9
 8008418:	b403      	push	{r0, r1}
 800841a:	4668      	mov	r0, sp
 800841c:	b501      	push	{r0, lr}
 800841e:	9802      	ldr	r0, [sp, #8]
 8008420:	f000 f806 	bl	8008430 <__udivmoddi4>
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	469e      	mov	lr, r3
 8008428:	b002      	add	sp, #8
 800842a:	bc0c      	pop	{r2, r3}
 800842c:	4770      	bx	lr
 800842e:	46c0      	nop			; (mov r8, r8)

08008430 <__udivmoddi4>:
 8008430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008432:	4657      	mov	r7, sl
 8008434:	464e      	mov	r6, r9
 8008436:	4645      	mov	r5, r8
 8008438:	46de      	mov	lr, fp
 800843a:	b5e0      	push	{r5, r6, r7, lr}
 800843c:	0004      	movs	r4, r0
 800843e:	000d      	movs	r5, r1
 8008440:	4692      	mov	sl, r2
 8008442:	4699      	mov	r9, r3
 8008444:	b083      	sub	sp, #12
 8008446:	428b      	cmp	r3, r1
 8008448:	d830      	bhi.n	80084ac <__udivmoddi4+0x7c>
 800844a:	d02d      	beq.n	80084a8 <__udivmoddi4+0x78>
 800844c:	4649      	mov	r1, r9
 800844e:	4650      	mov	r0, sl
 8008450:	f000 f8ba 	bl	80085c8 <__clzdi2>
 8008454:	0029      	movs	r1, r5
 8008456:	0006      	movs	r6, r0
 8008458:	0020      	movs	r0, r4
 800845a:	f000 f8b5 	bl	80085c8 <__clzdi2>
 800845e:	1a33      	subs	r3, r6, r0
 8008460:	4698      	mov	r8, r3
 8008462:	3b20      	subs	r3, #32
 8008464:	d434      	bmi.n	80084d0 <__udivmoddi4+0xa0>
 8008466:	469b      	mov	fp, r3
 8008468:	4653      	mov	r3, sl
 800846a:	465a      	mov	r2, fp
 800846c:	4093      	lsls	r3, r2
 800846e:	4642      	mov	r2, r8
 8008470:	001f      	movs	r7, r3
 8008472:	4653      	mov	r3, sl
 8008474:	4093      	lsls	r3, r2
 8008476:	001e      	movs	r6, r3
 8008478:	42af      	cmp	r7, r5
 800847a:	d83b      	bhi.n	80084f4 <__udivmoddi4+0xc4>
 800847c:	42af      	cmp	r7, r5
 800847e:	d100      	bne.n	8008482 <__udivmoddi4+0x52>
 8008480:	e079      	b.n	8008576 <__udivmoddi4+0x146>
 8008482:	465b      	mov	r3, fp
 8008484:	1ba4      	subs	r4, r4, r6
 8008486:	41bd      	sbcs	r5, r7
 8008488:	2b00      	cmp	r3, #0
 800848a:	da00      	bge.n	800848e <__udivmoddi4+0x5e>
 800848c:	e076      	b.n	800857c <__udivmoddi4+0x14c>
 800848e:	2200      	movs	r2, #0
 8008490:	2300      	movs	r3, #0
 8008492:	9200      	str	r2, [sp, #0]
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	2301      	movs	r3, #1
 8008498:	465a      	mov	r2, fp
 800849a:	4093      	lsls	r3, r2
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	2301      	movs	r3, #1
 80084a0:	4642      	mov	r2, r8
 80084a2:	4093      	lsls	r3, r2
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	e029      	b.n	80084fc <__udivmoddi4+0xcc>
 80084a8:	4282      	cmp	r2, r0
 80084aa:	d9cf      	bls.n	800844c <__udivmoddi4+0x1c>
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	9200      	str	r2, [sp, #0]
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <__udivmoddi4+0x8e>
 80084ba:	601c      	str	r4, [r3, #0]
 80084bc:	605d      	str	r5, [r3, #4]
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	9901      	ldr	r1, [sp, #4]
 80084c2:	b003      	add	sp, #12
 80084c4:	bcf0      	pop	{r4, r5, r6, r7}
 80084c6:	46bb      	mov	fp, r7
 80084c8:	46b2      	mov	sl, r6
 80084ca:	46a9      	mov	r9, r5
 80084cc:	46a0      	mov	r8, r4
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d0:	4642      	mov	r2, r8
 80084d2:	469b      	mov	fp, r3
 80084d4:	2320      	movs	r3, #32
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	4652      	mov	r2, sl
 80084da:	40da      	lsrs	r2, r3
 80084dc:	4641      	mov	r1, r8
 80084de:	0013      	movs	r3, r2
 80084e0:	464a      	mov	r2, r9
 80084e2:	408a      	lsls	r2, r1
 80084e4:	0017      	movs	r7, r2
 80084e6:	4642      	mov	r2, r8
 80084e8:	431f      	orrs	r7, r3
 80084ea:	4653      	mov	r3, sl
 80084ec:	4093      	lsls	r3, r2
 80084ee:	001e      	movs	r6, r3
 80084f0:	42af      	cmp	r7, r5
 80084f2:	d9c3      	bls.n	800847c <__udivmoddi4+0x4c>
 80084f4:	2200      	movs	r2, #0
 80084f6:	2300      	movs	r3, #0
 80084f8:	9200      	str	r2, [sp, #0]
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	4643      	mov	r3, r8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0d8      	beq.n	80084b4 <__udivmoddi4+0x84>
 8008502:	07fb      	lsls	r3, r7, #31
 8008504:	0872      	lsrs	r2, r6, #1
 8008506:	431a      	orrs	r2, r3
 8008508:	4646      	mov	r6, r8
 800850a:	087b      	lsrs	r3, r7, #1
 800850c:	e00e      	b.n	800852c <__udivmoddi4+0xfc>
 800850e:	42ab      	cmp	r3, r5
 8008510:	d101      	bne.n	8008516 <__udivmoddi4+0xe6>
 8008512:	42a2      	cmp	r2, r4
 8008514:	d80c      	bhi.n	8008530 <__udivmoddi4+0x100>
 8008516:	1aa4      	subs	r4, r4, r2
 8008518:	419d      	sbcs	r5, r3
 800851a:	2001      	movs	r0, #1
 800851c:	1924      	adds	r4, r4, r4
 800851e:	416d      	adcs	r5, r5
 8008520:	2100      	movs	r1, #0
 8008522:	3e01      	subs	r6, #1
 8008524:	1824      	adds	r4, r4, r0
 8008526:	414d      	adcs	r5, r1
 8008528:	2e00      	cmp	r6, #0
 800852a:	d006      	beq.n	800853a <__udivmoddi4+0x10a>
 800852c:	42ab      	cmp	r3, r5
 800852e:	d9ee      	bls.n	800850e <__udivmoddi4+0xde>
 8008530:	3e01      	subs	r6, #1
 8008532:	1924      	adds	r4, r4, r4
 8008534:	416d      	adcs	r5, r5
 8008536:	2e00      	cmp	r6, #0
 8008538:	d1f8      	bne.n	800852c <__udivmoddi4+0xfc>
 800853a:	9800      	ldr	r0, [sp, #0]
 800853c:	9901      	ldr	r1, [sp, #4]
 800853e:	465b      	mov	r3, fp
 8008540:	1900      	adds	r0, r0, r4
 8008542:	4169      	adcs	r1, r5
 8008544:	2b00      	cmp	r3, #0
 8008546:	db24      	blt.n	8008592 <__udivmoddi4+0x162>
 8008548:	002b      	movs	r3, r5
 800854a:	465a      	mov	r2, fp
 800854c:	4644      	mov	r4, r8
 800854e:	40d3      	lsrs	r3, r2
 8008550:	002a      	movs	r2, r5
 8008552:	40e2      	lsrs	r2, r4
 8008554:	001c      	movs	r4, r3
 8008556:	465b      	mov	r3, fp
 8008558:	0015      	movs	r5, r2
 800855a:	2b00      	cmp	r3, #0
 800855c:	db2a      	blt.n	80085b4 <__udivmoddi4+0x184>
 800855e:	0026      	movs	r6, r4
 8008560:	409e      	lsls	r6, r3
 8008562:	0033      	movs	r3, r6
 8008564:	0026      	movs	r6, r4
 8008566:	4647      	mov	r7, r8
 8008568:	40be      	lsls	r6, r7
 800856a:	0032      	movs	r2, r6
 800856c:	1a80      	subs	r0, r0, r2
 800856e:	4199      	sbcs	r1, r3
 8008570:	9000      	str	r0, [sp, #0]
 8008572:	9101      	str	r1, [sp, #4]
 8008574:	e79e      	b.n	80084b4 <__udivmoddi4+0x84>
 8008576:	42a3      	cmp	r3, r4
 8008578:	d8bc      	bhi.n	80084f4 <__udivmoddi4+0xc4>
 800857a:	e782      	b.n	8008482 <__udivmoddi4+0x52>
 800857c:	4642      	mov	r2, r8
 800857e:	2320      	movs	r3, #32
 8008580:	2100      	movs	r1, #0
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	2200      	movs	r2, #0
 8008586:	9100      	str	r1, [sp, #0]
 8008588:	9201      	str	r2, [sp, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	40da      	lsrs	r2, r3
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	e785      	b.n	800849e <__udivmoddi4+0x6e>
 8008592:	4642      	mov	r2, r8
 8008594:	2320      	movs	r3, #32
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	002a      	movs	r2, r5
 800859a:	4646      	mov	r6, r8
 800859c:	409a      	lsls	r2, r3
 800859e:	0023      	movs	r3, r4
 80085a0:	40f3      	lsrs	r3, r6
 80085a2:	4644      	mov	r4, r8
 80085a4:	4313      	orrs	r3, r2
 80085a6:	002a      	movs	r2, r5
 80085a8:	40e2      	lsrs	r2, r4
 80085aa:	001c      	movs	r4, r3
 80085ac:	465b      	mov	r3, fp
 80085ae:	0015      	movs	r5, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dad4      	bge.n	800855e <__udivmoddi4+0x12e>
 80085b4:	4642      	mov	r2, r8
 80085b6:	002f      	movs	r7, r5
 80085b8:	2320      	movs	r3, #32
 80085ba:	0026      	movs	r6, r4
 80085bc:	4097      	lsls	r7, r2
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	40de      	lsrs	r6, r3
 80085c2:	003b      	movs	r3, r7
 80085c4:	4333      	orrs	r3, r6
 80085c6:	e7cd      	b.n	8008564 <__udivmoddi4+0x134>

080085c8 <__clzdi2>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d103      	bne.n	80085d6 <__clzdi2+0xe>
 80085ce:	f000 f807 	bl	80085e0 <__clzsi2>
 80085d2:	3020      	adds	r0, #32
 80085d4:	e002      	b.n	80085dc <__clzdi2+0x14>
 80085d6:	0008      	movs	r0, r1
 80085d8:	f000 f802 	bl	80085e0 <__clzsi2>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	46c0      	nop			; (mov r8, r8)

080085e0 <__clzsi2>:
 80085e0:	211c      	movs	r1, #28
 80085e2:	2301      	movs	r3, #1
 80085e4:	041b      	lsls	r3, r3, #16
 80085e6:	4298      	cmp	r0, r3
 80085e8:	d301      	bcc.n	80085ee <__clzsi2+0xe>
 80085ea:	0c00      	lsrs	r0, r0, #16
 80085ec:	3910      	subs	r1, #16
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	4298      	cmp	r0, r3
 80085f2:	d301      	bcc.n	80085f8 <__clzsi2+0x18>
 80085f4:	0a00      	lsrs	r0, r0, #8
 80085f6:	3908      	subs	r1, #8
 80085f8:	091b      	lsrs	r3, r3, #4
 80085fa:	4298      	cmp	r0, r3
 80085fc:	d301      	bcc.n	8008602 <__clzsi2+0x22>
 80085fe:	0900      	lsrs	r0, r0, #4
 8008600:	3904      	subs	r1, #4
 8008602:	a202      	add	r2, pc, #8	; (adr r2, 800860c <__clzsi2+0x2c>)
 8008604:	5c10      	ldrb	r0, [r2, r0]
 8008606:	1840      	adds	r0, r0, r1
 8008608:	4770      	bx	lr
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	02020304 	.word	0x02020304
 8008610:	01010101 	.word	0x01010101
	...

0800861c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e00a      	b.n	8008644 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	1c4b      	adds	r3, r1, #1
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	4808      	ldr	r0, [pc, #32]	; (8008658 <_write+0x3c>)
 8008636:	2364      	movs	r3, #100	; 0x64
 8008638:	2201      	movs	r2, #1
 800863a:	f001 fd11 	bl	800a060 <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	3301      	adds	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	dbf0      	blt.n	800862e <_write+0x12>
	}
	return len;
 800864c:	687b      	ldr	r3, [r7, #4]
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b006      	add	sp, #24
 8008654:	bd80      	pop	{r7, pc}
 8008656:	46c0      	nop			; (mov r8, r8)
 8008658:	20000204 	.word	0x20000204

0800865c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008662:	f000 fa51 	bl	8008b08 <HAL_Init>

  /* USER CODE BEGIN Init */
  struct BootloaderSharedAPI *api = (struct BootloaderAPI *) 0x8075500;
 8008666:	4b08      	ldr	r3, [pc, #32]	; (8008688 <main+0x2c>)
 8008668:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800866a:	f000 f811 	bl	8008690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800866e:	f000 f8a5 	bl	80087bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008672:	f000 f855 	bl	8008720 <MX_USART2_UART_Init>
  //disable interrupts in bootloader
  while (1)
  {
    /* USER CODE END WHILE */
		//(*Functions[0])(100);
		api->Blink(100);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2064      	movs	r0, #100	; 0x64
 800867c:	4798      	blx	r3
		printf("In App \r\n");
 800867e:	4b03      	ldr	r3, [pc, #12]	; (800868c <main+0x30>)
 8008680:	0018      	movs	r0, r3
 8008682:	f002 fccb 	bl	800b01c <puts>
		api->Blink(100);
 8008686:	e7f6      	b.n	8008676 <main+0x1a>
 8008688:	08075500 	.word	0x08075500
 800868c:	0800b7d0 	.word	0x0800b7d0

08008690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b095      	sub	sp, #84	; 0x54
 8008694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008696:	2414      	movs	r4, #20
 8008698:	193b      	adds	r3, r7, r4
 800869a:	0018      	movs	r0, r3
 800869c:	233c      	movs	r3, #60	; 0x3c
 800869e:	001a      	movs	r2, r3
 80086a0:	2100      	movs	r1, #0
 80086a2:	f002 fdb7 	bl	800b214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086a6:	1d3b      	adds	r3, r7, #4
 80086a8:	0018      	movs	r0, r3
 80086aa:	2310      	movs	r3, #16
 80086ac:	001a      	movs	r2, r3
 80086ae:	2100      	movs	r1, #0
 80086b0:	f002 fdb0 	bl	800b214 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 fce9 	bl	8009090 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80086be:	193b      	adds	r3, r7, r4
 80086c0:	2202      	movs	r2, #2
 80086c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80086c4:	193b      	adds	r3, r7, r4
 80086c6:	2280      	movs	r2, #128	; 0x80
 80086c8:	0052      	lsls	r2, r2, #1
 80086ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80086cc:	193b      	adds	r3, r7, r4
 80086ce:	2200      	movs	r2, #0
 80086d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80086d2:	193b      	adds	r3, r7, r4
 80086d4:	2240      	movs	r2, #64	; 0x40
 80086d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80086d8:	193b      	adds	r3, r7, r4
 80086da:	2200      	movs	r2, #0
 80086dc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	0018      	movs	r0, r3
 80086e2:	f000 fd21 	bl	8009128 <HAL_RCC_OscConfig>
 80086e6:	1e03      	subs	r3, r0, #0
 80086e8:	d001      	beq.n	80086ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80086ea:	f000 f8b7 	bl	800885c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086ee:	1d3b      	adds	r3, r7, #4
 80086f0:	2207      	movs	r2, #7
 80086f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	2200      	movs	r2, #0
 80086f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086fa:	1d3b      	adds	r3, r7, #4
 80086fc:	2200      	movs	r2, #0
 80086fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008700:	1d3b      	adds	r3, r7, #4
 8008702:	2200      	movs	r2, #0
 8008704:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008706:	1d3b      	adds	r3, r7, #4
 8008708:	2100      	movs	r1, #0
 800870a:	0018      	movs	r0, r3
 800870c:	f001 f86c 	bl	80097e8 <HAL_RCC_ClockConfig>
 8008710:	1e03      	subs	r3, r0, #0
 8008712:	d001      	beq.n	8008718 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8008714:	f000 f8a2 	bl	800885c <Error_Handler>
  }
}
 8008718:	46c0      	nop			; (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b015      	add	sp, #84	; 0x54
 800871e:	bd90      	pop	{r4, r7, pc}

08008720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008724:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008726:	4a24      	ldr	r2, [pc, #144]	; (80087b8 <MX_USART2_UART_Init+0x98>)
 8008728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800872a:	4b22      	ldr	r3, [pc, #136]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800872c:	22e1      	movs	r2, #225	; 0xe1
 800872e:	0252      	lsls	r2, r2, #9
 8008730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008732:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008734:	2200      	movs	r2, #0
 8008736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008738:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800873a:	2200      	movs	r2, #0
 800873c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800873e:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008740:	2200      	movs	r2, #0
 8008742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008744:	4b1b      	ldr	r3, [pc, #108]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008746:	220c      	movs	r2, #12
 8008748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800874a:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800874c:	2200      	movs	r2, #0
 800874e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008750:	4b18      	ldr	r3, [pc, #96]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008752:	2200      	movs	r2, #0
 8008754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008756:	4b17      	ldr	r3, [pc, #92]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008758:	2200      	movs	r2, #0
 800875a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800875c:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800875e:	2200      	movs	r2, #0
 8008760:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008762:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 8008764:	2200      	movs	r2, #0
 8008766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008768:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800876a:	0018      	movs	r0, r3
 800876c:	f001 fc22 	bl	8009fb4 <HAL_UART_Init>
 8008770:	1e03      	subs	r3, r0, #0
 8008772:	d001      	beq.n	8008778 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008774:	f000 f872 	bl	800885c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008778:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800877a:	2100      	movs	r1, #0
 800877c:	0018      	movs	r0, r3
 800877e:	f002 fa65 	bl	800ac4c <HAL_UARTEx_SetTxFifoThreshold>
 8008782:	1e03      	subs	r3, r0, #0
 8008784:	d001      	beq.n	800878a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008786:	f000 f869 	bl	800885c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800878a:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800878c:	2100      	movs	r1, #0
 800878e:	0018      	movs	r0, r3
 8008790:	f002 fa9c 	bl	800accc <HAL_UARTEx_SetRxFifoThreshold>
 8008794:	1e03      	subs	r3, r0, #0
 8008796:	d001      	beq.n	800879c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008798:	f000 f860 	bl	800885c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <MX_USART2_UART_Init+0x94>)
 800879e:	0018      	movs	r0, r3
 80087a0:	f002 fa1a 	bl	800abd8 <HAL_UARTEx_DisableFifoMode>
 80087a4:	1e03      	subs	r3, r0, #0
 80087a6:	d001      	beq.n	80087ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80087a8:	f000 f858 	bl	800885c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80087ac:	46c0      	nop			; (mov r8, r8)
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	20000204 	.word	0x20000204
 80087b8:	40004400 	.word	0x40004400

080087bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b089      	sub	sp, #36	; 0x24
 80087c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c2:	240c      	movs	r4, #12
 80087c4:	193b      	adds	r3, r7, r4
 80087c6:	0018      	movs	r0, r3
 80087c8:	2314      	movs	r3, #20
 80087ca:	001a      	movs	r2, r3
 80087cc:	2100      	movs	r1, #0
 80087ce:	f002 fd21 	bl	800b214 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087d2:	4b21      	ldr	r3, [pc, #132]	; (8008858 <MX_GPIO_Init+0x9c>)
 80087d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d6:	4b20      	ldr	r3, [pc, #128]	; (8008858 <MX_GPIO_Init+0x9c>)
 80087d8:	2104      	movs	r1, #4
 80087da:	430a      	orrs	r2, r1
 80087dc:	635a      	str	r2, [r3, #52]	; 0x34
 80087de:	4b1e      	ldr	r3, [pc, #120]	; (8008858 <MX_GPIO_Init+0x9c>)
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	2204      	movs	r2, #4
 80087e4:	4013      	ands	r3, r2
 80087e6:	60bb      	str	r3, [r7, #8]
 80087e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087ea:	4b1b      	ldr	r3, [pc, #108]	; (8008858 <MX_GPIO_Init+0x9c>)
 80087ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ee:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <MX_GPIO_Init+0x9c>)
 80087f0:	2120      	movs	r1, #32
 80087f2:	430a      	orrs	r2, r1
 80087f4:	635a      	str	r2, [r3, #52]	; 0x34
 80087f6:	4b18      	ldr	r3, [pc, #96]	; (8008858 <MX_GPIO_Init+0x9c>)
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	2220      	movs	r2, #32
 80087fc:	4013      	ands	r3, r2
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <MX_GPIO_Init+0x9c>)
 8008804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <MX_GPIO_Init+0x9c>)
 8008808:	2101      	movs	r1, #1
 800880a:	430a      	orrs	r2, r1
 800880c:	635a      	str	r2, [r3, #52]	; 0x34
 800880e:	4b12      	ldr	r3, [pc, #72]	; (8008858 <MX_GPIO_Init+0x9c>)
 8008810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008812:	2201      	movs	r2, #1
 8008814:	4013      	ands	r3, r2
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800881a:	23a0      	movs	r3, #160	; 0xa0
 800881c:	05db      	lsls	r3, r3, #23
 800881e:	2200      	movs	r2, #0
 8008820:	2120      	movs	r1, #32
 8008822:	0018      	movs	r0, r3
 8008824:	f000 fc16 	bl	8009054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8008828:	0021      	movs	r1, r4
 800882a:	187b      	adds	r3, r7, r1
 800882c:	2220      	movs	r2, #32
 800882e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008830:	187b      	adds	r3, r7, r1
 8008832:	2201      	movs	r2, #1
 8008834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008836:	187b      	adds	r3, r7, r1
 8008838:	2200      	movs	r2, #0
 800883a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800883c:	187b      	adds	r3, r7, r1
 800883e:	2202      	movs	r2, #2
 8008840:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8008842:	187a      	adds	r2, r7, r1
 8008844:	23a0      	movs	r3, #160	; 0xa0
 8008846:	05db      	lsls	r3, r3, #23
 8008848:	0011      	movs	r1, r2
 800884a:	0018      	movs	r0, r3
 800884c:	f000 fa96 	bl	8008d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008850:	46c0      	nop			; (mov r8, r8)
 8008852:	46bd      	mov	sp, r7
 8008854:	b009      	add	sp, #36	; 0x24
 8008856:	bd90      	pop	{r4, r7, pc}
 8008858:	40021000 	.word	0x40021000

0800885c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008860:	b672      	cpsid	i
}
 8008862:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008864:	e7fe      	b.n	8008864 <Error_Handler+0x8>
	...

08008868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800886e:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <HAL_MspInit+0x44>)
 8008870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <HAL_MspInit+0x44>)
 8008874:	2101      	movs	r1, #1
 8008876:	430a      	orrs	r2, r1
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <HAL_MspInit+0x44>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	2201      	movs	r2, #1
 8008880:	4013      	ands	r3, r2
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <HAL_MspInit+0x44>)
 8008888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800888a:	4b08      	ldr	r3, [pc, #32]	; (80088ac <HAL_MspInit+0x44>)
 800888c:	2180      	movs	r1, #128	; 0x80
 800888e:	0549      	lsls	r1, r1, #21
 8008890:	430a      	orrs	r2, r1
 8008892:	63da      	str	r2, [r3, #60]	; 0x3c
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <HAL_MspInit+0x44>)
 8008896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	055b      	lsls	r3, r3, #21
 800889c:	4013      	ands	r3, r2
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b002      	add	sp, #8
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	40021000 	.word	0x40021000

080088b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b09d      	sub	sp, #116	; 0x74
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b8:	235c      	movs	r3, #92	; 0x5c
 80088ba:	18fb      	adds	r3, r7, r3
 80088bc:	0018      	movs	r0, r3
 80088be:	2314      	movs	r3, #20
 80088c0:	001a      	movs	r2, r3
 80088c2:	2100      	movs	r1, #0
 80088c4:	f002 fca6 	bl	800b214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088c8:	2410      	movs	r4, #16
 80088ca:	193b      	adds	r3, r7, r4
 80088cc:	0018      	movs	r0, r3
 80088ce:	234c      	movs	r3, #76	; 0x4c
 80088d0:	001a      	movs	r2, r3
 80088d2:	2100      	movs	r1, #0
 80088d4:	f002 fc9e 	bl	800b214 <memset>
  if(huart->Instance==USART2)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a22      	ldr	r2, [pc, #136]	; (8008968 <HAL_UART_MspInit+0xb8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d13e      	bne.n	8008960 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80088e2:	193b      	adds	r3, r7, r4
 80088e4:	2202      	movs	r2, #2
 80088e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80088e8:	193b      	adds	r3, r7, r4
 80088ea:	2200      	movs	r2, #0
 80088ec:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088ee:	193b      	adds	r3, r7, r4
 80088f0:	0018      	movs	r0, r3
 80088f2:	f001 f923 	bl	8009b3c <HAL_RCCEx_PeriphCLKConfig>
 80088f6:	1e03      	subs	r3, r0, #0
 80088f8:	d001      	beq.n	80088fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80088fa:	f7ff ffaf 	bl	800885c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80088fe:	4b1b      	ldr	r3, [pc, #108]	; (800896c <HAL_UART_MspInit+0xbc>)
 8008900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008902:	4b1a      	ldr	r3, [pc, #104]	; (800896c <HAL_UART_MspInit+0xbc>)
 8008904:	2180      	movs	r1, #128	; 0x80
 8008906:	0289      	lsls	r1, r1, #10
 8008908:	430a      	orrs	r2, r1
 800890a:	63da      	str	r2, [r3, #60]	; 0x3c
 800890c:	4b17      	ldr	r3, [pc, #92]	; (800896c <HAL_UART_MspInit+0xbc>)
 800890e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008910:	2380      	movs	r3, #128	; 0x80
 8008912:	029b      	lsls	r3, r3, #10
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891a:	4b14      	ldr	r3, [pc, #80]	; (800896c <HAL_UART_MspInit+0xbc>)
 800891c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <HAL_UART_MspInit+0xbc>)
 8008920:	2101      	movs	r1, #1
 8008922:	430a      	orrs	r2, r1
 8008924:	635a      	str	r2, [r3, #52]	; 0x34
 8008926:	4b11      	ldr	r3, [pc, #68]	; (800896c <HAL_UART_MspInit+0xbc>)
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	2201      	movs	r2, #1
 800892c:	4013      	ands	r3, r2
 800892e:	60bb      	str	r3, [r7, #8]
 8008930:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8008932:	215c      	movs	r1, #92	; 0x5c
 8008934:	187b      	adds	r3, r7, r1
 8008936:	220c      	movs	r2, #12
 8008938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893a:	187b      	adds	r3, r7, r1
 800893c:	2202      	movs	r2, #2
 800893e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008940:	187b      	adds	r3, r7, r1
 8008942:	2200      	movs	r2, #0
 8008944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008946:	187b      	adds	r3, r7, r1
 8008948:	2200      	movs	r2, #0
 800894a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800894c:	187b      	adds	r3, r7, r1
 800894e:	2201      	movs	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008952:	187a      	adds	r2, r7, r1
 8008954:	23a0      	movs	r3, #160	; 0xa0
 8008956:	05db      	lsls	r3, r3, #23
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f000 fa0e 	bl	8008d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	46bd      	mov	sp, r7
 8008964:	b01d      	add	sp, #116	; 0x74
 8008966:	bd90      	pop	{r4, r7, pc}
 8008968:	40004400 	.word	0x40004400
 800896c:	40021000 	.word	0x40021000

08008970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008974:	e7fe      	b.n	8008974 <NMI_Handler+0x4>

08008976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800897a:	e7fe      	b.n	800897a <HardFault_Handler+0x4>

0800897c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008980:	46c0      	nop			; (mov r8, r8)
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800898a:	46c0      	nop			; (mov r8, r8)
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008994:	f000 f922 	bl	8008bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e00a      	b.n	80089c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80089b0:	e000      	b.n	80089b4 <_read+0x16>
 80089b2:	bf00      	nop
 80089b4:	0001      	movs	r1, r0
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	60ba      	str	r2, [r7, #8]
 80089bc:	b2ca      	uxtb	r2, r1
 80089be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	3301      	adds	r3, #1
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	dbf0      	blt.n	80089b0 <_read+0x12>
  }

  return len;
 80089ce:	687b      	ldr	r3, [r7, #4]
}
 80089d0:	0018      	movs	r0, r3
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b006      	add	sp, #24
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80089e0:	2301      	movs	r3, #1
 80089e2:	425b      	negs	r3, r3
}
 80089e4:	0018      	movs	r0, r3
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b002      	add	sp, #8
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2280      	movs	r2, #128	; 0x80
 80089fa:	0192      	lsls	r2, r2, #6
 80089fc:	605a      	str	r2, [r3, #4]
  return 0;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b002      	add	sp, #8
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <_isatty>:

int _isatty(int file)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008a10:	2301      	movs	r3, #1
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b002      	add	sp, #8
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	0018      	movs	r0, r3
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b004      	add	sp, #16
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a38:	4a14      	ldr	r2, [pc, #80]	; (8008a8c <_sbrk+0x5c>)
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <_sbrk+0x60>)
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a44:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <_sbrk+0x64>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a4c:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <_sbrk+0x64>)
 8008a4e:	4a12      	ldr	r2, [pc, #72]	; (8008a98 <_sbrk+0x68>)
 8008a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a52:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <_sbrk+0x64>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	18d3      	adds	r3, r2, r3
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d207      	bcs.n	8008a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a60:	f002 fc2e 	bl	800b2c0 <__errno>
 8008a64:	0003      	movs	r3, r0
 8008a66:	220c      	movs	r2, #12
 8008a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	425b      	negs	r3, r3
 8008a6e:	e009      	b.n	8008a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a70:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <_sbrk+0x64>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a76:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <_sbrk+0x64>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	18d2      	adds	r2, r2, r3
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <_sbrk+0x64>)
 8008a80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	0018      	movs	r0, r3
 8008a86:	46bd      	mov	sp, r7
 8008a88:	b006      	add	sp, #24
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20024000 	.word	0x20024000
 8008a90:	00000400 	.word	0x00000400
 8008a94:	20000298 	.word	0x20000298
 8008a98:	200003f0 	.word	0x200003f0

08008a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8008aa0:	4b02      	ldr	r3, [pc, #8]	; (8008aac <SystemInit+0x10>)
 8008aa2:	4a03      	ldr	r2, [pc, #12]	; (8008ab0 <SystemInit+0x14>)
 8008aa4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	e000ed00 	.word	0xe000ed00
 8008ab0:	08008000 	.word	0x08008000

08008ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008ab4:	480d      	ldr	r0, [pc, #52]	; (8008aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008ab8:	f7ff fff0 	bl	8008a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008abc:	480c      	ldr	r0, [pc, #48]	; (8008af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008abe:	490d      	ldr	r1, [pc, #52]	; (8008af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ac0:	4a0d      	ldr	r2, [pc, #52]	; (8008af8 <LoopForever+0xe>)
  movs r3, #0
 8008ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ac4:	e002      	b.n	8008acc <LoopCopyDataInit>

08008ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008aca:	3304      	adds	r3, #4

08008acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ad0:	d3f9      	bcc.n	8008ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ad4:	4c0a      	ldr	r4, [pc, #40]	; (8008b00 <LoopForever+0x16>)
  movs r3, #0
 8008ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ad8:	e001      	b.n	8008ade <LoopFillZerobss>

08008ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008adc:	3204      	adds	r2, #4

08008ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ae0:	d3fb      	bcc.n	8008ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008ae2:	f002 fbf3 	bl	800b2cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008ae6:	f7ff fdb9 	bl	800865c <main>

08008aea <LoopForever>:

LoopForever:
  b LoopForever
 8008aea:	e7fe      	b.n	8008aea <LoopForever>
  ldr   r0, =_estack
 8008aec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008af0:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8008af4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8008af8:	0800b874 	.word	0x0800b874
  ldr r2, =_sbss
 8008afc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8008b00:	200003ec 	.word	0x200003ec

08008b04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008b04:	e7fe      	b.n	8008b04 <ADC1_COMP_IRQHandler>
	...

08008b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b0e:	1dfb      	adds	r3, r7, #7
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <HAL_Init+0x3c>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <HAL_Init+0x3c>)
 8008b1a:	2180      	movs	r1, #128	; 0x80
 8008b1c:	0049      	lsls	r1, r1, #1
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b22:	2000      	movs	r0, #0
 8008b24:	f000 f810 	bl	8008b48 <HAL_InitTick>
 8008b28:	1e03      	subs	r3, r0, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008b2c:	1dfb      	adds	r3, r7, #7
 8008b2e:	2201      	movs	r2, #1
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	e001      	b.n	8008b38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008b34:	f7ff fe98 	bl	8008868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b38:	1dfb      	adds	r3, r7, #7
 8008b3a:	781b      	ldrb	r3, [r3, #0]
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	40022000 	.word	0x40022000

08008b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b48:	b590      	push	{r4, r7, lr}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b50:	230f      	movs	r3, #15
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008b58:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <HAL_InitTick+0x88>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d02b      	beq.n	8008bb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008b60:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <HAL_InitTick+0x8c>)
 8008b62:	681c      	ldr	r4, [r3, #0]
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <HAL_InitTick+0x88>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	0019      	movs	r1, r3
 8008b6a:	23fa      	movs	r3, #250	; 0xfa
 8008b6c:	0098      	lsls	r0, r3, #2
 8008b6e:	f7ff fac9 	bl	8008104 <__udivsi3>
 8008b72:	0003      	movs	r3, r0
 8008b74:	0019      	movs	r1, r3
 8008b76:	0020      	movs	r0, r4
 8008b78:	f7ff fac4 	bl	8008104 <__udivsi3>
 8008b7c:	0003      	movs	r3, r0
 8008b7e:	0018      	movs	r0, r3
 8008b80:	f000 f8ef 	bl	8008d62 <HAL_SYSTICK_Config>
 8008b84:	1e03      	subs	r3, r0, #0
 8008b86:	d112      	bne.n	8008bae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d80a      	bhi.n	8008ba4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	2301      	movs	r3, #1
 8008b92:	425b      	negs	r3, r3
 8008b94:	2200      	movs	r2, #0
 8008b96:	0018      	movs	r0, r3
 8008b98:	f000 f8ce 	bl	8008d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b9c:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <HAL_InitTick+0x90>)
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	e00d      	b.n	8008bc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008ba4:	230f      	movs	r3, #15
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	2201      	movs	r2, #1
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e008      	b.n	8008bc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bae:	230f      	movs	r3, #15
 8008bb0:	18fb      	adds	r3, r7, r3
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e003      	b.n	8008bc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bb8:	230f      	movs	r3, #15
 8008bba:	18fb      	adds	r3, r7, r3
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008bc0:	230f      	movs	r3, #15
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	781b      	ldrb	r3, [r3, #0]
}
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	b005      	add	sp, #20
 8008bcc:	bd90      	pop	{r4, r7, pc}
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	20000188 	.word	0x20000188
 8008bd4:	20000180 	.word	0x20000180
 8008bd8:	20000184 	.word	0x20000184

08008bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008be0:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <HAL_IncTick+0x1c>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	001a      	movs	r2, r3
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <HAL_IncTick+0x20>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	18d2      	adds	r2, r2, r3
 8008bec:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <HAL_IncTick+0x20>)
 8008bee:	601a      	str	r2, [r3, #0]
}
 8008bf0:	46c0      	nop			; (mov r8, r8)
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	20000188 	.word	0x20000188
 8008bfc:	2000029c 	.word	0x2000029c

08008c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  //return _tx_time_get();
  return uwTick;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <HAL_GetTick+0x10>)
 8008c06:	681b      	ldr	r3, [r3, #0]
}
 8008c08:	0018      	movs	r0, r3
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	2000029c 	.word	0x2000029c

08008c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c14:	b590      	push	{r4, r7, lr}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	1dfb      	adds	r3, r7, #7
 8008c20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008c22:	1dfb      	adds	r3, r7, #7
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b7f      	cmp	r3, #127	; 0x7f
 8008c28:	d828      	bhi.n	8008c7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008c2a:	4a2f      	ldr	r2, [pc, #188]	; (8008ce8 <__NVIC_SetPriority+0xd4>)
 8008c2c:	1dfb      	adds	r3, r7, #7
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	089b      	lsrs	r3, r3, #2
 8008c34:	33c0      	adds	r3, #192	; 0xc0
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	589b      	ldr	r3, [r3, r2]
 8008c3a:	1dfa      	adds	r2, r7, #7
 8008c3c:	7812      	ldrb	r2, [r2, #0]
 8008c3e:	0011      	movs	r1, r2
 8008c40:	2203      	movs	r2, #3
 8008c42:	400a      	ands	r2, r1
 8008c44:	00d2      	lsls	r2, r2, #3
 8008c46:	21ff      	movs	r1, #255	; 0xff
 8008c48:	4091      	lsls	r1, r2
 8008c4a:	000a      	movs	r2, r1
 8008c4c:	43d2      	mvns	r2, r2
 8008c4e:	401a      	ands	r2, r3
 8008c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	019b      	lsls	r3, r3, #6
 8008c56:	22ff      	movs	r2, #255	; 0xff
 8008c58:	401a      	ands	r2, r3
 8008c5a:	1dfb      	adds	r3, r7, #7
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	0018      	movs	r0, r3
 8008c60:	2303      	movs	r3, #3
 8008c62:	4003      	ands	r3, r0
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008c68:	481f      	ldr	r0, [pc, #124]	; (8008ce8 <__NVIC_SetPriority+0xd4>)
 8008c6a:	1dfb      	adds	r3, r7, #7
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b25b      	sxtb	r3, r3
 8008c70:	089b      	lsrs	r3, r3, #2
 8008c72:	430a      	orrs	r2, r1
 8008c74:	33c0      	adds	r3, #192	; 0xc0
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008c7a:	e031      	b.n	8008ce0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008c7c:	4a1b      	ldr	r2, [pc, #108]	; (8008cec <__NVIC_SetPriority+0xd8>)
 8008c7e:	1dfb      	adds	r3, r7, #7
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	0019      	movs	r1, r3
 8008c84:	230f      	movs	r3, #15
 8008c86:	400b      	ands	r3, r1
 8008c88:	3b08      	subs	r3, #8
 8008c8a:	089b      	lsrs	r3, r3, #2
 8008c8c:	3306      	adds	r3, #6
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	18d3      	adds	r3, r2, r3
 8008c92:	3304      	adds	r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	1dfa      	adds	r2, r7, #7
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	0011      	movs	r1, r2
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	400a      	ands	r2, r1
 8008ca0:	00d2      	lsls	r2, r2, #3
 8008ca2:	21ff      	movs	r1, #255	; 0xff
 8008ca4:	4091      	lsls	r1, r2
 8008ca6:	000a      	movs	r2, r1
 8008ca8:	43d2      	mvns	r2, r2
 8008caa:	401a      	ands	r2, r3
 8008cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	019b      	lsls	r3, r3, #6
 8008cb2:	22ff      	movs	r2, #255	; 0xff
 8008cb4:	401a      	ands	r2, r3
 8008cb6:	1dfb      	adds	r3, r7, #7
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	0018      	movs	r0, r3
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	4003      	ands	r3, r0
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008cc4:	4809      	ldr	r0, [pc, #36]	; (8008cec <__NVIC_SetPriority+0xd8>)
 8008cc6:	1dfb      	adds	r3, r7, #7
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	001c      	movs	r4, r3
 8008ccc:	230f      	movs	r3, #15
 8008cce:	4023      	ands	r3, r4
 8008cd0:	3b08      	subs	r3, #8
 8008cd2:	089b      	lsrs	r3, r3, #2
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	3306      	adds	r3, #6
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	18c3      	adds	r3, r0, r3
 8008cdc:	3304      	adds	r3, #4
 8008cde:	601a      	str	r2, [r3, #0]
}
 8008ce0:	46c0      	nop			; (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bd90      	pop	{r4, r7, pc}
 8008ce8:	e000e100 	.word	0xe000e100
 8008cec:	e000ed00 	.word	0xe000ed00

08008cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	1e5a      	subs	r2, r3, #1
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	045b      	lsls	r3, r3, #17
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d301      	bcc.n	8008d08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d04:	2301      	movs	r3, #1
 8008d06:	e010      	b.n	8008d2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d08:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <SysTick_Config+0x44>)
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	3a01      	subs	r2, #1
 8008d0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d10:	2301      	movs	r3, #1
 8008d12:	425b      	negs	r3, r3
 8008d14:	2103      	movs	r1, #3
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7ff ff7c 	bl	8008c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <SysTick_Config+0x44>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d22:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <SysTick_Config+0x44>)
 8008d24:	2207      	movs	r2, #7
 8008d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b002      	add	sp, #8
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	e000e010 	.word	0xe000e010

08008d38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	210f      	movs	r1, #15
 8008d44:	187b      	adds	r3, r7, r1
 8008d46:	1c02      	adds	r2, r0, #0
 8008d48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	187b      	adds	r3, r7, r1
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	b25b      	sxtb	r3, r3
 8008d52:	0011      	movs	r1, r2
 8008d54:	0018      	movs	r0, r3
 8008d56:	f7ff ff5d 	bl	8008c14 <__NVIC_SetPriority>
}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	b004      	add	sp, #16
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f7ff ffbf 	bl	8008cf0 <SysTick_Config>
 8008d72:	0003      	movs	r3, r0
}
 8008d74:	0018      	movs	r0, r3
 8008d76:	46bd      	mov	sp, r7
 8008d78:	b002      	add	sp, #8
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d8a:	e14d      	b.n	8009028 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2101      	movs	r1, #1
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4091      	lsls	r1, r2
 8008d96:	000a      	movs	r2, r1
 8008d98:	4013      	ands	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d100      	bne.n	8008da4 <HAL_GPIO_Init+0x28>
 8008da2:	e13e      	b.n	8009022 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2203      	movs	r2, #3
 8008daa:	4013      	ands	r3, r2
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d005      	beq.n	8008dbc <HAL_GPIO_Init+0x40>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2203      	movs	r2, #3
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d130      	bne.n	8008e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	409a      	lsls	r2, r3
 8008dca:	0013      	movs	r3, r2
 8008dcc:	43da      	mvns	r2, r3
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	409a      	lsls	r2, r3
 8008dde:	0013      	movs	r3, r2
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008df2:	2201      	movs	r2, #1
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	409a      	lsls	r2, r3
 8008df8:	0013      	movs	r3, r2
 8008dfa:	43da      	mvns	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	091b      	lsrs	r3, r3, #4
 8008e08:	2201      	movs	r2, #1
 8008e0a:	401a      	ands	r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	409a      	lsls	r2, r3
 8008e10:	0013      	movs	r3, r2
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2203      	movs	r2, #3
 8008e24:	4013      	ands	r3, r2
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d017      	beq.n	8008e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	2203      	movs	r2, #3
 8008e36:	409a      	lsls	r2, r3
 8008e38:	0013      	movs	r3, r2
 8008e3a:	43da      	mvns	r2, r3
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	4013      	ands	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	0013      	movs	r3, r2
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	4013      	ands	r3, r2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d123      	bne.n	8008eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	08da      	lsrs	r2, r3, #3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3208      	adds	r2, #8
 8008e6e:	0092      	lsls	r2, r2, #2
 8008e70:	58d3      	ldr	r3, [r2, r3]
 8008e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2207      	movs	r2, #7
 8008e78:	4013      	ands	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	220f      	movs	r2, #15
 8008e7e:	409a      	lsls	r2, r3
 8008e80:	0013      	movs	r3, r2
 8008e82:	43da      	mvns	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	4013      	ands	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	691a      	ldr	r2, [r3, #16]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2107      	movs	r1, #7
 8008e92:	400b      	ands	r3, r1
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	409a      	lsls	r2, r3
 8008e98:	0013      	movs	r3, r2
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	08da      	lsrs	r2, r3, #3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3208      	adds	r2, #8
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	6939      	ldr	r1, [r7, #16]
 8008eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	2203      	movs	r2, #3
 8008eba:	409a      	lsls	r2, r3
 8008ebc:	0013      	movs	r3, r2
 8008ebe:	43da      	mvns	r2, r3
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2203      	movs	r2, #3
 8008ecc:	401a      	ands	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	0013      	movs	r3, r2
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	23c0      	movs	r3, #192	; 0xc0
 8008ee8:	029b      	lsls	r3, r3, #10
 8008eea:	4013      	ands	r3, r2
 8008eec:	d100      	bne.n	8008ef0 <HAL_GPIO_Init+0x174>
 8008eee:	e098      	b.n	8009022 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008ef0:	4a53      	ldr	r2, [pc, #332]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	089b      	lsrs	r3, r3, #2
 8008ef6:	3318      	adds	r3, #24
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	589b      	ldr	r3, [r3, r2]
 8008efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2203      	movs	r2, #3
 8008f02:	4013      	ands	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	220f      	movs	r2, #15
 8008f08:	409a      	lsls	r2, r3
 8008f0a:	0013      	movs	r3, r2
 8008f0c:	43da      	mvns	r2, r3
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4013      	ands	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	23a0      	movs	r3, #160	; 0xa0
 8008f18:	05db      	lsls	r3, r3, #23
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d019      	beq.n	8008f52 <HAL_GPIO_Init+0x1d6>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a48      	ldr	r2, [pc, #288]	; (8009044 <HAL_GPIO_Init+0x2c8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d013      	beq.n	8008f4e <HAL_GPIO_Init+0x1d2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a47      	ldr	r2, [pc, #284]	; (8009048 <HAL_GPIO_Init+0x2cc>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00d      	beq.n	8008f4a <HAL_GPIO_Init+0x1ce>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a46      	ldr	r2, [pc, #280]	; (800904c <HAL_GPIO_Init+0x2d0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d007      	beq.n	8008f46 <HAL_GPIO_Init+0x1ca>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a45      	ldr	r2, [pc, #276]	; (8009050 <HAL_GPIO_Init+0x2d4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d101      	bne.n	8008f42 <HAL_GPIO_Init+0x1c6>
 8008f3e:	2304      	movs	r3, #4
 8008f40:	e008      	b.n	8008f54 <HAL_GPIO_Init+0x1d8>
 8008f42:	2305      	movs	r3, #5
 8008f44:	e006      	b.n	8008f54 <HAL_GPIO_Init+0x1d8>
 8008f46:	2303      	movs	r3, #3
 8008f48:	e004      	b.n	8008f54 <HAL_GPIO_Init+0x1d8>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e002      	b.n	8008f54 <HAL_GPIO_Init+0x1d8>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <HAL_GPIO_Init+0x1d8>
 8008f52:	2300      	movs	r3, #0
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	2103      	movs	r1, #3
 8008f58:	400a      	ands	r2, r1
 8008f5a:	00d2      	lsls	r2, r2, #3
 8008f5c:	4093      	lsls	r3, r2
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008f64:	4936      	ldr	r1, [pc, #216]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	089b      	lsrs	r3, r3, #2
 8008f6a:	3318      	adds	r3, #24
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f72:	4b33      	ldr	r3, [pc, #204]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	43da      	mvns	r2, r3
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	2380      	movs	r3, #128	; 0x80
 8008f88:	035b      	lsls	r3, r3, #13
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	d003      	beq.n	8008f96 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008f96:	4b2a      	ldr	r3, [pc, #168]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008f9c:	4b28      	ldr	r3, [pc, #160]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	43da      	mvns	r2, r3
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	039b      	lsls	r3, r3, #14
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008fc0:	4b1f      	ldr	r3, [pc, #124]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008fc6:	4a1e      	ldr	r2, [pc, #120]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008fc8:	2384      	movs	r3, #132	; 0x84
 8008fca:	58d3      	ldr	r3, [r2, r3]
 8008fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	43da      	mvns	r2, r3
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	2380      	movs	r3, #128	; 0x80
 8008fde:	029b      	lsls	r3, r3, #10
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	d003      	beq.n	8008fec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008fec:	4914      	ldr	r1, [pc, #80]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008fee:	2284      	movs	r2, #132	; 0x84
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008ff4:	4a12      	ldr	r2, [pc, #72]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 8008ff6:	2380      	movs	r3, #128	; 0x80
 8008ff8:	58d3      	ldr	r3, [r2, r3]
 8008ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	43da      	mvns	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	4013      	ands	r3, r2
 8009004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	2380      	movs	r3, #128	; 0x80
 800900c:	025b      	lsls	r3, r3, #9
 800900e:	4013      	ands	r3, r2
 8009010:	d003      	beq.n	800901a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800901a:	4909      	ldr	r1, [pc, #36]	; (8009040 <HAL_GPIO_Init+0x2c4>)
 800901c:	2280      	movs	r2, #128	; 0x80
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	3301      	adds	r3, #1
 8009026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	40da      	lsrs	r2, r3
 8009030:	1e13      	subs	r3, r2, #0
 8009032:	d000      	beq.n	8009036 <HAL_GPIO_Init+0x2ba>
 8009034:	e6aa      	b.n	8008d8c <HAL_GPIO_Init+0x10>
  }
}
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	46c0      	nop			; (mov r8, r8)
 800903a:	46bd      	mov	sp, r7
 800903c:	b006      	add	sp, #24
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40021800 	.word	0x40021800
 8009044:	50000400 	.word	0x50000400
 8009048:	50000800 	.word	0x50000800
 800904c:	50000c00 	.word	0x50000c00
 8009050:	50001000 	.word	0x50001000

08009054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	0008      	movs	r0, r1
 800905e:	0011      	movs	r1, r2
 8009060:	1cbb      	adds	r3, r7, #2
 8009062:	1c02      	adds	r2, r0, #0
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	1c7b      	adds	r3, r7, #1
 8009068:	1c0a      	adds	r2, r1, #0
 800906a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800906c:	1c7b      	adds	r3, r7, #1
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009074:	1cbb      	adds	r3, r7, #2
 8009076:	881a      	ldrh	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800907c:	e003      	b.n	8009086 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800907e:	1cbb      	adds	r3, r7, #2
 8009080:	881a      	ldrh	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	46bd      	mov	sp, r7
 800908a:	b002      	add	sp, #8
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009098:	4b19      	ldr	r3, [pc, #100]	; (8009100 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a19      	ldr	r2, [pc, #100]	; (8009104 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800909e:	4013      	ands	r3, r2
 80090a0:	0019      	movs	r1, r3
 80090a2:	4b17      	ldr	r3, [pc, #92]	; (8009100 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	2380      	movs	r3, #128	; 0x80
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d11f      	bne.n	80090f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80090b4:	4b14      	ldr	r3, [pc, #80]	; (8009108 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	0013      	movs	r3, r2
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	189b      	adds	r3, r3, r2
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	4912      	ldr	r1, [pc, #72]	; (800910c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80090c2:	0018      	movs	r0, r3
 80090c4:	f7ff f81e 	bl	8008104 <__udivsi3>
 80090c8:	0003      	movs	r3, r0
 80090ca:	3301      	adds	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090ce:	e008      	b.n	80090e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b01      	subs	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	e001      	b.n	80090e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e009      	b.n	80090f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	2380      	movs	r3, #128	; 0x80
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	401a      	ands	r2, r3
 80090ec:	2380      	movs	r3, #128	; 0x80
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d0ed      	beq.n	80090d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	0018      	movs	r0, r3
 80090f8:	46bd      	mov	sp, r7
 80090fa:	b004      	add	sp, #16
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	40007000 	.word	0x40007000
 8009104:	fffff9ff 	.word	0xfffff9ff
 8009108:	20000180 	.word	0x20000180
 800910c:	000f4240 	.word	0x000f4240

08009110 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	23e0      	movs	r3, #224	; 0xe0
 800911a:	01db      	lsls	r3, r3, #7
 800911c:	4013      	ands	r3, r2
}
 800911e:	0018      	movs	r0, r3
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40021000 	.word	0x40021000

08009128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d102      	bne.n	800913c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f000 fb50 	bl	80097dc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2201      	movs	r2, #1
 8009142:	4013      	ands	r3, r2
 8009144:	d100      	bne.n	8009148 <HAL_RCC_OscConfig+0x20>
 8009146:	e07c      	b.n	8009242 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009148:	4bc3      	ldr	r3, [pc, #780]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	2238      	movs	r2, #56	; 0x38
 800914e:	4013      	ands	r3, r2
 8009150:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009152:	4bc1      	ldr	r3, [pc, #772]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2203      	movs	r2, #3
 8009158:	4013      	ands	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b10      	cmp	r3, #16
 8009160:	d102      	bne.n	8009168 <HAL_RCC_OscConfig+0x40>
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d002      	beq.n	800916e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	2b08      	cmp	r3, #8
 800916c:	d10b      	bne.n	8009186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800916e:	4bba      	ldr	r3, [pc, #744]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	2380      	movs	r3, #128	; 0x80
 8009174:	029b      	lsls	r3, r3, #10
 8009176:	4013      	ands	r3, r2
 8009178:	d062      	beq.n	8009240 <HAL_RCC_OscConfig+0x118>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d15e      	bne.n	8009240 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e32a      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	2380      	movs	r3, #128	; 0x80
 800918c:	025b      	lsls	r3, r3, #9
 800918e:	429a      	cmp	r2, r3
 8009190:	d107      	bne.n	80091a2 <HAL_RCC_OscConfig+0x7a>
 8009192:	4bb1      	ldr	r3, [pc, #708]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4bb0      	ldr	r3, [pc, #704]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009198:	2180      	movs	r1, #128	; 0x80
 800919a:	0249      	lsls	r1, r1, #9
 800919c:	430a      	orrs	r2, r1
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	e020      	b.n	80091e4 <HAL_RCC_OscConfig+0xbc>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	23a0      	movs	r3, #160	; 0xa0
 80091a8:	02db      	lsls	r3, r3, #11
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d10e      	bne.n	80091cc <HAL_RCC_OscConfig+0xa4>
 80091ae:	4baa      	ldr	r3, [pc, #680]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4ba9      	ldr	r3, [pc, #676]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091b4:	2180      	movs	r1, #128	; 0x80
 80091b6:	02c9      	lsls	r1, r1, #11
 80091b8:	430a      	orrs	r2, r1
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	4ba6      	ldr	r3, [pc, #664]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4ba5      	ldr	r3, [pc, #660]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	0249      	lsls	r1, r1, #9
 80091c6:	430a      	orrs	r2, r1
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e00b      	b.n	80091e4 <HAL_RCC_OscConfig+0xbc>
 80091cc:	4ba2      	ldr	r3, [pc, #648]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4ba1      	ldr	r3, [pc, #644]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091d2:	49a2      	ldr	r1, [pc, #648]	; (800945c <HAL_RCC_OscConfig+0x334>)
 80091d4:	400a      	ands	r2, r1
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	4b9f      	ldr	r3, [pc, #636]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b9e      	ldr	r3, [pc, #632]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80091de:	49a0      	ldr	r1, [pc, #640]	; (8009460 <HAL_RCC_OscConfig+0x338>)
 80091e0:	400a      	ands	r2, r1
 80091e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d014      	beq.n	8009216 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ec:	f7ff fd08 	bl	8008c00 <HAL_GetTick>
 80091f0:	0003      	movs	r3, r0
 80091f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091f4:	e008      	b.n	8009208 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091f6:	f7ff fd03 	bl	8008c00 <HAL_GetTick>
 80091fa:	0002      	movs	r2, r0
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b64      	cmp	r3, #100	; 0x64
 8009202:	d901      	bls.n	8009208 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e2e9      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009208:	4b93      	ldr	r3, [pc, #588]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	2380      	movs	r3, #128	; 0x80
 800920e:	029b      	lsls	r3, r3, #10
 8009210:	4013      	ands	r3, r2
 8009212:	d0f0      	beq.n	80091f6 <HAL_RCC_OscConfig+0xce>
 8009214:	e015      	b.n	8009242 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009216:	f7ff fcf3 	bl	8008c00 <HAL_GetTick>
 800921a:	0003      	movs	r3, r0
 800921c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800921e:	e008      	b.n	8009232 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009220:	f7ff fcee 	bl	8008c00 <HAL_GetTick>
 8009224:	0002      	movs	r2, r0
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b64      	cmp	r3, #100	; 0x64
 800922c:	d901      	bls.n	8009232 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e2d4      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009232:	4b89      	ldr	r3, [pc, #548]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	2380      	movs	r3, #128	; 0x80
 8009238:	029b      	lsls	r3, r3, #10
 800923a:	4013      	ands	r3, r2
 800923c:	d1f0      	bne.n	8009220 <HAL_RCC_OscConfig+0xf8>
 800923e:	e000      	b.n	8009242 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009240:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2202      	movs	r2, #2
 8009248:	4013      	ands	r3, r2
 800924a:	d100      	bne.n	800924e <HAL_RCC_OscConfig+0x126>
 800924c:	e099      	b.n	8009382 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800924e:	4b82      	ldr	r3, [pc, #520]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	2238      	movs	r2, #56	; 0x38
 8009254:	4013      	ands	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009258:	4b7f      	ldr	r3, [pc, #508]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2203      	movs	r2, #3
 800925e:	4013      	ands	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b10      	cmp	r3, #16
 8009266:	d102      	bne.n	800926e <HAL_RCC_OscConfig+0x146>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d002      	beq.n	8009274 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d135      	bne.n	80092e0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009274:	4b78      	ldr	r3, [pc, #480]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	2380      	movs	r3, #128	; 0x80
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	4013      	ands	r3, r2
 800927e:	d005      	beq.n	800928c <HAL_RCC_OscConfig+0x164>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e2a7      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800928c:	4b72      	ldr	r3, [pc, #456]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4a74      	ldr	r2, [pc, #464]	; (8009464 <HAL_RCC_OscConfig+0x33c>)
 8009292:	4013      	ands	r3, r2
 8009294:	0019      	movs	r1, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	021a      	lsls	r2, r3, #8
 800929c:	4b6e      	ldr	r3, [pc, #440]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d112      	bne.n	80092ce <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80092a8:	4b6b      	ldr	r3, [pc, #428]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a6e      	ldr	r2, [pc, #440]	; (8009468 <HAL_RCC_OscConfig+0x340>)
 80092ae:	4013      	ands	r3, r2
 80092b0:	0019      	movs	r1, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	4b68      	ldr	r3, [pc, #416]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80092b8:	430a      	orrs	r2, r1
 80092ba:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80092bc:	4b66      	ldr	r3, [pc, #408]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	0adb      	lsrs	r3, r3, #11
 80092c2:	2207      	movs	r2, #7
 80092c4:	4013      	ands	r3, r2
 80092c6:	4a69      	ldr	r2, [pc, #420]	; (800946c <HAL_RCC_OscConfig+0x344>)
 80092c8:	40da      	lsrs	r2, r3
 80092ca:	4b69      	ldr	r3, [pc, #420]	; (8009470 <HAL_RCC_OscConfig+0x348>)
 80092cc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80092ce:	4b69      	ldr	r3, [pc, #420]	; (8009474 <HAL_RCC_OscConfig+0x34c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7ff fc38 	bl	8008b48 <HAL_InitTick>
 80092d8:	1e03      	subs	r3, r0, #0
 80092da:	d051      	beq.n	8009380 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e27d      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d030      	beq.n	800934a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80092e8:	4b5b      	ldr	r3, [pc, #364]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a5e      	ldr	r2, [pc, #376]	; (8009468 <HAL_RCC_OscConfig+0x340>)
 80092ee:	4013      	ands	r3, r2
 80092f0:	0019      	movs	r1, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	4b58      	ldr	r3, [pc, #352]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80092f8:	430a      	orrs	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80092fc:	4b56      	ldr	r3, [pc, #344]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b55      	ldr	r3, [pc, #340]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009302:	2180      	movs	r1, #128	; 0x80
 8009304:	0049      	lsls	r1, r1, #1
 8009306:	430a      	orrs	r2, r1
 8009308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930a:	f7ff fc79 	bl	8008c00 <HAL_GetTick>
 800930e:	0003      	movs	r3, r0
 8009310:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009312:	e008      	b.n	8009326 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009314:	f7ff fc74 	bl	8008c00 <HAL_GetTick>
 8009318:	0002      	movs	r2, r0
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b02      	cmp	r3, #2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e25a      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009326:	4b4c      	ldr	r3, [pc, #304]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	2380      	movs	r3, #128	; 0x80
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	4013      	ands	r3, r2
 8009330:	d0f0      	beq.n	8009314 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009332:	4b49      	ldr	r3, [pc, #292]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	4a4b      	ldr	r2, [pc, #300]	; (8009464 <HAL_RCC_OscConfig+0x33c>)
 8009338:	4013      	ands	r3, r2
 800933a:	0019      	movs	r1, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	021a      	lsls	r2, r3, #8
 8009342:	4b45      	ldr	r3, [pc, #276]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009344:	430a      	orrs	r2, r1
 8009346:	605a      	str	r2, [r3, #4]
 8009348:	e01b      	b.n	8009382 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800934a:	4b43      	ldr	r3, [pc, #268]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b42      	ldr	r3, [pc, #264]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009350:	4949      	ldr	r1, [pc, #292]	; (8009478 <HAL_RCC_OscConfig+0x350>)
 8009352:	400a      	ands	r2, r1
 8009354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009356:	f7ff fc53 	bl	8008c00 <HAL_GetTick>
 800935a:	0003      	movs	r3, r0
 800935c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009360:	f7ff fc4e 	bl	8008c00 <HAL_GetTick>
 8009364:	0002      	movs	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e234      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009372:	4b39      	ldr	r3, [pc, #228]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	2380      	movs	r3, #128	; 0x80
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4013      	ands	r3, r2
 800937c:	d1f0      	bne.n	8009360 <HAL_RCC_OscConfig+0x238>
 800937e:	e000      	b.n	8009382 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009380:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2208      	movs	r2, #8
 8009388:	4013      	ands	r3, r2
 800938a:	d047      	beq.n	800941c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800938c:	4b32      	ldr	r3, [pc, #200]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2238      	movs	r2, #56	; 0x38
 8009392:	4013      	ands	r3, r2
 8009394:	2b18      	cmp	r3, #24
 8009396:	d10a      	bne.n	80093ae <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009398:	4b2f      	ldr	r3, [pc, #188]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800939a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800939c:	2202      	movs	r2, #2
 800939e:	4013      	ands	r3, r2
 80093a0:	d03c      	beq.n	800941c <HAL_RCC_OscConfig+0x2f4>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d138      	bne.n	800941c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e216      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d019      	beq.n	80093ea <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80093b6:	4b28      	ldr	r3, [pc, #160]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80093b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80093ba:	4b27      	ldr	r3, [pc, #156]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80093bc:	2101      	movs	r1, #1
 80093be:	430a      	orrs	r2, r1
 80093c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c2:	f7ff fc1d 	bl	8008c00 <HAL_GetTick>
 80093c6:	0003      	movs	r3, r0
 80093c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093cc:	f7ff fc18 	bl	8008c00 <HAL_GetTick>
 80093d0:	0002      	movs	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e1fe      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80093de:	4b1e      	ldr	r3, [pc, #120]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80093e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e2:	2202      	movs	r2, #2
 80093e4:	4013      	ands	r3, r2
 80093e6:	d0f1      	beq.n	80093cc <HAL_RCC_OscConfig+0x2a4>
 80093e8:	e018      	b.n	800941c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80093ea:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80093ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80093ee:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 80093f0:	2101      	movs	r1, #1
 80093f2:	438a      	bics	r2, r1
 80093f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f6:	f7ff fc03 	bl	8008c00 <HAL_GetTick>
 80093fa:	0003      	movs	r3, r0
 80093fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009400:	f7ff fbfe 	bl	8008c00 <HAL_GetTick>
 8009404:	0002      	movs	r2, r0
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b02      	cmp	r3, #2
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e1e4      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009412:	4b11      	ldr	r3, [pc, #68]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009416:	2202      	movs	r2, #2
 8009418:	4013      	ands	r3, r2
 800941a:	d1f1      	bne.n	8009400 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2204      	movs	r2, #4
 8009422:	4013      	ands	r3, r2
 8009424:	d100      	bne.n	8009428 <HAL_RCC_OscConfig+0x300>
 8009426:	e0c7      	b.n	80095b8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009428:	231f      	movs	r3, #31
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009430:	4b09      	ldr	r3, [pc, #36]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	2238      	movs	r2, #56	; 0x38
 8009436:	4013      	ands	r3, r2
 8009438:	2b20      	cmp	r3, #32
 800943a:	d11f      	bne.n	800947c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <HAL_RCC_OscConfig+0x330>)
 800943e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009440:	2202      	movs	r2, #2
 8009442:	4013      	ands	r3, r2
 8009444:	d100      	bne.n	8009448 <HAL_RCC_OscConfig+0x320>
 8009446:	e0b7      	b.n	80095b8 <HAL_RCC_OscConfig+0x490>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d000      	beq.n	8009452 <HAL_RCC_OscConfig+0x32a>
 8009450:	e0b2      	b.n	80095b8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e1c2      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	40021000 	.word	0x40021000
 800945c:	fffeffff 	.word	0xfffeffff
 8009460:	fffbffff 	.word	0xfffbffff
 8009464:	ffff80ff 	.word	0xffff80ff
 8009468:	ffffc7ff 	.word	0xffffc7ff
 800946c:	00f42400 	.word	0x00f42400
 8009470:	20000180 	.word	0x20000180
 8009474:	20000184 	.word	0x20000184
 8009478:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800947c:	4bb5      	ldr	r3, [pc, #724]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800947e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009480:	2380      	movs	r3, #128	; 0x80
 8009482:	055b      	lsls	r3, r3, #21
 8009484:	4013      	ands	r3, r2
 8009486:	d101      	bne.n	800948c <HAL_RCC_OscConfig+0x364>
 8009488:	2301      	movs	r3, #1
 800948a:	e000      	b.n	800948e <HAL_RCC_OscConfig+0x366>
 800948c:	2300      	movs	r3, #0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d011      	beq.n	80094b6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009492:	4bb0      	ldr	r3, [pc, #704]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009496:	4baf      	ldr	r3, [pc, #700]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009498:	2180      	movs	r1, #128	; 0x80
 800949a:	0549      	lsls	r1, r1, #21
 800949c:	430a      	orrs	r2, r1
 800949e:	63da      	str	r2, [r3, #60]	; 0x3c
 80094a0:	4bac      	ldr	r3, [pc, #688]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80094a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094a4:	2380      	movs	r3, #128	; 0x80
 80094a6:	055b      	lsls	r3, r3, #21
 80094a8:	4013      	ands	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80094ae:	231f      	movs	r3, #31
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	2201      	movs	r2, #1
 80094b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094b6:	4ba8      	ldr	r3, [pc, #672]	; (8009758 <HAL_RCC_OscConfig+0x630>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	2380      	movs	r3, #128	; 0x80
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4013      	ands	r3, r2
 80094c0:	d11a      	bne.n	80094f8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094c2:	4ba5      	ldr	r3, [pc, #660]	; (8009758 <HAL_RCC_OscConfig+0x630>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4ba4      	ldr	r3, [pc, #656]	; (8009758 <HAL_RCC_OscConfig+0x630>)
 80094c8:	2180      	movs	r1, #128	; 0x80
 80094ca:	0049      	lsls	r1, r1, #1
 80094cc:	430a      	orrs	r2, r1
 80094ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80094d0:	f7ff fb96 	bl	8008c00 <HAL_GetTick>
 80094d4:	0003      	movs	r3, r0
 80094d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094d8:	e008      	b.n	80094ec <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094da:	f7ff fb91 	bl	8008c00 <HAL_GetTick>
 80094de:	0002      	movs	r2, r0
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e177      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094ec:	4b9a      	ldr	r3, [pc, #616]	; (8009758 <HAL_RCC_OscConfig+0x630>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	4013      	ands	r3, r2
 80094f6:	d0f0      	beq.n	80094da <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d106      	bne.n	800950e <HAL_RCC_OscConfig+0x3e6>
 8009500:	4b94      	ldr	r3, [pc, #592]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009504:	4b93      	ldr	r3, [pc, #588]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009506:	2101      	movs	r1, #1
 8009508:	430a      	orrs	r2, r1
 800950a:	65da      	str	r2, [r3, #92]	; 0x5c
 800950c:	e01c      	b.n	8009548 <HAL_RCC_OscConfig+0x420>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	2b05      	cmp	r3, #5
 8009514:	d10c      	bne.n	8009530 <HAL_RCC_OscConfig+0x408>
 8009516:	4b8f      	ldr	r3, [pc, #572]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009518:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800951a:	4b8e      	ldr	r3, [pc, #568]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800951c:	2104      	movs	r1, #4
 800951e:	430a      	orrs	r2, r1
 8009520:	65da      	str	r2, [r3, #92]	; 0x5c
 8009522:	4b8c      	ldr	r3, [pc, #560]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009524:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009526:	4b8b      	ldr	r3, [pc, #556]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009528:	2101      	movs	r1, #1
 800952a:	430a      	orrs	r2, r1
 800952c:	65da      	str	r2, [r3, #92]	; 0x5c
 800952e:	e00b      	b.n	8009548 <HAL_RCC_OscConfig+0x420>
 8009530:	4b88      	ldr	r3, [pc, #544]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009534:	4b87      	ldr	r3, [pc, #540]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009536:	2101      	movs	r1, #1
 8009538:	438a      	bics	r2, r1
 800953a:	65da      	str	r2, [r3, #92]	; 0x5c
 800953c:	4b85      	ldr	r3, [pc, #532]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800953e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009540:	4b84      	ldr	r3, [pc, #528]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009542:	2104      	movs	r1, #4
 8009544:	438a      	bics	r2, r1
 8009546:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d014      	beq.n	800957a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7ff fb56 	bl	8008c00 <HAL_GetTick>
 8009554:	0003      	movs	r3, r0
 8009556:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009558:	e009      	b.n	800956e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800955a:	f7ff fb51 	bl	8008c00 <HAL_GetTick>
 800955e:	0002      	movs	r2, r0
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	4a7d      	ldr	r2, [pc, #500]	; (800975c <HAL_RCC_OscConfig+0x634>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e136      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800956e:	4b79      	ldr	r3, [pc, #484]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009572:	2202      	movs	r2, #2
 8009574:	4013      	ands	r3, r2
 8009576:	d0f0      	beq.n	800955a <HAL_RCC_OscConfig+0x432>
 8009578:	e013      	b.n	80095a2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800957a:	f7ff fb41 	bl	8008c00 <HAL_GetTick>
 800957e:	0003      	movs	r3, r0
 8009580:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009582:	e009      	b.n	8009598 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009584:	f7ff fb3c 	bl	8008c00 <HAL_GetTick>
 8009588:	0002      	movs	r2, r0
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	4a73      	ldr	r2, [pc, #460]	; (800975c <HAL_RCC_OscConfig+0x634>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d901      	bls.n	8009598 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e121      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009598:	4b6e      	ldr	r3, [pc, #440]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800959a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800959c:	2202      	movs	r2, #2
 800959e:	4013      	ands	r3, r2
 80095a0:	d1f0      	bne.n	8009584 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80095a2:	231f      	movs	r3, #31
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d105      	bne.n	80095b8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80095ac:	4b69      	ldr	r3, [pc, #420]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80095ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b0:	4b68      	ldr	r3, [pc, #416]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80095b2:	496b      	ldr	r1, [pc, #428]	; (8009760 <HAL_RCC_OscConfig+0x638>)
 80095b4:	400a      	ands	r2, r1
 80095b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2220      	movs	r2, #32
 80095be:	4013      	ands	r3, r2
 80095c0:	d039      	beq.n	8009636 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d01b      	beq.n	8009602 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80095ca:	4b62      	ldr	r3, [pc, #392]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4b61      	ldr	r3, [pc, #388]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80095d0:	2180      	movs	r1, #128	; 0x80
 80095d2:	03c9      	lsls	r1, r1, #15
 80095d4:	430a      	orrs	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095d8:	f7ff fb12 	bl	8008c00 <HAL_GetTick>
 80095dc:	0003      	movs	r3, r0
 80095de:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095e2:	f7ff fb0d 	bl	8008c00 <HAL_GetTick>
 80095e6:	0002      	movs	r2, r0
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e0f3      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80095f4:	4b57      	ldr	r3, [pc, #348]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	2380      	movs	r3, #128	; 0x80
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	4013      	ands	r3, r2
 80095fe:	d0f0      	beq.n	80095e2 <HAL_RCC_OscConfig+0x4ba>
 8009600:	e019      	b.n	8009636 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009602:	4b54      	ldr	r3, [pc, #336]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b53      	ldr	r3, [pc, #332]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009608:	4956      	ldr	r1, [pc, #344]	; (8009764 <HAL_RCC_OscConfig+0x63c>)
 800960a:	400a      	ands	r2, r1
 800960c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800960e:	f7ff faf7 	bl	8008c00 <HAL_GetTick>
 8009612:	0003      	movs	r3, r0
 8009614:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009618:	f7ff faf2 	bl	8008c00 <HAL_GetTick>
 800961c:	0002      	movs	r2, r0
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e0d8      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800962a:	4b4a      	ldr	r3, [pc, #296]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	2380      	movs	r3, #128	; 0x80
 8009630:	041b      	lsls	r3, r3, #16
 8009632:	4013      	ands	r3, r2
 8009634:	d1f0      	bne.n	8009618 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d100      	bne.n	8009640 <HAL_RCC_OscConfig+0x518>
 800963e:	e0cc      	b.n	80097da <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009640:	4b44      	ldr	r3, [pc, #272]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2238      	movs	r2, #56	; 0x38
 8009646:	4013      	ands	r3, r2
 8009648:	2b10      	cmp	r3, #16
 800964a:	d100      	bne.n	800964e <HAL_RCC_OscConfig+0x526>
 800964c:	e07b      	b.n	8009746 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d156      	bne.n	8009704 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009656:	4b3f      	ldr	r3, [pc, #252]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4b3e      	ldr	r3, [pc, #248]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800965c:	4942      	ldr	r1, [pc, #264]	; (8009768 <HAL_RCC_OscConfig+0x640>)
 800965e:	400a      	ands	r2, r1
 8009660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009662:	f7ff facd 	bl	8008c00 <HAL_GetTick>
 8009666:	0003      	movs	r3, r0
 8009668:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800966c:	f7ff fac8 	bl	8008c00 <HAL_GetTick>
 8009670:	0002      	movs	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e0ae      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800967e:	4b35      	ldr	r3, [pc, #212]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	2380      	movs	r3, #128	; 0x80
 8009684:	049b      	lsls	r3, r3, #18
 8009686:	4013      	ands	r3, r2
 8009688:	d1f0      	bne.n	800966c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800968a:	4b32      	ldr	r3, [pc, #200]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	4a37      	ldr	r2, [pc, #220]	; (800976c <HAL_RCC_OscConfig+0x644>)
 8009690:	4013      	ands	r3, r2
 8009692:	0019      	movs	r1, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	431a      	orrs	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	021b      	lsls	r3, r3, #8
 80096a4:	431a      	orrs	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	431a      	orrs	r2, r3
 80096b8:	4b26      	ldr	r3, [pc, #152]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80096ba:	430a      	orrs	r2, r1
 80096bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096be:	4b25      	ldr	r3, [pc, #148]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b24      	ldr	r3, [pc, #144]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80096c4:	2180      	movs	r1, #128	; 0x80
 80096c6:	0449      	lsls	r1, r1, #17
 80096c8:	430a      	orrs	r2, r1
 80096ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80096cc:	4b21      	ldr	r3, [pc, #132]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	4b20      	ldr	r3, [pc, #128]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80096d2:	2180      	movs	r1, #128	; 0x80
 80096d4:	0549      	lsls	r1, r1, #21
 80096d6:	430a      	orrs	r2, r1
 80096d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096da:	f7ff fa91 	bl	8008c00 <HAL_GetTick>
 80096de:	0003      	movs	r3, r0
 80096e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096e2:	e008      	b.n	80096f6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096e4:	f7ff fa8c 	bl	8008c00 <HAL_GetTick>
 80096e8:	0002      	movs	r2, r0
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d901      	bls.n	80096f6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e072      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f6:	4b17      	ldr	r3, [pc, #92]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	2380      	movs	r3, #128	; 0x80
 80096fc:	049b      	lsls	r3, r3, #18
 80096fe:	4013      	ands	r3, r2
 8009700:	d0f0      	beq.n	80096e4 <HAL_RCC_OscConfig+0x5bc>
 8009702:	e06a      	b.n	80097da <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009704:	4b13      	ldr	r3, [pc, #76]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4b12      	ldr	r3, [pc, #72]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800970a:	4917      	ldr	r1, [pc, #92]	; (8009768 <HAL_RCC_OscConfig+0x640>)
 800970c:	400a      	ands	r2, r1
 800970e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009710:	f7ff fa76 	bl	8008c00 <HAL_GetTick>
 8009714:	0003      	movs	r3, r0
 8009716:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009718:	e008      	b.n	800972c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800971a:	f7ff fa71 	bl	8008c00 <HAL_GetTick>
 800971e:	0002      	movs	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e057      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800972c:	4b09      	ldr	r3, [pc, #36]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	2380      	movs	r3, #128	; 0x80
 8009732:	049b      	lsls	r3, r3, #18
 8009734:	4013      	ands	r3, r2
 8009736:	d1f0      	bne.n	800971a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <HAL_RCC_OscConfig+0x62c>)
 800973e:	490c      	ldr	r1, [pc, #48]	; (8009770 <HAL_RCC_OscConfig+0x648>)
 8009740:	400a      	ands	r2, r1
 8009742:	60da      	str	r2, [r3, #12]
 8009744:	e049      	b.n	80097da <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d112      	bne.n	8009774 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e044      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	40021000 	.word	0x40021000
 8009758:	40007000 	.word	0x40007000
 800975c:	00001388 	.word	0x00001388
 8009760:	efffffff 	.word	0xefffffff
 8009764:	ffbfffff 	.word	0xffbfffff
 8009768:	feffffff 	.word	0xfeffffff
 800976c:	11c1808c 	.word	0x11c1808c
 8009770:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009774:	4b1b      	ldr	r3, [pc, #108]	; (80097e4 <HAL_RCC_OscConfig+0x6bc>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2203      	movs	r2, #3
 800977e:	401a      	ands	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	429a      	cmp	r2, r3
 8009786:	d126      	bne.n	80097d6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2270      	movs	r2, #112	; 0x70
 800978c:	401a      	ands	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009792:	429a      	cmp	r2, r3
 8009794:	d11f      	bne.n	80097d6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	23fe      	movs	r3, #254	; 0xfe
 800979a:	01db      	lsls	r3, r3, #7
 800979c:	401a      	ands	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d116      	bne.n	80097d6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	23f8      	movs	r3, #248	; 0xf8
 80097ac:	039b      	lsls	r3, r3, #14
 80097ae:	401a      	ands	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d10e      	bne.n	80097d6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	23e0      	movs	r3, #224	; 0xe0
 80097bc:	051b      	lsls	r3, r3, #20
 80097be:	401a      	ands	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d106      	bne.n	80097d6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	0f5b      	lsrs	r3, r3, #29
 80097cc:	075a      	lsls	r2, r3, #29
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d001      	beq.n	80097da <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e000      	b.n	80097dc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b008      	add	sp, #32
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	40021000 	.word	0x40021000

080097e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0e9      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097fc:	4b76      	ldr	r3, [pc, #472]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2207      	movs	r2, #7
 8009802:	4013      	ands	r3, r2
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d91e      	bls.n	8009848 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980a:	4b73      	ldr	r3, [pc, #460]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2207      	movs	r2, #7
 8009810:	4393      	bics	r3, r2
 8009812:	0019      	movs	r1, r3
 8009814:	4b70      	ldr	r3, [pc, #448]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800981c:	f7ff f9f0 	bl	8008c00 <HAL_GetTick>
 8009820:	0003      	movs	r3, r0
 8009822:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009824:	e009      	b.n	800983a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009826:	f7ff f9eb 	bl	8008c00 <HAL_GetTick>
 800982a:	0002      	movs	r2, r0
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	4a6a      	ldr	r2, [pc, #424]	; (80099dc <HAL_RCC_ClockConfig+0x1f4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d901      	bls.n	800983a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e0ca      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800983a:	4b67      	ldr	r3, [pc, #412]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2207      	movs	r2, #7
 8009840:	4013      	ands	r3, r2
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d1ee      	bne.n	8009826 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2202      	movs	r2, #2
 800984e:	4013      	ands	r3, r2
 8009850:	d015      	beq.n	800987e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2204      	movs	r2, #4
 8009858:	4013      	ands	r3, r2
 800985a:	d006      	beq.n	800986a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800985c:	4b60      	ldr	r3, [pc, #384]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 800985e:	689a      	ldr	r2, [r3, #8]
 8009860:	4b5f      	ldr	r3, [pc, #380]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 8009862:	21e0      	movs	r1, #224	; 0xe0
 8009864:	01c9      	lsls	r1, r1, #7
 8009866:	430a      	orrs	r2, r1
 8009868:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800986a:	4b5d      	ldr	r3, [pc, #372]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4a5d      	ldr	r2, [pc, #372]	; (80099e4 <HAL_RCC_ClockConfig+0x1fc>)
 8009870:	4013      	ands	r3, r2
 8009872:	0019      	movs	r1, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	4b59      	ldr	r3, [pc, #356]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 800987a:	430a      	orrs	r2, r1
 800987c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2201      	movs	r2, #1
 8009884:	4013      	ands	r3, r2
 8009886:	d057      	beq.n	8009938 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d107      	bne.n	80098a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009890:	4b53      	ldr	r3, [pc, #332]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	2380      	movs	r3, #128	; 0x80
 8009896:	029b      	lsls	r3, r3, #10
 8009898:	4013      	ands	r3, r2
 800989a:	d12b      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e097      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d107      	bne.n	80098b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098a8:	4b4d      	ldr	r3, [pc, #308]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	049b      	lsls	r3, r3, #18
 80098b0:	4013      	ands	r3, r2
 80098b2:	d11f      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e08b      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d107      	bne.n	80098d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80098c0:	4b47      	ldr	r3, [pc, #284]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	2380      	movs	r3, #128	; 0x80
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4013      	ands	r3, r2
 80098ca:	d113      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e07f      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d106      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098d8:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 80098da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098dc:	2202      	movs	r2, #2
 80098de:	4013      	ands	r3, r2
 80098e0:	d108      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e074      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e6:	4b3e      	ldr	r3, [pc, #248]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 80098e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ea:	2202      	movs	r2, #2
 80098ec:	4013      	ands	r3, r2
 80098ee:	d101      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e06d      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098f4:	4b3a      	ldr	r3, [pc, #232]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	2207      	movs	r2, #7
 80098fa:	4393      	bics	r3, r2
 80098fc:	0019      	movs	r1, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	4b37      	ldr	r3, [pc, #220]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 8009904:	430a      	orrs	r2, r1
 8009906:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009908:	f7ff f97a 	bl	8008c00 <HAL_GetTick>
 800990c:	0003      	movs	r3, r0
 800990e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009910:	e009      	b.n	8009926 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009912:	f7ff f975 	bl	8008c00 <HAL_GetTick>
 8009916:	0002      	movs	r2, r0
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	4a2f      	ldr	r2, [pc, #188]	; (80099dc <HAL_RCC_ClockConfig+0x1f4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e054      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009926:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2238      	movs	r2, #56	; 0x38
 800992c:	401a      	ands	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	429a      	cmp	r2, r3
 8009936:	d1ec      	bne.n	8009912 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009938:	4b27      	ldr	r3, [pc, #156]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2207      	movs	r2, #7
 800993e:	4013      	ands	r3, r2
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d21e      	bcs.n	8009984 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009946:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2207      	movs	r2, #7
 800994c:	4393      	bics	r3, r2
 800994e:	0019      	movs	r1, r3
 8009950:	4b21      	ldr	r3, [pc, #132]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	430a      	orrs	r2, r1
 8009956:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009958:	f7ff f952 	bl	8008c00 <HAL_GetTick>
 800995c:	0003      	movs	r3, r0
 800995e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009960:	e009      	b.n	8009976 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009962:	f7ff f94d 	bl	8008c00 <HAL_GetTick>
 8009966:	0002      	movs	r2, r0
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	4a1b      	ldr	r2, [pc, #108]	; (80099dc <HAL_RCC_ClockConfig+0x1f4>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e02c      	b.n	80099d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009976:	4b18      	ldr	r3, [pc, #96]	; (80099d8 <HAL_RCC_ClockConfig+0x1f0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2207      	movs	r2, #7
 800997c:	4013      	ands	r3, r2
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d1ee      	bne.n	8009962 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2204      	movs	r2, #4
 800998a:	4013      	ands	r3, r2
 800998c:	d009      	beq.n	80099a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	4a15      	ldr	r2, [pc, #84]	; (80099e8 <HAL_RCC_ClockConfig+0x200>)
 8009994:	4013      	ands	r3, r2
 8009996:	0019      	movs	r1, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68da      	ldr	r2, [r3, #12]
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 800999e:	430a      	orrs	r2, r1
 80099a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80099a2:	f000 f829 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 80099a6:	0001      	movs	r1, r0
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <HAL_RCC_ClockConfig+0x1f8>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	220f      	movs	r2, #15
 80099b0:	401a      	ands	r2, r3
 80099b2:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <HAL_RCC_ClockConfig+0x204>)
 80099b4:	0092      	lsls	r2, r2, #2
 80099b6:	58d3      	ldr	r3, [r2, r3]
 80099b8:	221f      	movs	r2, #31
 80099ba:	4013      	ands	r3, r2
 80099bc:	000a      	movs	r2, r1
 80099be:	40da      	lsrs	r2, r3
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <HAL_RCC_ClockConfig+0x208>)
 80099c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80099c4:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <HAL_RCC_ClockConfig+0x20c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	0018      	movs	r0, r3
 80099ca:	f7ff f8bd 	bl	8008b48 <HAL_InitTick>
 80099ce:	0003      	movs	r3, r0
}
 80099d0:	0018      	movs	r0, r3
 80099d2:	46bd      	mov	sp, r7
 80099d4:	b004      	add	sp, #16
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	40022000 	.word	0x40022000
 80099dc:	00001388 	.word	0x00001388
 80099e0:	40021000 	.word	0x40021000
 80099e4:	fffff0ff 	.word	0xfffff0ff
 80099e8:	ffff8fff 	.word	0xffff8fff
 80099ec:	0800b7dc 	.word	0x0800b7dc
 80099f0:	20000180 	.word	0x20000180
 80099f4:	20000184 	.word	0x20000184

080099f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80099fe:	4b3c      	ldr	r3, [pc, #240]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	2238      	movs	r2, #56	; 0x38
 8009a04:	4013      	ands	r3, r2
 8009a06:	d10f      	bne.n	8009a28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009a08:	4b39      	ldr	r3, [pc, #228]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	0adb      	lsrs	r3, r3, #11
 8009a0e:	2207      	movs	r2, #7
 8009a10:	4013      	ands	r3, r2
 8009a12:	2201      	movs	r2, #1
 8009a14:	409a      	lsls	r2, r3
 8009a16:	0013      	movs	r3, r2
 8009a18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	4835      	ldr	r0, [pc, #212]	; (8009af4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009a1e:	f7fe fb71 	bl	8008104 <__udivsi3>
 8009a22:	0003      	movs	r3, r0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	e05d      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a28:	4b31      	ldr	r3, [pc, #196]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2238      	movs	r2, #56	; 0x38
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d102      	bne.n	8009a3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009a34:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <HAL_RCC_GetSysClockFreq+0x100>)
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	e054      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a3a:	4b2d      	ldr	r3, [pc, #180]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	2238      	movs	r2, #56	; 0x38
 8009a40:	4013      	ands	r3, r2
 8009a42:	2b10      	cmp	r3, #16
 8009a44:	d138      	bne.n	8009ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009a46:	4b2a      	ldr	r3, [pc, #168]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a50:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	091b      	lsrs	r3, r3, #4
 8009a56:	2207      	movs	r2, #7
 8009a58:	4013      	ands	r3, r2
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d10d      	bne.n	8009a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	4824      	ldr	r0, [pc, #144]	; (8009af8 <HAL_RCC_GetSysClockFreq+0x100>)
 8009a68:	f7fe fb4c 	bl	8008104 <__udivsi3>
 8009a6c:	0003      	movs	r3, r0
 8009a6e:	0019      	movs	r1, r3
 8009a70:	4b1f      	ldr	r3, [pc, #124]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	227f      	movs	r2, #127	; 0x7f
 8009a78:	4013      	ands	r3, r2
 8009a7a:	434b      	muls	r3, r1
 8009a7c:	617b      	str	r3, [r7, #20]
        break;
 8009a7e:	e00d      	b.n	8009a9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	481c      	ldr	r0, [pc, #112]	; (8009af4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009a84:	f7fe fb3e 	bl	8008104 <__udivsi3>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	0019      	movs	r1, r3
 8009a8c:	4b18      	ldr	r3, [pc, #96]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	0a1b      	lsrs	r3, r3, #8
 8009a92:	227f      	movs	r2, #127	; 0x7f
 8009a94:	4013      	ands	r3, r2
 8009a96:	434b      	muls	r3, r1
 8009a98:	617b      	str	r3, [r7, #20]
        break;
 8009a9a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009a9c:	4b14      	ldr	r3, [pc, #80]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	0f5b      	lsrs	r3, r3, #29
 8009aa2:	2207      	movs	r2, #7
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	6978      	ldr	r0, [r7, #20]
 8009aae:	f7fe fb29 	bl	8008104 <__udivsi3>
 8009ab2:	0003      	movs	r3, r0
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	e015      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009ab8:	4b0d      	ldr	r3, [pc, #52]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2238      	movs	r2, #56	; 0x38
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	d103      	bne.n	8009acc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009ac4:	2380      	movs	r3, #128	; 0x80
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	e00b      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009acc:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	2238      	movs	r2, #56	; 0x38
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	2b18      	cmp	r3, #24
 8009ad6:	d103      	bne.n	8009ae0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009ad8:	23fa      	movs	r3, #250	; 0xfa
 8009ada:	01db      	lsls	r3, r3, #7
 8009adc:	613b      	str	r3, [r7, #16]
 8009ade:	e001      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ae4:	693b      	ldr	r3, [r7, #16]
}
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b006      	add	sp, #24
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	40021000 	.word	0x40021000
 8009af4:	00f42400 	.word	0x00f42400
 8009af8:	007a1200 	.word	0x007a1200

08009afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8009b02:	681b      	ldr	r3, [r3, #0]
}
 8009b04:	0018      	movs	r0, r3
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	20000180 	.word	0x20000180

08009b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b10:	b5b0      	push	{r4, r5, r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009b14:	f7ff fff2 	bl	8009afc <HAL_RCC_GetHCLKFreq>
 8009b18:	0004      	movs	r4, r0
 8009b1a:	f7ff faf9 	bl	8009110 <LL_RCC_GetAPB1Prescaler>
 8009b1e:	0003      	movs	r3, r0
 8009b20:	0b1a      	lsrs	r2, r3, #12
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b24:	0092      	lsls	r2, r2, #2
 8009b26:	58d3      	ldr	r3, [r2, r3]
 8009b28:	221f      	movs	r2, #31
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	40dc      	lsrs	r4, r3
 8009b2e:	0023      	movs	r3, r4
}
 8009b30:	0018      	movs	r0, r3
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bdb0      	pop	{r4, r5, r7, pc}
 8009b36:	46c0      	nop			; (mov r8, r8)
 8009b38:	0800b81c 	.word	0x0800b81c

08009b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009b44:	2313      	movs	r3, #19
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b4c:	2312      	movs	r3, #18
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	2380      	movs	r3, #128	; 0x80
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	d100      	bne.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009b60:	e0ad      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b62:	2011      	movs	r0, #17
 8009b64:	183b      	adds	r3, r7, r0
 8009b66:	2200      	movs	r2, #0
 8009b68:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b6a:	4b47      	ldr	r3, [pc, #284]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b6e:	2380      	movs	r3, #128	; 0x80
 8009b70:	055b      	lsls	r3, r3, #21
 8009b72:	4013      	ands	r3, r2
 8009b74:	d110      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b76:	4b44      	ldr	r3, [pc, #272]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b7a:	4b43      	ldr	r3, [pc, #268]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009b7c:	2180      	movs	r1, #128	; 0x80
 8009b7e:	0549      	lsls	r1, r1, #21
 8009b80:	430a      	orrs	r2, r1
 8009b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b84:	4b40      	ldr	r3, [pc, #256]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b88:	2380      	movs	r3, #128	; 0x80
 8009b8a:	055b      	lsls	r3, r3, #21
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60bb      	str	r3, [r7, #8]
 8009b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b92:	183b      	adds	r3, r7, r0
 8009b94:	2201      	movs	r2, #1
 8009b96:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b98:	4b3c      	ldr	r3, [pc, #240]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4b3b      	ldr	r3, [pc, #236]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009b9e:	2180      	movs	r1, #128	; 0x80
 8009ba0:	0049      	lsls	r1, r1, #1
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ba6:	f7ff f82b 	bl	8008c00 <HAL_GetTick>
 8009baa:	0003      	movs	r3, r0
 8009bac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bae:	e00b      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bb0:	f7ff f826 	bl	8008c00 <HAL_GetTick>
 8009bb4:	0002      	movs	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d904      	bls.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009bbe:	2313      	movs	r3, #19
 8009bc0:	18fb      	adds	r3, r7, r3
 8009bc2:	2203      	movs	r2, #3
 8009bc4:	701a      	strb	r2, [r3, #0]
        break;
 8009bc6:	e005      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bc8:	4b30      	ldr	r3, [pc, #192]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	d0ed      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009bd4:	2313      	movs	r3, #19
 8009bd6:	18fb      	adds	r3, r7, r3
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d15e      	bne.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bde:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009be0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009be2:	23c0      	movs	r3, #192	; 0xc0
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4013      	ands	r3, r2
 8009be8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d019      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d014      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bfe:	4a24      	ldr	r2, [pc, #144]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8009c00:	4013      	ands	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c04:	4b20      	ldr	r3, [pc, #128]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c08:	4b1f      	ldr	r3, [pc, #124]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c0a:	2180      	movs	r1, #128	; 0x80
 8009c0c:	0249      	lsls	r1, r1, #9
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c12:	4b1d      	ldr	r3, [pc, #116]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c16:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c18:	491e      	ldr	r1, [pc, #120]	; (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8009c1a:	400a      	ands	r2, r1
 8009c1c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c1e:	4b1a      	ldr	r3, [pc, #104]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2201      	movs	r2, #1
 8009c28:	4013      	ands	r3, r2
 8009c2a:	d016      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2c:	f7fe ffe8 	bl	8008c00 <HAL_GetTick>
 8009c30:	0003      	movs	r3, r0
 8009c32:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c34:	e00c      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c36:	f7fe ffe3 	bl	8008c00 <HAL_GetTick>
 8009c3a:	0002      	movs	r2, r0
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	4a15      	ldr	r2, [pc, #84]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d904      	bls.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009c46:	2313      	movs	r3, #19
 8009c48:	18fb      	adds	r3, r7, r3
 8009c4a:	2203      	movs	r2, #3
 8009c4c:	701a      	strb	r2, [r3, #0]
            break;
 8009c4e:	e004      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c50:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c54:	2202      	movs	r2, #2
 8009c56:	4013      	ands	r3, r2
 8009c58:	d0ed      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009c5a:	2313      	movs	r3, #19
 8009c5c:	18fb      	adds	r3, r7, r3
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c64:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c68:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	0019      	movs	r1, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009c74:	430a      	orrs	r2, r1
 8009c76:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c78:	e016      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c7a:	2312      	movs	r3, #18
 8009c7c:	18fb      	adds	r3, r7, r3
 8009c7e:	2213      	movs	r2, #19
 8009c80:	18ba      	adds	r2, r7, r2
 8009c82:	7812      	ldrb	r2, [r2, #0]
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e00f      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009c88:	40021000 	.word	0x40021000
 8009c8c:	40007000 	.word	0x40007000
 8009c90:	fffffcff 	.word	0xfffffcff
 8009c94:	fffeffff 	.word	0xfffeffff
 8009c98:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9c:	2312      	movs	r3, #18
 8009c9e:	18fb      	adds	r3, r7, r3
 8009ca0:	2213      	movs	r2, #19
 8009ca2:	18ba      	adds	r2, r7, r2
 8009ca4:	7812      	ldrb	r2, [r2, #0]
 8009ca6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ca8:	2311      	movs	r3, #17
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d105      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cb2:	4bb6      	ldr	r3, [pc, #728]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cb6:	4bb5      	ldr	r3, [pc, #724]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009cb8:	49b5      	ldr	r1, [pc, #724]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8009cba:	400a      	ands	r2, r1
 8009cbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	d009      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cc8:	4bb0      	ldr	r3, [pc, #704]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ccc:	2203      	movs	r2, #3
 8009cce:	4393      	bics	r3, r2
 8009cd0:	0019      	movs	r1, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	4bad      	ldr	r3, [pc, #692]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	d009      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ce6:	4ba9      	ldr	r3, [pc, #676]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cea:	220c      	movs	r2, #12
 8009cec:	4393      	bics	r3, r2
 8009cee:	0019      	movs	r1, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	4ba5      	ldr	r3, [pc, #660]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2204      	movs	r2, #4
 8009d00:	4013      	ands	r3, r2
 8009d02:	d009      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d04:	4ba1      	ldr	r3, [pc, #644]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d08:	2230      	movs	r2, #48	; 0x30
 8009d0a:	4393      	bics	r3, r2
 8009d0c:	0019      	movs	r1, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	4b9e      	ldr	r3, [pc, #632]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d14:	430a      	orrs	r2, r1
 8009d16:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2210      	movs	r2, #16
 8009d1e:	4013      	ands	r3, r2
 8009d20:	d009      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d22:	4b9a      	ldr	r3, [pc, #616]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	4a9b      	ldr	r2, [pc, #620]	; (8009f94 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	0019      	movs	r1, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	4b96      	ldr	r3, [pc, #600]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d32:	430a      	orrs	r2, r1
 8009d34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	2380      	movs	r3, #128	; 0x80
 8009d3c:	015b      	lsls	r3, r3, #5
 8009d3e:	4013      	ands	r3, r2
 8009d40:	d009      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8009d42:	4b92      	ldr	r3, [pc, #584]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d46:	4a94      	ldr	r2, [pc, #592]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009d48:	4013      	ands	r3, r2
 8009d4a:	0019      	movs	r1, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	695a      	ldr	r2, [r3, #20]
 8009d50:	4b8e      	ldr	r3, [pc, #568]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d52:	430a      	orrs	r2, r1
 8009d54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	2380      	movs	r3, #128	; 0x80
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4013      	ands	r3, r2
 8009d60:	d009      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d62:	4b8a      	ldr	r3, [pc, #552]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	4a8d      	ldr	r2, [pc, #564]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	0019      	movs	r1, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d70:	4b86      	ldr	r3, [pc, #536]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d72:	430a      	orrs	r2, r1
 8009d74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	2380      	movs	r3, #128	; 0x80
 8009d7c:	00db      	lsls	r3, r3, #3
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d009      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d82:	4b82      	ldr	r3, [pc, #520]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d86:	4a86      	ldr	r2, [pc, #536]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	0019      	movs	r1, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d90:	4b7e      	ldr	r3, [pc, #504]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009d92:	430a      	orrs	r2, r1
 8009d94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009da0:	4b7a      	ldr	r3, [pc, #488]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da4:	4a7f      	ldr	r2, [pc, #508]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009da6:	4013      	ands	r3, r2
 8009da8:	0019      	movs	r1, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699a      	ldr	r2, [r3, #24]
 8009dae:	4b77      	ldr	r3, [pc, #476]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009db0:	430a      	orrs	r2, r1
 8009db2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2240      	movs	r2, #64	; 0x40
 8009dba:	4013      	ands	r3, r2
 8009dbc:	d009      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009dbe:	4b73      	ldr	r3, [pc, #460]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc2:	4a79      	ldr	r2, [pc, #484]	; (8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	0019      	movs	r1, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69da      	ldr	r2, [r3, #28]
 8009dcc:	4b6f      	ldr	r3, [pc, #444]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	2380      	movs	r3, #128	; 0x80
 8009dd8:	01db      	lsls	r3, r3, #7
 8009dda:	4013      	ands	r3, r2
 8009ddc:	d015      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dde:	4b6b      	ldr	r3, [pc, #428]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	0899      	lsrs	r1, r3, #2
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dea:	4b68      	ldr	r3, [pc, #416]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009dec:	430a      	orrs	r2, r1
 8009dee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009df4:	2380      	movs	r3, #128	; 0x80
 8009df6:	05db      	lsls	r3, r3, #23
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d106      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009dfc:	4b63      	ldr	r3, [pc, #396]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	4b62      	ldr	r3, [pc, #392]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e02:	2180      	movs	r1, #128	; 0x80
 8009e04:	0249      	lsls	r1, r1, #9
 8009e06:	430a      	orrs	r2, r1
 8009e08:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	2380      	movs	r3, #128	; 0x80
 8009e10:	031b      	lsls	r3, r3, #12
 8009e12:	4013      	ands	r3, r2
 8009e14:	d009      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e16:	4b5d      	ldr	r3, [pc, #372]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1a:	2240      	movs	r2, #64	; 0x40
 8009e1c:	4393      	bics	r3, r2
 8009e1e:	0019      	movs	r1, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e24:	4b59      	ldr	r3, [pc, #356]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e26:	430a      	orrs	r2, r1
 8009e28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	2380      	movs	r3, #128	; 0x80
 8009e30:	039b      	lsls	r3, r3, #14
 8009e32:	4013      	ands	r3, r2
 8009e34:	d016      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009e36:	4b55      	ldr	r3, [pc, #340]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3a:	4a5c      	ldr	r2, [pc, #368]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	0019      	movs	r1, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e44:	4b51      	ldr	r3, [pc, #324]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e46:	430a      	orrs	r2, r1
 8009e48:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e4e:	2380      	movs	r3, #128	; 0x80
 8009e50:	03db      	lsls	r3, r3, #15
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d106      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009e56:	4b4d      	ldr	r3, [pc, #308]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	4b4c      	ldr	r3, [pc, #304]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e5c:	2180      	movs	r1, #128	; 0x80
 8009e5e:	0449      	lsls	r1, r1, #17
 8009e60:	430a      	orrs	r2, r1
 8009e62:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	2380      	movs	r3, #128	; 0x80
 8009e6a:	03db      	lsls	r3, r3, #15
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	d016      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009e70:	4b46      	ldr	r3, [pc, #280]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e74:	4a4e      	ldr	r2, [pc, #312]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e76:	4013      	ands	r3, r2
 8009e78:	0019      	movs	r1, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7e:	4b43      	ldr	r3, [pc, #268]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e80:	430a      	orrs	r2, r1
 8009e82:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e88:	2380      	movs	r3, #128	; 0x80
 8009e8a:	045b      	lsls	r3, r3, #17
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d106      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009e90:	4b3e      	ldr	r3, [pc, #248]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	4b3d      	ldr	r3, [pc, #244]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009e96:	2180      	movs	r1, #128	; 0x80
 8009e98:	0449      	lsls	r1, r1, #17
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	2380      	movs	r3, #128	; 0x80
 8009ea4:	011b      	lsls	r3, r3, #4
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	d014      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009eaa:	4b38      	ldr	r3, [pc, #224]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	2203      	movs	r2, #3
 8009eb0:	4393      	bics	r3, r2
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1a      	ldr	r2, [r3, #32]
 8009eb8:	4b34      	ldr	r3, [pc, #208]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d106      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009ec6:	4b31      	ldr	r3, [pc, #196]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	4b30      	ldr	r3, [pc, #192]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ecc:	2180      	movs	r1, #128	; 0x80
 8009ece:	0249      	lsls	r1, r1, #9
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	2380      	movs	r3, #128	; 0x80
 8009eda:	019b      	lsls	r3, r3, #6
 8009edc:	4013      	ands	r3, r2
 8009ede:	d014      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009ee0:	4b2a      	ldr	r3, [pc, #168]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee4:	220c      	movs	r2, #12
 8009ee6:	4393      	bics	r3, r2
 8009ee8:	0019      	movs	r1, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eee:	4b27      	ldr	r3, [pc, #156]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d106      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009efc:	4b23      	ldr	r3, [pc, #140]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	4b22      	ldr	r3, [pc, #136]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f02:	2180      	movs	r1, #128	; 0x80
 8009f04:	0249      	lsls	r1, r1, #9
 8009f06:	430a      	orrs	r2, r1
 8009f08:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	2380      	movs	r3, #128	; 0x80
 8009f10:	045b      	lsls	r3, r3, #17
 8009f12:	4013      	ands	r3, r2
 8009f14:	d016      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f16:	4b1d      	ldr	r3, [pc, #116]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f1a:	4a22      	ldr	r2, [pc, #136]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	0019      	movs	r1, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f24:	4b19      	ldr	r3, [pc, #100]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f26:	430a      	orrs	r2, r1
 8009f28:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f2e:	2380      	movs	r3, #128	; 0x80
 8009f30:	019b      	lsls	r3, r3, #6
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d106      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009f36:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	4b14      	ldr	r3, [pc, #80]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f3c:	2180      	movs	r1, #128	; 0x80
 8009f3e:	0449      	lsls	r1, r1, #17
 8009f40:	430a      	orrs	r2, r1
 8009f42:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	049b      	lsls	r3, r3, #18
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	d016      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f50:	4b0e      	ldr	r3, [pc, #56]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f54:	4a10      	ldr	r2, [pc, #64]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f56:	4013      	ands	r3, r2
 8009f58:	0019      	movs	r1, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f60:	430a      	orrs	r2, r1
 8009f62:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d106      	bne.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009f70:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f76:	2180      	movs	r1, #128	; 0x80
 8009f78:	0449      	lsls	r1, r1, #17
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009f7e:	2312      	movs	r3, #18
 8009f80:	18fb      	adds	r3, r7, r3
 8009f82:	781b      	ldrb	r3, [r3, #0]
}
 8009f84:	0018      	movs	r0, r3
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b006      	add	sp, #24
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	40021000 	.word	0x40021000
 8009f90:	efffffff 	.word	0xefffffff
 8009f94:	fffff3ff 	.word	0xfffff3ff
 8009f98:	fffffcff 	.word	0xfffffcff
 8009f9c:	fff3ffff 	.word	0xfff3ffff
 8009fa0:	ffcfffff 	.word	0xffcfffff
 8009fa4:	ffffcfff 	.word	0xffffcfff
 8009fa8:	ffff3fff 	.word	0xffff3fff
 8009fac:	ffbfffff 	.word	0xffbfffff
 8009fb0:	feffffff 	.word	0xfeffffff

08009fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e046      	b.n	800a054 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2288      	movs	r2, #136	; 0x88
 8009fca:	589b      	ldr	r3, [r3, r2]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d107      	bne.n	8009fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2284      	movs	r2, #132	; 0x84
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7fe fc68 	bl	80088b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2288      	movs	r2, #136	; 0x88
 8009fe4:	2124      	movs	r1, #36	; 0x24
 8009fe6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	438a      	bics	r2, r1
 8009ff6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f000 f8cc 	bl	800a198 <UART_SetConfig>
 800a000:	0003      	movs	r3, r0
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e024      	b.n	800a054 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	0018      	movs	r0, r3
 800a016:	f000 fc15 	bl	800a844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	490d      	ldr	r1, [pc, #52]	; (800a05c <HAL_UART_Init+0xa8>)
 800a026:	400a      	ands	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	212a      	movs	r1, #42	; 0x2a
 800a036:	438a      	bics	r2, r1
 800a038:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2101      	movs	r1, #1
 800a046:	430a      	orrs	r2, r1
 800a048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	0018      	movs	r0, r3
 800a04e:	f000 fcad 	bl	800a9ac <UART_CheckIdleState>
 800a052:	0003      	movs	r3, r0
}
 800a054:	0018      	movs	r0, r3
 800a056:	46bd      	mov	sp, r7
 800a058:	b002      	add	sp, #8
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	ffffb7ff 	.word	0xffffb7ff

0800a060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	; 0x28
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	1dbb      	adds	r3, r7, #6
 800a06e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2288      	movs	r2, #136	; 0x88
 800a074:	589b      	ldr	r3, [r3, r2]
 800a076:	2b20      	cmp	r3, #32
 800a078:	d000      	beq.n	800a07c <HAL_UART_Transmit+0x1c>
 800a07a:	e088      	b.n	800a18e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <HAL_UART_Transmit+0x2a>
 800a082:	1dbb      	adds	r3, r7, #6
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e080      	b.n	800a190 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	2380      	movs	r3, #128	; 0x80
 800a094:	015b      	lsls	r3, r3, #5
 800a096:	429a      	cmp	r2, r3
 800a098:	d109      	bne.n	800a0ae <HAL_UART_Transmit+0x4e>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d105      	bne.n	800a0ae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	d001      	beq.n	800a0ae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e070      	b.n	800a190 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2290      	movs	r2, #144	; 0x90
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2288      	movs	r2, #136	; 0x88
 800a0ba:	2121      	movs	r1, #33	; 0x21
 800a0bc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0be:	f7fe fd9f 	bl	8008c00 <HAL_GetTick>
 800a0c2:	0003      	movs	r3, r0
 800a0c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	1dba      	adds	r2, r7, #6
 800a0ca:	2154      	movs	r1, #84	; 0x54
 800a0cc:	8812      	ldrh	r2, [r2, #0]
 800a0ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	1dba      	adds	r2, r7, #6
 800a0d4:	2156      	movs	r1, #86	; 0x56
 800a0d6:	8812      	ldrh	r2, [r2, #0]
 800a0d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	2380      	movs	r3, #128	; 0x80
 800a0e0:	015b      	lsls	r3, r3, #5
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d108      	bne.n	800a0f8 <HAL_UART_Transmit+0x98>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d104      	bne.n	800a0f8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e003      	b.n	800a100 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a100:	e02c      	b.n	800a15c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	0013      	movs	r3, r2
 800a10c:	2200      	movs	r2, #0
 800a10e:	2180      	movs	r1, #128	; 0x80
 800a110:	f000 fc9a 	bl	800aa48 <UART_WaitOnFlagUntilTimeout>
 800a114:	1e03      	subs	r3, r0, #0
 800a116:	d001      	beq.n	800a11c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e039      	b.n	800a190 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	001a      	movs	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	05d2      	lsls	r2, r2, #23
 800a12e:	0dd2      	lsrs	r2, r2, #23
 800a130:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	3302      	adds	r3, #2
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	e007      	b.n	800a14a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	3301      	adds	r3, #1
 800a148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2256      	movs	r2, #86	; 0x56
 800a14e:	5a9b      	ldrh	r3, [r3, r2]
 800a150:	b29b      	uxth	r3, r3
 800a152:	3b01      	subs	r3, #1
 800a154:	b299      	uxth	r1, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2256      	movs	r2, #86	; 0x56
 800a15a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2256      	movs	r2, #86	; 0x56
 800a160:	5a9b      	ldrh	r3, [r3, r2]
 800a162:	b29b      	uxth	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1cc      	bne.n	800a102 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	0013      	movs	r3, r2
 800a172:	2200      	movs	r2, #0
 800a174:	2140      	movs	r1, #64	; 0x40
 800a176:	f000 fc67 	bl	800aa48 <UART_WaitOnFlagUntilTimeout>
 800a17a:	1e03      	subs	r3, r0, #0
 800a17c:	d001      	beq.n	800a182 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e006      	b.n	800a190 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2288      	movs	r2, #136	; 0x88
 800a186:	2120      	movs	r1, #32
 800a188:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	e000      	b.n	800a190 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800a18e:	2302      	movs	r3, #2
  }
}
 800a190:	0018      	movs	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	b008      	add	sp, #32
 800a196:	bd80      	pop	{r7, pc}

0800a198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a198:	b5b0      	push	{r4, r5, r7, lr}
 800a19a:	b090      	sub	sp, #64	; 0x40
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1a0:	231a      	movs	r3, #26
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	19db      	adds	r3, r3, r7
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4ac1      	ldr	r2, [pc, #772]	; (800a4d0 <UART_SetConfig+0x338>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	0019      	movs	r1, r3
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4abc      	ldr	r2, [pc, #752]	; (800a4d4 <UART_SetConfig+0x33c>)
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	68d9      	ldr	r1, [r3, #12]
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	0003      	movs	r3, r0
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4ab6      	ldr	r2, [pc, #728]	; (800a4d8 <UART_SetConfig+0x340>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d009      	beq.n	800a218 <UART_SetConfig+0x80>
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4ab4      	ldr	r2, [pc, #720]	; (800a4dc <UART_SetConfig+0x344>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a214:	4313      	orrs	r3, r2
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	4ab0      	ldr	r2, [pc, #704]	; (800a4e0 <UART_SetConfig+0x348>)
 800a220:	4013      	ands	r3, r2
 800a222:	0019      	movs	r1, r3
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	430b      	orrs	r3, r1
 800a22c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	220f      	movs	r2, #15
 800a236:	4393      	bics	r3, r2
 800a238:	0018      	movs	r0, r3
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	0003      	movs	r3, r0
 800a244:	430b      	orrs	r3, r1
 800a246:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4aa5      	ldr	r2, [pc, #660]	; (800a4e4 <UART_SetConfig+0x34c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d131      	bne.n	800a2b6 <UART_SetConfig+0x11e>
 800a252:	4ba5      	ldr	r3, [pc, #660]	; (800a4e8 <UART_SetConfig+0x350>)
 800a254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a256:	2203      	movs	r2, #3
 800a258:	4013      	ands	r3, r2
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d01d      	beq.n	800a29a <UART_SetConfig+0x102>
 800a25e:	d823      	bhi.n	800a2a8 <UART_SetConfig+0x110>
 800a260:	2b02      	cmp	r3, #2
 800a262:	d00c      	beq.n	800a27e <UART_SetConfig+0xe6>
 800a264:	d820      	bhi.n	800a2a8 <UART_SetConfig+0x110>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <UART_SetConfig+0xd8>
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d00e      	beq.n	800a28c <UART_SetConfig+0xf4>
 800a26e:	e01b      	b.n	800a2a8 <UART_SetConfig+0x110>
 800a270:	231b      	movs	r3, #27
 800a272:	2220      	movs	r2, #32
 800a274:	189b      	adds	r3, r3, r2
 800a276:	19db      	adds	r3, r3, r7
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
 800a27c:	e154      	b.n	800a528 <UART_SetConfig+0x390>
 800a27e:	231b      	movs	r3, #27
 800a280:	2220      	movs	r2, #32
 800a282:	189b      	adds	r3, r3, r2
 800a284:	19db      	adds	r3, r3, r7
 800a286:	2202      	movs	r2, #2
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	e14d      	b.n	800a528 <UART_SetConfig+0x390>
 800a28c:	231b      	movs	r3, #27
 800a28e:	2220      	movs	r2, #32
 800a290:	189b      	adds	r3, r3, r2
 800a292:	19db      	adds	r3, r3, r7
 800a294:	2204      	movs	r2, #4
 800a296:	701a      	strb	r2, [r3, #0]
 800a298:	e146      	b.n	800a528 <UART_SetConfig+0x390>
 800a29a:	231b      	movs	r3, #27
 800a29c:	2220      	movs	r2, #32
 800a29e:	189b      	adds	r3, r3, r2
 800a2a0:	19db      	adds	r3, r3, r7
 800a2a2:	2208      	movs	r2, #8
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	e13f      	b.n	800a528 <UART_SetConfig+0x390>
 800a2a8:	231b      	movs	r3, #27
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	189b      	adds	r3, r3, r2
 800a2ae:	19db      	adds	r3, r3, r7
 800a2b0:	2210      	movs	r2, #16
 800a2b2:	701a      	strb	r2, [r3, #0]
 800a2b4:	e138      	b.n	800a528 <UART_SetConfig+0x390>
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a8c      	ldr	r2, [pc, #560]	; (800a4ec <UART_SetConfig+0x354>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d131      	bne.n	800a324 <UART_SetConfig+0x18c>
 800a2c0:	4b89      	ldr	r3, [pc, #548]	; (800a4e8 <UART_SetConfig+0x350>)
 800a2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c4:	220c      	movs	r2, #12
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b0c      	cmp	r3, #12
 800a2ca:	d01d      	beq.n	800a308 <UART_SetConfig+0x170>
 800a2cc:	d823      	bhi.n	800a316 <UART_SetConfig+0x17e>
 800a2ce:	2b08      	cmp	r3, #8
 800a2d0:	d00c      	beq.n	800a2ec <UART_SetConfig+0x154>
 800a2d2:	d820      	bhi.n	800a316 <UART_SetConfig+0x17e>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <UART_SetConfig+0x146>
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d00e      	beq.n	800a2fa <UART_SetConfig+0x162>
 800a2dc:	e01b      	b.n	800a316 <UART_SetConfig+0x17e>
 800a2de:	231b      	movs	r3, #27
 800a2e0:	2220      	movs	r2, #32
 800a2e2:	189b      	adds	r3, r3, r2
 800a2e4:	19db      	adds	r3, r3, r7
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e11d      	b.n	800a528 <UART_SetConfig+0x390>
 800a2ec:	231b      	movs	r3, #27
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	189b      	adds	r3, r3, r2
 800a2f2:	19db      	adds	r3, r3, r7
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e116      	b.n	800a528 <UART_SetConfig+0x390>
 800a2fa:	231b      	movs	r3, #27
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	189b      	adds	r3, r3, r2
 800a300:	19db      	adds	r3, r3, r7
 800a302:	2204      	movs	r2, #4
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	e10f      	b.n	800a528 <UART_SetConfig+0x390>
 800a308:	231b      	movs	r3, #27
 800a30a:	2220      	movs	r2, #32
 800a30c:	189b      	adds	r3, r3, r2
 800a30e:	19db      	adds	r3, r3, r7
 800a310:	2208      	movs	r2, #8
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	e108      	b.n	800a528 <UART_SetConfig+0x390>
 800a316:	231b      	movs	r3, #27
 800a318:	2220      	movs	r2, #32
 800a31a:	189b      	adds	r3, r3, r2
 800a31c:	19db      	adds	r3, r3, r7
 800a31e:	2210      	movs	r2, #16
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	e101      	b.n	800a528 <UART_SetConfig+0x390>
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a71      	ldr	r2, [pc, #452]	; (800a4f0 <UART_SetConfig+0x358>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d131      	bne.n	800a392 <UART_SetConfig+0x1fa>
 800a32e:	4b6e      	ldr	r3, [pc, #440]	; (800a4e8 <UART_SetConfig+0x350>)
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	2230      	movs	r2, #48	; 0x30
 800a334:	4013      	ands	r3, r2
 800a336:	2b30      	cmp	r3, #48	; 0x30
 800a338:	d01d      	beq.n	800a376 <UART_SetConfig+0x1de>
 800a33a:	d823      	bhi.n	800a384 <UART_SetConfig+0x1ec>
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d00c      	beq.n	800a35a <UART_SetConfig+0x1c2>
 800a340:	d820      	bhi.n	800a384 <UART_SetConfig+0x1ec>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <UART_SetConfig+0x1b4>
 800a346:	2b10      	cmp	r3, #16
 800a348:	d00e      	beq.n	800a368 <UART_SetConfig+0x1d0>
 800a34a:	e01b      	b.n	800a384 <UART_SetConfig+0x1ec>
 800a34c:	231b      	movs	r3, #27
 800a34e:	2220      	movs	r2, #32
 800a350:	189b      	adds	r3, r3, r2
 800a352:	19db      	adds	r3, r3, r7
 800a354:	2200      	movs	r2, #0
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	e0e6      	b.n	800a528 <UART_SetConfig+0x390>
 800a35a:	231b      	movs	r3, #27
 800a35c:	2220      	movs	r2, #32
 800a35e:	189b      	adds	r3, r3, r2
 800a360:	19db      	adds	r3, r3, r7
 800a362:	2202      	movs	r2, #2
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	e0df      	b.n	800a528 <UART_SetConfig+0x390>
 800a368:	231b      	movs	r3, #27
 800a36a:	2220      	movs	r2, #32
 800a36c:	189b      	adds	r3, r3, r2
 800a36e:	19db      	adds	r3, r3, r7
 800a370:	2204      	movs	r2, #4
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	e0d8      	b.n	800a528 <UART_SetConfig+0x390>
 800a376:	231b      	movs	r3, #27
 800a378:	2220      	movs	r2, #32
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	19db      	adds	r3, r3, r7
 800a37e:	2208      	movs	r2, #8
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	e0d1      	b.n	800a528 <UART_SetConfig+0x390>
 800a384:	231b      	movs	r3, #27
 800a386:	2220      	movs	r2, #32
 800a388:	189b      	adds	r3, r3, r2
 800a38a:	19db      	adds	r3, r3, r7
 800a38c:	2210      	movs	r2, #16
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e0ca      	b.n	800a528 <UART_SetConfig+0x390>
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a57      	ldr	r2, [pc, #348]	; (800a4f4 <UART_SetConfig+0x35c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d106      	bne.n	800a3aa <UART_SetConfig+0x212>
 800a39c:	231b      	movs	r3, #27
 800a39e:	2220      	movs	r2, #32
 800a3a0:	189b      	adds	r3, r3, r2
 800a3a2:	19db      	adds	r3, r3, r7
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]
 800a3a8:	e0be      	b.n	800a528 <UART_SetConfig+0x390>
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a52      	ldr	r2, [pc, #328]	; (800a4f8 <UART_SetConfig+0x360>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d106      	bne.n	800a3c2 <UART_SetConfig+0x22a>
 800a3b4:	231b      	movs	r3, #27
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	189b      	adds	r3, r3, r2
 800a3ba:	19db      	adds	r3, r3, r7
 800a3bc:	2200      	movs	r2, #0
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	e0b2      	b.n	800a528 <UART_SetConfig+0x390>
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a4d      	ldr	r2, [pc, #308]	; (800a4fc <UART_SetConfig+0x364>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d106      	bne.n	800a3da <UART_SetConfig+0x242>
 800a3cc:	231b      	movs	r3, #27
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	189b      	adds	r3, r3, r2
 800a3d2:	19db      	adds	r3, r3, r7
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	701a      	strb	r2, [r3, #0]
 800a3d8:	e0a6      	b.n	800a528 <UART_SetConfig+0x390>
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a3e      	ldr	r2, [pc, #248]	; (800a4d8 <UART_SetConfig+0x340>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d13e      	bne.n	800a462 <UART_SetConfig+0x2ca>
 800a3e4:	4b40      	ldr	r3, [pc, #256]	; (800a4e8 <UART_SetConfig+0x350>)
 800a3e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3e8:	23c0      	movs	r3, #192	; 0xc0
 800a3ea:	011b      	lsls	r3, r3, #4
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	22c0      	movs	r2, #192	; 0xc0
 800a3f0:	0112      	lsls	r2, r2, #4
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d027      	beq.n	800a446 <UART_SetConfig+0x2ae>
 800a3f6:	22c0      	movs	r2, #192	; 0xc0
 800a3f8:	0112      	lsls	r2, r2, #4
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d82a      	bhi.n	800a454 <UART_SetConfig+0x2bc>
 800a3fe:	2280      	movs	r2, #128	; 0x80
 800a400:	0112      	lsls	r2, r2, #4
 800a402:	4293      	cmp	r3, r2
 800a404:	d011      	beq.n	800a42a <UART_SetConfig+0x292>
 800a406:	2280      	movs	r2, #128	; 0x80
 800a408:	0112      	lsls	r2, r2, #4
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d822      	bhi.n	800a454 <UART_SetConfig+0x2bc>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d004      	beq.n	800a41c <UART_SetConfig+0x284>
 800a412:	2280      	movs	r2, #128	; 0x80
 800a414:	00d2      	lsls	r2, r2, #3
 800a416:	4293      	cmp	r3, r2
 800a418:	d00e      	beq.n	800a438 <UART_SetConfig+0x2a0>
 800a41a:	e01b      	b.n	800a454 <UART_SetConfig+0x2bc>
 800a41c:	231b      	movs	r3, #27
 800a41e:	2220      	movs	r2, #32
 800a420:	189b      	adds	r3, r3, r2
 800a422:	19db      	adds	r3, r3, r7
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e07e      	b.n	800a528 <UART_SetConfig+0x390>
 800a42a:	231b      	movs	r3, #27
 800a42c:	2220      	movs	r2, #32
 800a42e:	189b      	adds	r3, r3, r2
 800a430:	19db      	adds	r3, r3, r7
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	e077      	b.n	800a528 <UART_SetConfig+0x390>
 800a438:	231b      	movs	r3, #27
 800a43a:	2220      	movs	r2, #32
 800a43c:	189b      	adds	r3, r3, r2
 800a43e:	19db      	adds	r3, r3, r7
 800a440:	2204      	movs	r2, #4
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	e070      	b.n	800a528 <UART_SetConfig+0x390>
 800a446:	231b      	movs	r3, #27
 800a448:	2220      	movs	r2, #32
 800a44a:	189b      	adds	r3, r3, r2
 800a44c:	19db      	adds	r3, r3, r7
 800a44e:	2208      	movs	r2, #8
 800a450:	701a      	strb	r2, [r3, #0]
 800a452:	e069      	b.n	800a528 <UART_SetConfig+0x390>
 800a454:	231b      	movs	r3, #27
 800a456:	2220      	movs	r2, #32
 800a458:	189b      	adds	r3, r3, r2
 800a45a:	19db      	adds	r3, r3, r7
 800a45c:	2210      	movs	r2, #16
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	e062      	b.n	800a528 <UART_SetConfig+0x390>
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a1d      	ldr	r2, [pc, #116]	; (800a4dc <UART_SetConfig+0x344>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d157      	bne.n	800a51c <UART_SetConfig+0x384>
 800a46c:	4b1e      	ldr	r3, [pc, #120]	; (800a4e8 <UART_SetConfig+0x350>)
 800a46e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a470:	23c0      	movs	r3, #192	; 0xc0
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4013      	ands	r3, r2
 800a476:	22c0      	movs	r2, #192	; 0xc0
 800a478:	0092      	lsls	r2, r2, #2
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d040      	beq.n	800a500 <UART_SetConfig+0x368>
 800a47e:	22c0      	movs	r2, #192	; 0xc0
 800a480:	0092      	lsls	r2, r2, #2
 800a482:	4293      	cmp	r3, r2
 800a484:	d843      	bhi.n	800a50e <UART_SetConfig+0x376>
 800a486:	2280      	movs	r2, #128	; 0x80
 800a488:	0092      	lsls	r2, r2, #2
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d011      	beq.n	800a4b2 <UART_SetConfig+0x31a>
 800a48e:	2280      	movs	r2, #128	; 0x80
 800a490:	0092      	lsls	r2, r2, #2
 800a492:	4293      	cmp	r3, r2
 800a494:	d83b      	bhi.n	800a50e <UART_SetConfig+0x376>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <UART_SetConfig+0x30c>
 800a49a:	2280      	movs	r2, #128	; 0x80
 800a49c:	0052      	lsls	r2, r2, #1
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00e      	beq.n	800a4c0 <UART_SetConfig+0x328>
 800a4a2:	e034      	b.n	800a50e <UART_SetConfig+0x376>
 800a4a4:	231b      	movs	r3, #27
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	189b      	adds	r3, r3, r2
 800a4aa:	19db      	adds	r3, r3, r7
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	701a      	strb	r2, [r3, #0]
 800a4b0:	e03a      	b.n	800a528 <UART_SetConfig+0x390>
 800a4b2:	231b      	movs	r3, #27
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	189b      	adds	r3, r3, r2
 800a4b8:	19db      	adds	r3, r3, r7
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e033      	b.n	800a528 <UART_SetConfig+0x390>
 800a4c0:	231b      	movs	r3, #27
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	189b      	adds	r3, r3, r2
 800a4c6:	19db      	adds	r3, r3, r7
 800a4c8:	2204      	movs	r2, #4
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	e02c      	b.n	800a528 <UART_SetConfig+0x390>
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	cfff69f3 	.word	0xcfff69f3
 800a4d4:	ffffcfff 	.word	0xffffcfff
 800a4d8:	40008000 	.word	0x40008000
 800a4dc:	40008400 	.word	0x40008400
 800a4e0:	11fff4ff 	.word	0x11fff4ff
 800a4e4:	40013800 	.word	0x40013800
 800a4e8:	40021000 	.word	0x40021000
 800a4ec:	40004400 	.word	0x40004400
 800a4f0:	40004800 	.word	0x40004800
 800a4f4:	40004c00 	.word	0x40004c00
 800a4f8:	40005000 	.word	0x40005000
 800a4fc:	40013c00 	.word	0x40013c00
 800a500:	231b      	movs	r3, #27
 800a502:	2220      	movs	r2, #32
 800a504:	189b      	adds	r3, r3, r2
 800a506:	19db      	adds	r3, r3, r7
 800a508:	2208      	movs	r2, #8
 800a50a:	701a      	strb	r2, [r3, #0]
 800a50c:	e00c      	b.n	800a528 <UART_SetConfig+0x390>
 800a50e:	231b      	movs	r3, #27
 800a510:	2220      	movs	r2, #32
 800a512:	189b      	adds	r3, r3, r2
 800a514:	19db      	adds	r3, r3, r7
 800a516:	2210      	movs	r2, #16
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	e005      	b.n	800a528 <UART_SetConfig+0x390>
 800a51c:	231b      	movs	r3, #27
 800a51e:	2220      	movs	r2, #32
 800a520:	189b      	adds	r3, r3, r2
 800a522:	19db      	adds	r3, r3, r7
 800a524:	2210      	movs	r2, #16
 800a526:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4ac1      	ldr	r2, [pc, #772]	; (800a834 <UART_SetConfig+0x69c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d005      	beq.n	800a53e <UART_SetConfig+0x3a6>
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4ac0      	ldr	r2, [pc, #768]	; (800a838 <UART_SetConfig+0x6a0>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d000      	beq.n	800a53e <UART_SetConfig+0x3a6>
 800a53c:	e093      	b.n	800a666 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a53e:	231b      	movs	r3, #27
 800a540:	2220      	movs	r2, #32
 800a542:	189b      	adds	r3, r3, r2
 800a544:	19db      	adds	r3, r3, r7
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d015      	beq.n	800a578 <UART_SetConfig+0x3e0>
 800a54c:	dc18      	bgt.n	800a580 <UART_SetConfig+0x3e8>
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d00d      	beq.n	800a56e <UART_SetConfig+0x3d6>
 800a552:	dc15      	bgt.n	800a580 <UART_SetConfig+0x3e8>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <UART_SetConfig+0x3c6>
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d005      	beq.n	800a568 <UART_SetConfig+0x3d0>
 800a55c:	e010      	b.n	800a580 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a55e:	f7ff fad7 	bl	8009b10 <HAL_RCC_GetPCLK1Freq>
 800a562:	0003      	movs	r3, r0
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a566:	e014      	b.n	800a592 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a568:	4bb4      	ldr	r3, [pc, #720]	; (800a83c <UART_SetConfig+0x6a4>)
 800a56a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a56c:	e011      	b.n	800a592 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a56e:	f7ff fa43 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 800a572:	0003      	movs	r3, r0
 800a574:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a576:	e00c      	b.n	800a592 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a578:	2380      	movs	r3, #128	; 0x80
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a57e:	e008      	b.n	800a592 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a584:	231a      	movs	r3, #26
 800a586:	2220      	movs	r2, #32
 800a588:	189b      	adds	r3, r3, r2
 800a58a:	19db      	adds	r3, r3, r7
 800a58c:	2201      	movs	r2, #1
 800a58e:	701a      	strb	r2, [r3, #0]
        break;
 800a590:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a594:	2b00      	cmp	r3, #0
 800a596:	d100      	bne.n	800a59a <UART_SetConfig+0x402>
 800a598:	e135      	b.n	800a806 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a59e:	4ba8      	ldr	r3, [pc, #672]	; (800a840 <UART_SetConfig+0x6a8>)
 800a5a0:	0052      	lsls	r2, r2, #1
 800a5a2:	5ad3      	ldrh	r3, [r2, r3]
 800a5a4:	0019      	movs	r1, r3
 800a5a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5a8:	f7fd fdac 	bl	8008104 <__udivsi3>
 800a5ac:	0003      	movs	r3, r0
 800a5ae:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	0013      	movs	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	189b      	adds	r3, r3, r2
 800a5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d305      	bcc.n	800a5cc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d906      	bls.n	800a5da <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800a5cc:	231a      	movs	r3, #26
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	189b      	adds	r3, r3, r2
 800a5d2:	19db      	adds	r3, r3, r7
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	e044      	b.n	800a664 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5e6:	4b96      	ldr	r3, [pc, #600]	; (800a840 <UART_SetConfig+0x6a8>)
 800a5e8:	0052      	lsls	r2, r2, #1
 800a5ea:	5ad3      	ldrh	r3, [r2, r3]
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	69b8      	ldr	r0, [r7, #24]
 800a5f8:	69f9      	ldr	r1, [r7, #28]
 800a5fa:	f7fd fef9 	bl	80083f0 <__aeabi_uldivmod>
 800a5fe:	0002      	movs	r2, r0
 800a600:	000b      	movs	r3, r1
 800a602:	0e11      	lsrs	r1, r2, #24
 800a604:	021d      	lsls	r5, r3, #8
 800a606:	430d      	orrs	r5, r1
 800a608:	0214      	lsls	r4, r2, #8
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	085b      	lsrs	r3, r3, #1
 800a610:	60bb      	str	r3, [r7, #8]
 800a612:	2300      	movs	r3, #0
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	68b8      	ldr	r0, [r7, #8]
 800a618:	68f9      	ldr	r1, [r7, #12]
 800a61a:	1900      	adds	r0, r0, r4
 800a61c:	4169      	adcs	r1, r5
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	2300      	movs	r3, #0
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f7fd fee0 	bl	80083f0 <__aeabi_uldivmod>
 800a630:	0002      	movs	r2, r0
 800a632:	000b      	movs	r3, r1
 800a634:	0013      	movs	r3, r2
 800a636:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63a:	23c0      	movs	r3, #192	; 0xc0
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	429a      	cmp	r2, r3
 800a640:	d309      	bcc.n	800a656 <UART_SetConfig+0x4be>
 800a642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a644:	2380      	movs	r3, #128	; 0x80
 800a646:	035b      	lsls	r3, r3, #13
 800a648:	429a      	cmp	r2, r3
 800a64a:	d204      	bcs.n	800a656 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	e006      	b.n	800a664 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a656:	231a      	movs	r3, #26
 800a658:	2220      	movs	r2, #32
 800a65a:	189b      	adds	r3, r3, r2
 800a65c:	19db      	adds	r3, r3, r7
 800a65e:	2201      	movs	r2, #1
 800a660:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800a662:	e0d0      	b.n	800a806 <UART_SetConfig+0x66e>
 800a664:	e0cf      	b.n	800a806 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	69da      	ldr	r2, [r3, #28]
 800a66a:	2380      	movs	r3, #128	; 0x80
 800a66c:	021b      	lsls	r3, r3, #8
 800a66e:	429a      	cmp	r2, r3
 800a670:	d000      	beq.n	800a674 <UART_SetConfig+0x4dc>
 800a672:	e070      	b.n	800a756 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800a674:	231b      	movs	r3, #27
 800a676:	2220      	movs	r2, #32
 800a678:	189b      	adds	r3, r3, r2
 800a67a:	19db      	adds	r3, r3, r7
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d015      	beq.n	800a6ae <UART_SetConfig+0x516>
 800a682:	dc18      	bgt.n	800a6b6 <UART_SetConfig+0x51e>
 800a684:	2b04      	cmp	r3, #4
 800a686:	d00d      	beq.n	800a6a4 <UART_SetConfig+0x50c>
 800a688:	dc15      	bgt.n	800a6b6 <UART_SetConfig+0x51e>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <UART_SetConfig+0x4fc>
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d005      	beq.n	800a69e <UART_SetConfig+0x506>
 800a692:	e010      	b.n	800a6b6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a694:	f7ff fa3c 	bl	8009b10 <HAL_RCC_GetPCLK1Freq>
 800a698:	0003      	movs	r3, r0
 800a69a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a69c:	e014      	b.n	800a6c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a69e:	4b67      	ldr	r3, [pc, #412]	; (800a83c <UART_SetConfig+0x6a4>)
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6a2:	e011      	b.n	800a6c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6a4:	f7ff f9a8 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 800a6a8:	0003      	movs	r3, r0
 800a6aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6ac:	e00c      	b.n	800a6c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ae:	2380      	movs	r3, #128	; 0x80
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6b4:	e008      	b.n	800a6c8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a6ba:	231a      	movs	r3, #26
 800a6bc:	2220      	movs	r2, #32
 800a6be:	189b      	adds	r3, r3, r2
 800a6c0:	19db      	adds	r3, r3, r7
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
        break;
 800a6c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d100      	bne.n	800a6d0 <UART_SetConfig+0x538>
 800a6ce:	e09a      	b.n	800a806 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6d4:	4b5a      	ldr	r3, [pc, #360]	; (800a840 <UART_SetConfig+0x6a8>)
 800a6d6:	0052      	lsls	r2, r2, #1
 800a6d8:	5ad3      	ldrh	r3, [r2, r3]
 800a6da:	0019      	movs	r1, r3
 800a6dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6de:	f7fd fd11 	bl	8008104 <__udivsi3>
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	005a      	lsls	r2, r3, #1
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	085b      	lsrs	r3, r3, #1
 800a6ec:	18d2      	adds	r2, r2, r3
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	0010      	movs	r0, r2
 800a6f6:	f7fd fd05 	bl	8008104 <__udivsi3>
 800a6fa:	0003      	movs	r3, r0
 800a6fc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	2b0f      	cmp	r3, #15
 800a702:	d921      	bls.n	800a748 <UART_SetConfig+0x5b0>
 800a704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	025b      	lsls	r3, r3, #9
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d21c      	bcs.n	800a748 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	b29a      	uxth	r2, r3
 800a712:	200e      	movs	r0, #14
 800a714:	2420      	movs	r4, #32
 800a716:	1903      	adds	r3, r0, r4
 800a718:	19db      	adds	r3, r3, r7
 800a71a:	210f      	movs	r1, #15
 800a71c:	438a      	bics	r2, r1
 800a71e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	085b      	lsrs	r3, r3, #1
 800a724:	b29b      	uxth	r3, r3
 800a726:	2207      	movs	r2, #7
 800a728:	4013      	ands	r3, r2
 800a72a:	b299      	uxth	r1, r3
 800a72c:	1903      	adds	r3, r0, r4
 800a72e:	19db      	adds	r3, r3, r7
 800a730:	1902      	adds	r2, r0, r4
 800a732:	19d2      	adds	r2, r2, r7
 800a734:	8812      	ldrh	r2, [r2, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	1902      	adds	r2, r0, r4
 800a740:	19d2      	adds	r2, r2, r7
 800a742:	8812      	ldrh	r2, [r2, #0]
 800a744:	60da      	str	r2, [r3, #12]
 800a746:	e05e      	b.n	800a806 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a748:	231a      	movs	r3, #26
 800a74a:	2220      	movs	r2, #32
 800a74c:	189b      	adds	r3, r3, r2
 800a74e:	19db      	adds	r3, r3, r7
 800a750:	2201      	movs	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	e057      	b.n	800a806 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a756:	231b      	movs	r3, #27
 800a758:	2220      	movs	r2, #32
 800a75a:	189b      	adds	r3, r3, r2
 800a75c:	19db      	adds	r3, r3, r7
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b08      	cmp	r3, #8
 800a762:	d015      	beq.n	800a790 <UART_SetConfig+0x5f8>
 800a764:	dc18      	bgt.n	800a798 <UART_SetConfig+0x600>
 800a766:	2b04      	cmp	r3, #4
 800a768:	d00d      	beq.n	800a786 <UART_SetConfig+0x5ee>
 800a76a:	dc15      	bgt.n	800a798 <UART_SetConfig+0x600>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <UART_SetConfig+0x5de>
 800a770:	2b02      	cmp	r3, #2
 800a772:	d005      	beq.n	800a780 <UART_SetConfig+0x5e8>
 800a774:	e010      	b.n	800a798 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a776:	f7ff f9cb 	bl	8009b10 <HAL_RCC_GetPCLK1Freq>
 800a77a:	0003      	movs	r3, r0
 800a77c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a77e:	e014      	b.n	800a7aa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a780:	4b2e      	ldr	r3, [pc, #184]	; (800a83c <UART_SetConfig+0x6a4>)
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a784:	e011      	b.n	800a7aa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a786:	f7ff f937 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 800a78a:	0003      	movs	r3, r0
 800a78c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a78e:	e00c      	b.n	800a7aa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a796:	e008      	b.n	800a7aa <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a79c:	231a      	movs	r3, #26
 800a79e:	2220      	movs	r2, #32
 800a7a0:	189b      	adds	r3, r3, r2
 800a7a2:	19db      	adds	r3, r3, r7
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	701a      	strb	r2, [r3, #0]
        break;
 800a7a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d02a      	beq.n	800a806 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7b4:	4b22      	ldr	r3, [pc, #136]	; (800a840 <UART_SetConfig+0x6a8>)
 800a7b6:	0052      	lsls	r2, r2, #1
 800a7b8:	5ad3      	ldrh	r3, [r2, r3]
 800a7ba:	0019      	movs	r1, r3
 800a7bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a7be:	f7fd fca1 	bl	8008104 <__udivsi3>
 800a7c2:	0003      	movs	r3, r0
 800a7c4:	001a      	movs	r2, r3
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	085b      	lsrs	r3, r3, #1
 800a7cc:	18d2      	adds	r2, r2, r3
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	0019      	movs	r1, r3
 800a7d4:	0010      	movs	r0, r2
 800a7d6:	f7fd fc95 	bl	8008104 <__udivsi3>
 800a7da:	0003      	movs	r3, r0
 800a7dc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	2b0f      	cmp	r3, #15
 800a7e2:	d90a      	bls.n	800a7fa <UART_SetConfig+0x662>
 800a7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e6:	2380      	movs	r3, #128	; 0x80
 800a7e8:	025b      	lsls	r3, r3, #9
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d205      	bcs.n	800a7fa <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60da      	str	r2, [r3, #12]
 800a7f8:	e005      	b.n	800a806 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a7fa:	231a      	movs	r3, #26
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	189b      	adds	r3, r3, r2
 800a800:	19db      	adds	r3, r3, r7
 800a802:	2201      	movs	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	226a      	movs	r2, #106	; 0x6a
 800a80a:	2101      	movs	r1, #1
 800a80c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	2268      	movs	r2, #104	; 0x68
 800a812:	2101      	movs	r1, #1
 800a814:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	2200      	movs	r2, #0
 800a81a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	2200      	movs	r2, #0
 800a820:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a822:	231a      	movs	r3, #26
 800a824:	2220      	movs	r2, #32
 800a826:	189b      	adds	r3, r3, r2
 800a828:	19db      	adds	r3, r3, r7
 800a82a:	781b      	ldrb	r3, [r3, #0]
}
 800a82c:	0018      	movs	r0, r3
 800a82e:	46bd      	mov	sp, r7
 800a830:	b010      	add	sp, #64	; 0x40
 800a832:	bdb0      	pop	{r4, r5, r7, pc}
 800a834:	40008000 	.word	0x40008000
 800a838:	40008400 	.word	0x40008400
 800a83c:	00f42400 	.word	0x00f42400
 800a840:	0800b83c 	.word	0x0800b83c

0800a844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a850:	2201      	movs	r2, #1
 800a852:	4013      	ands	r3, r2
 800a854:	d00b      	beq.n	800a86e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4a4a      	ldr	r2, [pc, #296]	; (800a988 <UART_AdvFeatureConfig+0x144>)
 800a85e:	4013      	ands	r3, r2
 800a860:	0019      	movs	r1, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	2202      	movs	r2, #2
 800a874:	4013      	ands	r3, r2
 800a876:	d00b      	beq.n	800a890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	4a43      	ldr	r2, [pc, #268]	; (800a98c <UART_AdvFeatureConfig+0x148>)
 800a880:	4013      	ands	r3, r2
 800a882:	0019      	movs	r1, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	430a      	orrs	r2, r1
 800a88e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a894:	2204      	movs	r2, #4
 800a896:	4013      	ands	r3, r2
 800a898:	d00b      	beq.n	800a8b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4a3b      	ldr	r2, [pc, #236]	; (800a990 <UART_AdvFeatureConfig+0x14c>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	0019      	movs	r1, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b6:	2208      	movs	r2, #8
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	d00b      	beq.n	800a8d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	4a34      	ldr	r2, [pc, #208]	; (800a994 <UART_AdvFeatureConfig+0x150>)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	0019      	movs	r1, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d8:	2210      	movs	r2, #16
 800a8da:	4013      	ands	r3, r2
 800a8dc:	d00b      	beq.n	800a8f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <UART_AdvFeatureConfig+0x154>)
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	0019      	movs	r1, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	d00b      	beq.n	800a918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	4a25      	ldr	r2, [pc, #148]	; (800a99c <UART_AdvFeatureConfig+0x158>)
 800a908:	4013      	ands	r3, r2
 800a90a:	0019      	movs	r1, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	430a      	orrs	r2, r1
 800a916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91c:	2240      	movs	r2, #64	; 0x40
 800a91e:	4013      	ands	r3, r2
 800a920:	d01d      	beq.n	800a95e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	4a1d      	ldr	r2, [pc, #116]	; (800a9a0 <UART_AdvFeatureConfig+0x15c>)
 800a92a:	4013      	ands	r3, r2
 800a92c:	0019      	movs	r1, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a93e:	2380      	movs	r3, #128	; 0x80
 800a940:	035b      	lsls	r3, r3, #13
 800a942:	429a      	cmp	r2, r3
 800a944:	d10b      	bne.n	800a95e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a15      	ldr	r2, [pc, #84]	; (800a9a4 <UART_AdvFeatureConfig+0x160>)
 800a94e:	4013      	ands	r3, r2
 800a950:	0019      	movs	r1, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a962:	2280      	movs	r2, #128	; 0x80
 800a964:	4013      	ands	r3, r2
 800a966:	d00b      	beq.n	800a980 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4a0e      	ldr	r2, [pc, #56]	; (800a9a8 <UART_AdvFeatureConfig+0x164>)
 800a970:	4013      	ands	r3, r2
 800a972:	0019      	movs	r1, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	605a      	str	r2, [r3, #4]
  }
}
 800a980:	46c0      	nop			; (mov r8, r8)
 800a982:	46bd      	mov	sp, r7
 800a984:	b002      	add	sp, #8
 800a986:	bd80      	pop	{r7, pc}
 800a988:	fffdffff 	.word	0xfffdffff
 800a98c:	fffeffff 	.word	0xfffeffff
 800a990:	fffbffff 	.word	0xfffbffff
 800a994:	ffff7fff 	.word	0xffff7fff
 800a998:	ffffefff 	.word	0xffffefff
 800a99c:	ffffdfff 	.word	0xffffdfff
 800a9a0:	ffefffff 	.word	0xffefffff
 800a9a4:	ff9fffff 	.word	0xff9fffff
 800a9a8:	fff7ffff 	.word	0xfff7ffff

0800a9ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2290      	movs	r2, #144	; 0x90
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9bc:	f7fe f920 	bl	8008c00 <HAL_GetTick>
 800a9c0:	0003      	movs	r3, r0
 800a9c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2208      	movs	r2, #8
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	2b08      	cmp	r3, #8
 800a9d0:	d10c      	bne.n	800a9ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2280      	movs	r2, #128	; 0x80
 800a9d6:	0391      	lsls	r1, r2, #14
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4a1a      	ldr	r2, [pc, #104]	; (800aa44 <UART_CheckIdleState+0x98>)
 800a9dc:	9200      	str	r2, [sp, #0]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f000 f832 	bl	800aa48 <UART_WaitOnFlagUntilTimeout>
 800a9e4:	1e03      	subs	r3, r0, #0
 800a9e6:	d001      	beq.n	800a9ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e026      	b.n	800aa3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d10c      	bne.n	800aa14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2280      	movs	r2, #128	; 0x80
 800a9fe:	03d1      	lsls	r1, r2, #15
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4a10      	ldr	r2, [pc, #64]	; (800aa44 <UART_CheckIdleState+0x98>)
 800aa04:	9200      	str	r2, [sp, #0]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f000 f81e 	bl	800aa48 <UART_WaitOnFlagUntilTimeout>
 800aa0c:	1e03      	subs	r3, r0, #0
 800aa0e:	d001      	beq.n	800aa14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e012      	b.n	800aa3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2288      	movs	r2, #136	; 0x88
 800aa18:	2120      	movs	r1, #32
 800aa1a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	228c      	movs	r2, #140	; 0x8c
 800aa20:	2120      	movs	r1, #32
 800aa22:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2284      	movs	r2, #132	; 0x84
 800aa34:	2100      	movs	r1, #0
 800aa36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	b004      	add	sp, #16
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	46c0      	nop			; (mov r8, r8)
 800aa44:	01ffffff 	.word	0x01ffffff

0800aa48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b094      	sub	sp, #80	; 0x50
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	1dfb      	adds	r3, r7, #7
 800aa56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa58:	e0a7      	b.n	800abaa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	d100      	bne.n	800aa62 <UART_WaitOnFlagUntilTimeout+0x1a>
 800aa60:	e0a3      	b.n	800abaa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa62:	f7fe f8cd 	bl	8008c00 <HAL_GetTick>
 800aa66:	0002      	movs	r2, r0
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d302      	bcc.n	800aa78 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d13f      	bne.n	800aaf8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa78:	f3ef 8310 	mrs	r3, PRIMASK
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa80:	647b      	str	r3, [r7, #68]	; 0x44
 800aa82:	2301      	movs	r3, #1
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	f383 8810 	msr	PRIMASK, r3
}
 800aa8c:	46c0      	nop			; (mov r8, r8)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	494e      	ldr	r1, [pc, #312]	; (800abd4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800aa9a:	400a      	ands	r2, r1
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	f383 8810 	msr	PRIMASK, r3
}
 800aaa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaaa:	f3ef 8310 	mrs	r3, PRIMASK
 800aaae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800aab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab2:	643b      	str	r3, [r7, #64]	; 0x40
 800aab4:	2301      	movs	r3, #1
 800aab6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaba:	f383 8810 	msr	PRIMASK, r3
}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2101      	movs	r1, #1
 800aacc:	438a      	bics	r2, r1
 800aace:	609a      	str	r2, [r3, #8]
 800aad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad6:	f383 8810 	msr	PRIMASK, r3
}
 800aada:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2288      	movs	r2, #136	; 0x88
 800aae0:	2120      	movs	r1, #32
 800aae2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	228c      	movs	r2, #140	; 0x8c
 800aae8:	2120      	movs	r1, #32
 800aaea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2284      	movs	r2, #132	; 0x84
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e069      	b.n	800abcc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2204      	movs	r2, #4
 800ab00:	4013      	ands	r3, r2
 800ab02:	d052      	beq.n	800abaa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	69da      	ldr	r2, [r3, #28]
 800ab0a:	2380      	movs	r3, #128	; 0x80
 800ab0c:	011b      	lsls	r3, r3, #4
 800ab0e:	401a      	ands	r2, r3
 800ab10:	2380      	movs	r3, #128	; 0x80
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d148      	bne.n	800abaa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2280      	movs	r2, #128	; 0x80
 800ab1e:	0112      	lsls	r2, r2, #4
 800ab20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab22:	f3ef 8310 	mrs	r3, PRIMASK
 800ab26:	613b      	str	r3, [r7, #16]
  return(result);
 800ab28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f383 8810 	msr	PRIMASK, r3
}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4924      	ldr	r1, [pc, #144]	; (800abd4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800ab44:	400a      	ands	r2, r1
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	f383 8810 	msr	PRIMASK, r3
}
 800ab52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab54:	f3ef 8310 	mrs	r3, PRIMASK
 800ab58:	61fb      	str	r3, [r7, #28]
  return(result);
 800ab5a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab5e:	2301      	movs	r3, #1
 800ab60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	f383 8810 	msr	PRIMASK, r3
}
 800ab68:	46c0      	nop			; (mov r8, r8)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2101      	movs	r1, #1
 800ab76:	438a      	bics	r2, r1
 800ab78:	609a      	str	r2, [r3, #8]
 800ab7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	f383 8810 	msr	PRIMASK, r3
}
 800ab84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2288      	movs	r2, #136	; 0x88
 800ab8a:	2120      	movs	r1, #32
 800ab8c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	228c      	movs	r2, #140	; 0x8c
 800ab92:	2120      	movs	r1, #32
 800ab94:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2290      	movs	r2, #144	; 0x90
 800ab9a:	2120      	movs	r1, #32
 800ab9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2284      	movs	r2, #132	; 0x84
 800aba2:	2100      	movs	r1, #0
 800aba4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e010      	b.n	800abcc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	4013      	ands	r3, r2
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	425a      	negs	r2, r3
 800abba:	4153      	adcs	r3, r2
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	001a      	movs	r2, r3
 800abc0:	1dfb      	adds	r3, r7, #7
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d100      	bne.n	800abca <UART_WaitOnFlagUntilTimeout+0x182>
 800abc8:	e747      	b.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	0018      	movs	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	b014      	add	sp, #80	; 0x50
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	fffffe5f 	.word	0xfffffe5f

0800abd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2284      	movs	r2, #132	; 0x84
 800abe4:	5c9b      	ldrb	r3, [r3, r2]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <HAL_UARTEx_DisableFifoMode+0x16>
 800abea:	2302      	movs	r3, #2
 800abec:	e027      	b.n	800ac3e <HAL_UARTEx_DisableFifoMode+0x66>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2284      	movs	r2, #132	; 0x84
 800abf2:	2101      	movs	r1, #1
 800abf4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2288      	movs	r2, #136	; 0x88
 800abfa:	2124      	movs	r1, #36	; 0x24
 800abfc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2101      	movs	r1, #1
 800ac12:	438a      	bics	r2, r1
 800ac14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4a0b      	ldr	r2, [pc, #44]	; (800ac48 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2288      	movs	r2, #136	; 0x88
 800ac30:	2120      	movs	r1, #32
 800ac32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2284      	movs	r2, #132	; 0x84
 800ac38:	2100      	movs	r1, #0
 800ac3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	0018      	movs	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b004      	add	sp, #16
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	46c0      	nop			; (mov r8, r8)
 800ac48:	dfffffff 	.word	0xdfffffff

0800ac4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2284      	movs	r2, #132	; 0x84
 800ac5a:	5c9b      	ldrb	r3, [r3, r2]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d101      	bne.n	800ac64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac60:	2302      	movs	r3, #2
 800ac62:	e02e      	b.n	800acc2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2284      	movs	r2, #132	; 0x84
 800ac68:	2101      	movs	r1, #1
 800ac6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2288      	movs	r2, #136	; 0x88
 800ac70:	2124      	movs	r1, #36	; 0x24
 800ac72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2101      	movs	r1, #1
 800ac88:	438a      	bics	r2, r1
 800ac8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	08d9      	lsrs	r1, r3, #3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	0018      	movs	r0, r3
 800aca4:	f000 f854 	bl	800ad50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2288      	movs	r2, #136	; 0x88
 800acb4:	2120      	movs	r1, #32
 800acb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2284      	movs	r2, #132	; 0x84
 800acbc:	2100      	movs	r1, #0
 800acbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	0018      	movs	r0, r3
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b004      	add	sp, #16
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2284      	movs	r2, #132	; 0x84
 800acda:	5c9b      	ldrb	r3, [r3, r2]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d101      	bne.n	800ace4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ace0:	2302      	movs	r3, #2
 800ace2:	e02f      	b.n	800ad44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2284      	movs	r2, #132	; 0x84
 800ace8:	2101      	movs	r1, #1
 800acea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2288      	movs	r2, #136	; 0x88
 800acf0:	2124      	movs	r1, #36	; 0x24
 800acf2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2101      	movs	r1, #1
 800ad08:	438a      	bics	r2, r1
 800ad0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	4a0e      	ldr	r2, [pc, #56]	; (800ad4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ad14:	4013      	ands	r3, r2
 800ad16:	0019      	movs	r1, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	0018      	movs	r0, r3
 800ad26:	f000 f813 	bl	800ad50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2288      	movs	r2, #136	; 0x88
 800ad36:	2120      	movs	r1, #32
 800ad38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2284      	movs	r2, #132	; 0x84
 800ad3e:	2100      	movs	r1, #0
 800ad40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	0018      	movs	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	b004      	add	sp, #16
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	f1ffffff 	.word	0xf1ffffff

0800ad50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d108      	bne.n	800ad72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	226a      	movs	r2, #106	; 0x6a
 800ad64:	2101      	movs	r1, #1
 800ad66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2268      	movs	r2, #104	; 0x68
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad70:	e043      	b.n	800adfa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad72:	260f      	movs	r6, #15
 800ad74:	19bb      	adds	r3, r7, r6
 800ad76:	2208      	movs	r2, #8
 800ad78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad7a:	200e      	movs	r0, #14
 800ad7c:	183b      	adds	r3, r7, r0
 800ad7e:	2208      	movs	r2, #8
 800ad80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	0e5b      	lsrs	r3, r3, #25
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	240d      	movs	r4, #13
 800ad8e:	193b      	adds	r3, r7, r4
 800ad90:	2107      	movs	r1, #7
 800ad92:	400a      	ands	r2, r1
 800ad94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	0f5b      	lsrs	r3, r3, #29
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	250c      	movs	r5, #12
 800ada2:	197b      	adds	r3, r7, r5
 800ada4:	2107      	movs	r1, #7
 800ada6:	400a      	ands	r2, r1
 800ada8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adaa:	183b      	adds	r3, r7, r0
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	197a      	adds	r2, r7, r5
 800adb0:	7812      	ldrb	r2, [r2, #0]
 800adb2:	4914      	ldr	r1, [pc, #80]	; (800ae04 <UARTEx_SetNbDataToProcess+0xb4>)
 800adb4:	5c8a      	ldrb	r2, [r1, r2]
 800adb6:	435a      	muls	r2, r3
 800adb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800adba:	197b      	adds	r3, r7, r5
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	4a12      	ldr	r2, [pc, #72]	; (800ae08 <UARTEx_SetNbDataToProcess+0xb8>)
 800adc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adc2:	0019      	movs	r1, r3
 800adc4:	f7fd fa28 	bl	8008218 <__divsi3>
 800adc8:	0003      	movs	r3, r0
 800adca:	b299      	uxth	r1, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	226a      	movs	r2, #106	; 0x6a
 800add0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800add2:	19bb      	adds	r3, r7, r6
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	193a      	adds	r2, r7, r4
 800add8:	7812      	ldrb	r2, [r2, #0]
 800adda:	490a      	ldr	r1, [pc, #40]	; (800ae04 <UARTEx_SetNbDataToProcess+0xb4>)
 800addc:	5c8a      	ldrb	r2, [r1, r2]
 800adde:	435a      	muls	r2, r3
 800ade0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ade2:	193b      	adds	r3, r7, r4
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <UARTEx_SetNbDataToProcess+0xb8>)
 800ade8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adea:	0019      	movs	r1, r3
 800adec:	f7fd fa14 	bl	8008218 <__divsi3>
 800adf0:	0003      	movs	r3, r0
 800adf2:	b299      	uxth	r1, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2268      	movs	r2, #104	; 0x68
 800adf8:	5299      	strh	r1, [r3, r2]
}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b005      	add	sp, #20
 800ae00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	0800b854 	.word	0x0800b854
 800ae08:	0800b85c 	.word	0x0800b85c

0800ae0c <std>:
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	0004      	movs	r4, r0
 800ae12:	6003      	str	r3, [r0, #0]
 800ae14:	6043      	str	r3, [r0, #4]
 800ae16:	6083      	str	r3, [r0, #8]
 800ae18:	8181      	strh	r1, [r0, #12]
 800ae1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae1c:	0019      	movs	r1, r3
 800ae1e:	81c2      	strh	r2, [r0, #14]
 800ae20:	6103      	str	r3, [r0, #16]
 800ae22:	6143      	str	r3, [r0, #20]
 800ae24:	6183      	str	r3, [r0, #24]
 800ae26:	2208      	movs	r2, #8
 800ae28:	305c      	adds	r0, #92	; 0x5c
 800ae2a:	f000 f9f3 	bl	800b214 <memset>
 800ae2e:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <std+0x38>)
 800ae30:	6224      	str	r4, [r4, #32]
 800ae32:	6263      	str	r3, [r4, #36]	; 0x24
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <std+0x3c>)
 800ae36:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <std+0x40>)
 800ae3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <std+0x44>)
 800ae3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae40:	bd10      	pop	{r4, pc}
 800ae42:	46c0      	nop			; (mov r8, r8)
 800ae44:	0800b031 	.word	0x0800b031
 800ae48:	0800b059 	.word	0x0800b059
 800ae4c:	0800b091 	.word	0x0800b091
 800ae50:	0800b0bd 	.word	0x0800b0bd

0800ae54 <stdio_exit_handler>:
 800ae54:	b510      	push	{r4, lr}
 800ae56:	4a03      	ldr	r2, [pc, #12]	; (800ae64 <stdio_exit_handler+0x10>)
 800ae58:	4903      	ldr	r1, [pc, #12]	; (800ae68 <stdio_exit_handler+0x14>)
 800ae5a:	4804      	ldr	r0, [pc, #16]	; (800ae6c <stdio_exit_handler+0x18>)
 800ae5c:	f000 f86c 	bl	800af38 <_fwalk_sglue>
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	46c0      	nop			; (mov r8, r8)
 800ae64:	2000018c 	.word	0x2000018c
 800ae68:	0800b629 	.word	0x0800b629
 800ae6c:	20000198 	.word	0x20000198

0800ae70 <cleanup_stdio>:
 800ae70:	6841      	ldr	r1, [r0, #4]
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <cleanup_stdio+0x30>)
 800ae74:	b510      	push	{r4, lr}
 800ae76:	0004      	movs	r4, r0
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	d001      	beq.n	800ae80 <cleanup_stdio+0x10>
 800ae7c:	f000 fbd4 	bl	800b628 <_fflush_r>
 800ae80:	68a1      	ldr	r1, [r4, #8]
 800ae82:	4b08      	ldr	r3, [pc, #32]	; (800aea4 <cleanup_stdio+0x34>)
 800ae84:	4299      	cmp	r1, r3
 800ae86:	d002      	beq.n	800ae8e <cleanup_stdio+0x1e>
 800ae88:	0020      	movs	r0, r4
 800ae8a:	f000 fbcd 	bl	800b628 <_fflush_r>
 800ae8e:	68e1      	ldr	r1, [r4, #12]
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <cleanup_stdio+0x38>)
 800ae92:	4299      	cmp	r1, r3
 800ae94:	d002      	beq.n	800ae9c <cleanup_stdio+0x2c>
 800ae96:	0020      	movs	r0, r4
 800ae98:	f000 fbc6 	bl	800b628 <_fflush_r>
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	200002a0 	.word	0x200002a0
 800aea4:	20000308 	.word	0x20000308
 800aea8:	20000370 	.word	0x20000370

0800aeac <global_stdio_init.part.0>:
 800aeac:	b510      	push	{r4, lr}
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <global_stdio_init.part.0+0x28>)
 800aeb0:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <global_stdio_init.part.0+0x2c>)
 800aeb2:	2104      	movs	r1, #4
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	4809      	ldr	r0, [pc, #36]	; (800aedc <global_stdio_init.part.0+0x30>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f7ff ffa7 	bl	800ae0c <std>
 800aebe:	2201      	movs	r2, #1
 800aec0:	2109      	movs	r1, #9
 800aec2:	4807      	ldr	r0, [pc, #28]	; (800aee0 <global_stdio_init.part.0+0x34>)
 800aec4:	f7ff ffa2 	bl	800ae0c <std>
 800aec8:	2202      	movs	r2, #2
 800aeca:	2112      	movs	r1, #18
 800aecc:	4805      	ldr	r0, [pc, #20]	; (800aee4 <global_stdio_init.part.0+0x38>)
 800aece:	f7ff ff9d 	bl	800ae0c <std>
 800aed2:	bd10      	pop	{r4, pc}
 800aed4:	200003d8 	.word	0x200003d8
 800aed8:	0800ae55 	.word	0x0800ae55
 800aedc:	200002a0 	.word	0x200002a0
 800aee0:	20000308 	.word	0x20000308
 800aee4:	20000370 	.word	0x20000370

0800aee8 <__sfp_lock_acquire>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	4802      	ldr	r0, [pc, #8]	; (800aef4 <__sfp_lock_acquire+0xc>)
 800aeec:	f000 fa12 	bl	800b314 <__retarget_lock_acquire_recursive>
 800aef0:	bd10      	pop	{r4, pc}
 800aef2:	46c0      	nop			; (mov r8, r8)
 800aef4:	200003e1 	.word	0x200003e1

0800aef8 <__sfp_lock_release>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	4802      	ldr	r0, [pc, #8]	; (800af04 <__sfp_lock_release+0xc>)
 800aefc:	f000 fa0b 	bl	800b316 <__retarget_lock_release_recursive>
 800af00:	bd10      	pop	{r4, pc}
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	200003e1 	.word	0x200003e1

0800af08 <__sinit>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	0004      	movs	r4, r0
 800af0c:	f7ff ffec 	bl	800aee8 <__sfp_lock_acquire>
 800af10:	6a23      	ldr	r3, [r4, #32]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <__sinit+0x14>
 800af16:	f7ff ffef 	bl	800aef8 <__sfp_lock_release>
 800af1a:	bd10      	pop	{r4, pc}
 800af1c:	4b04      	ldr	r3, [pc, #16]	; (800af30 <__sinit+0x28>)
 800af1e:	6223      	str	r3, [r4, #32]
 800af20:	4b04      	ldr	r3, [pc, #16]	; (800af34 <__sinit+0x2c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1f6      	bne.n	800af16 <__sinit+0xe>
 800af28:	f7ff ffc0 	bl	800aeac <global_stdio_init.part.0>
 800af2c:	e7f3      	b.n	800af16 <__sinit+0xe>
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	0800ae71 	.word	0x0800ae71
 800af34:	200003d8 	.word	0x200003d8

0800af38 <_fwalk_sglue>:
 800af38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af3a:	0014      	movs	r4, r2
 800af3c:	2600      	movs	r6, #0
 800af3e:	9000      	str	r0, [sp, #0]
 800af40:	9101      	str	r1, [sp, #4]
 800af42:	68a5      	ldr	r5, [r4, #8]
 800af44:	6867      	ldr	r7, [r4, #4]
 800af46:	3f01      	subs	r7, #1
 800af48:	d504      	bpl.n	800af54 <_fwalk_sglue+0x1c>
 800af4a:	6824      	ldr	r4, [r4, #0]
 800af4c:	2c00      	cmp	r4, #0
 800af4e:	d1f8      	bne.n	800af42 <_fwalk_sglue+0xa>
 800af50:	0030      	movs	r0, r6
 800af52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af54:	89ab      	ldrh	r3, [r5, #12]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d908      	bls.n	800af6c <_fwalk_sglue+0x34>
 800af5a:	220e      	movs	r2, #14
 800af5c:	5eab      	ldrsh	r3, [r5, r2]
 800af5e:	3301      	adds	r3, #1
 800af60:	d004      	beq.n	800af6c <_fwalk_sglue+0x34>
 800af62:	0029      	movs	r1, r5
 800af64:	9800      	ldr	r0, [sp, #0]
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	4798      	blx	r3
 800af6a:	4306      	orrs	r6, r0
 800af6c:	3568      	adds	r5, #104	; 0x68
 800af6e:	e7ea      	b.n	800af46 <_fwalk_sglue+0xe>

0800af70 <_puts_r>:
 800af70:	6a03      	ldr	r3, [r0, #32]
 800af72:	b570      	push	{r4, r5, r6, lr}
 800af74:	0005      	movs	r5, r0
 800af76:	000e      	movs	r6, r1
 800af78:	6884      	ldr	r4, [r0, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <_puts_r+0x12>
 800af7e:	f7ff ffc3 	bl	800af08 <__sinit>
 800af82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af84:	07db      	lsls	r3, r3, #31
 800af86:	d405      	bmi.n	800af94 <_puts_r+0x24>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	059b      	lsls	r3, r3, #22
 800af8c:	d402      	bmi.n	800af94 <_puts_r+0x24>
 800af8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af90:	f000 f9c0 	bl	800b314 <__retarget_lock_acquire_recursive>
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	071b      	lsls	r3, r3, #28
 800af98:	d502      	bpl.n	800afa0 <_puts_r+0x30>
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d11f      	bne.n	800afe0 <_puts_r+0x70>
 800afa0:	0021      	movs	r1, r4
 800afa2:	0028      	movs	r0, r5
 800afa4:	f000 f8d2 	bl	800b14c <__swsetup_r>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d019      	beq.n	800afe0 <_puts_r+0x70>
 800afac:	2501      	movs	r5, #1
 800afae:	426d      	negs	r5, r5
 800afb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afb2:	07db      	lsls	r3, r3, #31
 800afb4:	d405      	bmi.n	800afc2 <_puts_r+0x52>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	059b      	lsls	r3, r3, #22
 800afba:	d402      	bmi.n	800afc2 <_puts_r+0x52>
 800afbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afbe:	f000 f9aa 	bl	800b316 <__retarget_lock_release_recursive>
 800afc2:	0028      	movs	r0, r5
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	3601      	adds	r6, #1
 800afc8:	60a3      	str	r3, [r4, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	da04      	bge.n	800afd8 <_puts_r+0x68>
 800afce:	69a2      	ldr	r2, [r4, #24]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	dc16      	bgt.n	800b002 <_puts_r+0x92>
 800afd4:	290a      	cmp	r1, #10
 800afd6:	d014      	beq.n	800b002 <_puts_r+0x92>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	6022      	str	r2, [r4, #0]
 800afde:	7019      	strb	r1, [r3, #0]
 800afe0:	68a3      	ldr	r3, [r4, #8]
 800afe2:	7831      	ldrb	r1, [r6, #0]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	2900      	cmp	r1, #0
 800afe8:	d1ed      	bne.n	800afc6 <_puts_r+0x56>
 800afea:	60a3      	str	r3, [r4, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	da0f      	bge.n	800b010 <_puts_r+0xa0>
 800aff0:	0028      	movs	r0, r5
 800aff2:	0022      	movs	r2, r4
 800aff4:	310a      	adds	r1, #10
 800aff6:	f000 f867 	bl	800b0c8 <__swbuf_r>
 800affa:	250a      	movs	r5, #10
 800affc:	3001      	adds	r0, #1
 800affe:	d1d7      	bne.n	800afb0 <_puts_r+0x40>
 800b000:	e7d4      	b.n	800afac <_puts_r+0x3c>
 800b002:	0022      	movs	r2, r4
 800b004:	0028      	movs	r0, r5
 800b006:	f000 f85f 	bl	800b0c8 <__swbuf_r>
 800b00a:	3001      	adds	r0, #1
 800b00c:	d1e8      	bne.n	800afe0 <_puts_r+0x70>
 800b00e:	e7cd      	b.n	800afac <_puts_r+0x3c>
 800b010:	250a      	movs	r5, #10
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	6022      	str	r2, [r4, #0]
 800b018:	701d      	strb	r5, [r3, #0]
 800b01a:	e7c9      	b.n	800afb0 <_puts_r+0x40>

0800b01c <puts>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4b03      	ldr	r3, [pc, #12]	; (800b02c <puts+0x10>)
 800b020:	0001      	movs	r1, r0
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	f7ff ffa4 	bl	800af70 <_puts_r>
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	46c0      	nop			; (mov r8, r8)
 800b02c:	200001e4 	.word	0x200001e4

0800b030 <__sread>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	000c      	movs	r4, r1
 800b034:	250e      	movs	r5, #14
 800b036:	5f49      	ldrsh	r1, [r1, r5]
 800b038:	f000 f91a 	bl	800b270 <_read_r>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	db03      	blt.n	800b048 <__sread+0x18>
 800b040:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b042:	181b      	adds	r3, r3, r0
 800b044:	6563      	str	r3, [r4, #84]	; 0x54
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	4a02      	ldr	r2, [pc, #8]	; (800b054 <__sread+0x24>)
 800b04c:	4013      	ands	r3, r2
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	e7f9      	b.n	800b046 <__sread+0x16>
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	ffffefff 	.word	0xffffefff

0800b058 <__swrite>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	001f      	movs	r7, r3
 800b05c:	898b      	ldrh	r3, [r1, #12]
 800b05e:	0005      	movs	r5, r0
 800b060:	000c      	movs	r4, r1
 800b062:	0016      	movs	r6, r2
 800b064:	05db      	lsls	r3, r3, #23
 800b066:	d505      	bpl.n	800b074 <__swrite+0x1c>
 800b068:	230e      	movs	r3, #14
 800b06a:	5ec9      	ldrsh	r1, [r1, r3]
 800b06c:	2200      	movs	r2, #0
 800b06e:	2302      	movs	r3, #2
 800b070:	f000 f8ea 	bl	800b248 <_lseek_r>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	4a05      	ldr	r2, [pc, #20]	; (800b08c <__swrite+0x34>)
 800b078:	0028      	movs	r0, r5
 800b07a:	4013      	ands	r3, r2
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	0032      	movs	r2, r6
 800b080:	230e      	movs	r3, #14
 800b082:	5ee1      	ldrsh	r1, [r4, r3]
 800b084:	003b      	movs	r3, r7
 800b086:	f000 f907 	bl	800b298 <_write_r>
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08c:	ffffefff 	.word	0xffffefff

0800b090 <__sseek>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	000c      	movs	r4, r1
 800b094:	250e      	movs	r5, #14
 800b096:	5f49      	ldrsh	r1, [r1, r5]
 800b098:	f000 f8d6 	bl	800b248 <_lseek_r>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	1c42      	adds	r2, r0, #1
 800b0a0:	d103      	bne.n	800b0aa <__sseek+0x1a>
 800b0a2:	4a05      	ldr	r2, [pc, #20]	; (800b0b8 <__sseek+0x28>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	81a3      	strh	r3, [r4, #12]
 800b0a8:	bd70      	pop	{r4, r5, r6, pc}
 800b0aa:	2280      	movs	r2, #128	; 0x80
 800b0ac:	0152      	lsls	r2, r2, #5
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b0b4:	e7f8      	b.n	800b0a8 <__sseek+0x18>
 800b0b6:	46c0      	nop			; (mov r8, r8)
 800b0b8:	ffffefff 	.word	0xffffefff

0800b0bc <__sclose>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	230e      	movs	r3, #14
 800b0c0:	5ec9      	ldrsh	r1, [r1, r3]
 800b0c2:	f000 f8af 	bl	800b224 <_close_r>
 800b0c6:	bd10      	pop	{r4, pc}

0800b0c8 <__swbuf_r>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	0006      	movs	r6, r0
 800b0cc:	000d      	movs	r5, r1
 800b0ce:	0014      	movs	r4, r2
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d004      	beq.n	800b0de <__swbuf_r+0x16>
 800b0d4:	6a03      	ldr	r3, [r0, #32]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <__swbuf_r+0x16>
 800b0da:	f7ff ff15 	bl	800af08 <__sinit>
 800b0de:	69a3      	ldr	r3, [r4, #24]
 800b0e0:	60a3      	str	r3, [r4, #8]
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	071b      	lsls	r3, r3, #28
 800b0e6:	d528      	bpl.n	800b13a <__swbuf_r+0x72>
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d025      	beq.n	800b13a <__swbuf_r+0x72>
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	6820      	ldr	r0, [r4, #0]
 800b0f2:	b2ef      	uxtb	r7, r5
 800b0f4:	1ac0      	subs	r0, r0, r3
 800b0f6:	6963      	ldr	r3, [r4, #20]
 800b0f8:	b2ed      	uxtb	r5, r5
 800b0fa:	4283      	cmp	r3, r0
 800b0fc:	dc05      	bgt.n	800b10a <__swbuf_r+0x42>
 800b0fe:	0021      	movs	r1, r4
 800b100:	0030      	movs	r0, r6
 800b102:	f000 fa91 	bl	800b628 <_fflush_r>
 800b106:	2800      	cmp	r0, #0
 800b108:	d11d      	bne.n	800b146 <__swbuf_r+0x7e>
 800b10a:	68a3      	ldr	r3, [r4, #8]
 800b10c:	3001      	adds	r0, #1
 800b10e:	3b01      	subs	r3, #1
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	6022      	str	r2, [r4, #0]
 800b118:	701f      	strb	r7, [r3, #0]
 800b11a:	6963      	ldr	r3, [r4, #20]
 800b11c:	4283      	cmp	r3, r0
 800b11e:	d004      	beq.n	800b12a <__swbuf_r+0x62>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	07db      	lsls	r3, r3, #31
 800b124:	d507      	bpl.n	800b136 <__swbuf_r+0x6e>
 800b126:	2d0a      	cmp	r5, #10
 800b128:	d105      	bne.n	800b136 <__swbuf_r+0x6e>
 800b12a:	0021      	movs	r1, r4
 800b12c:	0030      	movs	r0, r6
 800b12e:	f000 fa7b 	bl	800b628 <_fflush_r>
 800b132:	2800      	cmp	r0, #0
 800b134:	d107      	bne.n	800b146 <__swbuf_r+0x7e>
 800b136:	0028      	movs	r0, r5
 800b138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13a:	0021      	movs	r1, r4
 800b13c:	0030      	movs	r0, r6
 800b13e:	f000 f805 	bl	800b14c <__swsetup_r>
 800b142:	2800      	cmp	r0, #0
 800b144:	d0d3      	beq.n	800b0ee <__swbuf_r+0x26>
 800b146:	2501      	movs	r5, #1
 800b148:	426d      	negs	r5, r5
 800b14a:	e7f4      	b.n	800b136 <__swbuf_r+0x6e>

0800b14c <__swsetup_r>:
 800b14c:	4b30      	ldr	r3, [pc, #192]	; (800b210 <__swsetup_r+0xc4>)
 800b14e:	b570      	push	{r4, r5, r6, lr}
 800b150:	0005      	movs	r5, r0
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	000c      	movs	r4, r1
 800b156:	2800      	cmp	r0, #0
 800b158:	d004      	beq.n	800b164 <__swsetup_r+0x18>
 800b15a:	6a03      	ldr	r3, [r0, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <__swsetup_r+0x18>
 800b160:	f7ff fed2 	bl	800af08 <__sinit>
 800b164:	230c      	movs	r3, #12
 800b166:	5ee2      	ldrsh	r2, [r4, r3]
 800b168:	b293      	uxth	r3, r2
 800b16a:	0711      	lsls	r1, r2, #28
 800b16c:	d423      	bmi.n	800b1b6 <__swsetup_r+0x6a>
 800b16e:	06d9      	lsls	r1, r3, #27
 800b170:	d407      	bmi.n	800b182 <__swsetup_r+0x36>
 800b172:	2309      	movs	r3, #9
 800b174:	2001      	movs	r0, #1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	3337      	adds	r3, #55	; 0x37
 800b17a:	4313      	orrs	r3, r2
 800b17c:	81a3      	strh	r3, [r4, #12]
 800b17e:	4240      	negs	r0, r0
 800b180:	bd70      	pop	{r4, r5, r6, pc}
 800b182:	075b      	lsls	r3, r3, #29
 800b184:	d513      	bpl.n	800b1ae <__swsetup_r+0x62>
 800b186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b188:	2900      	cmp	r1, #0
 800b18a:	d008      	beq.n	800b19e <__swsetup_r+0x52>
 800b18c:	0023      	movs	r3, r4
 800b18e:	3344      	adds	r3, #68	; 0x44
 800b190:	4299      	cmp	r1, r3
 800b192:	d002      	beq.n	800b19a <__swsetup_r+0x4e>
 800b194:	0028      	movs	r0, r5
 800b196:	f000 f8bf 	bl	800b318 <_free_r>
 800b19a:	2300      	movs	r3, #0
 800b19c:	6363      	str	r3, [r4, #52]	; 0x34
 800b19e:	2224      	movs	r2, #36	; 0x24
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	4393      	bics	r3, r2
 800b1a4:	81a3      	strh	r3, [r4, #12]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6063      	str	r3, [r4, #4]
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	2308      	movs	r3, #8
 800b1b0:	89a2      	ldrh	r2, [r4, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	6923      	ldr	r3, [r4, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10b      	bne.n	800b1d4 <__swsetup_r+0x88>
 800b1bc:	21a0      	movs	r1, #160	; 0xa0
 800b1be:	2280      	movs	r2, #128	; 0x80
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	0089      	lsls	r1, r1, #2
 800b1c4:	0092      	lsls	r2, r2, #2
 800b1c6:	400b      	ands	r3, r1
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d003      	beq.n	800b1d4 <__swsetup_r+0x88>
 800b1cc:	0021      	movs	r1, r4
 800b1ce:	0028      	movs	r0, r5
 800b1d0:	f000 fa7e 	bl	800b6d0 <__smakebuf_r>
 800b1d4:	220c      	movs	r2, #12
 800b1d6:	5ea3      	ldrsh	r3, [r4, r2]
 800b1d8:	2001      	movs	r0, #1
 800b1da:	001a      	movs	r2, r3
 800b1dc:	b299      	uxth	r1, r3
 800b1de:	4002      	ands	r2, r0
 800b1e0:	4203      	tst	r3, r0
 800b1e2:	d00f      	beq.n	800b204 <__swsetup_r+0xb8>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	60a2      	str	r2, [r4, #8]
 800b1e8:	6962      	ldr	r2, [r4, #20]
 800b1ea:	4252      	negs	r2, r2
 800b1ec:	61a2      	str	r2, [r4, #24]
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	6922      	ldr	r2, [r4, #16]
 800b1f2:	4282      	cmp	r2, r0
 800b1f4:	d1c4      	bne.n	800b180 <__swsetup_r+0x34>
 800b1f6:	0609      	lsls	r1, r1, #24
 800b1f8:	d5c2      	bpl.n	800b180 <__swsetup_r+0x34>
 800b1fa:	2240      	movs	r2, #64	; 0x40
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	3801      	subs	r0, #1
 800b202:	e7bd      	b.n	800b180 <__swsetup_r+0x34>
 800b204:	0788      	lsls	r0, r1, #30
 800b206:	d400      	bmi.n	800b20a <__swsetup_r+0xbe>
 800b208:	6962      	ldr	r2, [r4, #20]
 800b20a:	60a2      	str	r2, [r4, #8]
 800b20c:	e7ef      	b.n	800b1ee <__swsetup_r+0xa2>
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	200001e4 	.word	0x200001e4

0800b214 <memset>:
 800b214:	0003      	movs	r3, r0
 800b216:	1882      	adds	r2, r0, r2
 800b218:	4293      	cmp	r3, r2
 800b21a:	d100      	bne.n	800b21e <memset+0xa>
 800b21c:	4770      	bx	lr
 800b21e:	7019      	strb	r1, [r3, #0]
 800b220:	3301      	adds	r3, #1
 800b222:	e7f9      	b.n	800b218 <memset+0x4>

0800b224 <_close_r>:
 800b224:	2300      	movs	r3, #0
 800b226:	b570      	push	{r4, r5, r6, lr}
 800b228:	4d06      	ldr	r5, [pc, #24]	; (800b244 <_close_r+0x20>)
 800b22a:	0004      	movs	r4, r0
 800b22c:	0008      	movs	r0, r1
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7fd fbd2 	bl	80089d8 <_close>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d103      	bne.n	800b240 <_close_r+0x1c>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d000      	beq.n	800b240 <_close_r+0x1c>
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	46c0      	nop			; (mov r8, r8)
 800b244:	200003dc 	.word	0x200003dc

0800b248 <_lseek_r>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	0004      	movs	r4, r0
 800b24c:	0008      	movs	r0, r1
 800b24e:	0011      	movs	r1, r2
 800b250:	001a      	movs	r2, r3
 800b252:	2300      	movs	r3, #0
 800b254:	4d05      	ldr	r5, [pc, #20]	; (800b26c <_lseek_r+0x24>)
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	f7fd fbdf 	bl	8008a1a <_lseek>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d103      	bne.n	800b268 <_lseek_r+0x20>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d000      	beq.n	800b268 <_lseek_r+0x20>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd70      	pop	{r4, r5, r6, pc}
 800b26a:	46c0      	nop			; (mov r8, r8)
 800b26c:	200003dc 	.word	0x200003dc

0800b270 <_read_r>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	0004      	movs	r4, r0
 800b274:	0008      	movs	r0, r1
 800b276:	0011      	movs	r1, r2
 800b278:	001a      	movs	r2, r3
 800b27a:	2300      	movs	r3, #0
 800b27c:	4d05      	ldr	r5, [pc, #20]	; (800b294 <_read_r+0x24>)
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	f7fd fb8d 	bl	800899e <_read>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d103      	bne.n	800b290 <_read_r+0x20>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d000      	beq.n	800b290 <_read_r+0x20>
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	200003dc 	.word	0x200003dc

0800b298 <_write_r>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	0004      	movs	r4, r0
 800b29c:	0008      	movs	r0, r1
 800b29e:	0011      	movs	r1, r2
 800b2a0:	001a      	movs	r2, r3
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4d05      	ldr	r5, [pc, #20]	; (800b2bc <_write_r+0x24>)
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7fd f9b8 	bl	800861c <_write>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d103      	bne.n	800b2b8 <_write_r+0x20>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d000      	beq.n	800b2b8 <_write_r+0x20>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	200003dc 	.word	0x200003dc

0800b2c0 <__errno>:
 800b2c0:	4b01      	ldr	r3, [pc, #4]	; (800b2c8 <__errno+0x8>)
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	4770      	bx	lr
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	200001e4 	.word	0x200001e4

0800b2cc <__libc_init_array>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	4c0c      	ldr	r4, [pc, #48]	; (800b304 <__libc_init_array+0x38>)
 800b2d2:	4d0d      	ldr	r5, [pc, #52]	; (800b308 <__libc_init_array+0x3c>)
 800b2d4:	1b64      	subs	r4, r4, r5
 800b2d6:	10a4      	asrs	r4, r4, #2
 800b2d8:	42a6      	cmp	r6, r4
 800b2da:	d109      	bne.n	800b2f0 <__libc_init_array+0x24>
 800b2dc:	2600      	movs	r6, #0
 800b2de:	f000 fa6b 	bl	800b7b8 <_init>
 800b2e2:	4c0a      	ldr	r4, [pc, #40]	; (800b30c <__libc_init_array+0x40>)
 800b2e4:	4d0a      	ldr	r5, [pc, #40]	; (800b310 <__libc_init_array+0x44>)
 800b2e6:	1b64      	subs	r4, r4, r5
 800b2e8:	10a4      	asrs	r4, r4, #2
 800b2ea:	42a6      	cmp	r6, r4
 800b2ec:	d105      	bne.n	800b2fa <__libc_init_array+0x2e>
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	00b3      	lsls	r3, r6, #2
 800b2f2:	58eb      	ldr	r3, [r5, r3]
 800b2f4:	4798      	blx	r3
 800b2f6:	3601      	adds	r6, #1
 800b2f8:	e7ee      	b.n	800b2d8 <__libc_init_array+0xc>
 800b2fa:	00b3      	lsls	r3, r6, #2
 800b2fc:	58eb      	ldr	r3, [r5, r3]
 800b2fe:	4798      	blx	r3
 800b300:	3601      	adds	r6, #1
 800b302:	e7f2      	b.n	800b2ea <__libc_init_array+0x1e>
 800b304:	0800b86c 	.word	0x0800b86c
 800b308:	0800b86c 	.word	0x0800b86c
 800b30c:	0800b870 	.word	0x0800b870
 800b310:	0800b86c 	.word	0x0800b86c

0800b314 <__retarget_lock_acquire_recursive>:
 800b314:	4770      	bx	lr

0800b316 <__retarget_lock_release_recursive>:
 800b316:	4770      	bx	lr

0800b318 <_free_r>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	0005      	movs	r5, r0
 800b31c:	2900      	cmp	r1, #0
 800b31e:	d010      	beq.n	800b342 <_free_r+0x2a>
 800b320:	1f0c      	subs	r4, r1, #4
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	da00      	bge.n	800b32a <_free_r+0x12>
 800b328:	18e4      	adds	r4, r4, r3
 800b32a:	0028      	movs	r0, r5
 800b32c:	f000 f8e2 	bl	800b4f4 <__malloc_lock>
 800b330:	4a1d      	ldr	r2, [pc, #116]	; (800b3a8 <_free_r+0x90>)
 800b332:	6813      	ldr	r3, [r2, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d105      	bne.n	800b344 <_free_r+0x2c>
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	6014      	str	r4, [r2, #0]
 800b33c:	0028      	movs	r0, r5
 800b33e:	f000 f8e1 	bl	800b504 <__malloc_unlock>
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	42a3      	cmp	r3, r4
 800b346:	d908      	bls.n	800b35a <_free_r+0x42>
 800b348:	6820      	ldr	r0, [r4, #0]
 800b34a:	1821      	adds	r1, r4, r0
 800b34c:	428b      	cmp	r3, r1
 800b34e:	d1f3      	bne.n	800b338 <_free_r+0x20>
 800b350:	6819      	ldr	r1, [r3, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	1809      	adds	r1, r1, r0
 800b356:	6021      	str	r1, [r4, #0]
 800b358:	e7ee      	b.n	800b338 <_free_r+0x20>
 800b35a:	001a      	movs	r2, r3
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <_free_r+0x4e>
 800b362:	42a3      	cmp	r3, r4
 800b364:	d9f9      	bls.n	800b35a <_free_r+0x42>
 800b366:	6811      	ldr	r1, [r2, #0]
 800b368:	1850      	adds	r0, r2, r1
 800b36a:	42a0      	cmp	r0, r4
 800b36c:	d10b      	bne.n	800b386 <_free_r+0x6e>
 800b36e:	6820      	ldr	r0, [r4, #0]
 800b370:	1809      	adds	r1, r1, r0
 800b372:	1850      	adds	r0, r2, r1
 800b374:	6011      	str	r1, [r2, #0]
 800b376:	4283      	cmp	r3, r0
 800b378:	d1e0      	bne.n	800b33c <_free_r+0x24>
 800b37a:	6818      	ldr	r0, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	1841      	adds	r1, r0, r1
 800b380:	6011      	str	r1, [r2, #0]
 800b382:	6053      	str	r3, [r2, #4]
 800b384:	e7da      	b.n	800b33c <_free_r+0x24>
 800b386:	42a0      	cmp	r0, r4
 800b388:	d902      	bls.n	800b390 <_free_r+0x78>
 800b38a:	230c      	movs	r3, #12
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	e7d5      	b.n	800b33c <_free_r+0x24>
 800b390:	6820      	ldr	r0, [r4, #0]
 800b392:	1821      	adds	r1, r4, r0
 800b394:	428b      	cmp	r3, r1
 800b396:	d103      	bne.n	800b3a0 <_free_r+0x88>
 800b398:	6819      	ldr	r1, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	1809      	adds	r1, r1, r0
 800b39e:	6021      	str	r1, [r4, #0]
 800b3a0:	6063      	str	r3, [r4, #4]
 800b3a2:	6054      	str	r4, [r2, #4]
 800b3a4:	e7ca      	b.n	800b33c <_free_r+0x24>
 800b3a6:	46c0      	nop			; (mov r8, r8)
 800b3a8:	200003e4 	.word	0x200003e4

0800b3ac <sbrk_aligned>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	4e0f      	ldr	r6, [pc, #60]	; (800b3ec <sbrk_aligned+0x40>)
 800b3b0:	000d      	movs	r5, r1
 800b3b2:	6831      	ldr	r1, [r6, #0]
 800b3b4:	0004      	movs	r4, r0
 800b3b6:	2900      	cmp	r1, #0
 800b3b8:	d102      	bne.n	800b3c0 <sbrk_aligned+0x14>
 800b3ba:	f000 f9eb 	bl	800b794 <_sbrk_r>
 800b3be:	6030      	str	r0, [r6, #0]
 800b3c0:	0029      	movs	r1, r5
 800b3c2:	0020      	movs	r0, r4
 800b3c4:	f000 f9e6 	bl	800b794 <_sbrk_r>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d00a      	beq.n	800b3e2 <sbrk_aligned+0x36>
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	1cc5      	adds	r5, r0, #3
 800b3d0:	439d      	bics	r5, r3
 800b3d2:	42a8      	cmp	r0, r5
 800b3d4:	d007      	beq.n	800b3e6 <sbrk_aligned+0x3a>
 800b3d6:	1a29      	subs	r1, r5, r0
 800b3d8:	0020      	movs	r0, r4
 800b3da:	f000 f9db 	bl	800b794 <_sbrk_r>
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d101      	bne.n	800b3e6 <sbrk_aligned+0x3a>
 800b3e2:	2501      	movs	r5, #1
 800b3e4:	426d      	negs	r5, r5
 800b3e6:	0028      	movs	r0, r5
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ea:	46c0      	nop			; (mov r8, r8)
 800b3ec:	200003e8 	.word	0x200003e8

0800b3f0 <_malloc_r>:
 800b3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3f2:	2203      	movs	r2, #3
 800b3f4:	1ccb      	adds	r3, r1, #3
 800b3f6:	4393      	bics	r3, r2
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	0006      	movs	r6, r0
 800b3fc:	001f      	movs	r7, r3
 800b3fe:	2b0c      	cmp	r3, #12
 800b400:	d238      	bcs.n	800b474 <_malloc_r+0x84>
 800b402:	270c      	movs	r7, #12
 800b404:	42b9      	cmp	r1, r7
 800b406:	d837      	bhi.n	800b478 <_malloc_r+0x88>
 800b408:	0030      	movs	r0, r6
 800b40a:	f000 f873 	bl	800b4f4 <__malloc_lock>
 800b40e:	4b38      	ldr	r3, [pc, #224]	; (800b4f0 <_malloc_r+0x100>)
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	001c      	movs	r4, r3
 800b416:	2c00      	cmp	r4, #0
 800b418:	d133      	bne.n	800b482 <_malloc_r+0x92>
 800b41a:	0039      	movs	r1, r7
 800b41c:	0030      	movs	r0, r6
 800b41e:	f7ff ffc5 	bl	800b3ac <sbrk_aligned>
 800b422:	0004      	movs	r4, r0
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d15e      	bne.n	800b4e6 <_malloc_r+0xf6>
 800b428:	9b00      	ldr	r3, [sp, #0]
 800b42a:	681c      	ldr	r4, [r3, #0]
 800b42c:	0025      	movs	r5, r4
 800b42e:	2d00      	cmp	r5, #0
 800b430:	d14e      	bne.n	800b4d0 <_malloc_r+0xe0>
 800b432:	2c00      	cmp	r4, #0
 800b434:	d051      	beq.n	800b4da <_malloc_r+0xea>
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	0029      	movs	r1, r5
 800b43a:	18e3      	adds	r3, r4, r3
 800b43c:	0030      	movs	r0, r6
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	f000 f9a8 	bl	800b794 <_sbrk_r>
 800b444:	9b01      	ldr	r3, [sp, #4]
 800b446:	4283      	cmp	r3, r0
 800b448:	d147      	bne.n	800b4da <_malloc_r+0xea>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	0030      	movs	r0, r6
 800b44e:	1aff      	subs	r7, r7, r3
 800b450:	0039      	movs	r1, r7
 800b452:	f7ff ffab 	bl	800b3ac <sbrk_aligned>
 800b456:	3001      	adds	r0, #1
 800b458:	d03f      	beq.n	800b4da <_malloc_r+0xea>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	19db      	adds	r3, r3, r7
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	9b00      	ldr	r3, [sp, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d040      	beq.n	800b4ea <_malloc_r+0xfa>
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	42a2      	cmp	r2, r4
 800b46c:	d133      	bne.n	800b4d6 <_malloc_r+0xe6>
 800b46e:	2200      	movs	r2, #0
 800b470:	605a      	str	r2, [r3, #4]
 800b472:	e014      	b.n	800b49e <_malloc_r+0xae>
 800b474:	2b00      	cmp	r3, #0
 800b476:	dac5      	bge.n	800b404 <_malloc_r+0x14>
 800b478:	230c      	movs	r3, #12
 800b47a:	2500      	movs	r5, #0
 800b47c:	6033      	str	r3, [r6, #0]
 800b47e:	0028      	movs	r0, r5
 800b480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	1bc9      	subs	r1, r1, r7
 800b486:	d420      	bmi.n	800b4ca <_malloc_r+0xda>
 800b488:	290b      	cmp	r1, #11
 800b48a:	d918      	bls.n	800b4be <_malloc_r+0xce>
 800b48c:	19e2      	adds	r2, r4, r7
 800b48e:	6027      	str	r7, [r4, #0]
 800b490:	42a3      	cmp	r3, r4
 800b492:	d112      	bne.n	800b4ba <_malloc_r+0xca>
 800b494:	9b00      	ldr	r3, [sp, #0]
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	6011      	str	r1, [r2, #0]
 800b49c:	6053      	str	r3, [r2, #4]
 800b49e:	0030      	movs	r0, r6
 800b4a0:	0025      	movs	r5, r4
 800b4a2:	f000 f82f 	bl	800b504 <__malloc_unlock>
 800b4a6:	2207      	movs	r2, #7
 800b4a8:	350b      	adds	r5, #11
 800b4aa:	1d23      	adds	r3, r4, #4
 800b4ac:	4395      	bics	r5, r2
 800b4ae:	1aea      	subs	r2, r5, r3
 800b4b0:	429d      	cmp	r5, r3
 800b4b2:	d0e4      	beq.n	800b47e <_malloc_r+0x8e>
 800b4b4:	1b5b      	subs	r3, r3, r5
 800b4b6:	50a3      	str	r3, [r4, r2]
 800b4b8:	e7e1      	b.n	800b47e <_malloc_r+0x8e>
 800b4ba:	605a      	str	r2, [r3, #4]
 800b4bc:	e7ec      	b.n	800b498 <_malloc_r+0xa8>
 800b4be:	6862      	ldr	r2, [r4, #4]
 800b4c0:	42a3      	cmp	r3, r4
 800b4c2:	d1d5      	bne.n	800b470 <_malloc_r+0x80>
 800b4c4:	9b00      	ldr	r3, [sp, #0]
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	e7e9      	b.n	800b49e <_malloc_r+0xae>
 800b4ca:	0023      	movs	r3, r4
 800b4cc:	6864      	ldr	r4, [r4, #4]
 800b4ce:	e7a2      	b.n	800b416 <_malloc_r+0x26>
 800b4d0:	002c      	movs	r4, r5
 800b4d2:	686d      	ldr	r5, [r5, #4]
 800b4d4:	e7ab      	b.n	800b42e <_malloc_r+0x3e>
 800b4d6:	0013      	movs	r3, r2
 800b4d8:	e7c4      	b.n	800b464 <_malloc_r+0x74>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	0030      	movs	r0, r6
 800b4de:	6033      	str	r3, [r6, #0]
 800b4e0:	f000 f810 	bl	800b504 <__malloc_unlock>
 800b4e4:	e7cb      	b.n	800b47e <_malloc_r+0x8e>
 800b4e6:	6027      	str	r7, [r4, #0]
 800b4e8:	e7d9      	b.n	800b49e <_malloc_r+0xae>
 800b4ea:	605b      	str	r3, [r3, #4]
 800b4ec:	deff      	udf	#255	; 0xff
 800b4ee:	46c0      	nop			; (mov r8, r8)
 800b4f0:	200003e4 	.word	0x200003e4

0800b4f4 <__malloc_lock>:
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	4802      	ldr	r0, [pc, #8]	; (800b500 <__malloc_lock+0xc>)
 800b4f8:	f7ff ff0c 	bl	800b314 <__retarget_lock_acquire_recursive>
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	46c0      	nop			; (mov r8, r8)
 800b500:	200003e0 	.word	0x200003e0

0800b504 <__malloc_unlock>:
 800b504:	b510      	push	{r4, lr}
 800b506:	4802      	ldr	r0, [pc, #8]	; (800b510 <__malloc_unlock+0xc>)
 800b508:	f7ff ff05 	bl	800b316 <__retarget_lock_release_recursive>
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	200003e0 	.word	0x200003e0

0800b514 <__sflush_r>:
 800b514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b516:	898b      	ldrh	r3, [r1, #12]
 800b518:	0005      	movs	r5, r0
 800b51a:	000c      	movs	r4, r1
 800b51c:	071a      	lsls	r2, r3, #28
 800b51e:	d45c      	bmi.n	800b5da <__sflush_r+0xc6>
 800b520:	684a      	ldr	r2, [r1, #4]
 800b522:	2a00      	cmp	r2, #0
 800b524:	dc04      	bgt.n	800b530 <__sflush_r+0x1c>
 800b526:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b528:	2a00      	cmp	r2, #0
 800b52a:	dc01      	bgt.n	800b530 <__sflush_r+0x1c>
 800b52c:	2000      	movs	r0, #0
 800b52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b530:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b532:	2f00      	cmp	r7, #0
 800b534:	d0fa      	beq.n	800b52c <__sflush_r+0x18>
 800b536:	2200      	movs	r2, #0
 800b538:	2080      	movs	r0, #128	; 0x80
 800b53a:	682e      	ldr	r6, [r5, #0]
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	001a      	movs	r2, r3
 800b540:	0140      	lsls	r0, r0, #5
 800b542:	6a21      	ldr	r1, [r4, #32]
 800b544:	4002      	ands	r2, r0
 800b546:	4203      	tst	r3, r0
 800b548:	d034      	beq.n	800b5b4 <__sflush_r+0xa0>
 800b54a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	075b      	lsls	r3, r3, #29
 800b550:	d506      	bpl.n	800b560 <__sflush_r+0x4c>
 800b552:	6863      	ldr	r3, [r4, #4]
 800b554:	1ac0      	subs	r0, r0, r3
 800b556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <__sflush_r+0x4c>
 800b55c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b55e:	1ac0      	subs	r0, r0, r3
 800b560:	0002      	movs	r2, r0
 800b562:	2300      	movs	r3, #0
 800b564:	0028      	movs	r0, r5
 800b566:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	47b8      	blx	r7
 800b56c:	89a2      	ldrh	r2, [r4, #12]
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d106      	bne.n	800b580 <__sflush_r+0x6c>
 800b572:	6829      	ldr	r1, [r5, #0]
 800b574:	291d      	cmp	r1, #29
 800b576:	d82c      	bhi.n	800b5d2 <__sflush_r+0xbe>
 800b578:	4b2a      	ldr	r3, [pc, #168]	; (800b624 <__sflush_r+0x110>)
 800b57a:	410b      	asrs	r3, r1
 800b57c:	07db      	lsls	r3, r3, #31
 800b57e:	d428      	bmi.n	800b5d2 <__sflush_r+0xbe>
 800b580:	2300      	movs	r3, #0
 800b582:	6063      	str	r3, [r4, #4]
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	04d2      	lsls	r2, r2, #19
 800b58a:	d505      	bpl.n	800b598 <__sflush_r+0x84>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <__sflush_r+0x82>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d100      	bne.n	800b598 <__sflush_r+0x84>
 800b596:	6560      	str	r0, [r4, #84]	; 0x54
 800b598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b59a:	602e      	str	r6, [r5, #0]
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d0c5      	beq.n	800b52c <__sflush_r+0x18>
 800b5a0:	0023      	movs	r3, r4
 800b5a2:	3344      	adds	r3, #68	; 0x44
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	d002      	beq.n	800b5ae <__sflush_r+0x9a>
 800b5a8:	0028      	movs	r0, r5
 800b5aa:	f7ff feb5 	bl	800b318 <_free_r>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b5b2:	e7bc      	b.n	800b52e <__sflush_r+0x1a>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	0028      	movs	r0, r5
 800b5b8:	47b8      	blx	r7
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d1c6      	bne.n	800b54c <__sflush_r+0x38>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0c3      	beq.n	800b54c <__sflush_r+0x38>
 800b5c4:	2b1d      	cmp	r3, #29
 800b5c6:	d001      	beq.n	800b5cc <__sflush_r+0xb8>
 800b5c8:	2b16      	cmp	r3, #22
 800b5ca:	d101      	bne.n	800b5d0 <__sflush_r+0xbc>
 800b5cc:	602e      	str	r6, [r5, #0]
 800b5ce:	e7ad      	b.n	800b52c <__sflush_r+0x18>
 800b5d0:	89a2      	ldrh	r2, [r4, #12]
 800b5d2:	2340      	movs	r3, #64	; 0x40
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	e7a9      	b.n	800b52e <__sflush_r+0x1a>
 800b5da:	690e      	ldr	r6, [r1, #16]
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	d0a5      	beq.n	800b52c <__sflush_r+0x18>
 800b5e0:	680f      	ldr	r7, [r1, #0]
 800b5e2:	600e      	str	r6, [r1, #0]
 800b5e4:	1bba      	subs	r2, r7, r6
 800b5e6:	9201      	str	r2, [sp, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	079b      	lsls	r3, r3, #30
 800b5ec:	d100      	bne.n	800b5f0 <__sflush_r+0xdc>
 800b5ee:	694a      	ldr	r2, [r1, #20]
 800b5f0:	60a2      	str	r2, [r4, #8]
 800b5f2:	9b01      	ldr	r3, [sp, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dd99      	ble.n	800b52c <__sflush_r+0x18>
 800b5f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5fa:	0032      	movs	r2, r6
 800b5fc:	001f      	movs	r7, r3
 800b5fe:	0028      	movs	r0, r5
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	6a21      	ldr	r1, [r4, #32]
 800b604:	47b8      	blx	r7
 800b606:	2800      	cmp	r0, #0
 800b608:	dc06      	bgt.n	800b618 <__sflush_r+0x104>
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	2001      	movs	r0, #1
 800b60e:	89a2      	ldrh	r2, [r4, #12]
 800b610:	4240      	negs	r0, r0
 800b612:	4313      	orrs	r3, r2
 800b614:	81a3      	strh	r3, [r4, #12]
 800b616:	e78a      	b.n	800b52e <__sflush_r+0x1a>
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	1836      	adds	r6, r6, r0
 800b61c:	1a1b      	subs	r3, r3, r0
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	e7e7      	b.n	800b5f2 <__sflush_r+0xde>
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	dfbffffe 	.word	0xdfbffffe

0800b628 <_fflush_r>:
 800b628:	690b      	ldr	r3, [r1, #16]
 800b62a:	b570      	push	{r4, r5, r6, lr}
 800b62c:	0005      	movs	r5, r0
 800b62e:	000c      	movs	r4, r1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d102      	bne.n	800b63a <_fflush_r+0x12>
 800b634:	2500      	movs	r5, #0
 800b636:	0028      	movs	r0, r5
 800b638:	bd70      	pop	{r4, r5, r6, pc}
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d004      	beq.n	800b648 <_fflush_r+0x20>
 800b63e:	6a03      	ldr	r3, [r0, #32]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <_fflush_r+0x20>
 800b644:	f7ff fc60 	bl	800af08 <__sinit>
 800b648:	220c      	movs	r2, #12
 800b64a:	5ea3      	ldrsh	r3, [r4, r2]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0f1      	beq.n	800b634 <_fflush_r+0xc>
 800b650:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b652:	07d2      	lsls	r2, r2, #31
 800b654:	d404      	bmi.n	800b660 <_fflush_r+0x38>
 800b656:	059b      	lsls	r3, r3, #22
 800b658:	d402      	bmi.n	800b660 <_fflush_r+0x38>
 800b65a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b65c:	f7ff fe5a 	bl	800b314 <__retarget_lock_acquire_recursive>
 800b660:	0028      	movs	r0, r5
 800b662:	0021      	movs	r1, r4
 800b664:	f7ff ff56 	bl	800b514 <__sflush_r>
 800b668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b66a:	0005      	movs	r5, r0
 800b66c:	07db      	lsls	r3, r3, #31
 800b66e:	d4e2      	bmi.n	800b636 <_fflush_r+0xe>
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	059b      	lsls	r3, r3, #22
 800b674:	d4df      	bmi.n	800b636 <_fflush_r+0xe>
 800b676:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b678:	f7ff fe4d 	bl	800b316 <__retarget_lock_release_recursive>
 800b67c:	e7db      	b.n	800b636 <_fflush_r+0xe>
	...

0800b680 <__swhatbuf_r>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	000e      	movs	r6, r1
 800b684:	001d      	movs	r5, r3
 800b686:	230e      	movs	r3, #14
 800b688:	5ec9      	ldrsh	r1, [r1, r3]
 800b68a:	0014      	movs	r4, r2
 800b68c:	b096      	sub	sp, #88	; 0x58
 800b68e:	2900      	cmp	r1, #0
 800b690:	da0c      	bge.n	800b6ac <__swhatbuf_r+0x2c>
 800b692:	89b2      	ldrh	r2, [r6, #12]
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	0011      	movs	r1, r2
 800b698:	4019      	ands	r1, r3
 800b69a:	421a      	tst	r2, r3
 800b69c:	d013      	beq.n	800b6c6 <__swhatbuf_r+0x46>
 800b69e:	2100      	movs	r1, #0
 800b6a0:	3b40      	subs	r3, #64	; 0x40
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	6029      	str	r1, [r5, #0]
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	b016      	add	sp, #88	; 0x58
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	466a      	mov	r2, sp
 800b6ae:	f000 f84d 	bl	800b74c <_fstat_r>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	dbed      	blt.n	800b692 <__swhatbuf_r+0x12>
 800b6b6:	23f0      	movs	r3, #240	; 0xf0
 800b6b8:	9901      	ldr	r1, [sp, #4]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	4019      	ands	r1, r3
 800b6be:	4b03      	ldr	r3, [pc, #12]	; (800b6cc <__swhatbuf_r+0x4c>)
 800b6c0:	18c9      	adds	r1, r1, r3
 800b6c2:	424b      	negs	r3, r1
 800b6c4:	4159      	adcs	r1, r3
 800b6c6:	2380      	movs	r3, #128	; 0x80
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	e7ea      	b.n	800b6a2 <__swhatbuf_r+0x22>
 800b6cc:	ffffe000 	.word	0xffffe000

0800b6d0 <__smakebuf_r>:
 800b6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6d2:	2602      	movs	r6, #2
 800b6d4:	898b      	ldrh	r3, [r1, #12]
 800b6d6:	0005      	movs	r5, r0
 800b6d8:	000c      	movs	r4, r1
 800b6da:	4233      	tst	r3, r6
 800b6dc:	d006      	beq.n	800b6ec <__smakebuf_r+0x1c>
 800b6de:	0023      	movs	r3, r4
 800b6e0:	3347      	adds	r3, #71	; 0x47
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	6163      	str	r3, [r4, #20]
 800b6ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b6ec:	466a      	mov	r2, sp
 800b6ee:	ab01      	add	r3, sp, #4
 800b6f0:	f7ff ffc6 	bl	800b680 <__swhatbuf_r>
 800b6f4:	9900      	ldr	r1, [sp, #0]
 800b6f6:	0007      	movs	r7, r0
 800b6f8:	0028      	movs	r0, r5
 800b6fa:	f7ff fe79 	bl	800b3f0 <_malloc_r>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d108      	bne.n	800b714 <__smakebuf_r+0x44>
 800b702:	220c      	movs	r2, #12
 800b704:	5ea3      	ldrsh	r3, [r4, r2]
 800b706:	059a      	lsls	r2, r3, #22
 800b708:	d4ef      	bmi.n	800b6ea <__smakebuf_r+0x1a>
 800b70a:	2203      	movs	r2, #3
 800b70c:	4393      	bics	r3, r2
 800b70e:	431e      	orrs	r6, r3
 800b710:	81a6      	strh	r6, [r4, #12]
 800b712:	e7e4      	b.n	800b6de <__smakebuf_r+0xe>
 800b714:	2380      	movs	r3, #128	; 0x80
 800b716:	89a2      	ldrh	r2, [r4, #12]
 800b718:	6020      	str	r0, [r4, #0]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	9b00      	ldr	r3, [sp, #0]
 800b720:	6120      	str	r0, [r4, #16]
 800b722:	6163      	str	r3, [r4, #20]
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00c      	beq.n	800b744 <__smakebuf_r+0x74>
 800b72a:	0028      	movs	r0, r5
 800b72c:	230e      	movs	r3, #14
 800b72e:	5ee1      	ldrsh	r1, [r4, r3]
 800b730:	f000 f81e 	bl	800b770 <_isatty_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	d005      	beq.n	800b744 <__smakebuf_r+0x74>
 800b738:	2303      	movs	r3, #3
 800b73a:	89a2      	ldrh	r2, [r4, #12]
 800b73c:	439a      	bics	r2, r3
 800b73e:	3b02      	subs	r3, #2
 800b740:	4313      	orrs	r3, r2
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	433b      	orrs	r3, r7
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	e7ce      	b.n	800b6ea <__smakebuf_r+0x1a>

0800b74c <_fstat_r>:
 800b74c:	2300      	movs	r3, #0
 800b74e:	b570      	push	{r4, r5, r6, lr}
 800b750:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_fstat_r+0x20>)
 800b752:	0004      	movs	r4, r0
 800b754:	0008      	movs	r0, r1
 800b756:	0011      	movs	r1, r2
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f7fd f947 	bl	80089ec <_fstat>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d103      	bne.n	800b76a <_fstat_r+0x1e>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d000      	beq.n	800b76a <_fstat_r+0x1e>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	200003dc 	.word	0x200003dc

0800b770 <_isatty_r>:
 800b770:	2300      	movs	r3, #0
 800b772:	b570      	push	{r4, r5, r6, lr}
 800b774:	4d06      	ldr	r5, [pc, #24]	; (800b790 <_isatty_r+0x20>)
 800b776:	0004      	movs	r4, r0
 800b778:	0008      	movs	r0, r1
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	f7fd f944 	bl	8008a08 <_isatty>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d103      	bne.n	800b78c <_isatty_r+0x1c>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d000      	beq.n	800b78c <_isatty_r+0x1c>
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	200003dc 	.word	0x200003dc

0800b794 <_sbrk_r>:
 800b794:	2300      	movs	r3, #0
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	4d06      	ldr	r5, [pc, #24]	; (800b7b4 <_sbrk_r+0x20>)
 800b79a:	0004      	movs	r4, r0
 800b79c:	0008      	movs	r0, r1
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	f7fd f946 	bl	8008a30 <_sbrk>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d103      	bne.n	800b7b0 <_sbrk_r+0x1c>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d000      	beq.n	800b7b0 <_sbrk_r+0x1c>
 800b7ae:	6023      	str	r3, [r4, #0]
 800b7b0:	bd70      	pop	{r4, r5, r6, pc}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	200003dc 	.word	0x200003dc

0800b7b8 <_init>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr

0800b7c4 <_fini>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ca:	bc08      	pop	{r3}
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	4770      	bx	lr
