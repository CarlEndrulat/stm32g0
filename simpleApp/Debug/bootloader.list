
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00030100  2**2
                  ALLOC
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .mysection    00000024  08075500  08075500  00025500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         000037f0  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       000000bc  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080048b8  080048b8  00025524  2**0
                  CONTENTS
  7 .ARM          00000008  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080048c0  080048c0  00025524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000006c  20000180  080048c8  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00000204  200001ec  08004934  000201ec  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200003f0  08004934  000203f0  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  00025524  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  0002554c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0000b83e  00000000  00000000  0002558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001d2e  00000000  00000000  00030dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000990  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000753  00000000  00000000  00033490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001c0ef  00000000  00000000  00033be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0000b855  00000000  00000000  0004fcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000b20ba  00000000  00000000  0005b527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00002758  00000000  00000000  0010d5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000063  00000000  00000000  0010fd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .mysection:

08075500 <Blink>:
{
		//void(*Blink)(uint32_t ms);
		Blink
};

void LOCATE_FUNC Blink(uint32_t ms){
 8075500:	b580      	push	{r7, lr}
 8075502:	b082      	sub	sp, #8
 8075504:	af00      	add	r7, sp, #0
 8075506:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8075508:	23a0      	movs	r3, #160	; 0xa0
 807550a:	05db      	lsls	r3, r3, #23
 807550c:	2120      	movs	r1, #32
 807550e:	0018      	movs	r0, r3
 8075510:	f78c fdb9 	bl	8002086 <HAL_GPIO_TogglePin>
	HAL_Delay(ms);
 8075514:	687b      	ldr	r3, [r7, #4]
 8075516:	0018      	movs	r0, r3
 8075518:	f78c fb54 	bl	8001bc4 <HAL_Delay>
}
 807551c:	46c0      	nop			; (mov r8, r8)
 807551e:	46bd      	mov	sp, r7
 8075520:	b002      	add	sp, #8
 8075522:	bd80      	pop	{r7, pc}

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	; (8001028 <__do_global_dtors_aux+0x1c>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <__do_global_dtors_aux+0x1a>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <__do_global_dtors_aux+0x20>)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <__do_global_dtors_aux+0x16>
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <__do_global_dtors_aux+0x24>)
 800101e:	e000      	b.n	8001022 <__do_global_dtors_aux+0x16>
 8001020:	bf00      	nop
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	200001ec 	.word	0x200001ec
 800102c:	00000000 	.word	0x00000000
 8001030:	080047e4 	.word	0x080047e4

08001034 <frame_dummy>:
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <frame_dummy+0x14>)
 8001036:	b510      	push	{r4, lr}
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <frame_dummy+0x10>
 800103c:	4903      	ldr	r1, [pc, #12]	; (800104c <frame_dummy+0x18>)
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <frame_dummy+0x1c>)
 8001040:	e000      	b.n	8001044 <frame_dummy+0x10>
 8001042:	bf00      	nop
 8001044:	bd10      	pop	{r4, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	00000000 	.word	0x00000000
 800104c:	200001f0 	.word	0x200001f0
 8001050:	080047e4 	.word	0x080047e4

08001054 <__udivsi3>:
 8001054:	2200      	movs	r2, #0
 8001056:	0843      	lsrs	r3, r0, #1
 8001058:	428b      	cmp	r3, r1
 800105a:	d374      	bcc.n	8001146 <__udivsi3+0xf2>
 800105c:	0903      	lsrs	r3, r0, #4
 800105e:	428b      	cmp	r3, r1
 8001060:	d35f      	bcc.n	8001122 <__udivsi3+0xce>
 8001062:	0a03      	lsrs	r3, r0, #8
 8001064:	428b      	cmp	r3, r1
 8001066:	d344      	bcc.n	80010f2 <__udivsi3+0x9e>
 8001068:	0b03      	lsrs	r3, r0, #12
 800106a:	428b      	cmp	r3, r1
 800106c:	d328      	bcc.n	80010c0 <__udivsi3+0x6c>
 800106e:	0c03      	lsrs	r3, r0, #16
 8001070:	428b      	cmp	r3, r1
 8001072:	d30d      	bcc.n	8001090 <__udivsi3+0x3c>
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	ba12      	rev	r2, r2
 800107a:	0c03      	lsrs	r3, r0, #16
 800107c:	428b      	cmp	r3, r1
 800107e:	d302      	bcc.n	8001086 <__udivsi3+0x32>
 8001080:	1212      	asrs	r2, r2, #8
 8001082:	0209      	lsls	r1, r1, #8
 8001084:	d065      	beq.n	8001152 <__udivsi3+0xfe>
 8001086:	0b03      	lsrs	r3, r0, #12
 8001088:	428b      	cmp	r3, r1
 800108a:	d319      	bcc.n	80010c0 <__udivsi3+0x6c>
 800108c:	e000      	b.n	8001090 <__udivsi3+0x3c>
 800108e:	0a09      	lsrs	r1, r1, #8
 8001090:	0bc3      	lsrs	r3, r0, #15
 8001092:	428b      	cmp	r3, r1
 8001094:	d301      	bcc.n	800109a <__udivsi3+0x46>
 8001096:	03cb      	lsls	r3, r1, #15
 8001098:	1ac0      	subs	r0, r0, r3
 800109a:	4152      	adcs	r2, r2
 800109c:	0b83      	lsrs	r3, r0, #14
 800109e:	428b      	cmp	r3, r1
 80010a0:	d301      	bcc.n	80010a6 <__udivsi3+0x52>
 80010a2:	038b      	lsls	r3, r1, #14
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	4152      	adcs	r2, r2
 80010a8:	0b43      	lsrs	r3, r0, #13
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d301      	bcc.n	80010b2 <__udivsi3+0x5e>
 80010ae:	034b      	lsls	r3, r1, #13
 80010b0:	1ac0      	subs	r0, r0, r3
 80010b2:	4152      	adcs	r2, r2
 80010b4:	0b03      	lsrs	r3, r0, #12
 80010b6:	428b      	cmp	r3, r1
 80010b8:	d301      	bcc.n	80010be <__udivsi3+0x6a>
 80010ba:	030b      	lsls	r3, r1, #12
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	4152      	adcs	r2, r2
 80010c0:	0ac3      	lsrs	r3, r0, #11
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d301      	bcc.n	80010ca <__udivsi3+0x76>
 80010c6:	02cb      	lsls	r3, r1, #11
 80010c8:	1ac0      	subs	r0, r0, r3
 80010ca:	4152      	adcs	r2, r2
 80010cc:	0a83      	lsrs	r3, r0, #10
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d301      	bcc.n	80010d6 <__udivsi3+0x82>
 80010d2:	028b      	lsls	r3, r1, #10
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	4152      	adcs	r2, r2
 80010d8:	0a43      	lsrs	r3, r0, #9
 80010da:	428b      	cmp	r3, r1
 80010dc:	d301      	bcc.n	80010e2 <__udivsi3+0x8e>
 80010de:	024b      	lsls	r3, r1, #9
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	4152      	adcs	r2, r2
 80010e4:	0a03      	lsrs	r3, r0, #8
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d301      	bcc.n	80010ee <__udivsi3+0x9a>
 80010ea:	020b      	lsls	r3, r1, #8
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	4152      	adcs	r2, r2
 80010f0:	d2cd      	bcs.n	800108e <__udivsi3+0x3a>
 80010f2:	09c3      	lsrs	r3, r0, #7
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d301      	bcc.n	80010fc <__udivsi3+0xa8>
 80010f8:	01cb      	lsls	r3, r1, #7
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	4152      	adcs	r2, r2
 80010fe:	0983      	lsrs	r3, r0, #6
 8001100:	428b      	cmp	r3, r1
 8001102:	d301      	bcc.n	8001108 <__udivsi3+0xb4>
 8001104:	018b      	lsls	r3, r1, #6
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4152      	adcs	r2, r2
 800110a:	0943      	lsrs	r3, r0, #5
 800110c:	428b      	cmp	r3, r1
 800110e:	d301      	bcc.n	8001114 <__udivsi3+0xc0>
 8001110:	014b      	lsls	r3, r1, #5
 8001112:	1ac0      	subs	r0, r0, r3
 8001114:	4152      	adcs	r2, r2
 8001116:	0903      	lsrs	r3, r0, #4
 8001118:	428b      	cmp	r3, r1
 800111a:	d301      	bcc.n	8001120 <__udivsi3+0xcc>
 800111c:	010b      	lsls	r3, r1, #4
 800111e:	1ac0      	subs	r0, r0, r3
 8001120:	4152      	adcs	r2, r2
 8001122:	08c3      	lsrs	r3, r0, #3
 8001124:	428b      	cmp	r3, r1
 8001126:	d301      	bcc.n	800112c <__udivsi3+0xd8>
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	4152      	adcs	r2, r2
 800112e:	0883      	lsrs	r3, r0, #2
 8001130:	428b      	cmp	r3, r1
 8001132:	d301      	bcc.n	8001138 <__udivsi3+0xe4>
 8001134:	008b      	lsls	r3, r1, #2
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	4152      	adcs	r2, r2
 800113a:	0843      	lsrs	r3, r0, #1
 800113c:	428b      	cmp	r3, r1
 800113e:	d301      	bcc.n	8001144 <__udivsi3+0xf0>
 8001140:	004b      	lsls	r3, r1, #1
 8001142:	1ac0      	subs	r0, r0, r3
 8001144:	4152      	adcs	r2, r2
 8001146:	1a41      	subs	r1, r0, r1
 8001148:	d200      	bcs.n	800114c <__udivsi3+0xf8>
 800114a:	4601      	mov	r1, r0
 800114c:	4152      	adcs	r2, r2
 800114e:	4610      	mov	r0, r2
 8001150:	4770      	bx	lr
 8001152:	e7ff      	b.n	8001154 <__udivsi3+0x100>
 8001154:	b501      	push	{r0, lr}
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f8f0 	bl	800133c <__aeabi_idiv0>
 800115c:	bd02      	pop	{r1, pc}
 800115e:	46c0      	nop			; (mov r8, r8)

08001160 <__aeabi_uidivmod>:
 8001160:	2900      	cmp	r1, #0
 8001162:	d0f7      	beq.n	8001154 <__udivsi3+0x100>
 8001164:	e776      	b.n	8001054 <__udivsi3>
 8001166:	4770      	bx	lr

08001168 <__divsi3>:
 8001168:	4603      	mov	r3, r0
 800116a:	430b      	orrs	r3, r1
 800116c:	d47f      	bmi.n	800126e <__divsi3+0x106>
 800116e:	2200      	movs	r2, #0
 8001170:	0843      	lsrs	r3, r0, #1
 8001172:	428b      	cmp	r3, r1
 8001174:	d374      	bcc.n	8001260 <__divsi3+0xf8>
 8001176:	0903      	lsrs	r3, r0, #4
 8001178:	428b      	cmp	r3, r1
 800117a:	d35f      	bcc.n	800123c <__divsi3+0xd4>
 800117c:	0a03      	lsrs	r3, r0, #8
 800117e:	428b      	cmp	r3, r1
 8001180:	d344      	bcc.n	800120c <__divsi3+0xa4>
 8001182:	0b03      	lsrs	r3, r0, #12
 8001184:	428b      	cmp	r3, r1
 8001186:	d328      	bcc.n	80011da <__divsi3+0x72>
 8001188:	0c03      	lsrs	r3, r0, #16
 800118a:	428b      	cmp	r3, r1
 800118c:	d30d      	bcc.n	80011aa <__divsi3+0x42>
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	0209      	lsls	r1, r1, #8
 8001192:	ba12      	rev	r2, r2
 8001194:	0c03      	lsrs	r3, r0, #16
 8001196:	428b      	cmp	r3, r1
 8001198:	d302      	bcc.n	80011a0 <__divsi3+0x38>
 800119a:	1212      	asrs	r2, r2, #8
 800119c:	0209      	lsls	r1, r1, #8
 800119e:	d065      	beq.n	800126c <__divsi3+0x104>
 80011a0:	0b03      	lsrs	r3, r0, #12
 80011a2:	428b      	cmp	r3, r1
 80011a4:	d319      	bcc.n	80011da <__divsi3+0x72>
 80011a6:	e000      	b.n	80011aa <__divsi3+0x42>
 80011a8:	0a09      	lsrs	r1, r1, #8
 80011aa:	0bc3      	lsrs	r3, r0, #15
 80011ac:	428b      	cmp	r3, r1
 80011ae:	d301      	bcc.n	80011b4 <__divsi3+0x4c>
 80011b0:	03cb      	lsls	r3, r1, #15
 80011b2:	1ac0      	subs	r0, r0, r3
 80011b4:	4152      	adcs	r2, r2
 80011b6:	0b83      	lsrs	r3, r0, #14
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d301      	bcc.n	80011c0 <__divsi3+0x58>
 80011bc:	038b      	lsls	r3, r1, #14
 80011be:	1ac0      	subs	r0, r0, r3
 80011c0:	4152      	adcs	r2, r2
 80011c2:	0b43      	lsrs	r3, r0, #13
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d301      	bcc.n	80011cc <__divsi3+0x64>
 80011c8:	034b      	lsls	r3, r1, #13
 80011ca:	1ac0      	subs	r0, r0, r3
 80011cc:	4152      	adcs	r2, r2
 80011ce:	0b03      	lsrs	r3, r0, #12
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d301      	bcc.n	80011d8 <__divsi3+0x70>
 80011d4:	030b      	lsls	r3, r1, #12
 80011d6:	1ac0      	subs	r0, r0, r3
 80011d8:	4152      	adcs	r2, r2
 80011da:	0ac3      	lsrs	r3, r0, #11
 80011dc:	428b      	cmp	r3, r1
 80011de:	d301      	bcc.n	80011e4 <__divsi3+0x7c>
 80011e0:	02cb      	lsls	r3, r1, #11
 80011e2:	1ac0      	subs	r0, r0, r3
 80011e4:	4152      	adcs	r2, r2
 80011e6:	0a83      	lsrs	r3, r0, #10
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d301      	bcc.n	80011f0 <__divsi3+0x88>
 80011ec:	028b      	lsls	r3, r1, #10
 80011ee:	1ac0      	subs	r0, r0, r3
 80011f0:	4152      	adcs	r2, r2
 80011f2:	0a43      	lsrs	r3, r0, #9
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d301      	bcc.n	80011fc <__divsi3+0x94>
 80011f8:	024b      	lsls	r3, r1, #9
 80011fa:	1ac0      	subs	r0, r0, r3
 80011fc:	4152      	adcs	r2, r2
 80011fe:	0a03      	lsrs	r3, r0, #8
 8001200:	428b      	cmp	r3, r1
 8001202:	d301      	bcc.n	8001208 <__divsi3+0xa0>
 8001204:	020b      	lsls	r3, r1, #8
 8001206:	1ac0      	subs	r0, r0, r3
 8001208:	4152      	adcs	r2, r2
 800120a:	d2cd      	bcs.n	80011a8 <__divsi3+0x40>
 800120c:	09c3      	lsrs	r3, r0, #7
 800120e:	428b      	cmp	r3, r1
 8001210:	d301      	bcc.n	8001216 <__divsi3+0xae>
 8001212:	01cb      	lsls	r3, r1, #7
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	4152      	adcs	r2, r2
 8001218:	0983      	lsrs	r3, r0, #6
 800121a:	428b      	cmp	r3, r1
 800121c:	d301      	bcc.n	8001222 <__divsi3+0xba>
 800121e:	018b      	lsls	r3, r1, #6
 8001220:	1ac0      	subs	r0, r0, r3
 8001222:	4152      	adcs	r2, r2
 8001224:	0943      	lsrs	r3, r0, #5
 8001226:	428b      	cmp	r3, r1
 8001228:	d301      	bcc.n	800122e <__divsi3+0xc6>
 800122a:	014b      	lsls	r3, r1, #5
 800122c:	1ac0      	subs	r0, r0, r3
 800122e:	4152      	adcs	r2, r2
 8001230:	0903      	lsrs	r3, r0, #4
 8001232:	428b      	cmp	r3, r1
 8001234:	d301      	bcc.n	800123a <__divsi3+0xd2>
 8001236:	010b      	lsls	r3, r1, #4
 8001238:	1ac0      	subs	r0, r0, r3
 800123a:	4152      	adcs	r2, r2
 800123c:	08c3      	lsrs	r3, r0, #3
 800123e:	428b      	cmp	r3, r1
 8001240:	d301      	bcc.n	8001246 <__divsi3+0xde>
 8001242:	00cb      	lsls	r3, r1, #3
 8001244:	1ac0      	subs	r0, r0, r3
 8001246:	4152      	adcs	r2, r2
 8001248:	0883      	lsrs	r3, r0, #2
 800124a:	428b      	cmp	r3, r1
 800124c:	d301      	bcc.n	8001252 <__divsi3+0xea>
 800124e:	008b      	lsls	r3, r1, #2
 8001250:	1ac0      	subs	r0, r0, r3
 8001252:	4152      	adcs	r2, r2
 8001254:	0843      	lsrs	r3, r0, #1
 8001256:	428b      	cmp	r3, r1
 8001258:	d301      	bcc.n	800125e <__divsi3+0xf6>
 800125a:	004b      	lsls	r3, r1, #1
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	4152      	adcs	r2, r2
 8001260:	1a41      	subs	r1, r0, r1
 8001262:	d200      	bcs.n	8001266 <__divsi3+0xfe>
 8001264:	4601      	mov	r1, r0
 8001266:	4152      	adcs	r2, r2
 8001268:	4610      	mov	r0, r2
 800126a:	4770      	bx	lr
 800126c:	e05d      	b.n	800132a <__divsi3+0x1c2>
 800126e:	0fca      	lsrs	r2, r1, #31
 8001270:	d000      	beq.n	8001274 <__divsi3+0x10c>
 8001272:	4249      	negs	r1, r1
 8001274:	1003      	asrs	r3, r0, #32
 8001276:	d300      	bcc.n	800127a <__divsi3+0x112>
 8001278:	4240      	negs	r0, r0
 800127a:	4053      	eors	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	469c      	mov	ip, r3
 8001280:	0903      	lsrs	r3, r0, #4
 8001282:	428b      	cmp	r3, r1
 8001284:	d32d      	bcc.n	80012e2 <__divsi3+0x17a>
 8001286:	0a03      	lsrs	r3, r0, #8
 8001288:	428b      	cmp	r3, r1
 800128a:	d312      	bcc.n	80012b2 <__divsi3+0x14a>
 800128c:	22fc      	movs	r2, #252	; 0xfc
 800128e:	0189      	lsls	r1, r1, #6
 8001290:	ba12      	rev	r2, r2
 8001292:	0a03      	lsrs	r3, r0, #8
 8001294:	428b      	cmp	r3, r1
 8001296:	d30c      	bcc.n	80012b2 <__divsi3+0x14a>
 8001298:	0189      	lsls	r1, r1, #6
 800129a:	1192      	asrs	r2, r2, #6
 800129c:	428b      	cmp	r3, r1
 800129e:	d308      	bcc.n	80012b2 <__divsi3+0x14a>
 80012a0:	0189      	lsls	r1, r1, #6
 80012a2:	1192      	asrs	r2, r2, #6
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d304      	bcc.n	80012b2 <__divsi3+0x14a>
 80012a8:	0189      	lsls	r1, r1, #6
 80012aa:	d03a      	beq.n	8001322 <__divsi3+0x1ba>
 80012ac:	1192      	asrs	r2, r2, #6
 80012ae:	e000      	b.n	80012b2 <__divsi3+0x14a>
 80012b0:	0989      	lsrs	r1, r1, #6
 80012b2:	09c3      	lsrs	r3, r0, #7
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d301      	bcc.n	80012bc <__divsi3+0x154>
 80012b8:	01cb      	lsls	r3, r1, #7
 80012ba:	1ac0      	subs	r0, r0, r3
 80012bc:	4152      	adcs	r2, r2
 80012be:	0983      	lsrs	r3, r0, #6
 80012c0:	428b      	cmp	r3, r1
 80012c2:	d301      	bcc.n	80012c8 <__divsi3+0x160>
 80012c4:	018b      	lsls	r3, r1, #6
 80012c6:	1ac0      	subs	r0, r0, r3
 80012c8:	4152      	adcs	r2, r2
 80012ca:	0943      	lsrs	r3, r0, #5
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d301      	bcc.n	80012d4 <__divsi3+0x16c>
 80012d0:	014b      	lsls	r3, r1, #5
 80012d2:	1ac0      	subs	r0, r0, r3
 80012d4:	4152      	adcs	r2, r2
 80012d6:	0903      	lsrs	r3, r0, #4
 80012d8:	428b      	cmp	r3, r1
 80012da:	d301      	bcc.n	80012e0 <__divsi3+0x178>
 80012dc:	010b      	lsls	r3, r1, #4
 80012de:	1ac0      	subs	r0, r0, r3
 80012e0:	4152      	adcs	r2, r2
 80012e2:	08c3      	lsrs	r3, r0, #3
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d301      	bcc.n	80012ec <__divsi3+0x184>
 80012e8:	00cb      	lsls	r3, r1, #3
 80012ea:	1ac0      	subs	r0, r0, r3
 80012ec:	4152      	adcs	r2, r2
 80012ee:	0883      	lsrs	r3, r0, #2
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d301      	bcc.n	80012f8 <__divsi3+0x190>
 80012f4:	008b      	lsls	r3, r1, #2
 80012f6:	1ac0      	subs	r0, r0, r3
 80012f8:	4152      	adcs	r2, r2
 80012fa:	d2d9      	bcs.n	80012b0 <__divsi3+0x148>
 80012fc:	0843      	lsrs	r3, r0, #1
 80012fe:	428b      	cmp	r3, r1
 8001300:	d301      	bcc.n	8001306 <__divsi3+0x19e>
 8001302:	004b      	lsls	r3, r1, #1
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	4152      	adcs	r2, r2
 8001308:	1a41      	subs	r1, r0, r1
 800130a:	d200      	bcs.n	800130e <__divsi3+0x1a6>
 800130c:	4601      	mov	r1, r0
 800130e:	4663      	mov	r3, ip
 8001310:	4152      	adcs	r2, r2
 8001312:	105b      	asrs	r3, r3, #1
 8001314:	4610      	mov	r0, r2
 8001316:	d301      	bcc.n	800131c <__divsi3+0x1b4>
 8001318:	4240      	negs	r0, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d500      	bpl.n	8001320 <__divsi3+0x1b8>
 800131e:	4249      	negs	r1, r1
 8001320:	4770      	bx	lr
 8001322:	4663      	mov	r3, ip
 8001324:	105b      	asrs	r3, r3, #1
 8001326:	d300      	bcc.n	800132a <__divsi3+0x1c2>
 8001328:	4240      	negs	r0, r0
 800132a:	b501      	push	{r0, lr}
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f805 	bl	800133c <__aeabi_idiv0>
 8001332:	bd02      	pop	{r1, pc}

08001334 <__aeabi_idivmod>:
 8001334:	2900      	cmp	r1, #0
 8001336:	d0f8      	beq.n	800132a <__divsi3+0x1c2>
 8001338:	e716      	b.n	8001168 <__divsi3>
 800133a:	4770      	bx	lr

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	46c0      	nop			; (mov r8, r8)

08001340 <__aeabi_uldivmod>:
 8001340:	2b00      	cmp	r3, #0
 8001342:	d111      	bne.n	8001368 <__aeabi_uldivmod+0x28>
 8001344:	2a00      	cmp	r2, #0
 8001346:	d10f      	bne.n	8001368 <__aeabi_uldivmod+0x28>
 8001348:	2900      	cmp	r1, #0
 800134a:	d100      	bne.n	800134e <__aeabi_uldivmod+0xe>
 800134c:	2800      	cmp	r0, #0
 800134e:	d002      	beq.n	8001356 <__aeabi_uldivmod+0x16>
 8001350:	2100      	movs	r1, #0
 8001352:	43c9      	mvns	r1, r1
 8001354:	0008      	movs	r0, r1
 8001356:	b407      	push	{r0, r1, r2}
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <__aeabi_uldivmod+0x24>)
 800135a:	a102      	add	r1, pc, #8	; (adr r1, 8001364 <__aeabi_uldivmod+0x24>)
 800135c:	1840      	adds	r0, r0, r1
 800135e:	9002      	str	r0, [sp, #8]
 8001360:	bd03      	pop	{r0, r1, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	ffffffd9 	.word	0xffffffd9
 8001368:	b403      	push	{r0, r1}
 800136a:	4668      	mov	r0, sp
 800136c:	b501      	push	{r0, lr}
 800136e:	9802      	ldr	r0, [sp, #8]
 8001370:	f000 f806 	bl	8001380 <__udivmoddi4>
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	469e      	mov	lr, r3
 8001378:	b002      	add	sp, #8
 800137a:	bc0c      	pop	{r2, r3}
 800137c:	4770      	bx	lr
 800137e:	46c0      	nop			; (mov r8, r8)

08001380 <__udivmoddi4>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	4657      	mov	r7, sl
 8001384:	464e      	mov	r6, r9
 8001386:	4645      	mov	r5, r8
 8001388:	46de      	mov	lr, fp
 800138a:	b5e0      	push	{r5, r6, r7, lr}
 800138c:	0004      	movs	r4, r0
 800138e:	000d      	movs	r5, r1
 8001390:	4692      	mov	sl, r2
 8001392:	4699      	mov	r9, r3
 8001394:	b083      	sub	sp, #12
 8001396:	428b      	cmp	r3, r1
 8001398:	d830      	bhi.n	80013fc <__udivmoddi4+0x7c>
 800139a:	d02d      	beq.n	80013f8 <__udivmoddi4+0x78>
 800139c:	4649      	mov	r1, r9
 800139e:	4650      	mov	r0, sl
 80013a0:	f000 f8ba 	bl	8001518 <__clzdi2>
 80013a4:	0029      	movs	r1, r5
 80013a6:	0006      	movs	r6, r0
 80013a8:	0020      	movs	r0, r4
 80013aa:	f000 f8b5 	bl	8001518 <__clzdi2>
 80013ae:	1a33      	subs	r3, r6, r0
 80013b0:	4698      	mov	r8, r3
 80013b2:	3b20      	subs	r3, #32
 80013b4:	d434      	bmi.n	8001420 <__udivmoddi4+0xa0>
 80013b6:	469b      	mov	fp, r3
 80013b8:	4653      	mov	r3, sl
 80013ba:	465a      	mov	r2, fp
 80013bc:	4093      	lsls	r3, r2
 80013be:	4642      	mov	r2, r8
 80013c0:	001f      	movs	r7, r3
 80013c2:	4653      	mov	r3, sl
 80013c4:	4093      	lsls	r3, r2
 80013c6:	001e      	movs	r6, r3
 80013c8:	42af      	cmp	r7, r5
 80013ca:	d83b      	bhi.n	8001444 <__udivmoddi4+0xc4>
 80013cc:	42af      	cmp	r7, r5
 80013ce:	d100      	bne.n	80013d2 <__udivmoddi4+0x52>
 80013d0:	e079      	b.n	80014c6 <__udivmoddi4+0x146>
 80013d2:	465b      	mov	r3, fp
 80013d4:	1ba4      	subs	r4, r4, r6
 80013d6:	41bd      	sbcs	r5, r7
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da00      	bge.n	80013de <__udivmoddi4+0x5e>
 80013dc:	e076      	b.n	80014cc <__udivmoddi4+0x14c>
 80013de:	2200      	movs	r2, #0
 80013e0:	2300      	movs	r3, #0
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2301      	movs	r3, #1
 80013e8:	465a      	mov	r2, fp
 80013ea:	4093      	lsls	r3, r2
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2301      	movs	r3, #1
 80013f0:	4642      	mov	r2, r8
 80013f2:	4093      	lsls	r3, r2
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	e029      	b.n	800144c <__udivmoddi4+0xcc>
 80013f8:	4282      	cmp	r2, r0
 80013fa:	d9cf      	bls.n	800139c <__udivmoddi4+0x1c>
 80013fc:	2200      	movs	r2, #0
 80013fe:	2300      	movs	r3, #0
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <__udivmoddi4+0x8e>
 800140a:	601c      	str	r4, [r3, #0]
 800140c:	605d      	str	r5, [r3, #4]
 800140e:	9800      	ldr	r0, [sp, #0]
 8001410:	9901      	ldr	r1, [sp, #4]
 8001412:	b003      	add	sp, #12
 8001414:	bcf0      	pop	{r4, r5, r6, r7}
 8001416:	46bb      	mov	fp, r7
 8001418:	46b2      	mov	sl, r6
 800141a:	46a9      	mov	r9, r5
 800141c:	46a0      	mov	r8, r4
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	4642      	mov	r2, r8
 8001422:	469b      	mov	fp, r3
 8001424:	2320      	movs	r3, #32
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	4652      	mov	r2, sl
 800142a:	40da      	lsrs	r2, r3
 800142c:	4641      	mov	r1, r8
 800142e:	0013      	movs	r3, r2
 8001430:	464a      	mov	r2, r9
 8001432:	408a      	lsls	r2, r1
 8001434:	0017      	movs	r7, r2
 8001436:	4642      	mov	r2, r8
 8001438:	431f      	orrs	r7, r3
 800143a:	4653      	mov	r3, sl
 800143c:	4093      	lsls	r3, r2
 800143e:	001e      	movs	r6, r3
 8001440:	42af      	cmp	r7, r5
 8001442:	d9c3      	bls.n	80013cc <__udivmoddi4+0x4c>
 8001444:	2200      	movs	r2, #0
 8001446:	2300      	movs	r3, #0
 8001448:	9200      	str	r2, [sp, #0]
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	4643      	mov	r3, r8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0d8      	beq.n	8001404 <__udivmoddi4+0x84>
 8001452:	07fb      	lsls	r3, r7, #31
 8001454:	0872      	lsrs	r2, r6, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	4646      	mov	r6, r8
 800145a:	087b      	lsrs	r3, r7, #1
 800145c:	e00e      	b.n	800147c <__udivmoddi4+0xfc>
 800145e:	42ab      	cmp	r3, r5
 8001460:	d101      	bne.n	8001466 <__udivmoddi4+0xe6>
 8001462:	42a2      	cmp	r2, r4
 8001464:	d80c      	bhi.n	8001480 <__udivmoddi4+0x100>
 8001466:	1aa4      	subs	r4, r4, r2
 8001468:	419d      	sbcs	r5, r3
 800146a:	2001      	movs	r0, #1
 800146c:	1924      	adds	r4, r4, r4
 800146e:	416d      	adcs	r5, r5
 8001470:	2100      	movs	r1, #0
 8001472:	3e01      	subs	r6, #1
 8001474:	1824      	adds	r4, r4, r0
 8001476:	414d      	adcs	r5, r1
 8001478:	2e00      	cmp	r6, #0
 800147a:	d006      	beq.n	800148a <__udivmoddi4+0x10a>
 800147c:	42ab      	cmp	r3, r5
 800147e:	d9ee      	bls.n	800145e <__udivmoddi4+0xde>
 8001480:	3e01      	subs	r6, #1
 8001482:	1924      	adds	r4, r4, r4
 8001484:	416d      	adcs	r5, r5
 8001486:	2e00      	cmp	r6, #0
 8001488:	d1f8      	bne.n	800147c <__udivmoddi4+0xfc>
 800148a:	9800      	ldr	r0, [sp, #0]
 800148c:	9901      	ldr	r1, [sp, #4]
 800148e:	465b      	mov	r3, fp
 8001490:	1900      	adds	r0, r0, r4
 8001492:	4169      	adcs	r1, r5
 8001494:	2b00      	cmp	r3, #0
 8001496:	db24      	blt.n	80014e2 <__udivmoddi4+0x162>
 8001498:	002b      	movs	r3, r5
 800149a:	465a      	mov	r2, fp
 800149c:	4644      	mov	r4, r8
 800149e:	40d3      	lsrs	r3, r2
 80014a0:	002a      	movs	r2, r5
 80014a2:	40e2      	lsrs	r2, r4
 80014a4:	001c      	movs	r4, r3
 80014a6:	465b      	mov	r3, fp
 80014a8:	0015      	movs	r5, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db2a      	blt.n	8001504 <__udivmoddi4+0x184>
 80014ae:	0026      	movs	r6, r4
 80014b0:	409e      	lsls	r6, r3
 80014b2:	0033      	movs	r3, r6
 80014b4:	0026      	movs	r6, r4
 80014b6:	4647      	mov	r7, r8
 80014b8:	40be      	lsls	r6, r7
 80014ba:	0032      	movs	r2, r6
 80014bc:	1a80      	subs	r0, r0, r2
 80014be:	4199      	sbcs	r1, r3
 80014c0:	9000      	str	r0, [sp, #0]
 80014c2:	9101      	str	r1, [sp, #4]
 80014c4:	e79e      	b.n	8001404 <__udivmoddi4+0x84>
 80014c6:	42a3      	cmp	r3, r4
 80014c8:	d8bc      	bhi.n	8001444 <__udivmoddi4+0xc4>
 80014ca:	e782      	b.n	80013d2 <__udivmoddi4+0x52>
 80014cc:	4642      	mov	r2, r8
 80014ce:	2320      	movs	r3, #32
 80014d0:	2100      	movs	r1, #0
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	9100      	str	r1, [sp, #0]
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	40da      	lsrs	r2, r3
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	e785      	b.n	80013ee <__udivmoddi4+0x6e>
 80014e2:	4642      	mov	r2, r8
 80014e4:	2320      	movs	r3, #32
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	002a      	movs	r2, r5
 80014ea:	4646      	mov	r6, r8
 80014ec:	409a      	lsls	r2, r3
 80014ee:	0023      	movs	r3, r4
 80014f0:	40f3      	lsrs	r3, r6
 80014f2:	4644      	mov	r4, r8
 80014f4:	4313      	orrs	r3, r2
 80014f6:	002a      	movs	r2, r5
 80014f8:	40e2      	lsrs	r2, r4
 80014fa:	001c      	movs	r4, r3
 80014fc:	465b      	mov	r3, fp
 80014fe:	0015      	movs	r5, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	dad4      	bge.n	80014ae <__udivmoddi4+0x12e>
 8001504:	4642      	mov	r2, r8
 8001506:	002f      	movs	r7, r5
 8001508:	2320      	movs	r3, #32
 800150a:	0026      	movs	r6, r4
 800150c:	4097      	lsls	r7, r2
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	40de      	lsrs	r6, r3
 8001512:	003b      	movs	r3, r7
 8001514:	4333      	orrs	r3, r6
 8001516:	e7cd      	b.n	80014b4 <__udivmoddi4+0x134>

08001518 <__clzdi2>:
 8001518:	b510      	push	{r4, lr}
 800151a:	2900      	cmp	r1, #0
 800151c:	d103      	bne.n	8001526 <__clzdi2+0xe>
 800151e:	f000 f807 	bl	8001530 <__clzsi2>
 8001522:	3020      	adds	r0, #32
 8001524:	e002      	b.n	800152c <__clzdi2+0x14>
 8001526:	0008      	movs	r0, r1
 8001528:	f000 f802 	bl	8001530 <__clzsi2>
 800152c:	bd10      	pop	{r4, pc}
 800152e:	46c0      	nop			; (mov r8, r8)

08001530 <__clzsi2>:
 8001530:	211c      	movs	r1, #28
 8001532:	2301      	movs	r3, #1
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	4298      	cmp	r0, r3
 8001538:	d301      	bcc.n	800153e <__clzsi2+0xe>
 800153a:	0c00      	lsrs	r0, r0, #16
 800153c:	3910      	subs	r1, #16
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	4298      	cmp	r0, r3
 8001542:	d301      	bcc.n	8001548 <__clzsi2+0x18>
 8001544:	0a00      	lsrs	r0, r0, #8
 8001546:	3908      	subs	r1, #8
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	4298      	cmp	r0, r3
 800154c:	d301      	bcc.n	8001552 <__clzsi2+0x22>
 800154e:	0900      	lsrs	r0, r0, #4
 8001550:	3904      	subs	r1, #4
 8001552:	a202      	add	r2, pc, #8	; (adr r2, 800155c <__clzsi2+0x2c>)
 8001554:	5c10      	ldrb	r0, [r2, r0]
 8001556:	1840      	adds	r0, r0, r1
 8001558:	4770      	bx	lr
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	02020304 	.word	0x02020304
 8001560:	01010101 	.word	0x01010101
	...

0800156c <go2app>:
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
	printf("BOOTLOADER Start \r\n");
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <go2app+0x5c>)
 8001574:	0018      	movs	r0, r3
 8001576:	f002 fd67 	bl	8004048 <puts>
	if(((*(uint32_t*) FLASH_APP_ADDR) & 0x2FFE0000) == 0x20000000)
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <go2app+0x60>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <go2app+0x64>)
 8001580:	401a      	ands	r2, r3
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	059b      	lsls	r3, r3, #22
 8001586:	429a      	cmp	r2, r3
 8001588:	d115      	bne.n	80015b6 <go2app+0x4a>
		printf("APP Start ...\r\n");
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <go2app+0x68>)
 800158c:	0018      	movs	r0, r3
 800158e:	f002 fd5b 	bl	8004048 <puts>
		HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	; 0x64
 8001594:	f000 fb16 	bl	8001bc4 <HAL_Delay>
		JumpAddress = *(uint32_t *) (FLASH_APP_ADDR + 4 );
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <go2app+0x6c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pFunction) JumpAddress;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <go2app+0x60>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f383 8808 	msr	MSP, r3
}
 80015ae:	46c0      	nop			; (mov r8, r8)
		Jump_To_Application();
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4798      	blx	r3
}
 80015b4:	e003      	b.n	80015be <go2app+0x52>
		printf("No APP found\r\n");
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <go2app+0x70>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f002 fd45 	bl	8004048 <puts>
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	080047fc 	.word	0x080047fc
 80015cc:	08008000 	.word	0x08008000
 80015d0:	2ffe0000 	.word	0x2ffe0000
 80015d4:	08004810 	.word	0x08004810
 80015d8:	08008004 	.word	0x08008004
 80015dc:	08004820 	.word	0x08004820

080015e0 <_write>:
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_write+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	1c4b      	adds	r3, r1, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <_write+0x3c>)
 80015fa:	2364      	movs	r3, #100	; 0x64
 80015fc:	2201      	movs	r2, #1
 80015fe:	f001 fd45 	bl	800308c <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_write+0x12>
	return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b006      	add	sp, #24
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	20000208 	.word	0x20000208

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f000 fa48 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f810 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f000 f8a4 	bl	8001778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001630:	f000 f854 	bl	80016dc <MX_USART2_UART_Init>

  //disable interrupts in bootloader
  while (1)
  {
    /* USER CODE END WHILE */
		(*Functions[0])(1000);
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <main+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	22fa      	movs	r2, #250	; 0xfa
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	0010      	movs	r0, r2
 800163e:	4798      	blx	r3
		go2app();
 8001640:	f7ff ff94 	bl	800156c <go2app>
		(*Functions[0])(1000);
 8001644:	e7f6      	b.n	8001634 <main+0x14>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	20000180 	.word	0x20000180

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b095      	sub	sp, #84	; 0x54
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	2414      	movs	r4, #20
 8001654:	193b      	adds	r3, r7, r4
 8001656:	0018      	movs	r0, r3
 8001658:	233c      	movs	r3, #60	; 0x3c
 800165a:	001a      	movs	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	f002 fdef 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	0018      	movs	r0, r3
 8001666:	2310      	movs	r3, #16
 8001668:	001a      	movs	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	f002 fde8 	bl	8004240 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fd21 	bl	80020bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800167a:	193b      	adds	r3, r7, r4
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001680:	193b      	adds	r3, r7, r4
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	0052      	lsls	r2, r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001688:	193b      	adds	r3, r7, r4
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168e:	193b      	adds	r3, r7, r4
 8001690:	2240      	movs	r2, #64	; 0x40
 8001692:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001694:	193b      	adds	r3, r7, r4
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169a:	193b      	adds	r3, r7, r4
 800169c:	0018      	movs	r0, r3
 800169e:	f000 fd59 	bl	8002154 <HAL_RCC_OscConfig>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80016a6:	f000 f8b7 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2100      	movs	r1, #0
 80016c6:	0018      	movs	r0, r3
 80016c8:	f001 f8a4 	bl	8002814 <HAL_RCC_ClockConfig>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80016d0:	f000 f8a2 	bl	8001818 <Error_Handler>
  }
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b015      	add	sp, #84	; 0x54
 80016da:	bd90      	pop	{r4, r7, pc}

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <MX_USART2_UART_Init+0x94>)
 80016e2:	4a24      	ldr	r2, [pc, #144]	; (8001774 <MX_USART2_UART_Init+0x98>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <MX_USART2_UART_Init+0x94>)
 80016e8:	22e1      	movs	r2, #225	; 0xe1
 80016ea:	0252      	lsls	r2, r2, #9
 80016ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <MX_USART2_UART_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_USART2_UART_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <MX_USART2_UART_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_USART2_UART_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_USART2_UART_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001726:	0018      	movs	r0, r3
 8001728:	f001 fc5a 	bl	8002fe0 <HAL_UART_Init>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d001      	beq.n	8001734 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001730:	f000 f872 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001736:	2100      	movs	r1, #0
 8001738:	0018      	movs	r0, r3
 800173a:	f002 fa9d 	bl	8003c78 <HAL_UARTEx_SetTxFifoThreshold>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001742:	f000 f869 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_USART2_UART_Init+0x94>)
 8001748:	2100      	movs	r1, #0
 800174a:	0018      	movs	r0, r3
 800174c:	f002 fad4 	bl	8003cf8 <HAL_UARTEx_SetRxFifoThreshold>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001754:	f000 f860 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <MX_USART2_UART_Init+0x94>)
 800175a:	0018      	movs	r0, r3
 800175c:	f002 fa52 	bl	8003c04 <HAL_UARTEx_DisableFifoMode>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001764:	f000 f858 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	20000208 	.word	0x20000208
 8001774:	40004400 	.word	0x40004400

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	240c      	movs	r4, #12
 8001780:	193b      	adds	r3, r7, r4
 8001782:	0018      	movs	r0, r3
 8001784:	2314      	movs	r3, #20
 8001786:	001a      	movs	r2, r3
 8001788:	2100      	movs	r1, #0
 800178a:	f002 fd59 	bl	8004240 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_GPIO_Init+0x9c>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_GPIO_Init+0x9c>)
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_GPIO_Init+0x9c>)
 800179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179e:	2204      	movs	r2, #4
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_GPIO_Init+0x9c>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_GPIO_Init+0x9c>)
 80017ac:	2120      	movs	r1, #32
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_GPIO_Init+0x9c>)
 80017b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b6:	2220      	movs	r2, #32
 80017b8:	4013      	ands	r3, r2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_GPIO_Init+0x9c>)
 80017c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_GPIO_Init+0x9c>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_GPIO_Init+0x9c>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017d6:	23a0      	movs	r3, #160	; 0xa0
 80017d8:	05db      	lsls	r3, r3, #23
 80017da:	2200      	movs	r2, #0
 80017dc:	2120      	movs	r1, #32
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fc34 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017e4:	0021      	movs	r1, r4
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	2220      	movs	r2, #32
 80017ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2201      	movs	r2, #1
 80017f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2202      	movs	r2, #2
 80017fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017fe:	187a      	adds	r2, r7, r1
 8001800:	23a0      	movs	r3, #160	; 0xa0
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fab4 	bl	8001d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b009      	add	sp, #36	; 0x24
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	40021000 	.word	0x40021000

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x44>)
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_MspInit+0x44>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x44>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x44>)
 8001844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_MspInit+0x44>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	0549      	lsls	r1, r1, #21
 800184c:	430a      	orrs	r2, r1
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_MspInit+0x44>)
 8001852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	4013      	ands	r3, r2
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b09d      	sub	sp, #116	; 0x74
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	235c      	movs	r3, #92	; 0x5c
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	0018      	movs	r0, r3
 800187a:	2314      	movs	r3, #20
 800187c:	001a      	movs	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	f002 fcde 	bl	8004240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	2410      	movs	r4, #16
 8001886:	193b      	adds	r3, r7, r4
 8001888:	0018      	movs	r0, r3
 800188a:	234c      	movs	r3, #76	; 0x4c
 800188c:	001a      	movs	r2, r3
 800188e:	2100      	movs	r1, #0
 8001890:	f002 fcd6 	bl	8004240 <memset>
  if(huart->Instance==USART2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_UART_MspInit+0xb8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d13e      	bne.n	800191c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	2202      	movs	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	f001 f95b 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d001      	beq.n	80018ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018b6:	f7ff ffaf 	bl	8001818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_UART_MspInit+0xbc>)
 80018bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_UART_MspInit+0xbc>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0289      	lsls	r1, r1, #10
 80018c4:	430a      	orrs	r2, r1
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_UART_MspInit+0xbc>)
 80018ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_UART_MspInit+0xbc>)
 80018d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_UART_MspInit+0xbc>)
 80018dc:	2101      	movs	r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_UART_MspInit+0xbc>)
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e6:	2201      	movs	r2, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80018ee:	215c      	movs	r1, #92	; 0x5c
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2202      	movs	r2, #2
 80018fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2201      	movs	r2, #1
 800190c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	187a      	adds	r2, r7, r1
 8001910:	23a0      	movs	r3, #160	; 0xa0
 8001912:	05db      	lsls	r3, r3, #23
 8001914:	0011      	movs	r1, r2
 8001916:	0018      	movs	r0, r3
 8001918:	f000 fa2c 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b01d      	add	sp, #116	; 0x74
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	40004400 	.word	0x40004400
 8001928:	40021000 	.word	0x40021000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f91c 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e00a      	b.n	8001982 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800196c:	e000      	b.n	8001970 <_read+0x16>
 800196e:	bf00      	nop
 8001970:	0001      	movs	r1, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	b2ca      	uxtb	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	dbf0      	blt.n	800196c <_read+0x12>
  }

  return len;
 800198a:	687b      	ldr	r3, [r7, #4]
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b006      	add	sp, #24
 8001992:	bd80      	pop	{r7, pc}

08001994 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199c:	2301      	movs	r3, #1
 800199e:	425b      	negs	r3, r3
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	0192      	lsls	r2, r2, #6
 80019b8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_isatty>:

int _isatty(int file)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f002 fc66 	bl	80042ec <__errno>
 8001a20:	0003      	movs	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	425b      	negs	r3, r3
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	18d2      	adds	r2, r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b006      	add	sp, #24
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20024000 	.word	0x20024000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	2000029c 	.word	0x2000029c
 8001a54:	200003f0 	.word	0x200003f0

08001a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a68:	f7ff fff6 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <LoopForever+0xe>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	; (8001ab0 <LoopForever+0x16>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a92:	f002 fc31 	bl	80042f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a96:	f7ff fdc3 	bl	8001620 <main>

08001a9a <LoopForever>:

LoopForever:
  b LoopForever
 8001a9a:	e7fe      	b.n	8001a9a <LoopForever>
  ldr   r0, =_estack
 8001a9c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001aa0:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8001aa4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001aa8:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8001aac:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ab0:	200003f0 	.word	0x200003f0

08001ab4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_COMP_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_Init+0x3c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Init+0x3c>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	0049      	lsls	r1, r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f810 	bl	8001af8 <HAL_InitTick>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e001      	b.n	8001ae8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ae4:	f7ff fe9e 	bl	8001824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	781b      	ldrb	r3, [r3, #0]
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	230f      	movs	r3, #15
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_InitTick+0x88>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d02b      	beq.n	8001b68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_InitTick+0x8c>)
 8001b12:	681c      	ldr	r4, [r3, #0]
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_InitTick+0x88>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	0019      	movs	r1, r3
 8001b1a:	23fa      	movs	r3, #250	; 0xfa
 8001b1c:	0098      	lsls	r0, r3, #2
 8001b1e:	f7ff fa99 	bl	8001054 <__udivsi3>
 8001b22:	0003      	movs	r3, r0
 8001b24:	0019      	movs	r1, r3
 8001b26:	0020      	movs	r0, r4
 8001b28:	f7ff fa94 	bl	8001054 <__udivsi3>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f913 	bl	8001d5a <HAL_SYSTICK_Config>
 8001b34:	1e03      	subs	r3, r0, #0
 8001b36:	d112      	bne.n	8001b5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d80a      	bhi.n	8001b54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	2301      	movs	r3, #1
 8001b42:	425b      	negs	r3, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f8f2 	bl	8001d30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_InitTick+0x90>)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e00d      	b.n	8001b70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e008      	b.n	8001b70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e003      	b.n	8001b70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b005      	add	sp, #20
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	2000018c 	.word	0x2000018c
 8001b84:	20000184 	.word	0x20000184
 8001b88:	20000188 	.word	0x20000188

08001b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_IncTick+0x1c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	001a      	movs	r2, r3
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x20>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	18d2      	adds	r2, r2, r3
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_IncTick+0x20>)
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	2000018c 	.word	0x2000018c
 8001bac:	200002a0 	.word	0x200002a0

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  //return _tx_time_get();
  return uwTick;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <HAL_GetTick+0x10>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	200002a0 	.word	0x200002a0

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	001a      	movs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	189b      	adds	r3, r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	f7ff ffe0 	bl	8001bb0 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	2000018c 	.word	0x2000018c

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	0002      	movs	r2, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c20:	d828      	bhi.n	8001c74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c22:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <__NVIC_SetPriority+0xd4>)
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	33c0      	adds	r3, #192	; 0xc0
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	589b      	ldr	r3, [r3, r2]
 8001c32:	1dfa      	adds	r2, r7, #7
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	0011      	movs	r1, r2
 8001c38:	2203      	movs	r2, #3
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	00d2      	lsls	r2, r2, #3
 8001c3e:	21ff      	movs	r1, #255	; 0xff
 8001c40:	4091      	lsls	r1, r2
 8001c42:	000a      	movs	r2, r1
 8001c44:	43d2      	mvns	r2, r2
 8001c46:	401a      	ands	r2, r3
 8001c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	22ff      	movs	r2, #255	; 0xff
 8001c50:	401a      	ands	r2, r3
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	0018      	movs	r0, r3
 8001c58:	2303      	movs	r3, #3
 8001c5a:	4003      	ands	r3, r0
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c60:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <__NVIC_SetPriority+0xd4>)
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	33c0      	adds	r3, #192	; 0xc0
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c72:	e031      	b.n	8001cd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <__NVIC_SetPriority+0xd8>)
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	400b      	ands	r3, r1
 8001c80:	3b08      	subs	r3, #8
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3306      	adds	r3, #6
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1dfa      	adds	r2, r7, #7
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	0011      	movs	r1, r2
 8001c94:	2203      	movs	r2, #3
 8001c96:	400a      	ands	r2, r1
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	21ff      	movs	r1, #255	; 0xff
 8001c9c:	4091      	lsls	r1, r2
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	43d2      	mvns	r2, r2
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	401a      	ands	r2, r3
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	4003      	ands	r3, r0
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <__NVIC_SetPriority+0xd8>)
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	001c      	movs	r4, r3
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	4023      	ands	r3, r4
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	3306      	adds	r3, #6
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	18c3      	adds	r3, r0, r3
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b003      	add	sp, #12
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	045b      	lsls	r3, r3, #17
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d301      	bcc.n	8001d00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e010      	b.n	8001d22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <SysTick_Config+0x44>)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	3a01      	subs	r2, #1
 8001d06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d08:	2301      	movs	r3, #1
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7ff ff7c 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x44>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x44>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	1c02      	adds	r2, r0, #0
 8001d40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ffbf 	bl	8001ce8 <SysTick_Config>
 8001d6a:	0003      	movs	r3, r0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	e14d      	b.n	8002020 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4091      	lsls	r1, r2
 8001d8e:	000a      	movs	r2, r1
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <HAL_GPIO_Init+0x28>
 8001d9a:	e13e      	b.n	800201a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d005      	beq.n	8001db4 <HAL_GPIO_Init+0x40>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d130      	bne.n	8001e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dea:	2201      	movs	r2, #1
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	2201      	movs	r2, #1
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d017      	beq.n	8001e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	43da      	mvns	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d123      	bne.n	8001ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	58d3      	ldr	r3, [r2, r3]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2207      	movs	r2, #7
 8001e70:	4013      	ands	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2107      	movs	r1, #7
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_GPIO_Init+0x174>
 8001ee6:	e098      	b.n	800201a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ee8:	4a53      	ldr	r2, [pc, #332]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3318      	adds	r3, #24
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	589b      	ldr	r3, [r3, r2]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4013      	ands	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	220f      	movs	r2, #15
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	23a0      	movs	r3, #160	; 0xa0
 8001f10:	05db      	lsls	r3, r3, #23
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x1d6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a48      	ldr	r2, [pc, #288]	; (800203c <HAL_GPIO_Init+0x2c8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x1d2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a47      	ldr	r2, [pc, #284]	; (8002040 <HAL_GPIO_Init+0x2cc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x1ce>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x1ca>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_GPIO_Init+0x2d4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x1c6>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e008      	b.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	2103      	movs	r1, #3
 8001f50:	400a      	ands	r2, r1
 8001f52:	00d2      	lsls	r2, r2, #3
 8001f54:	4093      	lsls	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f5c:	4936      	ldr	r1, [pc, #216]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3318      	adds	r3, #24
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	035b      	lsls	r3, r3, #13
 8001f82:	4013      	ands	r3, r2
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	039b      	lsls	r3, r3, #14
 8001fac:	4013      	ands	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001fc0:	2384      	movs	r3, #132	; 0x84
 8001fc2:	58d3      	ldr	r3, [r2, r3]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe4:	4914      	ldr	r1, [pc, #80]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001fe6:	2284      	movs	r2, #132	; 0x84
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	58d3      	ldr	r3, [r2, r3]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	025b      	lsls	r3, r3, #9
 8002006:	4013      	ands	r3, r2
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002012:	4909      	ldr	r1, [pc, #36]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	40da      	lsrs	r2, r3
 8002028:	1e13      	subs	r3, r2, #0
 800202a:	d000      	beq.n	800202e <HAL_GPIO_Init+0x2ba>
 800202c:	e6aa      	b.n	8001d84 <HAL_GPIO_Init+0x10>
  }
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b006      	add	sp, #24
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021800 	.word	0x40021800
 800203c:	50000400 	.word	0x50000400
 8002040:	50000800 	.word	0x50000800
 8002044:	50000c00 	.word	0x50000c00
 8002048:	50001000 	.word	0x50001000

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	0008      	movs	r0, r1
 8002056:	0011      	movs	r1, r2
 8002058:	1cbb      	adds	r3, r7, #2
 800205a:	1c02      	adds	r2, r0, #0
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	1c7b      	adds	r3, r7, #1
 8002060:	1c0a      	adds	r2, r1, #0
 8002062:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002064:	1c7b      	adds	r3, r7, #1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206c:	1cbb      	adds	r3, r7, #2
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002074:	e003      	b.n	800207e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002076:	1cbb      	adds	r3, r7, #2
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	000a      	movs	r2, r1
 8002090:	1cbb      	adds	r3, r7, #2
 8002092:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800209a:	1cbb      	adds	r3, r7, #2
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	041a      	lsls	r2, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	1cb9      	adds	r1, r7, #2
 80020aa:	8809      	ldrh	r1, [r1, #0]
 80020ac:	400b      	ands	r3, r1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b004      	add	sp, #16
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d11f      	bne.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	0013      	movs	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	189b      	adds	r3, r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4912      	ldr	r1, [pc, #72]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7fe ffb0 	bl	8001054 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fa:	e008      	b.n	800210e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3b01      	subs	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e001      	b.n	800210e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e009      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	401a      	ands	r2, r3
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	429a      	cmp	r2, r3
 800211e:	d0ed      	beq.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40007000 	.word	0x40007000
 8002130:	fffff9ff 	.word	0xfffff9ff
 8002134:	20000184 	.word	0x20000184
 8002138:	000f4240 	.word	0x000f4240

0800213c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	23e0      	movs	r3, #224	; 0xe0
 8002146:	01db      	lsls	r3, r3, #7
 8002148:	4013      	ands	r3, r2
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f000 fb50 	bl	8002808 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d100      	bne.n	8002174 <HAL_RCC_OscConfig+0x20>
 8002172:	e07c      	b.n	800226e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002174:	4bc3      	ldr	r3, [pc, #780]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2238      	movs	r2, #56	; 0x38
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217e:	4bc1      	ldr	r3, [pc, #772]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2203      	movs	r2, #3
 8002184:	4013      	ands	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b10      	cmp	r3, #16
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x40>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d002      	beq.n	800219a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d10b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	4bba      	ldr	r3, [pc, #744]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	029b      	lsls	r3, r3, #10
 80021a2:	4013      	ands	r3, r2
 80021a4:	d062      	beq.n	800226c <HAL_RCC_OscConfig+0x118>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d15e      	bne.n	800226c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e32a      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	025b      	lsls	r3, r3, #9
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_OscConfig+0x7a>
 80021be:	4bb1      	ldr	r3, [pc, #708]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4bb0      	ldr	r3, [pc, #704]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0249      	lsls	r1, r1, #9
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e020      	b.n	8002210 <HAL_RCC_OscConfig+0xbc>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	23a0      	movs	r3, #160	; 0xa0
 80021d4:	02db      	lsls	r3, r3, #11
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d10e      	bne.n	80021f8 <HAL_RCC_OscConfig+0xa4>
 80021da:	4baa      	ldr	r3, [pc, #680]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4ba9      	ldr	r3, [pc, #676]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	02c9      	lsls	r1, r1, #11
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	4ba6      	ldr	r3, [pc, #664]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4ba5      	ldr	r3, [pc, #660]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	0249      	lsls	r1, r1, #9
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xbc>
 80021f8:	4ba2      	ldr	r3, [pc, #648]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4ba1      	ldr	r3, [pc, #644]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80021fe:	49a2      	ldr	r1, [pc, #648]	; (8002488 <HAL_RCC_OscConfig+0x334>)
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	4b9f      	ldr	r3, [pc, #636]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b9e      	ldr	r3, [pc, #632]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800220a:	49a0      	ldr	r1, [pc, #640]	; (800248c <HAL_RCC_OscConfig+0x338>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d014      	beq.n	8002242 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fcca 	bl	8001bb0 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002222:	f7ff fcc5 	bl	8001bb0 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e2e9      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002234:	4b93      	ldr	r3, [pc, #588]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0xce>
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff fcb5 	bl	8001bb0 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fcb0 	bl	8001bb0 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2d4      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225e:	4b89      	ldr	r3, [pc, #548]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0xf8>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d100      	bne.n	800227a <HAL_RCC_OscConfig+0x126>
 8002278:	e099      	b.n	80023ae <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2238      	movs	r2, #56	; 0x38
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b10      	cmp	r3, #16
 8002292:	d102      	bne.n	800229a <HAL_RCC_OscConfig+0x146>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d135      	bne.n	800230c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a0:	4b78      	ldr	r3, [pc, #480]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4013      	ands	r3, r2
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x164>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2a7      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b72      	ldr	r3, [pc, #456]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a74      	ldr	r2, [pc, #464]	; (8002490 <HAL_RCC_OscConfig+0x33c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	021a      	lsls	r2, r3, #8
 80022c8:	4b6e      	ldr	r3, [pc, #440]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d112      	bne.n	80022fa <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022d4:	4b6b      	ldr	r3, [pc, #428]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x340>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	4b68      	ldr	r3, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0adb      	lsrs	r3, r3, #11
 80022ee:	2207      	movs	r2, #7
 80022f0:	4013      	ands	r3, r2
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x344>)
 80022f4:	40da      	lsrs	r2, r3
 80022f6:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x348>)
 80022f8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022fa:	4b69      	ldr	r3, [pc, #420]	; (80024a0 <HAL_RCC_OscConfig+0x34c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff fbfa 	bl	8001af8 <HAL_InitTick>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d051      	beq.n	80023ac <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e27d      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d030      	beq.n	8002376 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5e      	ldr	r2, [pc, #376]	; (8002494 <HAL_RCC_OscConfig+0x340>)
 800231a:	4013      	ands	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	4b58      	ldr	r3, [pc, #352]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b55      	ldr	r3, [pc, #340]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0049      	lsls	r1, r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff fc3b 	bl	8001bb0 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff fc36 	bl	8001bb0 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e25a      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4013      	ands	r3, r2
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	4b49      	ldr	r3, [pc, #292]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a4b      	ldr	r2, [pc, #300]	; (8002490 <HAL_RCC_OscConfig+0x33c>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	021a      	lsls	r2, r3, #8
 800236e:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	e01b      	b.n	80023ae <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800237c:	4949      	ldr	r1, [pc, #292]	; (80024a4 <HAL_RCC_OscConfig+0x350>)
 800237e:	400a      	ands	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff fc15 	bl	8001bb0 <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fc10 	bl	8001bb0 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e234      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x238>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2208      	movs	r2, #8
 80023b4:	4013      	ands	r3, r2
 80023b6:	d047      	beq.n	8002448 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2238      	movs	r2, #56	; 0x38
 80023be:	4013      	ands	r3, r2
 80023c0:	2b18      	cmp	r3, #24
 80023c2:	d10a      	bne.n	80023da <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d03c      	beq.n	8002448 <HAL_RCC_OscConfig+0x2f4>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d138      	bne.n	8002448 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e216      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d019      	beq.n	8002416 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80023e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 80023e8:	2101      	movs	r1, #1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7ff fbdf 	bl	8001bb0 <HAL_GetTick>
 80023f2:	0003      	movs	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7ff fbda 	bl	8001bb0 <HAL_GetTick>
 80023fc:	0002      	movs	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1fe      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d0f1      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2a4>
 8002414:	e018      	b.n	8002448 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002418:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800241c:	2101      	movs	r1, #1
 800241e:	438a      	bics	r2, r1
 8002420:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff fbc5 	bl	8001bb0 <HAL_GetTick>
 8002426:	0003      	movs	r3, r0
 8002428:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff fbc0 	bl	8001bb0 <HAL_GetTick>
 8002430:	0002      	movs	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1e4      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d1f1      	bne.n	800242c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2204      	movs	r2, #4
 800244e:	4013      	ands	r3, r2
 8002450:	d100      	bne.n	8002454 <HAL_RCC_OscConfig+0x300>
 8002452:	e0c7      	b.n	80025e4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002454:	231f      	movs	r3, #31
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2238      	movs	r2, #56	; 0x38
 8002462:	4013      	ands	r3, r2
 8002464:	2b20      	cmp	r3, #32
 8002466:	d11f      	bne.n	80024a8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x330>)
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d100      	bne.n	8002474 <HAL_RCC_OscConfig+0x320>
 8002472:	e0b7      	b.n	80025e4 <HAL_RCC_OscConfig+0x490>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d000      	beq.n	800247e <HAL_RCC_OscConfig+0x32a>
 800247c:	e0b2      	b.n	80025e4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e1c2      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40021000 	.word	0x40021000
 8002488:	fffeffff 	.word	0xfffeffff
 800248c:	fffbffff 	.word	0xfffbffff
 8002490:	ffff80ff 	.word	0xffff80ff
 8002494:	ffffc7ff 	.word	0xffffc7ff
 8002498:	00f42400 	.word	0x00f42400
 800249c:	20000184 	.word	0x20000184
 80024a0:	20000188 	.word	0x20000188
 80024a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024a8:	4bb5      	ldr	r3, [pc, #724]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80024aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	055b      	lsls	r3, r3, #21
 80024b0:	4013      	ands	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x364>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x366>
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d011      	beq.n	80024e2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4bb0      	ldr	r3, [pc, #704]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80024c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c2:	4baf      	ldr	r3, [pc, #700]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0549      	lsls	r1, r1, #21
 80024c8:	430a      	orrs	r2, r1
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80024cc:	4bac      	ldr	r3, [pc, #688]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80024ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	055b      	lsls	r3, r3, #21
 80024d4:	4013      	ands	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	4ba8      	ldr	r3, [pc, #672]	; (8002784 <HAL_RCC_OscConfig+0x630>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	d11a      	bne.n	8002524 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ee:	4ba5      	ldr	r3, [pc, #660]	; (8002784 <HAL_RCC_OscConfig+0x630>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4ba4      	ldr	r3, [pc, #656]	; (8002784 <HAL_RCC_OscConfig+0x630>)
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0049      	lsls	r1, r1, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fb58 	bl	8001bb0 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff fb53 	bl	8001bb0 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e177      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002518:	4b9a      	ldr	r3, [pc, #616]	; (8002784 <HAL_RCC_OscConfig+0x630>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4013      	ands	r3, r2
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x3e6>
 800252c:	4b94      	ldr	r3, [pc, #592]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800252e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002532:	2101      	movs	r1, #1
 8002534:	430a      	orrs	r2, r1
 8002536:	65da      	str	r2, [r3, #92]	; 0x5c
 8002538:	e01c      	b.n	8002574 <HAL_RCC_OscConfig+0x420>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x408>
 8002542:	4b8f      	ldr	r3, [pc, #572]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002548:	2104      	movs	r1, #4
 800254a:	430a      	orrs	r2, r1
 800254c:	65da      	str	r2, [r3, #92]	; 0x5c
 800254e:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002550:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002554:	2101      	movs	r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	65da      	str	r2, [r3, #92]	; 0x5c
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0x420>
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800255e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002560:	4b87      	ldr	r3, [pc, #540]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002562:	2101      	movs	r1, #1
 8002564:	438a      	bics	r2, r1
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c
 8002568:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800256a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800256c:	4b84      	ldr	r3, [pc, #528]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800256e:	2104      	movs	r1, #4
 8002570:	438a      	bics	r2, r1
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d014      	beq.n	80025a6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7ff fb18 	bl	8001bb0 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002584:	e009      	b.n	800259a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff fb13 	bl	8001bb0 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	4a7d      	ldr	r2, [pc, #500]	; (8002788 <HAL_RCC_OscConfig+0x634>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e136      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259a:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x432>
 80025a4:	e013      	b.n	80025ce <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff fb03 	bl	8001bb0 <HAL_GetTick>
 80025aa:	0003      	movs	r3, r0
 80025ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ae:	e009      	b.n	80025c4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7ff fafe 	bl	8001bb0 <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	4a73      	ldr	r2, [pc, #460]	; (8002788 <HAL_RCC_OscConfig+0x634>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e121      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025ce:	231f      	movs	r3, #31
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b69      	ldr	r3, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80025da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80025de:	496b      	ldr	r1, [pc, #428]	; (800278c <HAL_RCC_OscConfig+0x638>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2220      	movs	r2, #32
 80025ea:	4013      	ands	r3, r2
 80025ec:	d039      	beq.n	8002662 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01b      	beq.n	800262e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f6:	4b62      	ldr	r3, [pc, #392]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	03c9      	lsls	r1, r1, #15
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7ff fad4 	bl	8001bb0 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260e:	f7ff facf 	bl	8001bb0 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0f3      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	4013      	ands	r3, r2
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x4ba>
 800262c:	e019      	b.n	8002662 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002634:	4956      	ldr	r1, [pc, #344]	; (8002790 <HAL_RCC_OscConfig+0x63c>)
 8002636:	400a      	ands	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7ff fab9 	bl	8001bb0 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002644:	f7ff fab4 	bl	8001bb0 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0d8      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	4013      	ands	r3, r2
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d100      	bne.n	800266c <HAL_RCC_OscConfig+0x518>
 800266a:	e0cc      	b.n	8002806 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266c:	4b44      	ldr	r3, [pc, #272]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2238      	movs	r2, #56	; 0x38
 8002672:	4013      	ands	r3, r2
 8002674:	2b10      	cmp	r3, #16
 8002676:	d100      	bne.n	800267a <HAL_RCC_OscConfig+0x526>
 8002678:	e07b      	b.n	8002772 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d156      	bne.n	8002730 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002688:	4942      	ldr	r1, [pc, #264]	; (8002794 <HAL_RCC_OscConfig+0x640>)
 800268a:	400a      	ands	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff fa8f 	bl	8001bb0 <HAL_GetTick>
 8002692:	0003      	movs	r3, r0
 8002694:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fa8a 	bl	8001bb0 <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0ae      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	049b      	lsls	r3, r3, #18
 80026b2:	4013      	ands	r3, r2
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b6:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a37      	ldr	r2, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x644>)
 80026bc:	4013      	ands	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	431a      	orrs	r2, r3
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0449      	lsls	r1, r1, #17
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	0549      	lsls	r1, r1, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff fa53 	bl	8001bb0 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff fa4e 	bl	8001bb0 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e072      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	049b      	lsls	r3, r3, #18
 800272a:	4013      	ands	r3, r2
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x5bc>
 800272e:	e06a      	b.n	8002806 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002736:	4917      	ldr	r1, [pc, #92]	; (8002794 <HAL_RCC_OscConfig+0x640>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff fa38 	bl	8001bb0 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7ff fa33 	bl	8001bb0 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e057      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	049b      	lsls	r3, r3, #18
 8002760:	4013      	ands	r3, r2
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_OscConfig+0x62c>)
 800276a:	490c      	ldr	r1, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x648>)
 800276c:	400a      	ands	r2, r1
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e049      	b.n	8002806 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d112      	bne.n	80027a0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e044      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	00001388 	.word	0x00001388
 800278c:	efffffff 	.word	0xefffffff
 8002790:	ffbfffff 	.word	0xffbfffff
 8002794:	feffffff 	.word	0xfeffffff
 8002798:	11c1808c 	.word	0x11c1808c
 800279c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x6bc>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2203      	movs	r2, #3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d126      	bne.n	8002802 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2270      	movs	r2, #112	; 0x70
 80027b8:	401a      	ands	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d11f      	bne.n	8002802 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	23fe      	movs	r3, #254	; 0xfe
 80027c6:	01db      	lsls	r3, r3, #7
 80027c8:	401a      	ands	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d116      	bne.n	8002802 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	23f8      	movs	r3, #248	; 0xf8
 80027d8:	039b      	lsls	r3, r3, #14
 80027da:	401a      	ands	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d10e      	bne.n	8002802 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	23e0      	movs	r3, #224	; 0xe0
 80027e8:	051b      	lsls	r3, r3, #20
 80027ea:	401a      	ands	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	0f5b      	lsrs	r3, r3, #29
 80027f8:	075a      	lsls	r2, r3, #29
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b008      	add	sp, #32
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0e9      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2207      	movs	r2, #7
 800282e:	4013      	ands	r3, r2
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d91e      	bls.n	8002874 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2207      	movs	r2, #7
 800283c:	4393      	bics	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002848:	f7ff f9b2 	bl	8001bb0 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002850:	e009      	b.n	8002866 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002852:	f7ff f9ad 	bl	8001bb0 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	4a6a      	ldr	r2, [pc, #424]	; (8002a08 <HAL_RCC_ClockConfig+0x1f4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0ca      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2207      	movs	r2, #7
 800286c:	4013      	ands	r3, r2
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d1ee      	bne.n	8002852 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2202      	movs	r2, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d015      	beq.n	80028aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2204      	movs	r2, #4
 8002884:	4013      	ands	r3, r2
 8002886:	d006      	beq.n	8002896 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002888:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 800288e:	21e0      	movs	r1, #224	; 0xe0
 8002890:	01c9      	lsls	r1, r1, #7
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <HAL_RCC_ClockConfig+0x1fc>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d057      	beq.n	8002964 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	4013      	ands	r3, r2
 80028c6:	d12b      	bne.n	8002920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e097      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	049b      	lsls	r3, r3, #18
 80028dc:	4013      	ands	r3, r2
 80028de:	d11f      	bne.n	8002920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e08b      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ec:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	d113      	bne.n	8002920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e07f      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d106      	bne.n	8002912 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d108      	bne.n	8002920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e074      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e06d      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2207      	movs	r2, #7
 8002926:	4393      	bics	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7ff f93c 	bl	8001bb0 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293c:	e009      	b.n	8002952 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293e:	f7ff f937 	bl	8001bb0 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <HAL_RCC_ClockConfig+0x1f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e054      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2238      	movs	r2, #56	; 0x38
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	429a      	cmp	r2, r3
 8002962:	d1ec      	bne.n	800293e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2207      	movs	r2, #7
 800296a:	4013      	ands	r3, r2
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d21e      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2207      	movs	r2, #7
 8002978:	4393      	bics	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002984:	f7ff f914 	bl	8001bb0 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800298c:	e009      	b.n	80029a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298e:	f7ff f90f 	bl	8001bb0 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_RCC_ClockConfig+0x1f4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e02c      	b.n	80029fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1ee      	bne.n	800298e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2204      	movs	r2, #4
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_RCC_ClockConfig+0x200>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029ce:	f000 f829 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029d2:	0001      	movs	r1, r0
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	220f      	movs	r2, #15
 80029dc:	401a      	ands	r2, r3
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x204>)
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	58d3      	ldr	r3, [r2, r3]
 80029e4:	221f      	movs	r2, #31
 80029e6:	4013      	ands	r3, r2
 80029e8:	000a      	movs	r2, r1
 80029ea:	40da      	lsrs	r2, r3
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_ClockConfig+0x208>)
 80029ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x20c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff f87f 	bl	8001af8 <HAL_InitTick>
 80029fa:	0003      	movs	r3, r0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b004      	add	sp, #16
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40022000 	.word	0x40022000
 8002a08:	00001388 	.word	0x00001388
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	fffff0ff 	.word	0xfffff0ff
 8002a14:	ffff8fff 	.word	0xffff8fff
 8002a18:	08004830 	.word	0x08004830
 8002a1c:	20000184 	.word	0x20000184
 8002a20:	20000188 	.word	0x20000188

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2238      	movs	r2, #56	; 0x38
 8002a30:	4013      	ands	r3, r2
 8002a32:	d10f      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a34:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0adb      	lsrs	r3, r3, #11
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	4835      	ldr	r0, [pc, #212]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a4a:	f7fe fb03 	bl	8001054 <__udivsi3>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e05d      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a54:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2238      	movs	r2, #56	; 0x38
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e054      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2238      	movs	r2, #56	; 0x38
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d138      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2203      	movs	r2, #3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	2207      	movs	r2, #7
 8002a84:	4013      	ands	r3, r2
 8002a86:	3301      	adds	r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	4824      	ldr	r0, [pc, #144]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a94:	f7fe fade 	bl	8001054 <__udivsi3>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	227f      	movs	r2, #127	; 0x7f
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	434b      	muls	r3, r1
 8002aa8:	617b      	str	r3, [r7, #20]
        break;
 8002aaa:	e00d      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	481c      	ldr	r0, [pc, #112]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ab0:	f7fe fad0 	bl	8001054 <__udivsi3>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	227f      	movs	r2, #127	; 0x7f
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	434b      	muls	r3, r1
 8002ac4:	617b      	str	r3, [r7, #20]
        break;
 8002ac6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0f5b      	lsrs	r3, r3, #29
 8002ace:	2207      	movs	r2, #7
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f7fe fabb 	bl	8001054 <__udivsi3>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e015      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2238      	movs	r2, #56	; 0x38
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d103      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2238      	movs	r2, #56	; 0x38
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b18      	cmp	r3, #24
 8002b02:	d103      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b04:	23fa      	movs	r3, #250	; 0xfa
 8002b06:	01db      	lsls	r3, r3, #7
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	e001      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b10:	693b      	ldr	r3, [r7, #16]
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b006      	add	sp, #24
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	007a1200 	.word	0x007a1200

08002b28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000184 	.word	0x20000184

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b5b0      	push	{r4, r5, r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b40:	f7ff fff2 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b44:	0004      	movs	r4, r0
 8002b46:	f7ff faf9 	bl	800213c <LL_RCC_GetAPB1Prescaler>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	0b1a      	lsrs	r2, r3, #12
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b50:	0092      	lsls	r2, r2, #2
 8002b52:	58d3      	ldr	r3, [r2, r3]
 8002b54:	221f      	movs	r2, #31
 8002b56:	4013      	ands	r3, r2
 8002b58:	40dc      	lsrs	r4, r3
 8002b5a:	0023      	movs	r3, r4
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bdb0      	pop	{r4, r5, r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	08004870 	.word	0x08004870

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b70:	2313      	movs	r3, #19
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b78:	2312      	movs	r3, #18
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b8c:	e0ad      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2011      	movs	r0, #17
 8002b90:	183b      	adds	r3, r7, r0
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d110      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	0549      	lsls	r1, r1, #21
 8002bac:	430a      	orrs	r2, r1
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb0:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	055b      	lsls	r3, r3, #21
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0049      	lsls	r1, r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe ffed 	bl	8001bb0 <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe ffe8 	bl	8001bb0 <HAL_GetTick>
 8002be0:	0002      	movs	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d904      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bea:	2313      	movs	r3, #19
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2203      	movs	r2, #3
 8002bf0:	701a      	strb	r2, [r3, #0]
        break;
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf4:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d0ed      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c00:	2313      	movs	r3, #19
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d15e      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c0a:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c0e:	23c0      	movs	r3, #192	; 0xc0
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c34:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	0249      	lsls	r1, r1, #9
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c42:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c44:	491e      	ldr	r1, [pc, #120]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d016      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe ffaa 	bl	8001bb0 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c60:	e00c      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe ffa5 	bl	8001bb0 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d904      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c72:	2313      	movs	r3, #19
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
            break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0ed      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c86:	2313      	movs	r3, #19
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca4:	e016      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ca6:	2312      	movs	r3, #18
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2213      	movs	r2, #19
 8002cac:	18ba      	adds	r2, r7, r2
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	fffffcff 	.word	0xfffffcff
 8002cc0:	fffeffff 	.word	0xfffeffff
 8002cc4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2213      	movs	r2, #19
 8002cce:	18ba      	adds	r2, r7, r2
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cd4:	2311      	movs	r3, #17
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4bb6      	ldr	r3, [pc, #728]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce2:	4bb5      	ldr	r3, [pc, #724]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ce4:	49b5      	ldr	r1, [pc, #724]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf4:	4bb0      	ldr	r3, [pc, #704]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4bad      	ldr	r3, [pc, #692]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d12:	4ba9      	ldr	r3, [pc, #676]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	220c      	movs	r2, #12
 8002d18:	4393      	bics	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4ba5      	ldr	r3, [pc, #660]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d30:	4ba1      	ldr	r3, [pc, #644]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	2230      	movs	r2, #48	; 0x30
 8002d36:	4393      	bics	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4b9e      	ldr	r3, [pc, #632]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d40:	430a      	orrs	r2, r1
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d4e:	4b9a      	ldr	r3, [pc, #616]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	4a9b      	ldr	r2, [pc, #620]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	4b96      	ldr	r3, [pc, #600]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002d6e:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4a94      	ldr	r2, [pc, #592]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	4b8e      	ldr	r3, [pc, #568]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8e:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	4a8d      	ldr	r2, [pc, #564]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9c:	4b86      	ldr	r3, [pc, #536]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4013      	ands	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dae:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	4a86      	ldr	r2, [pc, #536]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dcc:	4b7a      	ldr	r3, [pc, #488]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	4a7f      	ldr	r2, [pc, #508]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	4b77      	ldr	r3, [pc, #476]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	4a79      	ldr	r2, [pc, #484]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	01db      	lsls	r3, r3, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	d015      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e0a:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	0899      	lsrs	r1, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d106      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e28:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0249      	lsls	r1, r1, #9
 8002e32:	430a      	orrs	r2, r1
 8002e34:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	031b      	lsls	r3, r3, #12
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e42:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	4393      	bics	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	039b      	lsls	r3, r3, #14
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d016      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e62:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	4a5c      	ldr	r2, [pc, #368]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e72:	430a      	orrs	r2, r1
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	03db      	lsls	r3, r3, #15
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d106      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e82:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	0449      	lsls	r1, r1, #17
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	03db      	lsls	r3, r3, #15
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d016      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	4a4e      	ldr	r2, [pc, #312]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	045b      	lsls	r3, r3, #17
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d106      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0449      	lsls	r1, r1, #17
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d014      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ed6:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	2203      	movs	r2, #3
 8002edc:	4393      	bics	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ef2:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0249      	lsls	r1, r1, #9
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	019b      	lsls	r3, r3, #6
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d014      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	220c      	movs	r2, #12
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1a:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d106      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0249      	lsls	r1, r1, #9
 8002f32:	430a      	orrs	r2, r1
 8002f34:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	045b      	lsls	r3, r3, #17
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d016      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0449      	lsls	r1, r1, #17
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	049b      	lsls	r3, r3, #18
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d016      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0449      	lsls	r1, r1, #17
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002faa:	2312      	movs	r3, #18
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b006      	add	sp, #24
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	efffffff 	.word	0xefffffff
 8002fc0:	fffff3ff 	.word	0xfffff3ff
 8002fc4:	fffffcff 	.word	0xfffffcff
 8002fc8:	fff3ffff 	.word	0xfff3ffff
 8002fcc:	ffcfffff 	.word	0xffcfffff
 8002fd0:	ffffcfff 	.word	0xffffcfff
 8002fd4:	ffff3fff 	.word	0xffff3fff
 8002fd8:	ffbfffff 	.word	0xffbfffff
 8002fdc:	feffffff 	.word	0xfeffffff

08002fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e046      	b.n	8003080 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2288      	movs	r2, #136	; 0x88
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2284      	movs	r2, #132	; 0x84
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f7fe fc30 	bl	800186c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2288      	movs	r2, #136	; 0x88
 8003010:	2124      	movs	r1, #36	; 0x24
 8003012:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	438a      	bics	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f8cc 	bl	80031c4 <UART_SetConfig>
 800302c:	0003      	movs	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e024      	b.n	8003080 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0018      	movs	r0, r3
 8003042:	f000 fc15 	bl	8003870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	490d      	ldr	r1, [pc, #52]	; (8003088 <HAL_UART_Init+0xa8>)
 8003052:	400a      	ands	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	212a      	movs	r1, #42	; 0x2a
 8003062:	438a      	bics	r2, r1
 8003064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fcad 	bl	80039d8 <UART_CheckIdleState>
 800307e:	0003      	movs	r3, r0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	ffffb7ff 	.word	0xffffb7ff

0800308c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2288      	movs	r2, #136	; 0x88
 80030a0:	589b      	ldr	r3, [r3, r2]
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d000      	beq.n	80030a8 <HAL_UART_Transmit+0x1c>
 80030a6:	e088      	b.n	80031ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_UART_Transmit+0x2a>
 80030ae:	1dbb      	adds	r3, r7, #6
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e080      	b.n	80031bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	015b      	lsls	r3, r3, #5
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d109      	bne.n	80030da <HAL_UART_Transmit+0x4e>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	d001      	beq.n	80030da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e070      	b.n	80031bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2290      	movs	r2, #144	; 0x90
 80030de:	2100      	movs	r1, #0
 80030e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2288      	movs	r2, #136	; 0x88
 80030e6:	2121      	movs	r1, #33	; 0x21
 80030e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ea:	f7fe fd61 	bl	8001bb0 <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1dba      	adds	r2, r7, #6
 80030f6:	2154      	movs	r1, #84	; 0x54
 80030f8:	8812      	ldrh	r2, [r2, #0]
 80030fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1dba      	adds	r2, r7, #6
 8003100:	2156      	movs	r1, #86	; 0x56
 8003102:	8812      	ldrh	r2, [r2, #0]
 8003104:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	015b      	lsls	r3, r3, #5
 800310e:	429a      	cmp	r2, r3
 8003110:	d108      	bne.n	8003124 <HAL_UART_Transmit+0x98>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e003      	b.n	800312c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800312c:	e02c      	b.n	8003188 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	0013      	movs	r3, r2
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	f000 fc9a 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e039      	b.n	80031bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	001a      	movs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	05d2      	lsls	r2, r2, #23
 800315a:	0dd2      	lsrs	r2, r2, #23
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3302      	adds	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e007      	b.n	8003176 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2256      	movs	r2, #86	; 0x56
 800317a:	5a9b      	ldrh	r3, [r3, r2]
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b299      	uxth	r1, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2256      	movs	r2, #86	; 0x56
 8003186:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2256      	movs	r2, #86	; 0x56
 800318c:	5a9b      	ldrh	r3, [r3, r2]
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1cc      	bne.n	800312e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	0013      	movs	r3, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	f000 fc67 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e006      	b.n	80031bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2288      	movs	r2, #136	; 0x88
 80031b2:	2120      	movs	r1, #32
 80031b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b008      	add	sp, #32
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b090      	sub	sp, #64	; 0x40
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031cc:	231a      	movs	r3, #26
 80031ce:	2220      	movs	r2, #32
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	19db      	adds	r3, r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4ac1      	ldr	r2, [pc, #772]	; (80034fc <UART_SetConfig+0x338>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003202:	430b      	orrs	r3, r1
 8003204:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4abc      	ldr	r2, [pc, #752]	; (8003500 <UART_SetConfig+0x33c>)
 800320e:	4013      	ands	r3, r2
 8003210:	0018      	movs	r0, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	0003      	movs	r3, r0
 800321c:	430b      	orrs	r3, r1
 800321e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4ab6      	ldr	r2, [pc, #728]	; (8003504 <UART_SetConfig+0x340>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <UART_SetConfig+0x80>
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4ab4      	ldr	r2, [pc, #720]	; (8003508 <UART_SetConfig+0x344>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003240:	4313      	orrs	r3, r2
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4ab0      	ldr	r2, [pc, #704]	; (800350c <UART_SetConfig+0x348>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003256:	430b      	orrs	r3, r1
 8003258:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	220f      	movs	r2, #15
 8003262:	4393      	bics	r3, r2
 8003264:	0018      	movs	r0, r3
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	0003      	movs	r3, r0
 8003270:	430b      	orrs	r3, r1
 8003272:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4aa5      	ldr	r2, [pc, #660]	; (8003510 <UART_SetConfig+0x34c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d131      	bne.n	80032e2 <UART_SetConfig+0x11e>
 800327e:	4ba5      	ldr	r3, [pc, #660]	; (8003514 <UART_SetConfig+0x350>)
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	2203      	movs	r2, #3
 8003284:	4013      	ands	r3, r2
 8003286:	2b03      	cmp	r3, #3
 8003288:	d01d      	beq.n	80032c6 <UART_SetConfig+0x102>
 800328a:	d823      	bhi.n	80032d4 <UART_SetConfig+0x110>
 800328c:	2b02      	cmp	r3, #2
 800328e:	d00c      	beq.n	80032aa <UART_SetConfig+0xe6>
 8003290:	d820      	bhi.n	80032d4 <UART_SetConfig+0x110>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <UART_SetConfig+0xd8>
 8003296:	2b01      	cmp	r3, #1
 8003298:	d00e      	beq.n	80032b8 <UART_SetConfig+0xf4>
 800329a:	e01b      	b.n	80032d4 <UART_SetConfig+0x110>
 800329c:	231b      	movs	r3, #27
 800329e:	2220      	movs	r2, #32
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	19db      	adds	r3, r3, r7
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e154      	b.n	8003554 <UART_SetConfig+0x390>
 80032aa:	231b      	movs	r3, #27
 80032ac:	2220      	movs	r2, #32
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e14d      	b.n	8003554 <UART_SetConfig+0x390>
 80032b8:	231b      	movs	r3, #27
 80032ba:	2220      	movs	r2, #32
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	19db      	adds	r3, r3, r7
 80032c0:	2204      	movs	r2, #4
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e146      	b.n	8003554 <UART_SetConfig+0x390>
 80032c6:	231b      	movs	r3, #27
 80032c8:	2220      	movs	r2, #32
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	19db      	adds	r3, r3, r7
 80032ce:	2208      	movs	r2, #8
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e13f      	b.n	8003554 <UART_SetConfig+0x390>
 80032d4:	231b      	movs	r3, #27
 80032d6:	2220      	movs	r2, #32
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19db      	adds	r3, r3, r7
 80032dc:	2210      	movs	r2, #16
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e138      	b.n	8003554 <UART_SetConfig+0x390>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a8c      	ldr	r2, [pc, #560]	; (8003518 <UART_SetConfig+0x354>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d131      	bne.n	8003350 <UART_SetConfig+0x18c>
 80032ec:	4b89      	ldr	r3, [pc, #548]	; (8003514 <UART_SetConfig+0x350>)
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	220c      	movs	r2, #12
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d01d      	beq.n	8003334 <UART_SetConfig+0x170>
 80032f8:	d823      	bhi.n	8003342 <UART_SetConfig+0x17e>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d00c      	beq.n	8003318 <UART_SetConfig+0x154>
 80032fe:	d820      	bhi.n	8003342 <UART_SetConfig+0x17e>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <UART_SetConfig+0x146>
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00e      	beq.n	8003326 <UART_SetConfig+0x162>
 8003308:	e01b      	b.n	8003342 <UART_SetConfig+0x17e>
 800330a:	231b      	movs	r3, #27
 800330c:	2220      	movs	r2, #32
 800330e:	189b      	adds	r3, r3, r2
 8003310:	19db      	adds	r3, r3, r7
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e11d      	b.n	8003554 <UART_SetConfig+0x390>
 8003318:	231b      	movs	r3, #27
 800331a:	2220      	movs	r2, #32
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	2202      	movs	r2, #2
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e116      	b.n	8003554 <UART_SetConfig+0x390>
 8003326:	231b      	movs	r3, #27
 8003328:	2220      	movs	r2, #32
 800332a:	189b      	adds	r3, r3, r2
 800332c:	19db      	adds	r3, r3, r7
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e10f      	b.n	8003554 <UART_SetConfig+0x390>
 8003334:	231b      	movs	r3, #27
 8003336:	2220      	movs	r2, #32
 8003338:	189b      	adds	r3, r3, r2
 800333a:	19db      	adds	r3, r3, r7
 800333c:	2208      	movs	r2, #8
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e108      	b.n	8003554 <UART_SetConfig+0x390>
 8003342:	231b      	movs	r3, #27
 8003344:	2220      	movs	r2, #32
 8003346:	189b      	adds	r3, r3, r2
 8003348:	19db      	adds	r3, r3, r7
 800334a:	2210      	movs	r2, #16
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e101      	b.n	8003554 <UART_SetConfig+0x390>
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a71      	ldr	r2, [pc, #452]	; (800351c <UART_SetConfig+0x358>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d131      	bne.n	80033be <UART_SetConfig+0x1fa>
 800335a:	4b6e      	ldr	r3, [pc, #440]	; (8003514 <UART_SetConfig+0x350>)
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	2230      	movs	r2, #48	; 0x30
 8003360:	4013      	ands	r3, r2
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d01d      	beq.n	80033a2 <UART_SetConfig+0x1de>
 8003366:	d823      	bhi.n	80033b0 <UART_SetConfig+0x1ec>
 8003368:	2b20      	cmp	r3, #32
 800336a:	d00c      	beq.n	8003386 <UART_SetConfig+0x1c2>
 800336c:	d820      	bhi.n	80033b0 <UART_SetConfig+0x1ec>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <UART_SetConfig+0x1b4>
 8003372:	2b10      	cmp	r3, #16
 8003374:	d00e      	beq.n	8003394 <UART_SetConfig+0x1d0>
 8003376:	e01b      	b.n	80033b0 <UART_SetConfig+0x1ec>
 8003378:	231b      	movs	r3, #27
 800337a:	2220      	movs	r2, #32
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e0e6      	b.n	8003554 <UART_SetConfig+0x390>
 8003386:	231b      	movs	r3, #27
 8003388:	2220      	movs	r2, #32
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e0df      	b.n	8003554 <UART_SetConfig+0x390>
 8003394:	231b      	movs	r3, #27
 8003396:	2220      	movs	r2, #32
 8003398:	189b      	adds	r3, r3, r2
 800339a:	19db      	adds	r3, r3, r7
 800339c:	2204      	movs	r2, #4
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e0d8      	b.n	8003554 <UART_SetConfig+0x390>
 80033a2:	231b      	movs	r3, #27
 80033a4:	2220      	movs	r2, #32
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2208      	movs	r2, #8
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e0d1      	b.n	8003554 <UART_SetConfig+0x390>
 80033b0:	231b      	movs	r3, #27
 80033b2:	2220      	movs	r2, #32
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2210      	movs	r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e0ca      	b.n	8003554 <UART_SetConfig+0x390>
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a57      	ldr	r2, [pc, #348]	; (8003520 <UART_SetConfig+0x35c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d106      	bne.n	80033d6 <UART_SetConfig+0x212>
 80033c8:	231b      	movs	r3, #27
 80033ca:	2220      	movs	r2, #32
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e0be      	b.n	8003554 <UART_SetConfig+0x390>
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a52      	ldr	r2, [pc, #328]	; (8003524 <UART_SetConfig+0x360>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d106      	bne.n	80033ee <UART_SetConfig+0x22a>
 80033e0:	231b      	movs	r3, #27
 80033e2:	2220      	movs	r2, #32
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e0b2      	b.n	8003554 <UART_SetConfig+0x390>
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <UART_SetConfig+0x364>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d106      	bne.n	8003406 <UART_SetConfig+0x242>
 80033f8:	231b      	movs	r3, #27
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e0a6      	b.n	8003554 <UART_SetConfig+0x390>
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a3e      	ldr	r2, [pc, #248]	; (8003504 <UART_SetConfig+0x340>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d13e      	bne.n	800348e <UART_SetConfig+0x2ca>
 8003410:	4b40      	ldr	r3, [pc, #256]	; (8003514 <UART_SetConfig+0x350>)
 8003412:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003414:	23c0      	movs	r3, #192	; 0xc0
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	4013      	ands	r3, r2
 800341a:	22c0      	movs	r2, #192	; 0xc0
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	4293      	cmp	r3, r2
 8003420:	d027      	beq.n	8003472 <UART_SetConfig+0x2ae>
 8003422:	22c0      	movs	r2, #192	; 0xc0
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	4293      	cmp	r3, r2
 8003428:	d82a      	bhi.n	8003480 <UART_SetConfig+0x2bc>
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	4293      	cmp	r3, r2
 8003430:	d011      	beq.n	8003456 <UART_SetConfig+0x292>
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	4293      	cmp	r3, r2
 8003438:	d822      	bhi.n	8003480 <UART_SetConfig+0x2bc>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d004      	beq.n	8003448 <UART_SetConfig+0x284>
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	00d2      	lsls	r2, r2, #3
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <UART_SetConfig+0x2a0>
 8003446:	e01b      	b.n	8003480 <UART_SetConfig+0x2bc>
 8003448:	231b      	movs	r3, #27
 800344a:	2220      	movs	r2, #32
 800344c:	189b      	adds	r3, r3, r2
 800344e:	19db      	adds	r3, r3, r7
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e07e      	b.n	8003554 <UART_SetConfig+0x390>
 8003456:	231b      	movs	r3, #27
 8003458:	2220      	movs	r2, #32
 800345a:	189b      	adds	r3, r3, r2
 800345c:	19db      	adds	r3, r3, r7
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e077      	b.n	8003554 <UART_SetConfig+0x390>
 8003464:	231b      	movs	r3, #27
 8003466:	2220      	movs	r2, #32
 8003468:	189b      	adds	r3, r3, r2
 800346a:	19db      	adds	r3, r3, r7
 800346c:	2204      	movs	r2, #4
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e070      	b.n	8003554 <UART_SetConfig+0x390>
 8003472:	231b      	movs	r3, #27
 8003474:	2220      	movs	r2, #32
 8003476:	189b      	adds	r3, r3, r2
 8003478:	19db      	adds	r3, r3, r7
 800347a:	2208      	movs	r2, #8
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e069      	b.n	8003554 <UART_SetConfig+0x390>
 8003480:	231b      	movs	r3, #27
 8003482:	2220      	movs	r2, #32
 8003484:	189b      	adds	r3, r3, r2
 8003486:	19db      	adds	r3, r3, r7
 8003488:	2210      	movs	r2, #16
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e062      	b.n	8003554 <UART_SetConfig+0x390>
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <UART_SetConfig+0x344>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d157      	bne.n	8003548 <UART_SetConfig+0x384>
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <UART_SetConfig+0x350>)
 800349a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800349c:	23c0      	movs	r3, #192	; 0xc0
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	22c0      	movs	r2, #192	; 0xc0
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d040      	beq.n	800352c <UART_SetConfig+0x368>
 80034aa:	22c0      	movs	r2, #192	; 0xc0
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d843      	bhi.n	800353a <UART_SetConfig+0x376>
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d011      	beq.n	80034de <UART_SetConfig+0x31a>
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	4293      	cmp	r3, r2
 80034c0:	d83b      	bhi.n	800353a <UART_SetConfig+0x376>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <UART_SetConfig+0x30c>
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	0052      	lsls	r2, r2, #1
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <UART_SetConfig+0x328>
 80034ce:	e034      	b.n	800353a <UART_SetConfig+0x376>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2220      	movs	r2, #32
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e03a      	b.n	8003554 <UART_SetConfig+0x390>
 80034de:	231b      	movs	r3, #27
 80034e0:	2220      	movs	r2, #32
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e033      	b.n	8003554 <UART_SetConfig+0x390>
 80034ec:	231b      	movs	r3, #27
 80034ee:	2220      	movs	r2, #32
 80034f0:	189b      	adds	r3, r3, r2
 80034f2:	19db      	adds	r3, r3, r7
 80034f4:	2204      	movs	r2, #4
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e02c      	b.n	8003554 <UART_SetConfig+0x390>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	cfff69f3 	.word	0xcfff69f3
 8003500:	ffffcfff 	.word	0xffffcfff
 8003504:	40008000 	.word	0x40008000
 8003508:	40008400 	.word	0x40008400
 800350c:	11fff4ff 	.word	0x11fff4ff
 8003510:	40013800 	.word	0x40013800
 8003514:	40021000 	.word	0x40021000
 8003518:	40004400 	.word	0x40004400
 800351c:	40004800 	.word	0x40004800
 8003520:	40004c00 	.word	0x40004c00
 8003524:	40005000 	.word	0x40005000
 8003528:	40013c00 	.word	0x40013c00
 800352c:	231b      	movs	r3, #27
 800352e:	2220      	movs	r2, #32
 8003530:	189b      	adds	r3, r3, r2
 8003532:	19db      	adds	r3, r3, r7
 8003534:	2208      	movs	r2, #8
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e00c      	b.n	8003554 <UART_SetConfig+0x390>
 800353a:	231b      	movs	r3, #27
 800353c:	2220      	movs	r2, #32
 800353e:	189b      	adds	r3, r3, r2
 8003540:	19db      	adds	r3, r3, r7
 8003542:	2210      	movs	r2, #16
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e005      	b.n	8003554 <UART_SetConfig+0x390>
 8003548:	231b      	movs	r3, #27
 800354a:	2220      	movs	r2, #32
 800354c:	189b      	adds	r3, r3, r2
 800354e:	19db      	adds	r3, r3, r7
 8003550:	2210      	movs	r2, #16
 8003552:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4ac1      	ldr	r2, [pc, #772]	; (8003860 <UART_SetConfig+0x69c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d005      	beq.n	800356a <UART_SetConfig+0x3a6>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4ac0      	ldr	r2, [pc, #768]	; (8003864 <UART_SetConfig+0x6a0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d000      	beq.n	800356a <UART_SetConfig+0x3a6>
 8003568:	e093      	b.n	8003692 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800356a:	231b      	movs	r3, #27
 800356c:	2220      	movs	r2, #32
 800356e:	189b      	adds	r3, r3, r2
 8003570:	19db      	adds	r3, r3, r7
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d015      	beq.n	80035a4 <UART_SetConfig+0x3e0>
 8003578:	dc18      	bgt.n	80035ac <UART_SetConfig+0x3e8>
 800357a:	2b04      	cmp	r3, #4
 800357c:	d00d      	beq.n	800359a <UART_SetConfig+0x3d6>
 800357e:	dc15      	bgt.n	80035ac <UART_SetConfig+0x3e8>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <UART_SetConfig+0x3c6>
 8003584:	2b02      	cmp	r3, #2
 8003586:	d005      	beq.n	8003594 <UART_SetConfig+0x3d0>
 8003588:	e010      	b.n	80035ac <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358a:	f7ff fad7 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 800358e:	0003      	movs	r3, r0
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003592:	e014      	b.n	80035be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003594:	4bb4      	ldr	r3, [pc, #720]	; (8003868 <UART_SetConfig+0x6a4>)
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003598:	e011      	b.n	80035be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359a:	f7ff fa43 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 800359e:	0003      	movs	r3, r0
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035a2:	e00c      	b.n	80035be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035aa:	e008      	b.n	80035be <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035b0:	231a      	movs	r3, #26
 80035b2:	2220      	movs	r2, #32
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
        break;
 80035bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d100      	bne.n	80035c6 <UART_SetConfig+0x402>
 80035c4:	e135      	b.n	8003832 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ca:	4ba8      	ldr	r3, [pc, #672]	; (800386c <UART_SetConfig+0x6a8>)
 80035cc:	0052      	lsls	r2, r2, #1
 80035ce:	5ad3      	ldrh	r3, [r2, r3]
 80035d0:	0019      	movs	r1, r3
 80035d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035d4:	f7fd fd3e 	bl	8001054 <__udivsi3>
 80035d8:	0003      	movs	r3, r0
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	0013      	movs	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d305      	bcc.n	80035f8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d906      	bls.n	8003606 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80035f8:	231a      	movs	r3, #26
 80035fa:	2220      	movs	r2, #32
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e044      	b.n	8003690 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003612:	4b96      	ldr	r3, [pc, #600]	; (800386c <UART_SetConfig+0x6a8>)
 8003614:	0052      	lsls	r2, r2, #1
 8003616:	5ad3      	ldrh	r3, [r2, r3]
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	69b8      	ldr	r0, [r7, #24]
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	f7fd fe8b 	bl	8001340 <__aeabi_uldivmod>
 800362a:	0002      	movs	r2, r0
 800362c:	000b      	movs	r3, r1
 800362e:	0e11      	lsrs	r1, r2, #24
 8003630:	021d      	lsls	r5, r3, #8
 8003632:	430d      	orrs	r5, r1
 8003634:	0214      	lsls	r4, r2, #8
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68b8      	ldr	r0, [r7, #8]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	1900      	adds	r0, r0, r4
 8003648:	4169      	adcs	r1, r5
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f7fd fe72 	bl	8001340 <__aeabi_uldivmod>
 800365c:	0002      	movs	r2, r0
 800365e:	000b      	movs	r3, r1
 8003660:	0013      	movs	r3, r2
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003666:	23c0      	movs	r3, #192	; 0xc0
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	429a      	cmp	r2, r3
 800366c:	d309      	bcc.n	8003682 <UART_SetConfig+0x4be>
 800366e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	035b      	lsls	r3, r3, #13
 8003674:	429a      	cmp	r2, r3
 8003676:	d204      	bcs.n	8003682 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	e006      	b.n	8003690 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003682:	231a      	movs	r3, #26
 8003684:	2220      	movs	r2, #32
 8003686:	189b      	adds	r3, r3, r2
 8003688:	19db      	adds	r3, r3, r7
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800368e:	e0d0      	b.n	8003832 <UART_SetConfig+0x66e>
 8003690:	e0cf      	b.n	8003832 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	429a      	cmp	r2, r3
 800369c:	d000      	beq.n	80036a0 <UART_SetConfig+0x4dc>
 800369e:	e070      	b.n	8003782 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80036a0:	231b      	movs	r3, #27
 80036a2:	2220      	movs	r2, #32
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	19db      	adds	r3, r3, r7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d015      	beq.n	80036da <UART_SetConfig+0x516>
 80036ae:	dc18      	bgt.n	80036e2 <UART_SetConfig+0x51e>
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d00d      	beq.n	80036d0 <UART_SetConfig+0x50c>
 80036b4:	dc15      	bgt.n	80036e2 <UART_SetConfig+0x51e>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0x4fc>
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d005      	beq.n	80036ca <UART_SetConfig+0x506>
 80036be:	e010      	b.n	80036e2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7ff fa3c 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 80036c4:	0003      	movs	r3, r0
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036c8:	e014      	b.n	80036f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ca:	4b67      	ldr	r3, [pc, #412]	; (8003868 <UART_SetConfig+0x6a4>)
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036ce:	e011      	b.n	80036f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d0:	f7ff f9a8 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80036d4:	0003      	movs	r3, r0
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036d8:	e00c      	b.n	80036f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036e0:	e008      	b.n	80036f4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80036e6:	231a      	movs	r3, #26
 80036e8:	2220      	movs	r2, #32
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
        break;
 80036f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d100      	bne.n	80036fc <UART_SetConfig+0x538>
 80036fa:	e09a      	b.n	8003832 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003700:	4b5a      	ldr	r3, [pc, #360]	; (800386c <UART_SetConfig+0x6a8>)
 8003702:	0052      	lsls	r2, r2, #1
 8003704:	5ad3      	ldrh	r3, [r2, r3]
 8003706:	0019      	movs	r1, r3
 8003708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800370a:	f7fd fca3 	bl	8001054 <__udivsi3>
 800370e:	0003      	movs	r3, r0
 8003710:	005a      	lsls	r2, r3, #1
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	18d2      	adds	r2, r2, r3
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f7fd fc97 	bl	8001054 <__udivsi3>
 8003726:	0003      	movs	r3, r0
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d921      	bls.n	8003774 <UART_SetConfig+0x5b0>
 8003730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	429a      	cmp	r2, r3
 8003738:	d21c      	bcs.n	8003774 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	b29a      	uxth	r2, r3
 800373e:	200e      	movs	r0, #14
 8003740:	2420      	movs	r4, #32
 8003742:	1903      	adds	r3, r0, r4
 8003744:	19db      	adds	r3, r3, r7
 8003746:	210f      	movs	r1, #15
 8003748:	438a      	bics	r2, r1
 800374a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	b29b      	uxth	r3, r3
 8003752:	2207      	movs	r2, #7
 8003754:	4013      	ands	r3, r2
 8003756:	b299      	uxth	r1, r3
 8003758:	1903      	adds	r3, r0, r4
 800375a:	19db      	adds	r3, r3, r7
 800375c:	1902      	adds	r2, r0, r4
 800375e:	19d2      	adds	r2, r2, r7
 8003760:	8812      	ldrh	r2, [r2, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1902      	adds	r2, r0, r4
 800376c:	19d2      	adds	r2, r2, r7
 800376e:	8812      	ldrh	r2, [r2, #0]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e05e      	b.n	8003832 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003774:	231a      	movs	r3, #26
 8003776:	2220      	movs	r2, #32
 8003778:	189b      	adds	r3, r3, r2
 800377a:	19db      	adds	r3, r3, r7
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e057      	b.n	8003832 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003782:	231b      	movs	r3, #27
 8003784:	2220      	movs	r2, #32
 8003786:	189b      	adds	r3, r3, r2
 8003788:	19db      	adds	r3, r3, r7
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d015      	beq.n	80037bc <UART_SetConfig+0x5f8>
 8003790:	dc18      	bgt.n	80037c4 <UART_SetConfig+0x600>
 8003792:	2b04      	cmp	r3, #4
 8003794:	d00d      	beq.n	80037b2 <UART_SetConfig+0x5ee>
 8003796:	dc15      	bgt.n	80037c4 <UART_SetConfig+0x600>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <UART_SetConfig+0x5de>
 800379c:	2b02      	cmp	r3, #2
 800379e:	d005      	beq.n	80037ac <UART_SetConfig+0x5e8>
 80037a0:	e010      	b.n	80037c4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a2:	f7ff f9cb 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 80037a6:	0003      	movs	r3, r0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037aa:	e014      	b.n	80037d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ac:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <UART_SetConfig+0x6a4>)
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037b0:	e011      	b.n	80037d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b2:	f7ff f937 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80037b6:	0003      	movs	r3, r0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037ba:	e00c      	b.n	80037d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037c2:	e008      	b.n	80037d6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037c8:	231a      	movs	r3, #26
 80037ca:	2220      	movs	r2, #32
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
        break;
 80037d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02a      	beq.n	8003832 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <UART_SetConfig+0x6a8>)
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	5ad3      	ldrh	r3, [r2, r3]
 80037e6:	0019      	movs	r1, r3
 80037e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037ea:	f7fd fc33 	bl	8001054 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	001a      	movs	r2, r3
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	18d2      	adds	r2, r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f7fd fc27 	bl	8001054 <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d90a      	bls.n	8003826 <UART_SetConfig+0x662>
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	025b      	lsls	r3, r3, #9
 8003816:	429a      	cmp	r2, r3
 8003818:	d205      	bcs.n	8003826 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	b29a      	uxth	r2, r3
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	e005      	b.n	8003832 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003826:	231a      	movs	r3, #26
 8003828:	2220      	movs	r2, #32
 800382a:	189b      	adds	r3, r3, r2
 800382c:	19db      	adds	r3, r3, r7
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	226a      	movs	r2, #106	; 0x6a
 8003836:	2101      	movs	r1, #1
 8003838:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	2268      	movs	r2, #104	; 0x68
 800383e:	2101      	movs	r1, #1
 8003840:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	2200      	movs	r2, #0
 8003846:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	2200      	movs	r2, #0
 800384c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800384e:	231a      	movs	r3, #26
 8003850:	2220      	movs	r2, #32
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	781b      	ldrb	r3, [r3, #0]
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b010      	add	sp, #64	; 0x40
 800385e:	bdb0      	pop	{r4, r5, r7, pc}
 8003860:	40008000 	.word	0x40008000
 8003864:	40008400 	.word	0x40008400
 8003868:	00f42400 	.word	0x00f42400
 800386c:	08004890 	.word	0x08004890

08003870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	2201      	movs	r2, #1
 800387e:	4013      	ands	r3, r2
 8003880:	d00b      	beq.n	800389a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a4a      	ldr	r2, [pc, #296]	; (80039b4 <UART_AdvFeatureConfig+0x144>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	2202      	movs	r2, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	d00b      	beq.n	80038bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a43      	ldr	r2, [pc, #268]	; (80039b8 <UART_AdvFeatureConfig+0x148>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	2204      	movs	r2, #4
 80038c2:	4013      	ands	r3, r2
 80038c4:	d00b      	beq.n	80038de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a3b      	ldr	r2, [pc, #236]	; (80039bc <UART_AdvFeatureConfig+0x14c>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	2208      	movs	r2, #8
 80038e4:	4013      	ands	r3, r2
 80038e6:	d00b      	beq.n	8003900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <UART_AdvFeatureConfig+0x150>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	2210      	movs	r2, #16
 8003906:	4013      	ands	r3, r2
 8003908:	d00b      	beq.n	8003922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <UART_AdvFeatureConfig+0x154>)
 8003912:	4013      	ands	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	2220      	movs	r2, #32
 8003928:	4013      	ands	r3, r2
 800392a:	d00b      	beq.n	8003944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <UART_AdvFeatureConfig+0x158>)
 8003934:	4013      	ands	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	2240      	movs	r2, #64	; 0x40
 800394a:	4013      	ands	r3, r2
 800394c:	d01d      	beq.n	800398a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <UART_AdvFeatureConfig+0x15c>)
 8003956:	4013      	ands	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	035b      	lsls	r3, r3, #13
 800396e:	429a      	cmp	r2, r3
 8003970:	d10b      	bne.n	800398a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <UART_AdvFeatureConfig+0x160>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	4013      	ands	r3, r2
 8003992:	d00b      	beq.n	80039ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <UART_AdvFeatureConfig+0x164>)
 800399c:	4013      	ands	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	fffdffff 	.word	0xfffdffff
 80039b8:	fffeffff 	.word	0xfffeffff
 80039bc:	fffbffff 	.word	0xfffbffff
 80039c0:	ffff7fff 	.word	0xffff7fff
 80039c4:	ffffefff 	.word	0xffffefff
 80039c8:	ffffdfff 	.word	0xffffdfff
 80039cc:	ffefffff 	.word	0xffefffff
 80039d0:	ff9fffff 	.word	0xff9fffff
 80039d4:	fff7ffff 	.word	0xfff7ffff

080039d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2290      	movs	r2, #144	; 0x90
 80039e4:	2100      	movs	r1, #0
 80039e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e8:	f7fe f8e2 	bl	8001bb0 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2208      	movs	r2, #8
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d10c      	bne.n	8003a18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0391      	lsls	r1, r2, #14
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <UART_CheckIdleState+0x98>)
 8003a08:	9200      	str	r2, [sp, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f000 f832 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d001      	beq.n	8003a18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e026      	b.n	8003a66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d10c      	bne.n	8003a40 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	03d1      	lsls	r1, r2, #15
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <UART_CheckIdleState+0x98>)
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f000 f81e 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d001      	beq.n	8003a40 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e012      	b.n	8003a66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2288      	movs	r2, #136	; 0x88
 8003a44:	2120      	movs	r1, #32
 8003a46:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	228c      	movs	r2, #140	; 0x8c
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2284      	movs	r2, #132	; 0x84
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	01ffffff 	.word	0x01ffffff

08003a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b094      	sub	sp, #80	; 0x50
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a84:	e0a7      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d100      	bne.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a8c:	e0a3      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe f88f 	bl	8001bb0 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d13f      	bne.n	8003b24 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
 8003aae:	2301      	movs	r3, #1
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	494e      	ldr	r1, [pc, #312]	; (8003c00 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	f383 8810 	msr	PRIMASK, r3
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	438a      	bics	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2288      	movs	r2, #136	; 0x88
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	228c      	movs	r2, #140	; 0x8c
 8003b14:	2120      	movs	r1, #32
 8003b16:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2284      	movs	r2, #132	; 0x84
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e069      	b.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d052      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d148      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b52:	613b      	str	r3, [r7, #16]
  return(result);
 8003b54:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4924      	ldr	r1, [pc, #144]	; (8003c00 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b70:	400a      	ands	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b80:	f3ef 8310 	mrs	r3, PRIMASK
 8003b84:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b86:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2288      	movs	r2, #136	; 0x88
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	228c      	movs	r2, #140	; 0x8c
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2290      	movs	r2, #144	; 0x90
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2284      	movs	r2, #132	; 0x84
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e010      	b.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	425a      	negs	r2, r3
 8003be6:	4153      	adcs	r3, r2
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	001a      	movs	r2, r3
 8003bec:	1dfb      	adds	r3, r7, #7
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d100      	bne.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003bf4:	e747      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b014      	add	sp, #80	; 0x50
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	fffffe5f 	.word	0xfffffe5f

08003c04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_UARTEx_DisableFifoMode+0x16>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e027      	b.n	8003c6a <HAL_UARTEx_DisableFifoMode+0x66>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2284      	movs	r2, #132	; 0x84
 8003c1e:	2101      	movs	r1, #1
 8003c20:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2288      	movs	r2, #136	; 0x88
 8003c26:	2124      	movs	r1, #36	; 0x24
 8003c28:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2288      	movs	r2, #136	; 0x88
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2284      	movs	r2, #132	; 0x84
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	dfffffff 	.word	0xdfffffff

08003c78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2284      	movs	r2, #132	; 0x84
 8003c86:	5c9b      	ldrb	r3, [r3, r2]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e02e      	b.n	8003cee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2284      	movs	r2, #132	; 0x84
 8003c94:	2101      	movs	r1, #1
 8003c96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2288      	movs	r2, #136	; 0x88
 8003c9c:	2124      	movs	r1, #36	; 0x24
 8003c9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	08d9      	lsrs	r1, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f854 	bl	8003d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2288      	movs	r2, #136	; 0x88
 8003ce0:	2120      	movs	r1, #32
 8003ce2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2284      	movs	r2, #132	; 0x84
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b004      	add	sp, #16
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2284      	movs	r2, #132	; 0x84
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e02f      	b.n	8003d70 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2284      	movs	r2, #132	; 0x84
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2288      	movs	r2, #136	; 0x88
 8003d1c:	2124      	movs	r1, #36	; 0x24
 8003d1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	0019      	movs	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 f813 	bl	8003d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2288      	movs	r2, #136	; 0x88
 8003d62:	2120      	movs	r1, #32
 8003d64:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2284      	movs	r2, #132	; 0x84
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b004      	add	sp, #16
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	f1ffffff 	.word	0xf1ffffff

08003d7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	226a      	movs	r2, #106	; 0x6a
 8003d90:	2101      	movs	r1, #1
 8003d92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2268      	movs	r2, #104	; 0x68
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d9c:	e043      	b.n	8003e26 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d9e:	260f      	movs	r6, #15
 8003da0:	19bb      	adds	r3, r7, r6
 8003da2:	2208      	movs	r2, #8
 8003da4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003da6:	200e      	movs	r0, #14
 8003da8:	183b      	adds	r3, r7, r0
 8003daa:	2208      	movs	r2, #8
 8003dac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	0e5b      	lsrs	r3, r3, #25
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	240d      	movs	r4, #13
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	2107      	movs	r1, #7
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	0f5b      	lsrs	r3, r3, #29
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	250c      	movs	r5, #12
 8003dce:	197b      	adds	r3, r7, r5
 8003dd0:	2107      	movs	r1, #7
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dd6:	183b      	adds	r3, r7, r0
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	197a      	adds	r2, r7, r5
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	4914      	ldr	r1, [pc, #80]	; (8003e30 <UARTEx_SetNbDataToProcess+0xb4>)
 8003de0:	5c8a      	ldrb	r2, [r1, r2]
 8003de2:	435a      	muls	r2, r3
 8003de4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003de6:	197b      	adds	r3, r7, r5
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dee:	0019      	movs	r1, r3
 8003df0:	f7fd f9ba 	bl	8001168 <__divsi3>
 8003df4:	0003      	movs	r3, r0
 8003df6:	b299      	uxth	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	226a      	movs	r2, #106	; 0x6a
 8003dfc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dfe:	19bb      	adds	r3, r7, r6
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	193a      	adds	r2, r7, r4
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e08:	5c8a      	ldrb	r2, [r1, r2]
 8003e0a:	435a      	muls	r2, r3
 8003e0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e0e:	193b      	adds	r3, r7, r4
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e16:	0019      	movs	r1, r3
 8003e18:	f7fd f9a6 	bl	8001168 <__divsi3>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	b299      	uxth	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2268      	movs	r2, #104	; 0x68
 8003e24:	5299      	strh	r1, [r3, r2]
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b005      	add	sp, #20
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	080048a8 	.word	0x080048a8
 8003e34:	080048b0 	.word	0x080048b0

08003e38 <std>:
 8003e38:	2300      	movs	r3, #0
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	0004      	movs	r4, r0
 8003e3e:	6003      	str	r3, [r0, #0]
 8003e40:	6043      	str	r3, [r0, #4]
 8003e42:	6083      	str	r3, [r0, #8]
 8003e44:	8181      	strh	r1, [r0, #12]
 8003e46:	6643      	str	r3, [r0, #100]	; 0x64
 8003e48:	0019      	movs	r1, r3
 8003e4a:	81c2      	strh	r2, [r0, #14]
 8003e4c:	6103      	str	r3, [r0, #16]
 8003e4e:	6143      	str	r3, [r0, #20]
 8003e50:	6183      	str	r3, [r0, #24]
 8003e52:	2208      	movs	r2, #8
 8003e54:	305c      	adds	r0, #92	; 0x5c
 8003e56:	f000 f9f3 	bl	8004240 <memset>
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <std+0x38>)
 8003e5c:	6224      	str	r4, [r4, #32]
 8003e5e:	6263      	str	r3, [r4, #36]	; 0x24
 8003e60:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <std+0x3c>)
 8003e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <std+0x40>)
 8003e66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <std+0x44>)
 8003e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8003e6c:	bd10      	pop	{r4, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	0800405d 	.word	0x0800405d
 8003e74:	08004085 	.word	0x08004085
 8003e78:	080040bd 	.word	0x080040bd
 8003e7c:	080040e9 	.word	0x080040e9

08003e80 <stdio_exit_handler>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <stdio_exit_handler+0x10>)
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <stdio_exit_handler+0x14>)
 8003e86:	4804      	ldr	r0, [pc, #16]	; (8003e98 <stdio_exit_handler+0x18>)
 8003e88:	f000 f86c 	bl	8003f64 <_fwalk_sglue>
 8003e8c:	bd10      	pop	{r4, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000190 	.word	0x20000190
 8003e94:	08004655 	.word	0x08004655
 8003e98:	2000019c 	.word	0x2000019c

08003e9c <cleanup_stdio>:
 8003e9c:	6841      	ldr	r1, [r0, #4]
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <cleanup_stdio+0x30>)
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	0004      	movs	r4, r0
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d001      	beq.n	8003eac <cleanup_stdio+0x10>
 8003ea8:	f000 fbd4 	bl	8004654 <_fflush_r>
 8003eac:	68a1      	ldr	r1, [r4, #8]
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <cleanup_stdio+0x34>)
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	d002      	beq.n	8003eba <cleanup_stdio+0x1e>
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	f000 fbcd 	bl	8004654 <_fflush_r>
 8003eba:	68e1      	ldr	r1, [r4, #12]
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <cleanup_stdio+0x38>)
 8003ebe:	4299      	cmp	r1, r3
 8003ec0:	d002      	beq.n	8003ec8 <cleanup_stdio+0x2c>
 8003ec2:	0020      	movs	r0, r4
 8003ec4:	f000 fbc6 	bl	8004654 <_fflush_r>
 8003ec8:	bd10      	pop	{r4, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	200002a4 	.word	0x200002a4
 8003ed0:	2000030c 	.word	0x2000030c
 8003ed4:	20000374 	.word	0x20000374

08003ed8 <global_stdio_init.part.0>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <global_stdio_init.part.0+0x28>)
 8003edc:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <global_stdio_init.part.0+0x2c>)
 8003ede:	2104      	movs	r1, #4
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	4809      	ldr	r0, [pc, #36]	; (8003f08 <global_stdio_init.part.0+0x30>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f7ff ffa7 	bl	8003e38 <std>
 8003eea:	2201      	movs	r2, #1
 8003eec:	2109      	movs	r1, #9
 8003eee:	4807      	ldr	r0, [pc, #28]	; (8003f0c <global_stdio_init.part.0+0x34>)
 8003ef0:	f7ff ffa2 	bl	8003e38 <std>
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	2112      	movs	r1, #18
 8003ef8:	4805      	ldr	r0, [pc, #20]	; (8003f10 <global_stdio_init.part.0+0x38>)
 8003efa:	f7ff ff9d 	bl	8003e38 <std>
 8003efe:	bd10      	pop	{r4, pc}
 8003f00:	200003dc 	.word	0x200003dc
 8003f04:	08003e81 	.word	0x08003e81
 8003f08:	200002a4 	.word	0x200002a4
 8003f0c:	2000030c 	.word	0x2000030c
 8003f10:	20000374 	.word	0x20000374

08003f14 <__sfp_lock_acquire>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	4802      	ldr	r0, [pc, #8]	; (8003f20 <__sfp_lock_acquire+0xc>)
 8003f18:	f000 fa12 	bl	8004340 <__retarget_lock_acquire_recursive>
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	200003e5 	.word	0x200003e5

08003f24 <__sfp_lock_release>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4802      	ldr	r0, [pc, #8]	; (8003f30 <__sfp_lock_release+0xc>)
 8003f28:	f000 fa0b 	bl	8004342 <__retarget_lock_release_recursive>
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	200003e5 	.word	0x200003e5

08003f34 <__sinit>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	0004      	movs	r4, r0
 8003f38:	f7ff ffec 	bl	8003f14 <__sfp_lock_acquire>
 8003f3c:	6a23      	ldr	r3, [r4, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <__sinit+0x14>
 8003f42:	f7ff ffef 	bl	8003f24 <__sfp_lock_release>
 8003f46:	bd10      	pop	{r4, pc}
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__sinit+0x28>)
 8003f4a:	6223      	str	r3, [r4, #32]
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <__sinit+0x2c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f6      	bne.n	8003f42 <__sinit+0xe>
 8003f54:	f7ff ffc0 	bl	8003ed8 <global_stdio_init.part.0>
 8003f58:	e7f3      	b.n	8003f42 <__sinit+0xe>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	08003e9d 	.word	0x08003e9d
 8003f60:	200003dc 	.word	0x200003dc

08003f64 <_fwalk_sglue>:
 8003f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f66:	0014      	movs	r4, r2
 8003f68:	2600      	movs	r6, #0
 8003f6a:	9000      	str	r0, [sp, #0]
 8003f6c:	9101      	str	r1, [sp, #4]
 8003f6e:	68a5      	ldr	r5, [r4, #8]
 8003f70:	6867      	ldr	r7, [r4, #4]
 8003f72:	3f01      	subs	r7, #1
 8003f74:	d504      	bpl.n	8003f80 <_fwalk_sglue+0x1c>
 8003f76:	6824      	ldr	r4, [r4, #0]
 8003f78:	2c00      	cmp	r4, #0
 8003f7a:	d1f8      	bne.n	8003f6e <_fwalk_sglue+0xa>
 8003f7c:	0030      	movs	r0, r6
 8003f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f80:	89ab      	ldrh	r3, [r5, #12]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d908      	bls.n	8003f98 <_fwalk_sglue+0x34>
 8003f86:	220e      	movs	r2, #14
 8003f88:	5eab      	ldrsh	r3, [r5, r2]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	d004      	beq.n	8003f98 <_fwalk_sglue+0x34>
 8003f8e:	0029      	movs	r1, r5
 8003f90:	9800      	ldr	r0, [sp, #0]
 8003f92:	9b01      	ldr	r3, [sp, #4]
 8003f94:	4798      	blx	r3
 8003f96:	4306      	orrs	r6, r0
 8003f98:	3568      	adds	r5, #104	; 0x68
 8003f9a:	e7ea      	b.n	8003f72 <_fwalk_sglue+0xe>

08003f9c <_puts_r>:
 8003f9c:	6a03      	ldr	r3, [r0, #32]
 8003f9e:	b570      	push	{r4, r5, r6, lr}
 8003fa0:	0005      	movs	r5, r0
 8003fa2:	000e      	movs	r6, r1
 8003fa4:	6884      	ldr	r4, [r0, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <_puts_r+0x12>
 8003faa:	f7ff ffc3 	bl	8003f34 <__sinit>
 8003fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fb0:	07db      	lsls	r3, r3, #31
 8003fb2:	d405      	bmi.n	8003fc0 <_puts_r+0x24>
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	059b      	lsls	r3, r3, #22
 8003fb8:	d402      	bmi.n	8003fc0 <_puts_r+0x24>
 8003fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fbc:	f000 f9c0 	bl	8004340 <__retarget_lock_acquire_recursive>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	071b      	lsls	r3, r3, #28
 8003fc4:	d502      	bpl.n	8003fcc <_puts_r+0x30>
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11f      	bne.n	800400c <_puts_r+0x70>
 8003fcc:	0021      	movs	r1, r4
 8003fce:	0028      	movs	r0, r5
 8003fd0:	f000 f8d2 	bl	8004178 <__swsetup_r>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d019      	beq.n	800400c <_puts_r+0x70>
 8003fd8:	2501      	movs	r5, #1
 8003fda:	426d      	negs	r5, r5
 8003fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fde:	07db      	lsls	r3, r3, #31
 8003fe0:	d405      	bmi.n	8003fee <_puts_r+0x52>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	059b      	lsls	r3, r3, #22
 8003fe6:	d402      	bmi.n	8003fee <_puts_r+0x52>
 8003fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fea:	f000 f9aa 	bl	8004342 <__retarget_lock_release_recursive>
 8003fee:	0028      	movs	r0, r5
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da04      	bge.n	8004004 <_puts_r+0x68>
 8003ffa:	69a2      	ldr	r2, [r4, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	dc16      	bgt.n	800402e <_puts_r+0x92>
 8004000:	290a      	cmp	r1, #10
 8004002:	d014      	beq.n	800402e <_puts_r+0x92>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	6022      	str	r2, [r4, #0]
 800400a:	7019      	strb	r1, [r3, #0]
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	7831      	ldrb	r1, [r6, #0]
 8004010:	3b01      	subs	r3, #1
 8004012:	2900      	cmp	r1, #0
 8004014:	d1ed      	bne.n	8003ff2 <_puts_r+0x56>
 8004016:	60a3      	str	r3, [r4, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da0f      	bge.n	800403c <_puts_r+0xa0>
 800401c:	0028      	movs	r0, r5
 800401e:	0022      	movs	r2, r4
 8004020:	310a      	adds	r1, #10
 8004022:	f000 f867 	bl	80040f4 <__swbuf_r>
 8004026:	250a      	movs	r5, #10
 8004028:	3001      	adds	r0, #1
 800402a:	d1d7      	bne.n	8003fdc <_puts_r+0x40>
 800402c:	e7d4      	b.n	8003fd8 <_puts_r+0x3c>
 800402e:	0022      	movs	r2, r4
 8004030:	0028      	movs	r0, r5
 8004032:	f000 f85f 	bl	80040f4 <__swbuf_r>
 8004036:	3001      	adds	r0, #1
 8004038:	d1e8      	bne.n	800400c <_puts_r+0x70>
 800403a:	e7cd      	b.n	8003fd8 <_puts_r+0x3c>
 800403c:	250a      	movs	r5, #10
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	6022      	str	r2, [r4, #0]
 8004044:	701d      	strb	r5, [r3, #0]
 8004046:	e7c9      	b.n	8003fdc <_puts_r+0x40>

08004048 <puts>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4b03      	ldr	r3, [pc, #12]	; (8004058 <puts+0x10>)
 800404c:	0001      	movs	r1, r0
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	f7ff ffa4 	bl	8003f9c <_puts_r>
 8004054:	bd10      	pop	{r4, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	200001e8 	.word	0x200001e8

0800405c <__sread>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	000c      	movs	r4, r1
 8004060:	250e      	movs	r5, #14
 8004062:	5f49      	ldrsh	r1, [r1, r5]
 8004064:	f000 f91a 	bl	800429c <_read_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	db03      	blt.n	8004074 <__sread+0x18>
 800406c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800406e:	181b      	adds	r3, r3, r0
 8004070:	6563      	str	r3, [r4, #84]	; 0x54
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	4a02      	ldr	r2, [pc, #8]	; (8004080 <__sread+0x24>)
 8004078:	4013      	ands	r3, r2
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	e7f9      	b.n	8004072 <__sread+0x16>
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	ffffefff 	.word	0xffffefff

08004084 <__swrite>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	001f      	movs	r7, r3
 8004088:	898b      	ldrh	r3, [r1, #12]
 800408a:	0005      	movs	r5, r0
 800408c:	000c      	movs	r4, r1
 800408e:	0016      	movs	r6, r2
 8004090:	05db      	lsls	r3, r3, #23
 8004092:	d505      	bpl.n	80040a0 <__swrite+0x1c>
 8004094:	230e      	movs	r3, #14
 8004096:	5ec9      	ldrsh	r1, [r1, r3]
 8004098:	2200      	movs	r2, #0
 800409a:	2302      	movs	r3, #2
 800409c:	f000 f8ea 	bl	8004274 <_lseek_r>
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	4a05      	ldr	r2, [pc, #20]	; (80040b8 <__swrite+0x34>)
 80040a4:	0028      	movs	r0, r5
 80040a6:	4013      	ands	r3, r2
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	0032      	movs	r2, r6
 80040ac:	230e      	movs	r3, #14
 80040ae:	5ee1      	ldrsh	r1, [r4, r3]
 80040b0:	003b      	movs	r3, r7
 80040b2:	f000 f907 	bl	80042c4 <_write_r>
 80040b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040b8:	ffffefff 	.word	0xffffefff

080040bc <__sseek>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	000c      	movs	r4, r1
 80040c0:	250e      	movs	r5, #14
 80040c2:	5f49      	ldrsh	r1, [r1, r5]
 80040c4:	f000 f8d6 	bl	8004274 <_lseek_r>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	1c42      	adds	r2, r0, #1
 80040cc:	d103      	bne.n	80040d6 <__sseek+0x1a>
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <__sseek+0x28>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
 80040d6:	2280      	movs	r2, #128	; 0x80
 80040d8:	0152      	lsls	r2, r2, #5
 80040da:	4313      	orrs	r3, r2
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	6560      	str	r0, [r4, #84]	; 0x54
 80040e0:	e7f8      	b.n	80040d4 <__sseek+0x18>
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	ffffefff 	.word	0xffffefff

080040e8 <__sclose>:
 80040e8:	b510      	push	{r4, lr}
 80040ea:	230e      	movs	r3, #14
 80040ec:	5ec9      	ldrsh	r1, [r1, r3]
 80040ee:	f000 f8af 	bl	8004250 <_close_r>
 80040f2:	bd10      	pop	{r4, pc}

080040f4 <__swbuf_r>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	0006      	movs	r6, r0
 80040f8:	000d      	movs	r5, r1
 80040fa:	0014      	movs	r4, r2
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d004      	beq.n	800410a <__swbuf_r+0x16>
 8004100:	6a03      	ldr	r3, [r0, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <__swbuf_r+0x16>
 8004106:	f7ff ff15 	bl	8003f34 <__sinit>
 800410a:	69a3      	ldr	r3, [r4, #24]
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	d528      	bpl.n	8004166 <__swbuf_r+0x72>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d025      	beq.n	8004166 <__swbuf_r+0x72>
 800411a:	6923      	ldr	r3, [r4, #16]
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	b2ef      	uxtb	r7, r5
 8004120:	1ac0      	subs	r0, r0, r3
 8004122:	6963      	ldr	r3, [r4, #20]
 8004124:	b2ed      	uxtb	r5, r5
 8004126:	4283      	cmp	r3, r0
 8004128:	dc05      	bgt.n	8004136 <__swbuf_r+0x42>
 800412a:	0021      	movs	r1, r4
 800412c:	0030      	movs	r0, r6
 800412e:	f000 fa91 	bl	8004654 <_fflush_r>
 8004132:	2800      	cmp	r0, #0
 8004134:	d11d      	bne.n	8004172 <__swbuf_r+0x7e>
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	3001      	adds	r0, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	6022      	str	r2, [r4, #0]
 8004144:	701f      	strb	r7, [r3, #0]
 8004146:	6963      	ldr	r3, [r4, #20]
 8004148:	4283      	cmp	r3, r0
 800414a:	d004      	beq.n	8004156 <__swbuf_r+0x62>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	d507      	bpl.n	8004162 <__swbuf_r+0x6e>
 8004152:	2d0a      	cmp	r5, #10
 8004154:	d105      	bne.n	8004162 <__swbuf_r+0x6e>
 8004156:	0021      	movs	r1, r4
 8004158:	0030      	movs	r0, r6
 800415a:	f000 fa7b 	bl	8004654 <_fflush_r>
 800415e:	2800      	cmp	r0, #0
 8004160:	d107      	bne.n	8004172 <__swbuf_r+0x7e>
 8004162:	0028      	movs	r0, r5
 8004164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004166:	0021      	movs	r1, r4
 8004168:	0030      	movs	r0, r6
 800416a:	f000 f805 	bl	8004178 <__swsetup_r>
 800416e:	2800      	cmp	r0, #0
 8004170:	d0d3      	beq.n	800411a <__swbuf_r+0x26>
 8004172:	2501      	movs	r5, #1
 8004174:	426d      	negs	r5, r5
 8004176:	e7f4      	b.n	8004162 <__swbuf_r+0x6e>

08004178 <__swsetup_r>:
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <__swsetup_r+0xc4>)
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	0005      	movs	r5, r0
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	000c      	movs	r4, r1
 8004182:	2800      	cmp	r0, #0
 8004184:	d004      	beq.n	8004190 <__swsetup_r+0x18>
 8004186:	6a03      	ldr	r3, [r0, #32]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <__swsetup_r+0x18>
 800418c:	f7ff fed2 	bl	8003f34 <__sinit>
 8004190:	230c      	movs	r3, #12
 8004192:	5ee2      	ldrsh	r2, [r4, r3]
 8004194:	b293      	uxth	r3, r2
 8004196:	0711      	lsls	r1, r2, #28
 8004198:	d423      	bmi.n	80041e2 <__swsetup_r+0x6a>
 800419a:	06d9      	lsls	r1, r3, #27
 800419c:	d407      	bmi.n	80041ae <__swsetup_r+0x36>
 800419e:	2309      	movs	r3, #9
 80041a0:	2001      	movs	r0, #1
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	3337      	adds	r3, #55	; 0x37
 80041a6:	4313      	orrs	r3, r2
 80041a8:	81a3      	strh	r3, [r4, #12]
 80041aa:	4240      	negs	r0, r0
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
 80041ae:	075b      	lsls	r3, r3, #29
 80041b0:	d513      	bpl.n	80041da <__swsetup_r+0x62>
 80041b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d008      	beq.n	80041ca <__swsetup_r+0x52>
 80041b8:	0023      	movs	r3, r4
 80041ba:	3344      	adds	r3, #68	; 0x44
 80041bc:	4299      	cmp	r1, r3
 80041be:	d002      	beq.n	80041c6 <__swsetup_r+0x4e>
 80041c0:	0028      	movs	r0, r5
 80041c2:	f000 f8bf 	bl	8004344 <_free_r>
 80041c6:	2300      	movs	r3, #0
 80041c8:	6363      	str	r3, [r4, #52]	; 0x34
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	4393      	bics	r3, r2
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	2300      	movs	r3, #0
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	2308      	movs	r3, #8
 80041dc:	89a2      	ldrh	r2, [r4, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <__swsetup_r+0x88>
 80041e8:	21a0      	movs	r1, #160	; 0xa0
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	0089      	lsls	r1, r1, #2
 80041f0:	0092      	lsls	r2, r2, #2
 80041f2:	400b      	ands	r3, r1
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <__swsetup_r+0x88>
 80041f8:	0021      	movs	r1, r4
 80041fa:	0028      	movs	r0, r5
 80041fc:	f000 fa7e 	bl	80046fc <__smakebuf_r>
 8004200:	220c      	movs	r2, #12
 8004202:	5ea3      	ldrsh	r3, [r4, r2]
 8004204:	2001      	movs	r0, #1
 8004206:	001a      	movs	r2, r3
 8004208:	b299      	uxth	r1, r3
 800420a:	4002      	ands	r2, r0
 800420c:	4203      	tst	r3, r0
 800420e:	d00f      	beq.n	8004230 <__swsetup_r+0xb8>
 8004210:	2200      	movs	r2, #0
 8004212:	60a2      	str	r2, [r4, #8]
 8004214:	6962      	ldr	r2, [r4, #20]
 8004216:	4252      	negs	r2, r2
 8004218:	61a2      	str	r2, [r4, #24]
 800421a:	2000      	movs	r0, #0
 800421c:	6922      	ldr	r2, [r4, #16]
 800421e:	4282      	cmp	r2, r0
 8004220:	d1c4      	bne.n	80041ac <__swsetup_r+0x34>
 8004222:	0609      	lsls	r1, r1, #24
 8004224:	d5c2      	bpl.n	80041ac <__swsetup_r+0x34>
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	4313      	orrs	r3, r2
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	3801      	subs	r0, #1
 800422e:	e7bd      	b.n	80041ac <__swsetup_r+0x34>
 8004230:	0788      	lsls	r0, r1, #30
 8004232:	d400      	bmi.n	8004236 <__swsetup_r+0xbe>
 8004234:	6962      	ldr	r2, [r4, #20]
 8004236:	60a2      	str	r2, [r4, #8]
 8004238:	e7ef      	b.n	800421a <__swsetup_r+0xa2>
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	200001e8 	.word	0x200001e8

08004240 <memset>:
 8004240:	0003      	movs	r3, r0
 8004242:	1882      	adds	r2, r0, r2
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	7019      	strb	r1, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <_close_r>:
 8004250:	2300      	movs	r3, #0
 8004252:	b570      	push	{r4, r5, r6, lr}
 8004254:	4d06      	ldr	r5, [pc, #24]	; (8004270 <_close_r+0x20>)
 8004256:	0004      	movs	r4, r0
 8004258:	0008      	movs	r0, r1
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fd fb9a 	bl	8001994 <_close>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d103      	bne.n	800426c <_close_r+0x1c>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d000      	beq.n	800426c <_close_r+0x1c>
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	200003e0 	.word	0x200003e0

08004274 <_lseek_r>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	0004      	movs	r4, r0
 8004278:	0008      	movs	r0, r1
 800427a:	0011      	movs	r1, r2
 800427c:	001a      	movs	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	4d05      	ldr	r5, [pc, #20]	; (8004298 <_lseek_r+0x24>)
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	f7fd fba7 	bl	80019d6 <_lseek>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d103      	bne.n	8004294 <_lseek_r+0x20>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d000      	beq.n	8004294 <_lseek_r+0x20>
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	200003e0 	.word	0x200003e0

0800429c <_read_r>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	0004      	movs	r4, r0
 80042a0:	0008      	movs	r0, r1
 80042a2:	0011      	movs	r1, r2
 80042a4:	001a      	movs	r2, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	4d05      	ldr	r5, [pc, #20]	; (80042c0 <_read_r+0x24>)
 80042aa:	602b      	str	r3, [r5, #0]
 80042ac:	f7fd fb55 	bl	800195a <_read>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d103      	bne.n	80042bc <_read_r+0x20>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d000      	beq.n	80042bc <_read_r+0x20>
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	200003e0 	.word	0x200003e0

080042c4 <_write_r>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	0004      	movs	r4, r0
 80042c8:	0008      	movs	r0, r1
 80042ca:	0011      	movs	r1, r2
 80042cc:	001a      	movs	r2, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	4d05      	ldr	r5, [pc, #20]	; (80042e8 <_write_r+0x24>)
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f7fd f984 	bl	80015e0 <_write>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d103      	bne.n	80042e4 <_write_r+0x20>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d000      	beq.n	80042e4 <_write_r+0x20>
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	200003e0 	.word	0x200003e0

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	200001e8 	.word	0x200001e8

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2600      	movs	r6, #0
 80042fc:	4c0c      	ldr	r4, [pc, #48]	; (8004330 <__libc_init_array+0x38>)
 80042fe:	4d0d      	ldr	r5, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	2600      	movs	r6, #0
 800430a:	f000 fa6b 	bl	80047e4 <_init>
 800430e:	4c0a      	ldr	r4, [pc, #40]	; (8004338 <__libc_init_array+0x40>)
 8004310:	4d0a      	ldr	r5, [pc, #40]	; (800433c <__libc_init_array+0x44>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	00b3      	lsls	r3, r6, #2
 800431e:	58eb      	ldr	r3, [r5, r3]
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	00b3      	lsls	r3, r6, #2
 8004328:	58eb      	ldr	r3, [r5, r3]
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	080048c0 	.word	0x080048c0
 8004334:	080048c0 	.word	0x080048c0
 8004338:	080048c4 	.word	0x080048c4
 800433c:	080048c0 	.word	0x080048c0

08004340 <__retarget_lock_acquire_recursive>:
 8004340:	4770      	bx	lr

08004342 <__retarget_lock_release_recursive>:
 8004342:	4770      	bx	lr

08004344 <_free_r>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	0005      	movs	r5, r0
 8004348:	2900      	cmp	r1, #0
 800434a:	d010      	beq.n	800436e <_free_r+0x2a>
 800434c:	1f0c      	subs	r4, r1, #4
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da00      	bge.n	8004356 <_free_r+0x12>
 8004354:	18e4      	adds	r4, r4, r3
 8004356:	0028      	movs	r0, r5
 8004358:	f000 f8e2 	bl	8004520 <__malloc_lock>
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <_free_r+0x90>)
 800435e:	6813      	ldr	r3, [r2, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <_free_r+0x2c>
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	6014      	str	r4, [r2, #0]
 8004368:	0028      	movs	r0, r5
 800436a:	f000 f8e1 	bl	8004530 <__malloc_unlock>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	42a3      	cmp	r3, r4
 8004372:	d908      	bls.n	8004386 <_free_r+0x42>
 8004374:	6820      	ldr	r0, [r4, #0]
 8004376:	1821      	adds	r1, r4, r0
 8004378:	428b      	cmp	r3, r1
 800437a:	d1f3      	bne.n	8004364 <_free_r+0x20>
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	1809      	adds	r1, r1, r0
 8004382:	6021      	str	r1, [r4, #0]
 8004384:	e7ee      	b.n	8004364 <_free_r+0x20>
 8004386:	001a      	movs	r2, r3
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <_free_r+0x4e>
 800438e:	42a3      	cmp	r3, r4
 8004390:	d9f9      	bls.n	8004386 <_free_r+0x42>
 8004392:	6811      	ldr	r1, [r2, #0]
 8004394:	1850      	adds	r0, r2, r1
 8004396:	42a0      	cmp	r0, r4
 8004398:	d10b      	bne.n	80043b2 <_free_r+0x6e>
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	1809      	adds	r1, r1, r0
 800439e:	1850      	adds	r0, r2, r1
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	4283      	cmp	r3, r0
 80043a4:	d1e0      	bne.n	8004368 <_free_r+0x24>
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	1841      	adds	r1, r0, r1
 80043ac:	6011      	str	r1, [r2, #0]
 80043ae:	6053      	str	r3, [r2, #4]
 80043b0:	e7da      	b.n	8004368 <_free_r+0x24>
 80043b2:	42a0      	cmp	r0, r4
 80043b4:	d902      	bls.n	80043bc <_free_r+0x78>
 80043b6:	230c      	movs	r3, #12
 80043b8:	602b      	str	r3, [r5, #0]
 80043ba:	e7d5      	b.n	8004368 <_free_r+0x24>
 80043bc:	6820      	ldr	r0, [r4, #0]
 80043be:	1821      	adds	r1, r4, r0
 80043c0:	428b      	cmp	r3, r1
 80043c2:	d103      	bne.n	80043cc <_free_r+0x88>
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	1809      	adds	r1, r1, r0
 80043ca:	6021      	str	r1, [r4, #0]
 80043cc:	6063      	str	r3, [r4, #4]
 80043ce:	6054      	str	r4, [r2, #4]
 80043d0:	e7ca      	b.n	8004368 <_free_r+0x24>
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	200003e8 	.word	0x200003e8

080043d8 <sbrk_aligned>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	4e0f      	ldr	r6, [pc, #60]	; (8004418 <sbrk_aligned+0x40>)
 80043dc:	000d      	movs	r5, r1
 80043de:	6831      	ldr	r1, [r6, #0]
 80043e0:	0004      	movs	r4, r0
 80043e2:	2900      	cmp	r1, #0
 80043e4:	d102      	bne.n	80043ec <sbrk_aligned+0x14>
 80043e6:	f000 f9eb 	bl	80047c0 <_sbrk_r>
 80043ea:	6030      	str	r0, [r6, #0]
 80043ec:	0029      	movs	r1, r5
 80043ee:	0020      	movs	r0, r4
 80043f0:	f000 f9e6 	bl	80047c0 <_sbrk_r>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d00a      	beq.n	800440e <sbrk_aligned+0x36>
 80043f8:	2303      	movs	r3, #3
 80043fa:	1cc5      	adds	r5, r0, #3
 80043fc:	439d      	bics	r5, r3
 80043fe:	42a8      	cmp	r0, r5
 8004400:	d007      	beq.n	8004412 <sbrk_aligned+0x3a>
 8004402:	1a29      	subs	r1, r5, r0
 8004404:	0020      	movs	r0, r4
 8004406:	f000 f9db 	bl	80047c0 <_sbrk_r>
 800440a:	3001      	adds	r0, #1
 800440c:	d101      	bne.n	8004412 <sbrk_aligned+0x3a>
 800440e:	2501      	movs	r5, #1
 8004410:	426d      	negs	r5, r5
 8004412:	0028      	movs	r0, r5
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	200003ec 	.word	0x200003ec

0800441c <_malloc_r>:
 800441c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441e:	2203      	movs	r2, #3
 8004420:	1ccb      	adds	r3, r1, #3
 8004422:	4393      	bics	r3, r2
 8004424:	3308      	adds	r3, #8
 8004426:	0006      	movs	r6, r0
 8004428:	001f      	movs	r7, r3
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d238      	bcs.n	80044a0 <_malloc_r+0x84>
 800442e:	270c      	movs	r7, #12
 8004430:	42b9      	cmp	r1, r7
 8004432:	d837      	bhi.n	80044a4 <_malloc_r+0x88>
 8004434:	0030      	movs	r0, r6
 8004436:	f000 f873 	bl	8004520 <__malloc_lock>
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <_malloc_r+0x100>)
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	001c      	movs	r4, r3
 8004442:	2c00      	cmp	r4, #0
 8004444:	d133      	bne.n	80044ae <_malloc_r+0x92>
 8004446:	0039      	movs	r1, r7
 8004448:	0030      	movs	r0, r6
 800444a:	f7ff ffc5 	bl	80043d8 <sbrk_aligned>
 800444e:	0004      	movs	r4, r0
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d15e      	bne.n	8004512 <_malloc_r+0xf6>
 8004454:	9b00      	ldr	r3, [sp, #0]
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	0025      	movs	r5, r4
 800445a:	2d00      	cmp	r5, #0
 800445c:	d14e      	bne.n	80044fc <_malloc_r+0xe0>
 800445e:	2c00      	cmp	r4, #0
 8004460:	d051      	beq.n	8004506 <_malloc_r+0xea>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	0029      	movs	r1, r5
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	0030      	movs	r0, r6
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	f000 f9a8 	bl	80047c0 <_sbrk_r>
 8004470:	9b01      	ldr	r3, [sp, #4]
 8004472:	4283      	cmp	r3, r0
 8004474:	d147      	bne.n	8004506 <_malloc_r+0xea>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	0030      	movs	r0, r6
 800447a:	1aff      	subs	r7, r7, r3
 800447c:	0039      	movs	r1, r7
 800447e:	f7ff ffab 	bl	80043d8 <sbrk_aligned>
 8004482:	3001      	adds	r0, #1
 8004484:	d03f      	beq.n	8004506 <_malloc_r+0xea>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	19db      	adds	r3, r3, r7
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	9b00      	ldr	r3, [sp, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d040      	beq.n	8004516 <_malloc_r+0xfa>
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	42a2      	cmp	r2, r4
 8004498:	d133      	bne.n	8004502 <_malloc_r+0xe6>
 800449a:	2200      	movs	r2, #0
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e014      	b.n	80044ca <_malloc_r+0xae>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dac5      	bge.n	8004430 <_malloc_r+0x14>
 80044a4:	230c      	movs	r3, #12
 80044a6:	2500      	movs	r5, #0
 80044a8:	6033      	str	r3, [r6, #0]
 80044aa:	0028      	movs	r0, r5
 80044ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	1bc9      	subs	r1, r1, r7
 80044b2:	d420      	bmi.n	80044f6 <_malloc_r+0xda>
 80044b4:	290b      	cmp	r1, #11
 80044b6:	d918      	bls.n	80044ea <_malloc_r+0xce>
 80044b8:	19e2      	adds	r2, r4, r7
 80044ba:	6027      	str	r7, [r4, #0]
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d112      	bne.n	80044e6 <_malloc_r+0xca>
 80044c0:	9b00      	ldr	r3, [sp, #0]
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	6011      	str	r1, [r2, #0]
 80044c8:	6053      	str	r3, [r2, #4]
 80044ca:	0030      	movs	r0, r6
 80044cc:	0025      	movs	r5, r4
 80044ce:	f000 f82f 	bl	8004530 <__malloc_unlock>
 80044d2:	2207      	movs	r2, #7
 80044d4:	350b      	adds	r5, #11
 80044d6:	1d23      	adds	r3, r4, #4
 80044d8:	4395      	bics	r5, r2
 80044da:	1aea      	subs	r2, r5, r3
 80044dc:	429d      	cmp	r5, r3
 80044de:	d0e4      	beq.n	80044aa <_malloc_r+0x8e>
 80044e0:	1b5b      	subs	r3, r3, r5
 80044e2:	50a3      	str	r3, [r4, r2]
 80044e4:	e7e1      	b.n	80044aa <_malloc_r+0x8e>
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	e7ec      	b.n	80044c4 <_malloc_r+0xa8>
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	42a3      	cmp	r3, r4
 80044ee:	d1d5      	bne.n	800449c <_malloc_r+0x80>
 80044f0:	9b00      	ldr	r3, [sp, #0]
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e7e9      	b.n	80044ca <_malloc_r+0xae>
 80044f6:	0023      	movs	r3, r4
 80044f8:	6864      	ldr	r4, [r4, #4]
 80044fa:	e7a2      	b.n	8004442 <_malloc_r+0x26>
 80044fc:	002c      	movs	r4, r5
 80044fe:	686d      	ldr	r5, [r5, #4]
 8004500:	e7ab      	b.n	800445a <_malloc_r+0x3e>
 8004502:	0013      	movs	r3, r2
 8004504:	e7c4      	b.n	8004490 <_malloc_r+0x74>
 8004506:	230c      	movs	r3, #12
 8004508:	0030      	movs	r0, r6
 800450a:	6033      	str	r3, [r6, #0]
 800450c:	f000 f810 	bl	8004530 <__malloc_unlock>
 8004510:	e7cb      	b.n	80044aa <_malloc_r+0x8e>
 8004512:	6027      	str	r7, [r4, #0]
 8004514:	e7d9      	b.n	80044ca <_malloc_r+0xae>
 8004516:	605b      	str	r3, [r3, #4]
 8004518:	deff      	udf	#255	; 0xff
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	200003e8 	.word	0x200003e8

08004520 <__malloc_lock>:
 8004520:	b510      	push	{r4, lr}
 8004522:	4802      	ldr	r0, [pc, #8]	; (800452c <__malloc_lock+0xc>)
 8004524:	f7ff ff0c 	bl	8004340 <__retarget_lock_acquire_recursive>
 8004528:	bd10      	pop	{r4, pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	200003e4 	.word	0x200003e4

08004530 <__malloc_unlock>:
 8004530:	b510      	push	{r4, lr}
 8004532:	4802      	ldr	r0, [pc, #8]	; (800453c <__malloc_unlock+0xc>)
 8004534:	f7ff ff05 	bl	8004342 <__retarget_lock_release_recursive>
 8004538:	bd10      	pop	{r4, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	200003e4 	.word	0x200003e4

08004540 <__sflush_r>:
 8004540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004542:	898b      	ldrh	r3, [r1, #12]
 8004544:	0005      	movs	r5, r0
 8004546:	000c      	movs	r4, r1
 8004548:	071a      	lsls	r2, r3, #28
 800454a:	d45c      	bmi.n	8004606 <__sflush_r+0xc6>
 800454c:	684a      	ldr	r2, [r1, #4]
 800454e:	2a00      	cmp	r2, #0
 8004550:	dc04      	bgt.n	800455c <__sflush_r+0x1c>
 8004552:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004554:	2a00      	cmp	r2, #0
 8004556:	dc01      	bgt.n	800455c <__sflush_r+0x1c>
 8004558:	2000      	movs	r0, #0
 800455a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800455c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800455e:	2f00      	cmp	r7, #0
 8004560:	d0fa      	beq.n	8004558 <__sflush_r+0x18>
 8004562:	2200      	movs	r2, #0
 8004564:	2080      	movs	r0, #128	; 0x80
 8004566:	682e      	ldr	r6, [r5, #0]
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	001a      	movs	r2, r3
 800456c:	0140      	lsls	r0, r0, #5
 800456e:	6a21      	ldr	r1, [r4, #32]
 8004570:	4002      	ands	r2, r0
 8004572:	4203      	tst	r3, r0
 8004574:	d034      	beq.n	80045e0 <__sflush_r+0xa0>
 8004576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	075b      	lsls	r3, r3, #29
 800457c:	d506      	bpl.n	800458c <__sflush_r+0x4c>
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	1ac0      	subs	r0, r0, r3
 8004582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <__sflush_r+0x4c>
 8004588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800458a:	1ac0      	subs	r0, r0, r3
 800458c:	0002      	movs	r2, r0
 800458e:	2300      	movs	r3, #0
 8004590:	0028      	movs	r0, r5
 8004592:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004594:	6a21      	ldr	r1, [r4, #32]
 8004596:	47b8      	blx	r7
 8004598:	89a2      	ldrh	r2, [r4, #12]
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	d106      	bne.n	80045ac <__sflush_r+0x6c>
 800459e:	6829      	ldr	r1, [r5, #0]
 80045a0:	291d      	cmp	r1, #29
 80045a2:	d82c      	bhi.n	80045fe <__sflush_r+0xbe>
 80045a4:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <__sflush_r+0x110>)
 80045a6:	410b      	asrs	r3, r1
 80045a8:	07db      	lsls	r3, r3, #31
 80045aa:	d428      	bmi.n	80045fe <__sflush_r+0xbe>
 80045ac:	2300      	movs	r3, #0
 80045ae:	6063      	str	r3, [r4, #4]
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	04d2      	lsls	r2, r2, #19
 80045b6:	d505      	bpl.n	80045c4 <__sflush_r+0x84>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <__sflush_r+0x82>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d100      	bne.n	80045c4 <__sflush_r+0x84>
 80045c2:	6560      	str	r0, [r4, #84]	; 0x54
 80045c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c6:	602e      	str	r6, [r5, #0]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	d0c5      	beq.n	8004558 <__sflush_r+0x18>
 80045cc:	0023      	movs	r3, r4
 80045ce:	3344      	adds	r3, #68	; 0x44
 80045d0:	4299      	cmp	r1, r3
 80045d2:	d002      	beq.n	80045da <__sflush_r+0x9a>
 80045d4:	0028      	movs	r0, r5
 80045d6:	f7ff feb5 	bl	8004344 <_free_r>
 80045da:	2000      	movs	r0, #0
 80045dc:	6360      	str	r0, [r4, #52]	; 0x34
 80045de:	e7bc      	b.n	800455a <__sflush_r+0x1a>
 80045e0:	2301      	movs	r3, #1
 80045e2:	0028      	movs	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	d1c6      	bne.n	8004578 <__sflush_r+0x38>
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0c3      	beq.n	8004578 <__sflush_r+0x38>
 80045f0:	2b1d      	cmp	r3, #29
 80045f2:	d001      	beq.n	80045f8 <__sflush_r+0xb8>
 80045f4:	2b16      	cmp	r3, #22
 80045f6:	d101      	bne.n	80045fc <__sflush_r+0xbc>
 80045f8:	602e      	str	r6, [r5, #0]
 80045fa:	e7ad      	b.n	8004558 <__sflush_r+0x18>
 80045fc:	89a2      	ldrh	r2, [r4, #12]
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	4313      	orrs	r3, r2
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	e7a9      	b.n	800455a <__sflush_r+0x1a>
 8004606:	690e      	ldr	r6, [r1, #16]
 8004608:	2e00      	cmp	r6, #0
 800460a:	d0a5      	beq.n	8004558 <__sflush_r+0x18>
 800460c:	680f      	ldr	r7, [r1, #0]
 800460e:	600e      	str	r6, [r1, #0]
 8004610:	1bba      	subs	r2, r7, r6
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	079b      	lsls	r3, r3, #30
 8004618:	d100      	bne.n	800461c <__sflush_r+0xdc>
 800461a:	694a      	ldr	r2, [r1, #20]
 800461c:	60a2      	str	r2, [r4, #8]
 800461e:	9b01      	ldr	r3, [sp, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dd99      	ble.n	8004558 <__sflush_r+0x18>
 8004624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004626:	0032      	movs	r2, r6
 8004628:	001f      	movs	r7, r3
 800462a:	0028      	movs	r0, r5
 800462c:	9b01      	ldr	r3, [sp, #4]
 800462e:	6a21      	ldr	r1, [r4, #32]
 8004630:	47b8      	blx	r7
 8004632:	2800      	cmp	r0, #0
 8004634:	dc06      	bgt.n	8004644 <__sflush_r+0x104>
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	2001      	movs	r0, #1
 800463a:	89a2      	ldrh	r2, [r4, #12]
 800463c:	4240      	negs	r0, r0
 800463e:	4313      	orrs	r3, r2
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	e78a      	b.n	800455a <__sflush_r+0x1a>
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	1836      	adds	r6, r6, r0
 8004648:	1a1b      	subs	r3, r3, r0
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	e7e7      	b.n	800461e <__sflush_r+0xde>
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	dfbffffe 	.word	0xdfbffffe

08004654 <_fflush_r>:
 8004654:	690b      	ldr	r3, [r1, #16]
 8004656:	b570      	push	{r4, r5, r6, lr}
 8004658:	0005      	movs	r5, r0
 800465a:	000c      	movs	r4, r1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <_fflush_r+0x12>
 8004660:	2500      	movs	r5, #0
 8004662:	0028      	movs	r0, r5
 8004664:	bd70      	pop	{r4, r5, r6, pc}
 8004666:	2800      	cmp	r0, #0
 8004668:	d004      	beq.n	8004674 <_fflush_r+0x20>
 800466a:	6a03      	ldr	r3, [r0, #32]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <_fflush_r+0x20>
 8004670:	f7ff fc60 	bl	8003f34 <__sinit>
 8004674:	220c      	movs	r2, #12
 8004676:	5ea3      	ldrsh	r3, [r4, r2]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f1      	beq.n	8004660 <_fflush_r+0xc>
 800467c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800467e:	07d2      	lsls	r2, r2, #31
 8004680:	d404      	bmi.n	800468c <_fflush_r+0x38>
 8004682:	059b      	lsls	r3, r3, #22
 8004684:	d402      	bmi.n	800468c <_fflush_r+0x38>
 8004686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004688:	f7ff fe5a 	bl	8004340 <__retarget_lock_acquire_recursive>
 800468c:	0028      	movs	r0, r5
 800468e:	0021      	movs	r1, r4
 8004690:	f7ff ff56 	bl	8004540 <__sflush_r>
 8004694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004696:	0005      	movs	r5, r0
 8004698:	07db      	lsls	r3, r3, #31
 800469a:	d4e2      	bmi.n	8004662 <_fflush_r+0xe>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	059b      	lsls	r3, r3, #22
 80046a0:	d4df      	bmi.n	8004662 <_fflush_r+0xe>
 80046a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a4:	f7ff fe4d 	bl	8004342 <__retarget_lock_release_recursive>
 80046a8:	e7db      	b.n	8004662 <_fflush_r+0xe>
	...

080046ac <__swhatbuf_r>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	000e      	movs	r6, r1
 80046b0:	001d      	movs	r5, r3
 80046b2:	230e      	movs	r3, #14
 80046b4:	5ec9      	ldrsh	r1, [r1, r3]
 80046b6:	0014      	movs	r4, r2
 80046b8:	b096      	sub	sp, #88	; 0x58
 80046ba:	2900      	cmp	r1, #0
 80046bc:	da0c      	bge.n	80046d8 <__swhatbuf_r+0x2c>
 80046be:	89b2      	ldrh	r2, [r6, #12]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	0011      	movs	r1, r2
 80046c4:	4019      	ands	r1, r3
 80046c6:	421a      	tst	r2, r3
 80046c8:	d013      	beq.n	80046f2 <__swhatbuf_r+0x46>
 80046ca:	2100      	movs	r1, #0
 80046cc:	3b40      	subs	r3, #64	; 0x40
 80046ce:	2000      	movs	r0, #0
 80046d0:	6029      	str	r1, [r5, #0]
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	b016      	add	sp, #88	; 0x58
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	466a      	mov	r2, sp
 80046da:	f000 f84d 	bl	8004778 <_fstat_r>
 80046de:	2800      	cmp	r0, #0
 80046e0:	dbed      	blt.n	80046be <__swhatbuf_r+0x12>
 80046e2:	23f0      	movs	r3, #240	; 0xf0
 80046e4:	9901      	ldr	r1, [sp, #4]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	4019      	ands	r1, r3
 80046ea:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <__swhatbuf_r+0x4c>)
 80046ec:	18c9      	adds	r1, r1, r3
 80046ee:	424b      	negs	r3, r1
 80046f0:	4159      	adcs	r1, r3
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	e7ea      	b.n	80046ce <__swhatbuf_r+0x22>
 80046f8:	ffffe000 	.word	0xffffe000

080046fc <__smakebuf_r>:
 80046fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fe:	2602      	movs	r6, #2
 8004700:	898b      	ldrh	r3, [r1, #12]
 8004702:	0005      	movs	r5, r0
 8004704:	000c      	movs	r4, r1
 8004706:	4233      	tst	r3, r6
 8004708:	d006      	beq.n	8004718 <__smakebuf_r+0x1c>
 800470a:	0023      	movs	r3, r4
 800470c:	3347      	adds	r3, #71	; 0x47
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	2301      	movs	r3, #1
 8004714:	6163      	str	r3, [r4, #20]
 8004716:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004718:	466a      	mov	r2, sp
 800471a:	ab01      	add	r3, sp, #4
 800471c:	f7ff ffc6 	bl	80046ac <__swhatbuf_r>
 8004720:	9900      	ldr	r1, [sp, #0]
 8004722:	0007      	movs	r7, r0
 8004724:	0028      	movs	r0, r5
 8004726:	f7ff fe79 	bl	800441c <_malloc_r>
 800472a:	2800      	cmp	r0, #0
 800472c:	d108      	bne.n	8004740 <__smakebuf_r+0x44>
 800472e:	220c      	movs	r2, #12
 8004730:	5ea3      	ldrsh	r3, [r4, r2]
 8004732:	059a      	lsls	r2, r3, #22
 8004734:	d4ef      	bmi.n	8004716 <__smakebuf_r+0x1a>
 8004736:	2203      	movs	r2, #3
 8004738:	4393      	bics	r3, r2
 800473a:	431e      	orrs	r6, r3
 800473c:	81a6      	strh	r6, [r4, #12]
 800473e:	e7e4      	b.n	800470a <__smakebuf_r+0xe>
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	89a2      	ldrh	r2, [r4, #12]
 8004744:	6020      	str	r0, [r4, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	9b00      	ldr	r3, [sp, #0]
 800474c:	6120      	str	r0, [r4, #16]
 800474e:	6163      	str	r3, [r4, #20]
 8004750:	9b01      	ldr	r3, [sp, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <__smakebuf_r+0x74>
 8004756:	0028      	movs	r0, r5
 8004758:	230e      	movs	r3, #14
 800475a:	5ee1      	ldrsh	r1, [r4, r3]
 800475c:	f000 f81e 	bl	800479c <_isatty_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	d005      	beq.n	8004770 <__smakebuf_r+0x74>
 8004764:	2303      	movs	r3, #3
 8004766:	89a2      	ldrh	r2, [r4, #12]
 8004768:	439a      	bics	r2, r3
 800476a:	3b02      	subs	r3, #2
 800476c:	4313      	orrs	r3, r2
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	433b      	orrs	r3, r7
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	e7ce      	b.n	8004716 <__smakebuf_r+0x1a>

08004778 <_fstat_r>:
 8004778:	2300      	movs	r3, #0
 800477a:	b570      	push	{r4, r5, r6, lr}
 800477c:	4d06      	ldr	r5, [pc, #24]	; (8004798 <_fstat_r+0x20>)
 800477e:	0004      	movs	r4, r0
 8004780:	0008      	movs	r0, r1
 8004782:	0011      	movs	r1, r2
 8004784:	602b      	str	r3, [r5, #0]
 8004786:	f7fd f90f 	bl	80019a8 <_fstat>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	d103      	bne.n	8004796 <_fstat_r+0x1e>
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d000      	beq.n	8004796 <_fstat_r+0x1e>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	200003e0 	.word	0x200003e0

0800479c <_isatty_r>:
 800479c:	2300      	movs	r3, #0
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	4d06      	ldr	r5, [pc, #24]	; (80047bc <_isatty_r+0x20>)
 80047a2:	0004      	movs	r4, r0
 80047a4:	0008      	movs	r0, r1
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	f7fd f90c 	bl	80019c4 <_isatty>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d103      	bne.n	80047b8 <_isatty_r+0x1c>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d000      	beq.n	80047b8 <_isatty_r+0x1c>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	200003e0 	.word	0x200003e0

080047c0 <_sbrk_r>:
 80047c0:	2300      	movs	r3, #0
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	4d06      	ldr	r5, [pc, #24]	; (80047e0 <_sbrk_r+0x20>)
 80047c6:	0004      	movs	r4, r0
 80047c8:	0008      	movs	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fd f90e 	bl	80019ec <_sbrk>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d103      	bne.n	80047dc <_sbrk_r+0x1c>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d000      	beq.n	80047dc <_sbrk_r+0x1c>
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	200003e0 	.word	0x200003e0

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
