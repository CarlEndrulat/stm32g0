
usbHelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0b8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0801a178  0801a178  0002a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a4f0  0801a4f0  0003014c  2**0
                  CONTENTS
  4 .ARM          00000000  0801a4f0  0801a4f0  0003014c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a4f0  0801a4f0  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a4f0  0801a4f0  0002a4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a4f4  0801a4f4  0002a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0801a4f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011460  2000014c  0801a644  0003014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200115ac  0801a644  000315ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 12 .comment      0000418d  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  00034307  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00034644  2**2
                  CONTENTS, READONLY
 15 .debug_info   0006c0df  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00011863  00000000  00000000  000a0747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002cf0  00000000  00000000  000b1fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001eff  00000000  00000000  000b4ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037abb  00000000  00000000  000b6b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005b218  00000000  00000000  000ee65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e2a4e  00000000  00000000  00149872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000089f8  00000000  00000000  0022c2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000100  00000000  00000000  00234cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000014c 	.word	0x2000014c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801a160 	.word	0x0801a160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000150 	.word	0x20000150
 8000104:	0801a160 	.word	0x0801a160
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	; (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	; (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	; (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	; (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	; (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	; (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	; (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	; (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	; (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	; (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	; (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	; (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	20010690 	.word	0x20010690
    LDR     r1, =SYSTICK_CYCLES
 800017c:	000752ff 	.word	0x000752ff
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	; (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	; (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	; (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	; (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	; (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	2001072c 	.word	0x2001072c
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	20010694 	.word	0x20010694
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	20010698 	.word	0x20010698
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	20010c98 	.word	0x20010c98
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	; 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	; 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	; (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	; (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	; (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f013 f8e9 	bl	80134e0 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f013 f859 	bl	80133cc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	; (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	; (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	20010738 	.word	0x20010738
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	20010c98 	.word	0x20010c98
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	2001073c 	.word	0x2001073c
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	200107c8 	.word	0x200107c8
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	200107cc 	.word	0x200107cc
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	200107c4 	.word	0x200107c4
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	200107c0 	.word	0x200107c0
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	2001072c 	.word	0x2001072c
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	20010694 	.word	0x20010694
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	20010698 	.word	0x20010698
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <USBPD_CAD_Init>:
 8000370:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8000372:	b083      	sub	sp, #12
 8000374:	001e      	movs	r6, r3
 8000376:	2500      	movs	r5, #0
 8000378:	2400      	movs	r4, #0
 800037a:	4668      	mov	r0, sp
 800037c:	7b00      	ldrb	r0, [r0, #12]
 800037e:	2803      	cmp	r0, #3
 8000380:	d301      	bcc.n	8000386 <USBPD_CAD_Init+0x16>
 8000382:	2401      	movs	r4, #1
 8000384:	e059      	b.n	800043a <USBPD_CAD_Init+0xca>
 8000386:	9100      	str	r1, [sp, #0]
 8000388:	2900      	cmp	r1, #0
 800038a:	d101      	bne.n	8000390 <USBPD_CAD_Init+0x20>
 800038c:	2402      	movs	r4, #2
 800038e:	e054      	b.n	800043a <USBPD_CAD_Init+0xca>
 8000390:	200c      	movs	r0, #12
 8000392:	f019 fdc7 	bl	8019f24 <malloc>
 8000396:	0007      	movs	r7, r0
 8000398:	d101      	bne.n	800039e <USBPD_CAD_Init+0x2e>
 800039a:	2403      	movs	r4, #3
 800039c:	e04d      	b.n	800043a <USBPD_CAD_Init+0xca>
 800039e:	9601      	str	r6, [sp, #4]
 80003a0:	210c      	movs	r1, #12
 80003a2:	f019 fece 	bl	801a142 <__aeabi_memclr>
 80003a6:	9801      	ldr	r0, [sp, #4]
 80003a8:	6038      	str	r0, [r7, #0]
 80003aa:	723d      	strb	r5, [r7, #8]
 80003ac:	9800      	ldr	r0, [sp, #0]
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	4867      	ldr	r0, [pc, #412]	; (8000550 <.text_6>)
 80003b2:	4669      	mov	r1, sp
 80003b4:	7b09      	ldrb	r1, [r1, #12]
 80003b6:	0089      	lsls	r1, r1, #2
 80003b8:	5047      	str	r7, [r0, r1]
 80003ba:	2001      	movs	r0, #1
 80003bc:	2100      	movs	r1, #0
 80003be:	43c9      	mvns	r1, r1
 80003c0:	4a64      	ldr	r2, [pc, #400]	; (8000554 <.text_7>)
 80003c2:	4b65      	ldr	r3, [pc, #404]	; (8000558 <.text_8>)
 80003c4:	4d65      	ldr	r5, [pc, #404]	; (800055c <.text_9>)
 80003c6:	682e      	ldr	r6, [r5, #0]
 80003c8:	401e      	ands	r6, r3
 80003ca:	4f65      	ldr	r7, [pc, #404]	; (8000560 <.text_10>)
 80003cc:	42be      	cmp	r6, r7
 80003ce:	d004      	beq.n	80003da <USBPD_CAD_Init+0x6a>
 80003d0:	682d      	ldr	r5, [r5, #0]
 80003d2:	402b      	ands	r3, r5
 80003d4:	4d63      	ldr	r5, [pc, #396]	; (8000564 <.text_11>)
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d112      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003da:	4b63      	ldr	r3, [pc, #396]	; (8000568 <.text_12>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10e      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003e2:	0d0b      	lsrs	r3, r1, #20
 80003e4:	4d61      	ldr	r5, [pc, #388]	; (800056c <.text_13>)
 80003e6:	682e      	ldr	r6, [r5, #0]
 80003e8:	401e      	ands	r6, r3
 80003ea:	278a      	movs	r7, #138	; 0x8a
 80003ec:	00ff      	lsls	r7, r7, #3
 80003ee:	42be      	cmp	r6, r7
 80003f0:	d004      	beq.n	80003fc <USBPD_CAD_Init+0x8c>
 80003f2:	682d      	ldr	r5, [r5, #0]
 80003f4:	402b      	ands	r3, r5
 80003f6:	4d5e      	ldr	r5, [pc, #376]	; (8000570 <.text_14>)
 80003f8:	42ab      	cmp	r3, r5
 80003fa:	d101      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003fc:	4b5d      	ldr	r3, [pc, #372]	; (8000574 <.text_15>)
 80003fe:	e000      	b.n	8000402 <USBPD_CAD_Init+0x92>
 8000400:	4b5d      	ldr	r3, [pc, #372]	; (8000578 <.text_16>)
 8000402:	689d      	ldr	r5, [r3, #8]
 8000404:	681e      	ldr	r6, [r3, #0]
 8000406:	695f      	ldr	r7, [r3, #20]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	6119      	str	r1, [r3, #16]
 800040c:	6098      	str	r0, [r3, #8]
 800040e:	6899      	ldr	r1, [r3, #8]
 8000410:	2901      	cmp	r1, #1
 8000412:	d0fc      	beq.n	800040e <USBPD_CAD_Init+0x9e>
 8000414:	4959      	ldr	r1, [pc, #356]	; (800057c <.text_17>)
 8000416:	6019      	str	r1, [r3, #0]
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	4a59      	ldr	r2, [pc, #356]	; (8000580 <.text_18>)
 800041c:	6011      	str	r1, [r2, #0]
 800041e:	611e      	str	r6, [r3, #16]
 8000420:	615f      	str	r7, [r3, #20]
 8000422:	609d      	str	r5, [r3, #8]
 8000424:	6899      	ldr	r1, [r3, #8]
 8000426:	4308      	orrs	r0, r1
 8000428:	6098      	str	r0, [r3, #8]
 800042a:	9904      	ldr	r1, [sp, #16]
 800042c:	9800      	ldr	r0, [sp, #0]
 800042e:	6843      	ldr	r3, [r0, #4]
 8000430:	9a01      	ldr	r2, [sp, #4]
 8000432:	4668      	mov	r0, sp
 8000434:	7b00      	ldrb	r0, [r0, #12]
 8000436:	f00d f855 	bl	800d4e4 <CAD_Init>
 800043a:	0020      	movs	r0, r4
 800043c:	b005      	add	sp, #20
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000440 <USBPD_CAD_PortEnable>:
 8000440:	2803      	cmp	r0, #3
 8000442:	d203      	bcs.n	800044c <USBPD_CAD_PortEnable+0xc>
 8000444:	4a42      	ldr	r2, [pc, #264]	; (8000550 <.text_6>)
 8000446:	0080      	lsls	r0, r0, #2
 8000448:	5810      	ldr	r0, [r2, r0]
 800044a:	7201      	strb	r1, [r0, #8]
 800044c:	4770      	bx	lr

0800044e <USBPD_CAD_Process>:
 800044e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000450:	2400      	movs	r4, #0
 8000452:	4669      	mov	r1, sp
 8000454:	700c      	strb	r4, [r1, #0]
 8000456:	9401      	str	r4, [sp, #4]
 8000458:	2500      	movs	r5, #0
 800045a:	43ed      	mvns	r5, r5
 800045c:	4f49      	ldr	r7, [pc, #292]	; (8000584 <.text_19>)
 800045e:	483c      	ldr	r0, [pc, #240]	; (8000550 <.text_6>)
 8000460:	00a1      	lsls	r1, r4, #2
 8000462:	1846      	adds	r6, r0, r1
 8000464:	6830      	ldr	r0, [r6, #0]
 8000466:	2800      	cmp	r0, #0
 8000468:	d06c      	beq.n	8000544 <USBPD_CAD_Process+0xf6>
 800046a:	7a00      	ldrb	r0, [r0, #8]
 800046c:	2801      	cmp	r0, #1
 800046e:	d169      	bne.n	8000544 <USBPD_CAD_Process+0xf6>
 8000470:	aa01      	add	r2, sp, #4
 8000472:	4669      	mov	r1, sp
 8000474:	b2e0      	uxtb	r0, r4
 8000476:	f00d f9dd 	bl	800d834 <CAD_StateMachine>
 800047a:	42a8      	cmp	r0, r5
 800047c:	d800      	bhi.n	8000480 <USBPD_CAD_Process+0x32>
 800047e:	0005      	movs	r5, r0
 8000480:	4668      	mov	r0, sp
 8000482:	7800      	ldrb	r0, [r0, #0]
 8000484:	2801      	cmp	r0, #1
 8000486:	d004      	beq.n	8000492 <USBPD_CAD_Process+0x44>
 8000488:	2802      	cmp	r0, #2
 800048a:	d012      	beq.n	80004b2 <USBPD_CAD_Process+0x64>
 800048c:	2804      	cmp	r0, #4
 800048e:	d010      	beq.n	80004b2 <USBPD_CAD_Process+0x64>
 8000490:	e040      	b.n	8000514 <USBPD_CAD_Process+0xc6>
 8000492:	6830      	ldr	r0, [r6, #0]
 8000494:	6801      	ldr	r1, [r0, #0]
 8000496:	680a      	ldr	r2, [r1, #0]
 8000498:	4b3b      	ldr	r3, [pc, #236]	; (8000588 <.text_20>)
 800049a:	4013      	ands	r3, r2
 800049c:	600b      	str	r3, [r1, #0]
 800049e:	6801      	ldr	r1, [r0, #0]
 80004a0:	680a      	ldr	r2, [r1, #0]
 80004a2:	23c0      	movs	r3, #192	; 0xc0
 80004a4:	439a      	bics	r2, r3
 80004a6:	600a      	str	r2, [r1, #0]
 80004a8:	6800      	ldr	r0, [r0, #0]
 80004aa:	6801      	ldr	r1, [r0, #0]
 80004ac:	4039      	ands	r1, r7
 80004ae:	6001      	str	r1, [r0, #0]
 80004b0:	e034      	b.n	800051c <USBPD_CAD_Process+0xce>
 80004b2:	6830      	ldr	r0, [r6, #0]
 80004b4:	9901      	ldr	r1, [sp, #4]
 80004b6:	2901      	cmp	r1, #1
 80004b8:	6801      	ldr	r1, [r0, #0]
 80004ba:	680a      	ldr	r2, [r1, #0]
 80004bc:	d103      	bne.n	80004c6 <USBPD_CAD_Process+0x78>
 80004be:	403a      	ands	r2, r7
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	01db      	lsls	r3, r3, #7
 80004c4:	e002      	b.n	80004cc <USBPD_CAD_Process+0x7e>
 80004c6:	403a      	ands	r2, r7
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	019b      	lsls	r3, r3, #6
 80004cc:	4313      	orrs	r3, r2
 80004ce:	600b      	str	r3, [r1, #0]
 80004d0:	6801      	ldr	r1, [r0, #0]
 80004d2:	680b      	ldr	r3, [r1, #0]
 80004d4:	22c0      	movs	r2, #192	; 0xc0
 80004d6:	4393      	bics	r3, r2
 80004d8:	469c      	mov	ip, r3
 80004da:	9a01      	ldr	r2, [sp, #4]
 80004dc:	0193      	lsls	r3, r2, #6
 80004de:	22c0      	movs	r2, #192	; 0xc0
 80004e0:	401a      	ands	r2, r3
 80004e2:	4663      	mov	r3, ip
 80004e4:	431a      	orrs	r2, r3
 80004e6:	600a      	str	r2, [r1, #0]
 80004e8:	6801      	ldr	r1, [r0, #0]
 80004ea:	680a      	ldr	r2, [r1, #0]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	015b      	lsls	r3, r3, #5
 80004f0:	4313      	orrs	r3, r2
 80004f2:	600b      	str	r3, [r1, #0]
 80004f4:	6800      	ldr	r0, [r0, #0]
 80004f6:	6801      	ldr	r1, [r0, #0]
 80004f8:	074a      	lsls	r2, r1, #29
 80004fa:	0fd2      	lsrs	r2, r2, #31
 80004fc:	d103      	bne.n	8000506 <USBPD_CAD_Process+0xb8>
 80004fe:	2208      	movs	r2, #8
 8000500:	4391      	bics	r1, r2
 8000502:	6001      	str	r1, [r0, #0]
 8000504:	e002      	b.n	800050c <USBPD_CAD_Process+0xbe>
 8000506:	2208      	movs	r2, #8
 8000508:	430a      	orrs	r2, r1
 800050a:	6002      	str	r2, [r0, #0]
 800050c:	2168      	movs	r1, #104	; 0x68
 800050e:	b2e0      	uxtb	r0, r4
 8000510:	f000 f93e 	bl	8000790 <USBPD_PE_Notification>
 8000514:	4668      	mov	r0, sp
 8000516:	7800      	ldrb	r0, [r0, #0]
 8000518:	2800      	cmp	r0, #0
 800051a:	d013      	beq.n	8000544 <USBPD_CAD_Process+0xf6>
 800051c:	9a01      	ldr	r2, [sp, #4]
 800051e:	4668      	mov	r0, sp
 8000520:	7801      	ldrb	r1, [r0, #0]
 8000522:	b2e0      	uxtb	r0, r4
 8000524:	6833      	ldr	r3, [r6, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4798      	blx	r3
 800052c:	4668      	mov	r0, sp
 800052e:	7800      	ldrb	r0, [r0, #0]
 8000530:	2801      	cmp	r0, #1
 8000532:	d003      	beq.n	800053c <USBPD_CAD_Process+0xee>
 8000534:	4668      	mov	r0, sp
 8000536:	7800      	ldrb	r0, [r0, #0]
 8000538:	2803      	cmp	r0, #3
 800053a:	d103      	bne.n	8000544 <USBPD_CAD_Process+0xf6>
 800053c:	2169      	movs	r1, #105	; 0x69
 800053e:	b2e0      	uxtb	r0, r4
 8000540:	f000 f926 	bl	8000790 <USBPD_PE_Notification>
 8000544:	1c64      	adds	r4, r4, #1
 8000546:	2c03      	cmp	r4, #3
 8000548:	d389      	bcc.n	800045e <USBPD_CAD_Process+0x10>
 800054a:	0028      	movs	r0, r5
 800054c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000550 <.text_6>:
 8000550:	20000168 	.word	0x20000168

08000554 <.text_7>:
 8000554:	04c11db7 	.word	0x04c11db7

08000558 <.text_8>:
 8000558:	0000fff0 	.word	0x0000fff0

0800055c <.text_9>:
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <.text_10>:
 8000560:	0000c240 	.word	0x0000c240

08000564 <.text_11>:
 8000564:	0000c270 	.word	0x0000c270

08000568 <.text_12>:
 8000568:	e0042000 	.word	0xe0042000

0800056c <.text_13>:
 800056c:	5c001000 	.word	0x5c001000

08000570 <.text_14>:
 8000570:	00000483 	.word	0x00000483

08000574 <.text_15>:
 8000574:	58024c00 	.word	0x58024c00

08000578 <.text_16>:
 8000578:	40023000 	.word	0x40023000

0800057c <.text_17>:
 800057c:	f407a5c2 	.word	0xf407a5c2

08000580 <.text_18>:
 8000580:	20000174 	.word	0x20000174

08000584 <.text_19>:
 8000584:	ffff9fff 	.word	0xffff9fff

08000588 <.text_20>:
 8000588:	ffffefff 	.word	0xffffefff

0800058c <USBPD_CAD_AssertRd>:
 800058c:	b510      	push	{r4, lr}
 800058e:	0004      	movs	r4, r0
 8000590:	f00e fd38 	bl	800f004 <USBPDM1_DeAssertRp>
 8000594:	0020      	movs	r0, r4
 8000596:	f00e fd3f 	bl	800f018 <USBPDM1_AssertRd>
 800059a:	bd10      	pop	{r4, pc}

0800059c <USBPD_CAD_AssertRp>:
 800059c:	b510      	push	{r4, lr}
 800059e:	0004      	movs	r4, r0
 80005a0:	f00e fde0 	bl	800f164 <USBPDM1_DeAssertRd>
 80005a4:	0020      	movs	r0, r4
 80005a6:	f00e fc75 	bl	800ee94 <USBPDM1_AssertRp>
 80005aa:	bd10      	pop	{r4, pc}

080005ac <USBPD_CAD_EnterErrorRecovery>:
 80005ac:	b580      	push	{r7, lr}
 80005ae:	f00d f87b 	bl	800d6a8 <CAD_Enter_ErrorRecovery>
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <USBPD_CAD_SRC_SetRpResistor>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2404      	movs	r4, #4
 80005b8:	f00d f8e0 	bl	800d77c <CAD_Set_ResistorRp>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d100      	bne.n	80005c2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80005c0:	2400      	movs	r4, #0
 80005c2:	0020      	movs	r0, r4
 80005c4:	bd10      	pop	{r4, pc}

080005c6 <USBPD_CAD_SetRpResistor>:
 80005c6:	b580      	push	{r7, lr}
 80005c8:	f7ff fff4 	bl	80005b4 <USBPD_CAD_SRC_SetRpResistor>
 80005cc:	bd02      	pop	{r1, pc}

080005ce <USBPD_CAD_GetMemoryConsumption>:
 80005ce:	2024      	movs	r0, #36	; 0x24
 80005d0:	4770      	bx	lr
	...

080005d4 <USBPD_PE_Init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	000e      	movs	r6, r1
 80005d8:	0017      	movs	r7, r2
 80005da:	001c      	movs	r4, r3
 80005dc:	6871      	ldr	r1, [r6, #4]
 80005de:	070a      	lsls	r2, r1, #28
 80005e0:	0fd2      	lsrs	r2, r2, #31
 80005e2:	d002      	beq.n	80005ea <USBPD_PE_Init+0x16>
 80005e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d002      	beq.n	80005f0 <USBPD_PE_Init+0x1c>
 80005ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d101      	bne.n	80005f4 <USBPD_PE_Init+0x20>
 80005f0:	241b      	movs	r4, #27
 80005f2:	e04a      	b.n	800068a <USBPD_PE_Init+0xb6>
 80005f4:	4669      	mov	r1, sp
 80005f6:	7008      	strb	r0, [r1, #0]
 80005f8:	4668      	mov	r0, sp
 80005fa:	7800      	ldrb	r0, [r0, #0]
 80005fc:	2803      	cmp	r0, #3
 80005fe:	d301      	bcc.n	8000604 <USBPD_PE_Init+0x30>
 8000600:	2417      	movs	r4, #23
 8000602:	e042      	b.n	800068a <USBPD_PE_Init+0xb6>
 8000604:	2096      	movs	r0, #150	; 0x96
 8000606:	00c0      	lsls	r0, r0, #3
 8000608:	f019 fc8c 	bl	8019f24 <malloc>
 800060c:	0005      	movs	r5, r0
 800060e:	d101      	bne.n	8000614 <USBPD_PE_Init+0x40>
 8000610:	2416      	movs	r4, #22
 8000612:	e03a      	b.n	800068a <USBPD_PE_Init+0xb6>
 8000614:	2196      	movs	r1, #150	; 0x96
 8000616:	00c9      	lsls	r1, r1, #3
 8000618:	f019 fd93 	bl	801a142 <__aeabi_memclr>
 800061c:	487a      	ldr	r0, [pc, #488]	; (8000808 <.text_16>)
 800061e:	4669      	mov	r1, sp
 8000620:	7809      	ldrb	r1, [r1, #0]
 8000622:	0089      	lsls	r1, r1, #2
 8000624:	5045      	str	r5, [r0, r1]
 8000626:	602e      	str	r6, [r5, #0]
 8000628:	606f      	str	r7, [r5, #4]
 800062a:	4668      	mov	r0, sp
 800062c:	7800      	ldrb	r0, [r0, #0]
 800062e:	7428      	strb	r0, [r5, #16]
 8000630:	60ac      	str	r4, [r5, #8]
 8000632:	4876      	ldr	r0, [pc, #472]	; (800080c <.text_17>)
 8000634:	182b      	adds	r3, r5, r0
 8000636:	4876      	ldr	r0, [pc, #472]	; (8000810 <.text_18>)
 8000638:	182a      	adds	r2, r5, r0
 800063a:	0031      	movs	r1, r6
 800063c:	4668      	mov	r0, sp
 800063e:	7800      	ldrb	r0, [r0, #0]
 8000640:	f005 f9f2 	bl	8005a28 <USBPD_PRL_Init>
 8000644:	0004      	movs	r4, r0
 8000646:	d120      	bne.n	800068a <USBPD_PE_Init+0xb6>
 8000648:	6868      	ldr	r0, [r5, #4]
 800064a:	6801      	ldr	r1, [r0, #0]
 800064c:	2703      	movs	r7, #3
 800064e:	682a      	ldr	r2, [r5, #0]
 8000650:	6852      	ldr	r2, [r2, #4]
 8000652:	0753      	lsls	r3, r2, #29
 8000654:	0fdb      	lsrs	r3, r3, #31
 8000656:	d006      	beq.n	8000666 <USBPD_PE_Init+0x92>
 8000658:	2208      	movs	r2, #8
 800065a:	430a      	orrs	r2, r1
 800065c:	6002      	str	r2, [r0, #0]
 800065e:	6873      	ldr	r3, [r6, #4]
 8000660:	403b      	ands	r3, r7
 8000662:	2201      	movs	r2, #1
 8000664:	e005      	b.n	8000672 <USBPD_PE_Init+0x9e>
 8000666:	2208      	movs	r2, #8
 8000668:	4391      	bics	r1, r2
 800066a:	6001      	str	r1, [r0, #0]
 800066c:	6873      	ldr	r3, [r6, #4]
 800066e:	403b      	ands	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	4611      	mov	r1, r2
 8000674:	4668      	mov	r0, sp
 8000676:	7800      	ldrb	r0, [r0, #0]
 8000678:	f005 fa11 	bl	8005a9e <USBPD_PRL_SetHeader>
 800067c:	6870      	ldr	r0, [r6, #4]
 800067e:	4007      	ands	r7, r0
 8000680:	0039      	movs	r1, r7
 8000682:	4668      	mov	r0, sp
 8000684:	7800      	ldrb	r0, [r0, #0]
 8000686:	f005 fa48 	bl	8005b1a <USBPD_PRL_CBL_SetHeaderSpecification>
 800068a:	0020      	movs	r0, r4
 800068c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800068e <USBPD_PE_TimerCounter>:
 800068e:	495e      	ldr	r1, [pc, #376]	; (8000808 <.text_16>)
 8000690:	0080      	lsls	r0, r0, #2
 8000692:	5808      	ldr	r0, [r1, r0]
 8000694:	49b4      	ldr	r1, [pc, #720]	; (8000968 <.text_20>)
 8000696:	084a      	lsrs	r2, r1, #1
 8000698:	8bc3      	ldrh	r3, [r0, #30]
 800069a:	4213      	tst	r3, r2
 800069c:	d002      	beq.n	80006a4 <USBPD_PE_TimerCounter+0x16>
 800069e:	8bc3      	ldrh	r3, [r0, #30]
 80006a0:	185b      	adds	r3, r3, r1
 80006a2:	83c3      	strh	r3, [r0, #30]
 80006a4:	8c03      	ldrh	r3, [r0, #32]
 80006a6:	4213      	tst	r3, r2
 80006a8:	d002      	beq.n	80006b0 <USBPD_PE_TimerCounter+0x22>
 80006aa:	8c03      	ldrh	r3, [r0, #32]
 80006ac:	185b      	adds	r3, r3, r1
 80006ae:	8403      	strh	r3, [r0, #32]
 80006b0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80006b2:	4213      	tst	r3, r2
 80006b4:	d002      	beq.n	80006bc <USBPD_PE_TimerCounter+0x2e>
 80006b6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80006b8:	185b      	adds	r3, r3, r1
 80006ba:	84c3      	strh	r3, [r0, #38]	; 0x26
 80006bc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80006be:	4213      	tst	r3, r2
 80006c0:	d002      	beq.n	80006c8 <USBPD_PE_TimerCounter+0x3a>
 80006c2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80006c4:	185b      	adds	r3, r3, r1
 80006c6:	8443      	strh	r3, [r0, #34]	; 0x22
 80006c8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80006ca:	4213      	tst	r3, r2
 80006cc:	d002      	beq.n	80006d4 <USBPD_PE_TimerCounter+0x46>
 80006ce:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80006d0:	1851      	adds	r1, r2, r1
 80006d2:	8481      	strh	r1, [r0, #36]	; 0x24
 80006d4:	4770      	bx	lr

080006d6 <USBPD_PE_TimerCounteUpdate>:
 80006d6:	b570      	push	{r4, r5, r6, lr}
 80006d8:	000e      	movs	r6, r1
 80006da:	494b      	ldr	r1, [pc, #300]	; (8000808 <.text_16>)
 80006dc:	0080      	lsls	r0, r0, #2
 80006de:	580c      	ldr	r4, [r1, r0]
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0209      	lsls	r1, r1, #8
 80006e4:	428e      	cmp	r6, r1
 80006e6:	da28      	bge.n	800073a <USBPD_PE_TimerCounteUpdate+0x64>
 80006e8:	1e4d      	subs	r5, r1, #1
 80006ea:	8be0      	ldrh	r0, [r4, #30]
 80006ec:	4228      	tst	r0, r5
 80006ee:	d004      	beq.n	80006fa <USBPD_PE_TimerCounteUpdate+0x24>
 80006f0:	0031      	movs	r1, r6
 80006f2:	8be0      	ldrh	r0, [r4, #30]
 80006f4:	f000 ffcb 	bl	800168e <PE_UpdateTimer>
 80006f8:	83e0      	strh	r0, [r4, #30]
 80006fa:	8c20      	ldrh	r0, [r4, #32]
 80006fc:	4228      	tst	r0, r5
 80006fe:	d004      	beq.n	800070a <USBPD_PE_TimerCounteUpdate+0x34>
 8000700:	0031      	movs	r1, r6
 8000702:	8c20      	ldrh	r0, [r4, #32]
 8000704:	f000 ffc3 	bl	800168e <PE_UpdateTimer>
 8000708:	8420      	strh	r0, [r4, #32]
 800070a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800070c:	4228      	tst	r0, r5
 800070e:	d004      	beq.n	800071a <USBPD_PE_TimerCounteUpdate+0x44>
 8000710:	0031      	movs	r1, r6
 8000712:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000714:	f000 ffbb 	bl	800168e <PE_UpdateTimer>
 8000718:	84e0      	strh	r0, [r4, #38]	; 0x26
 800071a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800071c:	4228      	tst	r0, r5
 800071e:	d004      	beq.n	800072a <USBPD_PE_TimerCounteUpdate+0x54>
 8000720:	0031      	movs	r1, r6
 8000722:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000724:	f000 ffb3 	bl	800168e <PE_UpdateTimer>
 8000728:	8460      	strh	r0, [r4, #34]	; 0x22
 800072a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800072c:	4228      	tst	r0, r5
 800072e:	d004      	beq.n	800073a <USBPD_PE_TimerCounteUpdate+0x64>
 8000730:	0031      	movs	r1, r6
 8000732:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000734:	f000 ffab 	bl	800168e <PE_UpdateTimer>
 8000738:	84a0      	strh	r0, [r4, #36]	; 0x24
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <USBPD_PE_IsCableConnected>:
 800073c:	b510      	push	{r4, lr}
 800073e:	4a32      	ldr	r2, [pc, #200]	; (8000808 <.text_16>)
 8000740:	0080      	lsls	r0, r0, #2
 8000742:	5810      	ldr	r0, [r2, r0]
 8000744:	6842      	ldr	r2, [r0, #4]
 8000746:	6813      	ldr	r3, [r2, #0]
 8000748:	4cb2      	ldr	r4, [pc, #712]	; (8000a14 <.text_22>)
 800074a:	401c      	ands	r4, r3
 800074c:	0309      	lsls	r1, r1, #12
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	015b      	lsls	r3, r3, #5
 8000752:	4019      	ands	r1, r3
 8000754:	4321      	orrs	r1, r4
 8000756:	6011      	str	r1, [r2, #0]
 8000758:	2148      	movs	r1, #72	; 0x48
 800075a:	7441      	strb	r1, [r0, #17]
 800075c:	bd10      	pop	{r4, pc}

0800075e <USBPD_PE_StateMachine_Reset>:
 800075e:	2148      	movs	r1, #72	; 0x48
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <.text_16>)
 8000762:	0080      	lsls	r0, r0, #2
 8000764:	5810      	ldr	r0, [r2, r0]
 8000766:	7441      	strb	r1, [r0, #17]
 8000768:	4770      	bx	lr

0800076a <USBPD_PE_StateMachine_Stop>:
 800076a:	b580      	push	{r7, lr}
 800076c:	f005 fc9a 	bl	80060a4 <USBPD_PRL_Stop>
 8000770:	bd01      	pop	{r0, pc}

08000772 <USBPD_PE_StateMachine_DRP>:
 8000772:	b580      	push	{r7, lr}
 8000774:	4924      	ldr	r1, [pc, #144]	; (8000808 <.text_16>)
 8000776:	0082      	lsls	r2, r0, #2
 8000778:	5889      	ldr	r1, [r1, r2]
 800077a:	6849      	ldr	r1, [r1, #4]
 800077c:	6809      	ldr	r1, [r1, #0]
 800077e:	074a      	lsls	r2, r1, #29
 8000780:	0fd2      	lsrs	r2, r2, #31
 8000782:	d002      	beq.n	800078a <USBPD_PE_StateMachine_DRP+0x18>
 8000784:	f002 fbba 	bl	8002efc <USBPD_PE_StateMachine_SRC>
 8000788:	bd02      	pop	{r1, pc}
 800078a:	f001 fcd3 	bl	8002134 <USBPD_PE_StateMachine_SNK>
 800078e:	bd02      	pop	{r1, pc}

08000790 <USBPD_PE_Notification>:
 8000790:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000792:	0004      	movs	r4, r0
 8000794:	2803      	cmp	r0, #3
 8000796:	d211      	bcs.n	80007bc <USBPD_PE_Notification+0x2c>
 8000798:	000d      	movs	r5, r1
 800079a:	2000      	movs	r0, #0
 800079c:	9000      	str	r0, [sp, #0]
 800079e:	2300      	movs	r3, #0
 80007a0:	002a      	movs	r2, r5
 80007a2:	0021      	movs	r1, r4
 80007a4:	2009      	movs	r0, #9
 80007a6:	4eb2      	ldr	r6, [pc, #712]	; (8000a70 <.text_24>)
 80007a8:	6836      	ldr	r6, [r6, #0]
 80007aa:	47b0      	blx	r6
 80007ac:	0029      	movs	r1, r5
 80007ae:	0020      	movs	r0, r4
 80007b0:	4ab0      	ldr	r2, [pc, #704]	; (8000a74 <.text_25>)
 80007b2:	00a3      	lsls	r3, r4, #2
 80007b4:	58d2      	ldr	r2, [r2, r3]
 80007b6:	6892      	ldr	r2, [r2, #8]
 80007b8:	68d2      	ldr	r2, [r2, #12]
 80007ba:	4790      	blx	r2
 80007bc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080007be <USBPD_PE_InitVDM_Callback>:
 80007be:	4aad      	ldr	r2, [pc, #692]	; (8000a74 <.text_25>)
 80007c0:	0080      	lsls	r0, r0, #2
 80007c2:	5810      	ldr	r0, [r2, r0]
 80007c4:	60c1      	str	r1, [r0, #12]
 80007c6:	4770      	bx	lr

080007c8 <USBPD_PE_Request_HardReset>:
 80007c8:	b580      	push	{r7, lr}
 80007ca:	49aa      	ldr	r1, [pc, #680]	; (8000a74 <.text_25>)
 80007cc:	0082      	lsls	r2, r0, #2
 80007ce:	5889      	ldr	r1, [r1, r2]
 80007d0:	220f      	movs	r2, #15
 80007d2:	2332      	movs	r3, #50	; 0x32
 80007d4:	54ca      	strb	r2, [r1, r3]
 80007d6:	6889      	ldr	r1, [r1, #8]
 80007d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80007da:	4788      	blx	r1
 80007dc:	2000      	movs	r0, #0
 80007de:	bd02      	pop	{r1, pc}

080007e0 <USBPD_PE_Request_CableReset>:
 80007e0:	b580      	push	{r7, lr}
 80007e2:	4909      	ldr	r1, [pc, #36]	; (8000808 <.text_16>)
 80007e4:	0082      	lsls	r2, r0, #2
 80007e6:	5889      	ldr	r1, [r1, r2]
 80007e8:	684a      	ldr	r2, [r1, #4]
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	4ba2      	ldr	r3, [pc, #648]	; (8000a78 <.text_26>)
 80007ee:	4013      	ands	r3, r2
 80007f0:	4aa2      	ldr	r2, [pc, #648]	; (8000a7c <.text_27>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d105      	bne.n	8000802 <USBPD_PE_Request_CableReset+0x22>
 80007f6:	2299      	movs	r2, #153	; 0x99
 80007f8:	2332      	movs	r3, #50	; 0x32
 80007fa:	54ca      	strb	r2, [r1, r3]
 80007fc:	6889      	ldr	r1, [r1, #8]
 80007fe:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000800:	4788      	blx	r1
 8000802:	2010      	movs	r0, #16
 8000804:	bd02      	pop	{r1, pc}
	...

08000808 <.text_16>:
 8000808:	20000178 	.word	0x20000178

0800080c <.text_17>:
 800080c:	0000048e 	.word	0x0000048e

08000810 <.text_18>:
 8000810:	00000281 	.word	0x00000281

08000814 <USBPD_PE_Request_CtrlMessage>:
 8000814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000816:	b096      	sub	sp, #88	; 0x58
 8000818:	4896      	ldr	r0, [pc, #600]	; (8000a74 <.text_25>)
 800081a:	a916      	add	r1, sp, #88	; 0x58
 800081c:	7809      	ldrb	r1, [r1, #0]
 800081e:	0089      	lsls	r1, r1, #2
 8000820:	5840      	ldr	r0, [r0, r1]
 8000822:	9001      	str	r0, [sp, #4]
 8000824:	2400      	movs	r4, #0
 8000826:	a802      	add	r0, sp, #8
 8000828:	4995      	ldr	r1, [pc, #596]	; (8000a80 <.text_28>)
 800082a:	224c      	movs	r2, #76	; 0x4c
 800082c:	f019 fc7e 	bl	801a12c <__aeabi_memcpy>
 8000830:	2303      	movs	r3, #3
 8000832:	9801      	ldr	r0, [sp, #4]
 8000834:	2132      	movs	r1, #50	; 0x32
 8000836:	5c40      	ldrb	r0, [r0, r1]
 8000838:	2800      	cmp	r0, #0
 800083a:	d105      	bne.n	8000848 <USBPD_PE_Request_CtrlMessage+0x34>
 800083c:	9801      	ldr	r0, [sp, #4]
 800083e:	6840      	ldr	r0, [r0, #4]
 8000840:	6800      	ldr	r0, [r0, #0]
 8000842:	04c1      	lsls	r1, r0, #19
 8000844:	0fc9      	lsrs	r1, r1, #31
 8000846:	d101      	bne.n	800084c <USBPD_PE_Request_CtrlMessage+0x38>
 8000848:	2403      	movs	r4, #3
 800084a:	e089      	b.n	8000960 <USBPD_PE_Request_CtrlMessage+0x14c>
 800084c:	9901      	ldr	r1, [sp, #4]
 800084e:	6809      	ldr	r1, [r1, #0]
 8000850:	684a      	ldr	r2, [r1, #4]
 8000852:	0712      	lsls	r2, r2, #28
 8000854:	0fd5      	lsrs	r5, r2, #31
 8000856:	466a      	mov	r2, sp
 8000858:	7055      	strb	r5, [r2, #1]
 800085a:	2201      	movs	r2, #1
 800085c:	0885      	lsrs	r5, r0, #2
 800085e:	4015      	ands	r5, r2
 8000860:	d103      	bne.n	800086a <USBPD_PE_Request_CtrlMessage+0x56>
 8000862:	2502      	movs	r5, #2
 8000864:	466f      	mov	r7, sp
 8000866:	703c      	strb	r4, [r7, #0]
 8000868:	e003      	b.n	8000872 <USBPD_PE_Request_CtrlMessage+0x5e>
 800086a:	2500      	movs	r5, #0
 800086c:	2604      	movs	r6, #4
 800086e:	466f      	mov	r7, sp
 8000870:	703e      	strb	r6, [r7, #0]
 8000872:	0546      	lsls	r6, r0, #21
 8000874:	0f76      	lsrs	r6, r6, #29
 8000876:	2e03      	cmp	r6, #3
 8000878:	d101      	bne.n	800087e <USBPD_PE_Request_CtrlMessage+0x6a>
 800087a:	2608      	movs	r6, #8
 800087c:	e000      	b.n	8000880 <USBPD_PE_Request_CtrlMessage+0x6c>
 800087e:	2600      	movs	r6, #0
 8000880:	4018      	ands	r0, r3
 8000882:	2802      	cmp	r0, #2
 8000884:	d101      	bne.n	800088a <USBPD_PE_Request_CtrlMessage+0x76>
 8000886:	2040      	movs	r0, #64	; 0x40
 8000888:	e000      	b.n	800088c <USBPD_PE_Request_CtrlMessage+0x78>
 800088a:	2000      	movs	r0, #0
 800088c:	787f      	ldrb	r7, [r7, #1]
 800088e:	433d      	orrs	r5, r7
 8000890:	466f      	mov	r7, sp
 8000892:	783f      	ldrb	r7, [r7, #0]
 8000894:	432f      	orrs	r7, r5
 8000896:	433e      	orrs	r6, r7
 8000898:	4330      	orrs	r0, r6
 800089a:	4003      	ands	r3, r0
 800089c:	d002      	beq.n	80008a4 <USBPD_PE_Request_CtrlMessage+0x90>
 800089e:	0003      	movs	r3, r0
 80008a0:	2010      	movs	r0, #16
 80008a2:	4318      	orrs	r0, r3
 80008a4:	2505      	movs	r5, #5
 80008a6:	4228      	tst	r0, r5
 80008a8:	d002      	beq.n	80008b0 <USBPD_PE_Request_CtrlMessage+0x9c>
 80008aa:	0003      	movs	r3, r0
 80008ac:	2020      	movs	r0, #32
 80008ae:	4318      	orrs	r0, r3
 80008b0:	ab17      	add	r3, sp, #92	; 0x5c
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	005e      	lsls	r6, r3, #1
 80008b6:	18f3      	adds	r3, r6, r3
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	ab02      	add	r3, sp, #8
 80008bc:	9e00      	ldr	r6, [sp, #0]
 80008be:	5d9e      	ldrb	r6, [r3, r6]
 80008c0:	4030      	ands	r0, r6
 80008c2:	42b0      	cmp	r0, r6
 80008c4:	d11f      	bne.n	8000906 <USBPD_PE_Request_CtrlMessage+0xf2>
 80008c6:	9e01      	ldr	r6, [sp, #4]
 80008c8:	2733      	movs	r7, #51	; 0x33
 80008ca:	55f4      	strb	r4, [r6, r7]
 80008cc:	9801      	ldr	r0, [sp, #4]
 80008ce:	4eb2      	ldr	r6, [pc, #712]	; (8000b98 <.text_30>)
 80008d0:	1980      	adds	r0, r0, r6
 80008d2:	ae17      	add	r6, sp, #92	; 0x5c
 80008d4:	7836      	ldrb	r6, [r6, #0]
 80008d6:	2e05      	cmp	r6, #5
 80008d8:	d031      	beq.n	800093e <USBPD_PE_Request_CtrlMessage+0x12a>
 80008da:	2e0b      	cmp	r6, #11
 80008dc:	d00e      	beq.n	80008fc <USBPD_PE_Request_CtrlMessage+0xe8>
 80008de:	2e0d      	cmp	r6, #13
 80008e0:	d028      	beq.n	8000934 <USBPD_PE_Request_CtrlMessage+0x120>
 80008e2:	2e11      	cmp	r6, #17
 80008e4:	d011      	beq.n	800090a <USBPD_PE_Request_CtrlMessage+0xf6>
 80008e6:	2e12      	cmp	r6, #18
 80008e8:	d013      	beq.n	8000912 <USBPD_PE_Request_CtrlMessage+0xfe>
 80008ea:	2e14      	cmp	r6, #20
 80008ec:	d013      	beq.n	8000916 <USBPD_PE_Request_CtrlMessage+0x102>
 80008ee:	2e15      	cmp	r6, #21
 80008f0:	d017      	beq.n	8000922 <USBPD_PE_Request_CtrlMessage+0x10e>
 80008f2:	2e16      	cmp	r6, #22
 80008f4:	d00b      	beq.n	800090e <USBPD_PE_Request_CtrlMessage+0xfa>
 80008f6:	2e18      	cmp	r6, #24
 80008f8:	d01c      	beq.n	8000934 <USBPD_PE_Request_CtrlMessage+0x120>
 80008fa:	e021      	b.n	8000940 <USBPD_PE_Request_CtrlMessage+0x12c>
 80008fc:	9901      	ldr	r1, [sp, #4]
 80008fe:	6889      	ldr	r1, [r1, #8]
 8000900:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000902:	2900      	cmp	r1, #0
 8000904:	d11c      	bne.n	8000940 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000906:	2402      	movs	r4, #2
 8000908:	e02a      	b.n	8000960 <USBPD_PE_Request_CtrlMessage+0x14c>
 800090a:	2111      	movs	r1, #17
 800090c:	e010      	b.n	8000930 <USBPD_PE_Request_CtrlMessage+0x11c>
 800090e:	2116      	movs	r1, #22
 8000910:	e00e      	b.n	8000930 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000912:	2112      	movs	r1, #18
 8000914:	e00c      	b.n	8000930 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000916:	8909      	ldrh	r1, [r1, #8]
 8000918:	0889      	lsrs	r1, r1, #2
 800091a:	4211      	tst	r1, r2
 800091c:	d110      	bne.n	8000940 <USBPD_PE_Request_CtrlMessage+0x12c>
 800091e:	2410      	movs	r4, #16
 8000920:	e01e      	b.n	8000960 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000922:	8909      	ldrh	r1, [r1, #8]
 8000924:	09c9      	lsrs	r1, r1, #7
 8000926:	4211      	tst	r1, r2
 8000928:	d101      	bne.n	800092e <USBPD_PE_Request_CtrlMessage+0x11a>
 800092a:	2010      	movs	r0, #16
 800092c:	e019      	b.n	8000962 <USBPD_PE_Request_CtrlMessage+0x14e>
 800092e:	2115      	movs	r1, #21
 8000930:	7001      	strb	r1, [r0, #0]
 8000932:	e005      	b.n	8000940 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000934:	a918      	add	r1, sp, #96	; 0x60
 8000936:	7809      	ldrb	r1, [r1, #0]
 8000938:	9a01      	ldr	r2, [sp, #4]
 800093a:	55d1      	strb	r1, [r2, r7]
 800093c:	e000      	b.n	8000940 <USBPD_PE_Request_CtrlMessage+0x12c>
 800093e:	7005      	strb	r5, [r0, #0]
 8000940:	9900      	ldr	r1, [sp, #0]
 8000942:	1859      	adds	r1, r3, r1
 8000944:	7849      	ldrb	r1, [r1, #1]
 8000946:	7041      	strb	r1, [r0, #1]
 8000948:	9800      	ldr	r0, [sp, #0]
 800094a:	1818      	adds	r0, r3, r0
 800094c:	7880      	ldrb	r0, [r0, #2]
 800094e:	9901      	ldr	r1, [sp, #4]
 8000950:	2232      	movs	r2, #50	; 0x32
 8000952:	5488      	strb	r0, [r1, r2]
 8000954:	a816      	add	r0, sp, #88	; 0x58
 8000956:	7800      	ldrb	r0, [r0, #0]
 8000958:	9901      	ldr	r1, [sp, #4]
 800095a:	6889      	ldr	r1, [r1, #8]
 800095c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800095e:	4788      	blx	r1
 8000960:	0020      	movs	r0, r4
 8000962:	b019      	add	sp, #100	; 0x64
 8000964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000968 <.text_20>:
 8000968:	0000ffff 	.word	0x0000ffff

0800096c <USBPD_PE_Request_DataMessage>:
 800096c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	000b      	movs	r3, r1
 8000972:	0017      	movs	r7, r2
 8000974:	483f      	ldr	r0, [pc, #252]	; (8000a74 <.text_25>)
 8000976:	4669      	mov	r1, sp
 8000978:	7a09      	ldrb	r1, [r1, #8]
 800097a:	0089      	lsls	r1, r1, #2
 800097c:	5841      	ldr	r1, [r0, r1]
 800097e:	2402      	movs	r4, #2
 8000980:	2032      	movs	r0, #50	; 0x32
 8000982:	5c08      	ldrb	r0, [r1, r0]
 8000984:	2800      	cmp	r0, #0
 8000986:	d105      	bne.n	8000994 <USBPD_PE_Request_DataMessage+0x28>
 8000988:	2001      	movs	r0, #1
 800098a:	684a      	ldr	r2, [r1, #4]
 800098c:	6812      	ldr	r2, [r2, #0]
 800098e:	0b12      	lsrs	r2, r2, #12
 8000990:	4002      	ands	r2, r0
 8000992:	d101      	bne.n	8000998 <USBPD_PE_Request_DataMessage+0x2c>
 8000994:	2403      	movs	r4, #3
 8000996:	e021      	b.n	80009dc <USBPD_PE_Request_DataMessage+0x70>
 8000998:	466a      	mov	r2, sp
 800099a:	7013      	strb	r3, [r2, #0]
 800099c:	2200      	movs	r2, #0
 800099e:	2533      	movs	r5, #51	; 0x33
 80009a0:	554a      	strb	r2, [r1, r5]
 80009a2:	000b      	movs	r3, r1
 80009a4:	3332      	adds	r3, #50	; 0x32
 80009a6:	4dc0      	ldr	r5, [pc, #768]	; (8000ca8 <.text_36>)
 80009a8:	4ec0      	ldr	r6, [pc, #768]	; (8000cac <.text_37>)
 80009aa:	9701      	str	r7, [sp, #4]
 80009ac:	466f      	mov	r7, sp
 80009ae:	783f      	ldrb	r7, [r7, #0]
 80009b0:	2f01      	cmp	r7, #1
 80009b2:	d004      	beq.n	80009be <USBPD_PE_Request_DataMessage+0x52>
 80009b4:	2f06      	cmp	r7, #6
 80009b6:	d013      	beq.n	80009e0 <USBPD_PE_Request_DataMessage+0x74>
 80009b8:	2f07      	cmp	r7, #7
 80009ba:	d01b      	beq.n	80009f4 <USBPD_PE_Request_DataMessage+0x88>
 80009bc:	e027      	b.n	8000a0e <USBPD_PE_Request_DataMessage+0xa2>
 80009be:	684d      	ldr	r5, [r1, #4]
 80009c0:	682d      	ldr	r5, [r5, #0]
 80009c2:	08ad      	lsrs	r5, r5, #2
 80009c4:	4005      	ands	r5, r0
 80009c6:	d009      	beq.n	80009dc <USBPD_PE_Request_DataMessage+0x70>
 80009c8:	4cc1      	ldr	r4, [pc, #772]	; (8000cd0 <.text_39>)
 80009ca:	5508      	strb	r0, [r1, r4]
 80009cc:	2007      	movs	r0, #7
 80009ce:	7018      	strb	r0, [r3, #0]
 80009d0:	2400      	movs	r4, #0
 80009d2:	4668      	mov	r0, sp
 80009d4:	7a00      	ldrb	r0, [r0, #8]
 80009d6:	6889      	ldr	r1, [r1, #8]
 80009d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80009da:	4788      	blx	r1
 80009dc:	0020      	movs	r0, r4
 80009de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80009e0:	6848      	ldr	r0, [r1, #4]
 80009e2:	6800      	ldr	r0, [r0, #0]
 80009e4:	4006      	ands	r6, r0
 80009e6:	42ae      	cmp	r6, r5
 80009e8:	d1f8      	bne.n	80009dc <USBPD_PE_Request_DataMessage+0x70>
 80009ea:	9801      	ldr	r0, [sp, #4]
 80009ec:	6800      	ldr	r0, [r0, #0]
 80009ee:	6288      	str	r0, [r1, #40]	; 0x28
 80009f0:	202b      	movs	r0, #43	; 0x2b
 80009f2:	e7ec      	b.n	80009ce <USBPD_PE_Request_DataMessage+0x62>
 80009f4:	6848      	ldr	r0, [r1, #4]
 80009f6:	6800      	ldr	r0, [r0, #0]
 80009f8:	4006      	ands	r6, r0
 80009fa:	42ae      	cmp	r6, r5
 80009fc:	d1ee      	bne.n	80009dc <USBPD_PE_Request_DataMessage+0x70>
 80009fe:	9801      	ldr	r0, [sp, #4]
 8000a00:	6800      	ldr	r0, [r0, #0]
 8000a02:	6288      	str	r0, [r1, #40]	; 0x28
 8000a04:	205d      	movs	r0, #93	; 0x5d
 8000a06:	4cb2      	ldr	r4, [pc, #712]	; (8000cd0 <.text_39>)
 8000a08:	5508      	strb	r0, [r1, r4]
 8000a0a:	2062      	movs	r0, #98	; 0x62
 8000a0c:	e7df      	b.n	80009ce <USBPD_PE_Request_DataMessage+0x62>
 8000a0e:	2410      	movs	r4, #16
 8000a10:	e7e4      	b.n	80009dc <USBPD_PE_Request_DataMessage+0x70>
	...

08000a14 <.text_22>:
 8000a14:	ffffefff 	.word	0xffffefff

08000a18 <USBPD_PE_Send_Request>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	000b      	movs	r3, r1
 8000a1c:	4915      	ldr	r1, [pc, #84]	; (8000a74 <.text_25>)
 8000a1e:	0084      	lsls	r4, r0, #2
 8000a20:	590d      	ldr	r5, [r1, r4]
 8000a22:	2102      	movs	r1, #2
 8000a24:	2432      	movs	r4, #50	; 0x32
 8000a26:	5d2c      	ldrb	r4, [r5, r4]
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d104      	bne.n	8000a36 <USBPD_PE_Send_Request+0x1e>
 8000a2c:	686c      	ldr	r4, [r5, #4]
 8000a2e:	6824      	ldr	r4, [r4, #0]
 8000a30:	04e6      	lsls	r6, r4, #19
 8000a32:	0ff6      	lsrs	r6, r6, #31
 8000a34:	d101      	bne.n	8000a3a <USBPD_PE_Send_Request+0x22>
 8000a36:	2103      	movs	r1, #3
 8000a38:	e017      	b.n	8000a6a <USBPD_PE_Send_Request+0x52>
 8000a3a:	4ea6      	ldr	r6, [pc, #664]	; (8000cd4 <.text_40>)
 8000a3c:	4026      	ands	r6, r4
 8000a3e:	24c0      	movs	r4, #192	; 0xc0
 8000a40:	00a4      	lsls	r4, r4, #2
 8000a42:	42a6      	cmp	r6, r4
 8000a44:	d111      	bne.n	8000a6a <USBPD_PE_Send_Request+0x52>
 8000a46:	2145      	movs	r1, #69	; 0x45
 8000a48:	2432      	movs	r4, #50	; 0x32
 8000a4a:	5529      	strb	r1, [r5, r4]
 8000a4c:	61ab      	str	r3, [r5, #24]
 8000a4e:	6969      	ldr	r1, [r5, #20]
 8000a50:	2318      	movs	r3, #24
 8000a52:	4399      	bics	r1, r3
 8000a54:	00d2      	lsls	r2, r2, #3
 8000a56:	4013      	ands	r3, r2
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	616b      	str	r3, [r5, #20]
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	2233      	movs	r2, #51	; 0x33
 8000a60:	54ac      	strb	r4, [r5, r2]
 8000a62:	68a9      	ldr	r1, [r5, #8]
 8000a64:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000a66:	4788      	blx	r1
 8000a68:	2100      	movs	r1, #0
 8000a6a:	0008      	movs	r0, r1
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a70 <.text_24>:
 8000a70:	20000000 	.word	0x20000000

08000a74 <.text_25>:
 8000a74:	20000178 	.word	0x20000178

08000a78 <.text_26>:
 8000a78:	00008708 	.word	0x00008708

08000a7c <.text_27>:
 8000a7c:	00008308 	.word	0x00008308

08000a80 <.text_28>:
 8000a80:	0801a2b0 	.word	0x0801a2b0

08000a84 <USBPD_PE_SendExtendedMessage>:
 8000a84:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	001f      	movs	r7, r3
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	48b5      	ldr	r0, [pc, #724]	; (8000d64 <.text_43>)
 8000a90:	4669      	mov	r1, sp
 8000a92:	7b09      	ldrb	r1, [r1, #12]
 8000a94:	0089      	lsls	r1, r1, #2
 8000a96:	5846      	ldr	r6, [r0, r1]
 8000a98:	2003      	movs	r0, #3
 8000a9a:	2132      	movs	r1, #50	; 0x32
 8000a9c:	5c71      	ldrb	r1, [r6, r1]
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d107      	bne.n	8000ab2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000aa2:	6871      	ldr	r1, [r6, #4]
 8000aa4:	6809      	ldr	r1, [r1, #0]
 8000aa6:	9100      	str	r1, [sp, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	9b00      	ldr	r3, [sp, #0]
 8000aac:	0b1b      	lsrs	r3, r3, #12
 8000aae:	400b      	ands	r3, r1
 8000ab0:	d101      	bne.n	8000ab6 <USBPD_PE_SendExtendedMessage+0x32>
 8000ab2:	2503      	movs	r5, #3
 8000ab4:	e06c      	b.n	8000b90 <USBPD_PE_SendExtendedMessage+0x10c>
 8000ab6:	9b00      	ldr	r3, [sp, #0]
 8000ab8:	055b      	lsls	r3, r3, #21
 8000aba:	0f5b      	lsrs	r3, r3, #29
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d10b      	bne.n	8000ad8 <USBPD_PE_SendExtendedMessage+0x54>
 8000ac0:	9b00      	ldr	r3, [sp, #0]
 8000ac2:	4018      	ands	r0, r3
 8000ac4:	2801      	cmp	r0, #1
 8000ac6:	d801      	bhi.n	8000acc <USBPD_PE_SendExtendedMessage+0x48>
 8000ac8:	2501      	movs	r5, #1
 8000aca:	e061      	b.n	8000b90 <USBPD_PE_SendExtendedMessage+0x10c>
 8000acc:	4668      	mov	r0, sp
 8000ace:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000ad0:	21ff      	movs	r1, #255	; 0xff
 8000ad2:	1d89      	adds	r1, r1, #6
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	d301      	bcc.n	8000adc <USBPD_PE_SendExtendedMessage+0x58>
 8000ad8:	2502      	movs	r5, #2
 8000ada:	e059      	b.n	8000b90 <USBPD_PE_SendExtendedMessage+0x10c>
 8000adc:	4668      	mov	r0, sp
 8000ade:	7002      	strb	r2, [r0, #0]
 8000ae0:	6970      	ldr	r0, [r6, #20]
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	4388      	bics	r0, r1
 8000ae6:	6170      	str	r0, [r6, #20]
 8000ae8:	2020      	movs	r0, #32
 8000aea:	4669      	mov	r1, sp
 8000aec:	7809      	ldrb	r1, [r1, #0]
 8000aee:	2903      	cmp	r1, #3
 8000af0:	d008      	beq.n	8000b04 <USBPD_PE_SendExtendedMessage+0x80>
 8000af2:	2904      	cmp	r1, #4
 8000af4:	d020      	beq.n	8000b38 <USBPD_PE_SendExtendedMessage+0xb4>
 8000af6:	2906      	cmp	r1, #6
 8000af8:	d020      	beq.n	8000b3c <USBPD_PE_SendExtendedMessage+0xb8>
 8000afa:	2908      	cmp	r1, #8
 8000afc:	d020      	beq.n	8000b40 <USBPD_PE_SendExtendedMessage+0xbc>
 8000afe:	290a      	cmp	r1, #10
 8000b00:	d023      	beq.n	8000b4a <USBPD_PE_SendExtendedMessage+0xc6>
 8000b02:	e024      	b.n	8000b4e <USBPD_PE_SendExtendedMessage+0xca>
 8000b04:	210c      	movs	r1, #12
 8000b06:	4aac      	ldr	r2, [pc, #688]	; (8000db8 <.text_45>)
 8000b08:	18b2      	adds	r2, r6, r2
 8000b0a:	7091      	strb	r1, [r2, #2]
 8000b0c:	6971      	ldr	r1, [r6, #20]
 8000b0e:	4308      	orrs	r0, r1
 8000b10:	6170      	str	r0, [r6, #20]
 8000b12:	4668      	mov	r0, sp
 8000b14:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d027      	beq.n	8000b6a <USBPD_PE_SendExtendedMessage+0xe6>
 8000b1a:	9401      	str	r4, [sp, #4]
 8000b1c:	4668      	mov	r0, sp
 8000b1e:	7b00      	ldrb	r0, [r0, #12]
 8000b20:	f000 fa98 	bl	8001054 <PE_Get_UnchunkedSupport>
 8000b24:	2801      	cmp	r0, #1
 8000b26:	d101      	bne.n	8000b2c <USBPD_PE_SendExtendedMessage+0xa8>
 8000b28:	2004      	movs	r0, #4
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	9702      	str	r7, [sp, #8]
 8000b2e:	9801      	ldr	r0, [sp, #4]
 8000b30:	4669      	mov	r1, sp
 8000b32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8000b34:	4fa1      	ldr	r7, [pc, #644]	; (8000dbc <.text_46>)
 8000b36:	e012      	b.n	8000b5e <USBPD_PE_SendExtendedMessage+0xda>
 8000b38:	210d      	movs	r1, #13
 8000b3a:	e7e4      	b.n	8000b06 <USBPD_PE_SendExtendedMessage+0x82>
 8000b3c:	210e      	movs	r1, #14
 8000b3e:	e7e2      	b.n	8000b06 <USBPD_PE_SendExtendedMessage+0x82>
 8000b40:	205b      	movs	r0, #91	; 0x5b
 8000b42:	499d      	ldr	r1, [pc, #628]	; (8000db8 <.text_45>)
 8000b44:	1871      	adds	r1, r6, r1
 8000b46:	7088      	strb	r0, [r1, #2]
 8000b48:	e7e3      	b.n	8000b12 <USBPD_PE_SendExtendedMessage+0x8e>
 8000b4a:	205c      	movs	r0, #92	; 0x5c
 8000b4c:	e7f9      	b.n	8000b42 <USBPD_PE_SendExtendedMessage+0xbe>
 8000b4e:	2510      	movs	r5, #16
 8000b50:	e01e      	b.n	8000b90 <USBPD_PE_SendExtendedMessage+0x10c>
 8000b52:	9a02      	ldr	r2, [sp, #8]
 8000b54:	5d12      	ldrb	r2, [r2, r4]
 8000b56:	1823      	adds	r3, r4, r0
 8000b58:	18f3      	adds	r3, r6, r3
 8000b5a:	55da      	strb	r2, [r3, r7]
 8000b5c:	1c64      	adds	r4, r4, #1
 8000b5e:	428c      	cmp	r4, r1
 8000b60:	d3f7      	bcc.n	8000b52 <USBPD_PE_SendExtendedMessage+0xce>
 8000b62:	2092      	movs	r0, #146	; 0x92
 8000b64:	00c0      	lsls	r0, r0, #3
 8000b66:	5231      	strh	r1, [r6, r0]
 8000b68:	e002      	b.n	8000b70 <USBPD_PE_SendExtendedMessage+0xec>
 8000b6a:	2092      	movs	r0, #146	; 0x92
 8000b6c:	00c0      	lsls	r0, r0, #3
 8000b6e:	5234      	strh	r4, [r6, r0]
 8000b70:	4668      	mov	r0, sp
 8000b72:	7c00      	ldrb	r0, [r0, #16]
 8000b74:	2133      	movs	r1, #51	; 0x33
 8000b76:	5470      	strb	r0, [r6, r1]
 8000b78:	4668      	mov	r0, sp
 8000b7a:	7800      	ldrb	r0, [r0, #0]
 8000b7c:	498e      	ldr	r1, [pc, #568]	; (8000db8 <.text_45>)
 8000b7e:	5470      	strb	r0, [r6, r1]
 8000b80:	2031      	movs	r0, #49	; 0x31
 8000b82:	2132      	movs	r1, #50	; 0x32
 8000b84:	5470      	strb	r0, [r6, r1]
 8000b86:	4668      	mov	r0, sp
 8000b88:	7b00      	ldrb	r0, [r0, #12]
 8000b8a:	68b1      	ldr	r1, [r6, #8]
 8000b8c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000b8e:	4788      	blx	r1
 8000b90:	0028      	movs	r0, r5
 8000b92:	b005      	add	sp, #20
 8000b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000b98 <.text_30>:
 8000b98:	0000025e 	.word	0x0000025e

08000b9c <PE_Send_RESET>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	0005      	movs	r5, r0
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	2c05      	cmp	r4, #5
 8000ba4:	d101      	bne.n	8000baa <PE_Send_RESET+0xe>
 8000ba6:	211f      	movs	r1, #31
 8000ba8:	e000      	b.n	8000bac <PE_Send_RESET+0x10>
 8000baa:	215e      	movs	r1, #94	; 0x5e
 8000bac:	7c28      	ldrb	r0, [r5, #16]
 8000bae:	f7ff fdef 	bl	8000790 <USBPD_PE_Notification>
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	7c28      	ldrb	r0, [r5, #16]
 8000bb6:	f005 fa11 	bl	8005fdc <USBPD_PRL_ResetRequestProcess>
 8000bba:	f3ef 8010 	mrs	r0, PRIMASK
 8000bbe:	b672      	cpsid	i
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	223c      	movs	r2, #60	; 0x3c
 8000bc4:	54a9      	strb	r1, [r5, r2]
 8000bc6:	f380 8810 	msr	PRIMASK, r0
 8000bca:	bd31      	pop	{r0, r4, r5, pc}

08000bcc <PE_Get_SpecRevision>:
 8000bcc:	4965      	ldr	r1, [pc, #404]	; (8000d64 <.text_43>)
 8000bce:	0080      	lsls	r0, r0, #2
 8000bd0:	5808      	ldr	r0, [r1, r0]
 8000bd2:	6840      	ldr	r0, [r0, #4]
 8000bd4:	7800      	ldrb	r0, [r0, #0]
 8000bd6:	0780      	lsls	r0, r0, #30
 8000bd8:	0f80      	lsrs	r0, r0, #30
 8000bda:	4770      	bx	lr

08000bdc <PE_ChangePowerRole>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	6842      	ldr	r2, [r0, #4]
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	2404      	movs	r4, #4
 8000be4:	43a3      	bics	r3, r4
 8000be6:	008c      	lsls	r4, r1, #2
 8000be8:	2504      	movs	r5, #4
 8000bea:	402c      	ands	r4, r5
 8000bec:	431c      	orrs	r4, r3
 8000bee:	6014      	str	r4, [r2, #0]
 8000bf0:	7c00      	ldrb	r0, [r0, #16]
 8000bf2:	f004 ff70 	bl	8005ad6 <USBPD_PRL_SetHeaderPowerRole>
 8000bf6:	bd31      	pop	{r0, r4, r5, pc}

08000bf8 <PE_Get_RxEvent>:
 8000bf8:	b530      	push	{r4, r5, lr}
 8000bfa:	0001      	movs	r1, r0
 8000bfc:	2014      	movs	r0, #20
 8000bfe:	f3ef 8210 	mrs	r2, PRIMASK
 8000c02:	b672      	cpsid	i
 8000c04:	233c      	movs	r3, #60	; 0x3c
 8000c06:	5ccc      	ldrb	r4, [r1, r3]
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d029      	beq.n	8000c60 <PE_Get_RxEvent+0x68>
 8000c0c:	2393      	movs	r3, #147	; 0x93
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18cb      	adds	r3, r1, r3
 8000c12:	5d1d      	ldrb	r5, [r3, r4]
 8000c14:	066d      	lsls	r5, r5, #25
 8000c16:	d401      	bmi.n	8000c1c <PE_Get_RxEvent+0x24>
 8000c18:	2003      	movs	r0, #3
 8000c1a:	e021      	b.n	8000c60 <PE_Get_RxEvent+0x68>
 8000c1c:	2584      	movs	r5, #132	; 0x84
 8000c1e:	006d      	lsls	r5, r5, #1
 8000c20:	436c      	muls	r4, r5
 8000c22:	190c      	adds	r4, r1, r4
 8000c24:	3ccb      	subs	r4, #203	; 0xcb
 8000c26:	638c      	str	r4, [r1, #56]	; 0x38
 8000c28:	7825      	ldrb	r5, [r4, #0]
 8000c2a:	7864      	ldrb	r4, [r4, #1]
 8000c2c:	0224      	lsls	r4, r4, #8
 8000c2e:	192c      	adds	r4, r5, r4
 8000c30:	868c      	strh	r4, [r1, #52]	; 0x34
 8000c32:	000c      	movs	r4, r1
 8000c34:	3430      	adds	r4, #48	; 0x30
 8000c36:	253c      	movs	r5, #60	; 0x3c
 8000c38:	5d49      	ldrb	r1, [r1, r5]
 8000c3a:	5c59      	ldrb	r1, [r3, r1]
 8000c3c:	06c9      	lsls	r1, r1, #27
 8000c3e:	0ec9      	lsrs	r1, r1, #27
 8000c40:	2901      	cmp	r1, #1
 8000c42:	d004      	beq.n	8000c4e <PE_Get_RxEvent+0x56>
 8000c44:	2902      	cmp	r1, #2
 8000c46:	d005      	beq.n	8000c54 <PE_Get_RxEvent+0x5c>
 8000c48:	2904      	cmp	r1, #4
 8000c4a:	d006      	beq.n	8000c5a <PE_Get_RxEvent+0x62>
 8000c4c:	e008      	b.n	8000c60 <PE_Get_RxEvent+0x68>
 8000c4e:	2011      	movs	r0, #17
 8000c50:	2100      	movs	r1, #0
 8000c52:	e004      	b.n	8000c5e <PE_Get_RxEvent+0x66>
 8000c54:	2012      	movs	r0, #18
 8000c56:	2101      	movs	r1, #1
 8000c58:	e001      	b.n	8000c5e <PE_Get_RxEvent+0x66>
 8000c5a:	2013      	movs	r0, #19
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	7021      	strb	r1, [r4, #0]
 8000c60:	f382 8810 	msr	PRIMASK, r2
 8000c64:	bd30      	pop	{r4, r5, pc}

08000c66 <PE_Clear_RxEvent>:
 8000c66:	b510      	push	{r4, lr}
 8000c68:	0001      	movs	r1, r0
 8000c6a:	f3ef 8010 	mrs	r0, PRIMASK
 8000c6e:	b672      	cpsid	i
 8000c70:	223c      	movs	r2, #60	; 0x3c
 8000c72:	5c8a      	ldrb	r2, [r1, r2]
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d014      	beq.n	8000ca2 <PE_Clear_RxEvent+0x3c>
 8000c78:	1e53      	subs	r3, r2, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4acb      	ldr	r2, [pc, #812]	; (8000fac <.text_56>)
 8000c7e:	188c      	adds	r4, r1, r2
 8000c80:	2200      	movs	r2, #0
 8000c82:	54e2      	strb	r2, [r4, r3]
 8000c84:	1e5b      	subs	r3, r3, #1
 8000c86:	419b      	sbcs	r3, r3
 8000c88:	0fdb      	lsrs	r3, r3, #31
 8000c8a:	5ce4      	ldrb	r4, [r4, r3]
 8000c8c:	0664      	lsls	r4, r4, #25
 8000c8e:	d506      	bpl.n	8000c9e <PE_Clear_RxEvent+0x38>
 8000c90:	1c5b      	adds	r3, r3, #1
 8000c92:	223c      	movs	r2, #60	; 0x3c
 8000c94:	548b      	strb	r3, [r1, r2]
 8000c96:	f380 8810 	msr	PRIMASK, r0
 8000c9a:	7c08      	ldrb	r0, [r1, #16]
 8000c9c:	e168      	b.n	8000f70 <.text_54>
 8000c9e:	233c      	movs	r3, #60	; 0x3c
 8000ca0:	54ca      	strb	r2, [r1, r3]
 8000ca2:	f380 8810 	msr	PRIMASK, r0
 8000ca6:	bd10      	pop	{r4, pc}

08000ca8 <.text_36>:
 8000ca8:	00000302 	.word	0x00000302

08000cac <.text_37>:
 8000cac:	00000703 	.word	0x00000703

08000cb0 <PE_PRL_Control_RxEvent>:
 8000cb0:	492c      	ldr	r1, [pc, #176]	; (8000d64 <.text_43>)
 8000cb2:	0080      	lsls	r0, r0, #2
 8000cb4:	580a      	ldr	r2, [r1, r0]
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f3ef 8110 	mrs	r1, PRIMASK
 8000cbc:	b672      	cpsid	i
 8000cbe:	233c      	movs	r3, #60	; 0x3c
 8000cc0:	5cd2      	ldrb	r2, [r2, r3]
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d000      	beq.n	8000cc8 <PE_PRL_Control_RxEvent+0x18>
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f381 8810 	msr	PRIMASK, r1
 8000ccc:	4770      	bx	lr
	...

08000cd0 <.text_39>:
 8000cd0:	0000025f 	.word	0x0000025f

08000cd4 <.text_40>:
 8000cd4:	00000704 	.word	0x00000704

08000cd8 <PE_Convert_SOPRxEvent>:
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d003      	beq.n	8000ce4 <PE_Convert_SOPRxEvent+0xc>
 8000cdc:	2802      	cmp	r0, #2
 8000cde:	d005      	beq.n	8000cec <PE_Convert_SOPRxEvent+0x14>
 8000ce0:	d302      	bcc.n	8000ce8 <PE_Convert_SOPRxEvent+0x10>
 8000ce2:	e005      	b.n	8000cf0 <PE_Convert_SOPRxEvent+0x18>
 8000ce4:	2011      	movs	r0, #17
 8000ce6:	4770      	bx	lr
 8000ce8:	2012      	movs	r0, #18
 8000cea:	4770      	bx	lr
 8000cec:	2013      	movs	r0, #19
 8000cee:	4770      	bx	lr
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	4770      	bx	lr

08000cf4 <PE_Check_AMSConflict>:
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	0005      	movs	r5, r0
 8000cf8:	2400      	movs	r4, #0
 8000cfa:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8000cfc:	49b7      	ldr	r1, [pc, #732]	; (8000fdc <.text_58>)
 8000cfe:	4001      	ands	r1, r0
 8000d00:	290d      	cmp	r1, #13
 8000d02:	d101      	bne.n	8000d08 <PE_Check_AMSConflict+0x14>
 8000d04:	2010      	movs	r0, #16
 8000d06:	e01b      	b.n	8000d40 <PE_Check_AMSConflict+0x4c>
 8000d08:	2603      	movs	r6, #3
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	7f29      	ldrb	r1, [r5, #28]
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d011      	beq.n	8000d36 <PE_Check_AMSConflict+0x42>
 8000d12:	1e49      	subs	r1, r1, #1
 8000d14:	2901      	cmp	r1, #1
 8000d16:	d912      	bls.n	8000d3e <PE_Check_AMSConflict+0x4a>
 8000d18:	1e89      	subs	r1, r1, #2
 8000d1a:	d011      	beq.n	8000d40 <PE_Check_AMSConflict+0x4c>
 8000d1c:	1e49      	subs	r1, r1, #1
 8000d1e:	d01d      	beq.n	8000d5c <PE_Check_AMSConflict+0x68>
 8000d20:	1e49      	subs	r1, r1, #1
 8000d22:	2909      	cmp	r1, #9
 8000d24:	d90b      	bls.n	8000d3e <PE_Check_AMSConflict+0x4a>
 8000d26:	390b      	subs	r1, #11
 8000d28:	2901      	cmp	r1, #1
 8000d2a:	d908      	bls.n	8000d3e <PE_Check_AMSConflict+0x4a>
 8000d2c:	1e89      	subs	r1, r1, #2
 8000d2e:	d004      	beq.n	8000d3a <PE_Check_AMSConflict+0x46>
 8000d30:	394d      	subs	r1, #77	; 0x4d
 8000d32:	d004      	beq.n	8000d3e <PE_Check_AMSConflict+0x4a>
 8000d34:	e006      	b.n	8000d44 <PE_Check_AMSConflict+0x50>
 8000d36:	746e      	strb	r6, [r5, #17]
 8000d38:	e011      	b.n	8000d5e <PE_Check_AMSConflict+0x6a>
 8000d3a:	7468      	strb	r0, [r5, #17]
 8000d3c:	e00f      	b.n	8000d5e <PE_Check_AMSConflict+0x6a>
 8000d3e:	2011      	movs	r0, #17
 8000d40:	7468      	strb	r0, [r5, #17]
 8000d42:	e00b      	b.n	8000d5c <PE_Check_AMSConflict+0x68>
 8000d44:	215c      	movs	r1, #92	; 0x5c
 8000d46:	7c28      	ldrb	r0, [r5, #16]
 8000d48:	f7ff fd22 	bl	8000790 <USBPD_PE_Notification>
 8000d4c:	746e      	strb	r6, [r5, #17]
 8000d4e:	6868      	ldr	r0, [r5, #4]
 8000d50:	6800      	ldr	r0, [r0, #0]
 8000d52:	49c4      	ldr	r1, [pc, #784]	; (8001064 <.text_62>)
 8000d54:	4001      	ands	r1, r0
 8000d56:	0230      	lsls	r0, r6, #8
 8000d58:	4281      	cmp	r1, r0
 8000d5a:	d000      	beq.n	8000d5e <PE_Check_AMSConflict+0x6a>
 8000d5c:	2415      	movs	r4, #21
 8000d5e:	0020      	movs	r0, r4
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d64 <.text_43>:
 8000d64:	20000178 	.word	0x20000178

08000d68 <PE_PRL_ResetReceived>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	0004      	movs	r4, r0
 8000d6c:	48be      	ldr	r0, [pc, #760]	; (8001068 <.text_63>)
 8000d6e:	00a2      	lsls	r2, r4, #2
 8000d70:	5885      	ldr	r5, [r0, r2]
 8000d72:	2905      	cmp	r1, #5
 8000d74:	d115      	bne.n	8000da2 <PE_PRL_ResetReceived+0x3a>
 8000d76:	6868      	ldr	r0, [r5, #4]
 8000d78:	6801      	ldr	r1, [r0, #0]
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	4391      	bics	r1, r2
 8000d7e:	6001      	str	r1, [r0, #0]
 8000d80:	6968      	ldr	r0, [r5, #20]
 8000d82:	49ba      	ldr	r1, [pc, #744]	; (800106c <.text_64>)
 8000d84:	4001      	ands	r1, r0
 8000d86:	0150      	lsls	r0, r2, #5
 8000d88:	4308      	orrs	r0, r1
 8000d8a:	6168      	str	r0, [r5, #20]
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	2132      	movs	r1, #50	; 0x32
 8000d90:	5468      	strb	r0, [r5, r1]
 8000d92:	2000      	movs	r0, #0
 8000d94:	213c      	movs	r1, #60	; 0x3c
 8000d96:	5468      	strb	r0, [r5, r1]
 8000d98:	211e      	movs	r1, #30
 8000d9a:	7c28      	ldrb	r0, [r5, #16]
 8000d9c:	f7ff fcf8 	bl	8000790 <USBPD_PE_Notification>
 8000da0:	e004      	b.n	8000dac <PE_PRL_ResetReceived+0x44>
 8000da2:	6968      	ldr	r0, [r5, #20]
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	02c9      	lsls	r1, r1, #11
 8000da8:	4301      	orrs	r1, r0
 8000daa:	6169      	str	r1, [r5, #20]
 8000dac:	0020      	movs	r0, r4
 8000dae:	68a9      	ldr	r1, [r5, #8]
 8000db0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000db2:	4788      	blx	r1
 8000db4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000db8 <.text_45>:
 8000db8:	0000025d 	.word	0x0000025d

08000dbc <.text_46>:
 8000dbc:	00000385 	.word	0x00000385

08000dc0 <PE_PRL_BistCompleted>:
 8000dc0:	4770      	bx	lr

08000dc2 <PE_Reset_HardReset>:
 8000dc2:	b538      	push	{r3, r4, r5, lr}
 8000dc4:	0004      	movs	r4, r0
 8000dc6:	2032      	movs	r0, #50	; 0x32
 8000dc8:	5c20      	ldrb	r0, [r4, r0]
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d003      	beq.n	8000dd6 <PE_Reset_HardReset+0x14>
 8000dce:	215b      	movs	r1, #91	; 0x5b
 8000dd0:	7c20      	ldrb	r0, [r4, #16]
 8000dd2:	f7ff fcdd 	bl	8000790 <USBPD_PE_Notification>
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f000 f82c 	bl	8000e34 <PE_Reset_ZI>
 8000ddc:	2503      	movs	r5, #3
 8000dde:	6820      	ldr	r0, [r4, #0]
 8000de0:	6843      	ldr	r3, [r0, #4]
 8000de2:	402b      	ands	r3, r5
 8000de4:	7c20      	ldrb	r0, [r4, #16]
 8000de6:	6861      	ldr	r1, [r4, #4]
 8000de8:	6809      	ldr	r1, [r1, #0]
 8000dea:	074a      	lsls	r2, r1, #29
 8000dec:	0fd2      	lsrs	r2, r2, #31
 8000dee:	d008      	beq.n	8000e02 <PE_Reset_HardReset+0x40>
 8000df0:	2101      	movs	r1, #1
 8000df2:	f004 fe54 	bl	8005a9e <USBPD_PRL_SetHeader>
 8000df6:	6860      	ldr	r0, [r4, #4]
 8000df8:	6801      	ldr	r1, [r0, #0]
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	6002      	str	r2, [r0, #0]
 8000e00:	e007      	b.n	8000e12 <PE_Reset_HardReset+0x50>
 8000e02:	2100      	movs	r1, #0
 8000e04:	f004 fe4b 	bl	8005a9e <USBPD_PRL_SetHeader>
 8000e08:	6860      	ldr	r0, [r4, #4]
 8000e0a:	6801      	ldr	r1, [r0, #0]
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	4391      	bics	r1, r2
 8000e10:	6001      	str	r1, [r0, #0]
 8000e12:	6820      	ldr	r0, [r4, #0]
 8000e14:	6840      	ldr	r0, [r0, #4]
 8000e16:	4005      	ands	r5, r0
 8000e18:	6860      	ldr	r0, [r4, #4]
 8000e1a:	6801      	ldr	r1, [r0, #0]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4391      	bics	r1, r2
 8000e20:	430d      	orrs	r5, r1
 8000e22:	6005      	str	r5, [r0, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	7c20      	ldrb	r0, [r4, #16]
 8000e28:	f004 feaa 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8000e2c:	7c20      	ldrb	r0, [r4, #16]
 8000e2e:	f005 f913 	bl	8006058 <USBPD_PRL_Reset>
 8000e32:	bd31      	pop	{r0, r4, r5, pc}

08000e34 <PE_Reset_ZI>:
 8000e34:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000e36:	0004      	movs	r4, r0
 8000e38:	2000      	movs	r0, #0
 8000e3a:	9001      	str	r0, [sp, #4]
 8000e3c:	6860      	ldr	r0, [r4, #4]
 8000e3e:	6801      	ldr	r1, [r0, #0]
 8000e40:	2210      	movs	r2, #16
 8000e42:	4391      	bics	r1, r2
 8000e44:	6001      	str	r1, [r0, #0]
 8000e46:	2100      	movs	r1, #0
 8000e48:	0020      	movs	r0, r4
 8000e4a:	f000 fc34 	bl	80016b6 <PE_SetPowerNegotiation>
 8000e4e:	2193      	movs	r1, #147	; 0x93
 8000e50:	0089      	lsls	r1, r1, #2
 8000e52:	0020      	movs	r0, r4
 8000e54:	3014      	adds	r0, #20
 8000e56:	f019 f974 	bl	801a142 <__aeabi_memclr>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	aa01      	add	r2, sp, #4
 8000e5e:	2102      	movs	r1, #2
 8000e60:	7c20      	ldrb	r0, [r4, #16]
 8000e62:	68a5      	ldr	r5, [r4, #8]
 8000e64:	69ad      	ldr	r5, [r5, #24]
 8000e66:	47a8      	blx	r5
 8000e68:	2080      	movs	r0, #128	; 0x80
 8000e6a:	0440      	lsls	r0, r0, #17
 8000e6c:	9000      	str	r0, [sp, #0]
 8000e6e:	2304      	movs	r3, #4
 8000e70:	466a      	mov	r2, sp
 8000e72:	2106      	movs	r1, #6
 8000e74:	7c20      	ldrb	r0, [r4, #16]
 8000e76:	68a5      	ldr	r5, [r4, #8]
 8000e78:	69ad      	ldr	r5, [r5, #24]
 8000e7a:	47a8      	blx	r5
 8000e7c:	2503      	movs	r5, #3
 8000e7e:	6820      	ldr	r0, [r4, #0]
 8000e80:	6841      	ldr	r1, [r0, #4]
 8000e82:	4029      	ands	r1, r5
 8000e84:	7c20      	ldrb	r0, [r4, #16]
 8000e86:	f004 fe48 	bl	8005b1a <USBPD_PRL_CBL_SetHeaderSpecification>
 8000e8a:	6820      	ldr	r0, [r4, #0]
 8000e8c:	6840      	ldr	r0, [r0, #4]
 8000e8e:	4005      	ands	r5, r0
 8000e90:	6860      	ldr	r0, [r4, #4]
 8000e92:	6801      	ldr	r1, [r0, #0]
 8000e94:	4a76      	ldr	r2, [pc, #472]	; (8001070 <.text_65>)
 8000e96:	400a      	ands	r2, r1
 8000e98:	06a9      	lsls	r1, r5, #26
 8000e9a:	4311      	orrs	r1, r2
 8000e9c:	6001      	str	r1, [r0, #0]
 8000e9e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000ea0 <PE_Reset_Counter>:
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	2298      	movs	r2, #152	; 0x98
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	1880      	adds	r0, r0, r2
 8000eaa:	f019 f94a 	bl	801a142 <__aeabi_memclr>
 8000eae:	bd01      	pop	{r0, pc}

08000eb0 <PE_Reset_StateMachine>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	0004      	movs	r4, r0
 8000eb4:	2032      	movs	r0, #50	; 0x32
 8000eb6:	5c20      	ldrb	r0, [r4, r0]
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d003      	beq.n	8000ec4 <PE_Reset_StateMachine+0x14>
 8000ebc:	215b      	movs	r1, #91	; 0x5b
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	f7ff fc66 	bl	8000790 <USBPD_PE_Notification>
 8000ec4:	0020      	movs	r0, r4
 8000ec6:	f7ff ffb5 	bl	8000e34 <PE_Reset_ZI>
 8000eca:	2101      	movs	r1, #1
 8000ecc:	0020      	movs	r0, r4
 8000ece:	f000 fbf2 	bl	80016b6 <PE_SetPowerNegotiation>
 8000ed2:	7c20      	ldrb	r0, [r4, #16]
 8000ed4:	f005 f8c0 	bl	8006058 <USBPD_PRL_Reset>
 8000ed8:	6860      	ldr	r0, [r4, #4]
 8000eda:	6801      	ldr	r1, [r0, #0]
 8000edc:	2501      	movs	r5, #1
 8000ede:	08ca      	lsrs	r2, r1, #3
 8000ee0:	402a      	ands	r2, r5
 8000ee2:	078b      	lsls	r3, r1, #30
 8000ee4:	0f9b      	lsrs	r3, r3, #30
 8000ee6:	7c20      	ldrb	r0, [r4, #16]
 8000ee8:	0889      	lsrs	r1, r1, #2
 8000eea:	400d      	ands	r5, r1
 8000eec:	d004      	beq.n	8000ef8 <PE_Reset_StateMachine+0x48>
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f004 fdd5 	bl	8005a9e <USBPD_PRL_SetHeader>
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	e003      	b.n	8000f00 <PE_Reset_StateMachine+0x50>
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f004 fdd0 	bl	8005a9e <USBPD_PRL_SetHeader>
 8000efe:	203e      	movs	r0, #62	; 0x3e
 8000f00:	7460      	strb	r0, [r4, #17]
 8000f02:	bd31      	pop	{r0, r4, r5, pc}

08000f04 <PE_ExtRevisionInteroperability>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	000a      	movs	r2, r1
 8000f08:	4957      	ldr	r1, [pc, #348]	; (8001068 <.text_63>)
 8000f0a:	0083      	lsls	r3, r0, #2
 8000f0c:	58cb      	ldr	r3, [r1, r3]
 8000f0e:	685c      	ldr	r4, [r3, #4]
 8000f10:	6825      	ldr	r5, [r4, #0]
 8000f12:	2103      	movs	r1, #3
 8000f14:	2603      	movs	r6, #3
 8000f16:	402e      	ands	r6, r5
 8000f18:	42b2      	cmp	r2, r6
 8000f1a:	db00      	blt.n	8000f1e <PE_ExtRevisionInteroperability+0x1a>
 8000f1c:	0032      	movs	r2, r6
 8000f1e:	438d      	bics	r5, r1
 8000f20:	400a      	ands	r2, r1
 8000f22:	432a      	orrs	r2, r5
 8000f24:	6022      	str	r2, [r4, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	6814      	ldr	r4, [r2, #0]
 8000f2a:	2503      	movs	r5, #3
 8000f2c:	4025      	ands	r5, r4
 8000f2e:	2d01      	cmp	r5, #1
 8000f30:	d101      	bne.n	8000f36 <PE_ExtRevisionInteroperability+0x32>
 8000f32:	2500      	movs	r5, #0
 8000f34:	e000      	b.n	8000f38 <PE_ExtRevisionInteroperability+0x34>
 8000f36:	2520      	movs	r5, #32
 8000f38:	2620      	movs	r6, #32
 8000f3a:	43b4      	bics	r4, r6
 8000f3c:	4325      	orrs	r5, r4
 8000f3e:	6015      	str	r5, [r2, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	4011      	ands	r1, r2
 8000f46:	f004 fddc 	bl	8005b02 <USBPD_PRL_SetHeaderSpecification>
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}

08000f4c <PE_PRL_FastRoleSwapReception>:
 8000f4c:	4946      	ldr	r1, [pc, #280]	; (8001068 <.text_63>)
 8000f4e:	0082      	lsls	r2, r0, #2
 8000f50:	5889      	ldr	r1, [r1, r2]
 8000f52:	7f0a      	ldrb	r2, [r1, #28]
 8000f54:	2a09      	cmp	r2, #9
 8000f56:	d100      	bne.n	8000f5a <PE_PRL_FastRoleSwapReception+0xe>
 8000f58:	4770      	bx	lr
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	684a      	ldr	r2, [r1, #4]
 8000f5e:	6813      	ldr	r3, [r2, #0]
 8000f60:	2410      	movs	r4, #16
 8000f62:	431c      	orrs	r4, r3
 8000f64:	6014      	str	r4, [r2, #0]
 8000f66:	694a      	ldr	r2, [r1, #20]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	029b      	lsls	r3, r3, #10
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	614b      	str	r3, [r1, #20]

08000f70 <.text_54>:
 8000f70:	6889      	ldr	r1, [r1, #8]
 8000f72:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000f74:	4788      	blx	r1
 8000f76:	bd10      	pop	{r4, pc}

08000f78 <PE_PRL_PostReceiveEvent>:
 8000f78:	b530      	push	{r4, r5, lr}
 8000f7a:	4a3b      	ldr	r2, [pc, #236]	; (8001068 <.text_63>)
 8000f7c:	0080      	lsls	r0, r0, #2
 8000f7e:	5813      	ldr	r3, [r2, r0]
 8000f80:	2400      	movs	r4, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	191a      	adds	r2, r3, r4
 8000f86:	4d09      	ldr	r5, [pc, #36]	; (8000fac <.text_56>)
 8000f88:	1952      	adds	r2, r2, r5
 8000f8a:	7815      	ldrb	r5, [r2, #0]
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	d004      	beq.n	8000f9a <PE_PRL_PostReceiveEvent+0x22>
 8000f90:	1c64      	adds	r4, r4, #1
 8000f92:	b2e4      	uxtb	r4, r4
 8000f94:	2c01      	cmp	r4, #1
 8000f96:	d9f5      	bls.n	8000f84 <PE_PRL_PostReceiveEvent+0xc>
 8000f98:	bd30      	pop	{r4, r5, pc}
 8000f9a:	2020      	movs	r0, #32
 8000f9c:	7010      	strb	r0, [r2, #0]
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	7813      	ldrb	r3, [r2, #0]
 8000fa2:	2401      	movs	r4, #1
 8000fa4:	408c      	lsls	r4, r1
 8000fa6:	431c      	orrs	r4, r3
 8000fa8:	7014      	strb	r4, [r2, #0]
 8000faa:	bd30      	pop	{r4, r5, pc}

08000fac <.text_56>:
 8000fac:	0000024d 	.word	0x0000024d

08000fb0 <PE_PRL_PostReceiveEventError>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	492d      	ldr	r1, [pc, #180]	; (8001068 <.text_63>)
 8000fb4:	0080      	lsls	r0, r0, #2
 8000fb6:	5809      	ldr	r1, [r1, r0]
 8000fb8:	2000      	movs	r0, #0
 8000fba:	2200      	movs	r2, #0
 8000fbc:	b2d3      	uxtb	r3, r2
 8000fbe:	18cb      	adds	r3, r1, r3
 8000fc0:	4c2c      	ldr	r4, [pc, #176]	; (8001074 <.text_66>)
 8000fc2:	191b      	adds	r3, r3, r4
 8000fc4:	781c      	ldrb	r4, [r3, #0]
 8000fc6:	2560      	movs	r5, #96	; 0x60
 8000fc8:	4025      	ands	r5, r4
 8000fca:	2d20      	cmp	r5, #32
 8000fcc:	d004      	beq.n	8000fd8 <PE_PRL_PostReceiveEventError+0x28>
 8000fce:	1c52      	adds	r2, r2, #1
 8000fd0:	b2d3      	uxtb	r3, r2
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d3f2      	bcc.n	8000fbc <PE_PRL_PostReceiveEventError+0xc>
 8000fd6:	bd30      	pop	{r4, r5, pc}
 8000fd8:	7018      	strb	r0, [r3, #0]
 8000fda:	bd30      	pop	{r4, r5, pc}

08000fdc <.text_58>:
 8000fdc:	0000f01f 	.word	0x0000f01f

08000fe0 <PE_PRL_PostReceiveEventCopy>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <.text_63>)
 8000fe4:	0080      	lsls	r0, r0, #2
 8000fe6:	5813      	ldr	r3, [r2, r0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	b2d0      	uxtb	r0, r2
 8000fec:	181c      	adds	r4, r3, r0
 8000fee:	4d21      	ldr	r5, [pc, #132]	; (8001074 <.text_66>)
 8000ff0:	5d64      	ldrb	r4, [r4, r5]
 8000ff2:	2560      	movs	r5, #96	; 0x60
 8000ff4:	4025      	ands	r5, r4
 8000ff6:	2d20      	cmp	r5, #32
 8000ff8:	d004      	beq.n	8001004 <PE_PRL_PostReceiveEventCopy+0x24>
 8000ffa:	1c52      	adds	r2, r2, #1
 8000ffc:	b2d0      	uxtb	r0, r2
 8000ffe:	2802      	cmp	r0, #2
 8001000:	d3f3      	bcc.n	8000fea <PE_PRL_PostReceiveEventCopy+0xa>
 8001002:	bd31      	pop	{r0, r4, r5, pc}
 8001004:	2284      	movs	r2, #132	; 0x84
 8001006:	0052      	lsls	r2, r2, #1
 8001008:	4350      	muls	r0, r2
 800100a:	1818      	adds	r0, r3, r0
 800100c:	303d      	adds	r0, #61	; 0x3d
 800100e:	f019 f88d 	bl	801a12c <__aeabi_memcpy>
 8001012:	bd31      	pop	{r0, r4, r5, pc}

08001014 <PE_PRL_PostReceiveEventComplete>:
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4914      	ldr	r1, [pc, #80]	; (8001068 <.text_63>)
 8001018:	0082      	lsls	r2, r0, #2
 800101a:	5889      	ldr	r1, [r1, r2]
 800101c:	2300      	movs	r3, #0
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	4c14      	ldr	r4, [pc, #80]	; (8001074 <.text_66>)
 8001024:	191b      	adds	r3, r3, r4
 8001026:	781c      	ldrb	r4, [r3, #0]
 8001028:	2560      	movs	r5, #96	; 0x60
 800102a:	4025      	ands	r5, r4
 800102c:	2d20      	cmp	r5, #32
 800102e:	d003      	beq.n	8001038 <PE_PRL_PostReceiveEventComplete+0x24>
 8001030:	b2d3      	uxtb	r3, r2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d3f3      	bcc.n	800101e <PE_PRL_PostReceiveEventComplete+0xa>
 8001036:	bd31      	pop	{r0, r4, r5, pc}
 8001038:	781c      	ldrb	r4, [r3, #0]
 800103a:	2540      	movs	r5, #64	; 0x40
 800103c:	4325      	orrs	r5, r4
 800103e:	701d      	strb	r5, [r3, #0]
 8001040:	233c      	movs	r3, #60	; 0x3c
 8001042:	5ccb      	ldrb	r3, [r1, r3]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <PE_PRL_PostReceiveEventComplete+0x38>
 8001048:	233c      	movs	r3, #60	; 0x3c
 800104a:	54ca      	strb	r2, [r1, r3]
 800104c:	6889      	ldr	r1, [r1, #8]
 800104e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8001050:	4788      	blx	r1
 8001052:	bd31      	pop	{r0, r4, r5, pc}

08001054 <PE_Get_UnchunkedSupport>:
 8001054:	4904      	ldr	r1, [pc, #16]	; (8001068 <.text_63>)
 8001056:	0080      	lsls	r0, r0, #2
 8001058:	5808      	ldr	r0, [r1, r0]
 800105a:	6840      	ldr	r0, [r0, #4]
 800105c:	6800      	ldr	r0, [r0, #0]
 800105e:	0181      	lsls	r1, r0, #6
 8001060:	0fc8      	lsrs	r0, r1, #31
 8001062:	4770      	bx	lr

08001064 <.text_62>:
 8001064:	00000704 	.word	0x00000704

08001068 <.text_63>:
 8001068:	20000178 	.word	0x20000178

0800106c <.text_64>:
 800106c:	fffff9ff 	.word	0xfffff9ff

08001070 <.text_65>:
 8001070:	f3ffffff 	.word	0xf3ffffff

08001074 <.text_66>:
 8001074:	0000024d 	.word	0x0000024d

08001078 <PE_SubStateMachine_Generic>:
 8001078:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800107a:	b08d      	sub	sp, #52	; 0x34
 800107c:	0004      	movs	r4, r0
 800107e:	2002      	movs	r0, #2
 8001080:	9004      	str	r0, [sp, #16]
 8001082:	2500      	movs	r5, #0
 8001084:	9503      	str	r5, [sp, #12]
 8001086:	2601      	movs	r6, #1
 8001088:	2714      	movs	r7, #20
 800108a:	7c61      	ldrb	r1, [r4, #17]
 800108c:	2901      	cmp	r1, #1
 800108e:	d100      	bne.n	8001092 <PE_SubStateMachine_Generic+0x1a>
 8001090:	e195      	b.n	80013be <PE_SubStateMachine_Generic+0x346>
 8001092:	2918      	cmp	r1, #24
 8001094:	d03f      	beq.n	8001116 <PE_SubStateMachine_Generic+0x9e>
 8001096:	2919      	cmp	r1, #25
 8001098:	d050      	beq.n	800113c <PE_SubStateMachine_Generic+0xc4>
 800109a:	291d      	cmp	r1, #29
 800109c:	d100      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x28>
 800109e:	e092      	b.n	80011c6 <PE_SubStateMachine_Generic+0x14e>
 80010a0:	2927      	cmp	r1, #39	; 0x27
 80010a2:	d100      	bne.n	80010a6 <PE_SubStateMachine_Generic+0x2e>
 80010a4:	e0b0      	b.n	8001208 <PE_SubStateMachine_Generic+0x190>
 80010a6:	2928      	cmp	r1, #40	; 0x28
 80010a8:	d100      	bne.n	80010ac <PE_SubStateMachine_Generic+0x34>
 80010aa:	e0b9      	b.n	8001220 <PE_SubStateMachine_Generic+0x1a8>
 80010ac:	2929      	cmp	r1, #41	; 0x29
 80010ae:	d100      	bne.n	80010b2 <PE_SubStateMachine_Generic+0x3a>
 80010b0:	e0c0      	b.n	8001234 <PE_SubStateMachine_Generic+0x1bc>
 80010b2:	292c      	cmp	r1, #44	; 0x2c
 80010b4:	d100      	bne.n	80010b8 <PE_SubStateMachine_Generic+0x40>
 80010b6:	e2bc      	b.n	8001632 <PE_SubStateMachine_Generic+0x5ba>
 80010b8:	2930      	cmp	r1, #48	; 0x30
 80010ba:	d100      	bne.n	80010be <PE_SubStateMachine_Generic+0x46>
 80010bc:	e1de      	b.n	800147c <PE_SubStateMachine_Generic+0x404>
 80010be:	293a      	cmp	r1, #58	; 0x3a
 80010c0:	d100      	bne.n	80010c4 <PE_SubStateMachine_Generic+0x4c>
 80010c2:	e28c      	b.n	80015de <PE_SubStateMachine_Generic+0x566>
 80010c4:	293b      	cmp	r1, #59	; 0x3b
 80010c6:	d100      	bne.n	80010ca <PE_SubStateMachine_Generic+0x52>
 80010c8:	e270      	b.n	80015ac <PE_SubStateMachine_Generic+0x534>
 80010ca:	293c      	cmp	r1, #60	; 0x3c
 80010cc:	d100      	bne.n	80010d0 <PE_SubStateMachine_Generic+0x58>
 80010ce:	e247      	b.n	8001560 <PE_SubStateMachine_Generic+0x4e8>
 80010d0:	294b      	cmp	r1, #75	; 0x4b
 80010d2:	d100      	bne.n	80010d6 <PE_SubStateMachine_Generic+0x5e>
 80010d4:	e114      	b.n	8001300 <PE_SubStateMachine_Generic+0x288>
 80010d6:	2963      	cmp	r1, #99	; 0x63
 80010d8:	d100      	bne.n	80010dc <PE_SubStateMachine_Generic+0x64>
 80010da:	e178      	b.n	80013ce <PE_SubStateMachine_Generic+0x356>
 80010dc:	2964      	cmp	r1, #100	; 0x64
 80010de:	d100      	bne.n	80010e2 <PE_SubStateMachine_Generic+0x6a>
 80010e0:	e1a0      	b.n	8001424 <PE_SubStateMachine_Generic+0x3ac>
 80010e2:	2967      	cmp	r1, #103	; 0x67
 80010e4:	d100      	bne.n	80010e8 <PE_SubStateMachine_Generic+0x70>
 80010e6:	e120      	b.n	800132a <PE_SubStateMachine_Generic+0x2b2>
 80010e8:	2968      	cmp	r1, #104	; 0x68
 80010ea:	d100      	bne.n	80010ee <PE_SubStateMachine_Generic+0x76>
 80010ec:	e138      	b.n	8001360 <PE_SubStateMachine_Generic+0x2e8>
 80010ee:	2974      	cmp	r1, #116	; 0x74
 80010f0:	d100      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x7c>
 80010f2:	e1f3      	b.n	80014dc <PE_SubStateMachine_Generic+0x464>
 80010f4:	2993      	cmp	r1, #147	; 0x93
 80010f6:	d100      	bne.n	80010fa <PE_SubStateMachine_Generic+0x82>
 80010f8:	e0a6      	b.n	8001248 <PE_SubStateMachine_Generic+0x1d0>
 80010fa:	2994      	cmp	r1, #148	; 0x94
 80010fc:	d100      	bne.n	8001100 <PE_SubStateMachine_Generic+0x88>
 80010fe:	e0a7      	b.n	8001250 <PE_SubStateMachine_Generic+0x1d8>
 8001100:	2995      	cmp	r1, #149	; 0x95
 8001102:	d100      	bne.n	8001106 <PE_SubStateMachine_Generic+0x8e>
 8001104:	e0bd      	b.n	8001282 <PE_SubStateMachine_Generic+0x20a>
 8001106:	2999      	cmp	r1, #153	; 0x99
 8001108:	d000      	beq.n	800110c <PE_SubStateMachine_Generic+0x94>
 800110a:	e297      	b.n	800163c <PE_SubStateMachine_Generic+0x5c4>
 800110c:	2106      	movs	r1, #6
 800110e:	0020      	movs	r0, r4
 8001110:	f7ff fd44 	bl	8000b9c <PE_Send_RESET>
 8001114:	e220      	b.n	8001558 <PE_SubStateMachine_Generic+0x4e0>
 8001116:	6861      	ldr	r1, [r4, #4]
 8001118:	6809      	ldr	r1, [r1, #0]
 800111a:	0889      	lsrs	r1, r1, #2
 800111c:	400e      	ands	r6, r1
 800111e:	d002      	beq.n	8001126 <PE_SubStateMachine_Generic+0xae>
 8001120:	6960      	ldr	r0, [r4, #20]
 8001122:	0741      	lsls	r1, r0, #29
 8001124:	0fc8      	lsrs	r0, r1, #31
 8001126:	9000      	str	r0, [sp, #0]
 8001128:	2319      	movs	r3, #25
 800112a:	2208      	movs	r2, #8
 800112c:	2100      	movs	r1, #0
 800112e:	0020      	movs	r0, r4
 8001130:	f000 fb76 	bl	8001820 <PE_Send_CtrlMessage>
 8001134:	2800      	cmp	r0, #0
 8001136:	d156      	bne.n	80011e6 <PE_SubStateMachine_Generic+0x16e>
 8001138:	2007      	movs	r0, #7
 800113a:	e107      	b.n	800134c <PE_SubStateMachine_Generic+0x2d4>
 800113c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800113e:	7800      	ldrb	r0, [r0, #0]
 8001140:	2811      	cmp	r0, #17
 8001142:	d13c      	bne.n	80011be <PE_SubStateMachine_Generic+0x146>
 8001144:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001146:	0bc1      	lsrs	r1, r0, #15
 8001148:	d11e      	bne.n	8001188 <PE_SubStateMachine_Generic+0x110>
 800114a:	0441      	lsls	r1, r0, #17
 800114c:	0f49      	lsrs	r1, r1, #29
 800114e:	d01b      	beq.n	8001188 <PE_SubStateMachine_Generic+0x110>
 8001150:	06c0      	lsls	r0, r0, #27
 8001152:	0ec0      	lsrs	r0, r0, #27
 8001154:	2804      	cmp	r0, #4
 8001156:	d117      	bne.n	8001188 <PE_SubStateMachine_Generic+0x110>
 8001158:	008b      	lsls	r3, r1, #2
 800115a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800115c:	1c82      	adds	r2, r0, #2
 800115e:	2105      	movs	r1, #5
 8001160:	7c20      	ldrb	r0, [r4, #16]
 8001162:	68a6      	ldr	r6, [r4, #8]
 8001164:	69b6      	ldr	r6, [r6, #24]
 8001166:	47b0      	blx	r6
 8001168:	980e      	ldr	r0, [sp, #56]	; 0x38
 800116a:	7800      	ldrb	r0, [r0, #0]
 800116c:	2814      	cmp	r0, #20
 800116e:	d004      	beq.n	800117a <PE_SubStateMachine_Generic+0x102>
 8001170:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001172:	700f      	strb	r7, [r1, #0]
 8001174:	0020      	movs	r0, r4
 8001176:	f7ff fd76 	bl	8000c66 <PE_Clear_RxEvent>
 800117a:	2003      	movs	r0, #3
 800117c:	7460      	strb	r0, [r4, #17]
 800117e:	9504      	str	r5, [sp, #16]
 8001180:	2107      	movs	r1, #7
 8001182:	7c20      	ldrb	r0, [r4, #16]
 8001184:	f7ff fb04 	bl	8000790 <USBPD_PE_Notification>
 8001188:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800118a:	21f0      	movs	r1, #240	; 0xf0
 800118c:	0209      	lsls	r1, r1, #8
 800118e:	4001      	ands	r1, r0
 8001190:	d115      	bne.n	80011be <PE_SubStateMachine_Generic+0x146>
 8001192:	06c0      	lsls	r0, r0, #27
 8001194:	0ec0      	lsrs	r0, r0, #27
 8001196:	2804      	cmp	r0, #4
 8001198:	d001      	beq.n	800119e <PE_SubStateMachine_Generic+0x126>
 800119a:	2810      	cmp	r0, #16
 800119c:	d10f      	bne.n	80011be <PE_SubStateMachine_Generic+0x146>
 800119e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011a0:	7800      	ldrb	r0, [r0, #0]
 80011a2:	2814      	cmp	r0, #20
 80011a4:	d004      	beq.n	80011b0 <PE_SubStateMachine_Generic+0x138>
 80011a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011a8:	7007      	strb	r7, [r0, #0]
 80011aa:	0020      	movs	r0, r4
 80011ac:	f7ff fd5b 	bl	8000c66 <PE_Clear_RxEvent>
 80011b0:	2003      	movs	r0, #3
 80011b2:	7460      	strb	r0, [r4, #17]
 80011b4:	9504      	str	r5, [sp, #16]
 80011b6:	2108      	movs	r1, #8
 80011b8:	7c20      	ldrb	r0, [r4, #16]
 80011ba:	f7ff fae9 	bl	8000790 <USBPD_PE_Notification>
 80011be:	8be0      	ldrh	r0, [r4, #30]
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0209      	lsls	r1, r1, #8
 80011c4:	e099      	b.n	80012fa <PE_SubStateMachine_Generic+0x282>
 80011c6:	9505      	str	r5, [sp, #20]
 80011c8:	ab05      	add	r3, sp, #20
 80011ca:	aa06      	add	r2, sp, #24
 80011cc:	2101      	movs	r1, #1
 80011ce:	7c20      	ldrb	r0, [r4, #16]
 80011d0:	68a5      	ldr	r5, [r4, #8]
 80011d2:	696d      	ldr	r5, [r5, #20]
 80011d4:	47a8      	blx	r5
 80011d6:	2104      	movs	r1, #4
 80011d8:	9805      	ldr	r0, [sp, #20]
 80011da:	f000 fabf 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d002      	beq.n	80011e8 <PE_SubStateMachine_Generic+0x170>
 80011e2:	2003      	movs	r0, #3
 80011e4:	7460      	strb	r0, [r4, #17]
 80011e6:	e22a      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 80011e8:	9002      	str	r0, [sp, #8]
 80011ea:	2003      	movs	r0, #3
 80011ec:	9001      	str	r0, [sp, #4]
 80011ee:	9805      	ldr	r0, [sp, #20]
 80011f0:	0880      	lsrs	r0, r0, #2
 80011f2:	9000      	str	r0, [sp, #0]
 80011f4:	ab06      	add	r3, sp, #24
 80011f6:	2204      	movs	r2, #4
 80011f8:	2100      	movs	r1, #0
 80011fa:	0020      	movs	r0, r4
 80011fc:	f000 fb3b 	bl	8001876 <PE_Send_DataMessage>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1f0      	bne.n	80011e6 <PE_SubStateMachine_Generic+0x16e>
 8001204:	210a      	movs	r1, #10
 8001206:	e165      	b.n	80014d4 <PE_SubStateMachine_Generic+0x45c>
 8001208:	2012      	movs	r0, #18
 800120a:	7720      	strb	r0, [r4, #28]
 800120c:	2105      	movs	r1, #5
 800120e:	7c20      	ldrb	r0, [r4, #16]
 8001210:	f004 ff11 	bl	8006036 <USBDPD_PRL_BistCarrierEyeMode>
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	7460      	strb	r0, [r4, #17]
 8001218:	484f      	ldr	r0, [pc, #316]	; (8001358 <PE_SubStateMachine_Generic+0x2e0>)
 800121a:	83e0      	strh	r0, [r4, #30]
 800121c:	203a      	movs	r0, #58	; 0x3a
 800121e:	e099      	b.n	8001354 <PE_SubStateMachine_Generic+0x2dc>
 8001220:	8be0      	ldrh	r0, [r4, #30]
 8001222:	03f1      	lsls	r1, r6, #15
 8001224:	4288      	cmp	r0, r1
 8001226:	d10e      	bne.n	8001246 <PE_SubStateMachine_Generic+0x1ce>
 8001228:	2105      	movs	r1, #5
 800122a:	7c20      	ldrb	r0, [r4, #16]
 800122c:	f004 ff0b 	bl	8006046 <USBDPD_PRL_BistCarrierEyeModeExit>
 8001230:	83e5      	strh	r5, [r4, #30]
 8001232:	e191      	b.n	8001558 <PE_SubStateMachine_Generic+0x4e0>
 8001234:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001236:	7800      	ldrb	r0, [r0, #0]
 8001238:	2814      	cmp	r0, #20
 800123a:	d004      	beq.n	8001246 <PE_SubStateMachine_Generic+0x1ce>
 800123c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800123e:	7007      	strb	r7, [r0, #0]
 8001240:	0020      	movs	r0, r4
 8001242:	f7ff fd10 	bl	8000c66 <PE_Clear_RxEvent>
 8001246:	e1fa      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	0020      	movs	r0, r4
 800124a:	f000 f9fb 	bl	8001644 <PE_SubStateMachine_ReceiveDRS>
 800124e:	e1f6      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	6861      	ldr	r1, [r4, #4]
 8001252:	6809      	ldr	r1, [r1, #0]
 8001254:	0889      	lsrs	r1, r1, #2
 8001256:	400e      	ands	r6, r1
 8001258:	d002      	beq.n	8001260 <PE_SubStateMachine_Generic+0x1e8>
 800125a:	6960      	ldr	r0, [r4, #20]
 800125c:	0741      	lsls	r1, r0, #29
 800125e:	0fc8      	lsrs	r0, r1, #31
 8001260:	9000      	str	r0, [sp, #0]
 8001262:	2395      	movs	r3, #149	; 0x95
 8001264:	2209      	movs	r2, #9
 8001266:	2100      	movs	r1, #0
 8001268:	0020      	movs	r0, r4
 800126a:	f000 fad9 	bl	8001820 <PE_Send_CtrlMessage>
 800126e:	2800      	cmp	r0, #0
 8001270:	d1ed      	bne.n	800124e <PE_SubStateMachine_Generic+0x1d6>
 8001272:	2010      	movs	r0, #16
 8001274:	7720      	strb	r0, [r4, #28]
 8001276:	4839      	ldr	r0, [pc, #228]	; (800135c <PE_SubStateMachine_Generic+0x2e4>)
 8001278:	83e0      	strh	r0, [r4, #30]
 800127a:	201b      	movs	r0, #27
 800127c:	9004      	str	r0, [sp, #16]
 800127e:	2122      	movs	r1, #34	; 0x22
 8001280:	e128      	b.n	80014d4 <PE_SubStateMachine_Generic+0x45c>
 8001282:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001284:	7800      	ldrb	r0, [r0, #0]
 8001286:	2814      	cmp	r0, #20
 8001288:	d035      	beq.n	80012f6 <PE_SubStateMachine_Generic+0x27e>
 800128a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800128c:	21f0      	movs	r1, #240	; 0xf0
 800128e:	0209      	lsls	r1, r1, #8
 8001290:	4001      	ands	r1, r0
 8001292:	d130      	bne.n	80012f6 <PE_SubStateMachine_Generic+0x27e>
 8001294:	211f      	movs	r1, #31
 8001296:	231f      	movs	r3, #31
 8001298:	4003      	ands	r3, r0
 800129a:	2b03      	cmp	r3, #3
 800129c:	d006      	beq.n	80012ac <PE_SubStateMachine_Generic+0x234>
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d008      	beq.n	80012b4 <PE_SubStateMachine_Generic+0x23c>
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d006      	beq.n	80012b4 <PE_SubStateMachine_Generic+0x23c>
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d015      	beq.n	80012d6 <PE_SubStateMachine_Generic+0x25e>
 80012aa:	e024      	b.n	80012f6 <PE_SubStateMachine_Generic+0x27e>
 80012ac:	0020      	movs	r0, r4
 80012ae:	f000 fa6d 	bl	800178c <PE_SwitchDataRole>
 80012b2:	e008      	b.n	80012c6 <PE_SubStateMachine_Generic+0x24e>
 80012b4:	4001      	ands	r1, r0
 80012b6:	290c      	cmp	r1, #12
 80012b8:	d101      	bne.n	80012be <PE_SubStateMachine_Generic+0x246>
 80012ba:	2126      	movs	r1, #38	; 0x26
 80012bc:	e000      	b.n	80012c0 <PE_SubStateMachine_Generic+0x248>
 80012be:	2127      	movs	r1, #39	; 0x27
 80012c0:	7c20      	ldrb	r0, [r4, #16]
 80012c2:	f7ff fa65 	bl	8000790 <USBPD_PE_Notification>
 80012c6:	2003      	movs	r0, #3
 80012c8:	7460      	strb	r0, [r4, #17]
 80012ca:	9504      	str	r5, [sp, #16]
 80012cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012ce:	7800      	ldrb	r0, [r0, #0]
 80012d0:	2814      	cmp	r0, #20
 80012d2:	d10b      	bne.n	80012ec <PE_SubStateMachine_Generic+0x274>
 80012d4:	e00f      	b.n	80012f6 <PE_SubStateMachine_Generic+0x27e>
 80012d6:	2128      	movs	r1, #40	; 0x28
 80012d8:	7c20      	ldrb	r0, [r4, #16]
 80012da:	f7ff fa59 	bl	8000790 <USBPD_PE_Notification>
 80012de:	2003      	movs	r0, #3
 80012e0:	7460      	strb	r0, [r4, #17]
 80012e2:	9504      	str	r5, [sp, #16]
 80012e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012e6:	7800      	ldrb	r0, [r0, #0]
 80012e8:	2814      	cmp	r0, #20
 80012ea:	d004      	beq.n	80012f6 <PE_SubStateMachine_Generic+0x27e>
 80012ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012ee:	7007      	strb	r7, [r0, #0]
 80012f0:	0020      	movs	r0, r4
 80012f2:	f7ff fcb8 	bl	8000c66 <PE_Clear_RxEvent>
 80012f6:	8be0      	ldrh	r0, [r4, #30]
 80012f8:	03f1      	lsls	r1, r6, #15
 80012fa:	4288      	cmp	r0, r1
 80012fc:	d12b      	bne.n	8001356 <PE_SubStateMachine_Generic+0x2de>
 80012fe:	e12b      	b.n	8001558 <PE_SubStateMachine_Generic+0x4e0>
 8001300:	ab03      	add	r3, sp, #12
 8001302:	aa05      	add	r2, sp, #20
 8001304:	2114      	movs	r1, #20
 8001306:	7c20      	ldrb	r0, [r4, #16]
 8001308:	68a5      	ldr	r5, [r4, #8]
 800130a:	696d      	ldr	r5, [r5, #20]
 800130c:	47a8      	blx	r5
 800130e:	9803      	ldr	r0, [sp, #12]
 8001310:	2800      	cmp	r0, #0
 8001312:	d100      	bne.n	8001316 <PE_SubStateMachine_Generic+0x29e>
 8001314:	e192      	b.n	800163c <PE_SubStateMachine_Generic+0x5c4>
 8001316:	2000      	movs	r0, #0
 8001318:	9002      	str	r0, [sp, #8]
 800131a:	2003      	movs	r0, #3
 800131c:	9001      	str	r0, [sp, #4]
 800131e:	9803      	ldr	r0, [sp, #12]
 8001320:	0880      	lsrs	r0, r0, #2
 8001322:	9000      	str	r0, [sp, #0]
 8001324:	ab05      	add	r3, sp, #20
 8001326:	220c      	movs	r2, #12
 8001328:	e154      	b.n	80015d4 <PE_SubStateMachine_Generic+0x55c>
 800132a:	6861      	ldr	r1, [r4, #4]
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	0889      	lsrs	r1, r1, #2
 8001330:	4031      	ands	r1, r6
 8001332:	d000      	beq.n	8001336 <PE_SubStateMachine_Generic+0x2be>
 8001334:	2001      	movs	r0, #1
 8001336:	9000      	str	r0, [sp, #0]
 8001338:	2368      	movs	r3, #104	; 0x68
 800133a:	2218      	movs	r2, #24
 800133c:	2031      	movs	r0, #49	; 0x31
 800133e:	5c21      	ldrb	r1, [r4, r0]
 8001340:	0020      	movs	r0, r4
 8001342:	f000 fa6d 	bl	8001820 <PE_Send_CtrlMessage>
 8001346:	2800      	cmp	r0, #0
 8001348:	d105      	bne.n	8001356 <PE_SubStateMachine_Generic+0x2de>
 800134a:	200f      	movs	r0, #15
 800134c:	7720      	strb	r0, [r4, #28]
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <PE_SubStateMachine_Generic+0x2e4>)
 8001350:	83e0      	strh	r0, [r4, #30]
 8001352:	201b      	movs	r0, #27
 8001354:	9004      	str	r0, [sp, #16]
 8001356:	e172      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 8001358:	0000803a 	.word	0x0000803a
 800135c:	0000801b 	.word	0x0000801b
 8001360:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001362:	7800      	ldrb	r0, [r0, #0]
 8001364:	2814      	cmp	r0, #20
 8001366:	d023      	beq.n	80013b0 <PE_SubStateMachine_Generic+0x338>
 8001368:	2030      	movs	r0, #48	; 0x30
 800136a:	5c20      	ldrb	r0, [r4, r0]
 800136c:	2131      	movs	r1, #49	; 0x31
 800136e:	5c61      	ldrb	r1, [r4, r1]
 8001370:	4288      	cmp	r0, r1
 8001372:	d11d      	bne.n	80013b0 <PE_SubStateMachine_Generic+0x338>
 8001374:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001376:	0bc1      	lsrs	r1, r0, #15
 8001378:	d11a      	bne.n	80013b0 <PE_SubStateMachine_Generic+0x338>
 800137a:	0b01      	lsrs	r1, r0, #12
 800137c:	0749      	lsls	r1, r1, #29
 800137e:	d017      	beq.n	80013b0 <PE_SubStateMachine_Generic+0x338>
 8001380:	06c0      	lsls	r0, r0, #27
 8001382:	0ec0      	lsrs	r0, r0, #27
 8001384:	280c      	cmp	r0, #12
 8001386:	d113      	bne.n	80013b0 <PE_SubStateMachine_Generic+0x338>
 8001388:	2304      	movs	r3, #4
 800138a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800138c:	1c82      	adds	r2, r0, #2
 800138e:	2114      	movs	r1, #20
 8001390:	7c20      	ldrb	r0, [r4, #16]
 8001392:	68a6      	ldr	r6, [r4, #8]
 8001394:	69b6      	ldr	r6, [r6, #24]
 8001396:	47b0      	blx	r6
 8001398:	2003      	movs	r0, #3
 800139a:	7460      	strb	r0, [r4, #17]
 800139c:	9504      	str	r5, [sp, #16]
 800139e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80013a0:	7800      	ldrb	r0, [r0, #0]
 80013a2:	2814      	cmp	r0, #20
 80013a4:	d004      	beq.n	80013b0 <PE_SubStateMachine_Generic+0x338>
 80013a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80013a8:	7007      	strb	r7, [r0, #0]
 80013aa:	0020      	movs	r0, r4
 80013ac:	f7ff fc5b 	bl	8000c66 <PE_Clear_RxEvent>
 80013b0:	8be0      	ldrh	r0, [r4, #30]
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0209      	lsls	r1, r1, #8
 80013b6:	4288      	cmp	r0, r1
 80013b8:	d108      	bne.n	80013cc <PE_SubStateMachine_Generic+0x354>
 80013ba:	2011      	movs	r0, #17
 80013bc:	e0cd      	b.n	800155a <PE_SubStateMachine_Generic+0x4e2>
 80013be:	9500      	str	r5, [sp, #0]
 80013c0:	2303      	movs	r3, #3
 80013c2:	2210      	movs	r2, #16
 80013c4:	2100      	movs	r1, #0
 80013c6:	0020      	movs	r0, r4
 80013c8:	f000 fa2a 	bl	8001820 <PE_Send_CtrlMessage>
 80013cc:	e137      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 80013ce:	ab03      	add	r3, sp, #12
 80013d0:	48c9      	ldr	r0, [pc, #804]	; (80016f8 <.text_73>)
 80013d2:	1822      	adds	r2, r4, r0
 80013d4:	2108      	movs	r1, #8
 80013d6:	7c20      	ldrb	r0, [r4, #16]
 80013d8:	68a7      	ldr	r7, [r4, #8]
 80013da:	697f      	ldr	r7, [r7, #20]
 80013dc:	47b8      	blx	r7
 80013de:	2118      	movs	r1, #24
 80013e0:	9803      	ldr	r0, [sp, #12]
 80013e2:	f000 f9bb 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d129      	bne.n	800143e <PE_SubStateMachine_Generic+0x3c6>
 80013ea:	48c4      	ldr	r0, [pc, #784]	; (80016fc <.text_74>)
 80013ec:	1826      	adds	r6, r4, r0
 80013ee:	7035      	strb	r5, [r6, #0]
 80013f0:	7075      	strb	r5, [r6, #1]
 80013f2:	7c20      	ldrb	r0, [r4, #16]
 80013f4:	f7ff fe2e 	bl	8001054 <PE_Get_UnchunkedSupport>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d103      	bne.n	8001404 <PE_SubStateMachine_Generic+0x38c>
 80013fc:	7870      	ldrb	r0, [r6, #1]
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	4301      	orrs	r1, r0
 8001402:	7071      	strb	r1, [r6, #1]
 8001404:	9502      	str	r5, [sp, #8]
 8001406:	2003      	movs	r0, #3
 8001408:	9001      	str	r0, [sp, #4]
 800140a:	9803      	ldr	r0, [sp, #12]
 800140c:	1d00      	adds	r0, r0, #4
 800140e:	b280      	uxth	r0, r0
 8001410:	9000      	str	r0, [sp, #0]
 8001412:	48bb      	ldr	r0, [pc, #748]	; (8001700 <.text_75>)
 8001414:	1823      	adds	r3, r4, r0
 8001416:	2201      	movs	r2, #1
 8001418:	2100      	movs	r1, #0
 800141a:	0020      	movs	r0, r4
 800141c:	f000 fb5e 	bl	8001adc <PE_Send_ExtendedMessage>
 8001420:	2148      	movs	r1, #72	; 0x48
 8001422:	e057      	b.n	80014d4 <PE_SubStateMachine_Generic+0x45c>
 8001424:	ab03      	add	r3, sp, #12
 8001426:	48b4      	ldr	r0, [pc, #720]	; (80016f8 <.text_73>)
 8001428:	1822      	adds	r2, r4, r0
 800142a:	2113      	movs	r1, #19
 800142c:	7c20      	ldrb	r0, [r4, #16]
 800142e:	68a7      	ldr	r7, [r4, #8]
 8001430:	697f      	ldr	r7, [r7, #20]
 8001432:	47b8      	blx	r7
 8001434:	2118      	movs	r1, #24
 8001436:	9803      	ldr	r0, [sp, #12]
 8001438:	f000 f990 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 800143c:	2800      	cmp	r0, #0
 800143e:	d000      	beq.n	8001442 <PE_SubStateMachine_Generic+0x3ca>
 8001440:	e0fc      	b.n	800163c <PE_SubStateMachine_Generic+0x5c4>
 8001442:	48ae      	ldr	r0, [pc, #696]	; (80016fc <.text_74>)
 8001444:	1826      	adds	r6, r4, r0
 8001446:	7035      	strb	r5, [r6, #0]
 8001448:	7075      	strb	r5, [r6, #1]
 800144a:	7c20      	ldrb	r0, [r4, #16]
 800144c:	f7ff fe02 	bl	8001054 <PE_Get_UnchunkedSupport>
 8001450:	2800      	cmp	r0, #0
 8001452:	d103      	bne.n	800145c <PE_SubStateMachine_Generic+0x3e4>
 8001454:	7870      	ldrb	r0, [r6, #1]
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	4301      	orrs	r1, r0
 800145a:	7071      	strb	r1, [r6, #1]
 800145c:	9502      	str	r5, [sp, #8]
 800145e:	2003      	movs	r0, #3
 8001460:	9001      	str	r0, [sp, #4]
 8001462:	9803      	ldr	r0, [sp, #12]
 8001464:	1d00      	adds	r0, r0, #4
 8001466:	b280      	uxth	r0, r0
 8001468:	9000      	str	r0, [sp, #0]
 800146a:	48a5      	ldr	r0, [pc, #660]	; (8001700 <.text_75>)
 800146c:	1823      	adds	r3, r4, r0
 800146e:	220f      	movs	r2, #15
 8001470:	2100      	movs	r1, #0
 8001472:	0020      	movs	r0, r4
 8001474:	f000 fb32 	bl	8001adc <PE_Send_ExtendedMessage>
 8001478:	2161      	movs	r1, #97	; 0x61
 800147a:	e02b      	b.n	80014d4 <PE_SubStateMachine_Generic+0x45c>
 800147c:	ab03      	add	r3, sp, #12
 800147e:	489e      	ldr	r0, [pc, #632]	; (80016f8 <.text_73>)
 8001480:	1822      	adds	r2, r4, r0
 8001482:	2109      	movs	r1, #9
 8001484:	7c20      	ldrb	r0, [r4, #16]
 8001486:	68a7      	ldr	r7, [r4, #8]
 8001488:	697f      	ldr	r7, [r7, #20]
 800148a:	47b8      	blx	r7
 800148c:	2107      	movs	r1, #7
 800148e:	9803      	ldr	r0, [sp, #12]
 8001490:	f000 f964 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 8001494:	2800      	cmp	r0, #0
 8001496:	d170      	bne.n	800157a <PE_SubStateMachine_Generic+0x502>
 8001498:	4998      	ldr	r1, [pc, #608]	; (80016fc <.text_74>)
 800149a:	5465      	strb	r5, [r4, r1]
 800149c:	1860      	adds	r0, r4, r1
 800149e:	7045      	strb	r5, [r0, #1]
 80014a0:	7c20      	ldrb	r0, [r4, #16]
 80014a2:	f7ff fdd7 	bl	8001054 <PE_Get_UnchunkedSupport>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d105      	bne.n	80014b6 <PE_SubStateMachine_Generic+0x43e>
 80014aa:	4894      	ldr	r0, [pc, #592]	; (80016fc <.text_74>)
 80014ac:	1820      	adds	r0, r4, r0
 80014ae:	7841      	ldrb	r1, [r0, #1]
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	430a      	orrs	r2, r1
 80014b4:	7042      	strb	r2, [r0, #1]
 80014b6:	9502      	str	r5, [sp, #8]
 80014b8:	2003      	movs	r0, #3
 80014ba:	9001      	str	r0, [sp, #4]
 80014bc:	9803      	ldr	r0, [sp, #12]
 80014be:	1d00      	adds	r0, r0, #4
 80014c0:	b280      	uxth	r0, r0
 80014c2:	9000      	str	r0, [sp, #0]
 80014c4:	488e      	ldr	r0, [pc, #568]	; (8001700 <.text_75>)
 80014c6:	1823      	adds	r3, r4, r0
 80014c8:	2202      	movs	r2, #2
 80014ca:	2100      	movs	r1, #0
 80014cc:	0020      	movs	r0, r4
 80014ce:	f000 fb05 	bl	8001adc <PE_Send_ExtendedMessage>
 80014d2:	214f      	movs	r1, #79	; 0x4f
 80014d4:	7c20      	ldrb	r0, [r4, #16]
 80014d6:	f7ff f95b 	bl	8000790 <USBPD_PE_Notification>
 80014da:	e0b0      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 80014dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80014de:	7800      	ldrb	r0, [r0, #0]
 80014e0:	2814      	cmp	r0, #20
 80014e2:	d034      	beq.n	800154e <PE_SubStateMachine_Generic+0x4d6>
 80014e4:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80014e6:	0bc1      	lsrs	r1, r0, #15
 80014e8:	d11a      	bne.n	8001520 <PE_SubStateMachine_Generic+0x4a8>
 80014ea:	0b01      	lsrs	r1, r0, #12
 80014ec:	0749      	lsls	r1, r1, #29
 80014ee:	d017      	beq.n	8001520 <PE_SubStateMachine_Generic+0x4a8>
 80014f0:	06c0      	lsls	r0, r0, #27
 80014f2:	0ec0      	lsrs	r0, r0, #27
 80014f4:	2805      	cmp	r0, #5
 80014f6:	d113      	bne.n	8001520 <PE_SubStateMachine_Generic+0x4a8>
 80014f8:	2304      	movs	r3, #4
 80014fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80014fc:	1d02      	adds	r2, r0, #4
 80014fe:	210f      	movs	r1, #15
 8001500:	7c20      	ldrb	r0, [r4, #16]
 8001502:	68a6      	ldr	r6, [r4, #8]
 8001504:	69b6      	ldr	r6, [r6, #24]
 8001506:	47b0      	blx	r6
 8001508:	2003      	movs	r0, #3
 800150a:	7460      	strb	r0, [r4, #17]
 800150c:	9504      	str	r5, [sp, #16]
 800150e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001510:	7800      	ldrb	r0, [r0, #0]
 8001512:	2814      	cmp	r0, #20
 8001514:	d004      	beq.n	8001520 <PE_SubStateMachine_Generic+0x4a8>
 8001516:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001518:	700f      	strb	r7, [r1, #0]
 800151a:	0020      	movs	r0, r4
 800151c:	f7ff fba3 	bl	8000c66 <PE_Clear_RxEvent>
 8001520:	2034      	movs	r0, #52	; 0x34
 8001522:	5c20      	ldrb	r0, [r4, r0]
 8001524:	06c0      	lsls	r0, r0, #27
 8001526:	0ec0      	lsrs	r0, r0, #27
 8001528:	2810      	cmp	r0, #16
 800152a:	d110      	bne.n	800154e <PE_SubStateMachine_Generic+0x4d6>
 800152c:	2159      	movs	r1, #89	; 0x59
 800152e:	7c20      	ldrb	r0, [r4, #16]
 8001530:	f7ff f92e 	bl	8000790 <USBPD_PE_Notification>
 8001534:	83e5      	strh	r5, [r4, #30]
 8001536:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001538:	7800      	ldrb	r0, [r0, #0]
 800153a:	2814      	cmp	r0, #20
 800153c:	d004      	beq.n	8001548 <PE_SubStateMachine_Generic+0x4d0>
 800153e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001540:	7007      	strb	r7, [r0, #0]
 8001542:	0020      	movs	r0, r4
 8001544:	f7ff fb8f 	bl	8000c66 <PE_Clear_RxEvent>
 8001548:	2003      	movs	r0, #3
 800154a:	7460      	strb	r0, [r4, #17]
 800154c:	9504      	str	r5, [sp, #16]
 800154e:	8be0      	ldrh	r0, [r4, #30]
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0209      	lsls	r1, r1, #8
 8001554:	4288      	cmp	r0, r1
 8001556:	d172      	bne.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 8001558:	2003      	movs	r0, #3
 800155a:	7460      	strb	r0, [r4, #17]
 800155c:	9504      	str	r5, [sp, #16]
 800155e:	e06e      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 8001560:	ab03      	add	r3, sp, #12
 8001562:	4865      	ldr	r0, [pc, #404]	; (80016f8 <.text_73>)
 8001564:	1822      	adds	r2, r4, r0
 8001566:	210d      	movs	r1, #13
 8001568:	7c20      	ldrb	r0, [r4, #16]
 800156a:	68a7      	ldr	r7, [r4, #8]
 800156c:	697f      	ldr	r7, [r7, #20]
 800156e:	47b8      	blx	r7
 8001570:	2104      	movs	r1, #4
 8001572:	9803      	ldr	r0, [sp, #12]
 8001574:	f000 f8f2 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 8001578:	2800      	cmp	r0, #0
 800157a:	d15f      	bne.n	800163c <PE_SubStateMachine_Generic+0x5c4>
 800157c:	485f      	ldr	r0, [pc, #380]	; (80016fc <.text_74>)
 800157e:	1826      	adds	r6, r4, r0
 8001580:	7035      	strb	r5, [r6, #0]
 8001582:	7075      	strb	r5, [r6, #1]
 8001584:	7c20      	ldrb	r0, [r4, #16]
 8001586:	f7ff fd65 	bl	8001054 <PE_Get_UnchunkedSupport>
 800158a:	2800      	cmp	r0, #0
 800158c:	d103      	bne.n	8001596 <PE_SubStateMachine_Generic+0x51e>
 800158e:	7870      	ldrb	r0, [r6, #1]
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	4301      	orrs	r1, r0
 8001594:	7071      	strb	r1, [r6, #1]
 8001596:	9502      	str	r5, [sp, #8]
 8001598:	2003      	movs	r0, #3
 800159a:	9001      	str	r0, [sp, #4]
 800159c:	9803      	ldr	r0, [sp, #12]
 800159e:	1d00      	adds	r0, r0, #4
 80015a0:	b280      	uxth	r0, r0
 80015a2:	9000      	str	r0, [sp, #0]
 80015a4:	4856      	ldr	r0, [pc, #344]	; (8001700 <.text_75>)
 80015a6:	1823      	adds	r3, r4, r0
 80015a8:	2207      	movs	r2, #7
 80015aa:	e03d      	b.n	8001628 <PE_SubStateMachine_Generic+0x5b0>
 80015ac:	9505      	str	r5, [sp, #20]
 80015ae:	ab03      	add	r3, sp, #12
 80015b0:	aa05      	add	r2, sp, #20
 80015b2:	210f      	movs	r1, #15
 80015b4:	7c20      	ldrb	r0, [r4, #16]
 80015b6:	68a5      	ldr	r5, [r4, #8]
 80015b8:	696d      	ldr	r5, [r5, #20]
 80015ba:	47a8      	blx	r5
 80015bc:	2104      	movs	r1, #4
 80015be:	9803      	ldr	r0, [sp, #12]
 80015c0:	f000 f8cc 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d139      	bne.n	800163c <PE_SubStateMachine_Generic+0x5c4>
 80015c8:	9002      	str	r0, [sp, #8]
 80015ca:	2003      	movs	r0, #3
 80015cc:	9001      	str	r0, [sp, #4]
 80015ce:	9600      	str	r6, [sp, #0]
 80015d0:	ab05      	add	r3, sp, #20
 80015d2:	2205      	movs	r2, #5
 80015d4:	2100      	movs	r1, #0
 80015d6:	0020      	movs	r0, r4
 80015d8:	f000 f94d 	bl	8001876 <PE_Send_DataMessage>
 80015dc:	e02f      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 80015de:	ab03      	add	r3, sp, #12
 80015e0:	4845      	ldr	r0, [pc, #276]	; (80016f8 <.text_73>)
 80015e2:	1822      	adds	r2, r4, r0
 80015e4:	2111      	movs	r1, #17
 80015e6:	7c20      	ldrb	r0, [r4, #16]
 80015e8:	68a7      	ldr	r7, [r4, #8]
 80015ea:	697f      	ldr	r7, [r7, #20]
 80015ec:	47b8      	blx	r7
 80015ee:	2109      	movs	r1, #9
 80015f0:	9803      	ldr	r0, [sp, #12]
 80015f2:	f000 f8b3 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d120      	bne.n	800163c <PE_SubStateMachine_Generic+0x5c4>
 80015fa:	4840      	ldr	r0, [pc, #256]	; (80016fc <.text_74>)
 80015fc:	1826      	adds	r6, r4, r0
 80015fe:	7035      	strb	r5, [r6, #0]
 8001600:	7075      	strb	r5, [r6, #1]
 8001602:	7c20      	ldrb	r0, [r4, #16]
 8001604:	f7ff fd26 	bl	8001054 <PE_Get_UnchunkedSupport>
 8001608:	2800      	cmp	r0, #0
 800160a:	d103      	bne.n	8001614 <PE_SubStateMachine_Generic+0x59c>
 800160c:	7870      	ldrb	r0, [r6, #1]
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4301      	orrs	r1, r0
 8001612:	7071      	strb	r1, [r6, #1]
 8001614:	9502      	str	r5, [sp, #8]
 8001616:	2003      	movs	r0, #3
 8001618:	9001      	str	r0, [sp, #4]
 800161a:	9803      	ldr	r0, [sp, #12]
 800161c:	1d00      	adds	r0, r0, #4
 800161e:	b280      	uxth	r0, r0
 8001620:	9000      	str	r0, [sp, #0]
 8001622:	4837      	ldr	r0, [pc, #220]	; (8001700 <.text_75>)
 8001624:	1823      	adds	r3, r4, r0
 8001626:	2205      	movs	r2, #5
 8001628:	2100      	movs	r1, #0
 800162a:	0020      	movs	r0, r4
 800162c:	f000 fa56 	bl	8001adc <PE_Send_ExtendedMessage>
 8001630:	e005      	b.n	800163e <PE_SubStateMachine_Generic+0x5c6>
 8001632:	2150      	movs	r1, #80	; 0x50
 8001634:	7c20      	ldrb	r0, [r4, #16]
 8001636:	f7ff f8ab 	bl	8000790 <USBPD_PE_Notification>
 800163a:	e78d      	b.n	8001558 <PE_SubStateMachine_Generic+0x4e0>
 800163c:	7466      	strb	r6, [r4, #17]
 800163e:	9804      	ldr	r0, [sp, #16]
 8001640:	b00f      	add	sp, #60	; 0x3c
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001644 <PE_SubStateMachine_ReceiveDRS>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	0004      	movs	r4, r0
 8001648:	252a      	movs	r5, #42	; 0x2a
 800164a:	7c20      	ldrb	r0, [r4, #16]
 800164c:	68a1      	ldr	r1, [r4, #8]
 800164e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001650:	4788      	blx	r1
 8001652:	280a      	cmp	r0, #10
 8001654:	d002      	beq.n	800165c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001656:	280c      	cmp	r0, #12
 8001658:	d017      	beq.n	800168a <PE_SubStateMachine_ReceiveDRS+0x46>
 800165a:	e00d      	b.n	8001678 <PE_SubStateMachine_ReceiveDRS+0x34>
 800165c:	2000      	movs	r0, #0
 800165e:	9000      	str	r0, [sp, #0]
 8001660:	2303      	movs	r3, #3
 8001662:	2203      	movs	r2, #3
 8001664:	2100      	movs	r1, #0
 8001666:	0020      	movs	r0, r4
 8001668:	f000 f8da 	bl	8001820 <PE_Send_CtrlMessage>
 800166c:	2800      	cmp	r0, #0
 800166e:	d10d      	bne.n	800168c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001670:	0020      	movs	r0, r4
 8001672:	f000 f88b 	bl	800178c <PE_SwitchDataRole>
 8001676:	bd31      	pop	{r0, r4, r5, pc}
 8001678:	6860      	ldr	r0, [r4, #4]
 800167a:	7800      	ldrb	r0, [r0, #0]
 800167c:	0780      	lsls	r0, r0, #30
 800167e:	0f80      	lsrs	r0, r0, #30
 8001680:	2802      	cmp	r0, #2
 8001682:	d102      	bne.n	800168a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001684:	2001      	movs	r0, #1
 8001686:	7460      	strb	r0, [r4, #17]
 8001688:	bd31      	pop	{r0, r4, r5, pc}
 800168a:	7465      	strb	r5, [r4, #17]
 800168c:	bd31      	pop	{r0, r4, r5, pc}

0800168e <PE_UpdateTimer>:
 800168e:	b510      	push	{r4, lr}
 8001690:	0002      	movs	r2, r0
 8001692:	2080      	movs	r0, #128	; 0x80
 8001694:	0200      	lsls	r0, r0, #8
 8001696:	0454      	lsls	r4, r2, #17
 8001698:	0c64      	lsrs	r4, r4, #17
 800169a:	42a1      	cmp	r1, r4
 800169c:	da00      	bge.n	80016a0 <PE_UpdateTimer+0x12>
 800169e:	1a50      	subs	r0, r2, r1
 80016a0:	b280      	uxth	r0, r0
 80016a2:	bd10      	pop	{r4, pc}

080016a4 <PE_CallHardResetCallback>:
 80016a4:	6883      	ldr	r3, [r0, #8]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d100      	bne.n	80016ae <PE_CallHardResetCallback+0xa>
 80016ac:	4770      	bx	lr
 80016ae:	b580      	push	{r7, lr}
 80016b0:	7c00      	ldrb	r0, [r0, #16]
 80016b2:	4798      	blx	r3
 80016b4:	bd01      	pop	{r0, pc}

080016b6 <PE_SetPowerNegotiation>:
 80016b6:	b510      	push	{r4, lr}
 80016b8:	6842      	ldr	r2, [r0, #4]
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	055c      	lsls	r4, r3, #21
 80016be:	0f64      	lsrs	r4, r4, #29
 80016c0:	42a1      	cmp	r1, r4
 80016c2:	d00b      	beq.n	80016dc <PE_SetPowerNegotiation+0x26>
 80016c4:	4c2e      	ldr	r4, [pc, #184]	; (8001780 <.text_79>)
 80016c6:	401c      	ands	r4, r3
 80016c8:	0209      	lsls	r1, r1, #8
 80016ca:	23e0      	movs	r3, #224	; 0xe0
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	400b      	ands	r3, r1
 80016d0:	4323      	orrs	r3, r4
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	215a      	movs	r1, #90	; 0x5a
 80016d6:	7c00      	ldrb	r0, [r0, #16]
 80016d8:	f7ff f85a 	bl	8000790 <USBPD_PE_Notification>
 80016dc:	bd10      	pop	{r4, pc}

080016de <USBPD_PE_ExecFastRoleSwapSignalling>:
 80016de:	b580      	push	{r7, lr}
 80016e0:	4928      	ldr	r1, [pc, #160]	; (8001784 <.text_80>)
 80016e2:	0082      	lsls	r2, r0, #2
 80016e4:	5889      	ldr	r1, [r1, r2]
 80016e6:	694a      	ldr	r2, [r1, #20]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4313      	orrs	r3, r2
 80016ee:	614b      	str	r3, [r1, #20]
 80016f0:	6889      	ldr	r1, [r1, #8]
 80016f2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80016f4:	4788      	blx	r1
 80016f6:	bd01      	pop	{r0, pc}

080016f8 <.text_73>:
 80016f8:	00000267 	.word	0x00000267

080016fc <.text_74>:
 80016fc:	00000265 	.word	0x00000265

08001700 <.text_75>:
 8001700:	00000263 	.word	0x00000263

08001704 <PE_CalculateMinTiming>:
 8001704:	0001      	movs	r1, r0
 8001706:	2000      	movs	r0, #0
 8001708:	43c0      	mvns	r0, r0
 800170a:	0c42      	lsrs	r2, r0, #17
 800170c:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800170e:	4213      	tst	r3, r2
 8001710:	d001      	beq.n	8001716 <PE_CalculateMinTiming+0x12>
 8001712:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8001714:	4010      	ands	r0, r2
 8001716:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001718:	4213      	tst	r3, r2
 800171a:	d006      	beq.n	800172a <PE_CalculateMinTiming+0x26>
 800171c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800171e:	4013      	ands	r3, r2
 8001720:	4298      	cmp	r0, r3
 8001722:	d302      	bcc.n	800172a <PE_CalculateMinTiming+0x26>
 8001724:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8001726:	0010      	movs	r0, r2
 8001728:	4008      	ands	r0, r1
 800172a:	4770      	bx	lr

0800172c <PE_SetPowerNegociation>:
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	0005      	movs	r5, r0
 8001730:	000c      	movs	r4, r1
 8001732:	6868      	ldr	r0, [r5, #4]
 8001734:	6800      	ldr	r0, [r0, #0]
 8001736:	0540      	lsls	r0, r0, #21
 8001738:	0f40      	lsrs	r0, r0, #29
 800173a:	4284      	cmp	r4, r0
 800173c:	d003      	beq.n	8001746 <PE_SetPowerNegociation+0x1a>
 800173e:	215a      	movs	r1, #90	; 0x5a
 8001740:	7c28      	ldrb	r0, [r5, #16]
 8001742:	f7ff f825 	bl	8000790 <USBPD_PE_Notification>
 8001746:	6868      	ldr	r0, [r5, #4]
 8001748:	6801      	ldr	r1, [r0, #0]
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <.text_79>)
 800174c:	400a      	ands	r2, r1
 800174e:	0221      	lsls	r1, r4, #8
 8001750:	23e0      	movs	r3, #224	; 0xe0
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	400b      	ands	r3, r1
 8001756:	4313      	orrs	r3, r2
 8001758:	6003      	str	r3, [r0, #0]
 800175a:	bd31      	pop	{r0, r4, r5, pc}

0800175c <PE_CheckDataSizeFromGetDataInfo>:
 800175c:	b51c      	push	{r2, r3, r4, lr}
 800175e:	0002      	movs	r2, r0
 8001760:	2000      	movs	r0, #0
 8001762:	428a      	cmp	r2, r1
 8001764:	d20a      	bcs.n	800177c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001766:	2018      	movs	r0, #24
 8001768:	9000      	str	r0, [sp, #0]
 800176a:	bf00      	nop
 800176c:	a315      	add	r3, pc, #84	; (adr r3, 80017c4 <.text_83>)
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2006      	movs	r0, #6
 8001774:	4c04      	ldr	r4, [pc, #16]	; (8001788 <.text_81>)
 8001776:	6824      	ldr	r4, [r4, #0]
 8001778:	47a0      	blx	r4
 800177a:	2002      	movs	r0, #2
 800177c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001780 <.text_79>:
 8001780:	fffff8ff 	.word	0xfffff8ff

08001784 <.text_80>:
 8001784:	20000178 	.word	0x20000178

08001788 <.text_81>:
 8001788:	20000000 	.word	0x20000000

0800178c <PE_SwitchDataRole>:
 800178c:	b510      	push	{r4, lr}
 800178e:	0004      	movs	r4, r0
 8001790:	6860      	ldr	r0, [r4, #4]
 8001792:	6802      	ldr	r2, [r0, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	08d3      	lsrs	r3, r2, #3
 8001798:	400b      	ands	r3, r1
 800179a:	d107      	bne.n	80017ac <PE_SwitchDataRole+0x20>
 800179c:	2308      	movs	r3, #8
 800179e:	4313      	orrs	r3, r2
 80017a0:	6003      	str	r3, [r0, #0]
 80017a2:	7c20      	ldrb	r0, [r4, #16]
 80017a4:	f004 f9a1 	bl	8005aea <USBPD_PRL_SetHeaderDataRole>
 80017a8:	2125      	movs	r1, #37	; 0x25
 80017aa:	e007      	b.n	80017bc <PE_SwitchDataRole+0x30>
 80017ac:	2108      	movs	r1, #8
 80017ae:	438a      	bics	r2, r1
 80017b0:	6002      	str	r2, [r0, #0]
 80017b2:	2100      	movs	r1, #0
 80017b4:	7c20      	ldrb	r0, [r4, #16]
 80017b6:	f004 f998 	bl	8005aea <USBPD_PRL_SetHeaderDataRole>
 80017ba:	2124      	movs	r1, #36	; 0x24
 80017bc:	7c20      	ldrb	r0, [r4, #16]
 80017be:	f7fe ffe7 	bl	8000790 <USBPD_PE_Notification>
 80017c2:	bd10      	pop	{r4, pc}

080017c4 <.text_83>:
 80017c4:	61746144 	.word	0x61746144
 80017c8:	7a695320 	.word	0x7a695320
 80017cc:	73692065 	.word	0x73692065
 80017d0:	746f6e20 	.word	0x746f6e20
 80017d4:	726f6320 	.word	0x726f6320
 80017d8:	74636572 	.word	0x74636572
 80017dc:	00          	.byte	0x00
 80017dd:	00          	.byte	0x00
	...

080017e0 <USBPD_PE_SetTrace>:
 80017e0:	0001      	movs	r1, r0
 80017e2:	d100      	bne.n	80017e6 <USBPD_PE_SetTrace+0x6>
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <.text_5>)
 80017e6:	4906      	ldr	r1, [pc, #24]	; (8001800 <.text_6>)
 80017e8:	6008      	str	r0, [r1, #0]
 80017ea:	4770      	bx	lr

080017ec <USBPD_PE_CheckLIB>:
 80017ec:	0001      	movs	r1, r0
 80017ee:	2000      	movs	r0, #0
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <.text_7>)
 80017f2:	4291      	cmp	r1, r2
 80017f4:	d100      	bne.n	80017f8 <USBPD_PE_CheckLIB+0xc>
 80017f6:	2001      	movs	r0, #1
 80017f8:	4770      	bx	lr
	...

080017fc <.text_5>:
 80017fc:	0800181f 	.word	0x0800181f

08001800 <.text_6>:
 8001800:	20000000 	.word	0x20000000

08001804 <.text_7>:
 8001804:	30410000 	.word	0x30410000

08001808 <USBPD_PE_GetMemoryConsumption>:
 8001808:	b510      	push	{r4, lr}
 800180a:	f004 f945 	bl	8005a98 <USBPD_PRL_GetMemoryConsumption>
 800180e:	0004      	movs	r4, r0
 8001810:	f7fe fedd 	bl	80005ce <USBPD_CAD_GetMemoryConsumption>
 8001814:	1820      	adds	r0, r4, r0
 8001816:	21e1      	movs	r1, #225	; 0xe1
 8001818:	0109      	lsls	r1, r1, #4
 800181a:	1840      	adds	r0, r0, r1
 800181c:	bd10      	pop	{r4, pc}

0800181e <PE_Trace_Empty>:
 800181e:	4770      	bx	lr

08001820 <PE_Send_CtrlMessage>:
 8001820:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001822:	2501      	movs	r5, #1
 8001824:	0004      	movs	r4, r0
 8001826:	000f      	movs	r7, r1
 8001828:	0016      	movs	r6, r2
 800182a:	6860      	ldr	r0, [r4, #4]
 800182c:	6800      	ldr	r0, [r0, #0]
 800182e:	0b00      	lsrs	r0, r0, #12
 8001830:	4028      	ands	r0, r5
 8001832:	d014      	beq.n	800185e <PE_Send_CtrlMessage+0x3e>
 8001834:	a808      	add	r0, sp, #32
 8001836:	7800      	ldrb	r0, [r0, #0]
 8001838:	9001      	str	r0, [sp, #4]
 800183a:	2002      	movs	r0, #2
 800183c:	9000      	str	r0, [sp, #0]
 800183e:	48a2      	ldr	r0, [pc, #648]	; (8001ac8 <.text_5>)
 8001840:	1823      	adds	r3, r4, r0
 8001842:	0032      	movs	r2, r6
 8001844:	0039      	movs	r1, r7
 8001846:	7c20      	ldrb	r0, [r4, #16]
 8001848:	f004 f99e 	bl	8005b88 <USBPD_PRL_SendMessage>
 800184c:	2803      	cmp	r0, #3
 800184e:	d0ec      	beq.n	800182a <PE_Send_CtrlMessage+0xa>
 8001850:	0039      	movs	r1, r7
 8001852:	2810      	cmp	r0, #16
 8001854:	d00e      	beq.n	8001874 <PE_Send_CtrlMessage+0x54>
 8001856:	2e0d      	cmp	r6, #13
 8001858:	d104      	bne.n	8001864 <PE_Send_CtrlMessage+0x44>
 800185a:	2201      	movs	r2, #1
 800185c:	e003      	b.n	8001866 <PE_Send_CtrlMessage+0x46>
 800185e:	7460      	strb	r0, [r4, #17]
 8001860:	2010      	movs	r0, #16
 8001862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001864:	2200      	movs	r2, #0
 8001866:	466b      	mov	r3, sp
 8001868:	7a1b      	ldrb	r3, [r3, #8]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	0003      	movs	r3, r0
 800186e:	0020      	movs	r0, r4
 8001870:	f000 fc22 	bl	80020b8 <PE_CheckSendMessageStatus>
 8001874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001876 <PE_Send_DataMessage>:
 8001876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	0004      	movs	r4, r0
 800187c:	2000      	movs	r0, #0
 800187e:	4e93      	ldr	r6, [pc, #588]	; (8001acc <.text_6>)
 8001880:	e00c      	b.n	800189c <PE_Send_DataMessage+0x26>
 8001882:	2100      	movs	r1, #0
 8001884:	0082      	lsls	r2, r0, #2
 8001886:	18a2      	adds	r2, r4, r2
 8001888:	1855      	adds	r5, r2, r1
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	00cf      	lsls	r7, r1, #3
 800188e:	40fa      	lsrs	r2, r7
 8001890:	55aa      	strb	r2, [r5, r6]
 8001892:	1c49      	adds	r1, r1, #1
 8001894:	2904      	cmp	r1, #4
 8001896:	d3f5      	bcc.n	8001884 <PE_Send_DataMessage+0xe>
 8001898:	1d1b      	adds	r3, r3, #4
 800189a:	1c40      	adds	r0, r0, #1
 800189c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800189e:	4288      	cmp	r0, r1
 80018a0:	d3ef      	bcc.n	8001882 <PE_Send_DataMessage+0xc>
 80018a2:	6860      	ldr	r0, [r4, #4]
 80018a4:	6800      	ldr	r0, [r0, #0]
 80018a6:	04c1      	lsls	r1, r0, #19
 80018a8:	0fc9      	lsrs	r1, r1, #31
 80018aa:	d01f      	beq.n	80018ec <PE_Send_DataMessage+0x76>
 80018ac:	a80c      	add	r0, sp, #48	; 0x30
 80018ae:	7800      	ldrb	r0, [r0, #0]
 80018b0:	9001      	str	r0, [sp, #4]
 80018b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80018b4:	0080      	lsls	r0, r0, #2
 80018b6:	1c80      	adds	r0, r0, #2
 80018b8:	b280      	uxth	r0, r0
 80018ba:	9000      	str	r0, [sp, #0]
 80018bc:	1eb0      	subs	r0, r6, #2
 80018be:	1823      	adds	r3, r4, r0
 80018c0:	4668      	mov	r0, sp
 80018c2:	7c02      	ldrb	r2, [r0, #16]
 80018c4:	7b01      	ldrb	r1, [r0, #12]
 80018c6:	7c20      	ldrb	r0, [r4, #16]
 80018c8:	f004 f95e 	bl	8005b88 <USBPD_PRL_SendMessage>
 80018cc:	2803      	cmp	r0, #3
 80018ce:	d0e8      	beq.n	80018a2 <PE_Send_DataMessage+0x2c>
 80018d0:	4669      	mov	r1, sp
 80018d2:	7b09      	ldrb	r1, [r1, #12]
 80018d4:	2810      	cmp	r0, #16
 80018d6:	d007      	beq.n	80018e8 <PE_Send_DataMessage+0x72>
 80018d8:	aa0b      	add	r2, sp, #44	; 0x2c
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	0003      	movs	r3, r0
 80018e0:	2200      	movs	r2, #0
 80018e2:	0020      	movs	r0, r4
 80018e4:	f000 fbe8 	bl	80020b8 <PE_CheckSendMessageStatus>
 80018e8:	b005      	add	sp, #20
 80018ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ec:	2010      	movs	r0, #16
 80018ee:	e7fb      	b.n	80018e8 <PE_Send_DataMessage+0x72>

080018f0 <PE_Check_ExtendedMessage>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	0004      	movs	r4, r0
 80018f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018f6:	7881      	ldrb	r1, [r0, #2]
 80018f8:	78c0      	ldrb	r0, [r0, #3]
 80018fa:	0200      	lsls	r0, r0, #8
 80018fc:	1808      	adds	r0, r1, r0
 80018fe:	4974      	ldr	r1, [pc, #464]	; (8001ad0 <.text_7>)
 8001900:	1861      	adds	r1, r4, r1
 8001902:	8008      	strh	r0, [r1, #0]
 8001904:	2234      	movs	r2, #52	; 0x34
 8001906:	5ca2      	ldrb	r2, [r4, r2]
 8001908:	06d2      	lsls	r2, r2, #27
 800190a:	0ed2      	lsrs	r2, r2, #27
 800190c:	708a      	strb	r2, [r1, #2]
 800190e:	2501      	movs	r5, #1
 8001910:	0403      	lsls	r3, r0, #16
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	2201      	movs	r2, #1
 8001916:	401a      	ands	r2, r3
 8001918:	0403      	lsls	r3, r0, #16
 800191a:	0edb      	lsrs	r3, r3, #27
 800191c:	071b      	lsls	r3, r3, #28
 800191e:	d003      	beq.n	8001928 <PE_Check_ExtendedMessage+0x38>
 8001920:	0013      	movs	r3, r2
 8001922:	d001      	beq.n	8001928 <PE_Check_ExtendedMessage+0x38>
 8001924:	2034      	movs	r0, #52	; 0x34
 8001926:	e09e      	b.n	8001a66 <PE_Check_ExtendedMessage+0x176>
 8001928:	05c6      	lsls	r6, r0, #23
 800192a:	0df6      	lsrs	r6, r6, #23
 800192c:	2300      	movs	r3, #0
 800192e:	0407      	lsls	r7, r0, #16
 8001930:	0fff      	lsrs	r7, r7, #31
 8001932:	d10d      	bne.n	8001950 <PE_Check_ExtendedMessage+0x60>
 8001934:	4867      	ldr	r0, [pc, #412]	; (8001ad4 <.text_8>)
 8001936:	5226      	strh	r6, [r4, r0]
 8001938:	4866      	ldr	r0, [pc, #408]	; (8001ad4 <.text_8>)
 800193a:	5a20      	ldrh	r0, [r4, r0]
 800193c:	4283      	cmp	r3, r0
 800193e:	d21b      	bcs.n	8001978 <PE_Check_ExtendedMessage+0x88>
 8001940:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001942:	1d00      	adds	r0, r0, #4
 8001944:	5cc0      	ldrb	r0, [r0, r3]
 8001946:	4a64      	ldr	r2, [pc, #400]	; (8001ad8 <.text_9>)
 8001948:	18a2      	adds	r2, r4, r2
 800194a:	54d0      	strb	r0, [r2, r3]
 800194c:	1c5b      	adds	r3, r3, #1
 800194e:	e7f3      	b.n	8001938 <PE_Check_ExtendedMessage+0x48>
 8001950:	27f8      	movs	r7, #248	; 0xf8
 8001952:	01ff      	lsls	r7, r7, #7
 8001954:	4007      	ands	r7, r0
 8001956:	d106      	bne.n	8001966 <PE_Check_ExtendedMessage+0x76>
 8001958:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800195a:	0440      	lsls	r0, r0, #17
 800195c:	0f40      	lsrs	r0, r0, #29
 800195e:	2807      	cmp	r0, #7
 8001960:	d30a      	bcc.n	8001978 <PE_Check_ExtendedMessage+0x88>
 8001962:	2e1a      	cmp	r6, #26
 8001964:	d908      	bls.n	8001978 <PE_Check_ExtendedMessage+0x88>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d106      	bne.n	8001978 <PE_Check_ExtendedMessage+0x88>
 800196a:	485a      	ldr	r0, [pc, #360]	; (8001ad4 <.text_8>)
 800196c:	5a20      	ldrh	r0, [r4, r0]
 800196e:	42b0      	cmp	r0, r6
 8001970:	d202      	bcs.n	8001978 <PE_Check_ExtendedMessage+0x88>
 8001972:	83e3      	strh	r3, [r4, #30]
 8001974:	2037      	movs	r0, #55	; 0x37
 8001976:	e076      	b.n	8001a66 <PE_Check_ExtendedMessage+0x176>
 8001978:	7889      	ldrb	r1, [r1, #2]
 800197a:	2603      	movs	r6, #3
 800197c:	7f22      	ldrb	r2, [r4, #28]
 800197e:	2a00      	cmp	r2, #0
 8001980:	d039      	beq.n	80019f6 <PE_Check_ExtendedMessage+0x106>
 8001982:	2901      	cmp	r1, #1
 8001984:	d008      	beq.n	8001998 <PE_Check_ExtendedMessage+0xa8>
 8001986:	2902      	cmp	r1, #2
 8001988:	d01c      	beq.n	80019c4 <PE_Check_ExtendedMessage+0xd4>
 800198a:	2905      	cmp	r1, #5
 800198c:	d02a      	beq.n	80019e4 <PE_Check_ExtendedMessage+0xf4>
 800198e:	2907      	cmp	r1, #7
 8001990:	d023      	beq.n	80019da <PE_Check_ExtendedMessage+0xea>
 8001992:	290f      	cmp	r1, #15
 8001994:	d00b      	beq.n	80019ae <PE_Check_ExtendedMessage+0xbe>
 8001996:	e094      	b.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 8001998:	2318      	movs	r3, #24
 800199a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800199c:	1d02      	adds	r2, r0, #4
 800199e:	2108      	movs	r1, #8
 80019a0:	7c20      	ldrb	r0, [r4, #16]
 80019a2:	68a7      	ldr	r7, [r4, #8]
 80019a4:	69bf      	ldr	r7, [r7, #24]
 80019a6:	47b8      	blx	r7
 80019a8:	7466      	strb	r6, [r4, #17]
 80019aa:	2147      	movs	r1, #71	; 0x47
 80019ac:	e014      	b.n	80019d8 <PE_Check_ExtendedMessage+0xe8>
 80019ae:	2318      	movs	r3, #24
 80019b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019b2:	1d02      	adds	r2, r0, #4
 80019b4:	2113      	movs	r1, #19
 80019b6:	7c20      	ldrb	r0, [r4, #16]
 80019b8:	68a7      	ldr	r7, [r4, #8]
 80019ba:	69bf      	ldr	r7, [r7, #24]
 80019bc:	47b8      	blx	r7
 80019be:	7466      	strb	r6, [r4, #17]
 80019c0:	2162      	movs	r1, #98	; 0x62
 80019c2:	e009      	b.n	80019d8 <PE_Check_ExtendedMessage+0xe8>
 80019c4:	2307      	movs	r3, #7
 80019c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019c8:	1d02      	adds	r2, r0, #4
 80019ca:	2109      	movs	r1, #9
 80019cc:	7c20      	ldrb	r0, [r4, #16]
 80019ce:	68a7      	ldr	r7, [r4, #8]
 80019d0:	69bf      	ldr	r7, [r7, #24]
 80019d2:	47b8      	blx	r7
 80019d4:	7466      	strb	r6, [r4, #17]
 80019d6:	214e      	movs	r1, #78	; 0x4e
 80019d8:	e2c7      	b.n	8001f6a <.text_21>
 80019da:	231a      	movs	r3, #26
 80019dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019de:	1d02      	adds	r2, r0, #4
 80019e0:	210d      	movs	r1, #13
 80019e2:	e003      	b.n	80019ec <PE_Check_ExtendedMessage+0xfc>
 80019e4:	2309      	movs	r3, #9
 80019e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019e8:	1d02      	adds	r2, r0, #4
 80019ea:	2111      	movs	r1, #17
 80019ec:	7c20      	ldrb	r0, [r4, #16]
 80019ee:	68a7      	ldr	r7, [r4, #8]
 80019f0:	69bf      	ldr	r7, [r7, #24]
 80019f2:	47b8      	blx	r7
 80019f4:	e063      	b.n	8001abe <PE_Check_ExtendedMessage+0x1ce>
 80019f6:	1ec8      	subs	r0, r1, #3
 80019f8:	2808      	cmp	r0, #8
 80019fa:	d862      	bhi.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <PE_Check_ExtendedMessage+0x114>)
 80019fe:	5c12      	ldrb	r2, [r2, r0]
 8001a00:	4497      	add	pc, r2
 8001a02:	bf00      	nop
 8001a04:	46be280a 	.word	0x46be280a
 8001a08:	669884be 	.word	0x669884be
 8001a0c:	006e      	.short	0x006e
 8001a0e:	6820      	ldr	r0, [r4, #0]
 8001a10:	8900      	ldrh	r0, [r0, #8]
 8001a12:	0b00      	lsrs	r0, r0, #12
 8001a14:	4228      	tst	r0, r5
 8001a16:	d054      	beq.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a1c:	1d02      	adds	r2, r0, #4
 8001a1e:	2110      	movs	r1, #16
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	68a5      	ldr	r5, [r4, #8]
 8001a24:	69ad      	ldr	r5, [r5, #24]
 8001a26:	47a8      	blx	r5
 8001a28:	203a      	movs	r0, #58	; 0x3a
 8001a2a:	e01c      	b.n	8001a66 <PE_Check_ExtendedMessage+0x176>
 8001a2c:	6820      	ldr	r0, [r4, #0]
 8001a2e:	8900      	ldrh	r0, [r0, #8]
 8001a30:	0b00      	lsrs	r0, r0, #12
 8001a32:	4228      	tst	r0, r5
 8001a34:	d045      	beq.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 8001a36:	2301      	movs	r3, #1
 8001a38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a3a:	1d02      	adds	r2, r0, #4
 8001a3c:	210e      	movs	r1, #14
 8001a3e:	7c20      	ldrb	r0, [r4, #16]
 8001a40:	68a5      	ldr	r5, [r4, #8]
 8001a42:	69ad      	ldr	r5, [r5, #24]
 8001a44:	47a8      	blx	r5
 8001a46:	203b      	movs	r0, #59	; 0x3b
 8001a48:	e00d      	b.n	8001a66 <PE_Check_ExtendedMessage+0x176>
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	8900      	ldrh	r0, [r0, #8]
 8001a4e:	0980      	lsrs	r0, r0, #6
 8001a50:	4228      	tst	r0, r5
 8001a52:	d036      	beq.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 8001a54:	2302      	movs	r3, #2
 8001a56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a58:	1d02      	adds	r2, r0, #4
 8001a5a:	210c      	movs	r1, #12
 8001a5c:	7c20      	ldrb	r0, [r4, #16]
 8001a5e:	68a5      	ldr	r5, [r4, #8]
 8001a60:	69ad      	ldr	r5, [r5, #24]
 8001a62:	47a8      	blx	r5
 8001a64:	203c      	movs	r0, #60	; 0x3c
 8001a66:	7460      	strb	r0, [r4, #17]
 8001a68:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001a6a:	6820      	ldr	r0, [r4, #0]
 8001a6c:	8900      	ldrh	r0, [r0, #8]
 8001a6e:	0a80      	lsrs	r0, r0, #10
 8001a70:	e00d      	b.n	8001a8e <PE_Check_ExtendedMessage+0x19e>
 8001a72:	68a0      	ldr	r0, [r4, #8]
 8001a74:	6905      	ldr	r5, [r0, #16]
 8001a76:	2d00      	cmp	r5, #0
 8001a78:	d024      	beq.n	8001ac4 <PE_Check_ExtendedMessage+0x1d4>
 8001a7a:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <.text_8>)
 8001a7c:	5a23      	ldrh	r3, [r4, r0]
 8001a7e:	4816      	ldr	r0, [pc, #88]	; (8001ad8 <.text_9>)
 8001a80:	1822      	adds	r2, r4, r0
 8001a82:	7c20      	ldrb	r0, [r4, #16]
 8001a84:	47a8      	blx	r5
 8001a86:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	8900      	ldrh	r0, [r0, #8]
 8001a8c:	0a40      	lsrs	r0, r0, #9
 8001a8e:	4228      	tst	r0, r5
 8001a90:	d017      	beq.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 8001a92:	68a0      	ldr	r0, [r4, #8]
 8001a94:	6900      	ldr	r0, [r0, #16]
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d109      	bne.n	8001aae <PE_Check_ExtendedMessage+0x1be>
 8001a9a:	e012      	b.n	8001ac2 <PE_Check_ExtendedMessage+0x1d2>
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	8900      	ldrh	r0, [r0, #8]
 8001aa0:	0a40      	lsrs	r0, r0, #9
 8001aa2:	4228      	tst	r0, r5
 8001aa4:	d00e      	beq.n	8001ac4 <PE_Check_ExtendedMessage+0x1d4>
 8001aa6:	68a0      	ldr	r0, [r4, #8]
 8001aa8:	6900      	ldr	r0, [r0, #16]
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d00a      	beq.n	8001ac4 <PE_Check_ExtendedMessage+0x1d4>
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <.text_8>)
 8001ab0:	5a23      	ldrh	r3, [r4, r0]
 8001ab2:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <.text_9>)
 8001ab4:	1822      	adds	r2, r4, r0
 8001ab6:	7c20      	ldrb	r0, [r4, #16]
 8001ab8:	68a5      	ldr	r5, [r4, #8]
 8001aba:	692d      	ldr	r5, [r5, #16]
 8001abc:	47a8      	blx	r5
 8001abe:	7466      	strb	r6, [r4, #17]
 8001ac0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001ac2:	7465      	strb	r5, [r4, #17]
 8001ac4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08001ac8 <.text_5>:
 8001ac8:	00000263 	.word	0x00000263

08001acc <.text_6>:
 8001acc:	00000265 	.word	0x00000265

08001ad0 <.text_7>:
 8001ad0:	0000025a 	.word	0x0000025a

08001ad4 <.text_8>:
 8001ad4:	0000048e 	.word	0x0000048e

08001ad8 <.text_9>:
 8001ad8:	00000281 	.word	0x00000281

08001adc <PE_Send_ExtendedMessage>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001ae2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001ae4:	0004      	movs	r4, r0
 8001ae6:	000d      	movs	r5, r1
 8001ae8:	4668      	mov	r0, sp
 8001aea:	7202      	strb	r2, [r0, #8]
 8001aec:	9303      	str	r3, [sp, #12]
 8001aee:	6860      	ldr	r0, [r4, #4]
 8001af0:	6800      	ldr	r0, [r0, #0]
 8001af2:	04c1      	lsls	r1, r0, #19
 8001af4:	0fc9      	lsrs	r1, r1, #31
 8001af6:	d019      	beq.n	8001b2c <PE_Send_ExtendedMessage+0x50>
 8001af8:	9601      	str	r6, [sp, #4]
 8001afa:	9700      	str	r7, [sp, #0]
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	4668      	mov	r0, sp
 8001b00:	7a00      	ldrb	r0, [r0, #8]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	4302      	orrs	r2, r0
 8001b06:	0029      	movs	r1, r5
 8001b08:	7c20      	ldrb	r0, [r4, #16]
 8001b0a:	f004 f83d 	bl	8005b88 <USBPD_PRL_SendMessage>
 8001b0e:	2803      	cmp	r0, #3
 8001b10:	d0ed      	beq.n	8001aee <PE_Send_ExtendedMessage+0x12>
 8001b12:	0029      	movs	r1, r5
 8001b14:	2810      	cmp	r0, #16
 8001b16:	d007      	beq.n	8001b28 <PE_Send_ExtendedMessage+0x4c>
 8001b18:	aa0b      	add	r2, sp, #44	; 0x2c
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	0003      	movs	r3, r0
 8001b20:	2200      	movs	r2, #0
 8001b22:	0020      	movs	r0, r4
 8001b24:	f000 fac8 	bl	80020b8 <PE_CheckSendMessageStatus>
 8001b28:	b005      	add	sp, #20
 8001b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2c:	2011      	movs	r0, #17
 8001b2e:	7460      	strb	r0, [r4, #17]
 8001b30:	2010      	movs	r0, #16
 8001b32:	e7f9      	b.n	8001b28 <PE_Send_ExtendedMessage+0x4c>

08001b34 <PE_SubStateMachine_ExtendedMessages>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	b085      	sub	sp, #20
 8001b38:	0004      	movs	r4, r0
 8001b3a:	2702      	movs	r7, #2
 8001b3c:	4889      	ldr	r0, [pc, #548]	; (8001d64 <.text_12>)
 8001b3e:	1820      	adds	r0, r4, r0
 8001b40:	9000      	str	r0, [sp, #0]
 8001b42:	2039      	movs	r0, #57	; 0x39
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	466a      	mov	r2, sp
 8001b48:	7211      	strb	r1, [r2, #8]
 8001b4a:	4a87      	ldr	r2, [pc, #540]	; (8001d68 <.text_13>)
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	2603      	movs	r6, #3
 8001b50:	7c63      	ldrb	r3, [r4, #17]
 8001b52:	2b31      	cmp	r3, #49	; 0x31
 8001b54:	d010      	beq.n	8001b78 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001b56:	2b33      	cmp	r3, #51	; 0x33
 8001b58:	d075      	beq.n	8001c46 <PE_SubStateMachine_ExtendedMessages+0x112>
 8001b5a:	2b34      	cmp	r3, #52	; 0x34
 8001b5c:	d07c      	beq.n	8001c58 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001b5e:	2b35      	cmp	r3, #53	; 0x35
 8001b60:	d100      	bne.n	8001b64 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001b62:	e0a8      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001b64:	2b36      	cmp	r3, #54	; 0x36
 8001b66:	d100      	bne.n	8001b6a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001b68:	e0be      	b.n	8001ce8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001b6a:	2b37      	cmp	r3, #55	; 0x37
 8001b6c:	d100      	bne.n	8001b70 <PE_SubStateMachine_ExtendedMessages+0x3c>
 8001b6e:	e0be      	b.n	8001cee <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001b70:	2b38      	cmp	r3, #56	; 0x38
 8001b72:	d100      	bne.n	8001b76 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001b74:	e0ef      	b.n	8001d56 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001b76:	e0f2      	b.n	8001d5e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001b78:	487c      	ldr	r0, [pc, #496]	; (8001d6c <.text_14>)
 8001b7a:	1820      	adds	r0, r4, r0
 8001b7c:	9004      	str	r0, [sp, #16]
 8001b7e:	4669      	mov	r1, sp
 8001b80:	730d      	strb	r5, [r1, #12]
 8001b82:	497b      	ldr	r1, [pc, #492]	; (8001d70 <.text_15>)
 8001b84:	5265      	strh	r5, [r4, r1]
 8001b86:	7c20      	ldrb	r0, [r4, #16]
 8001b88:	f7ff fa64 	bl	8001054 <PE_Get_UnchunkedSupport>
 8001b8c:	2801      	cmp	r0, #1
 8001b8e:	d107      	bne.n	8001ba0 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001b90:	4878      	ldr	r0, [pc, #480]	; (8001d74 <.text_16>)
 8001b92:	1820      	adds	r0, r4, r0
 8001b94:	7005      	strb	r5, [r0, #0]
 8001b96:	7045      	strb	r5, [r0, #1]
 8001b98:	4877      	ldr	r0, [pc, #476]	; (8001d78 <.text_17>)
 8001b9a:	1820      	adds	r0, r4, r0
 8001b9c:	9004      	str	r0, [sp, #16]
 8001b9e:	e028      	b.n	8001bf2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001ba0:	4976      	ldr	r1, [pc, #472]	; (8001d7c <.text_18>)
 8001ba2:	1861      	adds	r1, r4, r1
 8001ba4:	72cd      	strb	r5, [r1, #11]
 8001ba6:	4975      	ldr	r1, [pc, #468]	; (8001d7c <.text_18>)
 8001ba8:	1861      	adds	r1, r4, r1
 8001baa:	730d      	strb	r5, [r1, #12]
 8001bac:	7c20      	ldrb	r0, [r4, #16]
 8001bae:	f7ff fa51 	bl	8001054 <PE_Get_UnchunkedSupport>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d106      	bne.n	8001bc4 <PE_SubStateMachine_ExtendedMessages+0x90>
 8001bb6:	4871      	ldr	r0, [pc, #452]	; (8001d7c <.text_18>)
 8001bb8:	1820      	adds	r0, r4, r0
 8001bba:	7b01      	ldrb	r1, [r0, #12]
 8001bbc:	466a      	mov	r2, sp
 8001bbe:	7a12      	ldrb	r2, [r2, #8]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	7302      	strb	r2, [r0, #12]
 8001bc4:	486a      	ldr	r0, [pc, #424]	; (8001d70 <.text_15>)
 8001bc6:	1820      	adds	r0, r4, r0
 8001bc8:	8841      	ldrh	r1, [r0, #2]
 8001bca:	291b      	cmp	r1, #27
 8001bcc:	d30e      	bcc.n	8001bec <PE_SubStateMachine_ExtendedMessages+0xb8>
 8001bce:	486a      	ldr	r0, [pc, #424]	; (8001d78 <.text_17>)
 8001bd0:	1820      	adds	r0, r4, r0
 8001bd2:	5d40      	ldrb	r0, [r0, r5]
 8001bd4:	9900      	ldr	r1, [sp, #0]
 8001bd6:	5548      	strb	r0, [r1, r5]
 8001bd8:	1c6d      	adds	r5, r5, #1
 8001bda:	2d1a      	cmp	r5, #26
 8001bdc:	d209      	bcs.n	8001bf2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001bde:	e7f6      	b.n	8001bce <PE_SubStateMachine_ExtendedMessages+0x9a>
 8001be0:	4965      	ldr	r1, [pc, #404]	; (8001d78 <.text_17>)
 8001be2:	1861      	adds	r1, r4, r1
 8001be4:	5d49      	ldrb	r1, [r1, r5]
 8001be6:	9a00      	ldr	r2, [sp, #0]
 8001be8:	5551      	strb	r1, [r2, r5]
 8001bea:	1c6d      	adds	r5, r5, #1
 8001bec:	8841      	ldrh	r1, [r0, #2]
 8001bee:	428d      	cmp	r5, r1
 8001bf0:	d3f6      	bcc.n	8001be0 <PE_SubStateMachine_ExtendedMessages+0xac>
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	6961      	ldr	r1, [r4, #20]
 8001bf6:	0949      	lsrs	r1, r1, #5
 8001bf8:	4001      	ands	r1, r0
 8001bfa:	d00a      	beq.n	8001c12 <PE_SubStateMachine_ExtendedMessages+0xde>
 8001bfc:	6861      	ldr	r1, [r4, #4]
 8001bfe:	6809      	ldr	r1, [r1, #0]
 8001c00:	0889      	lsrs	r1, r1, #2
 8001c02:	4001      	ands	r1, r0
 8001c04:	d002      	beq.n	8001c0c <PE_SubStateMachine_ExtendedMessages+0xd8>
 8001c06:	4669      	mov	r1, sp
 8001c08:	7308      	strb	r0, [r1, #12]
 8001c0a:	e001      	b.n	8001c10 <PE_SubStateMachine_ExtendedMessages+0xdc>
 8001c0c:	4669      	mov	r1, sp
 8001c0e:	730f      	strb	r7, [r1, #12]
 8001c10:	2633      	movs	r6, #51	; 0x33
 8001c12:	4668      	mov	r0, sp
 8001c14:	7b00      	ldrb	r0, [r0, #12]
 8001c16:	9002      	str	r0, [sp, #8]
 8001c18:	9601      	str	r6, [sp, #4]
 8001c1a:	4855      	ldr	r0, [pc, #340]	; (8001d70 <.text_15>)
 8001c1c:	1820      	adds	r0, r4, r0
 8001c1e:	8840      	ldrh	r0, [r0, #2]
 8001c20:	1d00      	adds	r0, r0, #4
 8001c22:	b280      	uxth	r0, r0
 8001c24:	9000      	str	r0, [sp, #0]
 8001c26:	9b04      	ldr	r3, [sp, #16]
 8001c28:	4854      	ldr	r0, [pc, #336]	; (8001d7c <.text_18>)
 8001c2a:	1820      	adds	r0, r4, r0
 8001c2c:	78c2      	ldrb	r2, [r0, #3]
 8001c2e:	2033      	movs	r0, #51	; 0x33
 8001c30:	5c21      	ldrb	r1, [r4, r0]
 8001c32:	0020      	movs	r0, r4
 8001c34:	f7ff ff52 	bl	8001adc <PE_Send_ExtendedMessage>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d103      	bne.n	8001c44 <PE_SubStateMachine_ExtendedMessages+0x110>
 8001c3c:	484f      	ldr	r0, [pc, #316]	; (8001d7c <.text_18>)
 8001c3e:	1820      	adds	r0, r4, r0
 8001c40:	7940      	ldrb	r0, [r0, #5]
 8001c42:	7720      	strb	r0, [r4, #28]
 8001c44:	e08b      	b.n	8001d5e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c46:	83e2      	strh	r2, [r4, #30]
 8001c48:	271b      	movs	r7, #27
 8001c4a:	494c      	ldr	r1, [pc, #304]	; (8001d7c <.text_18>)
 8001c4c:	1861      	adds	r1, r4, r1
 8001c4e:	78c9      	ldrb	r1, [r1, #3]
 8001c50:	2904      	cmp	r1, #4
 8001c52:	d151      	bne.n	8001cf8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001c54:	2074      	movs	r0, #116	; 0x74
 8001c56:	e04f      	b.n	8001cf8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001c58:	4848      	ldr	r0, [pc, #288]	; (8001d7c <.text_18>)
 8001c5a:	5a20      	ldrh	r0, [r4, r0]
 8001c5c:	0440      	lsls	r0, r0, #17
 8001c5e:	0f02      	lsrs	r2, r0, #28
 8001c60:	211a      	movs	r1, #26
 8001c62:	4351      	muls	r1, r2
 8001c64:	4842      	ldr	r0, [pc, #264]	; (8001d70 <.text_15>)
 8001c66:	1820      	adds	r0, r4, r0
 8001c68:	8843      	ldrh	r3, [r0, #2]
 8001c6a:	4299      	cmp	r1, r3
 8001c6c:	da01      	bge.n	8001c72 <PE_SubStateMachine_ExtendedMessages+0x13e>
 8001c6e:	2a0a      	cmp	r2, #10
 8001c70:	d301      	bcc.n	8001c76 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001c72:	7466      	strb	r6, [r4, #17]
 8001c74:	e01d      	b.n	8001cb2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001c76:	1a5a      	subs	r2, r3, r1
 8001c78:	2a1a      	cmp	r2, #26
 8001c7a:	d202      	bcs.n	8001c82 <PE_SubStateMachine_ExtendedMessages+0x14e>
 8001c7c:	1a5b      	subs	r3, r3, r1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	e000      	b.n	8001c84 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001c82:	231a      	movs	r3, #26
 8001c84:	2200      	movs	r2, #0
 8001c86:	e006      	b.n	8001c96 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001c88:	4e3b      	ldr	r6, [pc, #236]	; (8001d78 <.text_17>)
 8001c8a:	19a6      	adds	r6, r4, r6
 8001c8c:	188f      	adds	r7, r1, r2
 8001c8e:	5df6      	ldrb	r6, [r6, r7]
 8001c90:	9f00      	ldr	r7, [sp, #0]
 8001c92:	54be      	strb	r6, [r7, r2]
 8001c94:	1c52      	adds	r2, r2, #1
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3f6      	bcc.n	8001c88 <PE_SubStateMachine_ExtendedMessages+0x154>
 8001c9a:	4934      	ldr	r1, [pc, #208]	; (8001d6c <.text_14>)
 8001c9c:	1863      	adds	r3, r4, r1
 8001c9e:	8842      	ldrh	r2, [r0, #2]
 8001ca0:	4836      	ldr	r0, [pc, #216]	; (8001d7c <.text_18>)
 8001ca2:	5a20      	ldrh	r0, [r4, r0]
 8001ca4:	0440      	lsls	r0, r0, #17
 8001ca6:	0f01      	lsrs	r1, r0, #28
 8001ca8:	7c20      	ldrb	r0, [r4, #16]
 8001caa:	f004 fc0e 	bl	80064ca <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001cae:	2035      	movs	r0, #53	; 0x35
 8001cb0:	7460      	strb	r0, [r4, #17]
 8001cb2:	2700      	movs	r7, #0
 8001cb4:	e053      	b.n	8001d5e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001cb6:	6960      	ldr	r0, [r4, #20]
 8001cb8:	0681      	lsls	r1, r0, #26
 8001cba:	0fc9      	lsrs	r1, r1, #31
 8001cbc:	d001      	beq.n	8001cc2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001cbe:	2036      	movs	r0, #54	; 0x36
 8001cc0:	e000      	b.n	8001cc4 <PE_SubStateMachine_ExtendedMessages+0x190>
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	492a      	ldr	r1, [pc, #168]	; (8001d70 <.text_15>)
 8001cc6:	1866      	adds	r6, r4, r1
 8001cc8:	9502      	str	r5, [sp, #8]
 8001cca:	9001      	str	r0, [sp, #4]
 8001ccc:	8870      	ldrh	r0, [r6, #2]
 8001cce:	9000      	str	r0, [sp, #0]
 8001cd0:	4826      	ldr	r0, [pc, #152]	; (8001d6c <.text_14>)
 8001cd2:	1823      	adds	r3, r4, r0
 8001cd4:	3809      	subs	r0, #9
 8001cd6:	1820      	adds	r0, r4, r0
 8001cd8:	78c2      	ldrb	r2, [r0, #3]
 8001cda:	2030      	movs	r0, #48	; 0x30
 8001cdc:	5c21      	ldrb	r1, [r4, r0]
 8001cde:	0020      	movs	r0, r4
 8001ce0:	f7ff fefc 	bl	8001adc <PE_Send_ExtendedMessage>
 8001ce4:	8035      	strh	r5, [r6, #0]
 8001ce6:	e03a      	b.n	8001d5e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001ce8:	83e2      	strh	r2, [r4, #30]
 8001cea:	271b      	movs	r7, #27
 8001cec:	e004      	b.n	8001cf8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001cee:	8be0      	ldrh	r0, [r4, #30]
 8001cf0:	020b      	lsls	r3, r1, #8
 8001cf2:	4298      	cmp	r0, r3
 8001cf4:	d102      	bne.n	8001cfc <PE_SubStateMachine_ExtendedMessages+0x1c8>
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	7460      	strb	r0, [r4, #17]
 8001cfa:	e030      	b.n	8001d5e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001cfc:	83e2      	strh	r2, [r4, #30]
 8001cfe:	271b      	movs	r7, #27
 8001d00:	481a      	ldr	r0, [pc, #104]	; (8001d6c <.text_14>)
 8001d02:	1825      	adds	r5, r4, r0
 8001d04:	0029      	movs	r1, r5
 8001d06:	7c20      	ldrb	r0, [r4, #16]
 8001d08:	f004 fc07 	bl	800651a <USBPD_PRL_PrepareChunkRequest>
 8001d0c:	6860      	ldr	r0, [r4, #4]
 8001d0e:	6800      	ldr	r0, [r0, #0]
 8001d10:	04c1      	lsls	r1, r0, #19
 8001d12:	0fc9      	lsrs	r1, r1, #31
 8001d14:	d012      	beq.n	8001d3c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001d16:	2000      	movs	r0, #0
 8001d18:	9001      	str	r0, [sp, #4]
 8001d1a:	2006      	movs	r0, #6
 8001d1c:	9000      	str	r0, [sp, #0]
 8001d1e:	002b      	movs	r3, r5
 8001d20:	4816      	ldr	r0, [pc, #88]	; (8001d7c <.text_18>)
 8001d22:	1820      	adds	r0, r4, r0
 8001d24:	7880      	ldrb	r0, [r0, #2]
 8001d26:	4669      	mov	r1, sp
 8001d28:	7a0a      	ldrb	r2, [r1, #8]
 8001d2a:	4302      	orrs	r2, r0
 8001d2c:	2030      	movs	r0, #48	; 0x30
 8001d2e:	5c21      	ldrb	r1, [r4, r0]
 8001d30:	7c20      	ldrb	r0, [r4, #16]
 8001d32:	f003 ff29 	bl	8005b88 <USBPD_PRL_SendMessage>
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d0e8      	beq.n	8001d0c <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001d3a:	e002      	b.n	8001d42 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001d3c:	2011      	movs	r0, #17
 8001d3e:	7460      	strb	r0, [r4, #17]
 8001d40:	2010      	movs	r0, #16
 8001d42:	2139      	movs	r1, #57	; 0x39
 8001d44:	9100      	str	r1, [sp, #0]
 8001d46:	0003      	movs	r3, r0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2030      	movs	r0, #48	; 0x30
 8001d4c:	5c21      	ldrb	r1, [r4, r0]
 8001d4e:	0020      	movs	r0, r4
 8001d50:	f000 f9b2 	bl	80020b8 <PE_CheckSendMessageStatus>
 8001d54:	e003      	b.n	8001d5e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001d56:	7466      	strb	r6, [r4, #17]
 8001d58:	2700      	movs	r7, #0
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <.text_15>)
 8001d5c:	5225      	strh	r5, [r4, r0]
 8001d5e:	0038      	movs	r0, r7
 8001d60:	b005      	add	sp, #20
 8001d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d64 <.text_12>:
 8001d64:	00000267 	.word	0x00000267

08001d68 <.text_13>:
 8001d68:	0000801b 	.word	0x0000801b

08001d6c <.text_14>:
 8001d6c:	00000263 	.word	0x00000263

08001d70 <.text_15>:
 8001d70:	0000048e 	.word	0x0000048e

08001d74 <.text_16>:
 8001d74:	00000387 	.word	0x00000387

08001d78 <.text_17>:
 8001d78:	00000385 	.word	0x00000385

08001d7c <.text_18>:
 8001d7c:	0000025a 	.word	0x0000025a

08001d80 <PE_ManageRXEvent>:
 8001d80:	b580      	push	{r7, lr}
 8001d82:	2130      	movs	r1, #48	; 0x30
 8001d84:	5c41      	ldrb	r1, [r0, r1]
 8001d86:	2231      	movs	r2, #49	; 0x31
 8001d88:	5481      	strb	r1, [r0, r2]
 8001d8a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001d8c:	0bca      	lsrs	r2, r1, #15
 8001d8e:	d002      	beq.n	8001d96 <PE_ManageRXEvent+0x16>
 8001d90:	f7ff fdae 	bl	80018f0 <PE_Check_ExtendedMessage>
 8001d94:	bd01      	pop	{r0, pc}
 8001d96:	22f0      	movs	r2, #240	; 0xf0
 8001d98:	0212      	lsls	r2, r2, #8
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	d102      	bne.n	8001da4 <PE_ManageRXEvent+0x24>
 8001d9e:	f000 f805 	bl	8001dac <PE_Check_ControlMessage>
 8001da2:	bd01      	pop	{r0, pc}
 8001da4:	f000 f8e5 	bl	8001f72 <PE_Check_DataMessage>
 8001da8:	bd01      	pop	{r0, pc}
	...

08001dac <PE_Check_ControlMessage>:
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	0004      	movs	r4, r0
 8001db0:	272a      	movs	r7, #42	; 0x2a
 8001db2:	2603      	movs	r6, #3
 8001db4:	2501      	movs	r5, #1
 8001db6:	200b      	movs	r0, #11
 8001db8:	2134      	movs	r1, #52	; 0x34
 8001dba:	5c61      	ldrb	r1, [r4, r1]
 8001dbc:	06c9      	lsls	r1, r1, #27
 8001dbe:	0ec9      	lsrs	r1, r1, #27
 8001dc0:	1e49      	subs	r1, r1, #1
 8001dc2:	2917      	cmp	r1, #23
 8001dc4:	d900      	bls.n	8001dc8 <PE_Check_ControlMessage+0x1c>
 8001dc6:	e0c7      	b.n	8001f58 <PE_Check_ControlMessage+0x1ac>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <PE_Check_ControlMessage+0x24>)
 8001dca:	5c52      	ldrb	r2, [r2, r1]
 8001dcc:	0052      	lsls	r2, r2, #1
 8001dce:	4497      	add	pc, r2
 8001dd0:	c0c00bcb 	.word	0xc0c00bcb
 8001dd4:	5b22c020 	.word	0x5b22c020
 8001dd8:	c0413449 	.word	0xc0413449
 8001ddc:	bec3c319 	.word	0xbec3c319
 8001de0:	9fb7936f 	.word	0x9fb7936f
 8001de4:	bac383b0 	.word	0xbac383b0
 8001de8:	6860      	ldr	r0, [r4, #4]
 8001dea:	6800      	ldr	r0, [r0, #0]
 8001dec:	0880      	lsrs	r0, r0, #2
 8001dee:	4005      	ands	r5, r0
 8001df0:	d000      	beq.n	8001df4 <PE_Check_ControlMessage+0x48>
 8001df2:	e0b9      	b.n	8001f68 <PE_Check_ControlMessage+0x1bc>
 8001df4:	2002      	movs	r0, #2
 8001df6:	7720      	strb	r0, [r4, #28]
 8001df8:	212b      	movs	r1, #43	; 0x2b
 8001dfa:	7c20      	ldrb	r0, [r4, #16]
 8001dfc:	f7fe fcc8 	bl	8000790 <USBPD_PE_Notification>
 8001e00:	2098      	movs	r0, #152	; 0x98
 8001e02:	e0a7      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e04:	7726      	strb	r6, [r4, #28]
 8001e06:	2132      	movs	r1, #50	; 0x32
 8001e08:	7c20      	ldrb	r0, [r4, #16]
 8001e0a:	f7fe fcc1 	bl	8000790 <USBPD_PE_Notification>
 8001e0e:	2010      	movs	r0, #16
 8001e10:	e0a0      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e12:	2133      	movs	r1, #51	; 0x33
 8001e14:	e09c      	b.n	8001f50 <PE_Check_ControlMessage+0x1a4>
 8001e16:	2006      	movs	r0, #6
 8001e18:	7720      	strb	r0, [r4, #28]
 8001e1a:	6860      	ldr	r0, [r4, #4]
 8001e1c:	6800      	ldr	r0, [r0, #0]
 8001e1e:	0881      	lsrs	r1, r0, #2
 8001e20:	4029      	ands	r1, r5
 8001e22:	d104      	bne.n	8001e2e <PE_Check_ControlMessage+0x82>
 8001e24:	6821      	ldr	r1, [r4, #0]
 8001e26:	6849      	ldr	r1, [r1, #4]
 8001e28:	08c9      	lsrs	r1, r1, #3
 8001e2a:	4029      	ands	r1, r5
 8001e2c:	d039      	beq.n	8001ea2 <PE_Check_ControlMessage+0xf6>
 8001e2e:	210c      	movs	r1, #12
 8001e30:	7c20      	ldrb	r0, [r4, #16]
 8001e32:	f7fe fcad 	bl	8000790 <USBPD_PE_Notification>
 8001e36:	204c      	movs	r0, #76	; 0x4c
 8001e38:	e08c      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	6840      	ldr	r0, [r0, #4]
 8001e3e:	08c0      	lsrs	r0, r0, #3
 8001e40:	4028      	ands	r0, r5
 8001e42:	d00a      	beq.n	8001e5a <PE_Check_ControlMessage+0xae>
 8001e44:	2008      	movs	r0, #8
 8001e46:	7720      	strb	r0, [r4, #28]
 8001e48:	213c      	movs	r1, #60	; 0x3c
 8001e4a:	7c20      	ldrb	r0, [r4, #16]
 8001e4c:	f7fe fca0 	bl	8000790 <USBPD_PE_Notification>
 8001e50:	2022      	movs	r0, #34	; 0x22
 8001e52:	e07f      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e54:	68a0      	ldr	r0, [r4, #8]
 8001e56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d07d      	beq.n	8001f58 <PE_Check_ControlMessage+0x1ac>
 8001e5c:	2011      	movs	r0, #17
 8001e5e:	7720      	strb	r0, [r4, #28]
 8001e60:	209d      	movs	r0, #157	; 0x9d
 8001e62:	e077      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e64:	2123      	movs	r1, #35	; 0x23
 8001e66:	7c20      	ldrb	r0, [r4, #16]
 8001e68:	f7fe fc92 	bl	8000790 <USBPD_PE_Notification>
 8001e6c:	6960      	ldr	r0, [r4, #20]
 8001e6e:	05c0      	lsls	r0, r0, #23
 8001e70:	0f40      	lsrs	r0, r0, #29
 8001e72:	d001      	beq.n	8001e78 <PE_Check_ControlMessage+0xcc>
 8001e74:	200f      	movs	r0, #15
 8001e76:	e06d      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e78:	68a0      	ldr	r0, [r4, #8]
 8001e7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d06b      	beq.n	8001f58 <PE_Check_ControlMessage+0x1ac>
 8001e80:	2010      	movs	r0, #16
 8001e82:	7720      	strb	r0, [r4, #28]
 8001e84:	2093      	movs	r0, #147	; 0x93
 8001e86:	e065      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001e88:	6860      	ldr	r0, [r4, #4]
 8001e8a:	6800      	ldr	r0, [r0, #0]
 8001e8c:	0541      	lsls	r1, r0, #21
 8001e8e:	0f49      	lsrs	r1, r1, #29
 8001e90:	2903      	cmp	r1, #3
 8001e92:	d163      	bne.n	8001f5c <PE_Check_ControlMessage+0x1b0>
 8001e94:	0881      	lsrs	r1, r0, #2
 8001e96:	4029      	ands	r1, r5
 8001e98:	d004      	beq.n	8001ea4 <PE_Check_ControlMessage+0xf8>
 8001e9a:	6821      	ldr	r1, [r4, #0]
 8001e9c:	6849      	ldr	r1, [r1, #4]
 8001e9e:	08c9      	lsrs	r1, r1, #3
 8001ea0:	4029      	ands	r1, r5
 8001ea2:	d05b      	beq.n	8001f5c <PE_Check_ControlMessage+0x1b0>
 8001ea4:	2007      	movs	r0, #7
 8001ea6:	7720      	strb	r0, [r4, #28]
 8001ea8:	201d      	movs	r0, #29
 8001eaa:	7460      	strb	r0, [r4, #17]
 8001eac:	2106      	movs	r1, #6
 8001eae:	e04f      	b.n	8001f50 <PE_Check_ControlMessage+0x1a4>
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	8901      	ldrh	r1, [r0, #8]
 8001eb4:	08c9      	lsrs	r1, r1, #3
 8001eb6:	4229      	tst	r1, r5
 8001eb8:	d053      	beq.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001eba:	6861      	ldr	r1, [r4, #4]
 8001ebc:	6809      	ldr	r1, [r1, #0]
 8001ebe:	0889      	lsrs	r1, r1, #2
 8001ec0:	4029      	ands	r1, r5
 8001ec2:	d103      	bne.n	8001ecc <PE_Check_ControlMessage+0x120>
 8001ec4:	6840      	ldr	r0, [r0, #4]
 8001ec6:	08c0      	lsrs	r0, r0, #3
 8001ec8:	4028      	ands	r0, r5
 8001eca:	d04a      	beq.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001ecc:	200a      	movs	r0, #10
 8001ece:	7720      	strb	r0, [r4, #28]
 8001ed0:	2063      	movs	r0, #99	; 0x63
 8001ed2:	7460      	strb	r0, [r4, #17]
 8001ed4:	2146      	movs	r1, #70	; 0x46
 8001ed6:	e03b      	b.n	8001f50 <PE_Check_ControlMessage+0x1a4>
 8001ed8:	6860      	ldr	r0, [r4, #4]
 8001eda:	6800      	ldr	r0, [r0, #0]
 8001edc:	0880      	lsrs	r0, r0, #2
 8001ede:	4028      	ands	r0, r5
 8001ee0:	d004      	beq.n	8001eec <PE_Check_ControlMessage+0x140>
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	6840      	ldr	r0, [r0, #4]
 8001ee6:	08c0      	lsrs	r0, r0, #3
 8001ee8:	4028      	ands	r0, r5
 8001eea:	d03a      	beq.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001eec:	205f      	movs	r0, #95	; 0x5f
 8001eee:	7720      	strb	r0, [r4, #28]
 8001ef0:	2064      	movs	r0, #100	; 0x64
 8001ef2:	7460      	strb	r0, [r4, #17]
 8001ef4:	2160      	movs	r1, #96	; 0x60
 8001ef6:	e02b      	b.n	8001f50 <PE_Check_ControlMessage+0x1a4>
 8001ef8:	6821      	ldr	r1, [r4, #0]
 8001efa:	8909      	ldrh	r1, [r1, #8]
 8001efc:	0949      	lsrs	r1, r1, #5
 8001efe:	4229      	tst	r1, r5
 8001f00:	d02f      	beq.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001f02:	7720      	strb	r0, [r4, #28]
 8001f04:	214d      	movs	r1, #77	; 0x4d
 8001f06:	7c20      	ldrb	r0, [r4, #16]
 8001f08:	f7fe fc42 	bl	8000790 <USBPD_PE_Notification>
 8001f0c:	2030      	movs	r0, #48	; 0x30
 8001f0e:	e021      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001f10:	6821      	ldr	r1, [r4, #0]
 8001f12:	8909      	ldrh	r1, [r1, #8]
 8001f14:	0889      	lsrs	r1, r1, #2
 8001f16:	4229      	tst	r1, r5
 8001f18:	d023      	beq.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001f1a:	7720      	strb	r0, [r4, #28]
 8001f1c:	2149      	movs	r1, #73	; 0x49
 8001f1e:	7c20      	ldrb	r0, [r4, #16]
 8001f20:	f7fe fc36 	bl	8000790 <USBPD_PE_Notification>
 8001f24:	6860      	ldr	r0, [r4, #4]
 8001f26:	6800      	ldr	r0, [r0, #0]
 8001f28:	0880      	lsrs	r0, r0, #2
 8001f2a:	4005      	ands	r5, r0
 8001f2c:	d011      	beq.n	8001f52 <PE_Check_ControlMessage+0x1a6>
 8001f2e:	202d      	movs	r0, #45	; 0x2d
 8001f30:	e010      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	8900      	ldrh	r0, [r0, #8]
 8001f36:	09c0      	lsrs	r0, r0, #7
 8001f38:	4228      	tst	r0, r5
 8001f3a:	d012      	beq.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001f3c:	202f      	movs	r0, #47	; 0x2f
 8001f3e:	e009      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001f40:	2009      	movs	r0, #9
 8001f42:	7720      	strb	r0, [r4, #28]
 8001f44:	e00d      	b.n	8001f62 <PE_Check_ControlMessage+0x1b6>
 8001f46:	200f      	movs	r0, #15
 8001f48:	7720      	strb	r0, [r4, #28]
 8001f4a:	204b      	movs	r0, #75	; 0x4b
 8001f4c:	e002      	b.n	8001f54 <PE_Check_ControlMessage+0x1a8>
 8001f4e:	2159      	movs	r1, #89	; 0x59
 8001f50:	e00b      	b.n	8001f6a <.text_21>
 8001f52:	2011      	movs	r0, #17
 8001f54:	7460      	strb	r0, [r4, #17]
 8001f56:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001f58:	6860      	ldr	r0, [r4, #4]
 8001f5a:	6800      	ldr	r0, [r0, #0]
 8001f5c:	4006      	ands	r6, r0
 8001f5e:	2e02      	cmp	r6, #2
 8001f60:	d101      	bne.n	8001f66 <PE_Check_ControlMessage+0x1ba>
 8001f62:	7465      	strb	r5, [r4, #17]
 8001f64:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001f66:	7467      	strb	r7, [r4, #17]
 8001f68:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001f6a <.text_21>:
 8001f6a:	7c20      	ldrb	r0, [r4, #16]
 8001f6c:	f7fe fc10 	bl	8000790 <USBPD_PE_Notification>
 8001f70:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001f72 <PE_Check_DataMessage>:
 8001f72:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001f74:	0004      	movs	r4, r0
 8001f76:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001f78:	2501      	movs	r5, #1
 8001f7a:	2603      	movs	r6, #3
 8001f7c:	2700      	movs	r7, #0
 8001f7e:	06c1      	lsls	r1, r0, #27
 8001f80:	0ec9      	lsrs	r1, r1, #27
 8001f82:	2901      	cmp	r1, #1
 8001f84:	d027      	beq.n	8001fd6 <PE_Check_DataMessage+0x64>
 8001f86:	2902      	cmp	r1, #2
 8001f88:	d009      	beq.n	8001f9e <PE_Check_DataMessage+0x2c>
 8001f8a:	2903      	cmp	r1, #3
 8001f8c:	d03b      	beq.n	8002006 <PE_Check_DataMessage+0x94>
 8001f8e:	2906      	cmp	r1, #6
 8001f90:	d077      	beq.n	8002082 <PE_Check_DataMessage+0x110>
 8001f92:	2907      	cmp	r1, #7
 8001f94:	d100      	bne.n	8001f98 <PE_Check_DataMessage+0x26>
 8001f96:	e083      	b.n	80020a0 <PE_Check_DataMessage+0x12e>
 8001f98:	290f      	cmp	r1, #15
 8001f9a:	d06e      	beq.n	800207a <PE_Check_DataMessage+0x108>
 8001f9c:	e089      	b.n	80020b2 <PE_Check_DataMessage+0x140>
 8001f9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fa0:	7881      	ldrb	r1, [r0, #2]
 8001fa2:	78c2      	ldrb	r2, [r0, #3]
 8001fa4:	0212      	lsls	r2, r2, #8
 8001fa6:	1889      	adds	r1, r1, r2
 8001fa8:	7902      	ldrb	r2, [r0, #4]
 8001faa:	0412      	lsls	r2, r2, #16
 8001fac:	1889      	adds	r1, r1, r2
 8001fae:	7940      	ldrb	r0, [r0, #5]
 8001fb0:	0600      	lsls	r0, r0, #24
 8001fb2:	1808      	adds	r0, r1, r0
 8001fb4:	9000      	str	r0, [sp, #0]
 8001fb6:	6860      	ldr	r0, [r4, #4]
 8001fb8:	6800      	ldr	r0, [r0, #0]
 8001fba:	0880      	lsrs	r0, r0, #2
 8001fbc:	4028      	ands	r0, r5
 8001fbe:	d07a      	beq.n	80020b6 <PE_Check_DataMessage+0x144>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	466a      	mov	r2, sp
 8001fc4:	2106      	movs	r1, #6
 8001fc6:	7c20      	ldrb	r0, [r4, #16]
 8001fc8:	68a6      	ldr	r6, [r4, #8]
 8001fca:	69b6      	ldr	r6, [r6, #24]
 8001fcc:	47b0      	blx	r6
 8001fce:	7725      	strb	r5, [r4, #28]
 8001fd0:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001fd2:	2009      	movs	r0, #9
 8001fd4:	e06e      	b.n	80020b4 <PE_Check_DataMessage+0x142>
 8001fd6:	6861      	ldr	r1, [r4, #4]
 8001fd8:	6809      	ldr	r1, [r1, #0]
 8001fda:	0889      	lsrs	r1, r1, #2
 8001fdc:	400d      	ands	r5, r1
 8001fde:	d16a      	bne.n	80020b6 <PE_Check_DataMessage+0x144>
 8001fe0:	0980      	lsrs	r0, r0, #6
 8001fe2:	4006      	ands	r6, r0
 8001fe4:	0031      	movs	r1, r6
 8001fe6:	7c20      	ldrb	r0, [r4, #16]
 8001fe8:	f7fe ff8c 	bl	8000f04 <PE_ExtRevisionInteroperability>
 8001fec:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001fee:	0440      	lsls	r0, r0, #17
 8001ff0:	0f40      	lsrs	r0, r0, #29
 8001ff2:	0083      	lsls	r3, r0, #2
 8001ff4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ff6:	1c82      	adds	r2, r0, #2
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	7c20      	ldrb	r0, [r4, #16]
 8001ffc:	68a5      	ldr	r5, [r4, #8]
 8001ffe:	69ad      	ldr	r5, [r5, #24]
 8002000:	47a8      	blx	r5
 8002002:	2044      	movs	r0, #68	; 0x44
 8002004:	e056      	b.n	80020b4 <PE_Check_DataMessage+0x142>
 8002006:	9701      	str	r7, [sp, #4]
 8002008:	9700      	str	r7, [sp, #0]
 800200a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800200c:	7881      	ldrb	r1, [r0, #2]
 800200e:	78c2      	ldrb	r2, [r0, #3]
 8002010:	0212      	lsls	r2, r2, #8
 8002012:	1889      	adds	r1, r1, r2
 8002014:	7902      	ldrb	r2, [r0, #4]
 8002016:	0412      	lsls	r2, r2, #16
 8002018:	1889      	adds	r1, r1, r2
 800201a:	7940      	ldrb	r0, [r0, #5]
 800201c:	0600      	lsls	r0, r0, #24
 800201e:	180d      	adds	r5, r1, r0
 8002020:	466b      	mov	r3, sp
 8002022:	aa01      	add	r2, sp, #4
 8002024:	2103      	movs	r1, #3
 8002026:	7c20      	ldrb	r0, [r4, #16]
 8002028:	68a7      	ldr	r7, [r4, #8]
 800202a:	697f      	ldr	r7, [r7, #20]
 800202c:	47b8      	blx	r7
 800202e:	2104      	movs	r1, #4
 8002030:	9800      	ldr	r0, [sp, #0]
 8002032:	f7ff fb93 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 8002036:	2800      	cmp	r0, #0
 8002038:	d11d      	bne.n	8002076 <PE_Check_DataMessage+0x104>
 800203a:	6860      	ldr	r0, [r4, #4]
 800203c:	6800      	ldr	r0, [r0, #0]
 800203e:	0540      	lsls	r0, r0, #21
 8002040:	0f40      	lsrs	r0, r0, #29
 8002042:	2803      	cmp	r0, #3
 8002044:	d117      	bne.n	8002076 <PE_Check_DataMessage+0x104>
 8002046:	9801      	ldr	r0, [sp, #4]
 8002048:	4938      	ldr	r1, [pc, #224]	; (800212c <.text_24>)
 800204a:	4288      	cmp	r0, r1
 800204c:	d113      	bne.n	8002076 <PE_Check_DataMessage+0x104>
 800204e:	0f28      	lsrs	r0, r5, #28
 8002050:	2805      	cmp	r0, #5
 8002052:	d00e      	beq.n	8002072 <PE_Check_DataMessage+0x100>
 8002054:	2808      	cmp	r0, #8
 8002056:	d00a      	beq.n	800206e <PE_Check_DataMessage+0xfc>
 8002058:	2809      	cmp	r0, #9
 800205a:	d003      	beq.n	8002064 <PE_Check_DataMessage+0xf2>
 800205c:	280a      	cmp	r0, #10
 800205e:	d12a      	bne.n	80020b6 <PE_Check_DataMessage+0x144>
 8002060:	2166      	movs	r1, #102	; 0x66
 8002062:	e000      	b.n	8002066 <PE_Check_DataMessage+0xf4>
 8002064:	2165      	movs	r1, #101	; 0x65
 8002066:	7c20      	ldrb	r0, [r4, #16]
 8002068:	f7fe fb92 	bl	8000790 <USBPD_PE_Notification>
 800206c:	e003      	b.n	8002076 <PE_Check_DataMessage+0x104>
 800206e:	2029      	movs	r0, #41	; 0x29
 8002070:	e020      	b.n	80020b4 <PE_Check_DataMessage+0x142>
 8002072:	2027      	movs	r0, #39	; 0x27
 8002074:	e01e      	b.n	80020b4 <PE_Check_DataMessage+0x142>
 8002076:	7466      	strb	r6, [r4, #17]
 8002078:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800207a:	0020      	movs	r0, r4
 800207c:	f003 fb26 	bl	80056cc <PE_Check_DataMessageVDM>
 8002080:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	8900      	ldrh	r0, [r0, #8]
 8002086:	0900      	lsrs	r0, r0, #4
 8002088:	4228      	tst	r0, r5
 800208a:	d010      	beq.n	80020ae <PE_Check_DataMessage+0x13c>
 800208c:	2304      	movs	r3, #4
 800208e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002090:	1c82      	adds	r2, r0, #2
 8002092:	210b      	movs	r1, #11
 8002094:	7c20      	ldrb	r0, [r4, #16]
 8002096:	68a5      	ldr	r5, [r4, #8]
 8002098:	69ad      	ldr	r5, [r5, #24]
 800209a:	47a8      	blx	r5
 800209c:	202c      	movs	r0, #44	; 0x2c
 800209e:	e009      	b.n	80020b4 <PE_Check_DataMessage+0x142>
 80020a0:	6820      	ldr	r0, [r4, #0]
 80020a2:	8900      	ldrh	r0, [r0, #8]
 80020a4:	0a00      	lsrs	r0, r0, #8
 80020a6:	4228      	tst	r0, r5
 80020a8:	d001      	beq.n	80020ae <PE_Check_DataMessage+0x13c>
 80020aa:	203d      	movs	r0, #61	; 0x3d
 80020ac:	e002      	b.n	80020b4 <PE_Check_DataMessage+0x142>
 80020ae:	7465      	strb	r5, [r4, #17]
 80020b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80020b2:	2011      	movs	r0, #17
 80020b4:	7460      	strb	r0, [r4, #17]
 80020b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080020b8 <PE_CheckSendMessageStatus>:
 80020b8:	b510      	push	{r4, lr}
 80020ba:	000c      	movs	r4, r1
 80020bc:	2110      	movs	r1, #16
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d006      	beq.n	80020d0 <PE_CheckSendMessageStatus+0x18>
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d00e      	beq.n	80020e4 <PE_CheckSendMessageStatus+0x2c>
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d011      	beq.n	80020ee <PE_CheckSendMessageStatus+0x36>
 80020ca:	2b09      	cmp	r3, #9
 80020cc:	d008      	beq.n	80020e0 <PE_CheckSendMessageStatus+0x28>
 80020ce:	e02a      	b.n	8002126 <PE_CheckSendMessageStatus+0x6e>
 80020d0:	9902      	ldr	r1, [sp, #8]
 80020d2:	7441      	strb	r1, [r0, #17]
 80020d4:	6941      	ldr	r1, [r0, #20]
 80020d6:	4a16      	ldr	r2, [pc, #88]	; (8002130 <.text_25>)
 80020d8:	400a      	ands	r2, r1
 80020da:	6142      	str	r2, [r0, #20]
 80020dc:	2100      	movs	r1, #0
 80020de:	e022      	b.n	8002126 <PE_CheckSendMessageStatus+0x6e>
 80020e0:	2109      	movs	r1, #9
 80020e2:	e020      	b.n	8002126 <PE_CheckSendMessageStatus+0x6e>
 80020e4:	6942      	ldr	r2, [r0, #20]
 80020e6:	024b      	lsls	r3, r1, #9
 80020e8:	4313      	orrs	r3, r2
 80020ea:	6143      	str	r3, [r0, #20]
 80020ec:	e01b      	b.n	8002126 <PE_CheckSendMessageStatus+0x6e>
 80020ee:	2c00      	cmp	r4, #0
 80020f0:	d005      	beq.n	80020fe <PE_CheckSendMessageStatus+0x46>
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d101      	bne.n	80020fa <PE_CheckSendMessageStatus+0x42>
 80020f6:	2299      	movs	r2, #153	; 0x99
 80020f8:	e014      	b.n	8002124 <PE_CheckSendMessageStatus+0x6c>
 80020fa:	2107      	movs	r1, #7
 80020fc:	e013      	b.n	8002126 <PE_CheckSendMessageStatus+0x6e>
 80020fe:	6844      	ldr	r4, [r0, #4]
 8002100:	6824      	ldr	r4, [r4, #0]
 8002102:	0a24      	lsrs	r4, r4, #8
 8002104:	4023      	ands	r3, r4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d003      	beq.n	8002112 <PE_CheckSendMessageStatus+0x5a>
 800210a:	2a01      	cmp	r2, #1
 800210c:	d109      	bne.n	8002122 <PE_CheckSendMessageStatus+0x6a>
 800210e:	220f      	movs	r2, #15
 8002110:	e008      	b.n	8002124 <PE_CheckSendMessageStatus+0x6c>
 8002112:	2a00      	cmp	r2, #0
 8002114:	d1fb      	bne.n	800210e <PE_CheckSendMessageStatus+0x56>
 8002116:	6882      	ldr	r2, [r0, #8]
 8002118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800211a:	2a00      	cmp	r2, #0
 800211c:	d0f7      	beq.n	800210e <PE_CheckSendMessageStatus+0x56>
 800211e:	2292      	movs	r2, #146	; 0x92
 8002120:	e000      	b.n	8002124 <PE_CheckSendMessageStatus+0x6c>
 8002122:	2211      	movs	r2, #17
 8002124:	7442      	strb	r2, [r0, #17]
 8002126:	0008      	movs	r0, r1
 8002128:	bd10      	pop	{r4, pc}
	...

0800212c <.text_24>:
 800212c:	00001388 	.word	0x00001388

08002130 <.text_25>:
 8002130:	ffffbfff 	.word	0xffffbfff

08002134 <USBPD_PE_StateMachine_SNK>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	0004      	movs	r4, r0
 800213a:	482e      	ldr	r0, [pc, #184]	; (80021f4 <USBPD_PE_StateMachine_SNK+0xc0>)
 800213c:	00a1      	lsls	r1, r4, #2
 800213e:	5845      	ldr	r5, [r0, r1]
 8002140:	2000      	movs	r0, #0
 8002142:	9004      	str	r0, [sp, #16]
 8002144:	8be8      	ldrh	r0, [r5, #30]
 8002146:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8002148:	050a      	lsls	r2, r1, #20
 800214a:	0f52      	lsrs	r2, r2, #29
 800214c:	1880      	adds	r0, r0, r2
 800214e:	06c9      	lsls	r1, r1, #27
 8002150:	0ec9      	lsrs	r1, r1, #27
 8002152:	1846      	adds	r6, r0, r1
 8002154:	b2b6      	uxth	r6, r6
 8002156:	7c68      	ldrb	r0, [r5, #17]
 8002158:	2848      	cmp	r0, #72	; 0x48
 800215a:	d133      	bne.n	80021c4 <USBPD_PE_StateMachine_SNK+0x90>
 800215c:	0028      	movs	r0, r5
 800215e:	f7fe fe69 	bl	8000e34 <PE_Reset_ZI>
 8002162:	0028      	movs	r0, r5
 8002164:	f7fe fe9c 	bl	8000ea0 <PE_Reset_Counter>
 8002168:	6828      	ldr	r0, [r5, #0]
 800216a:	7900      	ldrb	r0, [r0, #4]
 800216c:	0783      	lsls	r3, r0, #30
 800216e:	0f9b      	lsrs	r3, r3, #30
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	7c28      	ldrb	r0, [r5, #16]
 8002176:	f003 fc92 	bl	8005a9e <USBPD_PRL_SetHeader>
 800217a:	6868      	ldr	r0, [r5, #4]
 800217c:	6801      	ldr	r1, [r0, #0]
 800217e:	2208      	movs	r2, #8
 8002180:	4391      	bics	r1, r2
 8002182:	6001      	str	r1, [r0, #0]
 8002184:	6868      	ldr	r0, [r5, #4]
 8002186:	6801      	ldr	r1, [r0, #0]
 8002188:	2203      	movs	r2, #3
 800218a:	4391      	bics	r1, r2
 800218c:	682a      	ldr	r2, [r5, #0]
 800218e:	7912      	ldrb	r2, [r2, #4]
 8002190:	0792      	lsls	r2, r2, #30
 8002192:	0f92      	lsrs	r2, r2, #30
 8002194:	430a      	orrs	r2, r1
 8002196:	6002      	str	r2, [r0, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	7c28      	ldrb	r0, [r5, #16]
 800219c:	f003 fcf0 	bl	8005b80 <USBPD_PRL_SOPCapability>
 80021a0:	7c28      	ldrb	r0, [r5, #16]
 80021a2:	f003 ff59 	bl	8006058 <USBPD_PRL_Reset>
 80021a6:	203e      	movs	r0, #62	; 0x3e
 80021a8:	7468      	strb	r0, [r5, #17]
 80021aa:	7ca9      	ldrb	r1, [r5, #18]
 80021ac:	293e      	cmp	r1, #62	; 0x3e
 80021ae:	d009      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x90>
 80021b0:	74a8      	strb	r0, [r5, #18]
 80021b2:	2000      	movs	r0, #0
 80021b4:	9000      	str	r0, [sp, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	223e      	movs	r2, #62	; 0x3e
 80021ba:	7c29      	ldrb	r1, [r5, #16]
 80021bc:	2004      	movs	r0, #4
 80021be:	4fba      	ldr	r7, [pc, #744]	; (80024a8 <__iar_annotation$$branch+0x52>)
 80021c0:	683f      	ldr	r7, [r7, #0]
 80021c2:	47b8      	blx	r7
 80021c4:	6968      	ldr	r0, [r5, #20]
 80021c6:	0341      	lsls	r1, r0, #13
 80021c8:	0fc9      	lsrs	r1, r1, #31
 80021ca:	d006      	beq.n	80021da <USBPD_PE_StateMachine_SNK+0xa6>
 80021cc:	49b7      	ldr	r1, [pc, #732]	; (80024ac <__iar_annotation$$branch+0x56>)
 80021ce:	4001      	ands	r1, r0
 80021d0:	6169      	str	r1, [r5, #20]
 80021d2:	2164      	movs	r1, #100	; 0x64
 80021d4:	7c28      	ldrb	r0, [r5, #16]
 80021d6:	f7fe fadb 	bl	8000790 <USBPD_PE_Notification>
 80021da:	0028      	movs	r0, r5
 80021dc:	f7fe fd0c 	bl	8000bf8 <PE_Get_RxEvent>
 80021e0:	4669      	mov	r1, sp
 80021e2:	7308      	strb	r0, [r1, #12]
 80021e4:	4668      	mov	r0, sp
 80021e6:	7b00      	ldrb	r0, [r0, #12]
 80021e8:	2803      	cmp	r0, #3
 80021ea:	d105      	bne.n	80021f8 <USBPD_PE_StateMachine_SNK+0xc4>
 80021ec:	2001      	movs	r0, #1
 80021ee:	b00f      	add	sp, #60	; 0x3c
 80021f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000178 	.word	0x20000178
 80021f8:	4668      	mov	r0, sp
 80021fa:	7344      	strb	r4, [r0, #13]
 80021fc:	9606      	str	r6, [sp, #24]
 80021fe:	2402      	movs	r4, #2
 8002200:	6868      	ldr	r0, [r5, #4]
 8002202:	6800      	ldr	r0, [r0, #0]
 8002204:	04c1      	lsls	r1, r0, #19
 8002206:	0fc9      	lsrs	r1, r1, #31
 8002208:	d100      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0xd8>
 800220a:	e170      	b.n	80024ee <__iar_annotation$$branch+0x98>
 800220c:	6968      	ldr	r0, [r5, #20]
 800220e:	0381      	lsls	r1, r0, #14
 8002210:	0fc9      	lsrs	r1, r1, #31
 8002212:	d014      	beq.n	800223e <USBPD_PE_StateMachine_SNK+0x10a>
 8002214:	21a7      	movs	r1, #167	; 0xa7
 8002216:	7469      	strb	r1, [r5, #17]
 8002218:	4aa5      	ldr	r2, [pc, #660]	; (80024b0 <__iar_annotation$$branch+0x5a>)
 800221a:	4002      	ands	r2, r0
 800221c:	616a      	str	r2, [r5, #20]
 800221e:	2000      	movs	r0, #0
 8002220:	2232      	movs	r2, #50	; 0x32
 8002222:	54a8      	strb	r0, [r5, r2]
 8002224:	7ca8      	ldrb	r0, [r5, #18]
 8002226:	28a7      	cmp	r0, #167	; 0xa7
 8002228:	d02b      	beq.n	8002282 <USBPD_PE_StateMachine_SNK+0x14e>
 800222a:	74a9      	strb	r1, [r5, #18]
 800222c:	2000      	movs	r0, #0
 800222e:	9000      	str	r0, [sp, #0]
 8002230:	2300      	movs	r3, #0
 8002232:	22a7      	movs	r2, #167	; 0xa7
 8002234:	7c29      	ldrb	r1, [r5, #16]
 8002236:	2004      	movs	r0, #4
 8002238:	4e9b      	ldr	r6, [pc, #620]	; (80024a8 <__iar_annotation$$branch+0x52>)
 800223a:	6836      	ldr	r6, [r6, #0]
 800223c:	47b0      	blx	r6
 800223e:	2032      	movs	r0, #50	; 0x32
 8002240:	5c28      	ldrb	r0, [r5, r0]
 8002242:	280f      	cmp	r0, #15
 8002244:	d001      	beq.n	800224a <USBPD_PE_StateMachine_SNK+0x116>
 8002246:	2814      	cmp	r0, #20
 8002248:	d11b      	bne.n	8002282 <USBPD_PE_StateMachine_SNK+0x14e>
 800224a:	4668      	mov	r0, sp
 800224c:	7b00      	ldrb	r0, [r0, #12]
 800224e:	2814      	cmp	r0, #20
 8002250:	d005      	beq.n	800225e <USBPD_PE_StateMachine_SNK+0x12a>
 8002252:	2014      	movs	r0, #20
 8002254:	4669      	mov	r1, sp
 8002256:	7308      	strb	r0, [r1, #12]
 8002258:	0028      	movs	r0, r5
 800225a:	f7fe fd04 	bl	8000c66 <PE_Clear_RxEvent>
 800225e:	2032      	movs	r0, #50	; 0x32
 8002260:	5c2a      	ldrb	r2, [r5, r0]
 8002262:	746a      	strb	r2, [r5, #17]
 8002264:	2000      	movs	r0, #0
 8002266:	2132      	movs	r1, #50	; 0x32
 8002268:	5468      	strb	r0, [r5, r1]
 800226a:	7ca8      	ldrb	r0, [r5, #18]
 800226c:	4290      	cmp	r0, r2
 800226e:	d008      	beq.n	8002282 <USBPD_PE_StateMachine_SNK+0x14e>
 8002270:	74aa      	strb	r2, [r5, #18]
 8002272:	2000      	movs	r0, #0
 8002274:	9000      	str	r0, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	7c29      	ldrb	r1, [r5, #16]
 800227a:	2004      	movs	r0, #4
 800227c:	4e8a      	ldr	r6, [pc, #552]	; (80024a8 <__iar_annotation$$branch+0x52>)
 800227e:	6836      	ldr	r6, [r6, #0]
 8002280:	47b0      	blx	r6
 8002282:	4668      	mov	r0, sp
 8002284:	7b00      	ldrb	r0, [r0, #12]
 8002286:	2811      	cmp	r0, #17
 8002288:	d11e      	bne.n	80022c8 <USBPD_PE_StateMachine_SNK+0x194>
 800228a:	6868      	ldr	r0, [r5, #4]
 800228c:	6800      	ldr	r0, [r0, #0]
 800228e:	0701      	lsls	r1, r0, #28
 8002290:	0fc9      	lsrs	r1, r1, #31
 8002292:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002294:	0680      	lsls	r0, r0, #26
 8002296:	0fc2      	lsrs	r2, r0, #31
 8002298:	4291      	cmp	r1, r2
 800229a:	d115      	bne.n	80022c8 <USBPD_PE_StateMachine_SNK+0x194>
 800229c:	2014      	movs	r0, #20
 800229e:	4669      	mov	r1, sp
 80022a0:	7308      	strb	r0, [r1, #12]
 80022a2:	0028      	movs	r0, r5
 80022a4:	f7fe fcdf 	bl	8000c66 <PE_Clear_RxEvent>
 80022a8:	2092      	movs	r0, #146	; 0x92
 80022aa:	7468      	strb	r0, [r5, #17]
 80022ac:	7ca8      	ldrb	r0, [r5, #18]
 80022ae:	2892      	cmp	r0, #146	; 0x92
 80022b0:	d00a      	beq.n	80022c8 <USBPD_PE_StateMachine_SNK+0x194>
 80022b2:	2092      	movs	r0, #146	; 0x92
 80022b4:	74a8      	strb	r0, [r5, #18]
 80022b6:	2000      	movs	r0, #0
 80022b8:	9000      	str	r0, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	2292      	movs	r2, #146	; 0x92
 80022be:	7c29      	ldrb	r1, [r5, #16]
 80022c0:	2004      	movs	r0, #4
 80022c2:	4e79      	ldr	r6, [pc, #484]	; (80024a8 <__iar_annotation$$branch+0x52>)
 80022c4:	6836      	ldr	r6, [r6, #0]
 80022c6:	47b0      	blx	r6
 80022c8:	9806      	ldr	r0, [sp, #24]
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d001      	beq.n	80022d2 <USBPD_PE_StateMachine_SNK+0x19e>
 80022ce:	2001      	movs	r0, #1
 80022d0:	9004      	str	r0, [sp, #16]
 80022d2:	7c68      	ldrb	r0, [r5, #17]
 80022d4:	4669      	mov	r1, sp
 80022d6:	7008      	strb	r0, [r1, #0]
 80022d8:	4f76      	ldr	r7, [pc, #472]	; (80024b4 <__iar_annotation$$branch+0x5e>)
 80022da:	20f0      	movs	r0, #240	; 0xf0
 80022dc:	0200      	lsls	r0, r0, #8
 80022de:	4e76      	ldr	r6, [pc, #472]	; (80024b8 <__iar_annotation$$branch+0x62>)
 80022e0:	2104      	movs	r1, #4
 80022e2:	466a      	mov	r2, sp
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d100      	bne.n	80022ec <USBPD_PE_StateMachine_SNK+0x1b8>
 80022ea:	e104      	b.n	80024f6 <__iar_annotation$$branch+0xa0>
 80022ec:	1e52      	subs	r2, r2, #1
 80022ee:	d041      	beq.n	8002374 <__iar_annotation$$branch+0x8>
 80022f0:	1e92      	subs	r2, r2, #2
 80022f2:	2a01      	cmp	r2, #1
 80022f4:	d800      	bhi.n	80022f8 <USBPD_PE_StateMachine_SNK+0x1c4>
 80022f6:	e34e      	b.n	8002996 <__iar_annotation$$branch+0x540>
 80022f8:	1e92      	subs	r2, r2, #2
 80022fa:	d100      	bne.n	80022fe <USBPD_PE_StateMachine_SNK+0x1ca>
 80022fc:	e228      	b.n	8002750 <__iar_annotation$$branch+0x2fa>
 80022fe:	3a0a      	subs	r2, #10
 8002300:	d100      	bne.n	8002304 <USBPD_PE_StateMachine_SNK+0x1d0>
 8002302:	e22a      	b.n	800275a <__iar_annotation$$branch+0x304>
 8002304:	1e52      	subs	r2, r2, #1
 8002306:	d100      	bne.n	800230a <USBPD_PE_StateMachine_SNK+0x1d6>
 8002308:	e2c4      	b.n	8002894 <__iar_annotation$$branch+0x43e>
 800230a:	1e52      	subs	r2, r2, #1
 800230c:	d100      	bne.n	8002310 <USBPD_PE_StateMachine_SNK+0x1dc>
 800230e:	e2ce      	b.n	80028ae <__iar_annotation$$branch+0x458>
 8002310:	1ed2      	subs	r2, r2, #3
 8002312:	d100      	bne.n	8002316 <USBPD_PE_StateMachine_SNK+0x1e2>
 8002314:	e255      	b.n	80027c2 <__iar_annotation$$branch+0x36c>
 8002316:	1f12      	subs	r2, r2, #4
 8002318:	2a01      	cmp	r2, #1
 800231a:	d92b      	bls.n	8002374 <__iar_annotation$$branch+0x8>
 800231c:	1e92      	subs	r2, r2, #2
 800231e:	d100      	bne.n	8002322 <USBPD_PE_StateMachine_SNK+0x1ee>
 8002320:	e2fd      	b.n	800291e <__iar_annotation$$branch+0x4c8>
 8002322:	1ed2      	subs	r2, r2, #3
 8002324:	d026      	beq.n	8002374 <__iar_annotation$$branch+0x8>
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	d101      	bne.n	800232e <__iar_annotation$$branch+0x4>

0800232a <__iar_annotation$$branch>:
 800232a:	f000 fbee 	bl	8002b0a <__iar_annotation$$branch+0x6b4>
 800232e:	1f12      	subs	r2, r2, #4
 8002330:	d100      	bne.n	8002334 <__iar_annotation$$branch+0xa>
 8002332:	e340      	b.n	80029b6 <__iar_annotation$$branch+0x560>
 8002334:	1f52      	subs	r2, r2, #5
 8002336:	2a02      	cmp	r2, #2
 8002338:	d91c      	bls.n	8002374 <__iar_annotation$$branch+0x8>
 800233a:	1ed2      	subs	r2, r2, #3
 800233c:	d100      	bne.n	8002340 <__iar_annotation$$branch+0x16>
 800233e:	e321      	b.n	8002984 <__iar_annotation$$branch+0x52e>
 8002340:	1e52      	subs	r2, r2, #1
 8002342:	d101      	bne.n	8002348 <__iar_annotation$$branch+0x4>

08002344 <__iar_annotation$$branch>:
 8002344:	f000 fc63 	bl	8002c0e <__iar_annotation$$branch+0x7b8>
 8002348:	1e52      	subs	r2, r2, #1
 800234a:	d013      	beq.n	8002374 <__iar_annotation$$branch+0x8>
 800234c:	1e92      	subs	r2, r2, #2
 800234e:	d101      	bne.n	8002354 <__iar_annotation$$branch+0x4>

08002350 <__iar_annotation$$branch>:
 8002350:	f000 fcaa 	bl	8002ca8 <__iar_annotation$$branch+0x852>
 8002354:	1e52      	subs	r2, r2, #1
 8002356:	2a01      	cmp	r2, #1
 8002358:	d90c      	bls.n	8002374 <__iar_annotation$$branch+0x8>
 800235a:	1e92      	subs	r2, r2, #2
 800235c:	d001      	beq.n	8002362 <__iar_annotation$$branch+0x12>
 800235e:	1e92      	subs	r2, r2, #2
 8002360:	2a05      	cmp	r2, #5
 8002362:	d801      	bhi.n	8002368 <__iar_annotation$$branch+0x4>

08002364 <__iar_annotation$$branch>:
 8002364:	f000 fce6 	bl	8002d34 <__iar_annotation$$branch+0x8de>
 8002368:	1f92      	subs	r2, r2, #6
 800236a:	d101      	bne.n	8002370 <__iar_annotation$$branch+0x4>

0800236c <__iar_annotation$$branch>:
 800236c:	f000 fcb0 	bl	8002cd0 <__iar_annotation$$branch+0x87a>
 8002370:	1e52      	subs	r2, r2, #1
 8002372:	2a03      	cmp	r2, #3
 8002374:	d801      	bhi.n	800237a <__iar_annotation$$branch+0x4>

08002376 <__iar_annotation$$branch>:
 8002376:	f000 fce1 	bl	8002d3c <__iar_annotation$$branch+0x8e6>
 800237a:	1f12      	subs	r2, r2, #4
 800237c:	d100      	bne.n	8002380 <__iar_annotation$$branch+0xa>
 800237e:	e0d2      	b.n	8002526 <__iar_annotation$$branch+0xd0>
 8002380:	1e92      	subs	r2, r2, #2
 8002382:	d100      	bne.n	8002386 <__iar_annotation$$branch+0x10>
 8002384:	e24d      	b.n	8002822 <__iar_annotation$$branch+0x3cc>
 8002386:	1ed2      	subs	r2, r2, #3
 8002388:	d100      	bne.n	800238c <__iar_annotation$$branch+0x16>
 800238a:	e0e4      	b.n	8002556 <__iar_annotation$$branch+0x100>
 800238c:	1e52      	subs	r2, r2, #1
 800238e:	d100      	bne.n	8002392 <__iar_annotation$$branch+0x1c>
 8002390:	e123      	b.n	80025da <__iar_annotation$$branch+0x184>
 8002392:	1e52      	subs	r2, r2, #1
 8002394:	d100      	bne.n	8002398 <__iar_annotation$$branch+0x22>
 8002396:	e132      	b.n	80025fe <__iar_annotation$$branch+0x1a8>
 8002398:	1e52      	subs	r2, r2, #1
 800239a:	d100      	bne.n	800239e <__iar_annotation$$branch+0x28>
 800239c:	e14b      	b.n	8002636 <__iar_annotation$$branch+0x1e0>
 800239e:	1e52      	subs	r2, r2, #1
 80023a0:	d100      	bne.n	80023a4 <__iar_annotation$$branch+0x2e>
 80023a2:	e19b      	b.n	80026dc <__iar_annotation$$branch+0x286>
 80023a4:	1e92      	subs	r2, r2, #2
 80023a6:	d0a5      	beq.n	80022f4 <USBPD_PE_StateMachine_SNK+0x1c0>
 80023a8:	1e92      	subs	r2, r2, #2
 80023aa:	d0e3      	beq.n	8002374 <__iar_annotation$$branch+0x8>
 80023ac:	1e52      	subs	r2, r2, #1
 80023ae:	d101      	bne.n	80023b4 <__iar_annotation$$branch+0x4>

080023b0 <__iar_annotation$$branch>:
 80023b0:	f000 fc0f 	bl	8002bd2 <__iar_annotation$$branch+0x77c>
 80023b4:	1f12      	subs	r2, r2, #4
 80023b6:	d100      	bne.n	80023ba <__iar_annotation$$branch+0xa>
 80023b8:	e294      	b.n	80028e4 <__iar_annotation$$branch+0x48e>
 80023ba:	1ed2      	subs	r2, r2, #3
 80023bc:	d100      	bne.n	80023c0 <__iar_annotation$$branch+0x10>
 80023be:	e35e      	b.n	8002a7e <__iar_annotation$$branch+0x628>
 80023c0:	1f52      	subs	r2, r2, #5
 80023c2:	d100      	bne.n	80023c6 <__iar_annotation$$branch+0x16>
 80023c4:	e3b2      	b.n	8002b2c <__iar_annotation$$branch+0x6d6>
 80023c6:	1e52      	subs	r2, r2, #1
 80023c8:	d100      	bne.n	80023cc <__iar_annotation$$branch+0x1c>
 80023ca:	e329      	b.n	8002a20 <__iar_annotation$$branch+0x5ca>
 80023cc:	3a09      	subs	r2, #9
 80023ce:	2a02      	cmp	r2, #2
 80023d0:	d9d0      	bls.n	8002374 <__iar_annotation$$branch+0x8>
 80023d2:	1ed2      	subs	r2, r2, #3
 80023d4:	d101      	bne.n	80023da <__iar_annotation$$branch+0x4>

080023d6 <__iar_annotation$$branch>:
 80023d6:	f000 fc2b 	bl	8002c30 <__iar_annotation$$branch+0x7da>
 80023da:	1e52      	subs	r2, r2, #1
 80023dc:	d101      	bne.n	80023e2 <__iar_annotation$$branch+0x4>

080023de <__iar_annotation$$branch>:
 80023de:	f000 fc39 	bl	8002c54 <__iar_annotation$$branch+0x7fe>
 80023e2:	1e52      	subs	r2, r2, #1
 80023e4:	2a01      	cmp	r2, #1
 80023e6:	d9c5      	bls.n	8002374 <__iar_annotation$$branch+0x8>
 80023e8:	3a0d      	subs	r2, #13
 80023ea:	d0c3      	beq.n	8002374 <__iar_annotation$$branch+0x8>
 80023ec:	3a12      	subs	r2, #18
 80023ee:	d101      	bne.n	80023f4 <__iar_annotation$$branch+0x4>

080023f0 <__iar_annotation$$branch>:
 80023f0:	f000 fcbc 	bl	8002d6c <__iar_annotation$$branch+0x916>
 80023f4:	3a0c      	subs	r2, #12
 80023f6:	d100      	bne.n	80023fa <__iar_annotation$$branch+0xa>
 80023f8:	e089      	b.n	800250e <__iar_annotation$$branch+0xb8>
 80023fa:	1e52      	subs	r2, r2, #1
 80023fc:	2a02      	cmp	r2, #2
 80023fe:	d9b9      	bls.n	8002374 <__iar_annotation$$branch+0x8>
 8002400:	1f52      	subs	r2, r2, #5
 8002402:	d100      	bne.n	8002406 <__iar_annotation$$branch+0x16>
 8002404:	e29a      	b.n	800293c <__iar_annotation$$branch+0x4e6>
 8002406:	1e52      	subs	r2, r2, #1
 8002408:	d0b4      	beq.n	8002374 <__iar_annotation$$branch+0x8>
 800240a:	1e52      	subs	r2, r2, #1
 800240c:	d100      	bne.n	8002410 <__iar_annotation$$branch+0x20>
 800240e:	e19f      	b.n	8002750 <__iar_annotation$$branch+0x2fa>
 8002410:	1e52      	subs	r2, r2, #1
 8002412:	d100      	bne.n	8002416 <__iar_annotation$$branch+0x26>
 8002414:	e1e9      	b.n	80027ea <__iar_annotation$$branch+0x394>
 8002416:	1e52      	subs	r2, r2, #1
 8002418:	2a08      	cmp	r2, #8
 800241a:	d801      	bhi.n	8002420 <__iar_annotation$$branch+0x4>

0800241c <__iar_annotation$$branch>:
 800241c:	f000 fc93 	bl	8002d46 <__iar_annotation$$branch+0x8f0>
 8002420:	3a0b      	subs	r2, #11
 8002422:	d101      	bne.n	8002428 <__iar_annotation$$branch+0x4>

08002424 <__iar_annotation$$branch>:
 8002424:	f000 fca8 	bl	8002d78 <__iar_annotation$$branch+0x922>
 8002428:	a903      	add	r1, sp, #12
 800242a:	0028      	movs	r0, r5
 800242c:	f002 fa38 	bl	80048a0 <PE_StateMachine_VDM>
 8002430:	0004      	movs	r4, r0
 8002432:	7c6a      	ldrb	r2, [r5, #17]
 8002434:	7ca8      	ldrb	r0, [r5, #18]
 8002436:	4290      	cmp	r0, r2
 8002438:	d008      	beq.n	800244c <__iar_annotation$$branch+0x28>
 800243a:	74aa      	strb	r2, [r5, #18]
 800243c:	2000      	movs	r0, #0
 800243e:	9000      	str	r0, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	7c29      	ldrb	r1, [r5, #16]
 8002444:	2004      	movs	r0, #4
 8002446:	4e18      	ldr	r6, [pc, #96]	; (80024a8 <__iar_annotation$$branch+0x52>)
 8002448:	6836      	ldr	r6, [r6, #0]
 800244a:	47b0      	blx	r6
 800244c:	4e16      	ldr	r6, [pc, #88]	; (80024a8 <__iar_annotation$$branch+0x52>)
 800244e:	4668      	mov	r0, sp
 8002450:	7b00      	ldrb	r0, [r0, #12]
 8002452:	2814      	cmp	r0, #20
 8002454:	d101      	bne.n	800245a <__iar_annotation$$branch+0x4>

08002456 <__iar_annotation$$branch>:
 8002456:	f000 fc9c 	bl	8002d92 <__iar_annotation$$branch+0x93c>
 800245a:	0028      	movs	r0, r5
 800245c:	f7fe fc4a 	bl	8000cf4 <PE_Check_AMSConflict>
 8002460:	2815      	cmp	r0, #21
 8002462:	d109      	bne.n	8002478 <__iar_annotation$$branch+0x22>
 8002464:	4668      	mov	r0, sp
 8002466:	7b00      	ldrb	r0, [r0, #12]
 8002468:	2814      	cmp	r0, #20
 800246a:	d005      	beq.n	8002478 <__iar_annotation$$branch+0x22>
 800246c:	2014      	movs	r0, #20
 800246e:	4669      	mov	r1, sp
 8002470:	7308      	strb	r0, [r1, #12]
 8002472:	0028      	movs	r0, r5
 8002474:	f7fe fbf7 	bl	8000c66 <PE_Clear_RxEvent>
 8002478:	7c6a      	ldrb	r2, [r5, #17]
 800247a:	7ca8      	ldrb	r0, [r5, #18]
 800247c:	4290      	cmp	r0, r2
 800247e:	d007      	beq.n	8002490 <__iar_annotation$$branch+0x3a>
 8002480:	74aa      	strb	r2, [r5, #18]
 8002482:	2000      	movs	r0, #0
 8002484:	9000      	str	r0, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	7c29      	ldrb	r1, [r5, #16]
 800248a:	2004      	movs	r0, #4
 800248c:	6834      	ldr	r4, [r6, #0]
 800248e:	47a0      	blx	r4
 8002490:	2400      	movs	r4, #0
 8002492:	6968      	ldr	r0, [r5, #20]
 8002494:	49aa      	ldr	r1, [pc, #680]	; (8002740 <__iar_annotation$$branch+0x2ea>)
 8002496:	4001      	ands	r1, r0
 8002498:	6169      	str	r1, [r5, #20]
 800249a:	9804      	ldr	r0, [sp, #16]
 800249c:	2800      	cmp	r0, #0
 800249e:	d022      	beq.n	80024e6 <__iar_annotation$$branch+0x90>
 80024a0:	48a8      	ldr	r0, [pc, #672]	; (8002744 <__iar_annotation$$branch+0x2ee>)
 80024a2:	6800      	ldr	r0, [r0, #0]
 80024a4:	49a8      	ldr	r1, [pc, #672]	; (8002748 <__iar_annotation$$branch+0x2f2>)
 80024a6:	e009      	b.n	80024bc <__iar_annotation$$branch+0x66>
 80024a8:	20000000 	.word	0x20000000
 80024ac:	fffbffff 	.word	0xfffbffff
 80024b0:	fffdffff 	.word	0xfffdffff
 80024b4:	000081f4 	.word	0x000081f4
 80024b8:	0000801b 	.word	0x0000801b
 80024bc:	4288      	cmp	r0, r1
 80024be:	d012      	beq.n	80024e6 <__iar_annotation$$branch+0x90>
 80024c0:	48a2      	ldr	r0, [pc, #648]	; (800274c <__iar_annotation$$branch+0x2f6>)
 80024c2:	7c29      	ldrb	r1, [r5, #16]
 80024c4:	0089      	lsls	r1, r1, #2
 80024c6:	5841      	ldr	r1, [r0, r1]
 80024c8:	694a      	ldr	r2, [r1, #20]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	031b      	lsls	r3, r3, #12
 80024ce:	18d2      	adds	r2, r2, r3
 80024d0:	614a      	str	r2, [r1, #20]
 80024d2:	7c29      	ldrb	r1, [r5, #16]
 80024d4:	0089      	lsls	r1, r1, #2
 80024d6:	5840      	ldr	r0, [r0, r1]
 80024d8:	6941      	ldr	r1, [r0, #20]
 80024da:	0cca      	lsrs	r2, r1, #19
 80024dc:	2a08      	cmp	r2, #8
 80024de:	d302      	bcc.n	80024e6 <__iar_annotation$$branch+0x90>
 80024e0:	0349      	lsls	r1, r1, #13
 80024e2:	0b49      	lsrs	r1, r1, #13
 80024e4:	6141      	str	r1, [r0, #20]
 80024e6:	2c00      	cmp	r4, #0
 80024e8:	d100      	bne.n	80024ec <__iar_annotation$$branch+0x96>
 80024ea:	e688      	b.n	80021fe <USBPD_PE_StateMachine_SNK+0xca>
 80024ec:	e001      	b.n	80024f2 <__iar_annotation$$branch+0x9c>
 80024ee:	2400      	movs	r4, #0
 80024f0:	43e4      	mvns	r4, r4
 80024f2:	0020      	movs	r0, r4
 80024f4:	e67b      	b.n	80021ee <USBPD_PE_StateMachine_SNK+0xba>
 80024f6:	6868      	ldr	r0, [r5, #4]
 80024f8:	6801      	ldr	r1, [r0, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	4391      	bics	r1, r2
 80024fe:	6001      	str	r1, [r0, #0]
 8002500:	215f      	movs	r1, #95	; 0x5f
 8002502:	7c28      	ldrb	r0, [r5, #16]
 8002504:	f7fe f944 	bl	8000790 <USBPD_PE_Notification>
 8002508:	2400      	movs	r4, #0
 800250a:	43e4      	mvns	r4, r4
 800250c:	e791      	b.n	8002432 <__iar_annotation$$branch+0xe>
 800250e:	6868      	ldr	r0, [r5, #4]
 8002510:	6801      	ldr	r1, [r0, #0]
 8002512:	2210      	movs	r2, #16
 8002514:	4391      	bics	r1, r2
 8002516:	6001      	str	r1, [r0, #0]
 8002518:	68a8      	ldr	r0, [r5, #8]
 800251a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800251c:	2900      	cmp	r1, #0
 800251e:	d0f3      	beq.n	8002508 <__iar_annotation$$branch+0xb2>
 8002520:	7c28      	ldrb	r0, [r5, #16]
 8002522:	4788      	blx	r1
 8002524:	e7f0      	b.n	8002508 <__iar_annotation$$branch+0xb2>
 8002526:	6868      	ldr	r0, [r5, #4]
 8002528:	6801      	ldr	r1, [r0, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	0b0b      	lsrs	r3, r1, #12
 800252e:	4013      	ands	r3, r2
 8002530:	d0ec      	beq.n	800250c <__iar_annotation$$branch+0xb6>
 8002532:	078b      	lsls	r3, r1, #30
 8002534:	0f9b      	lsrs	r3, r3, #30
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <__iar_annotation$$branch+0xe8>
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <__iar_annotation$$branch+0xea>
 800253e:	2320      	movs	r3, #32
 8002540:	2420      	movs	r4, #32
 8002542:	43a1      	bics	r1, r4
 8002544:	430b      	orrs	r3, r1
 8002546:	6003      	str	r3, [r0, #0]
 8002548:	772a      	strb	r2, [r5, #28]
 800254a:	83ef      	strh	r7, [r5, #30]
 800254c:	24fa      	movs	r4, #250	; 0xfa
 800254e:	0064      	lsls	r4, r4, #1
 8002550:	2043      	movs	r0, #67	; 0x43
 8002552:	7468      	strb	r0, [r5, #17]
 8002554:	e76d      	b.n	8002432 <__iar_annotation$$branch+0xe>
 8002556:	4668      	mov	r0, sp
 8002558:	7b00      	ldrb	r0, [r0, #12]
 800255a:	2811      	cmp	r0, #17
 800255c:	d135      	bne.n	80025ca <__iar_annotation$$branch+0x174>
 800255e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002560:	0bc2      	lsrs	r2, r0, #15
 8002562:	d12c      	bne.n	80025be <__iar_annotation$$branch+0x168>
 8002564:	2607      	movs	r6, #7
 8002566:	0b02      	lsrs	r2, r0, #12
 8002568:	4232      	tst	r2, r6
 800256a:	d028      	beq.n	80025be <__iar_annotation$$branch+0x168>
 800256c:	06c2      	lsls	r2, r0, #27
 800256e:	0ed2      	lsrs	r2, r2, #27
 8002570:	2a01      	cmp	r2, #1
 8002572:	d124      	bne.n	80025be <__iar_annotation$$branch+0x168>
 8002574:	2200      	movs	r2, #0
 8002576:	4bc5      	ldr	r3, [pc, #788]	; (800288c <__iar_annotation$$branch+0x436>)
 8002578:	18eb      	adds	r3, r5, r3
 800257a:	709a      	strb	r2, [r3, #2]
 800257c:	696a      	ldr	r2, [r5, #20]
 800257e:	4311      	orrs	r1, r2
 8002580:	6169      	str	r1, [r5, #20]
 8002582:	0600      	lsls	r0, r0, #24
 8002584:	0f81      	lsrs	r1, r0, #30
 8002586:	4668      	mov	r0, sp
 8002588:	7b40      	ldrb	r0, [r0, #13]
 800258a:	f7fe fcbb 	bl	8000f04 <PE_ExtRevisionInteroperability>
 800258e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002590:	0b00      	lsrs	r0, r0, #12
 8002592:	4006      	ands	r6, r0
 8002594:	00b3      	lsls	r3, r6, #2
 8002596:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002598:	1c82      	adds	r2, r0, #2
 800259a:	2104      	movs	r1, #4
 800259c:	7c28      	ldrb	r0, [r5, #16]
 800259e:	68ae      	ldr	r6, [r5, #8]
 80025a0:	69b6      	ldr	r6, [r6, #24]
 80025a2:	47b0      	blx	r6
 80025a4:	2001      	movs	r0, #1
 80025a6:	7728      	strb	r0, [r5, #28]
 80025a8:	6868      	ldr	r0, [r5, #4]
 80025aa:	6801      	ldr	r1, [r0, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	4391      	bics	r1, r2
 80025b0:	6001      	str	r1, [r0, #0]
 80025b2:	2044      	movs	r0, #68	; 0x44
 80025b4:	7468      	strb	r0, [r5, #17]
 80025b6:	4668      	mov	r0, sp
 80025b8:	7b00      	ldrb	r0, [r0, #12]
 80025ba:	2814      	cmp	r0, #20
 80025bc:	d005      	beq.n	80025ca <__iar_annotation$$branch+0x174>
 80025be:	2014      	movs	r0, #20
 80025c0:	4669      	mov	r1, sp
 80025c2:	7308      	strb	r0, [r1, #12]
 80025c4:	0028      	movs	r0, r5
 80025c6:	f7fe fb4e 	bl	8000c66 <PE_Clear_RxEvent>
 80025ca:	8be8      	ldrh	r0, [r5, #30]
 80025cc:	03a1      	lsls	r1, r4, #14
 80025ce:	4288      	cmp	r0, r1
 80025d0:	d102      	bne.n	80025d8 <__iar_annotation$$branch+0x182>
 80025d2:	200f      	movs	r0, #15
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	e72b      	b.n	8002432 <__iar_annotation$$branch+0xe>
 80025da:	466a      	mov	r2, sp
 80025dc:	0029      	movs	r1, r5
 80025de:	3118      	adds	r1, #24
 80025e0:	7c28      	ldrb	r0, [r5, #16]
 80025e2:	68ab      	ldr	r3, [r5, #8]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4798      	blx	r3
 80025e8:	6968      	ldr	r0, [r5, #20]
 80025ea:	2118      	movs	r1, #24
 80025ec:	4388      	bics	r0, r1
 80025ee:	9900      	ldr	r1, [sp, #0]
 80025f0:	00c9      	lsls	r1, r1, #3
 80025f2:	2218      	movs	r2, #24
 80025f4:	400a      	ands	r2, r1
 80025f6:	4302      	orrs	r2, r0
 80025f8:	616a      	str	r2, [r5, #20]
 80025fa:	2045      	movs	r0, #69	; 0x45
 80025fc:	e7ea      	b.n	80025d4 <__iar_annotation$$branch+0x17e>
 80025fe:	6968      	ldr	r0, [r5, #20]
 8002600:	0401      	lsls	r1, r0, #16
 8002602:	0fc9      	lsrs	r1, r1, #31
 8002604:	d001      	beq.n	800260a <__iar_annotation$$branch+0x1b4>
 8002606:	2002      	movs	r0, #2
 8002608:	e000      	b.n	800260c <__iar_annotation$$branch+0x1b6>
 800260a:	2000      	movs	r0, #0
 800260c:	9002      	str	r0, [sp, #8]
 800260e:	2046      	movs	r0, #70	; 0x46
 8002610:	9001      	str	r0, [sp, #4]
 8002612:	2001      	movs	r0, #1
 8002614:	9000      	str	r0, [sp, #0]
 8002616:	002b      	movs	r3, r5
 8002618:	3318      	adds	r3, #24
 800261a:	2202      	movs	r2, #2
 800261c:	2100      	movs	r1, #0
 800261e:	0028      	movs	r0, r5
 8002620:	f7ff f929 	bl	8001876 <PE_Send_DataMessage>
 8002624:	2800      	cmp	r0, #0
 8002626:	d105      	bne.n	8002634 <__iar_annotation$$branch+0x1de>
 8002628:	6968      	ldr	r0, [r5, #20]
 800262a:	4999      	ldr	r1, [pc, #612]	; (8002890 <__iar_annotation$$branch+0x43a>)
 800262c:	4001      	ands	r1, r0
 800262e:	6169      	str	r1, [r5, #20]
 8002630:	83ee      	strh	r6, [r5, #30]
 8002632:	241b      	movs	r4, #27
 8002634:	e6fd      	b.n	8002432 <__iar_annotation$$branch+0xe>
 8002636:	4669      	mov	r1, sp
 8002638:	7b09      	ldrb	r1, [r1, #12]
 800263a:	2911      	cmp	r1, #17
 800263c:	d148      	bne.n	80026d0 <__iar_annotation$$branch+0x27a>
 800263e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8002640:	4201      	tst	r1, r0
 8002642:	d145      	bne.n	80026d0 <__iar_annotation$$branch+0x27a>
 8002644:	20fa      	movs	r0, #250	; 0xfa
 8002646:	0040      	lsls	r0, r0, #1
 8002648:	261f      	movs	r6, #31
 800264a:	221f      	movs	r2, #31
 800264c:	400a      	ands	r2, r1
 800264e:	1e92      	subs	r2, r2, #2
 8002650:	2a01      	cmp	r2, #1
 8002652:	d917      	bls.n	8002684 <__iar_annotation$$branch+0x22e>
 8002654:	1e92      	subs	r2, r2, #2
 8002656:	d001      	beq.n	800265c <__iar_annotation$$branch+0x206>
 8002658:	3a08      	subs	r2, #8
 800265a:	d125      	bne.n	80026a8 <__iar_annotation$$branch+0x252>
 800265c:	686a      	ldr	r2, [r5, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	0552      	lsls	r2, r2, #21
 8002662:	0f52      	lsrs	r2, r2, #29
 8002664:	2a03      	cmp	r2, #3
 8002666:	d004      	beq.n	8002672 <__iar_annotation$$branch+0x21c>
 8002668:	2143      	movs	r1, #67	; 0x43
 800266a:	7469      	strb	r1, [r5, #17]
 800266c:	83ef      	strh	r7, [r5, #30]
 800266e:	0004      	movs	r4, r0
 8002670:	e014      	b.n	800269c <__iar_annotation$$branch+0x246>
 8002672:	4031      	ands	r1, r6
 8002674:	290c      	cmp	r1, #12
 8002676:	d101      	bne.n	800267c <__iar_annotation$$branch+0x226>
 8002678:	2049      	movs	r0, #73	; 0x49
 800267a:	e000      	b.n	800267e <__iar_annotation$$branch+0x228>
 800267c:	2003      	movs	r0, #3
 800267e:	7468      	strb	r0, [r5, #17]
 8002680:	2400      	movs	r4, #0
 8002682:	e00b      	b.n	800269c <__iar_annotation$$branch+0x246>
 8002684:	83ef      	strh	r7, [r5, #30]
 8002686:	0004      	movs	r4, r0
 8002688:	2104      	movs	r1, #4
 800268a:	0028      	movs	r0, r5
 800268c:	f7ff f813 	bl	80016b6 <PE_SetPowerNegotiation>
 8002690:	2047      	movs	r0, #71	; 0x47
 8002692:	7468      	strb	r0, [r5, #17]
 8002694:	4668      	mov	r0, sp
 8002696:	7b00      	ldrb	r0, [r0, #12]
 8002698:	2814      	cmp	r0, #20
 800269a:	d005      	beq.n	80026a8 <__iar_annotation$$branch+0x252>
 800269c:	2014      	movs	r0, #20
 800269e:	4669      	mov	r1, sp
 80026a0:	7308      	strb	r0, [r1, #12]
 80026a2:	0028      	movs	r0, r5
 80026a4:	f7fe fadf 	bl	8000c66 <PE_Clear_RxEvent>
 80026a8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026aa:	4006      	ands	r6, r0
 80026ac:	2e02      	cmp	r6, #2
 80026ae:	d009      	beq.n	80026c4 <__iar_annotation$$branch+0x26e>
 80026b0:	2e03      	cmp	r6, #3
 80026b2:	d009      	beq.n	80026c8 <__iar_annotation$$branch+0x272>
 80026b4:	2e04      	cmp	r6, #4
 80026b6:	d003      	beq.n	80026c0 <__iar_annotation$$branch+0x26a>
 80026b8:	2e0c      	cmp	r6, #12
 80026ba:	d109      	bne.n	80026d0 <__iar_annotation$$branch+0x27a>
 80026bc:	2103      	movs	r1, #3
 80026be:	e004      	b.n	80026ca <__iar_annotation$$branch+0x274>
 80026c0:	2102      	movs	r1, #2
 80026c2:	e002      	b.n	80026ca <__iar_annotation$$branch+0x274>
 80026c4:	2104      	movs	r1, #4
 80026c6:	e000      	b.n	80026ca <__iar_annotation$$branch+0x274>
 80026c8:	2101      	movs	r1, #1
 80026ca:	7c28      	ldrb	r0, [r5, #16]
 80026cc:	f7fe f860 	bl	8000790 <USBPD_PE_Notification>
 80026d0:	8be8      	ldrh	r0, [r5, #30]
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	0209      	lsls	r1, r1, #8
 80026d6:	4288      	cmp	r0, r1
 80026d8:	d1ac      	bne.n	8002634 <__iar_annotation$$branch+0x1de>
 80026da:	e77a      	b.n	80025d2 <__iar_annotation$$branch+0x17c>
 80026dc:	4668      	mov	r0, sp
 80026de:	7b00      	ldrb	r0, [r0, #12]
 80026e0:	2811      	cmp	r0, #17
 80026e2:	d1f5      	bne.n	80026d0 <__iar_annotation$$branch+0x27a>
 80026e4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026e6:	49a3      	ldr	r1, [pc, #652]	; (8002974 <__iar_annotation$$branch+0x51e>)
 80026e8:	4001      	ands	r1, r0
 80026ea:	2906      	cmp	r1, #6
 80026ec:	d1f0      	bne.n	80026d0 <__iar_annotation$$branch+0x27a>
 80026ee:	2014      	movs	r0, #20
 80026f0:	4669      	mov	r1, sp
 80026f2:	7308      	strb	r0, [r1, #12]
 80026f4:	0028      	movs	r0, r5
 80026f6:	f7fe fab6 	bl	8000c66 <PE_Clear_RxEvent>
 80026fa:	2103      	movs	r1, #3
 80026fc:	0028      	movs	r0, r5
 80026fe:	f7fe ffda 	bl	80016b6 <PE_SetPowerNegotiation>
 8002702:	2110      	movs	r1, #16
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	f7fe f843 	bl	8000790 <USBPD_PE_Notification>
 800270a:	6868      	ldr	r0, [r5, #4]
 800270c:	6800      	ldr	r0, [r0, #0]
 800270e:	0401      	lsls	r1, r0, #16
 8002710:	0fc9      	lsrs	r1, r1, #31
 8002712:	d002      	beq.n	800271a <__iar_annotation$$branch+0x2c4>
 8002714:	6828      	ldr	r0, [r5, #0]
 8002716:	6801      	ldr	r1, [r0, #0]
 8002718:	e000      	b.n	800271c <__iar_annotation$$branch+0x2c6>
 800271a:	2101      	movs	r1, #1
 800271c:	4668      	mov	r0, sp
 800271e:	7b40      	ldrb	r0, [r0, #13]
 8002720:	f003 fa2e 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8002724:	2000      	movs	r0, #0
 8002726:	84a8      	strh	r0, [r5, #36]	; 0x24
 8002728:	2003      	movs	r0, #3
 800272a:	6969      	ldr	r1, [r5, #20]
 800272c:	08c9      	lsrs	r1, r1, #3
 800272e:	4001      	ands	r1, r0
 8002730:	2903      	cmp	r1, #3
 8002732:	d101      	bne.n	8002738 <__iar_annotation$$branch+0x2e2>
 8002734:	4990      	ldr	r1, [pc, #576]	; (8002978 <__iar_annotation$$branch+0x522>)
 8002736:	84a9      	strh	r1, [r5, #36]	; 0x24
 8002738:	7468      	strb	r0, [r5, #17]
 800273a:	2400      	movs	r4, #0
 800273c:	e7c8      	b.n	80026d0 <__iar_annotation$$branch+0x27a>
 800273e:	bf00      	nop
 8002740:	ffffdfff 	.word	0xffffdfff
 8002744:	20000174 	.word	0x20000174
 8002748:	b5e8b5cd 	.word	0xb5e8b5cd
 800274c:	20000178 	.word	0x20000178
 8002750:	a903      	add	r1, sp, #12
 8002752:	0028      	movs	r0, r5
 8002754:	f001 fbd6 	bl	8003f04 <PE_StateMachine_VDMCable>
 8002758:	e66a      	b.n	8002430 <__iar_annotation$$branch+0xc>
 800275a:	2601      	movs	r6, #1
 800275c:	6868      	ldr	r0, [r5, #4]
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	0bc0      	lsrs	r0, r0, #15
 8002762:	4030      	ands	r0, r6
 8002764:	d006      	beq.n	8002774 <__iar_annotation$$branch+0x31e>
 8002766:	68a8      	ldr	r0, [r5, #8]
 8002768:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800276a:	2a00      	cmp	r2, #0
 800276c:	d002      	beq.n	8002774 <__iar_annotation$$branch+0x31e>
 800276e:	2100      	movs	r1, #0
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	4790      	blx	r2
 8002774:	6868      	ldr	r0, [r5, #4]
 8002776:	6801      	ldr	r1, [r0, #0]
 8002778:	2210      	movs	r2, #16
 800277a:	4391      	bics	r1, r2
 800277c:	6001      	str	r1, [r0, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	0028      	movs	r0, r5
 8002782:	f7fe ff98 	bl	80016b6 <PE_SetPowerNegotiation>
 8002786:	4841      	ldr	r0, [pc, #260]	; (800288c <__iar_annotation$$branch+0x436>)
 8002788:	1829      	adds	r1, r5, r0
 800278a:	7888      	ldrb	r0, [r1, #2]
 800278c:	2803      	cmp	r0, #3
 800278e:	d309      	bcc.n	80027a4 <__iar_annotation$$branch+0x34e>
 8002790:	6968      	ldr	r0, [r5, #20]
 8002792:	0880      	lsrs	r0, r0, #2
 8002794:	4006      	ands	r6, r0
 8002796:	d003      	beq.n	80027a0 <__iar_annotation$$branch+0x34a>
 8002798:	68a8      	ldr	r0, [r5, #8]
 800279a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800279c:	2800      	cmp	r0, #0
 800279e:	d171      	bne.n	8002884 <__iar_annotation$$branch+0x42e>
 80027a0:	2000      	movs	r0, #0
 80027a2:	e6d6      	b.n	8002552 <__iar_annotation$$branch+0xfc>
 80027a4:	1c40      	adds	r0, r0, #1
 80027a6:	7088      	strb	r0, [r1, #2]
 80027a8:	2105      	movs	r1, #5
 80027aa:	0028      	movs	r0, r5
 80027ac:	f7fe f9f6 	bl	8000b9c <PE_Send_RESET>
 80027b0:	4872      	ldr	r0, [pc, #456]	; (800297c <__iar_annotation$$branch+0x526>)
 80027b2:	83e8      	strh	r0, [r5, #30]
 80027b4:	2201      	movs	r2, #1
 80027b6:	2101      	movs	r1, #1
 80027b8:	0028      	movs	r0, r5
 80027ba:	f7fe ff73 	bl	80016a4 <PE_CallHardResetCallback>
 80027be:	209b      	movs	r0, #155	; 0x9b
 80027c0:	e708      	b.n	80025d4 <__iar_annotation$$branch+0x17e>
 80027c2:	6868      	ldr	r0, [r5, #4]
 80027c4:	6800      	ldr	r0, [r0, #0]
 80027c6:	0401      	lsls	r1, r0, #16
 80027c8:	0fc9      	lsrs	r1, r1, #31
 80027ca:	d006      	beq.n	80027da <__iar_annotation$$branch+0x384>
 80027cc:	68a8      	ldr	r0, [r5, #8]
 80027ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	d002      	beq.n	80027da <__iar_annotation$$branch+0x384>
 80027d4:	2100      	movs	r1, #0
 80027d6:	7c28      	ldrb	r0, [r5, #16]
 80027d8:	4790      	blx	r2
 80027da:	2200      	movs	r2, #0
 80027dc:	2101      	movs	r1, #1
 80027de:	0028      	movs	r0, r5
 80027e0:	f7fe ff60 	bl	80016a4 <PE_CallHardResetCallback>
 80027e4:	4865      	ldr	r0, [pc, #404]	; (800297c <__iar_annotation$$branch+0x526>)
 80027e6:	83e8      	strh	r0, [r5, #30]
 80027e8:	e7e9      	b.n	80027be <__iar_annotation$$branch+0x368>
 80027ea:	2100      	movs	r1, #0
 80027ec:	4668      	mov	r0, sp
 80027ee:	7b40      	ldrb	r0, [r0, #13]
 80027f0:	68aa      	ldr	r2, [r5, #8]
 80027f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027f4:	4790      	blx	r2
 80027f6:	2801      	cmp	r0, #1
 80027f8:	d10d      	bne.n	8002816 <__iar_annotation$$branch+0x3c0>
 80027fa:	4861      	ldr	r0, [pc, #388]	; (8002980 <__iar_annotation$$branch+0x52a>)
 80027fc:	83e8      	strh	r0, [r5, #30]
 80027fe:	2169      	movs	r1, #105	; 0x69
 8002800:	4668      	mov	r0, sp
 8002802:	7b40      	ldrb	r0, [r0, #13]
 8002804:	f7fd ffc4 	bl	8000790 <USBPD_PE_Notification>
 8002808:	2040      	movs	r0, #64	; 0x40
 800280a:	7468      	strb	r0, [r5, #17]
 800280c:	2400      	movs	r4, #0
 800280e:	2113      	movs	r1, #19
 8002810:	7c28      	ldrb	r0, [r5, #16]
 8002812:	f7fd ffbd 	bl	8000790 <USBPD_PE_Notification>
 8002816:	8be8      	ldrh	r0, [r5, #30]
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0209      	lsls	r1, r1, #8
 800281c:	4288      	cmp	r0, r1
 800281e:	d160      	bne.n	80028e2 <__iar_annotation$$branch+0x48c>
 8002820:	e01e      	b.n	8002860 <__iar_annotation$$branch+0x40a>
 8002822:	2101      	movs	r1, #1
 8002824:	4668      	mov	r0, sp
 8002826:	7b40      	ldrb	r0, [r0, #13]
 8002828:	68aa      	ldr	r2, [r5, #8]
 800282a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800282c:	4790      	blx	r2
 800282e:	2801      	cmp	r0, #1
 8002830:	d111      	bne.n	8002856 <__iar_annotation$$branch+0x400>
 8002832:	0028      	movs	r0, r5
 8002834:	f7fe fac5 	bl	8000dc2 <PE_Reset_HardReset>
 8002838:	2205      	movs	r2, #5
 800283a:	2100      	movs	r1, #0
 800283c:	0028      	movs	r0, r5
 800283e:	f7fe ff31 	bl	80016a4 <PE_CallHardResetCallback>
 8002842:	2168      	movs	r1, #104	; 0x68
 8002844:	4668      	mov	r0, sp
 8002846:	7b40      	ldrb	r0, [r0, #13]
 8002848:	f7fd ffa2 	bl	8000790 <USBPD_PE_Notification>
 800284c:	83ef      	strh	r7, [r5, #30]
 800284e:	24fa      	movs	r4, #250	; 0xfa
 8002850:	0064      	lsls	r4, r4, #1
 8002852:	2043      	movs	r0, #67	; 0x43
 8002854:	7468      	strb	r0, [r5, #17]
 8002856:	8be8      	ldrh	r0, [r5, #30]
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0209      	lsls	r1, r1, #8
 800285c:	4288      	cmp	r0, r1
 800285e:	d140      	bne.n	80028e2 <__iar_annotation$$branch+0x48c>
 8002860:	2206      	movs	r2, #6
 8002862:	2100      	movs	r1, #0
 8002864:	0028      	movs	r0, r5
 8002866:	f7fe ff1d 	bl	80016a4 <PE_CallHardResetCallback>
 800286a:	4808      	ldr	r0, [pc, #32]	; (800288c <__iar_annotation$$branch+0x436>)
 800286c:	1828      	adds	r0, r5, r0
 800286e:	7880      	ldrb	r0, [r0, #2]
 8002870:	2803      	cmp	r0, #3
 8002872:	d200      	bcs.n	8002876 <__iar_annotation$$branch+0x420>
 8002874:	e6ad      	b.n	80025d2 <__iar_annotation$$branch+0x17c>
 8002876:	6968      	ldr	r0, [r5, #20]
 8002878:	0741      	lsls	r1, r0, #29
 800287a:	0fc9      	lsrs	r1, r1, #31
 800287c:	d004      	beq.n	8002888 <__iar_annotation$$branch+0x432>
 800287e:	68a8      	ldr	r0, [r5, #8]
 8002880:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002882:	2800      	cmp	r0, #0
 8002884:	d000      	beq.n	8002888 <__iar_annotation$$branch+0x432>
 8002886:	e0f8      	b.n	8002a7a <__iar_annotation$$branch+0x624>
 8002888:	2000      	movs	r0, #0
 800288a:	e6a3      	b.n	80025d4 <__iar_annotation$$branch+0x17e>
 800288c:	0000025e 	.word	0x0000025e
 8002890:	ffff7fff 	.word	0xffff7fff
 8002894:	2000      	movs	r0, #0
 8002896:	9000      	str	r0, [sp, #0]
 8002898:	2303      	movs	r3, #3
 800289a:	2203      	movs	r2, #3
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe ffbe 	bl	8001820 <PE_Send_CtrlMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d11c      	bne.n	80028e2 <__iar_annotation$$branch+0x48c>
 80028a8:	2001      	movs	r0, #1
 80028aa:	7728      	strb	r0, [r5, #28]
 80028ac:	e64d      	b.n	800254a <__iar_annotation$$branch+0xf4>
 80028ae:	6868      	ldr	r0, [r5, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	0540      	lsls	r0, r0, #21
 80028b4:	0f40      	lsrs	r0, r0, #29
 80028b6:	2804      	cmp	r0, #4
 80028b8:	d100      	bne.n	80028bc <__iar_annotation$$branch+0x466>
 80028ba:	e68a      	b.n	80025d2 <__iar_annotation$$branch+0x17c>
 80028bc:	2000      	movs	r0, #0
 80028be:	9000      	str	r0, [sp, #0]
 80028c0:	2350      	movs	r3, #80	; 0x50
 80028c2:	220d      	movs	r2, #13
 80028c4:	2031      	movs	r0, #49	; 0x31
 80028c6:	5c29      	ldrb	r1, [r5, r0]
 80028c8:	0028      	movs	r0, r5
 80028ca:	f7fe ffa9 	bl	8001820 <PE_Send_CtrlMessage>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d107      	bne.n	80028e2 <__iar_annotation$$branch+0x48c>
 80028d2:	2003      	movs	r0, #3
 80028d4:	7728      	strb	r0, [r5, #28]
 80028d6:	83ee      	strh	r6, [r5, #30]
 80028d8:	241b      	movs	r4, #27
 80028da:	2130      	movs	r1, #48	; 0x30
 80028dc:	7c28      	ldrb	r0, [r5, #16]
 80028de:	f7fd ff57 	bl	8000790 <USBPD_PE_Notification>
 80028e2:	e5a6      	b.n	8002432 <__iar_annotation$$branch+0xe>
 80028e4:	4668      	mov	r0, sp
 80028e6:	7b00      	ldrb	r0, [r0, #12]
 80028e8:	2814      	cmp	r0, #20
 80028ea:	d017      	beq.n	800291c <__iar_annotation$$branch+0x4c6>
 80028ec:	2030      	movs	r0, #48	; 0x30
 80028ee:	5c28      	ldrb	r0, [r5, r0]
 80028f0:	2131      	movs	r1, #49	; 0x31
 80028f2:	5c69      	ldrb	r1, [r5, r1]
 80028f4:	4288      	cmp	r0, r1
 80028f6:	d111      	bne.n	800291c <__iar_annotation$$branch+0x4c6>
 80028f8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80028fa:	491e      	ldr	r1, [pc, #120]	; (8002974 <__iar_annotation$$branch+0x51e>)
 80028fc:	4001      	ands	r1, r0
 80028fe:	2903      	cmp	r1, #3
 8002900:	d10c      	bne.n	800291c <__iar_annotation$$branch+0x4c6>
 8002902:	2001      	movs	r0, #1
 8002904:	7728      	strb	r0, [r5, #28]
 8002906:	83ef      	strh	r7, [r5, #30]
 8002908:	24fa      	movs	r4, #250	; 0xfa
 800290a:	0064      	lsls	r4, r4, #1
 800290c:	2043      	movs	r0, #67	; 0x43
 800290e:	7468      	strb	r0, [r5, #17]
 8002910:	2014      	movs	r0, #20
 8002912:	4669      	mov	r1, sp
 8002914:	7308      	strb	r0, [r1, #12]
 8002916:	0028      	movs	r0, r5
 8002918:	f7fe f9a5 	bl	8000c66 <PE_Clear_RxEvent>
 800291c:	e6d8      	b.n	80026d0 <__iar_annotation$$branch+0x27a>
 800291e:	9400      	str	r4, [sp, #0]
 8002920:	2343      	movs	r3, #67	; 0x43
 8002922:	2207      	movs	r2, #7
 8002924:	2100      	movs	r1, #0
 8002926:	0028      	movs	r0, r5
 8002928:	f7fe ff7a 	bl	8001820 <PE_Send_CtrlMessage>
 800292c:	2800      	cmp	r0, #0
 800292e:	d11f      	bne.n	8002970 <__iar_annotation$$branch+0x51a>
 8002930:	2006      	movs	r0, #6
 8002932:	7728      	strb	r0, [r5, #28]
 8002934:	83ee      	strh	r6, [r5, #30]
 8002936:	241b      	movs	r4, #27
 8002938:	210b      	movs	r1, #11
 800293a:	e7cf      	b.n	80028dc <__iar_annotation$$branch+0x486>
 800293c:	4668      	mov	r0, sp
 800293e:	7b00      	ldrb	r0, [r0, #12]
 8002940:	2811      	cmp	r0, #17
 8002942:	d115      	bne.n	8002970 <__iar_annotation$$branch+0x51a>
 8002944:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002946:	490b      	ldr	r1, [pc, #44]	; (8002974 <__iar_annotation$$branch+0x51e>)
 8002948:	4001      	ands	r1, r0
 800294a:	2906      	cmp	r1, #6
 800294c:	d110      	bne.n	8002970 <__iar_annotation$$branch+0x51a>
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	7c28      	ldrb	r0, [r5, #16]
 8002952:	f7fd ff1d 	bl	8000790 <USBPD_PE_Notification>
 8002956:	2003      	movs	r0, #3
 8002958:	7468      	strb	r0, [r5, #17]
 800295a:	2400      	movs	r4, #0
 800295c:	4668      	mov	r0, sp
 800295e:	7b00      	ldrb	r0, [r0, #12]
 8002960:	2814      	cmp	r0, #20
 8002962:	d005      	beq.n	8002970 <__iar_annotation$$branch+0x51a>
 8002964:	2014      	movs	r0, #20
 8002966:	4669      	mov	r1, sp
 8002968:	7308      	strb	r0, [r1, #12]
 800296a:	0028      	movs	r0, r5
 800296c:	f7fe f97b 	bl	8000c66 <PE_Clear_RxEvent>
 8002970:	e55f      	b.n	8002432 <__iar_annotation$$branch+0xe>
 8002972:	bf00      	nop
 8002974:	0000f01f 	.word	0x0000f01f
 8002978:	0000a328 	.word	0x0000a328
 800297c:	000083e8 	.word	0x000083e8
 8002980:	000088e3 	.word	0x000088e3
 8002984:	2000      	movs	r0, #0
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	2303      	movs	r3, #3
 800298a:	2204      	movs	r2, #4
 800298c:	2100      	movs	r1, #0
 800298e:	0028      	movs	r0, r5
 8002990:	f7fe ff46 	bl	8001820 <PE_Send_CtrlMessage>
 8002994:	e54d      	b.n	8002432 <__iar_annotation$$branch+0xe>
 8002996:	4668      	mov	r0, sp
 8002998:	7800      	ldrb	r0, [r0, #0]
 800299a:	2804      	cmp	r0, #4
 800299c:	d006      	beq.n	80029ac <__iar_annotation$$branch+0x556>
 800299e:	2000      	movs	r0, #0
 80029a0:	7728      	strb	r0, [r5, #28]
 80029a2:	7469      	strb	r1, [r5, #17]
 80029a4:	2120      	movs	r1, #32
 80029a6:	7c28      	ldrb	r0, [r5, #16]
 80029a8:	f7fd fef2 	bl	8000790 <USBPD_PE_Notification>
 80029ac:	a903      	add	r1, sp, #12
 80029ae:	0028      	movs	r0, r5
 80029b0:	f000 fa12 	bl	8002dd8 <PE_StateMachine_SNK_ReadyWait>
 80029b4:	e53c      	b.n	8002430 <__iar_annotation$$branch+0xc>
 80029b6:	68a8      	ldr	r0, [r5, #8]
 80029b8:	6881      	ldr	r1, [r0, #8]
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d02e      	beq.n	8002a1c <__iar_annotation$$branch+0x5c6>
 80029be:	4668      	mov	r0, sp
 80029c0:	7b40      	ldrb	r0, [r0, #13]
 80029c2:	4788      	blx	r1
 80029c4:	280a      	cmp	r0, #10
 80029c6:	d002      	beq.n	80029ce <__iar_annotation$$branch+0x578>
 80029c8:	280d      	cmp	r0, #13
 80029ca:	d022      	beq.n	8002a12 <__iar_annotation$$branch+0x5bc>
 80029cc:	e026      	b.n	8002a1c <__iar_annotation$$branch+0x5c6>
 80029ce:	2201      	movs	r2, #1
 80029d0:	2100      	movs	r1, #0
 80029d2:	7c28      	ldrb	r0, [r5, #16]
 80029d4:	68ab      	ldr	r3, [r5, #8]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	4798      	blx	r3
 80029da:	2000      	movs	r0, #0
 80029dc:	9000      	str	r0, [sp, #0]
 80029de:	2359      	movs	r3, #89	; 0x59
 80029e0:	2203      	movs	r2, #3
 80029e2:	2100      	movs	r1, #0
 80029e4:	0028      	movs	r0, r5
 80029e6:	f7fe ff1b 	bl	8001820 <PE_Send_CtrlMessage>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d110      	bne.n	8002a10 <__iar_annotation$$branch+0x5ba>
 80029ee:	2008      	movs	r0, #8
 80029f0:	7728      	strb	r0, [r5, #28]
 80029f2:	6868      	ldr	r0, [r5, #4]
 80029f4:	6801      	ldr	r1, [r0, #0]
 80029f6:	2210      	movs	r2, #16
 80029f8:	430a      	orrs	r2, r1
 80029fa:	6002      	str	r2, [r0, #0]
 80029fc:	2206      	movs	r2, #6
 80029fe:	2100      	movs	r1, #0
 8002a00:	7c28      	ldrb	r0, [r5, #16]
 8002a02:	68ab      	ldr	r3, [r5, #8]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	4798      	blx	r3
 8002a08:	48b0      	ldr	r0, [pc, #704]	; (8002ccc <__iar_annotation$$branch+0x876>)
 8002a0a:	83e8      	strh	r0, [r5, #30]
 8002a0c:	24e1      	movs	r4, #225	; 0xe1
 8002a0e:	00a4      	lsls	r4, r4, #2
 8002a10:	e50f      	b.n	8002432 <__iar_annotation$$branch+0xe>
 8002a12:	2000      	movs	r0, #0
 8002a14:	9000      	str	r0, [sp, #0]
 8002a16:	2303      	movs	r3, #3
 8002a18:	220c      	movs	r2, #12
 8002a1a:	e7b7      	b.n	800298c <__iar_annotation$$branch+0x536>
 8002a1c:	202a      	movs	r0, #42	; 0x2a
 8002a1e:	e5d9      	b.n	80025d4 <__iar_annotation$$branch+0x17e>
 8002a20:	4668      	mov	r0, sp
 8002a22:	7b00      	ldrb	r0, [r0, #12]
 8002a24:	2811      	cmp	r0, #17
 8002a26:	d119      	bne.n	8002a5c <__iar_annotation$$branch+0x606>
 8002a28:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002a2a:	49c1      	ldr	r1, [pc, #772]	; (8002d30 <__iar_annotation$$branch+0x8da>)
 8002a2c:	4001      	ands	r1, r0
 8002a2e:	2906      	cmp	r1, #6
 8002a30:	d114      	bne.n	8002a5c <__iar_annotation$$branch+0x606>
 8002a32:	7f28      	ldrb	r0, [r5, #28]
 8002a34:	2809      	cmp	r0, #9
 8002a36:	d005      	beq.n	8002a44 <__iar_annotation$$branch+0x5ee>
 8002a38:	2209      	movs	r2, #9
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	7c28      	ldrb	r0, [r5, #16]
 8002a3e:	68ab      	ldr	r3, [r5, #8]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	4798      	blx	r3
 8002a44:	2053      	movs	r0, #83	; 0x53
 8002a46:	7468      	strb	r0, [r5, #17]
 8002a48:	4668      	mov	r0, sp
 8002a4a:	7b00      	ldrb	r0, [r0, #12]
 8002a4c:	2814      	cmp	r0, #20
 8002a4e:	d005      	beq.n	8002a5c <__iar_annotation$$branch+0x606>
 8002a50:	2014      	movs	r0, #20
 8002a52:	4669      	mov	r1, sp
 8002a54:	7308      	strb	r0, [r1, #12]
 8002a56:	0028      	movs	r0, r5
 8002a58:	f7fe f905 	bl	8000c66 <PE_Clear_RxEvent>
 8002a5c:	8be8      	ldrh	r0, [r5, #30]
 8002a5e:	03a1      	lsls	r1, r4, #14
 8002a60:	4288      	cmp	r0, r1
 8002a62:	d1d5      	bne.n	8002a10 <__iar_annotation$$branch+0x5ba>
 8002a64:	220f      	movs	r2, #15
 8002a66:	2100      	movs	r1, #0
 8002a68:	7c28      	ldrb	r0, [r5, #16]
 8002a6a:	68ab      	ldr	r3, [r5, #8]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	4798      	blx	r3
 8002a70:	68a8      	ldr	r0, [r5, #8]
 8002a72:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d100      	bne.n	8002a7a <__iar_annotation$$branch+0x624>
 8002a78:	e5ab      	b.n	80025d2 <__iar_annotation$$branch+0x17c>
 8002a7a:	2092      	movs	r0, #146	; 0x92
 8002a7c:	e5aa      	b.n	80025d4 <__iar_annotation$$branch+0x17e>
 8002a7e:	0028      	movs	r0, r5
 8002a80:	f7fe fe19 	bl	80016b6 <PE_SetPowerNegotiation>
 8002a84:	220a      	movs	r2, #10
 8002a86:	2100      	movs	r1, #0
 8002a88:	7c28      	ldrb	r0, [r5, #16]
 8002a8a:	68ab      	ldr	r3, [r5, #8]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	4798      	blx	r3
 8002a90:	6868      	ldr	r0, [r5, #4]
 8002a92:	7800      	ldrb	r0, [r0, #0]
 8002a94:	0780      	lsls	r0, r0, #30
 8002a96:	0f80      	lsrs	r0, r0, #30
 8002a98:	2802      	cmp	r0, #2
 8002a9a:	d102      	bne.n	8002aa2 <__iar_annotation$$branch+0x64c>
 8002a9c:	7c28      	ldrb	r0, [r5, #16]
 8002a9e:	f003 f84c 	bl	8005b3a <USBPD_PRL_SRCSetSinkNG>
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	0028      	movs	r0, r5
 8002aa6:	f7fe f899 	bl	8000bdc <PE_ChangePowerRole>
 8002aaa:	7f28      	ldrb	r0, [r5, #28]
 8002aac:	2809      	cmp	r0, #9
 8002aae:	d005      	beq.n	8002abc <__iar_annotation$$branch+0x666>
 8002ab0:	220b      	movs	r2, #11
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	7c28      	ldrb	r0, [r5, #16]
 8002ab6:	68ab      	ldr	r3, [r5, #8]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	4798      	blx	r3
 8002abc:	2000      	movs	r0, #0
 8002abe:	9000      	str	r0, [sp, #0]
 8002ac0:	235b      	movs	r3, #91	; 0x5b
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	0028      	movs	r0, r5
 8002ac8:	f7fe feaa 	bl	8001820 <PE_Send_CtrlMessage>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d108      	bne.n	8002ae2 <__iar_annotation$$branch+0x68c>
 8002ad0:	220c      	movs	r2, #12
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	7c28      	ldrb	r0, [r5, #16]
 8002ad6:	68ab      	ldr	r3, [r5, #8]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	4798      	blx	r3
 8002adc:	48bd      	ldr	r0, [pc, #756]	; (8002dd4 <.text_3>)
 8002ade:	83e8      	strh	r0, [r5, #30]
 8002ae0:	2414      	movs	r4, #20
 8002ae2:	7c68      	ldrb	r0, [r5, #17]
 8002ae4:	285b      	cmp	r0, #91	; 0x5b
 8002ae6:	d00f      	beq.n	8002b08 <__iar_annotation$$branch+0x6b2>
 8002ae8:	2100      	movs	r1, #0
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7fe f876 	bl	8000bdc <PE_ChangePowerRole>
 8002af0:	2206      	movs	r2, #6
 8002af2:	2101      	movs	r1, #1
 8002af4:	7c28      	ldrb	r0, [r5, #16]
 8002af6:	68ab      	ldr	r3, [r5, #8]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	4798      	blx	r3
 8002afc:	2207      	movs	r2, #7
 8002afe:	2100      	movs	r1, #0
 8002b00:	7c28      	ldrb	r0, [r5, #16]
 8002b02:	68ab      	ldr	r3, [r5, #8]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	4798      	blx	r3
 8002b08:	e493      	b.n	8002432 <__iar_annotation$$branch+0xe>
 8002b0a:	9400      	str	r4, [sp, #0]
 8002b0c:	2358      	movs	r3, #88	; 0x58
 8002b0e:	220a      	movs	r2, #10
 8002b10:	2100      	movs	r1, #0
 8002b12:	0028      	movs	r0, r5
 8002b14:	f7fe fe84 	bl	8001820 <PE_Send_CtrlMessage>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d105      	bne.n	8002b28 <__iar_annotation$$branch+0x6d2>
 8002b1c:	2008      	movs	r0, #8
 8002b1e:	7728      	strb	r0, [r5, #28]
 8002b20:	83ee      	strh	r6, [r5, #30]
 8002b22:	241b      	movs	r4, #27
 8002b24:	2202      	movs	r2, #2
 8002b26:	e7ea      	b.n	8002afe <__iar_annotation$$branch+0x6a8>
 8002b28:	220f      	movs	r2, #15
 8002b2a:	e7e8      	b.n	8002afe <__iar_annotation$$branch+0x6a8>
 8002b2c:	4669      	mov	r1, sp
 8002b2e:	7b09      	ldrb	r1, [r1, #12]
 8002b30:	2911      	cmp	r1, #17
 8002b32:	d10c      	bne.n	8002b4e <__iar_annotation$$branch+0x6f8>
 8002b34:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8002b36:	4201      	tst	r1, r0
 8002b38:	d109      	bne.n	8002b4e <__iar_annotation$$branch+0x6f8>
 8002b3a:	06c8      	lsls	r0, r1, #27
 8002b3c:	0ec0      	lsrs	r0, r0, #27
 8002b3e:	2803      	cmp	r0, #3
 8002b40:	d006      	beq.n	8002b50 <__iar_annotation$$branch+0x6fa>
 8002b42:	2804      	cmp	r0, #4
 8002b44:	d02d      	beq.n	8002ba2 <__iar_annotation$$branch+0x74c>
 8002b46:	280c      	cmp	r0, #12
 8002b48:	d029      	beq.n	8002b9e <__iar_annotation$$branch+0x748>
 8002b4a:	2810      	cmp	r0, #16
 8002b4c:	d032      	beq.n	8002bb4 <__iar_annotation$$branch+0x75e>
 8002b4e:	e0a5      	b.n	8002c9c <__iar_annotation$$branch+0x846>
 8002b50:	6868      	ldr	r0, [r5, #4]
 8002b52:	6801      	ldr	r1, [r0, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	430a      	orrs	r2, r1
 8002b58:	6002      	str	r2, [r0, #0]
 8002b5a:	485c      	ldr	r0, [pc, #368]	; (8002ccc <__iar_annotation$$branch+0x876>)
 8002b5c:	83e8      	strh	r0, [r5, #30]
 8002b5e:	24e1      	movs	r4, #225	; 0xe1
 8002b60:	00a4      	lsls	r4, r4, #2
 8002b62:	7f28      	ldrb	r0, [r5, #28]
 8002b64:	2809      	cmp	r0, #9
 8002b66:	d005      	beq.n	8002b74 <__iar_annotation$$branch+0x71e>
 8002b68:	2206      	movs	r2, #6
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	7c28      	ldrb	r0, [r5, #16]
 8002b6e:	68ab      	ldr	r3, [r5, #8]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	4798      	blx	r3
 8002b74:	2104      	movs	r1, #4
 8002b76:	0028      	movs	r0, r5
 8002b78:	f7fe fd9d 	bl	80016b6 <PE_SetPowerNegotiation>
 8002b7c:	213a      	movs	r1, #58	; 0x3a
 8002b7e:	7c28      	ldrb	r0, [r5, #16]
 8002b80:	f7fd fe06 	bl	8000790 <USBPD_PE_Notification>
 8002b84:	4668      	mov	r0, sp
 8002b86:	7b00      	ldrb	r0, [r0, #12]
 8002b88:	2814      	cmp	r0, #20
 8002b8a:	d005      	beq.n	8002b98 <__iar_annotation$$branch+0x742>
 8002b8c:	2014      	movs	r0, #20
 8002b8e:	4669      	mov	r1, sp
 8002b90:	7308      	strb	r0, [r1, #12]
 8002b92:	0028      	movs	r0, r5
 8002b94:	f7fe f867 	bl	8000c66 <PE_Clear_RxEvent>
 8002b98:	2059      	movs	r0, #89	; 0x59
 8002b9a:	7468      	strb	r0, [r5, #17]
 8002b9c:	e07e      	b.n	8002c9c <__iar_annotation$$branch+0x846>
 8002b9e:	213b      	movs	r1, #59	; 0x3b
 8002ba0:	e000      	b.n	8002ba4 <__iar_annotation$$branch+0x74e>
 8002ba2:	2116      	movs	r1, #22
 8002ba4:	7c28      	ldrb	r0, [r5, #16]
 8002ba6:	f7fd fdf3 	bl	8000790 <USBPD_PE_Notification>
 8002baa:	4668      	mov	r0, sp
 8002bac:	7b00      	ldrb	r0, [r0, #12]
 8002bae:	2814      	cmp	r0, #20
 8002bb0:	d108      	bne.n	8002bc4 <__iar_annotation$$branch+0x76e>
 8002bb2:	e070      	b.n	8002c96 <__iar_annotation$$branch+0x840>
 8002bb4:	2117      	movs	r1, #23
 8002bb6:	7c28      	ldrb	r0, [r5, #16]
 8002bb8:	f7fd fdea 	bl	8000790 <USBPD_PE_Notification>
 8002bbc:	4668      	mov	r0, sp
 8002bbe:	7b00      	ldrb	r0, [r0, #12]
 8002bc0:	2814      	cmp	r0, #20
 8002bc2:	d068      	beq.n	8002c96 <__iar_annotation$$branch+0x840>
 8002bc4:	2014      	movs	r0, #20
 8002bc6:	4669      	mov	r1, sp
 8002bc8:	7308      	strb	r0, [r1, #12]
 8002bca:	0028      	movs	r0, r5
 8002bcc:	f7fe f84b 	bl	8000c66 <PE_Clear_RxEvent>
 8002bd0:	e061      	b.n	8002c96 <__iar_annotation$$branch+0x840>
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	9005      	str	r0, [sp, #20]
 8002bd6:	ab05      	add	r3, sp, #20
 8002bd8:	aa07      	add	r2, sp, #28
 8002bda:	2100      	movs	r1, #0
 8002bdc:	7c28      	ldrb	r0, [r5, #16]
 8002bde:	68ae      	ldr	r6, [r5, #8]
 8002be0:	6976      	ldr	r6, [r6, #20]
 8002be2:	47b0      	blx	r6
 8002be4:	2104      	movs	r1, #4
 8002be6:	9805      	ldr	r0, [sp, #20]
 8002be8:	f7fe fdb8 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d001      	beq.n	8002bf4 <__iar_annotation$$branch+0x79e>
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	e4ae      	b.n	8002552 <__iar_annotation$$branch+0xfc>
 8002bf4:	9002      	str	r0, [sp, #8]
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	9001      	str	r0, [sp, #4]
 8002bfa:	9805      	ldr	r0, [sp, #20]
 8002bfc:	0880      	lsrs	r0, r0, #2
 8002bfe:	9000      	str	r0, [sp, #0]
 8002c00:	ab07      	add	r3, sp, #28
 8002c02:	2201      	movs	r2, #1
 8002c04:	2100      	movs	r1, #0
 8002c06:	0028      	movs	r0, r5
 8002c08:	f7fe fe35 	bl	8001876 <PE_Send_DataMessage>
 8002c0c:	e77c      	b.n	8002b08 <__iar_annotation$$branch+0x6b2>
 8002c0e:	2000      	movs	r0, #0
 8002c10:	9002      	str	r0, [sp, #8]
 8002c12:	2003      	movs	r0, #3
 8002c14:	9001      	str	r0, [sp, #4]
 8002c16:	2001      	movs	r0, #1
 8002c18:	9000      	str	r0, [sp, #0]
 8002c1a:	002b      	movs	r3, r5
 8002c1c:	332c      	adds	r3, #44	; 0x2c
 8002c1e:	2206      	movs	r2, #6
 8002c20:	2100      	movs	r1, #0
 8002c22:	0028      	movs	r0, r5
 8002c24:	f7fe fe27 	bl	8001876 <PE_Send_DataMessage>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d1ef      	bne.n	8002c0c <__iar_annotation$$branch+0x7b6>
 8002c2c:	215d      	movs	r1, #93	; 0x5d
 8002c2e:	e655      	b.n	80028dc <__iar_annotation$$branch+0x486>
 8002c30:	9400      	str	r4, [sp, #0]
 8002c32:	2366      	movs	r3, #102	; 0x66
 8002c34:	2214      	movs	r2, #20
 8002c36:	2100      	movs	r1, #0
 8002c38:	0028      	movs	r0, r5
 8002c3a:	f7fe fdf1 	bl	8001820 <PE_Send_CtrlMessage>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d107      	bne.n	8002c52 <__iar_annotation$$branch+0x7fc>
 8002c42:	83ee      	strh	r6, [r5, #30]
 8002c44:	241b      	movs	r4, #27
 8002c46:	214a      	movs	r1, #74	; 0x4a
 8002c48:	7c28      	ldrb	r0, [r5, #16]
 8002c4a:	f7fd fda1 	bl	8000790 <USBPD_PE_Notification>
 8002c4e:	200b      	movs	r0, #11
 8002c50:	7728      	strb	r0, [r5, #28]
 8002c52:	e759      	b.n	8002b08 <__iar_annotation$$branch+0x6b2>
 8002c54:	4668      	mov	r0, sp
 8002c56:	7b00      	ldrb	r0, [r0, #12]
 8002c58:	2811      	cmp	r0, #17
 8002c5a:	d11f      	bne.n	8002c9c <__iar_annotation$$branch+0x846>
 8002c5c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002c5e:	0bc1      	lsrs	r1, r0, #15
 8002c60:	d01c      	beq.n	8002c9c <__iar_annotation$$branch+0x846>
 8002c62:	06c0      	lsls	r0, r0, #27
 8002c64:	0ec0      	lsrs	r0, r0, #27
 8002c66:	280c      	cmp	r0, #12
 8002c68:	d118      	bne.n	8002c9c <__iar_annotation$$branch+0x846>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002c6e:	1d02      	adds	r2, r0, #4
 8002c70:	210a      	movs	r1, #10
 8002c72:	7c28      	ldrb	r0, [r5, #16]
 8002c74:	68ac      	ldr	r4, [r5, #8]
 8002c76:	69a4      	ldr	r4, [r4, #24]
 8002c78:	47a0      	blx	r4
 8002c7a:	4668      	mov	r0, sp
 8002c7c:	7b00      	ldrb	r0, [r0, #12]
 8002c7e:	2814      	cmp	r0, #20
 8002c80:	d005      	beq.n	8002c8e <__iar_annotation$$branch+0x838>
 8002c82:	2014      	movs	r0, #20
 8002c84:	4669      	mov	r1, sp
 8002c86:	7308      	strb	r0, [r1, #12]
 8002c88:	0028      	movs	r0, r5
 8002c8a:	f7fd ffec 	bl	8000c66 <PE_Clear_RxEvent>
 8002c8e:	214b      	movs	r1, #75	; 0x4b
 8002c90:	7c28      	ldrb	r0, [r5, #16]
 8002c92:	f7fd fd7d 	bl	8000790 <USBPD_PE_Notification>
 8002c96:	2003      	movs	r0, #3
 8002c98:	7468      	strb	r0, [r5, #17]
 8002c9a:	2400      	movs	r4, #0
 8002c9c:	8be8      	ldrh	r0, [r5, #30]
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	0209      	lsls	r1, r1, #8
 8002ca2:	4288      	cmp	r0, r1
 8002ca4:	d1d5      	bne.n	8002c52 <__iar_annotation$$branch+0x7fc>
 8002ca6:	e041      	b.n	8002d2c <__iar_annotation$$branch+0x8d6>
 8002ca8:	4891      	ldr	r0, [pc, #580]	; (8002ef0 <.text_5>)
 8002caa:	182f      	adds	r7, r5, r0
 8002cac:	9400      	str	r4, [sp, #0]
 8002cae:	2339      	movs	r3, #57	; 0x39
 8002cb0:	783a      	ldrb	r2, [r7, #0]
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	0028      	movs	r0, r5
 8002cb6:	f7fe fdb3 	bl	8001820 <PE_Send_CtrlMessage>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d1c9      	bne.n	8002c52 <__iar_annotation$$branch+0x7fc>
 8002cbe:	7878      	ldrb	r0, [r7, #1]
 8002cc0:	7728      	strb	r0, [r5, #28]
 8002cc2:	2144      	movs	r1, #68	; 0x44
 8002cc4:	7c28      	ldrb	r0, [r5, #16]
 8002cc6:	f7fd fd63 	bl	8000790 <USBPD_PE_Notification>
 8002cca:	e4b1      	b.n	8002630 <__iar_annotation$$branch+0x1da>
 8002ccc:	00008384 	.word	0x00008384
 8002cd0:	4668      	mov	r0, sp
 8002cd2:	7b00      	ldrb	r0, [r0, #12]
 8002cd4:	2814      	cmp	r0, #20
 8002cd6:	d024      	beq.n	8002d22 <__iar_annotation$$branch+0x8cc>
 8002cd8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002cda:	0bc0      	lsrs	r0, r0, #15
 8002cdc:	d00e      	beq.n	8002cfc <__iar_annotation$$branch+0x8a6>
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f7fe fe06 	bl	80018f0 <PE_Check_ExtendedMessage>
 8002ce4:	4668      	mov	r0, sp
 8002ce6:	7b00      	ldrb	r0, [r0, #12]
 8002ce8:	2814      	cmp	r0, #20
 8002cea:	d005      	beq.n	8002cf8 <__iar_annotation$$branch+0x8a2>
 8002cec:	2014      	movs	r0, #20
 8002cee:	4669      	mov	r1, sp
 8002cf0:	7308      	strb	r0, [r1, #12]
 8002cf2:	0028      	movs	r0, r5
 8002cf4:	f7fd ffb7 	bl	8000c66 <PE_Clear_RxEvent>
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	83e8      	strh	r0, [r5, #30]
 8002cfc:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002cfe:	490c      	ldr	r1, [pc, #48]	; (8002d30 <__iar_annotation$$branch+0x8da>)
 8002d00:	4001      	ands	r1, r0
 8002d02:	2910      	cmp	r1, #16
 8002d04:	d10d      	bne.n	8002d22 <__iar_annotation$$branch+0x8cc>
 8002d06:	2003      	movs	r0, #3
 8002d08:	7468      	strb	r0, [r5, #17]
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	4668      	mov	r0, sp
 8002d0e:	7b00      	ldrb	r0, [r0, #12]
 8002d10:	2814      	cmp	r0, #20
 8002d12:	d005      	beq.n	8002d20 <__iar_annotation$$branch+0x8ca>
 8002d14:	2014      	movs	r0, #20
 8002d16:	4669      	mov	r1, sp
 8002d18:	7308      	strb	r0, [r1, #12]
 8002d1a:	0028      	movs	r0, r5
 8002d1c:	f7fd ffa3 	bl	8000c66 <PE_Clear_RxEvent>
 8002d20:	83ec      	strh	r4, [r5, #30]
 8002d22:	8be8      	ldrh	r0, [r5, #30]
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0209      	lsls	r1, r1, #8
 8002d28:	4288      	cmp	r0, r1
 8002d2a:	d11c      	bne.n	8002d66 <__iar_annotation$$branch+0x910>
 8002d2c:	2003      	movs	r0, #3
 8002d2e:	e451      	b.n	80025d4 <__iar_annotation$$branch+0x17e>
 8002d30:	0000f01f 	.word	0x0000f01f
 8002d34:	0028      	movs	r0, r5
 8002d36:	f7fe fefd 	bl	8001b34 <PE_SubStateMachine_ExtendedMessages>
 8002d3a:	e63b      	b.n	80029b4 <__iar_annotation$$branch+0x55e>
 8002d3c:	a903      	add	r1, sp, #12
 8002d3e:	0028      	movs	r0, r5
 8002d40:	f7fe f99a 	bl	8001078 <PE_SubStateMachine_Generic>
 8002d44:	e636      	b.n	80029b4 <__iar_annotation$$branch+0x55e>
 8002d46:	a903      	add	r1, sp, #12
 8002d48:	0028      	movs	r0, r5
 8002d4a:	f001 fa1b 	bl	8004184 <PE_SubStateMachine_VconnSwap>
 8002d4e:	0004      	movs	r4, r0
 8002d50:	6868      	ldr	r0, [r5, #4]
 8002d52:	6800      	ldr	r0, [r0, #0]
 8002d54:	0401      	lsls	r1, r0, #16
 8002d56:	0fc9      	lsrs	r1, r1, #31
 8002d58:	d006      	beq.n	8002d68 <__iar_annotation$$branch+0x912>
 8002d5a:	6828      	ldr	r0, [r5, #0]
 8002d5c:	6801      	ldr	r1, [r0, #0]
 8002d5e:	4668      	mov	r0, sp
 8002d60:	7b40      	ldrb	r0, [r0, #13]
 8002d62:	f002 ff0d 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8002d66:	e6cf      	b.n	8002b08 <__iar_annotation$$branch+0x6b2>
 8002d68:	2101      	movs	r1, #1
 8002d6a:	e7f8      	b.n	8002d5e <__iar_annotation$$branch+0x908>
 8002d6c:	4668      	mov	r0, sp
 8002d6e:	7b01      	ldrb	r1, [r0, #12]
 8002d70:	0028      	movs	r0, r5
 8002d72:	f002 fc67 	bl	8005644 <PE_StateMachine_UVDM>
 8002d76:	e6c7      	b.n	8002b08 <__iar_annotation$$branch+0x6b2>
 8002d78:	2000      	movs	r0, #0
 8002d7a:	9000      	str	r0, [sp, #0]
 8002d7c:	2358      	movs	r3, #88	; 0x58
 8002d7e:	2213      	movs	r2, #19
 8002d80:	2100      	movs	r1, #0
 8002d82:	0028      	movs	r0, r5
 8002d84:	f7fe fd4c 	bl	8001820 <PE_Send_CtrlMessage>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d1f4      	bne.n	8002d76 <__iar_annotation$$branch+0x920>
 8002d8c:	2009      	movs	r0, #9
 8002d8e:	7728      	strb	r0, [r5, #28]
 8002d90:	e44e      	b.n	8002630 <__iar_annotation$$branch+0x1da>
 8002d92:	6968      	ldr	r0, [r5, #20]
 8002d94:	2701      	movs	r7, #1
 8002d96:	0b41      	lsrs	r1, r0, #13
 8002d98:	4039      	ands	r1, r7
 8002d9a:	d019      	beq.n	8002dd0 <__iar_annotation$$branch>
 8002d9c:	0b80      	lsrs	r0, r0, #14
 8002d9e:	4038      	ands	r0, r7
 8002da0:	d007      	beq.n	8002db2 <__iar_annotation$$branch+0x95c>
 8002da2:	215b      	movs	r1, #91	; 0x5b
 8002da4:	7c28      	ldrb	r0, [r5, #16]
 8002da6:	f7fd fcf3 	bl	8000790 <USBPD_PE_Notification>
 8002daa:	6968      	ldr	r0, [r5, #20]
 8002dac:	4951      	ldr	r1, [pc, #324]	; (8002ef4 <.text_6>)
 8002dae:	4001      	ands	r1, r0
 8002db0:	6169      	str	r1, [r5, #20]
 8002db2:	2003      	movs	r0, #3
 8002db4:	7468      	strb	r0, [r5, #17]
 8002db6:	7ca9      	ldrb	r1, [r5, #18]
 8002db8:	2903      	cmp	r1, #3
 8002dba:	d008      	beq.n	8002dce <__iar_annotation$$branch+0x978>
 8002dbc:	74a8      	strb	r0, [r5, #18]
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	9000      	str	r0, [sp, #0]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	7c29      	ldrb	r1, [r5, #16]
 8002dc8:	2004      	movs	r0, #4
 8002dca:	6834      	ldr	r4, [r6, #0]
 8002dcc:	47a0      	blx	r4
 8002dce:	2401      	movs	r4, #1

08002dd0 <__iar_annotation$$branch>:
 8002dd0:	f7ff fb5f 	bl	8002492 <__iar_annotation$$branch+0x3c>

08002dd4 <.text_3>:
 8002dd4:	00008014 	.word	0x00008014

08002dd8 <PE_StateMachine_SNK_ReadyWait>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	0004      	movs	r4, r0
 8002ddc:	000d      	movs	r5, r1
 8002dde:	2702      	movs	r7, #2
 8002de0:	7828      	ldrb	r0, [r5, #0]
 8002de2:	2814      	cmp	r0, #20
 8002de4:	d00b      	beq.n	8002dfe <PE_StateMachine_SNK_ReadyWait+0x26>
 8002de6:	0020      	movs	r0, r4
 8002de8:	f7fe ffca 	bl	8001d80 <PE_ManageRXEvent>
 8002dec:	7828      	ldrb	r0, [r5, #0]
 8002dee:	2814      	cmp	r0, #20
 8002df0:	d07b      	beq.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002df2:	2014      	movs	r0, #20
 8002df4:	7028      	strb	r0, [r5, #0]
 8002df6:	0020      	movs	r0, r4
 8002df8:	f7fd ff35 	bl	8000c66 <PE_Clear_RxEvent>
 8002dfc:	e075      	b.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dfe:	6961      	ldr	r1, [r4, #20]
 8002e00:	0cc8      	lsrs	r0, r1, #19
 8002e02:	250f      	movs	r5, #15
 8002e04:	03be      	lsls	r6, r7, #14
 8002e06:	2700      	movs	r7, #0
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d020      	beq.n	8002e4e <PE_StateMachine_SNK_ReadyWait+0x76>
 8002e0c:	8c21      	ldrh	r1, [r4, #32]
 8002e0e:	42b1      	cmp	r1, r6
 8002e10:	d110      	bne.n	8002e34 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002e12:	7465      	strb	r5, [r4, #17]
 8002e14:	9700      	str	r7, [sp, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	2270      	movs	r2, #112	; 0x70
 8002e1a:	7c21      	ldrb	r1, [r4, #16]
 8002e1c:	2009      	movs	r0, #9
 8002e1e:	4d36      	ldr	r5, [pc, #216]	; (8002ef8 <.text_7>)
 8002e20:	682d      	ldr	r5, [r5, #0]
 8002e22:	47a8      	blx	r5
 8002e24:	2098      	movs	r0, #152	; 0x98
 8002e26:	0080      	lsls	r0, r0, #2
 8002e28:	5c20      	ldrb	r0, [r4, r0]
 8002e2a:	1c40      	adds	r0, r0, #1
 8002e2c:	2198      	movs	r1, #152	; 0x98
 8002e2e:	0089      	lsls	r1, r1, #2
 8002e30:	5460      	strb	r0, [r4, r1]
 8002e32:	e05a      	b.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002e34:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002e36:	0509      	lsls	r1, r1, #20
 8002e38:	0f49      	lsrs	r1, r1, #29
 8002e3a:	180a      	adds	r2, r1, r0
 8002e3c:	2333      	movs	r3, #51	; 0x33
 8002e3e:	435a      	muls	r2, r3
 8002e40:	4316      	orrs	r6, r2
 8002e42:	8426      	strh	r6, [r4, #32]
 8002e44:	180f      	adds	r7, r1, r0
 8002e46:	2033      	movs	r0, #51	; 0x33
 8002e48:	4347      	muls	r7, r0
 8002e4a:	b2bf      	uxth	r7, r7
 8002e4c:	e04d      	b.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002e4e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002e50:	42b0      	cmp	r0, r6
 8002e52:	d104      	bne.n	8002e5e <PE_StateMachine_SNK_ReadyWait+0x86>
 8002e54:	2045      	movs	r0, #69	; 0x45
 8002e56:	7460      	strb	r0, [r4, #17]
 8002e58:	430e      	orrs	r6, r1
 8002e5a:	6166      	str	r6, [r4, #20]
 8002e5c:	e045      	b.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002e5e:	7c20      	ldrb	r0, [r4, #16]
 8002e60:	f7fd ff26 	bl	8000cb0 <PE_PRL_Control_RxEvent>
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d128      	bne.n	8002eba <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002e68:	2032      	movs	r0, #50	; 0x32
 8002e6a:	5c20      	ldrb	r0, [r4, r0]
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d024      	beq.n	8002eba <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002e70:	6860      	ldr	r0, [r4, #4]
 8002e72:	6800      	ldr	r0, [r0, #0]
 8002e74:	2103      	movs	r1, #3
 8002e76:	2203      	movs	r2, #3
 8002e78:	4002      	ands	r2, r0
 8002e7a:	2a01      	cmp	r2, #1
 8002e7c:	d007      	beq.n	8002e8e <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002e7e:	4001      	ands	r1, r0
 8002e80:	2902      	cmp	r1, #2
 8002e82:	d11a      	bne.n	8002eba <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002e84:	7c20      	ldrb	r0, [r4, #16]
 8002e86:	f002 fe6f 	bl	8005b68 <USBPD_PRL_IsResistor_SinkTxOK>
 8002e8a:	2801      	cmp	r0, #1
 8002e8c:	d115      	bne.n	8002eba <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002e8e:	2033      	movs	r0, #51	; 0x33
 8002e90:	5c20      	ldrb	r0, [r4, r0]
 8002e92:	2131      	movs	r1, #49	; 0x31
 8002e94:	5460      	strb	r0, [r4, r1]
 8002e96:	2032      	movs	r0, #50	; 0x32
 8002e98:	5c20      	ldrb	r0, [r4, r0]
 8002e9a:	7460      	strb	r0, [r4, #17]
 8002e9c:	2845      	cmp	r0, #69	; 0x45
 8002e9e:	d102      	bne.n	8002ea6 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002ea0:	6960      	ldr	r0, [r4, #20]
 8002ea2:	4306      	orrs	r6, r0
 8002ea4:	6166      	str	r6, [r4, #20]
 8002ea6:	2132      	movs	r1, #50	; 0x32
 8002ea8:	5467      	strb	r7, [r4, r1]
 8002eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002eac:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002eae:	6960      	ldr	r0, [r4, #20]
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	01c9      	lsls	r1, r1, #7
 8002eb4:	4301      	orrs	r1, r0
 8002eb6:	6161      	str	r1, [r4, #20]
 8002eb8:	e017      	b.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002eba:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002ebc:	42b0      	cmp	r0, r6
 8002ebe:	d109      	bne.n	8002ed4 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002ec0:	8467      	strh	r7, [r4, #34]	; 0x22
 8002ec2:	2098      	movs	r0, #152	; 0x98
 8002ec4:	0080      	lsls	r0, r0, #2
 8002ec6:	1820      	adds	r0, r4, r0
 8002ec8:	7881      	ldrb	r1, [r0, #2]
 8002eca:	1c49      	adds	r1, r1, #1
 8002ecc:	7081      	strb	r1, [r0, #2]
 8002ece:	2005      	movs	r0, #5
 8002ed0:	7460      	strb	r0, [r4, #17]
 8002ed2:	e00a      	b.n	8002eea <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ed4:	0020      	movs	r0, r4
 8002ed6:	f7fe fc15 	bl	8001704 <PE_CalculateMinTiming>
 8002eda:	2132      	movs	r1, #50	; 0x32
 8002edc:	5c61      	ldrb	r1, [r4, r1]
 8002ede:	2900      	cmp	r1, #0
 8002ee0:	d002      	beq.n	8002ee8 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002ee2:	280f      	cmp	r0, #15
 8002ee4:	d300      	bcc.n	8002ee8 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002ee6:	200f      	movs	r0, #15
 8002ee8:	0007      	movs	r7, r0
 8002eea:	0038      	movs	r0, r7
 8002eec:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002ef0 <.text_5>:
 8002ef0:	0000025e 	.word	0x0000025e

08002ef4 <.text_6>:
 8002ef4:	ffffbfff 	.word	0xffffbfff

08002ef8 <.text_7>:
 8002ef8:	20000000 	.word	0x20000000

08002efc <USBPD_PE_StateMachine_SRC>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	0005      	movs	r5, r0
 8002f02:	482e      	ldr	r0, [pc, #184]	; (8002fbc <USBPD_PE_StateMachine_SRC+0xc0>)
 8002f04:	00a9      	lsls	r1, r5, #2
 8002f06:	5844      	ldr	r4, [r0, r1]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	9004      	str	r0, [sp, #16]
 8002f0c:	8be0      	ldrh	r0, [r4, #30]
 8002f0e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002f10:	050a      	lsls	r2, r1, #20
 8002f12:	0f52      	lsrs	r2, r2, #29
 8002f14:	1880      	adds	r0, r0, r2
 8002f16:	06c9      	lsls	r1, r1, #27
 8002f18:	0ec9      	lsrs	r1, r1, #27
 8002f1a:	1846      	adds	r6, r0, r1
 8002f1c:	b2b6      	uxth	r6, r6
 8002f1e:	7c60      	ldrb	r0, [r4, #17]
 8002f20:	2848      	cmp	r0, #72	; 0x48
 8002f22:	d134      	bne.n	8002f8e <USBPD_PE_StateMachine_SRC+0x92>
 8002f24:	0020      	movs	r0, r4
 8002f26:	f7fd ff85 	bl	8000e34 <PE_Reset_ZI>
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	f7fd ffb8 	bl	8000ea0 <PE_Reset_Counter>
 8002f30:	6820      	ldr	r0, [r4, #0]
 8002f32:	7900      	ldrb	r0, [r0, #4]
 8002f34:	0783      	lsls	r3, r0, #30
 8002f36:	0f9b      	lsrs	r3, r3, #30
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	7c20      	ldrb	r0, [r4, #16]
 8002f3e:	f002 fdae 	bl	8005a9e <USBPD_PRL_SetHeader>
 8002f42:	6860      	ldr	r0, [r4, #4]
 8002f44:	6801      	ldr	r1, [r0, #0]
 8002f46:	2208      	movs	r2, #8
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	6002      	str	r2, [r0, #0]
 8002f4c:	6860      	ldr	r0, [r4, #4]
 8002f4e:	6801      	ldr	r1, [r0, #0]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4391      	bics	r1, r2
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	7912      	ldrb	r2, [r2, #4]
 8002f58:	0792      	lsls	r2, r2, #30
 8002f5a:	0f92      	lsrs	r2, r2, #30
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	6002      	str	r2, [r0, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	7c20      	ldrb	r0, [r4, #16]
 8002f64:	f002 fe0c 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8002f68:	7c20      	ldrb	r0, [r4, #16]
 8002f6a:	f003 f875 	bl	8006058 <USBPD_PRL_Reset>
 8002f6e:	2002      	movs	r0, #2
 8002f70:	7460      	strb	r0, [r4, #17]
 8002f72:	7ca0      	ldrb	r0, [r4, #18]
 8002f74:	2802      	cmp	r0, #2
 8002f76:	d00a      	beq.n	8002f8e <USBPD_PE_StateMachine_SRC+0x92>
 8002f78:	2002      	movs	r0, #2
 8002f7a:	74a0      	strb	r0, [r4, #18]
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	9000      	str	r0, [sp, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	2202      	movs	r2, #2
 8002f84:	7c21      	ldrb	r1, [r4, #16]
 8002f86:	2004      	movs	r0, #4
 8002f88:	4fc3      	ldr	r7, [pc, #780]	; (8003298 <__iar_annotation$$branch+0x82>)
 8002f8a:	683f      	ldr	r7, [r7, #0]
 8002f8c:	47b8      	blx	r7
 8002f8e:	6960      	ldr	r0, [r4, #20]
 8002f90:	0341      	lsls	r1, r0, #13
 8002f92:	0fc9      	lsrs	r1, r1, #31
 8002f94:	d006      	beq.n	8002fa4 <USBPD_PE_StateMachine_SRC+0xa8>
 8002f96:	49c1      	ldr	r1, [pc, #772]	; (800329c <__iar_annotation$$branch+0x86>)
 8002f98:	4001      	ands	r1, r0
 8002f9a:	6161      	str	r1, [r4, #20]
 8002f9c:	2164      	movs	r1, #100	; 0x64
 8002f9e:	7c20      	ldrb	r0, [r4, #16]
 8002fa0:	f7fd fbf6 	bl	8000790 <USBPD_PE_Notification>
 8002fa4:	0020      	movs	r0, r4
 8002fa6:	f7fd fe27 	bl	8000bf8 <PE_Get_RxEvent>
 8002faa:	4669      	mov	r1, sp
 8002fac:	7308      	strb	r0, [r1, #12]
 8002fae:	4668      	mov	r0, sp
 8002fb0:	7b00      	ldrb	r0, [r0, #12]
 8002fb2:	2803      	cmp	r0, #3
 8002fb4:	d104      	bne.n	8002fc0 <USBPD_PE_StateMachine_SRC+0xc4>
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	b009      	add	sp, #36	; 0x24
 8002fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fbc:	20000178 	.word	0x20000178
 8002fc0:	4668      	mov	r0, sp
 8002fc2:	7345      	strb	r5, [r0, #13]
 8002fc4:	9607      	str	r6, [sp, #28]
 8002fc6:	6860      	ldr	r0, [r4, #4]
 8002fc8:	6800      	ldr	r0, [r0, #0]
 8002fca:	04c1      	lsls	r1, r0, #19
 8002fcc:	0fc9      	lsrs	r1, r1, #31
 8002fce:	d100      	bne.n	8002fd2 <USBPD_PE_StateMachine_SRC+0xd6>
 8002fd0:	e170      	b.n	80032b4 <__iar_annotation$$branch+0x9e>
 8002fd2:	6960      	ldr	r0, [r4, #20]
 8002fd4:	0381      	lsls	r1, r0, #14
 8002fd6:	0fc9      	lsrs	r1, r1, #31
 8002fd8:	d100      	bne.n	8002fdc <USBPD_PE_StateMachine_SRC+0xe0>
 8002fda:	e179      	b.n	80032d0 <__iar_annotation$$branch+0xba>
 8002fdc:	4668      	mov	r0, sp
 8002fde:	7b40      	ldrb	r0, [r0, #13]
 8002fe0:	f002 fdc6 	bl	8005b70 <USBPD_PRL_FastRoleSwapSignalling>
 8002fe4:	20a6      	movs	r0, #166	; 0xa6
 8002fe6:	7460      	strb	r0, [r4, #17]
 8002fe8:	2109      	movs	r1, #9
 8002fea:	7721      	strb	r1, [r4, #28]
 8002fec:	2100      	movs	r1, #0
 8002fee:	2232      	movs	r2, #50	; 0x32
 8002ff0:	54a1      	strb	r1, [r4, r2]
 8002ff2:	6961      	ldr	r1, [r4, #20]
 8002ff4:	4aaa      	ldr	r2, [pc, #680]	; (80032a0 <__iar_annotation$$branch+0x8a>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	6162      	str	r2, [r4, #20]
 8002ffa:	49aa      	ldr	r1, [pc, #680]	; (80032a4 <__iar_annotation$$branch+0x8e>)
 8002ffc:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002ffe:	7ca1      	ldrb	r1, [r4, #18]
 8003000:	29a6      	cmp	r1, #166	; 0xa6
 8003002:	d000      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x10a>
 8003004:	e15a      	b.n	80032bc <__iar_annotation$$branch+0xa6>
 8003006:	2502      	movs	r5, #2
 8003008:	4668      	mov	r0, sp
 800300a:	7b00      	ldrb	r0, [r0, #12]
 800300c:	2811      	cmp	r0, #17
 800300e:	d11e      	bne.n	800304e <USBPD_PE_StateMachine_SRC+0x152>
 8003010:	6860      	ldr	r0, [r4, #4]
 8003012:	6800      	ldr	r0, [r0, #0]
 8003014:	0701      	lsls	r1, r0, #28
 8003016:	0fc9      	lsrs	r1, r1, #31
 8003018:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800301a:	0680      	lsls	r0, r0, #26
 800301c:	0fc2      	lsrs	r2, r0, #31
 800301e:	4291      	cmp	r1, r2
 8003020:	d115      	bne.n	800304e <USBPD_PE_StateMachine_SRC+0x152>
 8003022:	2014      	movs	r0, #20
 8003024:	4669      	mov	r1, sp
 8003026:	7308      	strb	r0, [r1, #12]
 8003028:	0020      	movs	r0, r4
 800302a:	f7fd fe1c 	bl	8000c66 <PE_Clear_RxEvent>
 800302e:	2092      	movs	r0, #146	; 0x92
 8003030:	7460      	strb	r0, [r4, #17]
 8003032:	7ca0      	ldrb	r0, [r4, #18]
 8003034:	2892      	cmp	r0, #146	; 0x92
 8003036:	d00a      	beq.n	800304e <USBPD_PE_StateMachine_SRC+0x152>
 8003038:	2092      	movs	r0, #146	; 0x92
 800303a:	74a0      	strb	r0, [r4, #18]
 800303c:	2000      	movs	r0, #0
 800303e:	9000      	str	r0, [sp, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	2292      	movs	r2, #146	; 0x92
 8003044:	7c21      	ldrb	r1, [r4, #16]
 8003046:	2004      	movs	r0, #4
 8003048:	4e93      	ldr	r6, [pc, #588]	; (8003298 <__iar_annotation$$branch+0x82>)
 800304a:	6836      	ldr	r6, [r6, #0]
 800304c:	47b0      	blx	r6
 800304e:	9807      	ldr	r0, [sp, #28]
 8003050:	2800      	cmp	r0, #0
 8003052:	d001      	beq.n	8003058 <USBPD_PE_StateMachine_SRC+0x15c>
 8003054:	2001      	movs	r0, #1
 8003056:	9004      	str	r0, [sp, #16]
 8003058:	7c60      	ldrb	r0, [r4, #17]
 800305a:	4993      	ldr	r1, [pc, #588]	; (80032a8 <__iar_annotation$$branch+0x92>)
 800305c:	1866      	adds	r6, r4, r1
 800305e:	4f93      	ldr	r7, [pc, #588]	; (80032ac <__iar_annotation$$branch+0x96>)
 8003060:	4993      	ldr	r1, [pc, #588]	; (80032b0 <__iar_annotation$$branch+0x9a>)
 8003062:	0002      	movs	r2, r0
 8003064:	d100      	bne.n	8003068 <USBPD_PE_StateMachine_SRC+0x16c>
 8003066:	e158      	b.n	800331a <__iar_annotation$$branch+0x104>
 8003068:	1e42      	subs	r2, r0, #1
 800306a:	d069      	beq.n	8003140 <__iar_annotation$$branch+0x8>
 800306c:	1e52      	subs	r2, r2, #1
 800306e:	d100      	bne.n	8003072 <USBPD_PE_StateMachine_SRC+0x176>
 8003070:	e16b      	b.n	800334a <__iar_annotation$$branch+0x134>
 8003072:	1e52      	subs	r2, r2, #1
 8003074:	2a01      	cmp	r2, #1
 8003076:	d801      	bhi.n	800307c <__iar_annotation$$branch+0x4>

08003078 <__iar_annotation$$branch>:
 8003078:	f000 fdbf 	bl	8003bfa <__iar_annotation$$branch+0x9e4>
 800307c:	1e92      	subs	r2, r2, #2
 800307e:	d100      	bne.n	8003082 <__iar_annotation$$branch+0xa>
 8003080:	e1ab      	b.n	80033da <__iar_annotation$$branch+0x1c4>
 8003082:	1e52      	subs	r2, r2, #1
 8003084:	d100      	bne.n	8003088 <__iar_annotation$$branch+0x10>
 8003086:	e1ad      	b.n	80033e4 <__iar_annotation$$branch+0x1ce>
 8003088:	1e52      	subs	r2, r2, #1
 800308a:	d100      	bne.n	800308e <__iar_annotation$$branch+0x16>
 800308c:	e1b2      	b.n	80033f4 <__iar_annotation$$branch+0x1de>
 800308e:	1e52      	subs	r2, r2, #1
 8003090:	d100      	bne.n	8003094 <__iar_annotation$$branch+0x1c>
 8003092:	e20e      	b.n	80034b2 <__iar_annotation$$branch+0x29c>
 8003094:	1e52      	subs	r2, r2, #1
 8003096:	d100      	bne.n	800309a <__iar_annotation$$branch+0x22>
 8003098:	e250      	b.n	800353c <__iar_annotation$$branch+0x326>
 800309a:	1ed2      	subs	r2, r2, #3
 800309c:	d100      	bne.n	80030a0 <__iar_annotation$$branch+0x28>
 800309e:	e2a6      	b.n	80035ee <__iar_annotation$$branch+0x3d8>
 80030a0:	1e52      	subs	r2, r2, #1
 80030a2:	d100      	bne.n	80030a6 <__iar_annotation$$branch+0x2e>
 80030a4:	e2b6      	b.n	8003614 <__iar_annotation$$branch+0x3fe>
 80030a6:	1e52      	subs	r2, r2, #1
 80030a8:	d100      	bne.n	80030ac <__iar_annotation$$branch+0x34>
 80030aa:	e13f      	b.n	800332c <__iar_annotation$$branch+0x116>
 80030ac:	1e52      	subs	r2, r2, #1
 80030ae:	d100      	bne.n	80030b2 <__iar_annotation$$branch+0x3a>
 80030b0:	e33e      	b.n	8003730 <__iar_annotation$$branch+0x51a>
 80030b2:	1e52      	subs	r2, r2, #1
 80030b4:	d100      	bne.n	80030b8 <__iar_annotation$$branch+0x40>
 80030b6:	e2f7      	b.n	80036a8 <__iar_annotation$$branch+0x492>
 80030b8:	1e52      	subs	r2, r2, #1
 80030ba:	d100      	bne.n	80030be <__iar_annotation$$branch+0x46>
 80030bc:	e2fd      	b.n	80036ba <__iar_annotation$$branch+0x4a4>
 80030be:	1e52      	subs	r2, r2, #1
 80030c0:	d100      	bne.n	80030c4 <__iar_annotation$$branch+0x4c>
 80030c2:	e309      	b.n	80036d8 <__iar_annotation$$branch+0x4c2>
 80030c4:	1e52      	subs	r2, r2, #1
 80030c6:	d100      	bne.n	80030ca <__iar_annotation$$branch+0x52>
 80030c8:	e3ba      	b.n	8003840 <__iar_annotation$$branch+0x62a>
 80030ca:	1e52      	subs	r2, r2, #1
 80030cc:	d100      	bne.n	80030d0 <__iar_annotation$$branch+0x58>
 80030ce:	e35c      	b.n	800378a <__iar_annotation$$branch+0x574>
 80030d0:	1e52      	subs	r2, r2, #1
 80030d2:	d100      	bne.n	80030d6 <__iar_annotation$$branch+0x5e>
 80030d4:	e363      	b.n	800379e <__iar_annotation$$branch+0x588>
 80030d6:	1e52      	subs	r2, r2, #1
 80030d8:	d100      	bne.n	80030dc <__iar_annotation$$branch+0x64>
 80030da:	e202      	b.n	80034e2 <__iar_annotation$$branch+0x2cc>
 80030dc:	1e52      	subs	r2, r2, #1
 80030de:	d100      	bne.n	80030e2 <__iar_annotation$$branch+0x6a>
 80030e0:	e37d      	b.n	80037de <__iar_annotation$$branch+0x5c8>
 80030e2:	1e52      	subs	r2, r2, #1
 80030e4:	2a01      	cmp	r2, #1
 80030e6:	d92b      	bls.n	8003140 <__iar_annotation$$branch+0x8>
 80030e8:	1e92      	subs	r2, r2, #2
 80030ea:	d101      	bne.n	80030f0 <__iar_annotation$$branch+0x4>

080030ec <__iar_annotation$$branch>:
 80030ec:	f000 fbd2 	bl	8003894 <__iar_annotation$$branch+0x67e>
 80030f0:	1e52      	subs	r2, r2, #1
 80030f2:	d101      	bne.n	80030f8 <__iar_annotation$$branch+0x4>

080030f4 <__iar_annotation$$branch>:
 80030f4:	f000 fbde 	bl	80038b4 <__iar_annotation$$branch+0x69e>
 80030f8:	1e92      	subs	r2, r2, #2
 80030fa:	d021      	beq.n	8003140 <__iar_annotation$$branch+0x8>
 80030fc:	1e52      	subs	r2, r2, #1
 80030fe:	d101      	bne.n	8003104 <__iar_annotation$$branch+0x4>

08003100 <__iar_annotation$$branch>:
 8003100:	f000 fcb5 	bl	8003a6e <__iar_annotation$$branch+0x858>
 8003104:	1e52      	subs	r2, r2, #1
 8003106:	d101      	bne.n	800310c <__iar_annotation$$branch+0x4>

08003108 <__iar_annotation$$branch>:
 8003108:	f000 fcc7 	bl	8003a9a <__iar_annotation$$branch+0x884>
 800310c:	1e52      	subs	r2, r2, #1
 800310e:	d101      	bne.n	8003114 <__iar_annotation$$branch+0x4>

08003110 <__iar_annotation$$branch>:
 8003110:	f000 fd13 	bl	8003b3a <__iar_annotation$$branch+0x924>
 8003114:	1e52      	subs	r2, r2, #1
 8003116:	d101      	bne.n	800311c <__iar_annotation$$branch+0x4>

08003118 <__iar_annotation$$branch>:
 8003118:	f000 fd3c 	bl	8003b94 <__iar_annotation$$branch+0x97e>
 800311c:	1e52      	subs	r2, r2, #1
 800311e:	d101      	bne.n	8003124 <__iar_annotation$$branch+0x4>

08003120 <__iar_annotation$$branch>:
 8003120:	f000 fc12 	bl	8003948 <__iar_annotation$$branch+0x732>
 8003124:	1e92      	subs	r2, r2, #2
 8003126:	d101      	bne.n	800312c <__iar_annotation$$branch+0x4>

08003128 <__iar_annotation$$branch>:
 8003128:	f000 fc37 	bl	800399a <__iar_annotation$$branch+0x784>
 800312c:	1e52      	subs	r2, r2, #1
 800312e:	d101      	bne.n	8003134 <__iar_annotation$$branch+0x4>

08003130 <__iar_annotation$$branch>:
 8003130:	f000 fc5b 	bl	80039ea <__iar_annotation$$branch+0x7d4>
 8003134:	1e52      	subs	r2, r2, #1
 8003136:	d101      	bne.n	800313c <__iar_annotation$$branch+0x4>

08003138 <__iar_annotation$$branch>:
 8003138:	f000 fc76 	bl	8003a28 <__iar_annotation$$branch+0x812>
 800313c:	1e52      	subs	r2, r2, #1
 800313e:	2a02      	cmp	r2, #2
 8003140:	d801      	bhi.n	8003146 <__iar_annotation$$branch+0x4>

08003142 <__iar_annotation$$branch>:
 8003142:	f000 fe4a 	bl	8003dda <__iar_annotation$$branch+0xbc4>
 8003146:	1ed2      	subs	r2, r2, #3
 8003148:	d101      	bne.n	800314e <__iar_annotation$$branch+0x4>

0800314a <__iar_annotation$$branch>:
 800314a:	f000 fc21 	bl	8003990 <__iar_annotation$$branch+0x77a>
 800314e:	1e52      	subs	r2, r2, #1
 8003150:	d101      	bne.n	8003156 <__iar_annotation$$branch+0x4>

08003152 <__iar_annotation$$branch>:
 8003152:	f000 fdc4 	bl	8003cde <__iar_annotation$$branch+0xac8>
 8003156:	1e52      	subs	r2, r2, #1
 8003158:	d0f2      	beq.n	8003140 <__iar_annotation$$branch+0x8>
 800315a:	1e52      	subs	r2, r2, #1
 800315c:	d101      	bne.n	8003162 <__iar_annotation$$branch+0x4>

0800315e <__iar_annotation$$branch>:
 800315e:	f000 fdcf 	bl	8003d00 <__iar_annotation$$branch+0xaea>
 8003162:	1e52      	subs	r2, r2, #1
 8003164:	d101      	bne.n	800316a <__iar_annotation$$branch+0x4>

08003166 <__iar_annotation$$branch>:
 8003166:	f000 fdfd 	bl	8003d64 <__iar_annotation$$branch+0xb4e>
 800316a:	1e52      	subs	r2, r2, #1
 800316c:	2a01      	cmp	r2, #1
 800316e:	d9e7      	bls.n	8003140 <__iar_annotation$$branch+0x8>
 8003170:	1e92      	subs	r2, r2, #2
 8003172:	d001      	beq.n	8003178 <__iar_annotation$$branch+0x12>
 8003174:	1e92      	subs	r2, r2, #2
 8003176:	2a05      	cmp	r2, #5
 8003178:	d801      	bhi.n	800317e <__iar_annotation$$branch+0x4>

0800317a <__iar_annotation$$branch>:
 800317a:	f000 fe2a 	bl	8003dd2 <__iar_annotation$$branch+0xbbc>
 800317e:	1f92      	subs	r2, r2, #6
 8003180:	d101      	bne.n	8003186 <__iar_annotation$$branch+0x4>

08003182 <__iar_annotation$$branch>:
 8003182:	f000 fe00 	bl	8003d86 <__iar_annotation$$branch+0xb70>
 8003186:	1e52      	subs	r2, r2, #1
 8003188:	2a03      	cmp	r2, #3
 800318a:	d9d9      	bls.n	8003140 <__iar_annotation$$branch+0x8>
 800318c:	3a11      	subs	r2, #17
 800318e:	d0d7      	beq.n	8003140 <__iar_annotation$$branch+0x8>
 8003190:	1e52      	subs	r2, r2, #1
 8003192:	d100      	bne.n	8003196 <__iar_annotation$$branch+0x14>
 8003194:	e17b      	b.n	800348e <__iar_annotation$$branch+0x278>
 8003196:	3a0f      	subs	r2, #15
 8003198:	d101      	bne.n	800319e <__iar_annotation$$branch+0x4>

0800319a <__iar_annotation$$branch>:
 800319a:	f000 fd16 	bl	8003bca <__iar_annotation$$branch+0x9b4>
 800319e:	1fd2      	subs	r2, r2, #7
 80031a0:	2a01      	cmp	r2, #1
 80031a2:	d9cd      	bls.n	8003140 <__iar_annotation$$branch+0x8>
 80031a4:	1f52      	subs	r2, r2, #5
 80031a6:	2a01      	cmp	r2, #1
 80031a8:	d9ca      	bls.n	8003140 <__iar_annotation$$branch+0x8>
 80031aa:	3a0d      	subs	r2, #13
 80031ac:	d0c8      	beq.n	8003140 <__iar_annotation$$branch+0x8>
 80031ae:	3a12      	subs	r2, #18
 80031b0:	d101      	bne.n	80031b6 <__iar_annotation$$branch+0x4>

080031b2 <__iar_annotation$$branch>:
 80031b2:	f000 fe47 	bl	8003e44 <__iar_annotation$$branch+0x62>
 80031b6:	3a0c      	subs	r2, #12
 80031b8:	d100      	bne.n	80031bc <__iar_annotation$$branch+0xa>
 80031ba:	e0ba      	b.n	8003332 <__iar_annotation$$branch+0x11c>
 80031bc:	1e52      	subs	r2, r2, #1
 80031be:	2a02      	cmp	r2, #2
 80031c0:	d9be      	bls.n	8003140 <__iar_annotation$$branch+0x8>
 80031c2:	1ed2      	subs	r2, r2, #3
 80031c4:	d100      	bne.n	80031c8 <__iar_annotation$$branch+0x16>
 80031c6:	e241      	b.n	800364c <__iar_annotation$$branch+0x436>
 80031c8:	1e52      	subs	r2, r2, #1
 80031ca:	d100      	bne.n	80031ce <__iar_annotation$$branch+0x1c>
 80031cc:	e258      	b.n	8003680 <__iar_annotation$$branch+0x46a>
 80031ce:	1e92      	subs	r2, r2, #2
 80031d0:	d0b6      	beq.n	8003140 <__iar_annotation$$branch+0x8>
 80031d2:	1e52      	subs	r2, r2, #1
 80031d4:	d100      	bne.n	80031d8 <__iar_annotation$$branch+0x26>
 80031d6:	e100      	b.n	80033da <__iar_annotation$$branch+0x1c4>
 80031d8:	1e92      	subs	r2, r2, #2
 80031da:	2a08      	cmp	r2, #8
 80031dc:	d801      	bhi.n	80031e2 <__iar_annotation$$branch+0x4>

080031de <__iar_annotation$$branch>:
 80031de:	f000 fe02 	bl	8003de6 <__iar_annotation$$branch+0x4>
 80031e2:	3a0a      	subs	r2, #10
 80031e4:	d101      	bne.n	80031ea <__iar_annotation$$branch+0x4>

080031e6 <__iar_annotation$$branch>:
 80031e6:	f000 fe11 	bl	8003e0c <__iar_annotation$$branch+0x2a>
 80031ea:	a903      	add	r1, sp, #12
 80031ec:	0020      	movs	r0, r4
 80031ee:	f001 fb57 	bl	80048a0 <PE_StateMachine_VDM>
 80031f2:	0005      	movs	r5, r0
 80031f4:	7c62      	ldrb	r2, [r4, #17]
 80031f6:	4e28      	ldr	r6, [pc, #160]	; (8003298 <__iar_annotation$$branch+0x82>)
 80031f8:	7ca0      	ldrb	r0, [r4, #18]
 80031fa:	4290      	cmp	r0, r2
 80031fc:	d007      	beq.n	800320e <__iar_annotation$$branch+0x28>
 80031fe:	74a2      	strb	r2, [r4, #18]
 8003200:	2000      	movs	r0, #0
 8003202:	9000      	str	r0, [sp, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	7c21      	ldrb	r1, [r4, #16]
 8003208:	2004      	movs	r0, #4
 800320a:	6837      	ldr	r7, [r6, #0]
 800320c:	47b8      	blx	r7
 800320e:	4668      	mov	r0, sp
 8003210:	7b00      	ldrb	r0, [r0, #12]
 8003212:	2814      	cmp	r0, #20
 8003214:	d101      	bne.n	800321a <__iar_annotation$$branch+0x4>

08003216 <__iar_annotation$$branch>:
 8003216:	f000 fe1b 	bl	8003e50 <__iar_annotation$$branch+0x6e>
 800321a:	0020      	movs	r0, r4
 800321c:	f7fd fd6a 	bl	8000cf4 <PE_Check_AMSConflict>
 8003220:	2815      	cmp	r0, #21
 8003222:	d109      	bne.n	8003238 <__iar_annotation$$branch+0x22>
 8003224:	4668      	mov	r0, sp
 8003226:	7b00      	ldrb	r0, [r0, #12]
 8003228:	2814      	cmp	r0, #20
 800322a:	d005      	beq.n	8003238 <__iar_annotation$$branch+0x22>
 800322c:	2014      	movs	r0, #20
 800322e:	4669      	mov	r1, sp
 8003230:	7308      	strb	r0, [r1, #12]
 8003232:	0020      	movs	r0, r4
 8003234:	f7fd fd17 	bl	8000c66 <PE_Clear_RxEvent>
 8003238:	7c62      	ldrb	r2, [r4, #17]
 800323a:	7ca0      	ldrb	r0, [r4, #18]
 800323c:	4290      	cmp	r0, r2
 800323e:	d007      	beq.n	8003250 <__iar_annotation$$branch+0x3a>
 8003240:	74a2      	strb	r2, [r4, #18]
 8003242:	2000      	movs	r0, #0
 8003244:	9000      	str	r0, [sp, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	7c21      	ldrb	r1, [r4, #16]
 800324a:	2004      	movs	r0, #4
 800324c:	6835      	ldr	r5, [r6, #0]
 800324e:	47a8      	blx	r5
 8003250:	2500      	movs	r5, #0
 8003252:	6960      	ldr	r0, [r4, #20]
 8003254:	4980      	ldr	r1, [pc, #512]	; (8003458 <__iar_annotation$$branch+0x242>)
 8003256:	4001      	ands	r1, r0
 8003258:	6161      	str	r1, [r4, #20]
 800325a:	9804      	ldr	r0, [sp, #16]
 800325c:	2800      	cmp	r0, #0
 800325e:	d017      	beq.n	8003290 <__iar_annotation$$branch+0x7a>
 8003260:	487e      	ldr	r0, [pc, #504]	; (800345c <__iar_annotation$$branch+0x246>)
 8003262:	6800      	ldr	r0, [r0, #0]
 8003264:	497e      	ldr	r1, [pc, #504]	; (8003460 <__iar_annotation$$branch+0x24a>)
 8003266:	4288      	cmp	r0, r1
 8003268:	d012      	beq.n	8003290 <__iar_annotation$$branch+0x7a>
 800326a:	487e      	ldr	r0, [pc, #504]	; (8003464 <__iar_annotation$$branch+0x24e>)
 800326c:	7c21      	ldrb	r1, [r4, #16]
 800326e:	0089      	lsls	r1, r1, #2
 8003270:	5841      	ldr	r1, [r0, r1]
 8003272:	694a      	ldr	r2, [r1, #20]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	18d2      	adds	r2, r2, r3
 800327a:	614a      	str	r2, [r1, #20]
 800327c:	7c21      	ldrb	r1, [r4, #16]
 800327e:	0089      	lsls	r1, r1, #2
 8003280:	5840      	ldr	r0, [r0, r1]
 8003282:	6941      	ldr	r1, [r0, #20]
 8003284:	0cca      	lsrs	r2, r1, #19
 8003286:	2a08      	cmp	r2, #8
 8003288:	d302      	bcc.n	8003290 <__iar_annotation$$branch+0x7a>
 800328a:	0349      	lsls	r1, r1, #13
 800328c:	0b49      	lsrs	r1, r1, #13
 800328e:	6141      	str	r1, [r0, #20]
 8003290:	2d00      	cmp	r5, #0
 8003292:	d100      	bne.n	8003296 <__iar_annotation$$branch+0x80>
 8003294:	e697      	b.n	8002fc6 <USBPD_PE_StateMachine_SRC+0xca>
 8003296:	e00f      	b.n	80032b8 <__iar_annotation$$branch+0xa2>
 8003298:	20000000 	.word	0x20000000
 800329c:	fffbffff 	.word	0xfffbffff
 80032a0:	fffdffff 	.word	0xfffdffff
 80032a4:	00008011 	.word	0x00008011
 80032a8:	0000025e 	.word	0x0000025e
 80032ac:	0000801b 	.word	0x0000801b
 80032b0:	0000f01f 	.word	0x0000f01f
 80032b4:	2500      	movs	r5, #0
 80032b6:	43ed      	mvns	r5, r5
 80032b8:	0028      	movs	r0, r5
 80032ba:	e67d      	b.n	8002fb8 <USBPD_PE_StateMachine_SRC+0xbc>
 80032bc:	74a0      	strb	r0, [r4, #18]
 80032be:	2000      	movs	r0, #0
 80032c0:	9000      	str	r0, [sp, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	22a6      	movs	r2, #166	; 0xa6
 80032c6:	7c21      	ldrb	r1, [r4, #16]
 80032c8:	2004      	movs	r0, #4
 80032ca:	4d67      	ldr	r5, [pc, #412]	; (8003468 <__iar_annotation$$branch+0x252>)
 80032cc:	682d      	ldr	r5, [r5, #0]
 80032ce:	47a8      	blx	r5
 80032d0:	2502      	movs	r5, #2
 80032d2:	2032      	movs	r0, #50	; 0x32
 80032d4:	5c20      	ldrb	r0, [r4, r0]
 80032d6:	280f      	cmp	r0, #15
 80032d8:	d001      	beq.n	80032de <__iar_annotation$$branch+0xc8>
 80032da:	2814      	cmp	r0, #20
 80032dc:	d11c      	bne.n	8003318 <__iar_annotation$$branch+0x102>
 80032de:	4668      	mov	r0, sp
 80032e0:	7b00      	ldrb	r0, [r0, #12]
 80032e2:	2814      	cmp	r0, #20
 80032e4:	d005      	beq.n	80032f2 <__iar_annotation$$branch+0xdc>
 80032e6:	2014      	movs	r0, #20
 80032e8:	4669      	mov	r1, sp
 80032ea:	7308      	strb	r0, [r1, #12]
 80032ec:	0020      	movs	r0, r4
 80032ee:	f7fd fcba 	bl	8000c66 <PE_Clear_RxEvent>
 80032f2:	2032      	movs	r0, #50	; 0x32
 80032f4:	5c22      	ldrb	r2, [r4, r0]
 80032f6:	7462      	strb	r2, [r4, #17]
 80032f8:	2000      	movs	r0, #0
 80032fa:	2332      	movs	r3, #50	; 0x32
 80032fc:	54e0      	strb	r0, [r4, r3]
 80032fe:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003300:	7ca0      	ldrb	r0, [r4, #18]
 8003302:	4290      	cmp	r0, r2
 8003304:	d008      	beq.n	8003318 <__iar_annotation$$branch+0x102>
 8003306:	74a2      	strb	r2, [r4, #18]
 8003308:	2000      	movs	r0, #0
 800330a:	9000      	str	r0, [sp, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	7c21      	ldrb	r1, [r4, #16]
 8003310:	2004      	movs	r0, #4
 8003312:	4e55      	ldr	r6, [pc, #340]	; (8003468 <__iar_annotation$$branch+0x252>)
 8003314:	6836      	ldr	r6, [r6, #0]
 8003316:	47b0      	blx	r6
 8003318:	e676      	b.n	8003008 <USBPD_PE_StateMachine_SRC+0x10c>
 800331a:	6860      	ldr	r0, [r4, #4]
 800331c:	6801      	ldr	r1, [r0, #0]
 800331e:	2210      	movs	r2, #16
 8003320:	4391      	bics	r1, r2
 8003322:	6001      	str	r1, [r0, #0]
 8003324:	215f      	movs	r1, #95	; 0x5f
 8003326:	7c20      	ldrb	r0, [r4, #16]
 8003328:	f7fd fa32 	bl	8000790 <USBPD_PE_Notification>
 800332c:	2500      	movs	r5, #0
 800332e:	43ed      	mvns	r5, r5
 8003330:	e760      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 8003332:	6860      	ldr	r0, [r4, #4]
 8003334:	6801      	ldr	r1, [r0, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	4391      	bics	r1, r2
 800333a:	6001      	str	r1, [r0, #0]
 800333c:	68a0      	ldr	r0, [r4, #8]
 800333e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003340:	2900      	cmp	r1, #0
 8003342:	d0f3      	beq.n	800332c <__iar_annotation$$branch+0x116>
 8003344:	7c20      	ldrb	r0, [r4, #16]
 8003346:	4788      	blx	r1
 8003348:	e7f0      	b.n	800332c <__iar_annotation$$branch+0x116>
 800334a:	2701      	movs	r7, #1
 800334c:	6860      	ldr	r0, [r4, #4]
 800334e:	6800      	ldr	r0, [r0, #0]
 8003350:	0bc0      	lsrs	r0, r0, #15
 8003352:	4038      	ands	r0, r7
 8003354:	d002      	beq.n	800335c <__iar_annotation$$branch+0x146>
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	6801      	ldr	r1, [r0, #0]
 800335a:	e000      	b.n	800335e <__iar_annotation$$branch+0x148>
 800335c:	2101      	movs	r1, #1
 800335e:	4668      	mov	r0, sp
 8003360:	7b40      	ldrb	r0, [r0, #13]
 8003362:	f002 fc0d 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8003366:	6860      	ldr	r0, [r4, #4]
 8003368:	6801      	ldr	r1, [r0, #0]
 800336a:	0b0a      	lsrs	r2, r1, #12
 800336c:	403a      	ands	r2, r7
 800336e:	d02f      	beq.n	80033d0 <__iar_annotation$$branch+0x1ba>
 8003370:	078a      	lsls	r2, r1, #30
 8003372:	0f92      	lsrs	r2, r2, #30
 8003374:	2a01      	cmp	r2, #1
 8003376:	d101      	bne.n	800337c <__iar_annotation$$branch+0x166>
 8003378:	2200      	movs	r2, #0
 800337a:	e000      	b.n	800337e <__iar_annotation$$branch+0x168>
 800337c:	2220      	movs	r2, #32
 800337e:	2320      	movs	r3, #32
 8003380:	4399      	bics	r1, r3
 8003382:	430a      	orrs	r2, r1
 8003384:	6002      	str	r2, [r0, #0]
 8003386:	2000      	movs	r0, #0
 8003388:	70f0      	strb	r0, [r6, #3]
 800338a:	2101      	movs	r1, #1
 800338c:	0020      	movs	r0, r4
 800338e:	f7fe f992 	bl	80016b6 <PE_SetPowerNegotiation>
 8003392:	6860      	ldr	r0, [r4, #4]
 8003394:	6800      	ldr	r0, [r0, #0]
 8003396:	0901      	lsrs	r1, r0, #4
 8003398:	4039      	ands	r1, r7
 800339a:	d005      	beq.n	80033a8 <__iar_annotation$$branch+0x192>
 800339c:	48b5      	ldr	r0, [pc, #724]	; (8003674 <__iar_annotation$$branch+0x45e>)
 800339e:	83e0      	strh	r0, [r4, #30]
 80033a0:	2514      	movs	r5, #20
 80033a2:	2006      	movs	r0, #6
 80033a4:	7460      	strb	r0, [r4, #17]
 80033a6:	e725      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 80033a8:	0bc0      	lsrs	r0, r0, #15
 80033aa:	4007      	ands	r7, r0
 80033ac:	d00a      	beq.n	80033c4 <__iar_annotation$$branch+0x1ae>
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	7800      	ldrb	r0, [r0, #0]
 80033b2:	0780      	lsls	r0, r0, #30
 80033b4:	d400      	bmi.n	80033b8 <__iar_annotation$$branch+0x1a2>
 80033b6:	e092      	b.n	80034de <__iar_annotation$$branch+0x2c8>
 80033b8:	7930      	ldrb	r0, [r6, #4]
 80033ba:	2814      	cmp	r0, #20
 80033bc:	d300      	bcc.n	80033c0 <__iar_annotation$$branch+0x1aa>
 80033be:	e08e      	b.n	80034de <__iar_annotation$$branch+0x2c8>
 80033c0:	68e1      	ldr	r1, [r4, #12]
 80033c2:	2900      	cmp	r1, #0
 80033c4:	d100      	bne.n	80033c8 <__iar_annotation$$branch+0x1b2>
 80033c6:	e08a      	b.n	80034de <__iar_annotation$$branch+0x2c8>
 80033c8:	1c40      	adds	r0, r0, #1
 80033ca:	7130      	strb	r0, [r6, #4]
 80033cc:	2005      	movs	r0, #5
 80033ce:	e7e9      	b.n	80033a4 <__iar_annotation$$branch+0x18e>
 80033d0:	2121      	movs	r1, #33	; 0x21
 80033d2:	7c20      	ldrb	r0, [r4, #16]
 80033d4:	f7fd f9dc 	bl	8000790 <USBPD_PE_Notification>
 80033d8:	e057      	b.n	800348a <__iar_annotation$$branch+0x274>
 80033da:	a903      	add	r1, sp, #12
 80033dc:	0020      	movs	r0, r4
 80033de:	f000 fd91 	bl	8003f04 <PE_StateMachine_VDMCable>
 80033e2:	e706      	b.n	80031f2 <__iar_annotation$$branch+0xc>
 80033e4:	8be0      	ldrh	r0, [r4, #30]
 80033e6:	03a9      	lsls	r1, r5, #14
 80033e8:	4288      	cmp	r0, r1
 80033ea:	d102      	bne.n	80033f2 <__iar_annotation$$branch+0x1dc>
 80033ec:	2007      	movs	r0, #7
 80033ee:	7460      	strb	r0, [r4, #17]
 80033f0:	2500      	movs	r5, #0
 80033f2:	e6ff      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 80033f4:	6960      	ldr	r0, [r4, #20]
 80033f6:	0740      	lsls	r0, r0, #29
 80033f8:	0fc1      	lsrs	r1, r0, #31
 80033fa:	0020      	movs	r0, r4
 80033fc:	f000 fd4c 	bl	8003e98 <PE_Send_SRCCapabilities>
 8003400:	2805      	cmp	r0, #5
 8003402:	d002      	beq.n	800340a <__iar_annotation$$branch+0x1f4>
 8003404:	2809      	cmp	r0, #9
 8003406:	d0f4      	beq.n	80033f2 <__iar_annotation$$branch+0x1dc>
 8003408:	e011      	b.n	800342e <__iar_annotation$$branch+0x218>
 800340a:	2001      	movs	r0, #1
 800340c:	7720      	strb	r0, [r4, #28]
 800340e:	6960      	ldr	r0, [r4, #20]
 8003410:	2104      	movs	r1, #4
 8003412:	4301      	orrs	r1, r0
 8003414:	6161      	str	r1, [r4, #20]
 8003416:	2000      	movs	r0, #0
 8003418:	70f0      	strb	r0, [r6, #3]
 800341a:	70b0      	strb	r0, [r6, #2]
 800341c:	83e7      	strh	r7, [r4, #30]
 800341e:	251b      	movs	r5, #27
 8003420:	2016      	movs	r0, #22
 8003422:	7460      	strb	r0, [r4, #17]
 8003424:	210f      	movs	r1, #15
 8003426:	7c20      	ldrb	r0, [r4, #16]
 8003428:	f7fd f9b2 	bl	8000790 <USBPD_PE_Notification>
 800342c:	e6e2      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 800342e:	6960      	ldr	r0, [r4, #20]
 8003430:	0741      	lsls	r1, r0, #29
 8003432:	0fc9      	lsrs	r1, r1, #31
 8003434:	d11a      	bne.n	800346c <__iar_annotation$$branch+0x256>
 8003436:	78f0      	ldrb	r0, [r6, #3]
 8003438:	2833      	cmp	r0, #51	; 0x33
 800343a:	d222      	bcs.n	8003482 <__iar_annotation$$branch+0x26c>
 800343c:	488e      	ldr	r0, [pc, #568]	; (8003678 <__iar_annotation$$branch+0x462>)
 800343e:	83e0      	strh	r0, [r4, #30]
 8003440:	2596      	movs	r5, #150	; 0x96
 8003442:	2008      	movs	r0, #8
 8003444:	7460      	strb	r0, [r4, #17]
 8003446:	488d      	ldr	r0, [pc, #564]	; (800367c <__iar_annotation$$branch+0x466>)
 8003448:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800344a:	4201      	tst	r1, r0
 800344c:	d002      	beq.n	8003454 <__iar_annotation$$branch+0x23e>
 800344e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003450:	0005      	movs	r5, r0
 8003452:	400d      	ands	r5, r1
 8003454:	e6ce      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 8003456:	bf00      	nop
 8003458:	ffffdfff 	.word	0xffffdfff
 800345c:	20000174 	.word	0x20000174
 8003460:	b5e8b5cd 	.word	0xb5e8b5cd
 8003464:	20000178 	.word	0x20000178
 8003468:	20000000 	.word	0x20000000
 800346c:	6860      	ldr	r0, [r4, #4]
 800346e:	7800      	ldrb	r0, [r0, #0]
 8003470:	0780      	lsls	r0, r0, #30
 8003472:	0f80      	lsrs	r0, r0, #30
 8003474:	2802      	cmp	r0, #2
 8003476:	d102      	bne.n	800347e <__iar_annotation$$branch+0x268>
 8003478:	7c20      	ldrb	r0, [r4, #16]
 800347a:	f002 fb62 	bl	8005b42 <USBPD_PRL_SRCReleaseSinkNG>
 800347e:	2011      	movs	r0, #17
 8003480:	e7b5      	b.n	80033ee <__iar_annotation$$branch+0x1d8>
 8003482:	2121      	movs	r1, #33	; 0x21
 8003484:	7c20      	ldrb	r0, [r4, #16]
 8003486:	f7fd f983 	bl	8000790 <USBPD_PE_Notification>
 800348a:	2000      	movs	r0, #0
 800348c:	e78a      	b.n	80033a4 <__iar_annotation$$branch+0x18e>
 800348e:	2100      	movs	r1, #0
 8003490:	0020      	movs	r0, r4
 8003492:	f000 fd01 	bl	8003e98 <PE_Send_SRCCapabilities>
 8003496:	2805      	cmp	r0, #5
 8003498:	d107      	bne.n	80034aa <__iar_annotation$$branch+0x294>
 800349a:	2104      	movs	r1, #4
 800349c:	0020      	movs	r0, r4
 800349e:	f7fe f90a 	bl	80016b6 <PE_SetPowerNegotiation>
 80034a2:	2001      	movs	r0, #1
 80034a4:	7720      	strb	r0, [r4, #28]
 80034a6:	83e7      	strh	r7, [r4, #30]
 80034a8:	e7ba      	b.n	8003420 <__iar_annotation$$branch+0x20a>
 80034aa:	2000      	movs	r0, #0
 80034ac:	7720      	strb	r0, [r4, #28]
 80034ae:	2011      	movs	r0, #17
 80034b0:	e778      	b.n	80033a4 <__iar_annotation$$branch+0x18e>
 80034b2:	03a8      	lsls	r0, r5, #14
 80034b4:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80034b6:	4281      	cmp	r1, r0
 80034b8:	d106      	bne.n	80034c8 <__iar_annotation$$branch+0x2b2>
 80034ba:	2100      	movs	r1, #0
 80034bc:	8461      	strh	r1, [r4, #34]	; 0x22
 80034be:	7931      	ldrb	r1, [r6, #4]
 80034c0:	1c49      	adds	r1, r1, #1
 80034c2:	7131      	strb	r1, [r6, #4]
 80034c4:	2105      	movs	r1, #5
 80034c6:	7461      	strb	r1, [r4, #17]
 80034c8:	8be1      	ldrh	r1, [r4, #30]
 80034ca:	4281      	cmp	r1, r0
 80034cc:	d1c2      	bne.n	8003454 <__iar_annotation$$branch+0x23e>
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	6840      	ldr	r0, [r0, #4]
 80034d2:	0601      	lsls	r1, r0, #24
 80034d4:	0fc9      	lsrs	r1, r1, #31
 80034d6:	d002      	beq.n	80034de <__iar_annotation$$branch+0x2c8>
 80034d8:	78f0      	ldrb	r0, [r6, #3]
 80034da:	1c40      	adds	r0, r0, #1
 80034dc:	70f0      	strb	r0, [r6, #3]
 80034de:	2007      	movs	r0, #7
 80034e0:	e760      	b.n	80033a4 <__iar_annotation$$branch+0x18e>
 80034e2:	4668      	mov	r0, sp
 80034e4:	7b00      	ldrb	r0, [r0, #12]
 80034e6:	2811      	cmp	r0, #17
 80034e8:	d109      	bne.n	80034fe <__iar_annotation$$branch+0x2e8>
 80034ea:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80034ec:	0bc1      	lsrs	r1, r0, #15
 80034ee:	d106      	bne.n	80034fe <__iar_annotation$$branch+0x2e8>
 80034f0:	0b01      	lsrs	r1, r0, #12
 80034f2:	0749      	lsls	r1, r1, #29
 80034f4:	d100      	bne.n	80034f8 <__iar_annotation$$branch+0x2e2>
 80034f6:	e115      	b.n	8003724 <__iar_annotation$$branch+0x50e>
 80034f8:	06c0      	lsls	r0, r0, #27
 80034fa:	0ec0      	lsrs	r0, r0, #27
 80034fc:	2802      	cmp	r0, #2
 80034fe:	d000      	beq.n	8003502 <__iar_annotation$$branch+0x2ec>
 8003500:	e110      	b.n	8003724 <__iar_annotation$$branch+0x50e>
 8003502:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003504:	7881      	ldrb	r1, [r0, #2]
 8003506:	78c2      	ldrb	r2, [r0, #3]
 8003508:	0212      	lsls	r2, r2, #8
 800350a:	1889      	adds	r1, r1, r2
 800350c:	7902      	ldrb	r2, [r0, #4]
 800350e:	0412      	lsls	r2, r2, #16
 8003510:	1889      	adds	r1, r1, r2
 8003512:	7940      	ldrb	r0, [r0, #5]
 8003514:	0600      	lsls	r0, r0, #24
 8003516:	1808      	adds	r0, r1, r0
 8003518:	9000      	str	r0, [sp, #0]
 800351a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800351c:	0600      	lsls	r0, r0, #24
 800351e:	0f81      	lsrs	r1, r0, #30
 8003520:	7c20      	ldrb	r0, [r4, #16]
 8003522:	f7fd fcef 	bl	8000f04 <PE_ExtRevisionInteroperability>
 8003526:	2304      	movs	r3, #4
 8003528:	466a      	mov	r2, sp
 800352a:	2106      	movs	r1, #6
 800352c:	7c20      	ldrb	r0, [r4, #16]
 800352e:	68a5      	ldr	r5, [r4, #8]
 8003530:	69ad      	ldr	r5, [r5, #24]
 8003532:	47a8      	blx	r5
 8003534:	2009      	movs	r0, #9
 8003536:	7460      	strb	r0, [r4, #17]
 8003538:	2500      	movs	r5, #0
 800353a:	e0e9      	b.n	8003710 <__iar_annotation$$branch+0x4fa>
 800353c:	9502      	str	r5, [sp, #8]
 800353e:	2703      	movs	r7, #3
 8003540:	2507      	movs	r5, #7
 8003542:	a901      	add	r1, sp, #4
 8003544:	7c20      	ldrb	r0, [r4, #16]
 8003546:	68a2      	ldr	r2, [r4, #8]
 8003548:	69d2      	ldr	r2, [r2, #28]
 800354a:	4790      	blx	r2
 800354c:	280a      	cmp	r0, #10
 800354e:	d010      	beq.n	8003572 <__iar_annotation$$branch+0x35c>
 8003550:	280b      	cmp	r0, #11
 8003552:	d037      	beq.n	80035c4 <__iar_annotation$$branch+0x3ae>
 8003554:	280d      	cmp	r0, #13
 8003556:	6860      	ldr	r0, [r4, #4]
 8003558:	6800      	ldr	r0, [r0, #0]
 800355a:	d138      	bne.n	80035ce <__iar_annotation$$branch+0x3b8>
 800355c:	0a00      	lsrs	r0, r0, #8
 800355e:	4005      	ands	r5, r0
 8003560:	2d03      	cmp	r5, #3
 8003562:	d101      	bne.n	8003568 <__iar_annotation$$branch+0x352>
 8003564:	2303      	movs	r3, #3
 8003566:	e000      	b.n	800356a <__iar_annotation$$branch+0x354>
 8003568:	230e      	movs	r3, #14
 800356a:	2000      	movs	r0, #0
 800356c:	9000      	str	r0, [sp, #0]
 800356e:	220c      	movs	r2, #12
 8003570:	e037      	b.n	80035e2 <__iar_annotation$$branch+0x3cc>
 8003572:	48ab      	ldr	r0, [pc, #684]	; (8003820 <__iar_annotation$$branch+0x60a>)
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	201e      	movs	r0, #30
 8003578:	9002      	str	r0, [sp, #8]
 800357a:	6860      	ldr	r0, [r4, #4]
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	0a00      	lsrs	r0, r0, #8
 8003580:	4005      	ands	r5, r0
 8003582:	2d01      	cmp	r5, #1
 8003584:	d00c      	beq.n	80035a0 <__iar_annotation$$branch+0x38a>
 8003586:	9801      	ldr	r0, [sp, #4]
 8003588:	2803      	cmp	r0, #3
 800358a:	d109      	bne.n	80035a0 <__iar_annotation$$branch+0x38a>
 800358c:	6960      	ldr	r0, [r4, #20]
 800358e:	08c0      	lsrs	r0, r0, #3
 8003590:	4007      	ands	r7, r0
 8003592:	2f03      	cmp	r7, #3
 8003594:	d104      	bne.n	80035a0 <__iar_annotation$$branch+0x38a>
 8003596:	2080      	movs	r0, #128	; 0x80
 8003598:	0200      	lsls	r0, r0, #8
 800359a:	83e0      	strh	r0, [r4, #30]
 800359c:	2000      	movs	r0, #0
 800359e:	9002      	str	r0, [sp, #8]
 80035a0:	2000      	movs	r0, #0
 80035a2:	9000      	str	r0, [sp, #0]
 80035a4:	230c      	movs	r3, #12
 80035a6:	2203      	movs	r2, #3
 80035a8:	2100      	movs	r1, #0
 80035aa:	0020      	movs	r0, r4
 80035ac:	f7fe f938 	bl	8001820 <PE_Send_CtrlMessage>
 80035b0:	6960      	ldr	r0, [r4, #20]
 80035b2:	2118      	movs	r1, #24
 80035b4:	4388      	bics	r0, r1
 80035b6:	9901      	ldr	r1, [sp, #4]
 80035b8:	00c9      	lsls	r1, r1, #3
 80035ba:	2218      	movs	r2, #24
 80035bc:	400a      	ands	r2, r1
 80035be:	4302      	orrs	r2, r0
 80035c0:	6162      	str	r2, [r4, #20]
 80035c2:	e012      	b.n	80035ea <__iar_annotation$$branch+0x3d4>
 80035c4:	2000      	movs	r0, #0
 80035c6:	9000      	str	r0, [sp, #0]
 80035c8:	230c      	movs	r3, #12
 80035ca:	2202      	movs	r2, #2
 80035cc:	e009      	b.n	80035e2 <__iar_annotation$$branch+0x3cc>
 80035ce:	0a00      	lsrs	r0, r0, #8
 80035d0:	4005      	ands	r5, r0
 80035d2:	2d03      	cmp	r5, #3
 80035d4:	d101      	bne.n	80035da <__iar_annotation$$branch+0x3c4>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e000      	b.n	80035dc <__iar_annotation$$branch+0x3c6>
 80035da:	230e      	movs	r3, #14
 80035dc:	2000      	movs	r0, #0
 80035de:	9000      	str	r0, [sp, #0]
 80035e0:	2204      	movs	r2, #4
 80035e2:	2100      	movs	r1, #0
 80035e4:	0020      	movs	r0, r4
 80035e6:	f7fe f91b 	bl	8001820 <PE_Send_CtrlMessage>
 80035ea:	9d02      	ldr	r5, [sp, #8]
 80035ec:	e602      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 80035ee:	8be0      	ldrh	r0, [r4, #30]
 80035f0:	03a9      	lsls	r1, r5, #14
 80035f2:	4288      	cmp	r0, r1
 80035f4:	d1fa      	bne.n	80035ec <__iar_annotation$$branch+0x3d6>
 80035f6:	2104      	movs	r1, #4
 80035f8:	0020      	movs	r0, r4
 80035fa:	f7fe f85c 	bl	80016b6 <PE_SetPowerNegotiation>
 80035fe:	68a0      	ldr	r0, [r4, #8]
 8003600:	6801      	ldr	r1, [r0, #0]
 8003602:	2900      	cmp	r1, #0
 8003604:	d0f2      	beq.n	80035ec <__iar_annotation$$branch+0x3d6>
 8003606:	7c20      	ldrb	r0, [r4, #16]
 8003608:	4788      	blx	r1
 800360a:	2800      	cmp	r0, #0
 800360c:	d000      	beq.n	8003610 <__iar_annotation$$branch+0x3fa>
 800360e:	e2da      	b.n	8003bc6 <__iar_annotation$$branch+0x9b0>
 8003610:	200d      	movs	r0, #13
 8003612:	e6c7      	b.n	80033a4 <__iar_annotation$$branch+0x18e>
 8003614:	2000      	movs	r0, #0
 8003616:	9000      	str	r0, [sp, #0]
 8003618:	2303      	movs	r3, #3
 800361a:	2206      	movs	r2, #6
 800361c:	2100      	movs	r1, #0
 800361e:	0020      	movs	r0, r4
 8003620:	f7fe f8fe 	bl	8001820 <PE_Send_CtrlMessage>
 8003624:	2800      	cmp	r0, #0
 8003626:	d110      	bne.n	800364a <__iar_annotation$$branch+0x434>
 8003628:	2103      	movs	r1, #3
 800362a:	0020      	movs	r0, r4
 800362c:	f7fe f843 	bl	80016b6 <PE_SetPowerNegotiation>
 8003630:	2110      	movs	r1, #16
 8003632:	7c20      	ldrb	r0, [r4, #16]
 8003634:	f7fd f8ac 	bl	8000790 <USBPD_PE_Notification>
 8003638:	2000      	movs	r0, #0
 800363a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800363c:	6960      	ldr	r0, [r4, #20]
 800363e:	06c0      	lsls	r0, r0, #27
 8003640:	0f80      	lsrs	r0, r0, #30
 8003642:	2803      	cmp	r0, #3
 8003644:	d101      	bne.n	800364a <__iar_annotation$$branch+0x434>
 8003646:	4877      	ldr	r0, [pc, #476]	; (8003824 <__iar_annotation$$branch+0x60e>)
 8003648:	84a0      	strh	r0, [r4, #36]	; 0x24
 800364a:	e5d3      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 800364c:	2001      	movs	r0, #1
 800364e:	9000      	str	r0, [sp, #0]
 8003650:	2397      	movs	r3, #151	; 0x97
 8003652:	2202      	movs	r2, #2
 8003654:	2100      	movs	r1, #0
 8003656:	0020      	movs	r0, r4
 8003658:	f7fe f8e2 	bl	8001820 <PE_Send_CtrlMessage>
 800365c:	2800      	cmp	r0, #0
 800365e:	d1f4      	bne.n	800364a <__iar_annotation$$branch+0x434>
 8003660:	7725      	strb	r5, [r4, #28]
 8003662:	2129      	movs	r1, #41	; 0x29
 8003664:	7c20      	ldrb	r0, [r4, #16]
 8003666:	f7fd f893 	bl	8000790 <USBPD_PE_Notification>
 800366a:	486f      	ldr	r0, [pc, #444]	; (8003828 <__iar_annotation$$branch+0x612>)
 800366c:	83e0      	strh	r0, [r4, #30]
 800366e:	4d6f      	ldr	r5, [pc, #444]	; (800382c <__iar_annotation$$branch+0x616>)
 8003670:	e5c0      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 8003672:	bf00      	nop
 8003674:	00008014 	.word	0x00008014
 8003678:	00008096 	.word	0x00008096
 800367c:	00007fff 	.word	0x00007fff
 8003680:	8be0      	ldrh	r0, [r4, #30]
 8003682:	03a9      	lsls	r1, r5, #14
 8003684:	4288      	cmp	r0, r1
 8003686:	d1f3      	bne.n	8003670 <__iar_annotation$$branch+0x45a>
 8003688:	212a      	movs	r1, #42	; 0x2a
 800368a:	7c20      	ldrb	r0, [r4, #16]
 800368c:	f7fd f880 	bl	8000790 <USBPD_PE_Notification>
 8003690:	2000      	movs	r0, #0
 8003692:	9000      	str	r0, [sp, #0]
 8003694:	2303      	movs	r3, #3
 8003696:	2206      	movs	r2, #6
 8003698:	2100      	movs	r1, #0
 800369a:	0020      	movs	r0, r4
 800369c:	f7fe f8c0 	bl	8001820 <PE_Send_CtrlMessage>
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d109      	bne.n	80036b8 <__iar_annotation$$branch+0x4a2>
 80036a4:	212e      	movs	r1, #46	; 0x2e
 80036a6:	e6be      	b.n	8003426 <__iar_annotation$$branch+0x210>
 80036a8:	2000      	movs	r0, #0
 80036aa:	9000      	str	r0, [sp, #0]
 80036ac:	2307      	movs	r3, #7
 80036ae:	2203      	movs	r2, #3
 80036b0:	2100      	movs	r1, #0
 80036b2:	0020      	movs	r0, r4
 80036b4:	f7fe f8b4 	bl	8001820 <PE_Send_CtrlMessage>
 80036b8:	e59c      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 80036ba:	2000      	movs	r0, #0
 80036bc:	9000      	str	r0, [sp, #0]
 80036be:	2312      	movs	r3, #18
 80036c0:	220d      	movs	r2, #13
 80036c2:	2031      	movs	r0, #49	; 0x31
 80036c4:	5c21      	ldrb	r1, [r4, r0]
 80036c6:	0020      	movs	r0, r4
 80036c8:	f7fe f8aa 	bl	8001820 <PE_Send_CtrlMessage>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1f3      	bne.n	80036b8 <__iar_annotation$$branch+0x4a2>
 80036d0:	83e7      	strh	r7, [r4, #30]
 80036d2:	251b      	movs	r5, #27
 80036d4:	2130      	movs	r1, #48	; 0x30
 80036d6:	e6a6      	b.n	8003426 <__iar_annotation$$branch+0x210>
 80036d8:	4668      	mov	r0, sp
 80036da:	7b00      	ldrb	r0, [r0, #12]
 80036dc:	2814      	cmp	r0, #20
 80036de:	d021      	beq.n	8003724 <__iar_annotation$$branch+0x50e>
 80036e0:	2030      	movs	r0, #48	; 0x30
 80036e2:	5c20      	ldrb	r0, [r4, r0]
 80036e4:	2231      	movs	r2, #49	; 0x31
 80036e6:	5ca2      	ldrb	r2, [r4, r2]
 80036e8:	4290      	cmp	r0, r2
 80036ea:	d11b      	bne.n	8003724 <__iar_annotation$$branch+0x50e>
 80036ec:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80036ee:	4001      	ands	r1, r0
 80036f0:	2903      	cmp	r1, #3
 80036f2:	d117      	bne.n	8003724 <__iar_annotation$$branch+0x50e>
 80036f4:	2131      	movs	r1, #49	; 0x31
 80036f6:	7c20      	ldrb	r0, [r4, #16]
 80036f8:	f7fd f84a 	bl	8000790 <USBPD_PE_Notification>
 80036fc:	2030      	movs	r0, #48	; 0x30
 80036fe:	5c20      	ldrb	r0, [r4, r0]
 8003700:	2800      	cmp	r0, #0
 8003702:	d102      	bne.n	800370a <__iar_annotation$$branch+0x4f4>
 8003704:	2007      	movs	r0, #7
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	e002      	b.n	8003710 <__iar_annotation$$branch+0x4fa>
 800370a:	2003      	movs	r0, #3
 800370c:	7460      	strb	r0, [r4, #17]
 800370e:	2500      	movs	r5, #0
 8003710:	4668      	mov	r0, sp
 8003712:	7b00      	ldrb	r0, [r0, #12]
 8003714:	2814      	cmp	r0, #20
 8003716:	d005      	beq.n	8003724 <__iar_annotation$$branch+0x50e>
 8003718:	2014      	movs	r0, #20
 800371a:	4669      	mov	r1, sp
 800371c:	7308      	strb	r0, [r1, #12]
 800371e:	0020      	movs	r0, r4
 8003720:	f7fd faa1 	bl	8000c66 <PE_Clear_RxEvent>
 8003724:	8be0      	ldrh	r0, [r4, #30]
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	0209      	lsls	r1, r1, #8
 800372a:	4288      	cmp	r0, r1
 800372c:	d1c4      	bne.n	80036b8 <__iar_annotation$$branch+0x4a2>
 800372e:	e24a      	b.n	8003bc6 <__iar_annotation$$branch+0x9b0>
 8003730:	6860      	ldr	r0, [r4, #4]
 8003732:	7800      	ldrb	r0, [r0, #0]
 8003734:	0780      	lsls	r0, r0, #30
 8003736:	0f80      	lsrs	r0, r0, #30
 8003738:	2802      	cmp	r0, #2
 800373a:	d102      	bne.n	8003742 <__iar_annotation$$branch+0x52c>
 800373c:	7c20      	ldrb	r0, [r4, #16]
 800373e:	f002 fa00 	bl	8005b42 <USBPD_PRL_SRCReleaseSinkNG>
 8003742:	2105      	movs	r1, #5
 8003744:	0020      	movs	r0, r4
 8003746:	f7fd fa29 	bl	8000b9c <PE_Send_RESET>
 800374a:	6860      	ldr	r0, [r4, #4]
 800374c:	6801      	ldr	r1, [r0, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	4391      	bics	r1, r2
 8003752:	6001      	str	r1, [r0, #0]
 8003754:	78b0      	ldrb	r0, [r6, #2]
 8003756:	1c40      	adds	r0, r0, #1
 8003758:	70b0      	strb	r0, [r6, #2]
 800375a:	6961      	ldr	r1, [r4, #20]
 800375c:	4834      	ldr	r0, [pc, #208]	; (8003830 <__iar_annotation$$branch+0x61a>)
 800375e:	4008      	ands	r0, r1
 8003760:	6160      	str	r0, [r4, #20]
 8003762:	2100      	movs	r1, #0
 8003764:	2232      	movs	r2, #50	; 0x32
 8003766:	54a1      	strb	r1, [r4, r2]
 8003768:	4932      	ldr	r1, [pc, #200]	; (8003834 <__iar_annotation$$branch+0x61e>)
 800376a:	4001      	ands	r1, r0
 800376c:	6161      	str	r1, [r4, #20]
 800376e:	2202      	movs	r2, #2
 8003770:	2101      	movs	r1, #1
 8003772:	0020      	movs	r0, r4
 8003774:	f7fd ff96 	bl	80016a4 <PE_CallHardResetCallback>
 8003778:	2169      	movs	r1, #105	; 0x69
 800377a:	4668      	mov	r0, sp
 800377c:	7b40      	ldrb	r0, [r0, #13]
 800377e:	f7fd f807 	bl	8000790 <USBPD_PE_Notification>
 8003782:	83e7      	strh	r7, [r4, #30]
 8003784:	251b      	movs	r5, #27
 8003786:	2015      	movs	r0, #21
 8003788:	e60c      	b.n	80033a4 <__iar_annotation$$branch+0x18e>
 800378a:	6860      	ldr	r0, [r4, #4]
 800378c:	7800      	ldrb	r0, [r0, #0]
 800378e:	0780      	lsls	r0, r0, #30
 8003790:	0f80      	lsrs	r0, r0, #30
 8003792:	2802      	cmp	r0, #2
 8003794:	d1f0      	bne.n	8003778 <__iar_annotation$$branch+0x562>
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	f002 f9d3 	bl	8005b42 <USBPD_PRL_SRCReleaseSinkNG>
 800379c:	e7ec      	b.n	8003778 <__iar_annotation$$branch+0x562>
 800379e:	8be0      	ldrh	r0, [r4, #30]
 80037a0:	03a9      	lsls	r1, r5, #14
 80037a2:	4288      	cmp	r0, r1
 80037a4:	d11a      	bne.n	80037dc <__iar_annotation$$branch+0x5c6>
 80037a6:	6960      	ldr	r0, [r4, #20]
 80037a8:	78b1      	ldrb	r1, [r6, #2]
 80037aa:	2903      	cmp	r1, #3
 80037ac:	d303      	bcc.n	80037b6 <__iar_annotation$$branch+0x5a0>
 80037ae:	0741      	lsls	r1, r0, #29
 80037b0:	0fc9      	lsrs	r1, r1, #31
 80037b2:	d130      	bne.n	8003816 <__iar_annotation$$branch+0x600>
 80037b4:	e669      	b.n	800348a <__iar_annotation$$branch+0x274>
 80037b6:	4920      	ldr	r1, [pc, #128]	; (8003838 <__iar_annotation$$branch+0x622>)
 80037b8:	83e1      	strh	r1, [r4, #30]
 80037ba:	2117      	movs	r1, #23
 80037bc:	7461      	strb	r1, [r4, #17]
 80037be:	2500      	movs	r5, #0
 80037c0:	0540      	lsls	r0, r0, #21
 80037c2:	0f80      	lsrs	r0, r0, #30
 80037c4:	1e42      	subs	r2, r0, #1
 80037c6:	4192      	sbcs	r2, r2
 80037c8:	0fd2      	lsrs	r2, r2, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	0020      	movs	r0, r4
 80037ce:	f7fd ff69 	bl	80016a4 <PE_CallHardResetCallback>
 80037d2:	2203      	movs	r2, #3
 80037d4:	2101      	movs	r1, #1
 80037d6:	0020      	movs	r0, r4
 80037d8:	f7fd ff64 	bl	80016a4 <PE_CallHardResetCallback>
 80037dc:	e50a      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 80037de:	2100      	movs	r1, #0
 80037e0:	4668      	mov	r0, sp
 80037e2:	7b40      	ldrb	r0, [r0, #13]
 80037e4:	68a2      	ldr	r2, [r4, #8]
 80037e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037e8:	4790      	blx	r2
 80037ea:	2801      	cmp	r0, #1
 80037ec:	d105      	bne.n	80037fa <__iar_annotation$$branch+0x5e4>
 80037ee:	4813      	ldr	r0, [pc, #76]	; (800383c <__iar_annotation$$branch+0x626>)
 80037f0:	83e0      	strh	r0, [r4, #30]
 80037f2:	25c8      	movs	r5, #200	; 0xc8
 80037f4:	00ad      	lsls	r5, r5, #2
 80037f6:	2013      	movs	r0, #19
 80037f8:	7460      	strb	r0, [r4, #17]
 80037fa:	8be0      	ldrh	r0, [r4, #30]
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	0209      	lsls	r1, r1, #8
 8003800:	4288      	cmp	r0, r1
 8003802:	d1eb      	bne.n	80037dc <__iar_annotation$$branch+0x5c6>
 8003804:	2206      	movs	r2, #6
 8003806:	2101      	movs	r1, #1
 8003808:	0020      	movs	r0, r4
 800380a:	f7fd ff4b 	bl	80016a4 <PE_CallHardResetCallback>
 800380e:	6960      	ldr	r0, [r4, #20]
 8003810:	0741      	lsls	r1, r0, #29
 8003812:	0fc9      	lsrs	r1, r1, #31
 8003814:	d003      	beq.n	800381e <__iar_annotation$$branch+0x608>
 8003816:	68a0      	ldr	r0, [r4, #8]
 8003818:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800381a:	2800      	cmp	r0, #0
 800381c:	d137      	bne.n	800388e <__iar_annotation$$branch+0x678>
 800381e:	e634      	b.n	800348a <__iar_annotation$$branch+0x274>
 8003820:	0000801e 	.word	0x0000801e
 8003824:	0000b6b0 	.word	0x0000b6b0
 8003828:	00008226 	.word	0x00008226
 800382c:	00000226 	.word	0x00000226
 8003830:	fffff9ff 	.word	0xfffff9ff
 8003834:	fffffe3f 	.word	0xfffffe3f
 8003838:	0000828a 	.word	0x0000828a
 800383c:	00008320 	.word	0x00008320
 8003840:	8be0      	ldrh	r0, [r4, #30]
 8003842:	03a9      	lsls	r1, r5, #14
 8003844:	4288      	cmp	r0, r1
 8003846:	d1c9      	bne.n	80037dc <__iar_annotation$$branch+0x5c6>
 8003848:	2204      	movs	r2, #4
 800384a:	2101      	movs	r1, #1
 800384c:	0020      	movs	r0, r4
 800384e:	f7fd ff29 	bl	80016a4 <PE_CallHardResetCallback>
 8003852:	2101      	movs	r1, #1
 8003854:	4668      	mov	r0, sp
 8003856:	7b40      	ldrb	r0, [r0, #13]
 8003858:	68a2      	ldr	r2, [r4, #8]
 800385a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800385c:	4790      	blx	r2
 800385e:	2801      	cmp	r0, #1
 8003860:	d10d      	bne.n	800387e <__iar_annotation$$branch+0x668>
 8003862:	0020      	movs	r0, r4
 8003864:	f7fd faad 	bl	8000dc2 <PE_Reset_HardReset>
 8003868:	2168      	movs	r1, #104	; 0x68
 800386a:	4668      	mov	r0, sp
 800386c:	7b40      	ldrb	r0, [r0, #13]
 800386e:	f7fc ff8f 	bl	8000790 <USBPD_PE_Notification>
 8003872:	2205      	movs	r2, #5
 8003874:	2101      	movs	r1, #1
 8003876:	0020      	movs	r0, r4
 8003878:	f7fd ff14 	bl	80016a4 <PE_CallHardResetCallback>
 800387c:	e62f      	b.n	80034de <__iar_annotation$$branch+0x2c8>
 800387e:	2206      	movs	r2, #6
 8003880:	2101      	movs	r1, #1
 8003882:	0020      	movs	r0, r4
 8003884:	f7fd ff0e 	bl	80016a4 <PE_CallHardResetCallback>
 8003888:	68a0      	ldr	r0, [r4, #8]
 800388a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800388c:	2800      	cmp	r0, #0
 800388e:	d000      	beq.n	8003892 <__iar_annotation$$branch+0x67c>
 8003890:	e2d6      	b.n	8003e40 <__iar_annotation$$branch+0x5e>
 8003892:	e5ac      	b.n	80033ee <__iar_annotation$$branch+0x1d8>
 8003894:	2001      	movs	r0, #1
 8003896:	9000      	str	r0, [sp, #0]
 8003898:	231b      	movs	r3, #27
 800389a:	2207      	movs	r2, #7
 800389c:	2100      	movs	r1, #0
 800389e:	0020      	movs	r0, r4
 80038a0:	f7fd ffbe 	bl	8001820 <PE_Send_CtrlMessage>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d199      	bne.n	80037dc <__iar_annotation$$branch+0x5c6>
 80038a8:	2006      	movs	r0, #6
 80038aa:	7720      	strb	r0, [r4, #28]
 80038ac:	83e7      	strh	r7, [r4, #30]
 80038ae:	251b      	movs	r5, #27
 80038b0:	210b      	movs	r1, #11
 80038b2:	e5b8      	b.n	8003426 <__iar_annotation$$branch+0x210>
 80038b4:	4668      	mov	r0, sp
 80038b6:	7b00      	ldrb	r0, [r0, #12]
 80038b8:	2811      	cmp	r0, #17
 80038ba:	d13e      	bne.n	800393a <__iar_annotation$$branch+0x724>
 80038bc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80038be:	0bc1      	lsrs	r1, r0, #15
 80038c0:	d11f      	bne.n	8003902 <__iar_annotation$$branch+0x6ec>
 80038c2:	0441      	lsls	r1, r0, #17
 80038c4:	0f49      	lsrs	r1, r1, #29
 80038c6:	d01c      	beq.n	8003902 <__iar_annotation$$branch+0x6ec>
 80038c8:	06c0      	lsls	r0, r0, #27
 80038ca:	0ec0      	lsrs	r0, r0, #27
 80038cc:	2801      	cmp	r0, #1
 80038ce:	d118      	bne.n	8003902 <__iar_annotation$$branch+0x6ec>
 80038d0:	008b      	lsls	r3, r1, #2
 80038d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038d4:	1c82      	adds	r2, r0, #2
 80038d6:	2104      	movs	r1, #4
 80038d8:	7c20      	ldrb	r0, [r4, #16]
 80038da:	68a5      	ldr	r5, [r4, #8]
 80038dc:	69ad      	ldr	r5, [r5, #24]
 80038de:	47a8      	blx	r5
 80038e0:	2003      	movs	r0, #3
 80038e2:	7460      	strb	r0, [r4, #17]
 80038e4:	2500      	movs	r5, #0
 80038e6:	4668      	mov	r0, sp
 80038e8:	7b00      	ldrb	r0, [r0, #12]
 80038ea:	2814      	cmp	r0, #20
 80038ec:	d005      	beq.n	80038fa <__iar_annotation$$branch+0x6e4>
 80038ee:	2014      	movs	r0, #20
 80038f0:	4669      	mov	r1, sp
 80038f2:	7308      	strb	r0, [r1, #12]
 80038f4:	0020      	movs	r0, r4
 80038f6:	f7fd f9b6 	bl	8000c66 <PE_Clear_RxEvent>
 80038fa:	210d      	movs	r1, #13
 80038fc:	7c20      	ldrb	r0, [r4, #16]
 80038fe:	f7fc ff47 	bl	8000790 <USBPD_PE_Notification>
 8003902:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003904:	21f0      	movs	r1, #240	; 0xf0
 8003906:	0209      	lsls	r1, r1, #8
 8003908:	4001      	ands	r1, r0
 800390a:	d116      	bne.n	800393a <__iar_annotation$$branch+0x724>
 800390c:	06c0      	lsls	r0, r0, #27
 800390e:	0ec0      	lsrs	r0, r0, #27
 8003910:	2804      	cmp	r0, #4
 8003912:	d001      	beq.n	8003918 <__iar_annotation$$branch+0x702>
 8003914:	2810      	cmp	r0, #16
 8003916:	d110      	bne.n	800393a <__iar_annotation$$branch+0x724>
 8003918:	2003      	movs	r0, #3
 800391a:	7460      	strb	r0, [r4, #17]
 800391c:	2500      	movs	r5, #0
 800391e:	4668      	mov	r0, sp
 8003920:	7b00      	ldrb	r0, [r0, #12]
 8003922:	2814      	cmp	r0, #20
 8003924:	d005      	beq.n	8003932 <__iar_annotation$$branch+0x71c>
 8003926:	2014      	movs	r0, #20
 8003928:	4669      	mov	r1, sp
 800392a:	7308      	strb	r0, [r1, #12]
 800392c:	0020      	movs	r0, r4
 800392e:	f7fd f99a 	bl	8000c66 <PE_Clear_RxEvent>
 8003932:	210e      	movs	r1, #14
 8003934:	7c20      	ldrb	r0, [r4, #16]
 8003936:	f7fc ff2b 	bl	8000790 <USBPD_PE_Notification>
 800393a:	8be0      	ldrh	r0, [r4, #30]
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	0209      	lsls	r1, r1, #8
 8003940:	4288      	cmp	r0, r1
 8003942:	d11f      	bne.n	8003984 <__iar_annotation$$branch+0x76e>
 8003944:	2003      	movs	r0, #3
 8003946:	e552      	b.n	80033ee <__iar_annotation$$branch+0x1d8>
 8003948:	68a0      	ldr	r0, [r4, #8]
 800394a:	6881      	ldr	r1, [r0, #8]
 800394c:	2900      	cmp	r1, #0
 800394e:	d01f      	beq.n	8003990 <__iar_annotation$$branch+0x77a>
 8003950:	7c20      	ldrb	r0, [r4, #16]
 8003952:	4788      	blx	r1
 8003954:	280a      	cmp	r0, #10
 8003956:	d002      	beq.n	800395e <__iar_annotation$$branch+0x748>
 8003958:	280d      	cmp	r0, #13
 800395a:	d014      	beq.n	8003986 <__iar_annotation$$branch+0x770>
 800395c:	e018      	b.n	8003990 <__iar_annotation$$branch+0x77a>
 800395e:	1cf8      	adds	r0, r7, #3
 8003960:	83e0      	strh	r0, [r4, #30]
 8003962:	251e      	movs	r5, #30
 8003964:	2000      	movs	r0, #0
 8003966:	9000      	str	r0, [sp, #0]
 8003968:	2324      	movs	r3, #36	; 0x24
 800396a:	2203      	movs	r2, #3
 800396c:	2100      	movs	r1, #0
 800396e:	0020      	movs	r0, r4
 8003970:	f7fd ff56 	bl	8001820 <PE_Send_CtrlMessage>
 8003974:	2800      	cmp	r0, #0
 8003976:	d105      	bne.n	8003984 <__iar_annotation$$branch+0x76e>
 8003978:	2201      	movs	r2, #1
 800397a:	2101      	movs	r1, #1
 800397c:	7c20      	ldrb	r0, [r4, #16]
 800397e:	68a3      	ldr	r3, [r4, #8]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	4798      	blx	r3
 8003984:	e436      	b.n	80031f4 <__iar_annotation$$branch+0xe>
 8003986:	2000      	movs	r0, #0
 8003988:	9000      	str	r0, [sp, #0]
 800398a:	2303      	movs	r3, #3
 800398c:	220c      	movs	r2, #12
 800398e:	e68f      	b.n	80036b0 <__iar_annotation$$branch+0x49a>
 8003990:	2000      	movs	r0, #0
 8003992:	9000      	str	r0, [sp, #0]
 8003994:	2303      	movs	r3, #3
 8003996:	2204      	movs	r2, #4
 8003998:	e68a      	b.n	80036b0 <__iar_annotation$$branch+0x49a>
 800399a:	8be0      	ldrh	r0, [r4, #30]
 800399c:	03a9      	lsls	r1, r5, #14
 800399e:	4288      	cmp	r0, r1
 80039a0:	d1f0      	bne.n	8003984 <__iar_annotation$$branch+0x76e>
 80039a2:	2104      	movs	r1, #4
 80039a4:	0020      	movs	r0, r4
 80039a6:	f7fd fe86 	bl	80016b6 <PE_SetPowerNegotiation>
 80039aa:	6860      	ldr	r0, [r4, #4]
 80039ac:	6801      	ldr	r1, [r0, #0]
 80039ae:	2210      	movs	r2, #16
 80039b0:	430a      	orrs	r2, r1
 80039b2:	6002      	str	r2, [r0, #0]
 80039b4:	2206      	movs	r2, #6
 80039b6:	2101      	movs	r1, #1
 80039b8:	7c20      	ldrb	r0, [r4, #16]
 80039ba:	68a3      	ldr	r3, [r4, #8]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	4798      	blx	r3
 80039c0:	2207      	movs	r2, #7
 80039c2:	2101      	movs	r1, #1
 80039c4:	7c20      	ldrb	r0, [r4, #16]
 80039c6:	68a3      	ldr	r3, [r4, #8]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	4798      	blx	r3
 80039cc:	2100      	movs	r1, #0
 80039ce:	7c20      	ldrb	r0, [r4, #16]
 80039d0:	f002 f881 	bl	8005ad6 <USBPD_PRL_SetHeaderPowerRole>
 80039d4:	2000      	movs	r0, #0
 80039d6:	9000      	str	r0, [sp, #0]
 80039d8:	2325      	movs	r3, #37	; 0x25
 80039da:	2206      	movs	r2, #6
 80039dc:	2100      	movs	r1, #0
 80039de:	0020      	movs	r0, r4
 80039e0:	f7fd ff1e 	bl	8001820 <PE_Send_CtrlMessage>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d1cd      	bne.n	8003984 <__iar_annotation$$branch+0x76e>
 80039e8:	e0c9      	b.n	8003b7e <__iar_annotation$$branch+0x968>
 80039ea:	4668      	mov	r0, sp
 80039ec:	7b00      	ldrb	r0, [r0, #12]
 80039ee:	2811      	cmp	r0, #17
 80039f0:	d10b      	bne.n	8003a0a <__iar_annotation$$branch+0x7f4>
 80039f2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80039f4:	4001      	ands	r1, r0
 80039f6:	2906      	cmp	r1, #6
 80039f8:	d107      	bne.n	8003a0a <__iar_annotation$$branch+0x7f4>
 80039fa:	2014      	movs	r0, #20
 80039fc:	4669      	mov	r1, sp
 80039fe:	7308      	strb	r0, [r1, #12]
 8003a00:	0020      	movs	r0, r4
 8003a02:	f7fd f930 	bl	8000c66 <PE_Clear_RxEvent>
 8003a06:	2026      	movs	r0, #38	; 0x26
 8003a08:	7460      	strb	r0, [r4, #17]
 8003a0a:	8be0      	ldrh	r0, [r4, #30]
 8003a0c:	03a9      	lsls	r1, r5, #14
 8003a0e:	4288      	cmp	r0, r1
 8003a10:	d1b8      	bne.n	8003984 <__iar_annotation$$branch+0x76e>
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d000      	beq.n	8003a1c <__iar_annotation$$branch+0x806>
 8003a1a:	e211      	b.n	8003e40 <__iar_annotation$$branch+0x5e>
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	2101      	movs	r1, #1
 8003a20:	7c20      	ldrb	r0, [r4, #16]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	4798      	blx	r3
 8003a26:	e0ce      	b.n	8003bc6 <__iar_annotation$$branch+0x9b0>
 8003a28:	2100      	movs	r1, #0
 8003a2a:	0020      	movs	r0, r4
 8003a2c:	f7fd f8d6 	bl	8000bdc <PE_ChangePowerRole>
 8003a30:	220d      	movs	r2, #13
 8003a32:	2100      	movs	r1, #0
 8003a34:	7c20      	ldrb	r0, [r4, #16]
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	4798      	blx	r3
 8003a3c:	2114      	movs	r1, #20
 8003a3e:	7c20      	ldrb	r0, [r4, #16]
 8003a40:	f7fc fea6 	bl	8000790 <USBPD_PE_Notification>
 8003a44:	220e      	movs	r2, #14
 8003a46:	2100      	movs	r1, #0
 8003a48:	7c20      	ldrb	r0, [r4, #16]
 8003a4a:	68a3      	ldr	r3, [r4, #8]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	4798      	blx	r3
 8003a50:	6860      	ldr	r0, [r4, #4]
 8003a52:	7800      	ldrb	r0, [r0, #0]
 8003a54:	0780      	lsls	r0, r0, #30
 8003a56:	0f80      	lsrs	r0, r0, #30
 8003a58:	2801      	cmp	r0, #1
 8003a5a:	d104      	bne.n	8003a66 <__iar_annotation$$branch+0x850>
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4668      	mov	r0, sp
 8003a60:	7b40      	ldrb	r0, [r0, #13]
 8003a62:	f002 f88d 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8003a66:	0020      	movs	r0, r4
 8003a68:	f7fd fa22 	bl	8000eb0 <PE_Reset_StateMachine>
 8003a6c:	e4c0      	b.n	80033f0 <__iar_annotation$$branch+0x1da>
 8003a6e:	2001      	movs	r0, #1
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	231f      	movs	r3, #31
 8003a74:	220a      	movs	r2, #10
 8003a76:	2100      	movs	r1, #0
 8003a78:	0020      	movs	r0, r4
 8003a7a:	f7fd fed1 	bl	8001820 <PE_Send_CtrlMessage>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d1c6      	bne.n	8003a10 <__iar_annotation$$branch+0x7fa>
 8003a82:	2008      	movs	r0, #8
 8003a84:	7720      	strb	r0, [r4, #28]
 8003a86:	83e7      	strh	r7, [r4, #30]
 8003a88:	251b      	movs	r5, #27
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	7c20      	ldrb	r0, [r4, #16]
 8003a90:	68a3      	ldr	r3, [r4, #8]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	4798      	blx	r3
 8003a96:	2139      	movs	r1, #57	; 0x39
 8003a98:	e4c5      	b.n	8003426 <__iar_annotation$$branch+0x210>
 8003a9a:	4668      	mov	r0, sp
 8003a9c:	7b00      	ldrb	r0, [r0, #12]
 8003a9e:	2811      	cmp	r0, #17
 8003aa0:	d145      	bne.n	8003b2e <__iar_annotation$$branch+0x918>
 8003aa2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003aa4:	391f      	subs	r1, #31
 8003aa6:	4001      	ands	r1, r0
 8003aa8:	d141      	bne.n	8003b2e <__iar_annotation$$branch+0x918>
 8003aaa:	06c0      	lsls	r0, r0, #27
 8003aac:	0ec0      	lsrs	r0, r0, #27
 8003aae:	2803      	cmp	r0, #3
 8003ab0:	d006      	beq.n	8003ac0 <__iar_annotation$$branch+0x8aa>
 8003ab2:	2804      	cmp	r0, #4
 8003ab4:	d012      	beq.n	8003adc <__iar_annotation$$branch+0x8c6>
 8003ab6:	280c      	cmp	r0, #12
 8003ab8:	d008      	beq.n	8003acc <__iar_annotation$$branch+0x8b6>
 8003aba:	2810      	cmp	r0, #16
 8003abc:	d020      	beq.n	8003b00 <__iar_annotation$$branch+0x8ea>
 8003abe:	e036      	b.n	8003b2e <__iar_annotation$$branch+0x918>
 8003ac0:	213a      	movs	r1, #58	; 0x3a
 8003ac2:	7c20      	ldrb	r0, [r4, #16]
 8003ac4:	f7fc fe64 	bl	8000790 <USBPD_PE_Notification>
 8003ac8:	2020      	movs	r0, #32
 8003aca:	e012      	b.n	8003af2 <__iar_annotation$$branch+0x8dc>
 8003acc:	2205      	movs	r2, #5
 8003ace:	2101      	movs	r1, #1
 8003ad0:	7c20      	ldrb	r0, [r4, #16]
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	4798      	blx	r3
 8003ad8:	213b      	movs	r1, #59	; 0x3b
 8003ada:	e006      	b.n	8003aea <__iar_annotation$$branch+0x8d4>
 8003adc:	2204      	movs	r2, #4
 8003ade:	2101      	movs	r1, #1
 8003ae0:	7c20      	ldrb	r0, [r4, #16]
 8003ae2:	68a3      	ldr	r3, [r4, #8]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	4798      	blx	r3
 8003ae8:	2116      	movs	r1, #22
 8003aea:	7c20      	ldrb	r0, [r4, #16]
 8003aec:	f7fc fe50 	bl	8000790 <USBPD_PE_Notification>
 8003af0:	2003      	movs	r0, #3
 8003af2:	7460      	strb	r0, [r4, #17]
 8003af4:	2500      	movs	r5, #0
 8003af6:	4668      	mov	r0, sp
 8003af8:	7b00      	ldrb	r0, [r0, #12]
 8003afa:	2814      	cmp	r0, #20
 8003afc:	d111      	bne.n	8003b22 <__iar_annotation$$branch+0x90c>
 8003afe:	e016      	b.n	8003b2e <__iar_annotation$$branch+0x918>
 8003b00:	2204      	movs	r2, #4
 8003b02:	2101      	movs	r1, #1
 8003b04:	7c20      	ldrb	r0, [r4, #16]
 8003b06:	68a3      	ldr	r3, [r4, #8]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	4798      	blx	r3
 8003b0c:	2117      	movs	r1, #23
 8003b0e:	7c20      	ldrb	r0, [r4, #16]
 8003b10:	f7fc fe3e 	bl	8000790 <USBPD_PE_Notification>
 8003b14:	2003      	movs	r0, #3
 8003b16:	7460      	strb	r0, [r4, #17]
 8003b18:	2500      	movs	r5, #0
 8003b1a:	4668      	mov	r0, sp
 8003b1c:	7b00      	ldrb	r0, [r0, #12]
 8003b1e:	2814      	cmp	r0, #20
 8003b20:	d005      	beq.n	8003b2e <__iar_annotation$$branch+0x918>
 8003b22:	2014      	movs	r0, #20
 8003b24:	4669      	mov	r1, sp
 8003b26:	7308      	strb	r0, [r1, #12]
 8003b28:	0020      	movs	r0, r4
 8003b2a:	f7fd f89c 	bl	8000c66 <PE_Clear_RxEvent>
 8003b2e:	8be0      	ldrh	r0, [r4, #30]
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	0209      	lsls	r1, r1, #8
 8003b34:	4288      	cmp	r0, r1
 8003b36:	d12c      	bne.n	8003b92 <__iar_annotation$$branch+0x97c>
 8003b38:	e704      	b.n	8003944 <__iar_annotation$$branch+0x72e>
 8003b3a:	6860      	ldr	r0, [r4, #4]
 8003b3c:	6801      	ldr	r1, [r0, #0]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	430a      	orrs	r2, r1
 8003b42:	6002      	str	r2, [r0, #0]
 8003b44:	7f20      	ldrb	r0, [r4, #28]
 8003b46:	2809      	cmp	r0, #9
 8003b48:	d005      	beq.n	8003b56 <__iar_annotation$$branch+0x940>
 8003b4a:	2206      	movs	r2, #6
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	7c20      	ldrb	r0, [r4, #16]
 8003b50:	68a3      	ldr	r3, [r4, #8]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	4798      	blx	r3
 8003b56:	2207      	movs	r2, #7
 8003b58:	2101      	movs	r1, #1
 8003b5a:	7c20      	ldrb	r0, [r4, #16]
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	4798      	blx	r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	7c20      	ldrb	r0, [r4, #16]
 8003b66:	f001 ffb6 	bl	8005ad6 <USBPD_PRL_SetHeaderPowerRole>
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	9000      	str	r0, [sp, #0]
 8003b6e:	2321      	movs	r3, #33	; 0x21
 8003b70:	2206      	movs	r2, #6
 8003b72:	2100      	movs	r1, #0
 8003b74:	0020      	movs	r0, r4
 8003b76:	f7fd fe53 	bl	8001820 <PE_Send_CtrlMessage>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d109      	bne.n	8003b92 <__iar_annotation$$branch+0x97c>
 8003b7e:	2208      	movs	r2, #8
 8003b80:	2101      	movs	r1, #1
 8003b82:	7c20      	ldrb	r0, [r4, #16]
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	4798      	blx	r3
 8003b8a:	48c2      	ldr	r0, [pc, #776]	; (8003e94 <.text_3>)
 8003b8c:	83e0      	strh	r0, [r4, #30]
 8003b8e:	25eb      	movs	r5, #235	; 0xeb
 8003b90:	006d      	lsls	r5, r5, #1
 8003b92:	e6f7      	b.n	8003984 <__iar_annotation$$branch+0x76e>
 8003b94:	4668      	mov	r0, sp
 8003b96:	7b00      	ldrb	r0, [r0, #12]
 8003b98:	2811      	cmp	r0, #17
 8003b9a:	d10b      	bne.n	8003bb4 <__iar_annotation$$branch+0x99e>
 8003b9c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003b9e:	4001      	ands	r1, r0
 8003ba0:	2906      	cmp	r1, #6
 8003ba2:	d107      	bne.n	8003bb4 <__iar_annotation$$branch+0x99e>
 8003ba4:	2026      	movs	r0, #38	; 0x26
 8003ba6:	7460      	strb	r0, [r4, #17]
 8003ba8:	2014      	movs	r0, #20
 8003baa:	4669      	mov	r1, sp
 8003bac:	7308      	strb	r0, [r1, #12]
 8003bae:	0020      	movs	r0, r4
 8003bb0:	f7fd f859 	bl	8000c66 <PE_Clear_RxEvent>
 8003bb4:	8be0      	ldrh	r0, [r4, #30]
 8003bb6:	03a9      	lsls	r1, r5, #14
 8003bb8:	4288      	cmp	r0, r1
 8003bba:	d1ea      	bne.n	8003b92 <__iar_annotation$$branch+0x97c>
 8003bbc:	68a0      	ldr	r0, [r4, #8]
 8003bbe:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d000      	beq.n	8003bc6 <__iar_annotation$$branch+0x9b0>
 8003bc4:	e13c      	b.n	8003e40 <__iar_annotation$$branch+0x5e>
 8003bc6:	200f      	movs	r0, #15
 8003bc8:	e6bd      	b.n	8003946 <__iar_annotation$$branch+0x730>
 8003bca:	8be0      	ldrh	r0, [r4, #30]
 8003bcc:	03a9      	lsls	r1, r5, #14
 8003bce:	4288      	cmp	r0, r1
 8003bd0:	d1df      	bne.n	8003b92 <__iar_annotation$$branch+0x97c>
 8003bd2:	220e      	movs	r2, #14
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	7c20      	ldrb	r0, [r4, #16]
 8003bd8:	68a3      	ldr	r3, [r4, #8]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	4798      	blx	r3
 8003bde:	6860      	ldr	r0, [r4, #4]
 8003be0:	7800      	ldrb	r0, [r0, #0]
 8003be2:	0780      	lsls	r0, r0, #30
 8003be4:	0f80      	lsrs	r0, r0, #30
 8003be6:	2802      	cmp	r0, #2
 8003be8:	d102      	bne.n	8003bf0 <__iar_annotation$$branch+0x9da>
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	f001 ffa9 	bl	8005b42 <USBPD_PRL_SRCReleaseSinkNG>
 8003bf0:	0020      	movs	r0, r4
 8003bf2:	f7fd f95d 	bl	8000eb0 <PE_Reset_StateMachine>
 8003bf6:	2115      	movs	r1, #21
 8003bf8:	e74e      	b.n	8003a98 <__iar_annotation$$branch+0x882>
 8003bfa:	2803      	cmp	r0, #3
 8003bfc:	d110      	bne.n	8003c20 <__iar_annotation$$branch+0xa0a>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	7720      	strb	r0, [r4, #28]
 8003c02:	6860      	ldr	r0, [r4, #4]
 8003c04:	7800      	ldrb	r0, [r0, #0]
 8003c06:	0780      	lsls	r0, r0, #30
 8003c08:	0f80      	lsrs	r0, r0, #30
 8003c0a:	2802      	cmp	r0, #2
 8003c0c:	d102      	bne.n	8003c14 <__iar_annotation$$branch+0x9fe>
 8003c0e:	7c20      	ldrb	r0, [r4, #16]
 8003c10:	f001 ff97 	bl	8005b42 <USBPD_PRL_SRCReleaseSinkNG>
 8003c14:	2004      	movs	r0, #4
 8003c16:	7460      	strb	r0, [r4, #17]
 8003c18:	2167      	movs	r1, #103	; 0x67
 8003c1a:	7c20      	ldrb	r0, [r4, #16]
 8003c1c:	f7fc fdb8 	bl	8000790 <USBPD_PE_Notification>
 8003c20:	4668      	mov	r0, sp
 8003c22:	7b00      	ldrb	r0, [r0, #12]
 8003c24:	2814      	cmp	r0, #20
 8003c26:	d00d      	beq.n	8003c44 <__iar_annotation$$branch+0xa2e>
 8003c28:	0020      	movs	r0, r4
 8003c2a:	f7fe f8a9 	bl	8001d80 <PE_ManageRXEvent>
 8003c2e:	4668      	mov	r0, sp
 8003c30:	7b00      	ldrb	r0, [r0, #12]
 8003c32:	2814      	cmp	r0, #20
 8003c34:	d005      	beq.n	8003c42 <__iar_annotation$$branch+0xa2c>
 8003c36:	2014      	movs	r0, #20
 8003c38:	4669      	mov	r1, sp
 8003c3a:	7308      	strb	r0, [r1, #12]
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	f7fd f812 	bl	8000c66 <PE_Clear_RxEvent>
 8003c42:	e69f      	b.n	8003984 <__iar_annotation$$branch+0x76e>
 8003c44:	6960      	ldr	r0, [r4, #20]
 8003c46:	0cc0      	lsrs	r0, r0, #19
 8003c48:	03ad      	lsls	r5, r5, #14
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d01e      	beq.n	8003c8c <__iar_annotation$$branch+0xa76>
 8003c4e:	8c21      	ldrh	r1, [r4, #32]
 8003c50:	42a9      	cmp	r1, r5
 8003c52:	d10e      	bne.n	8003c72 <__iar_annotation$$branch+0xa5c>
 8003c54:	200f      	movs	r0, #15
 8003c56:	7460      	strb	r0, [r4, #17]
 8003c58:	2000      	movs	r0, #0
 8003c5a:	9000      	str	r0, [sp, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2270      	movs	r2, #112	; 0x70
 8003c60:	7c21      	ldrb	r1, [r4, #16]
 8003c62:	2009      	movs	r0, #9
 8003c64:	4da2      	ldr	r5, [pc, #648]	; (8003ef0 <.text_5>)
 8003c66:	682d      	ldr	r5, [r5, #0]
 8003c68:	47a8      	blx	r5
 8003c6a:	78b0      	ldrb	r0, [r6, #2]
 8003c6c:	1c40      	adds	r0, r0, #1
 8003c6e:	70b0      	strb	r0, [r6, #2]
 8003c70:	e6fc      	b.n	8003a6c <__iar_annotation$$branch+0x856>
 8003c72:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003c74:	0509      	lsls	r1, r1, #20
 8003c76:	0f49      	lsrs	r1, r1, #29
 8003c78:	180a      	adds	r2, r1, r0
 8003c7a:	2333      	movs	r3, #51	; 0x33
 8003c7c:	435a      	muls	r2, r3
 8003c7e:	4315      	orrs	r5, r2
 8003c80:	8425      	strh	r5, [r4, #32]
 8003c82:	180d      	adds	r5, r1, r0
 8003c84:	2033      	movs	r0, #51	; 0x33
 8003c86:	4345      	muls	r5, r0
 8003c88:	b2ad      	uxth	r5, r5
 8003c8a:	e67b      	b.n	8003984 <__iar_annotation$$branch+0x76e>
 8003c8c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8003c8e:	42a8      	cmp	r0, r5
 8003c90:	d099      	beq.n	8003bc6 <__iar_annotation$$branch+0x9b0>
 8003c92:	7c20      	ldrb	r0, [r4, #16]
 8003c94:	f7fd f80c 	bl	8000cb0 <PE_PRL_Control_RxEvent>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d112      	bne.n	8003cc2 <__iar_annotation$$branch+0xaac>
 8003c9c:	2032      	movs	r0, #50	; 0x32
 8003c9e:	5c20      	ldrb	r0, [r4, r0]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d00e      	beq.n	8003cc2 <__iar_annotation$$branch+0xaac>
 8003ca4:	2133      	movs	r1, #51	; 0x33
 8003ca6:	5c61      	ldrb	r1, [r4, r1]
 8003ca8:	2231      	movs	r2, #49	; 0x31
 8003caa:	54a1      	strb	r1, [r4, r2]
 8003cac:	7460      	strb	r0, [r4, #17]
 8003cae:	2000      	movs	r0, #0
 8003cb0:	2132      	movs	r1, #50	; 0x32
 8003cb2:	5460      	strb	r0, [r4, r1]
 8003cb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cb6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003cb8:	6960      	ldr	r0, [r4, #20]
 8003cba:	0869      	lsrs	r1, r5, #1
 8003cbc:	4301      	orrs	r1, r0
 8003cbe:	6161      	str	r1, [r4, #20]
 8003cc0:	e6d4      	b.n	8003a6c <__iar_annotation$$branch+0x856>
 8003cc2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003cc4:	42a8      	cmp	r0, r5
 8003cc6:	d106      	bne.n	8003cd6 <__iar_annotation$$branch+0xac0>
 8003cc8:	2000      	movs	r0, #0
 8003cca:	8460      	strh	r0, [r4, #34]	; 0x22
 8003ccc:	7930      	ldrb	r0, [r6, #4]
 8003cce:	1c40      	adds	r0, r0, #1
 8003cd0:	7130      	strb	r0, [r6, #4]
 8003cd2:	2005      	movs	r0, #5
 8003cd4:	e637      	b.n	8003946 <__iar_annotation$$branch+0x730>
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f7fd fd14 	bl	8001704 <PE_CalculateMinTiming>
 8003cdc:	e081      	b.n	8003de2 <__iar_annotation$$branch>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	9002      	str	r0, [sp, #8]
 8003ce2:	2003      	movs	r0, #3
 8003ce4:	9001      	str	r0, [sp, #4]
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	9000      	str	r0, [sp, #0]
 8003cea:	0023      	movs	r3, r4
 8003cec:	332c      	adds	r3, #44	; 0x2c
 8003cee:	2206      	movs	r2, #6
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	0020      	movs	r0, r4
 8003cf4:	f7fd fdbf 	bl	8001876 <PE_Send_DataMessage>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1c6      	bne.n	8003c8a <__iar_annotation$$branch+0xa74>
 8003cfc:	215d      	movs	r1, #93	; 0x5d
 8003cfe:	e6cb      	b.n	8003a98 <__iar_annotation$$branch+0x882>
 8003d00:	2000      	movs	r0, #0
 8003d02:	9005      	str	r0, [sp, #20]
 8003d04:	ab05      	add	r3, sp, #20
 8003d06:	aa06      	add	r2, sp, #24
 8003d08:	210a      	movs	r1, #10
 8003d0a:	4668      	mov	r0, sp
 8003d0c:	7b40      	ldrb	r0, [r0, #13]
 8003d0e:	68a7      	ldr	r7, [r4, #8]
 8003d10:	697f      	ldr	r7, [r7, #20]
 8003d12:	47b8      	blx	r7
 8003d14:	2104      	movs	r1, #4
 8003d16:	9805      	ldr	r0, [sp, #20]
 8003d18:	f7fd fd20 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d11f      	bne.n	8003d60 <__iar_annotation$$branch+0xb4a>
 8003d20:	71f0      	strb	r0, [r6, #7]
 8003d22:	7230      	strb	r0, [r6, #8]
 8003d24:	7c20      	ldrb	r0, [r4, #16]
 8003d26:	f7fd f995 	bl	8001054 <PE_Get_UnchunkedSupport>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d103      	bne.n	8003d36 <__iar_annotation$$branch+0xb20>
 8003d2e:	7a30      	ldrb	r0, [r6, #8]
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	4301      	orrs	r1, r0
 8003d34:	7231      	strb	r1, [r6, #8]
 8003d36:	9a05      	ldr	r2, [sp, #20]
 8003d38:	a906      	add	r1, sp, #24
 8003d3a:	486e      	ldr	r0, [pc, #440]	; (8003ef4 <.text_6>)
 8003d3c:	1820      	adds	r0, r4, r0
 8003d3e:	f016 f9f5 	bl	801a12c <__aeabi_memcpy>
 8003d42:	2000      	movs	r0, #0
 8003d44:	9002      	str	r0, [sp, #8]
 8003d46:	2003      	movs	r0, #3
 8003d48:	9001      	str	r0, [sp, #4]
 8003d4a:	2008      	movs	r0, #8
 8003d4c:	9000      	str	r0, [sp, #0]
 8003d4e:	486a      	ldr	r0, [pc, #424]	; (8003ef8 <.text_7>)
 8003d50:	1823      	adds	r3, r4, r0
 8003d52:	220c      	movs	r2, #12
 8003d54:	2100      	movs	r1, #0
 8003d56:	0020      	movs	r0, r4
 8003d58:	f7fd fec0 	bl	8001adc <PE_Send_ExtendedMessage>
 8003d5c:	214c      	movs	r1, #76	; 0x4c
 8003d5e:	e69b      	b.n	8003a98 <__iar_annotation$$branch+0x882>
 8003d60:	2001      	movs	r0, #1
 8003d62:	e511      	b.n	8003788 <__iar_annotation$$branch+0x572>
 8003d64:	2001      	movs	r0, #1
 8003d66:	9000      	str	r0, [sp, #0]
 8003d68:	2339      	movs	r3, #57	; 0x39
 8003d6a:	7832      	ldrb	r2, [r6, #0]
 8003d6c:	2033      	movs	r0, #51	; 0x33
 8003d6e:	5c21      	ldrb	r1, [r4, r0]
 8003d70:	0020      	movs	r0, r4
 8003d72:	f7fd fd55 	bl	8001820 <PE_Send_CtrlMessage>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d145      	bne.n	8003e06 <__iar_annotation$$branch+0x24>
 8003d7a:	7870      	ldrb	r0, [r6, #1]
 8003d7c:	7720      	strb	r0, [r4, #28]
 8003d7e:	83e7      	strh	r7, [r4, #30]
 8003d80:	251b      	movs	r5, #27
 8003d82:	2144      	movs	r1, #68	; 0x44
 8003d84:	e688      	b.n	8003a98 <__iar_annotation$$branch+0x882>
 8003d86:	8be0      	ldrh	r0, [r4, #30]
 8003d88:	03a9      	lsls	r1, r5, #14
 8003d8a:	4288      	cmp	r0, r1
 8003d8c:	d104      	bne.n	8003d98 <__iar_annotation$$branch+0xb82>
 8003d8e:	4668      	mov	r0, sp
 8003d90:	7b00      	ldrb	r0, [r0, #12]
 8003d92:	2814      	cmp	r0, #20
 8003d94:	d100      	bne.n	8003d98 <__iar_annotation$$branch+0xb82>
 8003d96:	e5d5      	b.n	8003944 <__iar_annotation$$branch+0x72e>
 8003d98:	4668      	mov	r0, sp
 8003d9a:	7b00      	ldrb	r0, [r0, #12]
 8003d9c:	2814      	cmp	r0, #20
 8003d9e:	d032      	beq.n	8003e06 <__iar_annotation$$branch+0x24>
 8003da0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003da2:	0bc1      	lsrs	r1, r0, #15
 8003da4:	d003      	beq.n	8003dae <__iar_annotation$$branch+0xb98>
 8003da6:	0020      	movs	r0, r4
 8003da8:	f7fd fda2 	bl	80018f0 <PE_Check_ExtendedMessage>
 8003dac:	e73f      	b.n	8003c2e <__iar_annotation$$branch+0xa18>
 8003dae:	06c0      	lsls	r0, r0, #27
 8003db0:	0ec0      	lsrs	r0, r0, #27
 8003db2:	2810      	cmp	r0, #16
 8003db4:	d000      	beq.n	8003db8 <__iar_annotation$$branch+0xba2>
 8003db6:	e5c5      	b.n	8003944 <__iar_annotation$$branch+0x72e>
 8003db8:	2014      	movs	r0, #20
 8003dba:	4669      	mov	r1, sp
 8003dbc:	7308      	strb	r0, [r1, #12]
 8003dbe:	0020      	movs	r0, r4
 8003dc0:	f7fc ff51 	bl	8000c66 <PE_Clear_RxEvent>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	83e0      	strh	r0, [r4, #30]
 8003dc8:	2003      	movs	r0, #3
 8003dca:	7460      	strb	r0, [r4, #17]
 8003dcc:	2500      	movs	r5, #0
 8003dce:	2159      	movs	r1, #89	; 0x59
 8003dd0:	e662      	b.n	8003a98 <__iar_annotation$$branch+0x882>
 8003dd2:	0020      	movs	r0, r4
 8003dd4:	f7fd feae 	bl	8001b34 <PE_SubStateMachine_ExtendedMessages>
 8003dd8:	e003      	b.n	8003de2 <__iar_annotation$$branch>
 8003dda:	a903      	add	r1, sp, #12
 8003ddc:	0020      	movs	r0, r4
 8003dde:	f7fd f94b 	bl	8001078 <PE_SubStateMachine_Generic>

08003de2 <__iar_annotation$$branch>:
 8003de2:	f7ff fa06 	bl	80031f2 <__iar_annotation$$branch+0xc>
 8003de6:	a903      	add	r1, sp, #12
 8003de8:	0020      	movs	r0, r4
 8003dea:	f000 f9cb 	bl	8004184 <PE_SubStateMachine_VconnSwap>
 8003dee:	0005      	movs	r5, r0
 8003df0:	6860      	ldr	r0, [r4, #4]
 8003df2:	6800      	ldr	r0, [r0, #0]
 8003df4:	0401      	lsls	r1, r0, #16
 8003df6:	0fc9      	lsrs	r1, r1, #31
 8003df8:	d006      	beq.n	8003e08 <__iar_annotation$$branch+0x26>
 8003dfa:	6820      	ldr	r0, [r4, #0]
 8003dfc:	6801      	ldr	r1, [r0, #0]
 8003dfe:	4668      	mov	r0, sp
 8003e00:	7b40      	ldrb	r0, [r0, #13]
 8003e02:	f001 febd 	bl	8005b80 <USBPD_PRL_SOPCapability>
 8003e06:	e5bd      	b.n	8003984 <__iar_annotation$$branch+0x76e>
 8003e08:	2101      	movs	r1, #1
 8003e0a:	e7f8      	b.n	8003dfe <__iar_annotation$$branch+0x1c>
 8003e0c:	4668      	mov	r0, sp
 8003e0e:	7b00      	ldrb	r0, [r0, #12]
 8003e10:	2811      	cmp	r0, #17
 8003e12:	d111      	bne.n	8003e38 <__iar_annotation$$branch+0x56>
 8003e14:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003e16:	4001      	ands	r1, r0
 8003e18:	2913      	cmp	r1, #19
 8003e1a:	d10d      	bne.n	8003e38 <__iar_annotation$$branch+0x56>
 8003e1c:	2014      	movs	r0, #20
 8003e1e:	4669      	mov	r1, sp
 8003e20:	7308      	strb	r0, [r1, #12]
 8003e22:	0020      	movs	r0, r4
 8003e24:	f7fc ff1f 	bl	8000c66 <PE_Clear_RxEvent>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	9000      	str	r0, [sp, #0]
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	2203      	movs	r2, #3
 8003e30:	2100      	movs	r1, #0
 8003e32:	0020      	movs	r0, r4
 8003e34:	f7fd fcf4 	bl	8001820 <PE_Send_CtrlMessage>
 8003e38:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003e3a:	03a9      	lsls	r1, r5, #14
 8003e3c:	4288      	cmp	r0, r1
 8003e3e:	d106      	bne.n	8003e4e <__iar_annotation$$branch+0x6c>
 8003e40:	2092      	movs	r0, #146	; 0x92
 8003e42:	e580      	b.n	8003946 <__iar_annotation$$branch+0x730>
 8003e44:	4668      	mov	r0, sp
 8003e46:	7b01      	ldrb	r1, [r0, #12]
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f001 fbfb 	bl	8005644 <PE_StateMachine_UVDM>
 8003e4e:	e599      	b.n	8003984 <__iar_annotation$$branch+0x76e>
 8003e50:	6960      	ldr	r0, [r4, #20]
 8003e52:	2701      	movs	r7, #1
 8003e54:	0b41      	lsrs	r1, r0, #13
 8003e56:	4039      	ands	r1, r7
 8003e58:	d019      	beq.n	8003e8e <__iar_annotation$$branch>
 8003e5a:	0b80      	lsrs	r0, r0, #14
 8003e5c:	4038      	ands	r0, r7
 8003e5e:	d007      	beq.n	8003e70 <__iar_annotation$$branch+0x8e>
 8003e60:	215b      	movs	r1, #91	; 0x5b
 8003e62:	7c20      	ldrb	r0, [r4, #16]
 8003e64:	f7fc fc94 	bl	8000790 <USBPD_PE_Notification>
 8003e68:	6960      	ldr	r0, [r4, #20]
 8003e6a:	4924      	ldr	r1, [pc, #144]	; (8003efc <.text_8>)
 8003e6c:	4001      	ands	r1, r0
 8003e6e:	6161      	str	r1, [r4, #20]
 8003e70:	2003      	movs	r0, #3
 8003e72:	7460      	strb	r0, [r4, #17]
 8003e74:	7ca1      	ldrb	r1, [r4, #18]
 8003e76:	2903      	cmp	r1, #3
 8003e78:	d008      	beq.n	8003e8c <__iar_annotation$$branch+0xaa>
 8003e7a:	74a0      	strb	r0, [r4, #18]
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	9000      	str	r0, [sp, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2203      	movs	r2, #3
 8003e84:	7c21      	ldrb	r1, [r4, #16]
 8003e86:	2004      	movs	r0, #4
 8003e88:	6835      	ldr	r5, [r6, #0]
 8003e8a:	47a8      	blx	r5
 8003e8c:	2501      	movs	r5, #1

08003e8e <__iar_annotation$$branch>:
 8003e8e:	f7ff f9e0 	bl	8003252 <__iar_annotation$$branch+0x3c>
	...

08003e94 <.text_3>:
 8003e94:	000081d6 	.word	0x000081d6

08003e98 <PE_Send_SRCCapabilities>:
 8003e98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003e9a:	0004      	movs	r4, r0
 8003e9c:	000d      	movs	r5, r1
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	9002      	str	r0, [sp, #8]
 8003ea2:	ab02      	add	r3, sp, #8
 8003ea4:	4816      	ldr	r0, [pc, #88]	; (8003f00 <.text_9>)
 8003ea6:	1822      	adds	r2, r4, r0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	7c20      	ldrb	r0, [r4, #16]
 8003eac:	68a6      	ldr	r6, [r4, #8]
 8003eae:	6976      	ldr	r6, [r6, #20]
 8003eb0:	47b0      	blx	r6
 8003eb2:	9802      	ldr	r0, [sp, #8]
 8003eb4:	1c80      	adds	r0, r0, #2
 8003eb6:	9002      	str	r0, [sp, #8]
 8003eb8:	2104      	movs	r1, #4
 8003eba:	9802      	ldr	r0, [sp, #8]
 8003ebc:	f7fd fc4e 	bl	800175c <PE_CheckDataSizeFromGetDataInfo>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d113      	bne.n	8003eec <PE_Send_SRCCapabilities+0x54>
 8003ec4:	6860      	ldr	r0, [r4, #4]
 8003ec6:	6800      	ldr	r0, [r0, #0]
 8003ec8:	04c1      	lsls	r1, r0, #19
 8003eca:	0fc9      	lsrs	r1, r1, #31
 8003ecc:	d00e      	beq.n	8003eec <PE_Send_SRCCapabilities+0x54>
 8003ece:	9501      	str	r5, [sp, #4]
 8003ed0:	9802      	ldr	r0, [sp, #8]
 8003ed2:	b280      	uxth	r0, r0
 8003ed4:	9000      	str	r0, [sp, #0]
 8003ed6:	4808      	ldr	r0, [pc, #32]	; (8003ef8 <.text_7>)
 8003ed8:	1823      	adds	r3, r4, r0
 8003eda:	2201      	movs	r2, #1
 8003edc:	2100      	movs	r1, #0
 8003ede:	7c20      	ldrb	r0, [r4, #16]
 8003ee0:	f001 fe52 	bl	8005b88 <USBPD_PRL_SendMessage>
 8003ee4:	2803      	cmp	r0, #3
 8003ee6:	d0e7      	beq.n	8003eb8 <PE_Send_SRCCapabilities+0x20>
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	2010      	movs	r0, #16
 8003eee:	e7fb      	b.n	8003ee8 <PE_Send_SRCCapabilities+0x50>

08003ef0 <.text_5>:
 8003ef0:	20000000 	.word	0x20000000

08003ef4 <.text_6>:
 8003ef4:	00000267 	.word	0x00000267

08003ef8 <.text_7>:
 8003ef8:	00000263 	.word	0x00000263

08003efc <.text_8>:
 8003efc:	ffffbfff 	.word	0xffffbfff

08003f00 <.text_9>:
 8003f00:	00000265 	.word	0x00000265

08003f04 <PE_StateMachine_VDMCable>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	0004      	movs	r4, r0
 8003f0a:	2502      	movs	r5, #2
 8003f0c:	2607      	movs	r6, #7
 8003f0e:	7c60      	ldrb	r0, [r4, #17]
 8003f10:	2805      	cmp	r0, #5
 8003f12:	d002      	beq.n	8003f1a <PE_StateMachine_VDMCable+0x16>
 8003f14:	289a      	cmp	r0, #154	; 0x9a
 8003f16:	d072      	beq.n	8003ffe <PE_StateMachine_VDMCable+0xfa>
 8003f18:	e127      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 8003f1a:	6860      	ldr	r0, [r4, #4]
 8003f1c:	7800      	ldrb	r0, [r0, #0]
 8003f1e:	0781      	lsls	r1, r0, #30
 8003f20:	0f89      	lsrs	r1, r1, #30
 8003f22:	0020      	movs	r0, r4
 8003f24:	f000 fa5e 	bl	80043e4 <PE_ExtRevisionInteroperability_Cable>
 8003f28:	2094      	movs	r0, #148	; 0x94
 8003f2a:	0080      	lsls	r0, r0, #2
 8003f2c:	5821      	ldr	r1, [r4, r0]
 8003f2e:	201f      	movs	r0, #31
 8003f30:	4381      	bics	r1, r0
 8003f32:	488f      	ldr	r0, [pc, #572]	; (8004170 <.text_3>)
 8003f34:	4308      	orrs	r0, r1
 8003f36:	2194      	movs	r1, #148	; 0x94
 8003f38:	0089      	lsls	r1, r1, #2
 8003f3a:	5060      	str	r0, [r4, r1]
 8003f3c:	6861      	ldr	r1, [r4, #4]
 8003f3e:	9100      	str	r1, [sp, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	9a00      	ldr	r2, [sp, #0]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	0953      	lsrs	r3, r2, #5
 8003f48:	400b      	ands	r3, r1
 8003f4a:	4a8a      	ldr	r2, [pc, #552]	; (8004174 <.text_4>)
 8003f4c:	4002      	ands	r2, r0
 8003f4e:	0358      	lsls	r0, r3, #13
 8003f50:	4310      	orrs	r0, r2
 8003f52:	22ff      	movs	r2, #255	; 0xff
 8003f54:	0612      	lsls	r2, r2, #24
 8003f56:	4302      	orrs	r2, r0
 8003f58:	2094      	movs	r0, #148	; 0x94
 8003f5a:	0080      	lsls	r0, r0, #2
 8003f5c:	5022      	str	r2, [r4, r0]
 8003f5e:	9800      	ldr	r0, [sp, #0]
 8003f60:	6800      	ldr	r0, [r0, #0]
 8003f62:	0880      	lsrs	r0, r0, #2
 8003f64:	4001      	ands	r1, r0
 8003f66:	d003      	beq.n	8003f70 <PE_StateMachine_VDMCable+0x6c>
 8003f68:	6960      	ldr	r0, [r4, #20]
 8003f6a:	0741      	lsls	r1, r0, #29
 8003f6c:	0fc8      	lsrs	r0, r1, #31
 8003f6e:	e000      	b.n	8003f72 <PE_StateMachine_VDMCable+0x6e>
 8003f70:	2002      	movs	r0, #2
 8003f72:	2194      	movs	r1, #148	; 0x94
 8003f74:	0089      	lsls	r1, r1, #2
 8003f76:	1867      	adds	r7, r4, r1
 8003f78:	9002      	str	r0, [sp, #8]
 8003f7a:	209a      	movs	r0, #154	; 0x9a
 8003f7c:	9001      	str	r0, [sp, #4]
 8003f7e:	2001      	movs	r0, #1
 8003f80:	9000      	str	r0, [sp, #0]
 8003f82:	003b      	movs	r3, r7
 8003f84:	220f      	movs	r2, #15
 8003f86:	2101      	movs	r1, #1
 8003f88:	0020      	movs	r0, r4
 8003f8a:	f7fd fc74 	bl	8001876 <PE_Send_DataMessage>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d109      	bne.n	8003fa6 <PE_StateMachine_VDMCable+0xa2>
 8003f92:	6960      	ldr	r0, [r4, #20]
 8003f94:	03e9      	lsls	r1, r5, #15
 8003f96:	4301      	orrs	r1, r0
 8003f98:	6161      	str	r1, [r4, #20]
 8003f9a:	2051      	movs	r0, #81	; 0x51
 8003f9c:	7720      	strb	r0, [r4, #28]
 8003f9e:	4876      	ldr	r0, [pc, #472]	; (8004178 <.text_5>)
 8003fa0:	8460      	strh	r0, [r4, #34]	; 0x22
 8003fa2:	251e      	movs	r5, #30
 8003fa4:	e0e1      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 8003fa6:	2809      	cmp	r0, #9
 8003fa8:	d0fc      	beq.n	8003fa4 <PE_StateMachine_VDMCable+0xa0>
 8003faa:	7cb8      	ldrb	r0, [r7, #18]
 8003fac:	2815      	cmp	r0, #21
 8003fae:	d202      	bcs.n	8003fb6 <PE_StateMachine_VDMCable+0xb2>
 8003fb0:	4872      	ldr	r0, [pc, #456]	; (800417c <.text_6>)
 8003fb2:	8460      	strh	r0, [r4, #34]	; 0x22
 8003fb4:	e00a      	b.n	8003fcc <PE_StateMachine_VDMCable+0xc8>
 8003fb6:	68e0      	ldr	r0, [r4, #12]
 8003fb8:	6940      	ldr	r0, [r0, #20]
 8003fba:	9000      	str	r0, [sp, #0]
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d005      	beq.n	8003fcc <PE_StateMachine_VDMCable+0xc8>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	7c20      	ldrb	r0, [r4, #16]
 8003fc8:	9f00      	ldr	r7, [sp, #0]
 8003fca:	47b8      	blx	r7
 8003fcc:	6860      	ldr	r0, [r4, #4]
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	0a00      	lsrs	r0, r0, #8
 8003fd2:	4030      	ands	r0, r6
 8003fd4:	2803      	cmp	r0, #3
 8003fd6:	d100      	bne.n	8003fda <PE_StateMachine_VDMCable+0xd6>
 8003fd8:	e0a4      	b.n	8004124 <PE_StateMachine_VDMCable+0x220>
 8003fda:	4869      	ldr	r0, [pc, #420]	; (8004180 <.text_7>)
 8003fdc:	8be1      	ldrh	r1, [r4, #30]
 8003fde:	4201      	tst	r1, r0
 8003fe0:	d00b      	beq.n	8003ffa <PE_StateMachine_VDMCable+0xf6>
 8003fe2:	2108      	movs	r1, #8
 8003fe4:	7461      	strb	r1, [r4, #17]
 8003fe6:	8be1      	ldrh	r1, [r4, #30]
 8003fe8:	4001      	ands	r1, r0
 8003fea:	292d      	cmp	r1, #45	; 0x2d
 8003fec:	d203      	bcs.n	8003ff6 <PE_StateMachine_VDMCable+0xf2>
 8003fee:	8be1      	ldrh	r1, [r4, #30]
 8003ff0:	0005      	movs	r5, r0
 8003ff2:	400d      	ands	r5, r1
 8003ff4:	e0b9      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 8003ff6:	252d      	movs	r5, #45	; 0x2d
 8003ff8:	e0b7      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 8003ffa:	7466      	strb	r6, [r4, #17]
 8003ffc:	e0b5      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 8003ffe:	9101      	str	r1, [sp, #4]
 8004000:	2001      	movs	r0, #1
 8004002:	f7fc fe69 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 8004006:	4669      	mov	r1, sp
 8004008:	7008      	strb	r0, [r1, #0]
 800400a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 800400c:	2700      	movs	r7, #0
 800400e:	221f      	movs	r2, #31
 8004010:	9801      	ldr	r0, [sp, #4]
 8004012:	7800      	ldrb	r0, [r0, #0]
 8004014:	466b      	mov	r3, sp
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	4298      	cmp	r0, r3
 800401a:	d14f      	bne.n	80040bc <PE_StateMachine_VDMCable+0x1b8>
 800401c:	0bc8      	lsrs	r0, r1, #15
 800401e:	d14d      	bne.n	80040bc <PE_StateMachine_VDMCable+0x1b8>
 8004020:	0b08      	lsrs	r0, r1, #12
 8004022:	4230      	tst	r0, r6
 8004024:	d04a      	beq.n	80040bc <PE_StateMachine_VDMCable+0x1b8>
 8004026:	201f      	movs	r0, #31
 8004028:	4008      	ands	r0, r1
 800402a:	280f      	cmp	r0, #15
 800402c:	d146      	bne.n	80040bc <PE_StateMachine_VDMCable+0x1b8>
 800402e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004030:	7880      	ldrb	r0, [r0, #2]
 8004032:	9000      	str	r0, [sp, #0]
 8004034:	4002      	ands	r2, r0
 8004036:	2a01      	cmp	r2, #1
 8004038:	d13b      	bne.n	80040b2 <PE_StateMachine_VDMCable+0x1ae>
 800403a:	0980      	lsrs	r0, r0, #6
 800403c:	d039      	beq.n	80040b2 <PE_StateMachine_VDMCable+0x1ae>
 800403e:	0608      	lsls	r0, r1, #24
 8004040:	0f81      	lsrs	r1, r0, #30
 8004042:	0020      	movs	r0, r4
 8004044:	f000 f9ce 	bl	80043e4 <PE_ExtRevisionInteroperability_Cable>
 8004048:	68e0      	ldr	r0, [r4, #12]
 800404a:	6940      	ldr	r0, [r0, #20]
 800404c:	2800      	cmp	r0, #0
 800404e:	d023      	beq.n	8004098 <PE_StateMachine_VDMCable+0x194>
 8004050:	9800      	ldr	r0, [sp, #0]
 8004052:	0985      	lsrs	r5, r0, #6
 8004054:	07a8      	lsls	r0, r5, #30
 8004056:	0f80      	lsrs	r0, r0, #30
 8004058:	2801      	cmp	r0, #1
 800405a:	d11d      	bne.n	8004098 <PE_StateMachine_VDMCable+0x194>
 800405c:	aa03      	add	r2, sp, #12
 800405e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004060:	1d81      	adds	r1, r0, #6
 8004062:	7c20      	ldrb	r0, [r4, #16]
 8004064:	f001 fb9a 	bl	800579c <PE_SVDM_CheckIdentity>
 8004068:	2800      	cmp	r0, #0
 800406a:	d111      	bne.n	8004090 <PE_StateMachine_VDMCable+0x18c>
 800406c:	ab03      	add	r3, sp, #12
 800406e:	07aa      	lsls	r2, r5, #30
 8004070:	0f92      	lsrs	r2, r2, #30
 8004072:	2101      	movs	r1, #1
 8004074:	7c20      	ldrb	r0, [r4, #16]
 8004076:	68e5      	ldr	r5, [r4, #12]
 8004078:	696d      	ldr	r5, [r5, #20]
 800407a:	47a8      	blx	r5
 800407c:	2152      	movs	r1, #82	; 0x52
 800407e:	7c20      	ldrb	r0, [r4, #16]
 8004080:	f7fc fb86 	bl	8000790 <USBPD_PE_Notification>
 8004084:	2014      	movs	r0, #20
 8004086:	2194      	movs	r1, #148	; 0x94
 8004088:	0089      	lsls	r1, r1, #2
 800408a:	1861      	adds	r1, r4, r1
 800408c:	7488      	strb	r0, [r1, #18]
 800408e:	e003      	b.n	8004098 <PE_StateMachine_VDMCable+0x194>
 8004090:	211b      	movs	r1, #27
 8004092:	7c20      	ldrb	r0, [r4, #16]
 8004094:	f7fc fb7c 	bl	8000790 <USBPD_PE_Notification>
 8004098:	8467      	strh	r7, [r4, #34]	; 0x22
 800409a:	6860      	ldr	r0, [r4, #4]
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	0a00      	lsrs	r0, r0, #8
 80040a0:	4030      	ands	r0, r6
 80040a2:	2803      	cmp	r0, #3
 80040a4:	d102      	bne.n	80040ac <PE_StateMachine_VDMCable+0x1a8>
 80040a6:	7460      	strb	r0, [r4, #17]
 80040a8:	2500      	movs	r5, #0
 80040aa:	e002      	b.n	80040b2 <PE_StateMachine_VDMCable+0x1ae>
 80040ac:	7466      	strb	r6, [r4, #17]
 80040ae:	2500      	movs	r5, #0
 80040b0:	7727      	strb	r7, [r4, #28]
 80040b2:	9801      	ldr	r0, [sp, #4]
 80040b4:	7800      	ldrb	r0, [r0, #0]
 80040b6:	2814      	cmp	r0, #20
 80040b8:	d119      	bne.n	80040ee <PE_StateMachine_VDMCable+0x1ea>
 80040ba:	e056      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 80040bc:	2003      	movs	r0, #3
 80040be:	400a      	ands	r2, r1
 80040c0:	2a10      	cmp	r2, #16
 80040c2:	d11b      	bne.n	80040fc <PE_StateMachine_VDMCable+0x1f8>
 80040c4:	8467      	strh	r7, [r4, #34]	; 0x22
 80040c6:	6861      	ldr	r1, [r4, #4]
 80040c8:	6809      	ldr	r1, [r1, #0]
 80040ca:	0a09      	lsrs	r1, r1, #8
 80040cc:	4031      	ands	r1, r6
 80040ce:	2903      	cmp	r1, #3
 80040d0:	d102      	bne.n	80040d8 <PE_StateMachine_VDMCable+0x1d4>
 80040d2:	7460      	strb	r0, [r4, #17]
 80040d4:	2500      	movs	r5, #0
 80040d6:	e002      	b.n	80040de <PE_StateMachine_VDMCable+0x1da>
 80040d8:	7466      	strb	r6, [r4, #17]
 80040da:	2500      	movs	r5, #0
 80040dc:	7727      	strb	r7, [r4, #28]
 80040de:	2159      	movs	r1, #89	; 0x59
 80040e0:	7c20      	ldrb	r0, [r4, #16]
 80040e2:	f7fc fb55 	bl	8000790 <USBPD_PE_Notification>
 80040e6:	9801      	ldr	r0, [sp, #4]
 80040e8:	7800      	ldrb	r0, [r0, #0]
 80040ea:	2814      	cmp	r0, #20
 80040ec:	d03d      	beq.n	800416a <PE_StateMachine_VDMCable+0x266>
 80040ee:	2014      	movs	r0, #20
 80040f0:	9901      	ldr	r1, [sp, #4]
 80040f2:	7008      	strb	r0, [r1, #0]
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7fc fdb6 	bl	8000c66 <PE_Clear_RxEvent>
 80040fa:	e036      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 80040fc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80040fe:	03aa      	lsls	r2, r5, #14
 8004100:	4291      	cmp	r1, r2
 8004102:	d132      	bne.n	800416a <PE_StateMachine_VDMCable+0x266>
 8004104:	8467      	strh	r7, [r4, #34]	; 0x22
 8004106:	6861      	ldr	r1, [r4, #4]
 8004108:	680a      	ldr	r2, [r1, #0]
 800410a:	0a13      	lsrs	r3, r2, #8
 800410c:	4033      	ands	r3, r6
 800410e:	2b03      	cmp	r3, #3
 8004110:	d10c      	bne.n	800412c <PE_StateMachine_VDMCable+0x228>
 8004112:	68e0      	ldr	r0, [r4, #12]
 8004114:	6945      	ldr	r5, [r0, #20]
 8004116:	2d00      	cmp	r5, #0
 8004118:	d004      	beq.n	8004124 <PE_StateMachine_VDMCable+0x220>
 800411a:	2300      	movs	r3, #0
 800411c:	2204      	movs	r2, #4
 800411e:	2101      	movs	r1, #1
 8004120:	7c20      	ldrb	r0, [r4, #16]
 8004122:	47a8      	blx	r5
 8004124:	2003      	movs	r0, #3
 8004126:	7460      	strb	r0, [r4, #17]
 8004128:	2500      	movs	r5, #0
 800412a:	e01e      	b.n	800416a <PE_StateMachine_VDMCable+0x266>
 800412c:	0e93      	lsrs	r3, r2, #26
 800412e:	4018      	ands	r0, r3
 8004130:	2802      	cmp	r0, #2
 8004132:	d10e      	bne.n	8004152 <PE_StateMachine_VDMCable+0x24e>
 8004134:	48b7      	ldr	r0, [pc, #732]	; (8004414 <.text_10>)
 8004136:	4010      	ands	r0, r2
 8004138:	066a      	lsls	r2, r5, #25
 800413a:	4302      	orrs	r2, r0
 800413c:	600a      	str	r2, [r1, #0]
 800413e:	2101      	movs	r1, #1
 8004140:	7c20      	ldrb	r0, [r4, #16]
 8004142:	f001 fcea 	bl	8005b1a <USBPD_PRL_CBL_SetHeaderSpecification>
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <.text_6>)
 8004148:	8460      	strh	r0, [r4, #34]	; 0x22
 800414a:	252d      	movs	r5, #45	; 0x2d
 800414c:	2008      	movs	r0, #8
 800414e:	7460      	strb	r0, [r4, #17]
 8004150:	e00a      	b.n	8004168 <PE_StateMachine_VDMCable+0x264>
 8004152:	68e0      	ldr	r0, [r4, #12]
 8004154:	6945      	ldr	r5, [r0, #20]
 8004156:	2d00      	cmp	r5, #0
 8004158:	d004      	beq.n	8004164 <PE_StateMachine_VDMCable+0x260>
 800415a:	2300      	movs	r3, #0
 800415c:	2204      	movs	r2, #4
 800415e:	2101      	movs	r1, #1
 8004160:	7c20      	ldrb	r0, [r4, #16]
 8004162:	47a8      	blx	r5
 8004164:	7466      	strb	r6, [r4, #17]
 8004166:	2500      	movs	r5, #0
 8004168:	7727      	strb	r7, [r4, #28]
 800416a:	0028      	movs	r0, r5
 800416c:	b00d      	add	sp, #52	; 0x34
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004170 <.text_3>:
 8004170:	00008001 	.word	0x00008001

08004174 <.text_4>:
 8004174:	0000983f 	.word	0x0000983f

08004178 <.text_5>:
 8004178:	0000801e 	.word	0x0000801e

0800417c <.text_6>:
 800417c:	0000802d 	.word	0x0000802d

08004180 <.text_7>:
 8004180:	00007fff 	.word	0x00007fff

08004184 <PE_SubStateMachine_VconnSwap>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	0004      	movs	r4, r0
 8004188:	2502      	movs	r5, #2
 800418a:	2703      	movs	r7, #3
 800418c:	4ea2      	ldr	r6, [pc, #648]	; (8004418 <.text_11>)
 800418e:	2014      	movs	r0, #20
 8004190:	7c62      	ldrb	r2, [r4, #17]
 8004192:	2a9d      	cmp	r2, #157	; 0x9d
 8004194:	d010      	beq.n	80041b8 <PE_SubStateMachine_VconnSwap+0x34>
 8004196:	d30e      	bcc.n	80041b6 <PE_SubStateMachine_VconnSwap+0x32>
 8004198:	2a9f      	cmp	r2, #159	; 0x9f
 800419a:	d057      	beq.n	800424c <PE_SubStateMachine_VconnSwap+0xc8>
 800419c:	d33d      	bcc.n	800421a <PE_SubStateMachine_VconnSwap+0x96>
 800419e:	2aa1      	cmp	r2, #161	; 0xa1
 80041a0:	d100      	bne.n	80041a4 <PE_SubStateMachine_VconnSwap+0x20>
 80041a2:	e085      	b.n	80042b0 <PE_SubStateMachine_VconnSwap+0x12c>
 80041a4:	d377      	bcc.n	8004296 <PE_SubStateMachine_VconnSwap+0x112>
 80041a6:	2aa3      	cmp	r2, #163	; 0xa3
 80041a8:	d100      	bne.n	80041ac <PE_SubStateMachine_VconnSwap+0x28>
 80041aa:	e0a3      	b.n	80042f4 <PE_SubStateMachine_VconnSwap+0x170>
 80041ac:	d200      	bcs.n	80041b0 <PE_SubStateMachine_VconnSwap+0x2c>
 80041ae:	e08e      	b.n	80042ce <PE_SubStateMachine_VconnSwap+0x14a>
 80041b0:	2aa4      	cmp	r2, #164	; 0xa4
 80041b2:	d100      	bne.n	80041b6 <PE_SubStateMachine_VconnSwap+0x32>
 80041b4:	e106      	b.n	80043c4 <PE_SubStateMachine_VconnSwap+0x240>
 80041b6:	e113      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 80041b8:	6860      	ldr	r0, [r4, #4]
 80041ba:	6800      	ldr	r0, [r0, #0]
 80041bc:	21b8      	movs	r1, #184	; 0xb8
 80041be:	0149      	lsls	r1, r1, #5
 80041c0:	4001      	ands	r1, r0
 80041c2:	2098      	movs	r0, #152	; 0x98
 80041c4:	0140      	lsls	r0, r0, #5
 80041c6:	4281      	cmp	r1, r0
 80041c8:	d121      	bne.n	800420e <PE_SubStateMachine_VconnSwap+0x8a>
 80041ca:	7c20      	ldrb	r0, [r4, #16]
 80041cc:	68a1      	ldr	r1, [r4, #8]
 80041ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80041d0:	4788      	blx	r1
 80041d2:	280a      	cmp	r0, #10
 80041d4:	d002      	beq.n	80041dc <PE_SubStateMachine_VconnSwap+0x58>
 80041d6:	280d      	cmp	r0, #13
 80041d8:	d007      	beq.n	80041ea <PE_SubStateMachine_VconnSwap+0x66>
 80041da:	e00f      	b.n	80041fc <PE_SubStateMachine_VconnSwap+0x78>
 80041dc:	209e      	movs	r0, #158	; 0x9e
 80041de:	7460      	strb	r0, [r4, #17]
 80041e0:	6960      	ldr	r0, [r4, #20]
 80041e2:	02e9      	lsls	r1, r5, #11
 80041e4:	4301      	orrs	r1, r0
 80041e6:	6161      	str	r1, [r4, #20]
 80041e8:	e0fa      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 80041ea:	2000      	movs	r0, #0
 80041ec:	9000      	str	r0, [sp, #0]
 80041ee:	2303      	movs	r3, #3
 80041f0:	220c      	movs	r2, #12
 80041f2:	2100      	movs	r1, #0
 80041f4:	0020      	movs	r0, r4
 80041f6:	f7fd fb13 	bl	8001820 <PE_Send_CtrlMessage>
 80041fa:	e0f1      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 80041fc:	2000      	movs	r0, #0
 80041fe:	9000      	str	r0, [sp, #0]
 8004200:	2303      	movs	r3, #3
 8004202:	2204      	movs	r2, #4
 8004204:	2100      	movs	r1, #0
 8004206:	0020      	movs	r0, r4
 8004208:	f7fd fb0a 	bl	8001820 <PE_Send_CtrlMessage>
 800420c:	e002      	b.n	8004214 <PE_SubStateMachine_VconnSwap+0x90>
 800420e:	6960      	ldr	r0, [r4, #20]
 8004210:	4006      	ands	r6, r0
 8004212:	6166      	str	r6, [r4, #20]
 8004214:	7467      	strb	r7, [r4, #17]
 8004216:	2500      	movs	r5, #0
 8004218:	e0e2      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 800421a:	2000      	movs	r0, #0
 800421c:	9000      	str	r0, [sp, #0]
 800421e:	239e      	movs	r3, #158	; 0x9e
 8004220:	2203      	movs	r2, #3
 8004222:	2100      	movs	r1, #0
 8004224:	0020      	movs	r0, r4
 8004226:	f7fd fafb 	bl	8001820 <PE_Send_CtrlMessage>
 800422a:	2800      	cmp	r0, #0
 800422c:	d1f4      	bne.n	8004218 <PE_SubStateMachine_VconnSwap+0x94>
 800422e:	6860      	ldr	r0, [r4, #4]
 8004230:	6800      	ldr	r0, [r0, #0]
 8004232:	0401      	lsls	r1, r0, #16
 8004234:	0fc9      	lsrs	r1, r1, #31
 8004236:	d005      	beq.n	8004244 <PE_SubStateMachine_VconnSwap+0xc0>
 8004238:	209f      	movs	r0, #159	; 0x9f
 800423a:	7460      	strb	r0, [r4, #17]
 800423c:	4877      	ldr	r0, [pc, #476]	; (800441c <.text_12>)
 800423e:	83e0      	strh	r0, [r4, #30]
 8004240:	2596      	movs	r5, #150	; 0x96
 8004242:	e001      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0xc4>
 8004244:	20a0      	movs	r0, #160	; 0xa0
 8004246:	7460      	strb	r0, [r4, #17]
 8004248:	213f      	movs	r1, #63	; 0x3f
 800424a:	e0b7      	b.n	80043bc <PE_SubStateMachine_VconnSwap+0x238>
 800424c:	8be2      	ldrh	r2, [r4, #30]
 800424e:	03ab      	lsls	r3, r5, #14
 8004250:	429a      	cmp	r2, r3
 8004252:	d100      	bne.n	8004256 <PE_SubStateMachine_VconnSwap+0xd2>
 8004254:	e0ac      	b.n	80043b0 <PE_SubStateMachine_VconnSwap+0x22c>
 8004256:	780a      	ldrb	r2, [r1, #0]
 8004258:	2a11      	cmp	r2, #17
 800425a:	d11b      	bne.n	8004294 <PE_SubStateMachine_VconnSwap+0x110>
 800425c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800425e:	4b70      	ldr	r3, [pc, #448]	; (8004420 <.text_13>)
 8004260:	4013      	ands	r3, r2
 8004262:	2b06      	cmp	r3, #6
 8004264:	d116      	bne.n	8004294 <PE_SubStateMachine_VconnSwap+0x110>
 8004266:	7008      	strb	r0, [r1, #0]
 8004268:	0020      	movs	r0, r4
 800426a:	f7fc fcfc 	bl	8000c66 <PE_Clear_RxEvent>
 800426e:	68a0      	ldr	r0, [r4, #8]
 8004270:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004272:	2a00      	cmp	r2, #0
 8004274:	d002      	beq.n	800427c <PE_SubStateMachine_VconnSwap+0xf8>
 8004276:	2100      	movs	r1, #0
 8004278:	7c20      	ldrb	r0, [r4, #16]
 800427a:	4790      	blx	r2
 800427c:	6960      	ldr	r0, [r4, #20]
 800427e:	4006      	ands	r6, r0
 8004280:	6166      	str	r6, [r4, #20]
 8004282:	7467      	strb	r7, [r4, #17]
 8004284:	2500      	movs	r5, #0
 8004286:	2142      	movs	r1, #66	; 0x42
 8004288:	7c20      	ldrb	r0, [r4, #16]
 800428a:	f7fc fa81 	bl	8000790 <USBPD_PE_Notification>
 800428e:	8465      	strh	r5, [r4, #34]	; 0x22
 8004290:	4964      	ldr	r1, [pc, #400]	; (8004424 <.text_14>)
 8004292:	5465      	strb	r5, [r4, r1]
 8004294:	e0a4      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 8004296:	68a0      	ldr	r0, [r4, #8]
 8004298:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800429a:	2a00      	cmp	r2, #0
 800429c:	d002      	beq.n	80042a4 <PE_SubStateMachine_VconnSwap+0x120>
 800429e:	2101      	movs	r1, #1
 80042a0:	7c20      	ldrb	r0, [r4, #16]
 80042a2:	4790      	blx	r2
 80042a4:	20a1      	movs	r0, #161	; 0xa1
 80042a6:	7460      	strb	r0, [r4, #17]
 80042a8:	2000      	movs	r0, #0
 80042aa:	495e      	ldr	r1, [pc, #376]	; (8004424 <.text_14>)
 80042ac:	5460      	strb	r0, [r4, r1]
 80042ae:	e097      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 80042b0:	2000      	movs	r0, #0
 80042b2:	9000      	str	r0, [sp, #0]
 80042b4:	2303      	movs	r3, #3
 80042b6:	2206      	movs	r2, #6
 80042b8:	2100      	movs	r1, #0
 80042ba:	0020      	movs	r0, r4
 80042bc:	f7fd fab0 	bl	8001820 <PE_Send_CtrlMessage>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d1f4      	bne.n	80042ae <PE_SubStateMachine_VconnSwap+0x12a>
 80042c4:	6960      	ldr	r0, [r4, #20]
 80042c6:	4006      	ands	r6, r0
 80042c8:	6166      	str	r6, [r4, #20]
 80042ca:	2142      	movs	r1, #66	; 0x42
 80042cc:	e076      	b.n	80043bc <PE_SubStateMachine_VconnSwap+0x238>
 80042ce:	2000      	movs	r0, #0
 80042d0:	9000      	str	r0, [sp, #0]
 80042d2:	23a3      	movs	r3, #163	; 0xa3
 80042d4:	220b      	movs	r2, #11
 80042d6:	2100      	movs	r1, #0
 80042d8:	0020      	movs	r0, r4
 80042da:	f7fd faa1 	bl	8001820 <PE_Send_CtrlMessage>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d1e5      	bne.n	80042ae <PE_SubStateMachine_VconnSwap+0x12a>
 80042e2:	6960      	ldr	r0, [r4, #20]
 80042e4:	02e9      	lsls	r1, r5, #11
 80042e6:	4301      	orrs	r1, r0
 80042e8:	6161      	str	r1, [r4, #20]
 80042ea:	484f      	ldr	r0, [pc, #316]	; (8004428 <.text_15>)
 80042ec:	83e0      	strh	r0, [r4, #30]
 80042ee:	251b      	movs	r5, #27
 80042f0:	213e      	movs	r1, #62	; 0x3e
 80042f2:	e063      	b.n	80043bc <PE_SubStateMachine_VconnSwap+0x238>
 80042f4:	780a      	ldrb	r2, [r1, #0]
 80042f6:	2a11      	cmp	r2, #17
 80042f8:	d155      	bne.n	80043a6 <PE_SubStateMachine_VconnSwap+0x222>
 80042fa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80042fc:	23f0      	movs	r3, #240	; 0xf0
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	4013      	ands	r3, r2
 8004302:	d150      	bne.n	80043a6 <PE_SubStateMachine_VconnSwap+0x222>
 8004304:	06d2      	lsls	r2, r2, #27
 8004306:	0ed2      	lsrs	r2, r2, #27
 8004308:	2a03      	cmp	r2, #3
 800430a:	d006      	beq.n	800431a <PE_SubStateMachine_VconnSwap+0x196>
 800430c:	2a04      	cmp	r2, #4
 800430e:	d024      	beq.n	800435a <PE_SubStateMachine_VconnSwap+0x1d6>
 8004310:	2a0c      	cmp	r2, #12
 8004312:	d014      	beq.n	800433e <PE_SubStateMachine_VconnSwap+0x1ba>
 8004314:	2a10      	cmp	r2, #16
 8004316:	d02e      	beq.n	8004376 <PE_SubStateMachine_VconnSwap+0x1f2>
 8004318:	e045      	b.n	80043a6 <PE_SubStateMachine_VconnSwap+0x222>
 800431a:	6862      	ldr	r2, [r4, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	0413      	lsls	r3, r2, #16
 8004320:	0fdb      	lsrs	r3, r3, #31
 8004322:	d001      	beq.n	8004328 <PE_SubStateMachine_VconnSwap+0x1a4>
 8004324:	229f      	movs	r2, #159	; 0x9f
 8004326:	e000      	b.n	800432a <PE_SubStateMachine_VconnSwap+0x1a6>
 8004328:	22a0      	movs	r2, #160	; 0xa0
 800432a:	7462      	strb	r2, [r4, #17]
 800432c:	780a      	ldrb	r2, [r1, #0]
 800432e:	2a14      	cmp	r2, #20
 8004330:	d003      	beq.n	800433a <PE_SubStateMachine_VconnSwap+0x1b6>
 8004332:	7008      	strb	r0, [r1, #0]
 8004334:	0020      	movs	r0, r4
 8004336:	f7fc fc96 	bl	8000c66 <PE_Clear_RxEvent>
 800433a:	213f      	movs	r1, #63	; 0x3f
 800433c:	e030      	b.n	80043a0 <PE_SubStateMachine_VconnSwap+0x21c>
 800433e:	6962      	ldr	r2, [r4, #20]
 8004340:	4032      	ands	r2, r6
 8004342:	6162      	str	r2, [r4, #20]
 8004344:	7467      	strb	r7, [r4, #17]
 8004346:	2500      	movs	r5, #0
 8004348:	780a      	ldrb	r2, [r1, #0]
 800434a:	2a14      	cmp	r2, #20
 800434c:	d003      	beq.n	8004356 <PE_SubStateMachine_VconnSwap+0x1d2>
 800434e:	7008      	strb	r0, [r1, #0]
 8004350:	0020      	movs	r0, r4
 8004352:	f7fc fc88 	bl	8000c66 <PE_Clear_RxEvent>
 8004356:	2140      	movs	r1, #64	; 0x40
 8004358:	e022      	b.n	80043a0 <PE_SubStateMachine_VconnSwap+0x21c>
 800435a:	6962      	ldr	r2, [r4, #20]
 800435c:	4032      	ands	r2, r6
 800435e:	6162      	str	r2, [r4, #20]
 8004360:	7467      	strb	r7, [r4, #17]
 8004362:	2500      	movs	r5, #0
 8004364:	780a      	ldrb	r2, [r1, #0]
 8004366:	2a14      	cmp	r2, #20
 8004368:	d003      	beq.n	8004372 <PE_SubStateMachine_VconnSwap+0x1ee>
 800436a:	7008      	strb	r0, [r1, #0]
 800436c:	0020      	movs	r0, r4
 800436e:	f7fc fc7a 	bl	8000c66 <PE_Clear_RxEvent>
 8004372:	2141      	movs	r1, #65	; 0x41
 8004374:	e014      	b.n	80043a0 <PE_SubStateMachine_VconnSwap+0x21c>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	0413      	lsls	r3, r2, #16
 800437c:	0fdb      	lsrs	r3, r3, #31
 800437e:	d102      	bne.n	8004386 <PE_SubStateMachine_VconnSwap+0x202>
 8004380:	22a4      	movs	r2, #164	; 0xa4
 8004382:	7462      	strb	r2, [r4, #17]
 8004384:	e004      	b.n	8004390 <PE_SubStateMachine_VconnSwap+0x20c>
 8004386:	6962      	ldr	r2, [r4, #20]
 8004388:	4032      	ands	r2, r6
 800438a:	6162      	str	r2, [r4, #20]
 800438c:	7467      	strb	r7, [r4, #17]
 800438e:	2500      	movs	r5, #0
 8004390:	780a      	ldrb	r2, [r1, #0]
 8004392:	2a14      	cmp	r2, #20
 8004394:	d003      	beq.n	800439e <PE_SubStateMachine_VconnSwap+0x21a>
 8004396:	7008      	strb	r0, [r1, #0]
 8004398:	0020      	movs	r0, r4
 800439a:	f7fc fc64 	bl	8000c66 <PE_Clear_RxEvent>
 800439e:	2143      	movs	r1, #67	; 0x43
 80043a0:	7c20      	ldrb	r0, [r4, #16]
 80043a2:	f7fc f9f5 	bl	8000790 <USBPD_PE_Notification>
 80043a6:	8be0      	ldrh	r0, [r4, #30]
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	0209      	lsls	r1, r1, #8
 80043ac:	4288      	cmp	r0, r1
 80043ae:	d117      	bne.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 80043b0:	6960      	ldr	r0, [r4, #20]
 80043b2:	4006      	ands	r6, r0
 80043b4:	6166      	str	r6, [r4, #20]
 80043b6:	7467      	strb	r7, [r4, #17]
 80043b8:	2500      	movs	r5, #0
 80043ba:	211c      	movs	r1, #28
 80043bc:	7c20      	ldrb	r0, [r4, #16]
 80043be:	f7fc f9e7 	bl	8000790 <USBPD_PE_Notification>
 80043c2:	e00d      	b.n	80043e0 <PE_SubStateMachine_VconnSwap+0x25c>
 80043c4:	68a0      	ldr	r0, [r4, #8]
 80043c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	d002      	beq.n	80043d2 <PE_SubStateMachine_VconnSwap+0x24e>
 80043cc:	2101      	movs	r1, #1
 80043ce:	7c20      	ldrb	r0, [r4, #16]
 80043d0:	4790      	blx	r2
 80043d2:	6960      	ldr	r0, [r4, #20]
 80043d4:	4006      	ands	r6, r0
 80043d6:	6166      	str	r6, [r4, #20]
 80043d8:	7467      	strb	r7, [r4, #17]
 80043da:	2500      	movs	r5, #0
 80043dc:	4813      	ldr	r0, [pc, #76]	; (800442c <.text_16>)
 80043de:	8460      	strh	r0, [r4, #34]	; 0x22
 80043e0:	0028      	movs	r0, r5
 80043e2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080043e4 <PE_ExtRevisionInteroperability_Cable>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	000a      	movs	r2, r1
 80043e8:	6843      	ldr	r3, [r0, #4]
 80043ea:	681c      	ldr	r4, [r3, #0]
 80043ec:	2103      	movs	r1, #3
 80043ee:	2503      	movs	r5, #3
 80043f0:	4025      	ands	r5, r4
 80043f2:	42aa      	cmp	r2, r5
 80043f4:	d300      	bcc.n	80043f8 <PE_ExtRevisionInteroperability_Cable+0x14>
 80043f6:	002a      	movs	r2, r5
 80043f8:	4d06      	ldr	r5, [pc, #24]	; (8004414 <.text_10>)
 80043fa:	4025      	ands	r5, r4
 80043fc:	0694      	lsls	r4, r2, #26
 80043fe:	068a      	lsls	r2, r1, #26
 8004400:	4022      	ands	r2, r4
 8004402:	432a      	orrs	r2, r5
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	0e92      	lsrs	r2, r2, #26
 8004408:	4011      	ands	r1, r2
 800440a:	7c00      	ldrb	r0, [r0, #16]
 800440c:	f001 fb85 	bl	8005b1a <USBPD_PRL_CBL_SetHeaderSpecification>
 8004410:	bd31      	pop	{r0, r4, r5, pc}
	...

08004414 <.text_10>:
 8004414:	f3ffffff 	.word	0xf3ffffff

08004418 <.text_11>:
 8004418:	ffffefff 	.word	0xffffefff

0800441c <.text_12>:
 800441c:	00008096 	.word	0x00008096

08004420 <.text_13>:
 8004420:	0000f01f 	.word	0x0000f01f

08004424 <.text_14>:
 8004424:	00000262 	.word	0x00000262

08004428 <.text_15>:
 8004428:	0000801b 	.word	0x0000801b

0800442c <.text_16>:
 800442c:	0000802d 	.word	0x0000802d

08004430 <USBPD_PE_SVDM_RequestIdentity>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	000a      	movs	r2, r1
 8004434:	49aa      	ldr	r1, [pc, #680]	; (80046e0 <.text_8>)
 8004436:	0083      	lsls	r3, r0, #2
 8004438:	58cb      	ldr	r3, [r1, r3]
 800443a:	2110      	movs	r1, #16
 800443c:	2401      	movs	r4, #1
 800443e:	681d      	ldr	r5, [r3, #0]
 8004440:	686d      	ldr	r5, [r5, #4]
 8004442:	0a6d      	lsrs	r5, r5, #9
 8004444:	4025      	ands	r5, r4
 8004446:	d004      	beq.n	8004452 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004448:	68dd      	ldr	r5, [r3, #12]
 800444a:	2d00      	cmp	r5, #0
 800444c:	d001      	beq.n	8004452 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800444e:	2a02      	cmp	r2, #2
 8004450:	d101      	bne.n	8004456 <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004452:	2102      	movs	r1, #2
 8004454:	e02d      	b.n	80044b2 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004456:	2532      	movs	r5, #50	; 0x32
 8004458:	5d5d      	ldrb	r5, [r3, r5]
 800445a:	2d00      	cmp	r5, #0
 800445c:	d104      	bne.n	8004468 <USBPD_PE_SVDM_RequestIdentity+0x38>
 800445e:	685d      	ldr	r5, [r3, #4]
 8004460:	682d      	ldr	r5, [r5, #0]
 8004462:	0b2d      	lsrs	r5, r5, #12
 8004464:	402c      	ands	r4, r5
 8004466:	d101      	bne.n	800446c <USBPD_PE_SVDM_RequestIdentity+0x3c>
 8004468:	2103      	movs	r1, #3
 800446a:	e022      	b.n	80044b2 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800446c:	2433      	movs	r4, #51	; 0x33
 800446e:	551a      	strb	r2, [r3, r4]
 8004470:	2507      	movs	r5, #7
 8004472:	2a00      	cmp	r2, #0
 8004474:	d002      	beq.n	800447c <USBPD_PE_SVDM_RequestIdentity+0x4c>
 8004476:	2a01      	cmp	r2, #1
 8004478:	d008      	beq.n	800448c <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800447a:	e01a      	b.n	80044b2 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	0a12      	lsrs	r2, r2, #8
 8004482:	4015      	ands	r5, r2
 8004484:	2d03      	cmp	r5, #3
 8004486:	d114      	bne.n	80044b2 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004488:	217d      	movs	r1, #125	; 0x7d
 800448a:	e00c      	b.n	80044a6 <USBPD_PE_SVDM_RequestIdentity+0x76>
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	4eab      	ldr	r6, [pc, #684]	; (8004740 <.text_10>)
 8004492:	4016      	ands	r6, r2
 8004494:	2782      	movs	r7, #130	; 0x82
 8004496:	007f      	lsls	r7, r7, #1
 8004498:	42be      	cmp	r6, r7
 800449a:	d003      	beq.n	80044a4 <USBPD_PE_SVDM_RequestIdentity+0x74>
 800449c:	0a12      	lsrs	r2, r2, #8
 800449e:	4015      	ands	r5, r2
 80044a0:	2d03      	cmp	r5, #3
 80044a2:	d106      	bne.n	80044b2 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80044a4:	2105      	movs	r1, #5
 80044a6:	2232      	movs	r2, #50	; 0x32
 80044a8:	5499      	strb	r1, [r3, r2]
 80044aa:	6899      	ldr	r1, [r3, #8]
 80044ac:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80044ae:	4788      	blx	r1
 80044b0:	2100      	movs	r1, #0
 80044b2:	0008      	movs	r0, r1
 80044b4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080044b6 <USBPD_PE_SVDM_RequestSVID>:
 80044b6:	b570      	push	{r4, r5, r6, lr}
 80044b8:	000a      	movs	r2, r1
 80044ba:	4989      	ldr	r1, [pc, #548]	; (80046e0 <.text_8>)
 80044bc:	0083      	lsls	r3, r0, #2
 80044be:	58cb      	ldr	r3, [r1, r3]
 80044c0:	2110      	movs	r1, #16
 80044c2:	68dc      	ldr	r4, [r3, #12]
 80044c4:	2c00      	cmp	r4, #0
 80044c6:	d001      	beq.n	80044cc <USBPD_PE_SVDM_RequestSVID+0x16>
 80044c8:	2a02      	cmp	r2, #2
 80044ca:	d101      	bne.n	80044d0 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80044cc:	2102      	movs	r1, #2
 80044ce:	e020      	b.n	8004512 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80044d0:	2432      	movs	r4, #50	; 0x32
 80044d2:	5d1c      	ldrb	r4, [r3, r4]
 80044d4:	2c00      	cmp	r4, #0
 80044d6:	d105      	bne.n	80044e4 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80044d8:	685c      	ldr	r4, [r3, #4]
 80044da:	6825      	ldr	r5, [r4, #0]
 80044dc:	2401      	movs	r4, #1
 80044de:	0b2e      	lsrs	r6, r5, #12
 80044e0:	4026      	ands	r6, r4
 80044e2:	d101      	bne.n	80044e8 <USBPD_PE_SVDM_RequestSVID+0x32>
 80044e4:	2103      	movs	r1, #3
 80044e6:	e014      	b.n	8004512 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80044e8:	056d      	lsls	r5, r5, #21
 80044ea:	0f6d      	lsrs	r5, r5, #29
 80044ec:	2d03      	cmp	r5, #3
 80044ee:	d110      	bne.n	8004512 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80044f0:	2533      	movs	r5, #51	; 0x33
 80044f2:	555a      	strb	r2, [r3, r5]
 80044f4:	257f      	movs	r5, #127	; 0x7f
 80044f6:	2632      	movs	r6, #50	; 0x32
 80044f8:	559d      	strb	r5, [r3, r6]
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	d005      	beq.n	800450a <USBPD_PE_SVDM_RequestSVID+0x54>
 80044fe:	2a01      	cmp	r2, #1
 8004500:	d107      	bne.n	8004512 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	0c12      	lsrs	r2, r2, #16
 8004506:	4014      	ands	r4, r2
 8004508:	d003      	beq.n	8004512 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800450e:	4788      	blx	r1
 8004510:	2100      	movs	r1, #0
 8004512:	0008      	movs	r0, r1
 8004514:	bd70      	pop	{r4, r5, r6, pc}

08004516 <USBPD_PE_SVDM_RequestMode>:
 8004516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004518:	000b      	movs	r3, r1
 800451a:	4971      	ldr	r1, [pc, #452]	; (80046e0 <.text_8>)
 800451c:	0084      	lsls	r4, r0, #2
 800451e:	590c      	ldr	r4, [r1, r4]
 8004520:	2110      	movs	r1, #16
 8004522:	68e5      	ldr	r5, [r4, #12]
 8004524:	2d00      	cmp	r5, #0
 8004526:	d001      	beq.n	800452c <USBPD_PE_SVDM_RequestMode+0x16>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d101      	bne.n	8004530 <USBPD_PE_SVDM_RequestMode+0x1a>
 800452c:	2102      	movs	r1, #2
 800452e:	e023      	b.n	8004578 <USBPD_PE_SVDM_RequestMode+0x62>
 8004530:	2532      	movs	r5, #50	; 0x32
 8004532:	5d65      	ldrb	r5, [r4, r5]
 8004534:	2d00      	cmp	r5, #0
 8004536:	d105      	bne.n	8004544 <USBPD_PE_SVDM_RequestMode+0x2e>
 8004538:	6865      	ldr	r5, [r4, #4]
 800453a:	682e      	ldr	r6, [r5, #0]
 800453c:	2501      	movs	r5, #1
 800453e:	0b37      	lsrs	r7, r6, #12
 8004540:	402f      	ands	r7, r5
 8004542:	d101      	bne.n	8004548 <USBPD_PE_SVDM_RequestMode+0x32>
 8004544:	2103      	movs	r1, #3
 8004546:	e017      	b.n	8004578 <USBPD_PE_SVDM_RequestMode+0x62>
 8004548:	0576      	lsls	r6, r6, #21
 800454a:	0f76      	lsrs	r6, r6, #29
 800454c:	2e03      	cmp	r6, #3
 800454e:	d113      	bne.n	8004578 <USBPD_PE_SVDM_RequestMode+0x62>
 8004550:	2633      	movs	r6, #51	; 0x33
 8004552:	55a3      	strb	r3, [r4, r6]
 8004554:	2681      	movs	r6, #129	; 0x81
 8004556:	2732      	movs	r7, #50	; 0x32
 8004558:	55e6      	strb	r6, [r4, r7]
 800455a:	2696      	movs	r6, #150	; 0x96
 800455c:	00b6      	lsls	r6, r6, #2
 800455e:	53a2      	strh	r2, [r4, r6]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <USBPD_PE_SVDM_RequestMode+0x62>
 8004568:	6962      	ldr	r2, [r4, #20]
 800456a:	0c12      	lsrs	r2, r2, #16
 800456c:	4015      	ands	r5, r2
 800456e:	d003      	beq.n	8004578 <USBPD_PE_SVDM_RequestMode+0x62>
 8004570:	68a1      	ldr	r1, [r4, #8]
 8004572:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004574:	4788      	blx	r1
 8004576:	2100      	movs	r1, #0
 8004578:	0008      	movs	r0, r1
 800457a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800457c <USBPD_PE_SVDM_RequestModeEnter>:
 800457c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800457e:	4858      	ldr	r0, [pc, #352]	; (80046e0 <.text_8>)
 8004580:	466c      	mov	r4, sp
 8004582:	7824      	ldrb	r4, [r4, #0]
 8004584:	00a4      	lsls	r4, r4, #2
 8004586:	5904      	ldr	r4, [r0, r4]
 8004588:	2010      	movs	r0, #16
 800458a:	68e5      	ldr	r5, [r4, #12]
 800458c:	2d00      	cmp	r5, #0
 800458e:	d101      	bne.n	8004594 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 8004590:	2002      	movs	r0, #2
 8004592:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004594:	2532      	movs	r5, #50	; 0x32
 8004596:	5d65      	ldrb	r5, [r4, r5]
 8004598:	2d00      	cmp	r5, #0
 800459a:	d105      	bne.n	80045a8 <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 800459c:	6865      	ldr	r5, [r4, #4]
 800459e:	682e      	ldr	r6, [r5, #0]
 80045a0:	2501      	movs	r5, #1
 80045a2:	0b37      	lsrs	r7, r6, #12
 80045a4:	402f      	ands	r7, r5
 80045a6:	d101      	bne.n	80045ac <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80045a8:	2003      	movs	r0, #3
 80045aa:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80045ac:	27e1      	movs	r7, #225	; 0xe1
 80045ae:	00ff      	lsls	r7, r7, #3
 80045b0:	4037      	ands	r7, r6
 80045b2:	26c2      	movs	r6, #194	; 0xc2
 80045b4:	00b6      	lsls	r6, r6, #2
 80045b6:	42b7      	cmp	r7, r6
 80045b8:	d11e      	bne.n	80045f8 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80045ba:	2633      	movs	r6, #51	; 0x33
 80045bc:	55a1      	strb	r1, [r4, r6]
 80045be:	2682      	movs	r6, #130	; 0x82
 80045c0:	2732      	movs	r7, #50	; 0x32
 80045c2:	55e6      	strb	r6, [r4, r7]
 80045c4:	2696      	movs	r6, #150	; 0x96
 80045c6:	00b6      	lsls	r6, r6, #2
 80045c8:	53a2      	strh	r2, [r4, r6]
 80045ca:	6966      	ldr	r6, [r4, #20]
 80045cc:	4aaf      	ldr	r2, [pc, #700]	; (800488c <.text_13>)
 80045ce:	4032      	ands	r2, r6
 80045d0:	019e      	lsls	r6, r3, #6
 80045d2:	23e0      	movs	r3, #224	; 0xe0
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4033      	ands	r3, r6
 80045d8:	4313      	orrs	r3, r2
 80045da:	6163      	str	r3, [r4, #20]
 80045dc:	2900      	cmp	r1, #0
 80045de:	d005      	beq.n	80045ec <USBPD_PE_SVDM_RequestModeEnter+0x70>
 80045e0:	2902      	cmp	r1, #2
 80045e2:	d000      	beq.n	80045e6 <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 80045e4:	d208      	bcs.n	80045f8 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80045e6:	0c19      	lsrs	r1, r3, #16
 80045e8:	400d      	ands	r5, r1
 80045ea:	d005      	beq.n	80045f8 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80045ec:	4668      	mov	r0, sp
 80045ee:	7800      	ldrb	r0, [r0, #0]
 80045f0:	68a1      	ldr	r1, [r4, #8]
 80045f2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80045f4:	4788      	blx	r1
 80045f6:	2000      	movs	r0, #0
 80045f8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080045fa <USBPD_PE_SVDM_RequestModeExit>:
 80045fa:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80045fc:	4838      	ldr	r0, [pc, #224]	; (80046e0 <.text_8>)
 80045fe:	466c      	mov	r4, sp
 8004600:	7824      	ldrb	r4, [r4, #0]
 8004602:	00a4      	lsls	r4, r4, #2
 8004604:	5904      	ldr	r4, [r0, r4]
 8004606:	2010      	movs	r0, #16
 8004608:	68e5      	ldr	r5, [r4, #12]
 800460a:	2d00      	cmp	r5, #0
 800460c:	d101      	bne.n	8004612 <USBPD_PE_SVDM_RequestModeExit+0x18>
 800460e:	2002      	movs	r0, #2
 8004610:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004612:	2532      	movs	r5, #50	; 0x32
 8004614:	5d65      	ldrb	r5, [r4, r5]
 8004616:	2d00      	cmp	r5, #0
 8004618:	d105      	bne.n	8004626 <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800461a:	6865      	ldr	r5, [r4, #4]
 800461c:	682e      	ldr	r6, [r5, #0]
 800461e:	2501      	movs	r5, #1
 8004620:	0b37      	lsrs	r7, r6, #12
 8004622:	402f      	ands	r7, r5
 8004624:	d101      	bne.n	800462a <USBPD_PE_SVDM_RequestModeExit+0x30>
 8004626:	2003      	movs	r0, #3
 8004628:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800462a:	27e1      	movs	r7, #225	; 0xe1
 800462c:	00ff      	lsls	r7, r7, #3
 800462e:	4037      	ands	r7, r6
 8004630:	26c2      	movs	r6, #194	; 0xc2
 8004632:	00b6      	lsls	r6, r6, #2
 8004634:	42b7      	cmp	r7, r6
 8004636:	d11e      	bne.n	8004676 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004638:	2633      	movs	r6, #51	; 0x33
 800463a:	55a1      	strb	r1, [r4, r6]
 800463c:	2683      	movs	r6, #131	; 0x83
 800463e:	2732      	movs	r7, #50	; 0x32
 8004640:	55e6      	strb	r6, [r4, r7]
 8004642:	2696      	movs	r6, #150	; 0x96
 8004644:	00b6      	lsls	r6, r6, #2
 8004646:	53a2      	strh	r2, [r4, r6]
 8004648:	6966      	ldr	r6, [r4, #20]
 800464a:	4a90      	ldr	r2, [pc, #576]	; (800488c <.text_13>)
 800464c:	4032      	ands	r2, r6
 800464e:	019e      	lsls	r6, r3, #6
 8004650:	23e0      	movs	r3, #224	; 0xe0
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4033      	ands	r3, r6
 8004656:	4313      	orrs	r3, r2
 8004658:	6163      	str	r3, [r4, #20]
 800465a:	2900      	cmp	r1, #0
 800465c:	d005      	beq.n	800466a <USBPD_PE_SVDM_RequestModeExit+0x70>
 800465e:	2902      	cmp	r1, #2
 8004660:	d000      	beq.n	8004664 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004662:	d208      	bcs.n	8004676 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004664:	0c19      	lsrs	r1, r3, #16
 8004666:	400d      	ands	r5, r1
 8004668:	d005      	beq.n	8004676 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800466a:	4668      	mov	r0, sp
 800466c:	7800      	ldrb	r0, [r0, #0]
 800466e:	68a1      	ldr	r1, [r4, #8]
 8004670:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004672:	4788      	blx	r1
 8004674:	2000      	movs	r0, #0
 8004676:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004678 <USBPD_PE_SVDM_RequestSpecific>:
 8004678:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800467a:	4819      	ldr	r0, [pc, #100]	; (80046e0 <.text_8>)
 800467c:	466c      	mov	r4, sp
 800467e:	7824      	ldrb	r4, [r4, #0]
 8004680:	00a4      	lsls	r4, r4, #2
 8004682:	5904      	ldr	r4, [r0, r4]
 8004684:	2010      	movs	r0, #16
 8004686:	68e5      	ldr	r5, [r4, #12]
 8004688:	2d00      	cmp	r5, #0
 800468a:	d101      	bne.n	8004690 <USBPD_PE_SVDM_RequestSpecific+0x18>
 800468c:	2002      	movs	r0, #2
 800468e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004690:	2532      	movs	r5, #50	; 0x32
 8004692:	5d65      	ldrb	r5, [r4, r5]
 8004694:	2d00      	cmp	r5, #0
 8004696:	d105      	bne.n	80046a4 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 8004698:	6865      	ldr	r5, [r4, #4]
 800469a:	682d      	ldr	r5, [r5, #0]
 800469c:	2601      	movs	r6, #1
 800469e:	0b2f      	lsrs	r7, r5, #12
 80046a0:	4037      	ands	r7, r6
 80046a2:	d101      	bne.n	80046a8 <USBPD_PE_SVDM_RequestSpecific+0x30>
 80046a4:	2003      	movs	r0, #3
 80046a6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80046a8:	6967      	ldr	r7, [r4, #20]
 80046aa:	0c3f      	lsrs	r7, r7, #16
 80046ac:	403e      	ands	r6, r7
 80046ae:	d101      	bne.n	80046b4 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80046b0:	000e      	movs	r6, r1
 80046b2:	d113      	bne.n	80046dc <USBPD_PE_SVDM_RequestSpecific+0x64>
 80046b4:	056d      	lsls	r5, r5, #21
 80046b6:	0f6d      	lsrs	r5, r5, #29
 80046b8:	2d03      	cmp	r5, #3
 80046ba:	d10f      	bne.n	80046dc <USBPD_PE_SVDM_RequestSpecific+0x64>
 80046bc:	2033      	movs	r0, #51	; 0x33
 80046be:	5421      	strb	r1, [r4, r0]
 80046c0:	2085      	movs	r0, #133	; 0x85
 80046c2:	2132      	movs	r1, #50	; 0x32
 80046c4:	5460      	strb	r0, [r4, r1]
 80046c6:	2095      	movs	r0, #149	; 0x95
 80046c8:	0080      	lsls	r0, r0, #2
 80046ca:	1820      	adds	r0, r4, r0
 80046cc:	6002      	str	r2, [r0, #0]
 80046ce:	8083      	strh	r3, [r0, #4]
 80046d0:	4668      	mov	r0, sp
 80046d2:	7800      	ldrb	r0, [r0, #0]
 80046d4:	68a1      	ldr	r1, [r4, #8]
 80046d6:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80046d8:	4788      	blx	r1
 80046da:	2000      	movs	r0, #0
 80046dc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

080046e0 <.text_8>:
 80046e0:	20000178 	.word	0x20000178

080046e4 <USBPD_PE_SVDM_RequestAttention>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	000b      	movs	r3, r1
 80046e8:	4969      	ldr	r1, [pc, #420]	; (8004890 <.text_14>)
 80046ea:	0084      	lsls	r4, r0, #2
 80046ec:	590d      	ldr	r5, [r1, r4]
 80046ee:	2110      	movs	r1, #16
 80046f0:	68ec      	ldr	r4, [r5, #12]
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d001      	beq.n	80046fa <USBPD_PE_SVDM_RequestAttention+0x16>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <USBPD_PE_SVDM_RequestAttention+0x1a>
 80046fa:	2102      	movs	r1, #2
 80046fc:	e01e      	b.n	800473c <USBPD_PE_SVDM_RequestAttention+0x58>
 80046fe:	2332      	movs	r3, #50	; 0x32
 8004700:	5ceb      	ldrb	r3, [r5, r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <USBPD_PE_SVDM_RequestAttention+0x2c>
 8004706:	686b      	ldr	r3, [r5, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	04dc      	lsls	r4, r3, #19
 800470c:	0fe4      	lsrs	r4, r4, #31
 800470e:	d101      	bne.n	8004714 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004710:	2103      	movs	r1, #3
 8004712:	e013      	b.n	800473c <USBPD_PE_SVDM_RequestAttention+0x58>
 8004714:	055b      	lsls	r3, r3, #21
 8004716:	0f5b      	lsrs	r3, r3, #29
 8004718:	2b03      	cmp	r3, #3
 800471a:	d10f      	bne.n	800473c <USBPD_PE_SVDM_RequestAttention+0x58>
 800471c:	2400      	movs	r4, #0
 800471e:	2333      	movs	r3, #51	; 0x33
 8004720:	54ec      	strb	r4, [r5, r3]
 8004722:	2184      	movs	r1, #132	; 0x84
 8004724:	2332      	movs	r3, #50	; 0x32
 8004726:	54e9      	strb	r1, [r5, r3]
 8004728:	2195      	movs	r1, #149	; 0x95
 800472a:	0089      	lsls	r1, r1, #2
 800472c:	1869      	adds	r1, r5, r1
 800472e:	2306      	movs	r3, #6
 8004730:	600b      	str	r3, [r1, #0]
 8004732:	808a      	strh	r2, [r1, #4]
 8004734:	68a9      	ldr	r1, [r5, #8]
 8004736:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004738:	4788      	blx	r1
 800473a:	2100      	movs	r1, #0
 800473c:	0008      	movs	r0, r1
 800473e:	bd32      	pop	{r1, r4, r5, pc}

08004740 <.text_10>:
 8004740:	00000704 	.word	0x00000704

08004744 <USBPD_PE_UVDM_RequestMessage>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	000a      	movs	r2, r1
 8004748:	4951      	ldr	r1, [pc, #324]	; (8004890 <.text_14>)
 800474a:	0083      	lsls	r3, r0, #2
 800474c:	58cb      	ldr	r3, [r1, r3]
 800474e:	2110      	movs	r1, #16
 8004750:	68dc      	ldr	r4, [r3, #12]
 8004752:	2c00      	cmp	r4, #0
 8004754:	d101      	bne.n	800475a <USBPD_PE_UVDM_RequestMessage+0x16>
 8004756:	2102      	movs	r1, #2
 8004758:	e01d      	b.n	8004796 <USBPD_PE_UVDM_RequestMessage+0x52>
 800475a:	2432      	movs	r4, #50	; 0x32
 800475c:	5d1c      	ldrb	r4, [r3, r4]
 800475e:	2c00      	cmp	r4, #0
 8004760:	d105      	bne.n	800476e <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004762:	685c      	ldr	r4, [r3, #4]
 8004764:	6824      	ldr	r4, [r4, #0]
 8004766:	2501      	movs	r5, #1
 8004768:	0b26      	lsrs	r6, r4, #12
 800476a:	402e      	ands	r6, r5
 800476c:	d101      	bne.n	8004772 <USBPD_PE_UVDM_RequestMessage+0x2e>
 800476e:	2103      	movs	r1, #3
 8004770:	e011      	b.n	8004796 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004772:	0be6      	lsrs	r6, r4, #15
 8004774:	4035      	ands	r5, r6
 8004776:	d101      	bne.n	800477c <USBPD_PE_UVDM_RequestMessage+0x38>
 8004778:	0015      	movs	r5, r2
 800477a:	d10c      	bne.n	8004796 <USBPD_PE_UVDM_RequestMessage+0x52>
 800477c:	0564      	lsls	r4, r4, #21
 800477e:	0f64      	lsrs	r4, r4, #29
 8004780:	2c03      	cmp	r4, #3
 8004782:	d108      	bne.n	8004796 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004784:	2133      	movs	r1, #51	; 0x33
 8004786:	545a      	strb	r2, [r3, r1]
 8004788:	2186      	movs	r1, #134	; 0x86
 800478a:	2232      	movs	r2, #50	; 0x32
 800478c:	5499      	strb	r1, [r3, r2]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004792:	4788      	blx	r1
 8004794:	2100      	movs	r1, #0
 8004796:	0008      	movs	r0, r1
 8004798:	bd70      	pop	{r4, r5, r6, pc}

0800479a <PE_Receive_SVDM>:
 800479a:	493e      	ldr	r1, [pc, #248]	; (8004894 <.text_15>)
 800479c:	1842      	adds	r2, r0, r1
 800479e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80047a0:	0449      	lsls	r1, r1, #17
 80047a2:	0f49      	lsrs	r1, r1, #29
 80047a4:	1e49      	subs	r1, r1, #1
 80047a6:	7611      	strb	r1, [r2, #24]
 80047a8:	2131      	movs	r1, #49	; 0x31
 80047aa:	5c41      	ldrb	r1, [r0, r1]
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d000      	beq.n	80047b2 <PE_Receive_SVDM+0x18>
 80047b0:	4770      	bx	lr
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	2300      	movs	r3, #0
 80047b6:	e010      	b.n	80047da <PE_Receive_SVDM+0x40>
 80047b8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80047ba:	009c      	lsls	r4, r3, #2
 80047bc:	1909      	adds	r1, r1, r4
 80047be:	798c      	ldrb	r4, [r1, #6]
 80047c0:	79cd      	ldrb	r5, [r1, #7]
 80047c2:	022d      	lsls	r5, r5, #8
 80047c4:	1964      	adds	r4, r4, r5
 80047c6:	7a0d      	ldrb	r5, [r1, #8]
 80047c8:	042d      	lsls	r5, r5, #16
 80047ca:	1964      	adds	r4, r4, r5
 80047cc:	7a49      	ldrb	r1, [r1, #9]
 80047ce:	0609      	lsls	r1, r1, #24
 80047d0:	1861      	adds	r1, r4, r1
 80047d2:	009c      	lsls	r4, r3, #2
 80047d4:	5111      	str	r1, [r2, r4]
 80047d6:	1c5b      	adds	r3, r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	7e11      	ldrb	r1, [r2, #24]
 80047dc:	428b      	cmp	r3, r1
 80047de:	dbeb      	blt.n	80047b8 <PE_Receive_SVDM+0x1e>
 80047e0:	0004      	movs	r4, r0
 80047e2:	2503      	movs	r5, #3
 80047e4:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <.text_16>)
 80047e6:	482d      	ldr	r0, [pc, #180]	; (800489c <.text_17>)
 80047e8:	2694      	movs	r6, #148	; 0x94
 80047ea:	00b6      	lsls	r6, r6, #2
 80047ec:	5da6      	ldrb	r6, [r4, r6]
 80047ee:	06f6      	lsls	r6, r6, #27
 80047f0:	0ef6      	lsrs	r6, r6, #27
 80047f2:	1e76      	subs	r6, r6, #1
 80047f4:	d00d      	beq.n	8004812 <PE_Receive_SVDM+0x78>
 80047f6:	1e76      	subs	r6, r6, #1
 80047f8:	d022      	beq.n	8004840 <PE_Receive_SVDM+0xa6>
 80047fa:	1e76      	subs	r6, r6, #1
 80047fc:	d025      	beq.n	800484a <PE_Receive_SVDM+0xb0>
 80047fe:	1e76      	subs	r6, r6, #1
 8004800:	d028      	beq.n	8004854 <PE_Receive_SVDM+0xba>
 8004802:	1e76      	subs	r6, r6, #1
 8004804:	d02b      	beq.n	800485e <PE_Receive_SVDM+0xc4>
 8004806:	1e76      	subs	r6, r6, #1
 8004808:	d02e      	beq.n	8004868 <PE_Receive_SVDM+0xce>
 800480a:	3e0a      	subs	r6, #10
 800480c:	2e0f      	cmp	r6, #15
 800480e:	d937      	bls.n	8004880 <PE_Receive_SVDM+0xe6>
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	2150      	movs	r1, #80	; 0x50
 8004814:	7721      	strb	r1, [r4, #28]
 8004816:	6861      	ldr	r1, [r4, #4]
 8004818:	680a      	ldr	r2, [r1, #0]
 800481a:	0693      	lsls	r3, r2, #26
 800481c:	0fdb      	lsrs	r3, r3, #31
 800481e:	2694      	movs	r6, #148	; 0x94
 8004820:	00b6      	lsls	r6, r6, #2
 8004822:	59a6      	ldr	r6, [r4, r6]
 8004824:	0b76      	lsrs	r6, r6, #13
 8004826:	4035      	ands	r5, r6
 8004828:	429d      	cmp	r5, r3
 800482a:	da00      	bge.n	800482e <PE_Receive_SVDM+0x94>
 800482c:	002b      	movs	r3, r5
 800482e:	2520      	movs	r5, #32
 8004830:	43aa      	bics	r2, r5
 8004832:	015b      	lsls	r3, r3, #5
 8004834:	402b      	ands	r3, r5
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
 800483a:	83e0      	strh	r0, [r4, #30]
 800483c:	2075      	movs	r0, #117	; 0x75
 800483e:	e023      	b.n	8004888 <PE_Receive_SVDM+0xee>
 8004840:	2152      	movs	r1, #82	; 0x52
 8004842:	7721      	strb	r1, [r4, #28]
 8004844:	83e0      	strh	r0, [r4, #30]
 8004846:	2076      	movs	r0, #118	; 0x76
 8004848:	e01e      	b.n	8004888 <PE_Receive_SVDM+0xee>
 800484a:	2153      	movs	r1, #83	; 0x53
 800484c:	7721      	strb	r1, [r4, #28]
 800484e:	83e0      	strh	r0, [r4, #30]
 8004850:	2078      	movs	r0, #120	; 0x78
 8004852:	e019      	b.n	8004888 <PE_Receive_SVDM+0xee>
 8004854:	2054      	movs	r0, #84	; 0x54
 8004856:	7720      	strb	r0, [r4, #28]
 8004858:	83e3      	strh	r3, [r4, #30]
 800485a:	2079      	movs	r0, #121	; 0x79
 800485c:	e014      	b.n	8004888 <PE_Receive_SVDM+0xee>
 800485e:	2055      	movs	r0, #85	; 0x55
 8004860:	7720      	strb	r0, [r4, #28]
 8004862:	83e3      	strh	r3, [r4, #30]
 8004864:	207a      	movs	r0, #122	; 0x7a
 8004866:	e00f      	b.n	8004888 <PE_Receive_SVDM+0xee>
 8004868:	68e0      	ldr	r0, [r4, #12]
 800486a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <PE_Receive_SVDM+0xe2>
 8004870:	2900      	cmp	r1, #0
 8004872:	d000      	beq.n	8004876 <PE_Receive_SVDM+0xdc>
 8004874:	2101      	movs	r1, #1
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	7c20      	ldrb	r0, [r4, #16]
 800487a:	4798      	blx	r3
 800487c:	7465      	strb	r5, [r4, #17]
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	215a      	movs	r1, #90	; 0x5a
 8004882:	7721      	strb	r1, [r4, #28]
 8004884:	83e0      	strh	r0, [r4, #30]
 8004886:	207b      	movs	r0, #123	; 0x7b
 8004888:	7460      	strb	r0, [r4, #17]
 800488a:	bd70      	pop	{r4, r5, r6, pc}

0800488c <.text_13>:
 800488c:	fffffe3f 	.word	0xfffffe3f

08004890 <.text_14>:
 8004890:	20000178 	.word	0x20000178

08004894 <.text_15>:
 8004894:	00000494 	.word	0x00000494

08004898 <.text_16>:
 8004898:	00008019 	.word	0x00008019

0800489c <.text_17>:
 800489c:	0000800f 	.word	0x0000800f

080048a0 <PE_StateMachine_VDM>:
 80048a0:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80048a2:	b09c      	sub	sp, #112	; 0x70
 80048a4:	0005      	movs	r5, r0
 80048a6:	2002      	movs	r0, #2
 80048a8:	9004      	str	r0, [sp, #16]
 80048aa:	7c6a      	ldrb	r2, [r5, #17]
 80048ac:	0010      	movs	r0, r2
 80048ae:	3875      	subs	r0, #117	; 0x75
 80048b0:	2807      	cmp	r0, #7
 80048b2:	d206      	bcs.n	80048c2 <__iar_annotation$$branch+0x4>
 80048b4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80048b6:	7800      	ldrb	r0, [r0, #0]
 80048b8:	2814      	cmp	r0, #20
 80048ba:	d002      	beq.n	80048c2 <__iar_annotation$$branch+0x4>
 80048bc:	2002      	movs	r0, #2

080048be <__iar_annotation$$branch>:
 80048be:	f000 febc 	bl	800563a <__iar_annotation$$branch+0xce4>
 80048c2:	2094      	movs	r0, #148	; 0x94
 80048c4:	0080      	lsls	r0, r0, #2
 80048c6:	182c      	adds	r4, r5, r0
 80048c8:	210b      	movs	r1, #11
 80048ca:	271e      	movs	r7, #30
 80048cc:	201f      	movs	r0, #31
 80048ce:	43c0      	mvns	r0, r0
 80048d0:	26c0      	movs	r6, #192	; 0xc0
 80048d2:	43f6      	mvns	r6, r6
 80048d4:	2a75      	cmp	r2, #117	; 0x75
 80048d6:	d041      	beq.n	800495c <__iar_annotation$$branch+0x6>
 80048d8:	2a76      	cmp	r2, #118	; 0x76
 80048da:	d100      	bne.n	80048de <__iar_annotation$$branch+0x20>
 80048dc:	e0bb      	b.n	8004a56 <__iar_annotation$$branch+0x100>
 80048de:	2a77      	cmp	r2, #119	; 0x77
 80048e0:	d100      	bne.n	80048e4 <__iar_annotation$$branch+0x26>
 80048e2:	e144      	b.n	8004b6e <__iar_annotation$$branch+0x218>
 80048e4:	2a78      	cmp	r2, #120	; 0x78
 80048e6:	d100      	bne.n	80048ea <__iar_annotation$$branch+0x2c>
 80048e8:	e1b4      	b.n	8004c54 <__iar_annotation$$branch+0x2fe>
 80048ea:	2a79      	cmp	r2, #121	; 0x79
 80048ec:	d100      	bne.n	80048f0 <__iar_annotation$$branch+0x32>
 80048ee:	e216      	b.n	8004d1e <__iar_annotation$$branch+0x3c8>
 80048f0:	2a7a      	cmp	r2, #122	; 0x7a
 80048f2:	d100      	bne.n	80048f6 <__iar_annotation$$branch+0x38>
 80048f4:	e24b      	b.n	8004d8e <__iar_annotation$$branch+0x438>
 80048f6:	2a7b      	cmp	r2, #123	; 0x7b
 80048f8:	d100      	bne.n	80048fc <__iar_annotation$$branch+0x3e>
 80048fa:	e292      	b.n	8004e22 <__iar_annotation$$branch+0x4cc>
 80048fc:	2a7d      	cmp	r2, #125	; 0x7d
 80048fe:	d100      	bne.n	8004902 <__iar_annotation$$branch+0x44>
 8004900:	e2e0      	b.n	8004ec4 <__iar_annotation$$branch+0x56e>
 8004902:	2a7f      	cmp	r2, #127	; 0x7f
 8004904:	d100      	bne.n	8004908 <__iar_annotation$$branch+0x4a>
 8004906:	e352      	b.n	8004fae <__iar_annotation$$branch+0x658>
 8004908:	2a81      	cmp	r2, #129	; 0x81
 800490a:	d100      	bne.n	800490e <__iar_annotation$$branch+0x50>
 800490c:	e3c2      	b.n	8005094 <__iar_annotation$$branch+0x73e>
 800490e:	2a82      	cmp	r2, #130	; 0x82
 8004910:	d101      	bne.n	8004916 <__iar_annotation$$branch+0x4>

08004912 <__iar_annotation$$branch>:
 8004912:	f000 fc3b 	bl	800518c <__iar_annotation$$branch+0x836>
 8004916:	2a83      	cmp	r2, #131	; 0x83
 8004918:	d101      	bne.n	800491e <__iar_annotation$$branch+0x4>

0800491a <__iar_annotation$$branch>:
 800491a:	f000 fcc9 	bl	80052b0 <__iar_annotation$$branch+0x95a>
 800491e:	2a84      	cmp	r2, #132	; 0x84
 8004920:	d101      	bne.n	8004926 <__iar_annotation$$branch+0x4>

08004922 <__iar_annotation$$branch>:
 8004922:	f000 fe38 	bl	8005596 <__iar_annotation$$branch+0xc40>
 8004926:	2a85      	cmp	r2, #133	; 0x85
 8004928:	d101      	bne.n	800492e <__iar_annotation$$branch+0x4>

0800492a <__iar_annotation$$branch>:
 800492a:	f000 fd5d 	bl	80053e8 <__iar_annotation$$branch+0xa92>
 800492e:	2a87      	cmp	r2, #135	; 0x87
 8004930:	d100      	bne.n	8004934 <__iar_annotation$$branch+0xa>
 8004932:	e2fc      	b.n	8004f2e <__iar_annotation$$branch+0x5d8>
 8004934:	2a89      	cmp	r2, #137	; 0x89
 8004936:	d100      	bne.n	800493a <__iar_annotation$$branch+0x10>
 8004938:	e375      	b.n	8005026 <__iar_annotation$$branch+0x6d0>
 800493a:	2a8b      	cmp	r2, #139	; 0x8b
 800493c:	d101      	bne.n	8004942 <__iar_annotation$$branch+0x4>

0800493e <__iar_annotation$$branch>:
 800493e:	f000 fbe4 	bl	800510a <__iar_annotation$$branch+0x7b4>
 8004942:	2a8c      	cmp	r2, #140	; 0x8c
 8004944:	d101      	bne.n	800494a <__iar_annotation$$branch+0x4>

08004946 <__iar_annotation$$branch>:
 8004946:	f000 fc63 	bl	8005210 <__iar_annotation$$branch+0x8ba>
 800494a:	2a8d      	cmp	r2, #141	; 0x8d
 800494c:	d101      	bne.n	8004952 <__iar_annotation$$branch+0x4>

0800494e <__iar_annotation$$branch>:
 800494e:	f000 fcf7 	bl	8005340 <__iar_annotation$$branch+0x9ea>
 8004952:	2a8f      	cmp	r2, #143	; 0x8f
 8004954:	d101      	bne.n	800495a <__iar_annotation$$branch+0x4>

08004956 <__iar_annotation$$branch>:
 8004956:	f000 fda5 	bl	80054a4 <__iar_annotation$$branch+0xb4e>
 800495a:	e2b2      	b.n	8004ec2 <__iar_annotation$$branch+0x56c>
 800495c:	2201      	movs	r2, #1
 800495e:	9203      	str	r2, [sp, #12]
 8004960:	03d3      	lsls	r3, r2, #15
 8004962:	8bea      	ldrh	r2, [r5, #30]
 8004964:	429a      	cmp	r2, r3
 8004966:	d100      	bne.n	800496a <__iar_annotation$$branch+0x14>
 8004968:	e262      	b.n	8004e30 <__iar_annotation$$branch+0x4da>
 800496a:	2701      	movs	r7, #1
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	4010      	ands	r0, r2
 8004970:	4338      	orrs	r0, r7
 8004972:	6020      	str	r0, [r4, #0]
 8004974:	4303      	orrs	r3, r0
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	6868      	ldr	r0, [r5, #4]
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	0942      	lsrs	r2, r0, #5
 800497e:	403a      	ands	r2, r7
 8004980:	48c9      	ldr	r0, [pc, #804]	; (8004ca8 <__iar_annotation$$branch+0x352>)
 8004982:	4018      	ands	r0, r3
 8004984:	0352      	lsls	r2, r2, #13
 8004986:	4302      	orrs	r2, r0
 8004988:	6022      	str	r2, [r4, #0]
 800498a:	6868      	ldr	r0, [r5, #4]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	4001      	ands	r1, r0
 8004990:	2909      	cmp	r1, #9
 8004992:	d051      	beq.n	8004a38 <__iar_annotation$$branch+0xe2>
 8004994:	68e8      	ldr	r0, [r5, #12]
 8004996:	2800      	cmp	r0, #0
 8004998:	d04e      	beq.n	8004a38 <__iar_annotation$$branch+0xe2>
 800499a:	6803      	ldr	r3, [r0, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d04b      	beq.n	8004a38 <__iar_annotation$$branch+0xe2>
 80049a0:	0c10      	lsrs	r0, r2, #16
 80049a2:	21ff      	movs	r1, #255	; 0xff
 80049a4:	0209      	lsls	r1, r1, #8
 80049a6:	4288      	cmp	r0, r1
 80049a8:	d146      	bne.n	8004a38 <__iar_annotation$$branch+0xe2>
 80049aa:	a90b      	add	r1, sp, #44	; 0x2c
 80049ac:	7c28      	ldrb	r0, [r5, #16]
 80049ae:	4798      	blx	r3
 80049b0:	2803      	cmp	r0, #3
 80049b2:	d002      	beq.n	80049ba <__iar_annotation$$branch+0x64>
 80049b4:	280f      	cmp	r0, #15
 80049b6:	d005      	beq.n	80049c4 <__iar_annotation$$branch+0x6e>
 80049b8:	e03e      	b.n	8004a38 <__iar_annotation$$branch+0xe2>
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	21c0      	movs	r1, #192	; 0xc0
 80049be:	4301      	orrs	r1, r0
 80049c0:	6021      	str	r1, [r4, #0]
 80049c2:	e03e      	b.n	8004a42 <__iar_annotation$$branch+0xec>
 80049c4:	6820      	ldr	r0, [r4, #0]
 80049c6:	4006      	ands	r6, r0
 80049c8:	2040      	movs	r0, #64	; 0x40
 80049ca:	4330      	orrs	r0, r6
 80049cc:	6020      	str	r0, [r4, #0]
 80049ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80049d0:	9015      	str	r0, [sp, #84]	; 0x54
 80049d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049d4:	9016      	str	r0, [sp, #88]	; 0x58
 80049d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80049da:	2004      	movs	r0, #4
 80049dc:	9003      	str	r0, [sp, #12]
 80049de:	a80b      	add	r0, sp, #44	; 0x2c
 80049e0:	2120      	movs	r1, #32
 80049e2:	5c40      	ldrb	r0, [r0, r1]
 80049e4:	0841      	lsrs	r1, r0, #1
 80049e6:	4239      	tst	r1, r7
 80049e8:	d003      	beq.n	80049f2 <__iar_annotation$$branch+0x9c>
 80049ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80049ec:	9118      	str	r1, [sp, #96]	; 0x60
 80049ee:	2105      	movs	r1, #5
 80049f0:	9103      	str	r1, [sp, #12]
 80049f2:	08c2      	lsrs	r2, r0, #3
 80049f4:	2101      	movs	r1, #1
 80049f6:	4011      	ands	r1, r2
 80049f8:	d008      	beq.n	8004a0c <__iar_annotation$$branch+0xb6>
 80049fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80049fc:	aa14      	add	r2, sp, #80	; 0x50
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	50d6      	str	r6, [r2, r3]
 8004a04:	9a03      	ldr	r2, [sp, #12]
 8004a06:	1c52      	adds	r2, r2, #1
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	9203      	str	r2, [sp, #12]
 8004a0c:	0900      	lsrs	r0, r0, #4
 8004a0e:	4238      	tst	r0, r7
 8004a10:	d017      	beq.n	8004a42 <__iar_annotation$$branch+0xec>
 8004a12:	2900      	cmp	r1, #0
 8004a14:	d007      	beq.n	8004a26 <__iar_annotation$$branch+0xd0>
 8004a16:	2000      	movs	r0, #0
 8004a18:	a914      	add	r1, sp, #80	; 0x50
 8004a1a:	9a03      	ldr	r2, [sp, #12]
 8004a1c:	0092      	lsls	r2, r2, #2
 8004a1e:	5088      	str	r0, [r1, r2]
 8004a20:	9803      	ldr	r0, [sp, #12]
 8004a22:	1c40      	adds	r0, r0, #1
 8004a24:	9003      	str	r0, [sp, #12]
 8004a26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004a28:	a914      	add	r1, sp, #80	; 0x50
 8004a2a:	9a03      	ldr	r2, [sp, #12]
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	5088      	str	r0, [r1, r2]
 8004a30:	9803      	ldr	r0, [sp, #12]
 8004a32:	1c40      	adds	r0, r0, #1
 8004a34:	9003      	str	r0, [sp, #12]
 8004a36:	e004      	b.n	8004a42 <__iar_annotation$$branch+0xec>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	4006      	ands	r6, r0
 8004a3c:	2080      	movs	r0, #128	; 0x80
 8004a3e:	4330      	orrs	r0, r6
 8004a40:	6020      	str	r0, [r4, #0]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	9014      	str	r0, [sp, #80]	; 0x50
 8004a46:	2000      	movs	r0, #0
 8004a48:	9002      	str	r0, [sp, #8]
 8004a4a:	2003      	movs	r0, #3
 8004a4c:	9001      	str	r0, [sp, #4]
 8004a4e:	9803      	ldr	r0, [sp, #12]
 8004a50:	9000      	str	r0, [sp, #0]
 8004a52:	ab14      	add	r3, sp, #80	; 0x50
 8004a54:	e22f      	b.n	8004eb6 <__iar_annotation$$branch+0x560>
 8004a56:	2201      	movs	r2, #1
 8004a58:	466b      	mov	r3, sp
 8004a5a:	731a      	strb	r2, [r3, #12]
 8004a5c:	03d2      	lsls	r2, r2, #15
 8004a5e:	8beb      	ldrh	r3, [r5, #30]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d100      	bne.n	8004a66 <__iar_annotation$$branch+0x110>
 8004a64:	e1e4      	b.n	8004e30 <__iar_annotation$$branch+0x4da>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	4018      	ands	r0, r3
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	4303      	orrs	r3, r0
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	6868      	ldr	r0, [r5, #4]
 8004a76:	6803      	ldr	r3, [r0, #0]
 8004a78:	0698      	lsls	r0, r3, #26
 8004a7a:	0fc0      	lsrs	r0, r0, #31
 8004a7c:	4b8a      	ldr	r3, [pc, #552]	; (8004ca8 <__iar_annotation$$branch+0x352>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0340      	lsls	r0, r0, #13
 8004a82:	4318      	orrs	r0, r3
 8004a84:	6020      	str	r0, [r4, #0]
 8004a86:	686a      	ldr	r2, [r5, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	4011      	ands	r1, r2
 8004a8c:	2909      	cmp	r1, #9
 8004a8e:	d05f      	beq.n	8004b50 <__iar_annotation$$branch+0x1fa>
 8004a90:	68e9      	ldr	r1, [r5, #12]
 8004a92:	684b      	ldr	r3, [r1, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05b      	beq.n	8004b50 <__iar_annotation$$branch+0x1fa>
 8004a98:	0c00      	lsrs	r0, r0, #16
 8004a9a:	21ff      	movs	r1, #255	; 0xff
 8004a9c:	0209      	lsls	r1, r1, #8
 8004a9e:	4288      	cmp	r0, r1
 8004aa0:	d156      	bne.n	8004b50 <__iar_annotation$$branch+0x1fa>
 8004aa2:	4882      	ldr	r0, [pc, #520]	; (8004cac <__iar_annotation$$branch+0x356>)
 8004aa4:	182a      	adds	r2, r5, r0
 8004aa6:	a905      	add	r1, sp, #20
 8004aa8:	7c28      	ldrb	r0, [r5, #16]
 8004aaa:	4798      	blx	r3
 8004aac:	2803      	cmp	r0, #3
 8004aae:	d04b      	beq.n	8004b48 <__iar_annotation$$branch+0x1f2>
 8004ab0:	280f      	cmp	r0, #15
 8004ab2:	d14d      	bne.n	8004b50 <__iar_annotation$$branch+0x1fa>
 8004ab4:	6820      	ldr	r0, [r4, #0]
 8004ab6:	4006      	ands	r6, r0
 8004ab8:	2040      	movs	r0, #64	; 0x40
 8004aba:	4330      	orrs	r0, r6
 8004abc:	6020      	str	r0, [r4, #0]
 8004abe:	211c      	movs	r1, #28
 8004ac0:	a806      	add	r0, sp, #24
 8004ac2:	f015 fb3e 	bl	801a142 <__aeabi_memclr>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2200      	movs	r2, #0
 8004aca:	a806      	add	r0, sp, #24
 8004acc:	9000      	str	r0, [sp, #0]
 8004ace:	e014      	b.n	8004afa <__iar_annotation$$branch+0x1a4>
 8004ad0:	005f      	lsls	r7, r3, #1
 8004ad2:	5bf6      	ldrh	r6, [r6, r7]
 8004ad4:	0436      	lsls	r6, r6, #16
 8004ad6:	430e      	orrs	r6, r1
 8004ad8:	6006      	str	r6, [r0, #0]
 8004ada:	e00d      	b.n	8004af8 <__iar_annotation$$branch+0x1a2>
 8004adc:	1c52      	adds	r2, r2, #1
 8004ade:	9800      	ldr	r0, [sp, #0]
 8004ae0:	1d00      	adds	r0, r0, #4
 8004ae2:	0859      	lsrs	r1, r3, #1
 8004ae4:	0089      	lsls	r1, r1, #2
 8004ae6:	1840      	adds	r0, r0, r1
 8004ae8:	07d9      	lsls	r1, r3, #31
 8004aea:	6801      	ldr	r1, [r0, #0]
 8004aec:	9e05      	ldr	r6, [sp, #20]
 8004aee:	d5ef      	bpl.n	8004ad0 <__iar_annotation$$branch+0x17a>
 8004af0:	005f      	lsls	r7, r3, #1
 8004af2:	5bf6      	ldrh	r6, [r6, r7]
 8004af4:	4331      	orrs	r1, r6
 8004af6:	6001      	str	r1, [r0, #0]
 8004af8:	1c5b      	adds	r3, r3, #1
 8004afa:	486d      	ldr	r0, [pc, #436]	; (8004cb0 <__iar_annotation$$branch+0x35a>)
 8004afc:	1828      	adds	r0, r5, r0
 8004afe:	7840      	ldrb	r0, [r0, #1]
 8004b00:	4283      	cmp	r3, r0
 8004b02:	d201      	bcs.n	8004b08 <__iar_annotation$$branch+0x1b2>
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d3e9      	bcc.n	8004adc <__iar_annotation$$branch+0x186>
 8004b08:	1a80      	subs	r0, r0, r2
 8004b0a:	4969      	ldr	r1, [pc, #420]	; (8004cb0 <__iar_annotation$$branch+0x35a>)
 8004b0c:	1869      	adds	r1, r5, r1
 8004b0e:	7048      	strb	r0, [r1, #1]
 8004b10:	b2d0      	uxtb	r0, r2
 8004b12:	280c      	cmp	r0, #12
 8004b14:	d111      	bne.n	8004b3a <__iar_annotation$$branch+0x1e4>
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	9006      	str	r0, [sp, #24]
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	2077      	movs	r0, #119	; 0x77
 8004b20:	9001      	str	r0, [sp, #4]
 8004b22:	2007      	movs	r0, #7
 8004b24:	9000      	str	r0, [sp, #0]
 8004b26:	ab06      	add	r3, sp, #24
 8004b28:	220f      	movs	r2, #15
 8004b2a:	2031      	movs	r0, #49	; 0x31
 8004b2c:	5c29      	ldrb	r1, [r5, r0]
 8004b2e:	0028      	movs	r0, r5
 8004b30:	f7fc fea1 	bl	8001876 <PE_Send_DataMessage>
 8004b34:	485f      	ldr	r0, [pc, #380]	; (8004cb4 <__iar_annotation$$branch+0x35e>)
 8004b36:	83e8      	strh	r0, [r5, #30]
 8004b38:	e1c3      	b.n	8004ec2 <__iar_annotation$$branch+0x56c>
 8004b3a:	0612      	lsls	r2, r2, #24
 8004b3c:	0e50      	lsrs	r0, r2, #25
 8004b3e:	1c80      	adds	r0, r0, #2
 8004b40:	4669      	mov	r1, sp
 8004b42:	7308      	strb	r0, [r1, #12]
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	e008      	b.n	8004b5a <__iar_annotation$$branch+0x204>
 8004b48:	6821      	ldr	r1, [r4, #0]
 8004b4a:	20c0      	movs	r0, #192	; 0xc0
 8004b4c:	4308      	orrs	r0, r1
 8004b4e:	e003      	b.n	8004b58 <__iar_annotation$$branch+0x202>
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	4006      	ands	r6, r0
 8004b54:	2080      	movs	r0, #128	; 0x80
 8004b56:	4330      	orrs	r0, r6
 8004b58:	6020      	str	r0, [r4, #0]
 8004b5a:	9006      	str	r0, [sp, #24]
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	9002      	str	r0, [sp, #8]
 8004b60:	2003      	movs	r0, #3
 8004b62:	9001      	str	r0, [sp, #4]
 8004b64:	4668      	mov	r0, sp
 8004b66:	7b00      	ldrb	r0, [r0, #12]
 8004b68:	9000      	str	r0, [sp, #0]
 8004b6a:	ab06      	add	r3, sp, #24
 8004b6c:	e1a3      	b.n	8004eb6 <__iar_annotation$$branch+0x560>
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	0209      	lsls	r1, r1, #8
 8004b72:	8bea      	ldrh	r2, [r5, #30]
 8004b74:	428a      	cmp	r2, r1
 8004b76:	d100      	bne.n	8004b7a <__iar_annotation$$branch+0x224>
 8004b78:	e15a      	b.n	8004e30 <__iar_annotation$$branch+0x4da>
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	4010      	ands	r0, r2
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4302      	orrs	r2, r0
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	b292      	uxth	r2, r2
 8004b86:	20ff      	movs	r0, #255	; 0xff
 8004b88:	0600      	lsls	r0, r0, #24
 8004b8a:	4310      	orrs	r0, r2
 8004b8c:	6020      	str	r0, [r4, #0]
 8004b8e:	4301      	orrs	r1, r0
 8004b90:	6021      	str	r1, [r4, #0]
 8004b92:	2701      	movs	r7, #1
 8004b94:	6868      	ldr	r0, [r5, #4]
 8004b96:	6800      	ldr	r0, [r0, #0]
 8004b98:	0940      	lsrs	r0, r0, #5
 8004b9a:	4038      	ands	r0, r7
 8004b9c:	4a42      	ldr	r2, [pc, #264]	; (8004ca8 <__iar_annotation$$branch+0x352>)
 8004b9e:	400a      	ands	r2, r1
 8004ba0:	0340      	lsls	r0, r0, #13
 8004ba2:	4310      	orrs	r0, r2
 8004ba4:	6020      	str	r0, [r4, #0]
 8004ba6:	4006      	ands	r6, r0
 8004ba8:	2040      	movs	r0, #64	; 0x40
 8004baa:	4330      	orrs	r0, r6
 8004bac:	6020      	str	r0, [r4, #0]
 8004bae:	aa03      	add	r2, sp, #12
 8004bb0:	a905      	add	r1, sp, #20
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	68eb      	ldr	r3, [r5, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4798      	blx	r3
 8004bba:	211c      	movs	r1, #28
 8004bbc:	a806      	add	r0, sp, #24
 8004bbe:	f015 fac0 	bl	801a142 <__aeabi_memclr>
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	a806      	add	r0, sp, #24
 8004bc8:	002c      	movs	r4, r5
 8004bca:	e016      	b.n	8004bfa <__iar_annotation$$branch+0x2a4>
 8004bcc:	004d      	lsls	r5, r1, #1
 8004bce:	5b75      	ldrh	r5, [r6, r5]
 8004bd0:	042d      	lsls	r5, r5, #16
 8004bd2:	4666      	mov	r6, ip
 8004bd4:	4335      	orrs	r5, r6
 8004bd6:	601d      	str	r5, [r3, #0]
 8004bd8:	e00e      	b.n	8004bf8 <__iar_annotation$$branch+0x2a2>
 8004bda:	1c52      	adds	r2, r2, #1
 8004bdc:	1d03      	adds	r3, r0, #4
 8004bde:	084d      	lsrs	r5, r1, #1
 8004be0:	00ad      	lsls	r5, r5, #2
 8004be2:	195b      	adds	r3, r3, r5
 8004be4:	4239      	tst	r1, r7
 8004be6:	681e      	ldr	r6, [r3, #0]
 8004be8:	46b4      	mov	ip, r6
 8004bea:	9e05      	ldr	r6, [sp, #20]
 8004bec:	d0ee      	beq.n	8004bcc <__iar_annotation$$branch+0x276>
 8004bee:	004d      	lsls	r5, r1, #1
 8004bf0:	5b75      	ldrh	r5, [r6, r5]
 8004bf2:	4666      	mov	r6, ip
 8004bf4:	432e      	orrs	r6, r5
 8004bf6:	601e      	str	r6, [r3, #0]
 8004bf8:	1c49      	adds	r1, r1, #1
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <__iar_annotation$$branch+0x35a>)
 8004bfc:	18e3      	adds	r3, r4, r3
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d201      	bcs.n	8004c08 <__iar_annotation$$branch+0x2b2>
 8004c04:	290c      	cmp	r1, #12
 8004c06:	d3e8      	bcc.n	8004bda <__iar_annotation$$branch+0x284>
 8004c08:	1a98      	subs	r0, r3, r2
 8004c0a:	4929      	ldr	r1, [pc, #164]	; (8004cb0 <__iar_annotation$$branch+0x35a>)
 8004c0c:	1861      	adds	r1, r4, r1
 8004c0e:	7048      	strb	r0, [r1, #1]
 8004c10:	b2d0      	uxtb	r0, r2
 8004c12:	280c      	cmp	r0, #12
 8004c14:	d10f      	bne.n	8004c36 <__iar_annotation$$branch+0x2e0>
 8004c16:	2000      	movs	r0, #0
 8004c18:	9002      	str	r0, [sp, #8]
 8004c1a:	2077      	movs	r0, #119	; 0x77
 8004c1c:	9001      	str	r0, [sp, #4]
 8004c1e:	2007      	movs	r0, #7
 8004c20:	9000      	str	r0, [sp, #0]
 8004c22:	ab06      	add	r3, sp, #24
 8004c24:	220f      	movs	r2, #15
 8004c26:	2031      	movs	r0, #49	; 0x31
 8004c28:	5c21      	ldrb	r1, [r4, r0]
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	f7fc fe23 	bl	8001876 <PE_Send_DataMessage>
 8004c30:	4820      	ldr	r0, [pc, #128]	; (8004cb4 <__iar_annotation$$branch+0x35e>)
 8004c32:	83e0      	strh	r0, [r4, #30]
 8004c34:	e145      	b.n	8004ec2 <__iar_annotation$$branch+0x56c>
 8004c36:	2000      	movs	r0, #0
 8004c38:	9002      	str	r0, [sp, #8]
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	9001      	str	r0, [sp, #4]
 8004c3e:	0610      	lsls	r0, r2, #24
 8004c40:	0e40      	lsrs	r0, r0, #25
 8004c42:	1c80      	adds	r0, r0, #2
 8004c44:	b2c0      	uxtb	r0, r0
 8004c46:	9000      	str	r0, [sp, #0]
 8004c48:	ab06      	add	r3, sp, #24
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	2031      	movs	r0, #49	; 0x31
 8004c4e:	5c21      	ldrb	r1, [r4, r0]
 8004c50:	0020      	movs	r0, r4
 8004c52:	e134      	b.n	8004ebe <__iar_annotation$$branch+0x568>
 8004c54:	2201      	movs	r2, #1
 8004c56:	9206      	str	r2, [sp, #24]
 8004c58:	03d2      	lsls	r2, r2, #15
 8004c5a:	8beb      	ldrh	r3, [r5, #30]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <__iar_annotation$$branch+0x30c>
 8004c60:	e3c1      	b.n	80053e6 <__iar_annotation$$branch+0xa90>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	4018      	ands	r0, r3
 8004c66:	2303      	movs	r3, #3
 8004c68:	4303      	orrs	r3, r0
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	6022      	str	r2, [r4, #0]
 8004c70:	6868      	ldr	r0, [r5, #4]
 8004c72:	6803      	ldr	r3, [r0, #0]
 8004c74:	0698      	lsls	r0, r3, #26
 8004c76:	0fc0      	lsrs	r0, r0, #31
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <__iar_annotation$$branch+0x352>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0340      	lsls	r0, r0, #13
 8004c7e:	4318      	orrs	r0, r3
 8004c80:	6020      	str	r0, [r4, #0]
 8004c82:	686a      	ldr	r2, [r5, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	4011      	ands	r1, r2
 8004c88:	2909      	cmp	r1, #9
 8004c8a:	d037      	beq.n	8004cfc <__iar_annotation$$branch+0x3a6>
 8004c8c:	68e9      	ldr	r1, [r5, #12]
 8004c8e:	688f      	ldr	r7, [r1, #8]
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	d033      	beq.n	8004cfc <__iar_annotation$$branch+0x3a6>
 8004c94:	ab03      	add	r3, sp, #12
 8004c96:	aa05      	add	r2, sp, #20
 8004c98:	0c01      	lsrs	r1, r0, #16
 8004c9a:	7c28      	ldrb	r0, [r5, #16]
 8004c9c:	47b8      	blx	r7
 8004c9e:	2803      	cmp	r0, #3
 8004ca0:	d00a      	beq.n	8004cb8 <__iar_annotation$$branch+0x362>
 8004ca2:	280f      	cmp	r0, #15
 8004ca4:	d00d      	beq.n	8004cc2 <__iar_annotation$$branch+0x36c>
 8004ca6:	e029      	b.n	8004cfc <__iar_annotation$$branch+0x3a6>
 8004ca8:	ffff9fff 	.word	0xffff9fff
 8004cac:	000004ad 	.word	0x000004ad
 8004cb0:	000004ac 	.word	0x000004ac
 8004cb4:	0000800f 	.word	0x0000800f
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	21c0      	movs	r1, #192	; 0xc0
 8004cbc:	4301      	orrs	r1, r0
 8004cbe:	6021      	str	r1, [r4, #0]
 8004cc0:	e023      	b.n	8004d0a <__iar_annotation$$branch+0x3b4>
 8004cc2:	4668      	mov	r0, sp
 8004cc4:	7b00      	ldrb	r0, [r0, #12]
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d018      	beq.n	8004cfc <__iar_annotation$$branch+0x3a6>
 8004cca:	4668      	mov	r0, sp
 8004ccc:	7b02      	ldrb	r2, [r0, #12]
 8004cce:	2a07      	cmp	r2, #7
 8004cd0:	d214      	bcs.n	8004cfc <__iar_annotation$$branch+0x3a6>
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	4006      	ands	r6, r0
 8004cd6:	2040      	movs	r0, #64	; 0x40
 8004cd8:	4330      	orrs	r0, r6
 8004cda:	6020      	str	r0, [r4, #0]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9806      	ldr	r0, [sp, #24]
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d211      	bcs.n	8004d08 <__iar_annotation$$branch+0x3b2>
 8004ce4:	9905      	ldr	r1, [sp, #20]
 8004ce6:	6809      	ldr	r1, [r1, #0]
 8004ce8:	ae07      	add	r6, sp, #28
 8004cea:	1d36      	adds	r6, r6, #4
 8004cec:	009f      	lsls	r7, r3, #2
 8004cee:	51f1      	str	r1, [r6, r7]
 8004cf0:	9905      	ldr	r1, [sp, #20]
 8004cf2:	1d09      	adds	r1, r1, #4
 8004cf4:	9105      	str	r1, [sp, #20]
 8004cf6:	1c40      	adds	r0, r0, #1
 8004cf8:	1c5b      	adds	r3, r3, #1
 8004cfa:	e7f1      	b.n	8004ce0 <__iar_annotation$$branch+0x38a>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	4006      	ands	r6, r0
 8004d00:	2080      	movs	r0, #128	; 0x80
 8004d02:	4330      	orrs	r0, r6
 8004d04:	6020      	str	r0, [r4, #0]
 8004d06:	e000      	b.n	8004d0a <__iar_annotation$$branch+0x3b4>
 8004d08:	9006      	str	r0, [sp, #24]
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	9007      	str	r0, [sp, #28]
 8004d0e:	2000      	movs	r0, #0
 8004d10:	9002      	str	r0, [sp, #8]
 8004d12:	2003      	movs	r0, #3
 8004d14:	9001      	str	r0, [sp, #4]
 8004d16:	9806      	ldr	r0, [sp, #24]
 8004d18:	9000      	str	r0, [sp, #0]
 8004d1a:	ab07      	add	r3, sp, #28
 8004d1c:	e0cb      	b.n	8004eb6 <__iar_annotation$$branch+0x560>
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	0209      	lsls	r1, r1, #8
 8004d22:	8bea      	ldrh	r2, [r5, #30]
 8004d24:	428a      	cmp	r2, r1
 8004d26:	d100      	bne.n	8004d2a <__iar_annotation$$branch+0x3d4>
 8004d28:	e35d      	b.n	80053e6 <__iar_annotation$$branch+0xa90>
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	4010      	ands	r0, r2
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4302      	orrs	r2, r0
 8004d32:	6022      	str	r2, [r4, #0]
 8004d34:	4311      	orrs	r1, r2
 8004d36:	6021      	str	r1, [r4, #0]
 8004d38:	2001      	movs	r0, #1
 8004d3a:	686a      	ldr	r2, [r5, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	0952      	lsrs	r2, r2, #5
 8004d40:	4002      	ands	r2, r0
 8004d42:	4ba6      	ldr	r3, [pc, #664]	; (8004fdc <__iar_annotation$$branch+0x686>)
 8004d44:	400b      	ands	r3, r1
 8004d46:	0351      	lsls	r1, r2, #13
 8004d48:	4319      	orrs	r1, r3
 8004d4a:	6021      	str	r1, [r4, #0]
 8004d4c:	686a      	ldr	r2, [r5, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	08d2      	lsrs	r2, r2, #3
 8004d52:	4010      	ands	r0, r2
 8004d54:	d152      	bne.n	8004dfc <__iar_annotation$$branch+0x4a6>
 8004d56:	68e8      	ldr	r0, [r5, #12]
 8004d58:	68c3      	ldr	r3, [r0, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04e      	beq.n	8004dfc <__iar_annotation$$branch+0x4a6>
 8004d5e:	2707      	movs	r7, #7
 8004d60:	0a0a      	lsrs	r2, r1, #8
 8004d62:	403a      	ands	r2, r7
 8004d64:	0c09      	lsrs	r1, r1, #16
 8004d66:	7c28      	ldrb	r0, [r5, #16]
 8004d68:	4798      	blx	r3
 8004d6a:	2803      	cmp	r0, #3
 8004d6c:	d041      	beq.n	8004df2 <__iar_annotation$$branch+0x49c>
 8004d6e:	280f      	cmp	r0, #15
 8004d70:	d144      	bne.n	8004dfc <__iar_annotation$$branch+0x4a6>
 8004d72:	6820      	ldr	r0, [r4, #0]
 8004d74:	4006      	ands	r6, r0
 8004d76:	2040      	movs	r0, #64	; 0x40
 8004d78:	4330      	orrs	r0, r6
 8004d7a:	6020      	str	r0, [r4, #0]
 8004d7c:	0a00      	lsrs	r0, r0, #8
 8004d7e:	4007      	ands	r7, r0
 8004d80:	6968      	ldr	r0, [r5, #20]
 8004d82:	4940      	ldr	r1, [pc, #256]	; (8004e84 <__iar_annotation$$branch+0x52e>)
 8004d84:	4001      	ands	r1, r0
 8004d86:	01b8      	lsls	r0, r7, #6
 8004d88:	4308      	orrs	r0, r1
 8004d8a:	6168      	str	r0, [r5, #20]
 8004d8c:	e03b      	b.n	8004e06 <__iar_annotation$$branch+0x4b0>
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	0209      	lsls	r1, r1, #8
 8004d92:	8bea      	ldrh	r2, [r5, #30]
 8004d94:	428a      	cmp	r2, r1
 8004d96:	d04b      	beq.n	8004e30 <__iar_annotation$$branch+0x4da>
 8004d98:	6822      	ldr	r2, [r4, #0]
 8004d9a:	4010      	ands	r0, r2
 8004d9c:	2205      	movs	r2, #5
 8004d9e:	4302      	orrs	r2, r0
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	4311      	orrs	r1, r2
 8004da4:	6021      	str	r1, [r4, #0]
 8004da6:	2001      	movs	r0, #1
 8004da8:	686a      	ldr	r2, [r5, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	0952      	lsrs	r2, r2, #5
 8004dae:	4002      	ands	r2, r0
 8004db0:	4b8a      	ldr	r3, [pc, #552]	; (8004fdc <__iar_annotation$$branch+0x686>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	0351      	lsls	r1, r2, #13
 8004db6:	4319      	orrs	r1, r3
 8004db8:	6021      	str	r1, [r4, #0]
 8004dba:	686a      	ldr	r2, [r5, #4]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	08d2      	lsrs	r2, r2, #3
 8004dc0:	4010      	ands	r0, r2
 8004dc2:	d11b      	bne.n	8004dfc <__iar_annotation$$branch+0x4a6>
 8004dc4:	68e8      	ldr	r0, [r5, #12]
 8004dc6:	6903      	ldr	r3, [r0, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d017      	beq.n	8004dfc <__iar_annotation$$branch+0x4a6>
 8004dcc:	0548      	lsls	r0, r1, #21
 8004dce:	0f42      	lsrs	r2, r0, #29
 8004dd0:	0c09      	lsrs	r1, r1, #16
 8004dd2:	7c28      	ldrb	r0, [r5, #16]
 8004dd4:	4798      	blx	r3
 8004dd6:	2803      	cmp	r0, #3
 8004dd8:	d00b      	beq.n	8004df2 <__iar_annotation$$branch+0x49c>
 8004dda:	280f      	cmp	r0, #15
 8004ddc:	d10e      	bne.n	8004dfc <__iar_annotation$$branch+0x4a6>
 8004dde:	6820      	ldr	r0, [r4, #0]
 8004de0:	4006      	ands	r6, r0
 8004de2:	2040      	movs	r0, #64	; 0x40
 8004de4:	4330      	orrs	r0, r6
 8004de6:	6020      	str	r0, [r4, #0]
 8004de8:	6968      	ldr	r0, [r5, #20]
 8004dea:	4926      	ldr	r1, [pc, #152]	; (8004e84 <__iar_annotation$$branch+0x52e>)
 8004dec:	4001      	ands	r1, r0
 8004dee:	6169      	str	r1, [r5, #20]
 8004df0:	e009      	b.n	8004e06 <__iar_annotation$$branch+0x4b0>
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	21c0      	movs	r1, #192	; 0xc0
 8004df6:	4301      	orrs	r1, r0
 8004df8:	6021      	str	r1, [r4, #0]
 8004dfa:	e004      	b.n	8004e06 <__iar_annotation$$branch+0x4b0>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	4006      	ands	r6, r0
 8004e00:	2080      	movs	r0, #128	; 0x80
 8004e02:	4330      	orrs	r0, r6
 8004e04:	6020      	str	r0, [r4, #0]
 8004e06:	2000      	movs	r0, #0
 8004e08:	9002      	str	r0, [sp, #8]
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	9001      	str	r0, [sp, #4]
 8004e0e:	2001      	movs	r0, #1
 8004e10:	9000      	str	r0, [sp, #0]
 8004e12:	0023      	movs	r3, r4
 8004e14:	220f      	movs	r2, #15
 8004e16:	2031      	movs	r0, #49	; 0x31
 8004e18:	5c29      	ldrb	r1, [r5, r0]
 8004e1a:	0028      	movs	r0, r5
 8004e1c:	f7fc fd2b 	bl	8001876 <PE_Send_DataMessage>
 8004e20:	e04f      	b.n	8004ec2 <__iar_annotation$$branch+0x56c>
 8004e22:	2001      	movs	r0, #1
 8004e24:	4669      	mov	r1, sp
 8004e26:	7308      	strb	r0, [r1, #12]
 8004e28:	8be8      	ldrh	r0, [r5, #30]
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	0209      	lsls	r1, r1, #8
 8004e2e:	4288      	cmp	r0, r1
 8004e30:	d100      	bne.n	8004e34 <__iar_annotation$$branch+0x4de>
 8004e32:	e3ab      	b.n	800558c <__iar_annotation$$branch+0xc36>
 8004e34:	68e8      	ldr	r0, [r5, #12]
 8004e36:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	d02a      	beq.n	8004e92 <__iar_annotation$$branch+0x53c>
 8004e3c:	4868      	ldr	r0, [pc, #416]	; (8004fe0 <__iar_annotation$$branch+0x68a>)
 8004e3e:	182b      	adds	r3, r5, r0
 8004e40:	3018      	adds	r0, #24
 8004e42:	182a      	adds	r2, r5, r0
 8004e44:	7820      	ldrb	r0, [r4, #0]
 8004e46:	06c1      	lsls	r1, r0, #27
 8004e48:	0ec9      	lsrs	r1, r1, #27
 8004e4a:	7c28      	ldrb	r0, [r5, #16]
 8004e4c:	47b8      	blx	r7
 8004e4e:	2803      	cmp	r0, #3
 8004e50:	d01a      	beq.n	8004e88 <__iar_annotation$$branch+0x532>
 8004e52:	280f      	cmp	r0, #15
 8004e54:	d11d      	bne.n	8004e92 <__iar_annotation$$branch+0x53c>
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	4006      	ands	r6, r0
 8004e5a:	2040      	movs	r0, #64	; 0x40
 8004e5c:	4330      	orrs	r0, r6
 8004e5e:	6020      	str	r0, [r4, #0]
 8004e60:	2200      	movs	r2, #0
 8004e62:	4668      	mov	r0, sp
 8004e64:	7b00      	ldrb	r0, [r0, #12]
 8004e66:	495f      	ldr	r1, [pc, #380]	; (8004fe4 <__iar_annotation$$branch+0x68e>)
 8004e68:	5c69      	ldrb	r1, [r5, r1]
 8004e6a:	428a      	cmp	r2, r1
 8004e6c:	d217      	bcs.n	8004e9e <__iar_annotation$$branch+0x548>
 8004e6e:	0091      	lsls	r1, r2, #2
 8004e70:	4b5b      	ldr	r3, [pc, #364]	; (8004fe0 <__iar_annotation$$branch+0x68a>)
 8004e72:	18eb      	adds	r3, r5, r3
 8004e74:	585b      	ldr	r3, [r3, r1]
 8004e76:	ae05      	add	r6, sp, #20
 8004e78:	1d36      	adds	r6, r6, #4
 8004e7a:	5073      	str	r3, [r6, r1]
 8004e7c:	1c40      	adds	r0, r0, #1
 8004e7e:	1c52      	adds	r2, r2, #1
 8004e80:	e7f1      	b.n	8004e66 <__iar_annotation$$branch+0x510>
 8004e82:	bf00      	nop
 8004e84:	fffffe3f 	.word	0xfffffe3f
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	21c0      	movs	r1, #192	; 0xc0
 8004e8c:	4301      	orrs	r1, r0
 8004e8e:	6021      	str	r1, [r4, #0]
 8004e90:	e007      	b.n	8004ea2 <__iar_annotation$$branch+0x54c>
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	4006      	ands	r6, r0
 8004e96:	2080      	movs	r0, #128	; 0x80
 8004e98:	4330      	orrs	r0, r6
 8004e9a:	6020      	str	r0, [r4, #0]
 8004e9c:	e001      	b.n	8004ea2 <__iar_annotation$$branch+0x54c>
 8004e9e:	4669      	mov	r1, sp
 8004ea0:	7308      	strb	r0, [r1, #12]
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	9005      	str	r0, [sp, #20]
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	9002      	str	r0, [sp, #8]
 8004eaa:	2003      	movs	r0, #3
 8004eac:	9001      	str	r0, [sp, #4]
 8004eae:	4668      	mov	r0, sp
 8004eb0:	7b00      	ldrb	r0, [r0, #12]
 8004eb2:	9000      	str	r0, [sp, #0]
 8004eb4:	ab05      	add	r3, sp, #20
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	2031      	movs	r0, #49	; 0x31
 8004eba:	5c29      	ldrb	r1, [r5, r0]
 8004ebc:	0028      	movs	r0, r5
 8004ebe:	f7fc fcda 	bl	8001876 <PE_Send_DataMessage>
 8004ec2:	e3b9      	b.n	8005638 <__iar_annotation$$branch+0xce2>
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	4010      	ands	r0, r2
 8004eca:	4308      	orrs	r0, r1
 8004ecc:	6020      	str	r0, [r4, #0]
 8004ece:	03ca      	lsls	r2, r1, #15
 8004ed0:	4302      	orrs	r2, r0
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	6868      	ldr	r0, [r5, #4]
 8004ed6:	6800      	ldr	r0, [r0, #0]
 8004ed8:	0943      	lsrs	r3, r0, #5
 8004eda:	400b      	ands	r3, r1
 8004edc:	483f      	ldr	r0, [pc, #252]	; (8004fdc <__iar_annotation$$branch+0x686>)
 8004ede:	4010      	ands	r0, r2
 8004ee0:	035a      	lsls	r2, r3, #13
 8004ee2:	4302      	orrs	r2, r0
 8004ee4:	6022      	str	r2, [r4, #0]
 8004ee6:	48bf      	ldr	r0, [pc, #764]	; (80051e4 <__iar_annotation$$branch+0x88e>)
 8004ee8:	4010      	ands	r0, r2
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	4006      	ands	r6, r0
 8004eee:	6026      	str	r6, [r4, #0]
 8004ef0:	b2b0      	uxth	r0, r6
 8004ef2:	22ff      	movs	r2, #255	; 0xff
 8004ef4:	0612      	lsls	r2, r2, #24
 8004ef6:	4302      	orrs	r2, r0
 8004ef8:	6022      	str	r2, [r4, #0]
 8004efa:	6868      	ldr	r0, [r5, #4]
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	0880      	lsrs	r0, r0, #2
 8004f00:	4001      	ands	r1, r0
 8004f02:	d003      	beq.n	8004f0c <__iar_annotation$$branch+0x5b6>
 8004f04:	6968      	ldr	r0, [r5, #20]
 8004f06:	0741      	lsls	r1, r0, #29
 8004f08:	0fc8      	lsrs	r0, r1, #31
 8004f0a:	e000      	b.n	8004f0e <__iar_annotation$$branch+0x5b8>
 8004f0c:	2002      	movs	r0, #2
 8004f0e:	9002      	str	r0, [sp, #8]
 8004f10:	2087      	movs	r0, #135	; 0x87
 8004f12:	9001      	str	r0, [sp, #4]
 8004f14:	2001      	movs	r0, #1
 8004f16:	9000      	str	r0, [sp, #0]
 8004f18:	0023      	movs	r3, r4
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	2031      	movs	r0, #49	; 0x31
 8004f1e:	5c29      	ldrb	r1, [r5, r0]
 8004f20:	0028      	movs	r0, r5
 8004f22:	f7fc fca8 	bl	8001876 <PE_Send_DataMessage>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1cb      	bne.n	8004ec2 <__iar_annotation$$branch+0x56c>
 8004f2a:	2050      	movs	r0, #80	; 0x50
 8004f2c:	e0e8      	b.n	8005100 <__iar_annotation$$branch+0x7aa>
 8004f2e:	2031      	movs	r0, #49	; 0x31
 8004f30:	5c28      	ldrb	r0, [r5, r0]
 8004f32:	f7fb fed1 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 8004f36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f38:	7809      	ldrb	r1, [r1, #0]
 8004f3a:	4281      	cmp	r1, r0
 8004f3c:	d000      	beq.n	8004f40 <__iar_annotation$$branch+0x5ea>
 8004f3e:	e245      	b.n	80053cc <__iar_annotation$$branch+0xa76>
 8004f40:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f42:	0bc2      	lsrs	r2, r0, #15
 8004f44:	d176      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 8004f46:	0b02      	lsrs	r2, r0, #12
 8004f48:	0752      	lsls	r2, r2, #29
 8004f4a:	d012      	beq.n	8004f72 <__iar_annotation$$branch+0x61c>
 8004f4c:	06c0      	lsls	r0, r0, #27
 8004f4e:	0ec0      	lsrs	r0, r0, #27
 8004f50:	280f      	cmp	r0, #15
 8004f52:	d16f      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 8004f54:	2914      	cmp	r1, #20
 8004f56:	d005      	beq.n	8004f64 <__iar_annotation$$branch+0x60e>
 8004f58:	2014      	movs	r0, #20
 8004f5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f5c:	7008      	strb	r0, [r1, #0]
 8004f5e:	0028      	movs	r0, r5
 8004f60:	f7fb fe81 	bl	8000c66 <PE_Clear_RxEvent>
 8004f64:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004f66:	7881      	ldrb	r1, [r0, #2]
 8004f68:	06ca      	lsls	r2, r1, #27
 8004f6a:	0ed2      	lsrs	r2, r2, #27
 8004f6c:	2a01      	cmp	r2, #1
 8004f6e:	d161      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 8004f70:	098c      	lsrs	r4, r1, #6
 8004f72:	d100      	bne.n	8004f76 <__iar_annotation$$branch+0x620>
 8004f74:	e22a      	b.n	80053cc <__iar_annotation$$branch+0xa76>
 8004f76:	68e9      	ldr	r1, [r5, #12]
 8004f78:	6949      	ldr	r1, [r1, #20]
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d100      	bne.n	8004f80 <__iar_annotation$$branch+0x62a>
 8004f7e:	e2e3      	b.n	8005548 <__iar_annotation$$branch+0xbf2>
 8004f80:	2103      	movs	r1, #3
 8004f82:	4021      	ands	r1, r4
 8004f84:	2901      	cmp	r1, #1
 8004f86:	d000      	beq.n	8004f8a <__iar_annotation$$branch+0x634>
 8004f88:	e2de      	b.n	8005548 <__iar_annotation$$branch+0xbf2>
 8004f8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f8c:	1d81      	adds	r1, r0, #6
 8004f8e:	7c28      	ldrb	r0, [r5, #16]
 8004f90:	f000 fc04 	bl	800579c <PE_SVDM_CheckIdentity>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d108      	bne.n	8004faa <__iar_annotation$$branch+0x654>
 8004f98:	ab0b      	add	r3, sp, #44	; 0x2c
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	7c28      	ldrb	r0, [r5, #16]
 8004fa0:	68ec      	ldr	r4, [r5, #12]
 8004fa2:	6964      	ldr	r4, [r4, #20]
 8004fa4:	47a0      	blx	r4
 8004fa6:	2151      	movs	r1, #81	; 0x51
 8004fa8:	e0ec      	b.n	8005184 <__iar_annotation$$branch+0x82e>
 8004faa:	211b      	movs	r1, #27
 8004fac:	e0ea      	b.n	8005184 <__iar_annotation$$branch+0x82e>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	400e      	ands	r6, r1
 8004fb2:	6026      	str	r6, [r4, #0]
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4030      	ands	r0, r6
 8004fb8:	4308      	orrs	r0, r1
 8004fba:	6020      	str	r0, [r4, #0]
 8004fbc:	b280      	uxth	r0, r0
 8004fbe:	22ff      	movs	r2, #255	; 0xff
 8004fc0:	0612      	lsls	r2, r2, #24
 8004fc2:	4302      	orrs	r2, r0
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	0388      	lsls	r0, r1, #14
 8004fc8:	4310      	orrs	r0, r2
 8004fca:	6020      	str	r0, [r4, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	686b      	ldr	r3, [r5, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	095e      	lsrs	r6, r3, #5
 8004fd4:	4016      	ands	r6, r2
 8004fd6:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__iar_annotation$$branch+0x686>)
 8004fd8:	e006      	b.n	8004fe8 <__iar_annotation$$branch+0x692>
 8004fda:	bf00      	nop
 8004fdc:	ffff9fff 	.word	0xffff9fff
 8004fe0:	00000494 	.word	0x00000494
 8004fe4:	000004ac 	.word	0x000004ac
 8004fe8:	4003      	ands	r3, r0
 8004fea:	0370      	lsls	r0, r6, #13
 8004fec:	4318      	orrs	r0, r3
 8004fee:	6020      	str	r0, [r4, #0]
 8004ff0:	4b7c      	ldr	r3, [pc, #496]	; (80051e4 <__iar_annotation$$branch+0x88e>)
 8004ff2:	4003      	ands	r3, r0
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	6868      	ldr	r0, [r5, #4]
 8004ff8:	6800      	ldr	r0, [r0, #0]
 8004ffa:	0880      	lsrs	r0, r0, #2
 8004ffc:	4002      	ands	r2, r0
 8004ffe:	d002      	beq.n	8005006 <__iar_annotation$$branch+0x6b0>
 8005000:	6968      	ldr	r0, [r5, #20]
 8005002:	0740      	lsls	r0, r0, #29
 8005004:	0fc1      	lsrs	r1, r0, #31
 8005006:	9102      	str	r1, [sp, #8]
 8005008:	2089      	movs	r0, #137	; 0x89
 800500a:	9001      	str	r0, [sp, #4]
 800500c:	2001      	movs	r0, #1
 800500e:	9000      	str	r0, [sp, #0]
 8005010:	0023      	movs	r3, r4
 8005012:	220f      	movs	r2, #15
 8005014:	2031      	movs	r0, #49	; 0x31
 8005016:	5c29      	ldrb	r1, [r5, r0]
 8005018:	0028      	movs	r0, r5
 800501a:	f7fc fc2c 	bl	8001876 <PE_Send_DataMessage>
 800501e:	2800      	cmp	r0, #0
 8005020:	d172      	bne.n	8005108 <__iar_annotation$$branch+0x7b2>
 8005022:	2052      	movs	r0, #82	; 0x52
 8005024:	e06c      	b.n	8005100 <__iar_annotation$$branch+0x7aa>
 8005026:	2031      	movs	r0, #49	; 0x31
 8005028:	5c28      	ldrb	r0, [r5, r0]
 800502a:	f7fb fe55 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 800502e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005030:	7809      	ldrb	r1, [r1, #0]
 8005032:	4281      	cmp	r1, r0
 8005034:	d000      	beq.n	8005038 <__iar_annotation$$branch+0x6e2>
 8005036:	e1c9      	b.n	80053cc <__iar_annotation$$branch+0xa76>
 8005038:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800503a:	0bc2      	lsrs	r2, r0, #15
 800503c:	d1fa      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 800503e:	0b02      	lsrs	r2, r0, #12
 8005040:	0752      	lsls	r2, r2, #29
 8005042:	d06f      	beq.n	8005124 <__iar_annotation$$branch+0x7ce>
 8005044:	06c0      	lsls	r0, r0, #27
 8005046:	0ec0      	lsrs	r0, r0, #27
 8005048:	280f      	cmp	r0, #15
 800504a:	d1f3      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 800504c:	2914      	cmp	r1, #20
 800504e:	d005      	beq.n	800505c <__iar_annotation$$branch+0x706>
 8005050:	2014      	movs	r0, #20
 8005052:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005054:	7008      	strb	r0, [r1, #0]
 8005056:	0028      	movs	r0, r5
 8005058:	f7fb fe05 	bl	8000c66 <PE_Clear_RxEvent>
 800505c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800505e:	7881      	ldrb	r1, [r0, #2]
 8005060:	06ca      	lsls	r2, r1, #27
 8005062:	0ed2      	lsrs	r2, r2, #27
 8005064:	2a02      	cmp	r2, #2
 8005066:	d1e5      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 8005068:	060c      	lsls	r4, r1, #24
 800506a:	d05b      	beq.n	8005124 <__iar_annotation$$branch+0x7ce>
 800506c:	68e9      	ldr	r1, [r5, #12]
 800506e:	6989      	ldr	r1, [r1, #24]
 8005070:	2900      	cmp	r1, #0
 8005072:	d100      	bne.n	8005076 <__iar_annotation$$branch+0x720>
 8005074:	e268      	b.n	8005548 <__iar_annotation$$branch+0xbf2>
 8005076:	aa0b      	add	r2, sp, #44	; 0x2c
 8005078:	1d81      	adds	r1, r0, #6
 800507a:	7c28      	ldrb	r0, [r5, #16]
 800507c:	f000 fc55 	bl	800592a <PE_SVDM_CheckSVIDs>
 8005080:	ab0b      	add	r3, sp, #44	; 0x2c
 8005082:	0fa2      	lsrs	r2, r4, #30
 8005084:	2031      	movs	r0, #49	; 0x31
 8005086:	5c29      	ldrb	r1, [r5, r0]
 8005088:	7c28      	ldrb	r0, [r5, #16]
 800508a:	68ec      	ldr	r4, [r5, #12]
 800508c:	69a4      	ldr	r4, [r4, #24]
 800508e:	47a0      	blx	r4
 8005090:	2153      	movs	r1, #83	; 0x53
 8005092:	e077      	b.n	8005184 <__iar_annotation$$branch+0x82e>
 8005094:	6821      	ldr	r1, [r4, #0]
 8005096:	400e      	ands	r6, r1
 8005098:	6026      	str	r6, [r4, #0]
 800509a:	4030      	ands	r0, r6
 800509c:	2103      	movs	r1, #3
 800509e:	4301      	orrs	r1, r0
 80050a0:	6021      	str	r1, [r4, #0]
 80050a2:	8920      	ldrh	r0, [r4, #8]
 80050a4:	b28a      	uxth	r2, r1
 80050a6:	0401      	lsls	r1, r0, #16
 80050a8:	4311      	orrs	r1, r2
 80050aa:	6021      	str	r1, [r4, #0]
 80050ac:	2080      	movs	r0, #128	; 0x80
 80050ae:	0200      	lsls	r0, r0, #8
 80050b0:	4308      	orrs	r0, r1
 80050b2:	6020      	str	r0, [r4, #0]
 80050b4:	2101      	movs	r1, #1
 80050b6:	686a      	ldr	r2, [r5, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	0952      	lsrs	r2, r2, #5
 80050bc:	400a      	ands	r2, r1
 80050be:	4b9e      	ldr	r3, [pc, #632]	; (8005338 <__iar_annotation$$branch+0x9e2>)
 80050c0:	4003      	ands	r3, r0
 80050c2:	0350      	lsls	r0, r2, #13
 80050c4:	4318      	orrs	r0, r3
 80050c6:	6020      	str	r0, [r4, #0]
 80050c8:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <__iar_annotation$$branch+0x88e>)
 80050ca:	4002      	ands	r2, r0
 80050cc:	6022      	str	r2, [r4, #0]
 80050ce:	6868      	ldr	r0, [r5, #4]
 80050d0:	6800      	ldr	r0, [r0, #0]
 80050d2:	0880      	lsrs	r0, r0, #2
 80050d4:	4001      	ands	r1, r0
 80050d6:	d003      	beq.n	80050e0 <__iar_annotation$$branch+0x78a>
 80050d8:	6968      	ldr	r0, [r5, #20]
 80050da:	0741      	lsls	r1, r0, #29
 80050dc:	0fc8      	lsrs	r0, r1, #31
 80050de:	e000      	b.n	80050e2 <__iar_annotation$$branch+0x78c>
 80050e0:	2002      	movs	r0, #2
 80050e2:	9002      	str	r0, [sp, #8]
 80050e4:	208b      	movs	r0, #139	; 0x8b
 80050e6:	9001      	str	r0, [sp, #4]
 80050e8:	2001      	movs	r0, #1
 80050ea:	9000      	str	r0, [sp, #0]
 80050ec:	0023      	movs	r3, r4
 80050ee:	220f      	movs	r2, #15
 80050f0:	2031      	movs	r0, #49	; 0x31
 80050f2:	5c29      	ldrb	r1, [r5, r0]
 80050f4:	0028      	movs	r0, r5
 80050f6:	f7fc fbbe 	bl	8001876 <PE_Send_DataMessage>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d104      	bne.n	8005108 <__iar_annotation$$branch+0x7b2>
 80050fe:	2053      	movs	r0, #83	; 0x53
 8005100:	7728      	strb	r0, [r5, #28]
 8005102:	488e      	ldr	r0, [pc, #568]	; (800533c <__iar_annotation$$branch+0x9e6>)
 8005104:	83e8      	strh	r0, [r5, #30]
 8005106:	9704      	str	r7, [sp, #16]
 8005108:	e296      	b.n	8005638 <__iar_annotation$$branch+0xce2>
 800510a:	2031      	movs	r0, #49	; 0x31
 800510c:	5c28      	ldrb	r0, [r5, r0]
 800510e:	f7fb fde3 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 8005112:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005114:	7809      	ldrb	r1, [r1, #0]
 8005116:	4281      	cmp	r1, r0
 8005118:	d18c      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 800511a:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800511c:	0bc2      	lsrs	r2, r0, #15
 800511e:	d189      	bne.n	8005034 <__iar_annotation$$branch+0x6de>
 8005120:	0b02      	lsrs	r2, r0, #12
 8005122:	0752      	lsls	r2, r2, #29
 8005124:	d100      	bne.n	8005128 <__iar_annotation$$branch+0x7d2>
 8005126:	e151      	b.n	80053cc <__iar_annotation$$branch+0xa76>
 8005128:	06c0      	lsls	r0, r0, #27
 800512a:	0ec0      	lsrs	r0, r0, #27
 800512c:	280f      	cmp	r0, #15
 800512e:	d000      	beq.n	8005132 <__iar_annotation$$branch+0x7dc>
 8005130:	e14c      	b.n	80053cc <__iar_annotation$$branch+0xa76>
 8005132:	2914      	cmp	r1, #20
 8005134:	d005      	beq.n	8005142 <__iar_annotation$$branch+0x7ec>
 8005136:	2014      	movs	r0, #20
 8005138:	991c      	ldr	r1, [sp, #112]	; 0x70
 800513a:	7008      	strb	r0, [r1, #0]
 800513c:	0028      	movs	r0, r5
 800513e:	f7fb fd92 	bl	8000c66 <PE_Clear_RxEvent>
 8005142:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005144:	7881      	ldrb	r1, [r0, #2]
 8005146:	06ca      	lsls	r2, r1, #27
 8005148:	0ed2      	lsrs	r2, r2, #27
 800514a:	2a03      	cmp	r2, #3
 800514c:	d1ef      	bne.n	800512e <__iar_annotation$$branch+0x7d8>
 800514e:	098e      	lsrs	r6, r1, #6
 8005150:	d0e8      	beq.n	8005124 <__iar_annotation$$branch+0x7ce>
 8005152:	68e9      	ldr	r1, [r5, #12]
 8005154:	69c9      	ldr	r1, [r1, #28]
 8005156:	2900      	cmp	r1, #0
 8005158:	d017      	beq.n	800518a <__iar_annotation$$branch+0x834>
 800515a:	ab0b      	add	r3, sp, #44	; 0x2c
 800515c:	1d82      	adds	r2, r0, #6
 800515e:	6820      	ldr	r0, [r4, #0]
 8005160:	0c01      	lsrs	r1, r0, #16
 8005162:	7c28      	ldrb	r0, [r5, #16]
 8005164:	f000 fc22 	bl	80059ac <PE_SVDM_CheckModes>
 8005168:	2403      	movs	r4, #3
 800516a:	ab0b      	add	r3, sp, #44	; 0x2c
 800516c:	2203      	movs	r2, #3
 800516e:	4032      	ands	r2, r6
 8005170:	2031      	movs	r0, #49	; 0x31
 8005172:	5c29      	ldrb	r1, [r5, r0]
 8005174:	7c28      	ldrb	r0, [r5, #16]
 8005176:	68ef      	ldr	r7, [r5, #12]
 8005178:	69ff      	ldr	r7, [r7, #28]
 800517a:	47b8      	blx	r7
 800517c:	4034      	ands	r4, r6
 800517e:	2c01      	cmp	r4, #1
 8005180:	d103      	bne.n	800518a <__iar_annotation$$branch+0x834>
 8005182:	2154      	movs	r1, #84	; 0x54
 8005184:	7c28      	ldrb	r0, [r5, #16]
 8005186:	f7fb fb03 	bl	8000790 <USBPD_PE_Notification>
 800518a:	e1dd      	b.n	8005548 <__iar_annotation$$branch+0xbf2>
 800518c:	6821      	ldr	r1, [r4, #0]
 800518e:	400e      	ands	r6, r1
 8005190:	6026      	str	r6, [r4, #0]
 8005192:	4030      	ands	r0, r6
 8005194:	2104      	movs	r1, #4
 8005196:	4301      	orrs	r1, r0
 8005198:	6021      	str	r1, [r4, #0]
 800519a:	8920      	ldrh	r0, [r4, #8]
 800519c:	b289      	uxth	r1, r1
 800519e:	0400      	lsls	r0, r0, #16
 80051a0:	4308      	orrs	r0, r1
 80051a2:	6020      	str	r0, [r4, #0]
 80051a4:	2180      	movs	r1, #128	; 0x80
 80051a6:	0209      	lsls	r1, r1, #8
 80051a8:	4301      	orrs	r1, r0
 80051aa:	6021      	str	r1, [r4, #0]
 80051ac:	2001      	movs	r0, #1
 80051ae:	686a      	ldr	r2, [r5, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	0952      	lsrs	r2, r2, #5
 80051b4:	4002      	ands	r2, r0
 80051b6:	4b60      	ldr	r3, [pc, #384]	; (8005338 <__iar_annotation$$branch+0x9e2>)
 80051b8:	400b      	ands	r3, r1
 80051ba:	0351      	lsls	r1, r2, #13
 80051bc:	4319      	orrs	r1, r3
 80051be:	6021      	str	r1, [r4, #0]
 80051c0:	696a      	ldr	r2, [r5, #20]
 80051c2:	05d2      	lsls	r2, r2, #23
 80051c4:	0f52      	lsrs	r2, r2, #29
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <__iar_annotation$$branch+0x88e>)
 80051c8:	400b      	ands	r3, r1
 80051ca:	0211      	lsls	r1, r2, #8
 80051cc:	4319      	orrs	r1, r3
 80051ce:	6021      	str	r1, [r4, #0]
 80051d0:	6869      	ldr	r1, [r5, #4]
 80051d2:	6809      	ldr	r1, [r1, #0]
 80051d4:	0889      	lsrs	r1, r1, #2
 80051d6:	4008      	ands	r0, r1
 80051d8:	d006      	beq.n	80051e8 <__iar_annotation$$branch+0x892>
 80051da:	6968      	ldr	r0, [r5, #20]
 80051dc:	0741      	lsls	r1, r0, #29
 80051de:	0fc8      	lsrs	r0, r1, #31
 80051e0:	e003      	b.n	80051ea <__iar_annotation$$branch+0x894>
 80051e2:	bf00      	nop
 80051e4:	fffff8ff 	.word	0xfffff8ff
 80051e8:	2002      	movs	r0, #2
 80051ea:	9002      	str	r0, [sp, #8]
 80051ec:	208c      	movs	r0, #140	; 0x8c
 80051ee:	9001      	str	r0, [sp, #4]
 80051f0:	2001      	movs	r0, #1
 80051f2:	9000      	str	r0, [sp, #0]
 80051f4:	0023      	movs	r3, r4
 80051f6:	220f      	movs	r2, #15
 80051f8:	2031      	movs	r0, #49	; 0x31
 80051fa:	5c29      	ldrb	r1, [r5, r0]
 80051fc:	0028      	movs	r0, r5
 80051fe:	f7fc fb3a 	bl	8001876 <PE_Send_DataMessage>
 8005202:	2800      	cmp	r0, #0
 8005204:	d000      	beq.n	8005208 <__iar_annotation$$branch+0x8b2>
 8005206:	e217      	b.n	8005638 <__iar_annotation$$branch+0xce2>
 8005208:	2054      	movs	r0, #84	; 0x54
 800520a:	7728      	strb	r0, [r5, #28]
 800520c:	2134      	movs	r1, #52	; 0x34
 800520e:	e08c      	b.n	800532a <__iar_annotation$$branch+0x9d4>
 8005210:	2634      	movs	r6, #52	; 0x34
 8005212:	2031      	movs	r0, #49	; 0x31
 8005214:	5c28      	ldrb	r0, [r5, r0]
 8005216:	f7fb fd5f 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 800521a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800521c:	7809      	ldrb	r1, [r1, #0]
 800521e:	4281      	cmp	r1, r0
 8005220:	d144      	bne.n	80052ac <__iar_annotation$$branch+0x956>
 8005222:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8005224:	0bc2      	lsrs	r2, r0, #15
 8005226:	d141      	bne.n	80052ac <__iar_annotation$$branch+0x956>
 8005228:	2707      	movs	r7, #7
 800522a:	0b02      	lsrs	r2, r0, #12
 800522c:	423a      	tst	r2, r7
 800522e:	d03d      	beq.n	80052ac <__iar_annotation$$branch+0x956>
 8005230:	06c0      	lsls	r0, r0, #27
 8005232:	0ec0      	lsrs	r0, r0, #27
 8005234:	280f      	cmp	r0, #15
 8005236:	d139      	bne.n	80052ac <__iar_annotation$$branch+0x956>
 8005238:	2914      	cmp	r1, #20
 800523a:	d005      	beq.n	8005248 <__iar_annotation$$branch+0x8f2>
 800523c:	2014      	movs	r0, #20
 800523e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005240:	7008      	strb	r0, [r1, #0]
 8005242:	0028      	movs	r0, r5
 8005244:	f7fb fd0f 	bl	8000c66 <PE_Clear_RxEvent>
 8005248:	2000      	movs	r0, #0
 800524a:	7728      	strb	r0, [r5, #28]
 800524c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800524e:	7880      	ldrb	r0, [r0, #2]
 8005250:	06c1      	lsls	r1, r0, #27
 8005252:	0ec9      	lsrs	r1, r1, #27
 8005254:	2904      	cmp	r1, #4
 8005256:	d129      	bne.n	80052ac <__iar_annotation$$branch+0x956>
 8005258:	0980      	lsrs	r0, r0, #6
 800525a:	d027      	beq.n	80052ac <__iar_annotation$$branch+0x956>
 800525c:	9001      	str	r0, [sp, #4]
 800525e:	488f      	ldr	r0, [pc, #572]	; (800549c <__iar_annotation$$branch+0xb46>)
 8005260:	9901      	ldr	r1, [sp, #4]
 8005262:	2901      	cmp	r1, #1
 8005264:	d004      	beq.n	8005270 <__iar_annotation$$branch+0x91a>
 8005266:	d30e      	bcc.n	8005286 <__iar_annotation$$branch+0x930>
 8005268:	2903      	cmp	r1, #3
 800526a:	d008      	beq.n	800527e <__iar_annotation$$branch+0x928>
 800526c:	d302      	bcc.n	8005274 <__iar_annotation$$branch+0x91e>
 800526e:	e00a      	b.n	8005286 <__iar_annotation$$branch+0x930>
 8005270:	2635      	movs	r6, #53	; 0x35
 8005272:	e008      	b.n	8005286 <__iar_annotation$$branch+0x930>
 8005274:	6969      	ldr	r1, [r5, #20]
 8005276:	4008      	ands	r0, r1
 8005278:	6168      	str	r0, [r5, #20]
 800527a:	2636      	movs	r6, #54	; 0x36
 800527c:	e003      	b.n	8005286 <__iar_annotation$$branch+0x930>
 800527e:	6969      	ldr	r1, [r5, #20]
 8005280:	4008      	ands	r0, r1
 8005282:	6168      	str	r0, [r5, #20]
 8005284:	2637      	movs	r6, #55	; 0x37
 8005286:	0031      	movs	r1, r6
 8005288:	7c28      	ldrb	r0, [r5, #16]
 800528a:	f7fb fa81 	bl	8000790 <USBPD_PE_Notification>
 800528e:	68e8      	ldr	r0, [r5, #12]
 8005290:	6a06      	ldr	r6, [r0, #32]
 8005292:	2e00      	cmp	r6, #0
 8005294:	d009      	beq.n	80052aa <__iar_annotation$$branch+0x954>
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	0a01      	lsrs	r1, r0, #8
 800529a:	400f      	ands	r7, r1
 800529c:	9700      	str	r7, [sp, #0]
 800529e:	0c03      	lsrs	r3, r0, #16
 80052a0:	9a01      	ldr	r2, [sp, #4]
 80052a2:	2031      	movs	r0, #49	; 0x31
 80052a4:	5c29      	ldrb	r1, [r5, r0]
 80052a6:	7c28      	ldrb	r0, [r5, #16]
 80052a8:	47b0      	blx	r6
 80052aa:	e14d      	b.n	8005548 <__iar_annotation$$branch+0xbf2>
 80052ac:	5da8      	ldrb	r0, [r5, r6]
 80052ae:	e08f      	b.n	80053d0 <__iar_annotation$$branch+0xa7a>
 80052b0:	6821      	ldr	r1, [r4, #0]
 80052b2:	400e      	ands	r6, r1
 80052b4:	6026      	str	r6, [r4, #0]
 80052b6:	4030      	ands	r0, r6
 80052b8:	2105      	movs	r1, #5
 80052ba:	4301      	orrs	r1, r0
 80052bc:	6021      	str	r1, [r4, #0]
 80052be:	8920      	ldrh	r0, [r4, #8]
 80052c0:	b289      	uxth	r1, r1
 80052c2:	0400      	lsls	r0, r0, #16
 80052c4:	4308      	orrs	r0, r1
 80052c6:	6020      	str	r0, [r4, #0]
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	0209      	lsls	r1, r1, #8
 80052cc:	4301      	orrs	r1, r0
 80052ce:	6021      	str	r1, [r4, #0]
 80052d0:	2001      	movs	r0, #1
 80052d2:	686a      	ldr	r2, [r5, #4]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	0952      	lsrs	r2, r2, #5
 80052d8:	4002      	ands	r2, r0
 80052da:	4b17      	ldr	r3, [pc, #92]	; (8005338 <__iar_annotation$$branch+0x9e2>)
 80052dc:	400b      	ands	r3, r1
 80052de:	0351      	lsls	r1, r2, #13
 80052e0:	4319      	orrs	r1, r3
 80052e2:	6021      	str	r1, [r4, #0]
 80052e4:	696a      	ldr	r2, [r5, #20]
 80052e6:	05d2      	lsls	r2, r2, #23
 80052e8:	0f52      	lsrs	r2, r2, #29
 80052ea:	4b6d      	ldr	r3, [pc, #436]	; (80054a0 <__iar_annotation$$branch+0xb4a>)
 80052ec:	400b      	ands	r3, r1
 80052ee:	0211      	lsls	r1, r2, #8
 80052f0:	4319      	orrs	r1, r3
 80052f2:	6021      	str	r1, [r4, #0]
 80052f4:	6869      	ldr	r1, [r5, #4]
 80052f6:	6809      	ldr	r1, [r1, #0]
 80052f8:	0889      	lsrs	r1, r1, #2
 80052fa:	4008      	ands	r0, r1
 80052fc:	d003      	beq.n	8005306 <__iar_annotation$$branch+0x9b0>
 80052fe:	6968      	ldr	r0, [r5, #20]
 8005300:	0741      	lsls	r1, r0, #29
 8005302:	0fc8      	lsrs	r0, r1, #31
 8005304:	e000      	b.n	8005308 <__iar_annotation$$branch+0x9b2>
 8005306:	2002      	movs	r0, #2
 8005308:	9002      	str	r0, [sp, #8]
 800530a:	208d      	movs	r0, #141	; 0x8d
 800530c:	9001      	str	r0, [sp, #4]
 800530e:	2001      	movs	r0, #1
 8005310:	9000      	str	r0, [sp, #0]
 8005312:	0023      	movs	r3, r4
 8005314:	220f      	movs	r2, #15
 8005316:	2031      	movs	r0, #49	; 0x31
 8005318:	5c29      	ldrb	r1, [r5, r0]
 800531a:	0028      	movs	r0, r5
 800531c:	f7fc faab 	bl	8001876 <PE_Send_DataMessage>
 8005320:	2800      	cmp	r0, #0
 8005322:	d15e      	bne.n	80053e2 <__iar_annotation$$branch+0xa8c>
 8005324:	2055      	movs	r0, #85	; 0x55
 8005326:	7728      	strb	r0, [r5, #28]
 8005328:	2155      	movs	r1, #85	; 0x55
 800532a:	7c28      	ldrb	r0, [r5, #16]
 800532c:	f7fb fa30 	bl	8000790 <USBPD_PE_Notification>
 8005330:	48c3      	ldr	r0, [pc, #780]	; (8005640 <.text_19>)
 8005332:	83e8      	strh	r0, [r5, #30]
 8005334:	2032      	movs	r0, #50	; 0x32
 8005336:	e12c      	b.n	8005592 <__iar_annotation$$branch+0xc3c>
 8005338:	ffff9fff 	.word	0xffff9fff
 800533c:	0000801e 	.word	0x0000801e
 8005340:	2031      	movs	r0, #49	; 0x31
 8005342:	5c28      	ldrb	r0, [r5, r0]
 8005344:	f7fb fcc8 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 8005348:	991c      	ldr	r1, [sp, #112]	; 0x70
 800534a:	7809      	ldrb	r1, [r1, #0]
 800534c:	4281      	cmp	r1, r0
 800534e:	d13d      	bne.n	80053cc <__iar_annotation$$branch+0xa76>
 8005350:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8005352:	0bc2      	lsrs	r2, r0, #15
 8005354:	d13a      	bne.n	80053cc <__iar_annotation$$branch+0xa76>
 8005356:	2607      	movs	r6, #7
 8005358:	0b02      	lsrs	r2, r0, #12
 800535a:	4232      	tst	r2, r6
 800535c:	d036      	beq.n	80053cc <__iar_annotation$$branch+0xa76>
 800535e:	06c0      	lsls	r0, r0, #27
 8005360:	0ec0      	lsrs	r0, r0, #27
 8005362:	280f      	cmp	r0, #15
 8005364:	d132      	bne.n	80053cc <__iar_annotation$$branch+0xa76>
 8005366:	2914      	cmp	r1, #20
 8005368:	d005      	beq.n	8005376 <__iar_annotation$$branch+0xa20>
 800536a:	2014      	movs	r0, #20
 800536c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800536e:	7008      	strb	r0, [r1, #0]
 8005370:	0028      	movs	r0, r5
 8005372:	f7fb fc78 	bl	8000c66 <PE_Clear_RxEvent>
 8005376:	2000      	movs	r0, #0
 8005378:	7728      	strb	r0, [r5, #28]
 800537a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800537c:	7880      	ldrb	r0, [r0, #2]
 800537e:	06c1      	lsls	r1, r0, #27
 8005380:	0ec9      	lsrs	r1, r1, #27
 8005382:	2905      	cmp	r1, #5
 8005384:	d122      	bne.n	80053cc <__iar_annotation$$branch+0xa76>
 8005386:	0980      	lsrs	r0, r0, #6
 8005388:	d020      	beq.n	80053cc <__iar_annotation$$branch+0xa76>
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2801      	cmp	r0, #1
 800538e:	d004      	beq.n	800539a <__iar_annotation$$branch+0xa44>
 8005390:	d309      	bcc.n	80053a6 <__iar_annotation$$branch+0xa50>
 8005392:	2803      	cmp	r0, #3
 8005394:	d005      	beq.n	80053a2 <__iar_annotation$$branch+0xa4c>
 8005396:	d302      	bcc.n	800539e <__iar_annotation$$branch+0xa48>
 8005398:	e005      	b.n	80053a6 <__iar_annotation$$branch+0xa50>
 800539a:	2156      	movs	r1, #86	; 0x56
 800539c:	e004      	b.n	80053a8 <__iar_annotation$$branch+0xa52>
 800539e:	2157      	movs	r1, #87	; 0x57
 80053a0:	e002      	b.n	80053a8 <__iar_annotation$$branch+0xa52>
 80053a2:	2158      	movs	r1, #88	; 0x58
 80053a4:	e000      	b.n	80053a8 <__iar_annotation$$branch+0xa52>
 80053a6:	2155      	movs	r1, #85	; 0x55
 80053a8:	7c28      	ldrb	r0, [r5, #16]
 80053aa:	f7fb f9f1 	bl	8000790 <USBPD_PE_Notification>
 80053ae:	68e8      	ldr	r0, [r5, #12]
 80053b0:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80053b2:	2f00      	cmp	r7, #0
 80053b4:	d009      	beq.n	80053ca <__iar_annotation$$branch+0xa74>
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	0a01      	lsrs	r1, r0, #8
 80053ba:	400e      	ands	r6, r1
 80053bc:	9600      	str	r6, [sp, #0]
 80053be:	0c03      	lsrs	r3, r0, #16
 80053c0:	9a01      	ldr	r2, [sp, #4]
 80053c2:	2031      	movs	r0, #49	; 0x31
 80053c4:	5c29      	ldrb	r1, [r5, r0]
 80053c6:	7c28      	ldrb	r0, [r5, #16]
 80053c8:	47b8      	blx	r7
 80053ca:	e0bd      	b.n	8005548 <__iar_annotation$$branch+0xbf2>
 80053cc:	2034      	movs	r0, #52	; 0x34
 80053ce:	5c28      	ldrb	r0, [r5, r0]
 80053d0:	06c0      	lsls	r0, r0, #27
 80053d2:	0ec0      	lsrs	r0, r0, #27
 80053d4:	2810      	cmp	r0, #16
 80053d6:	d100      	bne.n	80053da <__iar_annotation$$branch+0xa84>
 80053d8:	e0bf      	b.n	800555a <__iar_annotation$$branch+0xc04>
 80053da:	8be8      	ldrh	r0, [r5, #30]
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	0209      	lsls	r1, r1, #8
 80053e0:	4288      	cmp	r0, r1
 80053e2:	d000      	beq.n	80053e6 <__iar_annotation$$branch+0xa90>
 80053e4:	e128      	b.n	8005638 <__iar_annotation$$branch+0xce2>
 80053e6:	e0d1      	b.n	800558c <__iar_annotation$$branch+0xc36>
 80053e8:	2100      	movs	r1, #0
 80053ea:	466a      	mov	r2, sp
 80053ec:	7311      	strb	r1, [r2, #12]
 80053ee:	6821      	ldr	r1, [r4, #0]
 80053f0:	400e      	ands	r6, r1
 80053f2:	6026      	str	r6, [r4, #0]
 80053f4:	6861      	ldr	r1, [r4, #4]
 80053f6:	4030      	ands	r0, r6
 80053f8:	06c9      	lsls	r1, r1, #27
 80053fa:	0ec9      	lsrs	r1, r1, #27
 80053fc:	4301      	orrs	r1, r0
 80053fe:	6021      	str	r1, [r4, #0]
 8005400:	8920      	ldrh	r0, [r4, #8]
 8005402:	b28a      	uxth	r2, r1
 8005404:	0401      	lsls	r1, r0, #16
 8005406:	4311      	orrs	r1, r2
 8005408:	6021      	str	r1, [r4, #0]
 800540a:	2080      	movs	r0, #128	; 0x80
 800540c:	0200      	lsls	r0, r0, #8
 800540e:	4308      	orrs	r0, r1
 8005410:	6020      	str	r0, [r4, #0]
 8005412:	2601      	movs	r6, #1
 8005414:	6869      	ldr	r1, [r5, #4]
 8005416:	6809      	ldr	r1, [r1, #0]
 8005418:	0949      	lsrs	r1, r1, #5
 800541a:	4031      	ands	r1, r6
 800541c:	4aaa      	ldr	r2, [pc, #680]	; (80056c8 <.text_21>)
 800541e:	4002      	ands	r2, r0
 8005420:	0348      	lsls	r0, r1, #13
 8005422:	4310      	orrs	r0, r2
 8005424:	6020      	str	r0, [r4, #0]
 8005426:	491e      	ldr	r1, [pc, #120]	; (80054a0 <__iar_annotation$$branch+0xb4a>)
 8005428:	4001      	ands	r1, r0
 800542a:	0230      	lsls	r0, r6, #8
 800542c:	4308      	orrs	r0, r1
 800542e:	6020      	str	r0, [r4, #0]
 8005430:	9005      	str	r0, [sp, #20]
 8005432:	68e8      	ldr	r0, [r5, #12]
 8005434:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005436:	9001      	str	r0, [sp, #4]
 8005438:	2800      	cmp	r0, #0
 800543a:	d00b      	beq.n	8005454 <__iar_annotation$$branch+0xafe>
 800543c:	a805      	add	r0, sp, #20
 800543e:	1d00      	adds	r0, r0, #4
 8005440:	9000      	str	r0, [sp, #0]
 8005442:	ab03      	add	r3, sp, #12
 8005444:	7820      	ldrb	r0, [r4, #0]
 8005446:	06c2      	lsls	r2, r0, #27
 8005448:	0ed2      	lsrs	r2, r2, #27
 800544a:	2031      	movs	r0, #49	; 0x31
 800544c:	5c29      	ldrb	r1, [r5, r0]
 800544e:	7c28      	ldrb	r0, [r5, #16]
 8005450:	9c01      	ldr	r4, [sp, #4]
 8005452:	47a0      	blx	r4
 8005454:	4668      	mov	r0, sp
 8005456:	7b00      	ldrb	r0, [r0, #12]
 8005458:	1c40      	adds	r0, r0, #1
 800545a:	4669      	mov	r1, sp
 800545c:	7308      	strb	r0, [r1, #12]
 800545e:	6868      	ldr	r0, [r5, #4]
 8005460:	6800      	ldr	r0, [r0, #0]
 8005462:	0880      	lsrs	r0, r0, #2
 8005464:	4006      	ands	r6, r0
 8005466:	d003      	beq.n	8005470 <__iar_annotation$$branch+0xb1a>
 8005468:	6968      	ldr	r0, [r5, #20]
 800546a:	0741      	lsls	r1, r0, #29
 800546c:	0fc8      	lsrs	r0, r1, #31
 800546e:	e000      	b.n	8005472 <__iar_annotation$$branch+0xb1c>
 8005470:	2002      	movs	r0, #2
 8005472:	9002      	str	r0, [sp, #8]
 8005474:	208f      	movs	r0, #143	; 0x8f
 8005476:	9001      	str	r0, [sp, #4]
 8005478:	4668      	mov	r0, sp
 800547a:	7b00      	ldrb	r0, [r0, #12]
 800547c:	9000      	str	r0, [sp, #0]
 800547e:	ab05      	add	r3, sp, #20
 8005480:	220f      	movs	r2, #15
 8005482:	2031      	movs	r0, #49	; 0x31
 8005484:	5c29      	ldrb	r1, [r5, r0]
 8005486:	0028      	movs	r0, r5
 8005488:	f7fc f9f5 	bl	8001876 <PE_Send_DataMessage>
 800548c:	2800      	cmp	r0, #0
 800548e:	d104      	bne.n	800549a <__iar_annotation$$branch+0xb44>
 8005490:	205a      	movs	r0, #90	; 0x5a
 8005492:	7728      	strb	r0, [r5, #28]
 8005494:	48bf      	ldr	r0, [pc, #764]	; (8005794 <.text_23>)
 8005496:	83e8      	strh	r0, [r5, #30]
 8005498:	9704      	str	r7, [sp, #16]
 800549a:	e0ca      	b.n	8005632 <__iar_annotation$$branch+0xcdc>
 800549c:	fffffe3f 	.word	0xfffffe3f
 80054a0:	fffff8ff 	.word	0xfffff8ff
 80054a4:	2607      	movs	r6, #7
 80054a6:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80054a8:	0b00      	lsrs	r0, r0, #12
 80054aa:	2107      	movs	r1, #7
 80054ac:	4001      	ands	r1, r0
 80054ae:	1e48      	subs	r0, r1, #1
 80054b0:	4669      	mov	r1, sp
 80054b2:	7108      	strb	r0, [r1, #4]
 80054b4:	2031      	movs	r0, #49	; 0x31
 80054b6:	5c28      	ldrb	r0, [r5, r0]
 80054b8:	f7fb fc0e 	bl	8000cd8 <PE_Convert_SOPRxEvent>
 80054bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054be:	7809      	ldrb	r1, [r1, #0]
 80054c0:	4281      	cmp	r1, r0
 80054c2:	d144      	bne.n	800554e <__iar_annotation$$branch+0xbf8>
 80054c4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80054c6:	0bc2      	lsrs	r2, r0, #15
 80054c8:	d141      	bne.n	800554e <__iar_annotation$$branch+0xbf8>
 80054ca:	0b02      	lsrs	r2, r0, #12
 80054cc:	4232      	tst	r2, r6
 80054ce:	d03e      	beq.n	800554e <__iar_annotation$$branch+0xbf8>
 80054d0:	06c0      	lsls	r0, r0, #27
 80054d2:	0ec0      	lsrs	r0, r0, #27
 80054d4:	280f      	cmp	r0, #15
 80054d6:	d13a      	bne.n	800554e <__iar_annotation$$branch+0xbf8>
 80054d8:	2914      	cmp	r1, #20
 80054da:	d005      	beq.n	80054e8 <__iar_annotation$$branch+0xb92>
 80054dc:	2014      	movs	r0, #20
 80054de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054e0:	7008      	strb	r0, [r1, #0]
 80054e2:	0028      	movs	r0, r5
 80054e4:	f7fb fbbf 	bl	8000c66 <PE_Clear_RxEvent>
 80054e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80054ea:	7880      	ldrb	r0, [r0, #2]
 80054ec:	06c1      	lsls	r1, r0, #27
 80054ee:	0ec9      	lsrs	r1, r1, #27
 80054f0:	6862      	ldr	r2, [r4, #4]
 80054f2:	4291      	cmp	r1, r2
 80054f4:	d12b      	bne.n	800554e <__iar_annotation$$branch+0xbf8>
 80054f6:	0981      	lsrs	r1, r0, #6
 80054f8:	d029      	beq.n	800554e <__iar_annotation$$branch+0xbf8>
 80054fa:	68e9      	ldr	r1, [r5, #12]
 80054fc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80054fe:	2900      	cmp	r1, #0
 8005500:	d022      	beq.n	8005548 <__iar_annotation$$branch+0xbf2>
 8005502:	2600      	movs	r6, #0
 8005504:	e011      	b.n	800552a <__iar_annotation$$branch+0xbd4>
 8005506:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005508:	00b2      	lsls	r2, r6, #2
 800550a:	188b      	adds	r3, r1, r2
 800550c:	799c      	ldrb	r4, [r3, #6]
 800550e:	79df      	ldrb	r7, [r3, #7]
 8005510:	023f      	lsls	r7, r7, #8
 8005512:	19e4      	adds	r4, r4, r7
 8005514:	3108      	adds	r1, #8
 8005516:	5c89      	ldrb	r1, [r1, r2]
 8005518:	0409      	lsls	r1, r1, #16
 800551a:	1861      	adds	r1, r4, r1
 800551c:	7a5a      	ldrb	r2, [r3, #9]
 800551e:	0612      	lsls	r2, r2, #24
 8005520:	1889      	adds	r1, r1, r2
 8005522:	aa05      	add	r2, sp, #20
 8005524:	00b3      	lsls	r3, r6, #2
 8005526:	50d1      	str	r1, [r2, r3]
 8005528:	1c76      	adds	r6, r6, #1
 800552a:	4669      	mov	r1, sp
 800552c:	7909      	ldrb	r1, [r1, #4]
 800552e:	428e      	cmp	r6, r1
 8005530:	d3e9      	bcc.n	8005506 <__iar_annotation$$branch+0xbb0>
 8005532:	a905      	add	r1, sp, #20
 8005534:	9100      	str	r1, [sp, #0]
 8005536:	ab01      	add	r3, sp, #4
 8005538:	06c2      	lsls	r2, r0, #27
 800553a:	0ed2      	lsrs	r2, r2, #27
 800553c:	2031      	movs	r0, #49	; 0x31
 800553e:	5c29      	ldrb	r1, [r5, r0]
 8005540:	7c28      	ldrb	r0, [r5, #16]
 8005542:	68ec      	ldr	r4, [r5, #12]
 8005544:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005546:	47a0      	blx	r4
 8005548:	2000      	movs	r0, #0
 800554a:	83e8      	strh	r0, [r5, #30]
 800554c:	e01e      	b.n	800558c <__iar_annotation$$branch+0xc36>
 800554e:	2034      	movs	r0, #52	; 0x34
 8005550:	5c28      	ldrb	r0, [r5, r0]
 8005552:	06c0      	lsls	r0, r0, #27
 8005554:	0ec0      	lsrs	r0, r0, #27
 8005556:	2810      	cmp	r0, #16
 8005558:	d113      	bne.n	8005582 <__iar_annotation$$branch+0xc2c>
 800555a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800555c:	7800      	ldrb	r0, [r0, #0]
 800555e:	2814      	cmp	r0, #20
 8005560:	d005      	beq.n	800556e <__iar_annotation$$branch+0xc18>
 8005562:	2014      	movs	r0, #20
 8005564:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005566:	7008      	strb	r0, [r1, #0]
 8005568:	0028      	movs	r0, r5
 800556a:	f7fb fb7c 	bl	8000c66 <PE_Clear_RxEvent>
 800556e:	2000      	movs	r0, #0
 8005570:	83e8      	strh	r0, [r5, #30]
 8005572:	2103      	movs	r1, #3
 8005574:	7469      	strb	r1, [r5, #17]
 8005576:	9004      	str	r0, [sp, #16]
 8005578:	2159      	movs	r1, #89	; 0x59
 800557a:	7c28      	ldrb	r0, [r5, #16]
 800557c:	f7fb f908 	bl	8000790 <USBPD_PE_Notification>
 8005580:	e05a      	b.n	8005638 <__iar_annotation$$branch+0xce2>
 8005582:	8be8      	ldrh	r0, [r5, #30]
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	0209      	lsls	r1, r1, #8
 8005588:	4288      	cmp	r0, r1
 800558a:	d155      	bne.n	8005638 <__iar_annotation$$branch+0xce2>
 800558c:	2003      	movs	r0, #3
 800558e:	7468      	strb	r0, [r5, #17]
 8005590:	2000      	movs	r0, #0
 8005592:	9004      	str	r0, [sp, #16]
 8005594:	e050      	b.n	8005638 <__iar_annotation$$branch+0xce2>
 8005596:	2100      	movs	r1, #0
 8005598:	466a      	mov	r2, sp
 800559a:	7311      	strb	r1, [r2, #12]
 800559c:	6821      	ldr	r1, [r4, #0]
 800559e:	400e      	ands	r6, r1
 80055a0:	6026      	str	r6, [r4, #0]
 80055a2:	6861      	ldr	r1, [r4, #4]
 80055a4:	4030      	ands	r0, r6
 80055a6:	06c9      	lsls	r1, r1, #27
 80055a8:	0ec9      	lsrs	r1, r1, #27
 80055aa:	4301      	orrs	r1, r0
 80055ac:	6021      	str	r1, [r4, #0]
 80055ae:	8920      	ldrh	r0, [r4, #8]
 80055b0:	b28a      	uxth	r2, r1
 80055b2:	0401      	lsls	r1, r0, #16
 80055b4:	4311      	orrs	r1, r2
 80055b6:	6021      	str	r1, [r4, #0]
 80055b8:	2080      	movs	r0, #128	; 0x80
 80055ba:	0200      	lsls	r0, r0, #8
 80055bc:	4308      	orrs	r0, r1
 80055be:	6020      	str	r0, [r4, #0]
 80055c0:	2601      	movs	r6, #1
 80055c2:	6869      	ldr	r1, [r5, #4]
 80055c4:	6809      	ldr	r1, [r1, #0]
 80055c6:	0949      	lsrs	r1, r1, #5
 80055c8:	4031      	ands	r1, r6
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <.text_21>)
 80055cc:	4002      	ands	r2, r0
 80055ce:	0348      	lsls	r0, r1, #13
 80055d0:	4310      	orrs	r0, r2
 80055d2:	6020      	str	r0, [r4, #0]
 80055d4:	4970      	ldr	r1, [pc, #448]	; (8005798 <.text_24>)
 80055d6:	4001      	ands	r1, r0
 80055d8:	0230      	lsls	r0, r6, #8
 80055da:	4308      	orrs	r0, r1
 80055dc:	6020      	str	r0, [r4, #0]
 80055de:	9005      	str	r0, [sp, #20]
 80055e0:	68e8      	ldr	r0, [r5, #12]
 80055e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <__iar_annotation$$branch+0xc9c>
 80055e8:	a805      	add	r0, sp, #20
 80055ea:	1d02      	adds	r2, r0, #4
 80055ec:	a903      	add	r1, sp, #12
 80055ee:	7c28      	ldrb	r0, [r5, #16]
 80055f0:	4798      	blx	r3
 80055f2:	4668      	mov	r0, sp
 80055f4:	7b00      	ldrb	r0, [r0, #12]
 80055f6:	1c40      	adds	r0, r0, #1
 80055f8:	4669      	mov	r1, sp
 80055fa:	7308      	strb	r0, [r1, #12]
 80055fc:	6868      	ldr	r0, [r5, #4]
 80055fe:	6800      	ldr	r0, [r0, #0]
 8005600:	0880      	lsrs	r0, r0, #2
 8005602:	4006      	ands	r6, r0
 8005604:	d003      	beq.n	800560e <__iar_annotation$$branch+0xcb8>
 8005606:	6968      	ldr	r0, [r5, #20]
 8005608:	0741      	lsls	r1, r0, #29
 800560a:	0fc8      	lsrs	r0, r1, #31
 800560c:	e000      	b.n	8005610 <__iar_annotation$$branch+0xcba>
 800560e:	2002      	movs	r0, #2
 8005610:	9002      	str	r0, [sp, #8]
 8005612:	2003      	movs	r0, #3
 8005614:	9001      	str	r0, [sp, #4]
 8005616:	4668      	mov	r0, sp
 8005618:	7b00      	ldrb	r0, [r0, #12]
 800561a:	9000      	str	r0, [sp, #0]
 800561c:	ab05      	add	r3, sp, #20
 800561e:	220f      	movs	r2, #15
 8005620:	2031      	movs	r0, #49	; 0x31
 8005622:	5c29      	ldrb	r1, [r5, r0]
 8005624:	0028      	movs	r0, r5
 8005626:	f7fc f926 	bl	8001876 <PE_Send_DataMessage>
 800562a:	2800      	cmp	r0, #0
 800562c:	d101      	bne.n	8005632 <__iar_annotation$$branch+0xcdc>
 800562e:	205a      	movs	r0, #90	; 0x5a
 8005630:	7728      	strb	r0, [r5, #28]
 8005632:	2000      	movs	r0, #0
 8005634:	2132      	movs	r1, #50	; 0x32
 8005636:	5468      	strb	r0, [r5, r1]
 8005638:	9804      	ldr	r0, [sp, #16]
 800563a:	b01d      	add	sp, #116	; 0x74
 800563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005640 <.text_19>:
 8005640:	00008032 	.word	0x00008032

08005644 <PE_StateMachine_UVDM>:
 8005644:	2914      	cmp	r1, #20
 8005646:	d000      	beq.n	800564a <PE_StateMachine_UVDM+0x6>
 8005648:	4770      	bx	lr
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	b08c      	sub	sp, #48	; 0x30
 800564e:	0004      	movs	r4, r0
 8005650:	68e0      	ldr	r0, [r4, #12]
 8005652:	2800      	cmp	r0, #0
 8005654:	d035      	beq.n	80056c2 <PE_StateMachine_UVDM+0x7e>
 8005656:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8005658:	2800      	cmp	r0, #0
 800565a:	d032      	beq.n	80056c2 <PE_StateMachine_UVDM+0x7e>
 800565c:	2500      	movs	r5, #0
 800565e:	4669      	mov	r1, sp
 8005660:	730d      	strb	r5, [r1, #12]
 8005662:	a805      	add	r0, sp, #20
 8005664:	1d03      	adds	r3, r0, #4
 8005666:	aa03      	add	r2, sp, #12
 8005668:	a904      	add	r1, sp, #16
 800566a:	7c20      	ldrb	r0, [r4, #16]
 800566c:	68e6      	ldr	r6, [r4, #12]
 800566e:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005670:	47b0      	blx	r6
 8005672:	9804      	ldr	r0, [sp, #16]
 8005674:	49cc      	ldr	r1, [pc, #816]	; (80059a8 <.text_27>)
 8005676:	4001      	ands	r1, r0
 8005678:	9104      	str	r1, [sp, #16]
 800567a:	4668      	mov	r0, sp
 800567c:	7b00      	ldrb	r0, [r0, #12]
 800567e:	1c40      	adds	r0, r0, #1
 8005680:	4669      	mov	r1, sp
 8005682:	7308      	strb	r0, [r1, #12]
 8005684:	9804      	ldr	r0, [sp, #16]
 8005686:	9005      	str	r0, [sp, #20]
 8005688:	6860      	ldr	r0, [r4, #4]
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	0741      	lsls	r1, r0, #29
 800568e:	0fc9      	lsrs	r1, r1, #31
 8005690:	d003      	beq.n	800569a <PE_StateMachine_UVDM+0x56>
 8005692:	6960      	ldr	r0, [r4, #20]
 8005694:	0741      	lsls	r1, r0, #29
 8005696:	0fc8      	lsrs	r0, r1, #31
 8005698:	e000      	b.n	800569c <PE_StateMachine_UVDM+0x58>
 800569a:	2002      	movs	r0, #2
 800569c:	9002      	str	r0, [sp, #8]
 800569e:	2003      	movs	r0, #3
 80056a0:	9001      	str	r0, [sp, #4]
 80056a2:	4668      	mov	r0, sp
 80056a4:	7b00      	ldrb	r0, [r0, #12]
 80056a6:	9000      	str	r0, [sp, #0]
 80056a8:	ab05      	add	r3, sp, #20
 80056aa:	220f      	movs	r2, #15
 80056ac:	2031      	movs	r0, #49	; 0x31
 80056ae:	5c21      	ldrb	r1, [r4, r0]
 80056b0:	0020      	movs	r0, r4
 80056b2:	f7fc f8e0 	bl	8001876 <PE_Send_DataMessage>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d101      	bne.n	80056be <PE_StateMachine_UVDM+0x7a>
 80056ba:	2059      	movs	r0, #89	; 0x59
 80056bc:	7720      	strb	r0, [r4, #28]
 80056be:	2032      	movs	r0, #50	; 0x32
 80056c0:	5425      	strb	r5, [r4, r0]
 80056c2:	b00c      	add	sp, #48	; 0x30
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080056c8 <.text_21>:
 80056c8:	ffff9fff 	.word	0xffff9fff

080056cc <PE_Check_DataMessageVDM>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	2403      	movs	r4, #3
 80056d0:	2501      	movs	r5, #1
 80056d2:	6801      	ldr	r1, [r0, #0]
 80056d4:	6849      	ldr	r1, [r1, #4]
 80056d6:	0949      	lsrs	r1, r1, #5
 80056d8:	4029      	ands	r1, r5
 80056da:	d102      	bne.n	80056e2 <PE_Check_DataMessageVDM+0x16>
 80056dc:	68c1      	ldr	r1, [r0, #12]
 80056de:	2900      	cmp	r1, #0
 80056e0:	d01c      	beq.n	800571c <PE_Check_DataMessageVDM+0x50>
 80056e2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80056e4:	788a      	ldrb	r2, [r1, #2]
 80056e6:	78cb      	ldrb	r3, [r1, #3]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	18d2      	adds	r2, r2, r3
 80056ec:	790b      	ldrb	r3, [r1, #4]
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	18d2      	adds	r2, r2, r3
 80056f2:	7949      	ldrb	r1, [r1, #5]
 80056f4:	0609      	lsls	r1, r1, #24
 80056f6:	1851      	adds	r1, r2, r1
 80056f8:	9100      	str	r1, [sp, #0]
 80056fa:	0bca      	lsrs	r2, r1, #15
 80056fc:	402a      	ands	r2, r5
 80056fe:	d014      	beq.n	800572a <PE_Check_DataMessageVDM+0x5e>
 8005700:	2394      	movs	r3, #148	; 0x94
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	50c1      	str	r1, [r0, r3]
 8005706:	0989      	lsrs	r1, r1, #6
 8005708:	4021      	ands	r1, r4
 800570a:	d107      	bne.n	800571c <PE_Check_DataMessageVDM+0x50>
 800570c:	6801      	ldr	r1, [r0, #0]
 800570e:	6849      	ldr	r1, [r1, #4]
 8005710:	0a09      	lsrs	r1, r1, #8
 8005712:	4029      	ands	r1, r5
 8005714:	d002      	beq.n	800571c <PE_Check_DataMessageVDM+0x50>
 8005716:	f7ff f840 	bl	800479a <PE_Receive_SVDM>
 800571a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800571c:	6841      	ldr	r1, [r0, #4]
 800571e:	6809      	ldr	r1, [r1, #0]
 8005720:	400c      	ands	r4, r1
 8005722:	2c02      	cmp	r4, #2
 8005724:	d134      	bne.n	8005790 <PE_Check_DataMessageVDM+0xc4>
 8005726:	7445      	strb	r5, [r0, #17]
 8005728:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800572a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 800572c:	0449      	lsls	r1, r1, #17
 800572e:	0f49      	lsrs	r1, r1, #29
 8005730:	1e49      	subs	r1, r1, #1
 8005732:	4ab1      	ldr	r2, [pc, #708]	; (80059f8 <.text_29>)
 8005734:	5481      	strb	r1, [r0, r2]
 8005736:	0006      	movs	r6, r0
 8005738:	2000      	movs	r0, #0
 800573a:	e00f      	b.n	800575c <PE_Check_DataMessageVDM+0x90>
 800573c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800573e:	0082      	lsls	r2, r0, #2
 8005740:	1889      	adds	r1, r1, r2
 8005742:	798a      	ldrb	r2, [r1, #6]
 8005744:	79cf      	ldrb	r7, [r1, #7]
 8005746:	023f      	lsls	r7, r7, #8
 8005748:	19d2      	adds	r2, r2, r7
 800574a:	7a0f      	ldrb	r7, [r1, #8]
 800574c:	043f      	lsls	r7, r7, #16
 800574e:	19d2      	adds	r2, r2, r7
 8005750:	7a49      	ldrb	r1, [r1, #9]
 8005752:	0609      	lsls	r1, r1, #24
 8005754:	1851      	adds	r1, r2, r1
 8005756:	0082      	lsls	r2, r0, #2
 8005758:	5099      	str	r1, [r3, r2]
 800575a:	1c40      	adds	r0, r0, #1
 800575c:	49a7      	ldr	r1, [pc, #668]	; (80059fc <.text_30>)
 800575e:	1873      	adds	r3, r6, r1
 8005760:	3118      	adds	r1, #24
 8005762:	1872      	adds	r2, r6, r1
 8005764:	7811      	ldrb	r1, [r2, #0]
 8005766:	4288      	cmp	r0, r1
 8005768:	d3e8      	bcc.n	800573c <PE_Check_DataMessageVDM+0x70>
 800576a:	9900      	ldr	r1, [sp, #0]
 800576c:	68f0      	ldr	r0, [r6, #12]
 800576e:	2800      	cmp	r0, #0
 8005770:	d008      	beq.n	8005784 <PE_Check_DataMessageVDM+0xb8>
 8005772:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005774:	2f00      	cmp	r7, #0
 8005776:	d005      	beq.n	8005784 <PE_Check_DataMessageVDM+0xb8>
 8005778:	7c30      	ldrb	r0, [r6, #16]
 800577a:	47b8      	blx	r7
 800577c:	2800      	cmp	r0, #0
 800577e:	d101      	bne.n	8005784 <PE_Check_DataMessageVDM+0xb8>
 8005780:	7474      	strb	r4, [r6, #17]
 8005782:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005784:	6870      	ldr	r0, [r6, #4]
 8005786:	6800      	ldr	r0, [r0, #0]
 8005788:	4004      	ands	r4, r0
 800578a:	2c02      	cmp	r4, #2
 800578c:	d100      	bne.n	8005790 <PE_Check_DataMessageVDM+0xc4>
 800578e:	7475      	strb	r5, [r6, #17]
 8005790:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08005794 <.text_23>:
 8005794:	0000801e 	.word	0x0000801e

08005798 <.text_24>:
 8005798:	fffff8ff 	.word	0xfffff8ff

0800579c <PE_SVDM_CheckIdentity>:
 800579c:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 800579e:	0003      	movs	r3, r0
 80057a0:	2000      	movs	r0, #0
 80057a2:	4c97      	ldr	r4, [pc, #604]	; (8005a00 <.text_31>)
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	58e3      	ldr	r3, [r4, r3]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80057ac:	045b      	lsls	r3, r3, #17
 80057ae:	0f5b      	lsrs	r3, r3, #29
 80057b0:	1e5c      	subs	r4, r3, #1
 80057b2:	b2e3      	uxtb	r3, r4
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d200      	bcs.n	80057ba <PE_SVDM_CheckIdentity+0x1e>
 80057b8:	e0b5      	b.n	8005926 <PE_SVDM_CheckIdentity+0x18a>
 80057ba:	000b      	movs	r3, r1
 80057bc:	7819      	ldrb	r1, [r3, #0]
 80057be:	785d      	ldrb	r5, [r3, #1]
 80057c0:	022d      	lsls	r5, r5, #8
 80057c2:	1949      	adds	r1, r1, r5
 80057c4:	789d      	ldrb	r5, [r3, #2]
 80057c6:	042d      	lsls	r5, r5, #16
 80057c8:	1949      	adds	r1, r1, r5
 80057ca:	78dd      	ldrb	r5, [r3, #3]
 80057cc:	062d      	lsls	r5, r5, #24
 80057ce:	194d      	adds	r5, r1, r5
 80057d0:	6015      	str	r5, [r2, #0]
 80057d2:	7919      	ldrb	r1, [r3, #4]
 80057d4:	795e      	ldrb	r6, [r3, #5]
 80057d6:	0236      	lsls	r6, r6, #8
 80057d8:	1989      	adds	r1, r1, r6
 80057da:	799e      	ldrb	r6, [r3, #6]
 80057dc:	0436      	lsls	r6, r6, #16
 80057de:	1989      	adds	r1, r1, r6
 80057e0:	79de      	ldrb	r6, [r3, #7]
 80057e2:	0636      	lsls	r6, r6, #24
 80057e4:	1989      	adds	r1, r1, r6
 80057e6:	6051      	str	r1, [r2, #4]
 80057e8:	2108      	movs	r1, #8
 80057ea:	7a1e      	ldrb	r6, [r3, #8]
 80057ec:	7a5f      	ldrb	r7, [r3, #9]
 80057ee:	023f      	lsls	r7, r7, #8
 80057f0:	19f6      	adds	r6, r6, r7
 80057f2:	7a9f      	ldrb	r7, [r3, #10]
 80057f4:	043f      	lsls	r7, r7, #16
 80057f6:	19f6      	adds	r6, r6, r7
 80057f8:	7adf      	ldrb	r7, [r3, #11]
 80057fa:	063f      	lsls	r7, r7, #24
 80057fc:	19f6      	adds	r6, r6, r7
 80057fe:	6096      	str	r6, [r2, #8]
 8005800:	1ee4      	subs	r4, r4, #3
 8005802:	2620      	movs	r6, #32
 8005804:	5d97      	ldrb	r7, [r2, r6]
 8005806:	26e0      	movs	r6, #224	; 0xe0
 8005808:	403e      	ands	r6, r7
 800580a:	466f      	mov	r7, sp
 800580c:	703e      	strb	r6, [r7, #0]
 800580e:	466e      	mov	r6, sp
 8005810:	7836      	ldrb	r6, [r6, #0]
 8005812:	2720      	movs	r7, #32
 8005814:	55d6      	strb	r6, [r2, r7]
 8005816:	0626      	lsls	r6, r4, #24
 8005818:	d022      	beq.n	8005860 <PE_SVDM_CheckIdentity+0xc4>
 800581a:	1e66      	subs	r6, r4, #1
 800581c:	466f      	mov	r7, sp
 800581e:	707e      	strb	r6, [r7, #1]
 8005820:	00ae      	lsls	r6, r5, #2
 8005822:	0f76      	lsrs	r6, r6, #29
 8005824:	2e05      	cmp	r6, #5
 8005826:	d827      	bhi.n	8005878 <PE_SVDM_CheckIdentity+0xdc>
 8005828:	a701      	add	r7, pc, #4	; (adr r7, 8005830 <PE_SVDM_CheckIdentity+0x94>)
 800582a:	5dbf      	ldrb	r7, [r7, r6]
 800582c:	44bf      	add	pc, r7
 800582e:	bf00      	nop
 8005830:	5a060632 	.word	0x5a060632
 8005834:	a680      	.short	0xa680
 8005836:	210c      	movs	r1, #12
 8005838:	466c      	mov	r4, sp
 800583a:	7824      	ldrb	r4, [r4, #0]
 800583c:	2608      	movs	r6, #8
 800583e:	4326      	orrs	r6, r4
 8005840:	2420      	movs	r4, #32
 8005842:	5516      	strb	r6, [r2, r4]
 8005844:	7b1c      	ldrb	r4, [r3, #12]
 8005846:	7b5e      	ldrb	r6, [r3, #13]
 8005848:	0236      	lsls	r6, r6, #8
 800584a:	19a4      	adds	r4, r4, r6
 800584c:	7b9e      	ldrb	r6, [r3, #14]
 800584e:	0436      	lsls	r6, r6, #16
 8005850:	19a4      	adds	r4, r4, r6
 8005852:	7bde      	ldrb	r6, [r3, #15]
 8005854:	0636      	lsls	r6, r6, #24
 8005856:	19a4      	adds	r4, r4, r6
 8005858:	6194      	str	r4, [r2, #24]
 800585a:	466c      	mov	r4, sp
 800585c:	7864      	ldrb	r4, [r4, #1]
 800585e:	0026      	movs	r6, r4
 8005860:	d062      	beq.n	8005928 <PE_SVDM_CheckIdentity+0x18c>
 8005862:	9e01      	ldr	r6, [sp, #4]
 8005864:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 8005866:	0636      	lsls	r6, r6, #24
 8005868:	0fb6      	lsrs	r6, r6, #30
 800586a:	2e02      	cmp	r6, #2
 800586c:	d35c      	bcc.n	8005928 <PE_SVDM_CheckIdentity+0x18c>
 800586e:	01ad      	lsls	r5, r5, #6
 8005870:	0f6d      	lsrs	r5, r5, #29
 8005872:	d059      	beq.n	8005928 <PE_SVDM_CheckIdentity+0x18c>
 8005874:	1e6d      	subs	r5, r5, #1
 8005876:	2d02      	cmp	r5, #2
 8005878:	d855      	bhi.n	8005926 <PE_SVDM_CheckIdentity+0x18a>
 800587a:	2520      	movs	r5, #32
 800587c:	5d55      	ldrb	r5, [r2, r5]
 800587e:	08ef      	lsrs	r7, r5, #3
 8005880:	07ff      	lsls	r7, r7, #31
 8005882:	d53b      	bpl.n	80058fc <PE_SVDM_CheckIdentity+0x160>
 8005884:	3108      	adds	r1, #8
 8005886:	1e64      	subs	r4, r4, #1
 8005888:	e039      	b.n	80058fe <PE_SVDM_CheckIdentity+0x162>
 800588a:	210c      	movs	r1, #12
 800588c:	466c      	mov	r4, sp
 800588e:	7824      	ldrb	r4, [r4, #0]
 8005890:	2601      	movs	r6, #1
 8005892:	4326      	orrs	r6, r4
 8005894:	2420      	movs	r4, #32
 8005896:	5516      	strb	r6, [r2, r4]
 8005898:	7b1c      	ldrb	r4, [r3, #12]
 800589a:	7b5e      	ldrb	r6, [r3, #13]
 800589c:	0236      	lsls	r6, r6, #8
 800589e:	19a4      	adds	r4, r4, r6
 80058a0:	7b9e      	ldrb	r6, [r3, #14]
 80058a2:	0436      	lsls	r6, r6, #16
 80058a4:	19a4      	adds	r4, r4, r6
 80058a6:	7bde      	ldrb	r6, [r3, #15]
 80058a8:	0636      	lsls	r6, r6, #24
 80058aa:	19a4      	adds	r4, r4, r6
 80058ac:	60d4      	str	r4, [r2, #12]
 80058ae:	e7d4      	b.n	800585a <PE_SVDM_CheckIdentity+0xbe>
 80058b0:	210c      	movs	r1, #12
 80058b2:	466c      	mov	r4, sp
 80058b4:	7824      	ldrb	r4, [r4, #0]
 80058b6:	2604      	movs	r6, #4
 80058b8:	4326      	orrs	r6, r4
 80058ba:	2420      	movs	r4, #32
 80058bc:	5516      	strb	r6, [r2, r4]
 80058be:	7b1c      	ldrb	r4, [r3, #12]
 80058c0:	7b5e      	ldrb	r6, [r3, #13]
 80058c2:	0236      	lsls	r6, r6, #8
 80058c4:	19a4      	adds	r4, r4, r6
 80058c6:	7b9e      	ldrb	r6, [r3, #14]
 80058c8:	0436      	lsls	r6, r6, #16
 80058ca:	19a4      	adds	r4, r4, r6
 80058cc:	7bde      	ldrb	r6, [r3, #15]
 80058ce:	0636      	lsls	r6, r6, #24
 80058d0:	19a4      	adds	r4, r4, r6
 80058d2:	6154      	str	r4, [r2, #20]
 80058d4:	e7c1      	b.n	800585a <PE_SVDM_CheckIdentity+0xbe>
 80058d6:	210c      	movs	r1, #12
 80058d8:	466c      	mov	r4, sp
 80058da:	7824      	ldrb	r4, [r4, #0]
 80058dc:	2602      	movs	r6, #2
 80058de:	4326      	orrs	r6, r4
 80058e0:	2420      	movs	r4, #32
 80058e2:	5516      	strb	r6, [r2, r4]
 80058e4:	7b1c      	ldrb	r4, [r3, #12]
 80058e6:	7b5e      	ldrb	r6, [r3, #13]
 80058e8:	0236      	lsls	r6, r6, #8
 80058ea:	19a4      	adds	r4, r4, r6
 80058ec:	7b9e      	ldrb	r6, [r3, #14]
 80058ee:	0436      	lsls	r6, r6, #16
 80058f0:	19a4      	adds	r4, r4, r6
 80058f2:	7bde      	ldrb	r6, [r3, #15]
 80058f4:	0636      	lsls	r6, r6, #24
 80058f6:	19a4      	adds	r4, r4, r6
 80058f8:	6114      	str	r4, [r2, #16]
 80058fa:	e7ae      	b.n	800585a <PE_SVDM_CheckIdentity+0xbe>
 80058fc:	1d09      	adds	r1, r1, #4
 80058fe:	b2e4      	uxtb	r4, r4
 8005900:	2c01      	cmp	r4, #1
 8005902:	d110      	bne.n	8005926 <PE_SVDM_CheckIdentity+0x18a>
 8005904:	2410      	movs	r4, #16
 8005906:	432c      	orrs	r4, r5
 8005908:	2520      	movs	r5, #32
 800590a:	5554      	strb	r4, [r2, r5]
 800590c:	1859      	adds	r1, r3, r1
 800590e:	780b      	ldrb	r3, [r1, #0]
 8005910:	784c      	ldrb	r4, [r1, #1]
 8005912:	0224      	lsls	r4, r4, #8
 8005914:	191b      	adds	r3, r3, r4
 8005916:	788c      	ldrb	r4, [r1, #2]
 8005918:	0424      	lsls	r4, r4, #16
 800591a:	191b      	adds	r3, r3, r4
 800591c:	78c9      	ldrb	r1, [r1, #3]
 800591e:	0609      	lsls	r1, r1, #24
 8005920:	1859      	adds	r1, r3, r1
 8005922:	61d1      	str	r1, [r2, #28]
 8005924:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 8005926:	2002      	movs	r0, #2
 8005928:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800592a <PE_SVDM_CheckSVIDs>:
 800592a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <.text_31>)
 800592e:	0080      	lsls	r0, r0, #2
 8005930:	5818      	ldr	r0, [r3, r0]
 8005932:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005934:	0440      	lsls	r0, r0, #17
 8005936:	0f40      	lsrs	r0, r0, #29
 8005938:	1e46      	subs	r6, r0, #1
 800593a:	b2f6      	uxtb	r6, r6
 800593c:	2000      	movs	r0, #0
 800593e:	2500      	movs	r5, #0
 8005940:	7610      	strb	r0, [r2, #24]
 8005942:	7650      	strb	r0, [r2, #25]
 8005944:	000b      	movs	r3, r1
 8005946:	0014      	movs	r4, r2
 8005948:	0031      	movs	r1, r6
 800594a:	5c1a      	ldrb	r2, [r3, r0]
 800594c:	1c5e      	adds	r6, r3, #1
 800594e:	5c36      	ldrb	r6, [r6, r0]
 8005950:	0236      	lsls	r6, r6, #8
 8005952:	1992      	adds	r2, r2, r6
 8005954:	7e26      	ldrb	r6, [r4, #24]
 8005956:	0076      	lsls	r6, r6, #1
 8005958:	53a2      	strh	r2, [r4, r6]
 800595a:	7e26      	ldrb	r6, [r4, #24]
 800595c:	2201      	movs	r2, #1
 800595e:	0077      	lsls	r7, r6, #1
 8005960:	5be7      	ldrh	r7, [r4, r7]
 8005962:	2f00      	cmp	r7, #0
 8005964:	d002      	beq.n	800596c <PE_SVDM_CheckSVIDs+0x42>
 8005966:	1c76      	adds	r6, r6, #1
 8005968:	7626      	strb	r6, [r4, #24]
 800596a:	e001      	b.n	8005970 <PE_SVDM_CheckSVIDs+0x46>
 800596c:	2501      	movs	r5, #1
 800596e:	7662      	strb	r2, [r4, #25]
 8005970:	1c80      	adds	r0, r0, #2
 8005972:	b2c0      	uxtb	r0, r0
 8005974:	5c1e      	ldrb	r6, [r3, r0]
 8005976:	1c5f      	adds	r7, r3, #1
 8005978:	5c3f      	ldrb	r7, [r7, r0]
 800597a:	023f      	lsls	r7, r7, #8
 800597c:	19f6      	adds	r6, r6, r7
 800597e:	7e27      	ldrb	r7, [r4, #24]
 8005980:	007f      	lsls	r7, r7, #1
 8005982:	53e6      	strh	r6, [r4, r7]
 8005984:	7e26      	ldrb	r6, [r4, #24]
 8005986:	0077      	lsls	r7, r6, #1
 8005988:	5be7      	ldrh	r7, [r4, r7]
 800598a:	2f00      	cmp	r7, #0
 800598c:	d002      	beq.n	8005994 <PE_SVDM_CheckSVIDs+0x6a>
 800598e:	1c76      	adds	r6, r6, #1
 8005990:	7626      	strb	r6, [r4, #24]
 8005992:	e001      	b.n	8005998 <PE_SVDM_CheckSVIDs+0x6e>
 8005994:	2501      	movs	r5, #1
 8005996:	7662      	strb	r2, [r4, #25]
 8005998:	1c80      	adds	r0, r0, #2
 800599a:	b2c0      	uxtb	r0, r0
 800599c:	008a      	lsls	r2, r1, #2
 800599e:	4290      	cmp	r0, r2
 80059a0:	d201      	bcs.n	80059a6 <PE_SVDM_CheckSVIDs+0x7c>
 80059a2:	002a      	movs	r2, r5
 80059a4:	d0d1      	beq.n	800594a <PE_SVDM_CheckSVIDs+0x20>
 80059a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059a8 <.text_27>:
 80059a8:	ffff7fff 	.word	0xffff7fff

080059ac <PE_SVDM_CheckModes>:
 80059ac:	b530      	push	{r4, r5, lr}
 80059ae:	4c14      	ldr	r4, [pc, #80]	; (8005a00 <.text_31>)
 80059b0:	0080      	lsls	r0, r0, #2
 80059b2:	5820      	ldr	r0, [r4, r0]
 80059b4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80059b6:	0440      	lsls	r0, r0, #17
 80059b8:	0f40      	lsrs	r0, r0, #29
 80059ba:	1e40      	subs	r0, r0, #1
 80059bc:	b2c0      	uxtb	r0, r0
 80059be:	2400      	movs	r4, #0
 80059c0:	8399      	strh	r1, [r3, #28]
 80059c2:	601c      	str	r4, [r3, #0]
 80059c4:	5d11      	ldrb	r1, [r2, r4]
 80059c6:	1915      	adds	r5, r2, r4
 80059c8:	786d      	ldrb	r5, [r5, #1]
 80059ca:	022d      	lsls	r5, r5, #8
 80059cc:	1949      	adds	r1, r1, r5
 80059ce:	1915      	adds	r5, r2, r4
 80059d0:	78ad      	ldrb	r5, [r5, #2]
 80059d2:	042d      	lsls	r5, r5, #16
 80059d4:	1949      	adds	r1, r1, r5
 80059d6:	1915      	adds	r5, r2, r4
 80059d8:	78ed      	ldrb	r5, [r5, #3]
 80059da:	062d      	lsls	r5, r5, #24
 80059dc:	1949      	adds	r1, r1, r5
 80059de:	681d      	ldr	r5, [r3, #0]
 80059e0:	00ad      	lsls	r5, r5, #2
 80059e2:	195d      	adds	r5, r3, r5
 80059e4:	6069      	str	r1, [r5, #4]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	1c49      	adds	r1, r1, #1
 80059ea:	6019      	str	r1, [r3, #0]
 80059ec:	1d24      	adds	r4, r4, #4
 80059ee:	b2e4      	uxtb	r4, r4
 80059f0:	0081      	lsls	r1, r0, #2
 80059f2:	428c      	cmp	r4, r1
 80059f4:	d3e6      	bcc.n	80059c4 <PE_SVDM_CheckModes+0x18>
 80059f6:	bd30      	pop	{r4, r5, pc}

080059f8 <.text_29>:
 80059f8:	000004ac 	.word	0x000004ac

080059fc <.text_30>:
 80059fc:	00000494 	.word	0x00000494

08005a00 <.text_31>:
 8005a00:	20000178 	.word	0x20000178

08005a04 <USBPD_PRL_TimerCounter>:
 8005a04:	4954      	ldr	r1, [pc, #336]	; (8005b58 <.text_15>)
 8005a06:	0080      	lsls	r0, r0, #2
 8005a08:	1808      	adds	r0, r1, r0
 8005a0a:	6801      	ldr	r1, [r0, #0]
 8005a0c:	790a      	ldrb	r2, [r1, #4]
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d002      	beq.n	8005a18 <USBPD_PRL_TimerCounter+0x14>
 8005a12:	790a      	ldrb	r2, [r1, #4]
 8005a14:	1e52      	subs	r2, r2, #1
 8005a16:	710a      	strb	r2, [r1, #4]
 8005a18:	6800      	ldr	r0, [r0, #0]
 8005a1a:	7841      	ldrb	r1, [r0, #1]
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	d001      	beq.n	8005a24 <USBPD_PRL_TimerCounter+0x20>
 8005a20:	1e49      	subs	r1, r1, #1
 8005a22:	7041      	strb	r1, [r0, #1]
 8005a24:	4770      	bx	lr
	...

08005a28 <USBPD_PRL_Init>:
 8005a28:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005a2a:	b081      	sub	sp, #4
 8005a2c:	0014      	movs	r4, r2
 8005a2e:	001d      	movs	r5, r3
 8005a30:	2616      	movs	r6, #22
 8005a32:	209c      	movs	r0, #156	; 0x9c
 8005a34:	0040      	lsls	r0, r0, #1
 8005a36:	f014 fa75 	bl	8019f24 <malloc>
 8005a3a:	0007      	movs	r7, r0
 8005a3c:	d01e      	beq.n	8005a7c <USBPD_PRL_Init+0x54>
 8005a3e:	9e02      	ldr	r6, [sp, #8]
 8005a40:	219c      	movs	r1, #156	; 0x9c
 8005a42:	0049      	lsls	r1, r1, #1
 8005a44:	f014 fb7d 	bl	801a142 <__aeabi_memclr>
 8005a48:	220f      	movs	r2, #15
 8005a4a:	2103      	movs	r1, #3
 8005a4c:	1db8      	adds	r0, r7, #6
 8005a4e:	f014 fb71 	bl	801a134 <__aeabi_memset>
 8005a52:	4841      	ldr	r0, [pc, #260]	; (8005b58 <.text_15>)
 8005a54:	4669      	mov	r1, sp
 8005a56:	7909      	ldrb	r1, [r1, #4]
 8005a58:	0089      	lsls	r1, r1, #2
 8005a5a:	5047      	str	r7, [r0, r1]
 8005a5c:	62bc      	str	r4, [r7, #40]	; 0x28
 8005a5e:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005a60:	2001      	movs	r0, #1
 8005a62:	9000      	str	r0, [sp, #0]
 8005a64:	6870      	ldr	r0, [r6, #4]
 8005a66:	0743      	lsls	r3, r0, #29
 8005a68:	0fdb      	lsrs	r3, r3, #31
 8005a6a:	003a      	movs	r2, r7
 8005a6c:	3230      	adds	r2, #48	; 0x30
 8005a6e:	bf00      	nop
 8005a70:	a103      	add	r1, pc, #12	; (adr r1, 8005a80 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005a72:	4668      	mov	r0, sp
 8005a74:	7900      	ldrb	r0, [r0, #4]
 8005a76:	f008 fcf5 	bl	800e464 <USBPD_PHY_Init>
 8005a7a:	0006      	movs	r6, r0
 8005a7c:	0030      	movs	r0, r6
 8005a7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005a80 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005a80:	60b9 0800 6411 0800 646b 0800 6485 0800     .`...d..kd...d..
 8005a90:	648d 0800 5b79 0800                         .d..y[..

08005a98 <USBPD_PRL_GetMemoryConsumption>:
 8005a98:	20ea      	movs	r0, #234	; 0xea
 8005a9a:	0080      	lsls	r0, r0, #2
 8005a9c:	4770      	bx	lr

08005a9e <USBPD_PRL_SetHeader>:
 8005a9e:	b530      	push	{r4, r5, lr}
 8005aa0:	4c2d      	ldr	r4, [pc, #180]	; (8005b58 <.text_15>)
 8005aa2:	0080      	lsls	r0, r0, #2
 8005aa4:	5820      	ldr	r0, [r4, r0]
 8005aa6:	8a44      	ldrh	r4, [r0, #18]
 8005aa8:	4d2c      	ldr	r5, [pc, #176]	; (8005b5c <.text_16>)
 8005aaa:	4025      	ands	r5, r4
 8005aac:	0209      	lsls	r1, r1, #8
 8005aae:	2480      	movs	r4, #128	; 0x80
 8005ab0:	0064      	lsls	r4, r4, #1
 8005ab2:	4021      	ands	r1, r4
 8005ab4:	4329      	orrs	r1, r5
 8005ab6:	8241      	strh	r1, [r0, #18]
 8005ab8:	4c29      	ldr	r4, [pc, #164]	; (8005b60 <.text_17>)
 8005aba:	400c      	ands	r4, r1
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	2220      	movs	r2, #32
 8005ac0:	4011      	ands	r1, r2
 8005ac2:	4321      	orrs	r1, r4
 8005ac4:	8241      	strh	r1, [r0, #18]
 8005ac6:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <.text_18>)
 8005ac8:	400a      	ands	r2, r1
 8005aca:	0199      	lsls	r1, r3, #6
 8005acc:	23c0      	movs	r3, #192	; 0xc0
 8005ace:	400b      	ands	r3, r1
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	8243      	strh	r3, [r0, #18]
 8005ad4:	bd30      	pop	{r4, r5, pc}

08005ad6 <USBPD_PRL_SetHeaderPowerRole>:
 8005ad6:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <.text_15>)
 8005ad8:	0080      	lsls	r0, r0, #2
 8005ada:	5810      	ldr	r0, [r2, r0]
 8005adc:	8a42      	ldrh	r2, [r0, #18]
 8005ade:	4b1f      	ldr	r3, [pc, #124]	; (8005b5c <.text_16>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	0209      	lsls	r1, r1, #8
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	0052      	lsls	r2, r2, #1
 8005ae8:	e007      	b.n	8005afa <.text_10>

08005aea <USBPD_PRL_SetHeaderDataRole>:
 8005aea:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <.text_15>)
 8005aec:	0080      	lsls	r0, r0, #2
 8005aee:	5810      	ldr	r0, [r2, r0]
 8005af0:	8a42      	ldrh	r2, [r0, #18]
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <.text_17>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	0149      	lsls	r1, r1, #5
 8005af8:	2220      	movs	r2, #32

08005afa <.text_10>:
 8005afa:	4011      	ands	r1, r2
 8005afc:	4319      	orrs	r1, r3
 8005afe:	8241      	strh	r1, [r0, #18]
 8005b00:	4770      	bx	lr

08005b02 <USBPD_PRL_SetHeaderSpecification>:
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <.text_15>)
 8005b04:	0080      	lsls	r0, r0, #2
 8005b06:	5810      	ldr	r0, [r2, r0]
 8005b08:	8a42      	ldrh	r2, [r0, #18]
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <.text_18>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	0189      	lsls	r1, r1, #6
 8005b10:	22c0      	movs	r2, #192	; 0xc0
 8005b12:	400a      	ands	r2, r1
 8005b14:	431a      	orrs	r2, r3
 8005b16:	8242      	strh	r2, [r0, #18]
 8005b18:	4770      	bx	lr

08005b1a <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005b1a:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <.text_15>)
 8005b1c:	0080      	lsls	r0, r0, #2
 8005b1e:	5810      	ldr	r0, [r2, r0]
 8005b20:	018a      	lsls	r2, r1, #6
 8005b22:	21c0      	movs	r1, #192	; 0xc0
 8005b24:	4011      	ands	r1, r2
 8005b26:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <.text_18>)
 8005b28:	8a83      	ldrh	r3, [r0, #20]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	8283      	strh	r3, [r0, #20]
 8005b30:	8ac3      	ldrh	r3, [r0, #22]
 8005b32:	401a      	ands	r2, r3
 8005b34:	4311      	orrs	r1, r2
 8005b36:	82c1      	strh	r1, [r0, #22]
 8005b38:	4770      	bx	lr

08005b3a <USBPD_PRL_SRCSetSinkNG>:
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	f008 fd87 	bl	800e64e <USBPD_PHY_SetResistor_SinkTxNG>
 8005b40:	bd01      	pop	{r0, pc}

08005b42 <USBPD_PRL_SRCReleaseSinkNG>:
 8005b42:	b510      	push	{r4, lr}
 8005b44:	0004      	movs	r4, r0
 8005b46:	f008 fd91 	bl	800e66c <USBPD_PHY_SetResistor_SinkTxOK>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	4902      	ldr	r1, [pc, #8]	; (8005b58 <.text_15>)
 8005b4e:	00a2      	lsls	r2, r4, #2
 8005b50:	5889      	ldr	r1, [r1, r2]
 8005b52:	7148      	strb	r0, [r1, #5]
 8005b54:	bd10      	pop	{r4, pc}
	...

08005b58 <.text_15>:
 8005b58:	20000184 	.word	0x20000184

08005b5c <.text_16>:
 8005b5c:	0000feff 	.word	0x0000feff

08005b60 <.text_17>:
 8005b60:	0000ffdf 	.word	0x0000ffdf

08005b64 <.text_18>:
 8005b64:	0000ff3f 	.word	0x0000ff3f

08005b68 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	f008 fda5 	bl	800e6b8 <USBPD_PHY_IsResistor_SinkTxOk>
 8005b6e:	bd02      	pop	{r1, pc}

08005b70 <USBPD_PRL_FastRoleSwapSignalling>:
 8005b70:	b580      	push	{r7, lr}
 8005b72:	f008 fdb1 	bl	800e6d8 <USBPD_PHY_FastRoleSwapSignalling>
 8005b76:	bd01      	pop	{r0, pc}

08005b78 <PRL_FastRoleSwapReception>:
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	f7fb f9e7 	bl	8000f4c <PE_PRL_FastRoleSwapReception>
 8005b7e:	bd01      	pop	{r0, pc}

08005b80 <USBPD_PRL_SOPCapability>:
 8005b80:	b580      	push	{r7, lr}
 8005b82:	f008 fd83 	bl	800e68c <USBPD_PHY_SOPSupported>
 8005b86:	bd01      	pop	{r0, pc}

08005b88 <USBPD_PRL_SendMessage>:
 8005b88:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	2503      	movs	r5, #3
 8005b8e:	4668      	mov	r0, sp
 8005b90:	7f00      	ldrb	r0, [r0, #28]
 8005b92:	9005      	str	r0, [sp, #20]
 8005b94:	48ca      	ldr	r0, [pc, #808]	; (8005ec0 <USBPD_PRL_SendMessage+0x338>)
 8005b96:	9a05      	ldr	r2, [sp, #20]
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	1880      	adds	r0, r0, r2
 8005b9c:	9000      	str	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	0004      	movs	r4, r0
 8005ba2:	7962      	ldrb	r2, [r4, #5]
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	d004      	beq.n	8005bb2 <USBPD_PRL_SendMessage+0x2a>
 8005ba8:	7a62      	ldrb	r2, [r4, #9]
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	d101      	bne.n	8005bb2 <USBPD_PRL_SendMessage+0x2a>
 8005bae:	220f      	movs	r2, #15
 8005bb0:	7142      	strb	r2, [r0, #5]
 8005bb2:	466a      	mov	r2, sp
 8005bb4:	7111      	strb	r1, [r2, #4]
 8005bb6:	4669      	mov	r1, sp
 8005bb8:	7909      	ldrb	r1, [r1, #4]
 8005bba:	9104      	str	r1, [sp, #16]
 8005bbc:	1861      	adds	r1, r4, r1
 8005bbe:	9a05      	ldr	r2, [sp, #20]
 8005bc0:	0052      	lsls	r2, r2, #1
 8005bc2:	1c52      	adds	r2, r2, #1
 8005bc4:	466e      	mov	r6, sp
 8005bc6:	7172      	strb	r2, [r6, #5]
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	0052      	lsls	r2, r2, #1
 8005bcc:	9203      	str	r2, [sp, #12]
 8005bce:	2600      	movs	r6, #0
 8005bd0:	9302      	str	r3, [sp, #8]
 8005bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd4:	7963      	ldrb	r3, [r4, #5]
 8005bd6:	2b10      	cmp	r3, #16
 8005bd8:	d900      	bls.n	8005bdc <USBPD_PRL_SendMessage+0x54>
 8005bda:	e1f6      	b.n	8005fca <USBPD_PRL_SendMessage+0x442>
 8005bdc:	a701      	add	r7, pc, #4	; (adr r7, 8005be4 <USBPD_PRL_SendMessage+0x5c>)
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	5aff      	ldrh	r7, [r7, r3]
 8005be2:	44bf      	add	pc, r7
 8005be4:	00480020 	.word	0x00480020
 8005be8:	03e4005e 	.word	0x03e4005e
 8005bec:	00a8006a 	.word	0x00a8006a
 8005bf0:	015a0086 	.word	0x015a0086
 8005bf4:	03e403e4 	.word	0x03e403e4
 8005bf8:	030802de 	.word	0x030802de
 8005bfc:	03560334 	.word	0x03560334
 8005c00:	03de03e4 	.word	0x03de03e4
 8005c04:	03a6      	.short	0x03a6
 8005c06:	f3ef 8710 	mrs	r7, PRIMASK
 8005c0a:	b672      	cpsid	i
 8005c0c:	4668      	mov	r0, sp
 8005c0e:	7f00      	ldrb	r0, [r0, #28]
 8005c10:	f7fb f84e 	bl	8000cb0 <PE_PRL_Control_RxEvent>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d105      	bne.n	8005c24 <USBPD_PRL_SendMessage+0x9c>
 8005c18:	7aa0      	ldrb	r0, [r4, #10]
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d102      	bne.n	8005c24 <USBPD_PRL_SendMessage+0x9c>
 8005c1e:	20ff      	movs	r0, #255	; 0xff
 8005c20:	7260      	strb	r0, [r4, #9]
 8005c22:	e000      	b.n	8005c26 <USBPD_PRL_SendMessage+0x9e>
 8005c24:	7266      	strb	r6, [r4, #9]
 8005c26:	f387 8810 	msr	PRIMASK, r7
 8005c2a:	2006      	movs	r0, #6
 8005c2c:	e1a0      	b.n	8005f70 <USBPD_PRL_SendMessage+0x3e8>
 8005c2e:	4668      	mov	r0, sp
 8005c30:	7f00      	ldrb	r0, [r0, #28]
 8005c32:	f008 fd0c 	bl	800e64e <USBPD_PHY_SetResistor_SinkTxNG>
 8005c36:	2002      	movs	r0, #2
 8005c38:	9900      	ldr	r1, [sp, #0]
 8005c3a:	6809      	ldr	r1, [r1, #0]
 8005c3c:	7148      	strb	r0, [r1, #5]
 8005c3e:	2013      	movs	r0, #19
 8005c40:	7060      	strb	r0, [r4, #1]
 8005c42:	e1c4      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005c44:	2a01      	cmp	r2, #1
 8005c46:	d10f      	bne.n	8005c68 <USBPD_PRL_SendMessage+0xe0>
 8005c48:	7861      	ldrb	r1, [r4, #1]
 8005c4a:	2900      	cmp	r1, #0
 8005c4c:	d10a      	bne.n	8005c64 <USBPD_PRL_SendMessage+0xdc>
 8005c4e:	e01c      	b.n	8005c8a <USBPD_PRL_SendMessage+0x102>
 8005c50:	2a02      	cmp	r2, #2
 8005c52:	d109      	bne.n	8005c68 <USBPD_PRL_SendMessage+0xe0>
 8005c54:	4668      	mov	r0, sp
 8005c56:	7f00      	ldrb	r0, [r0, #28]
 8005c58:	f008 fd2e 	bl	800e6b8 <USBPD_PHY_IsResistor_SinkTxOk>
 8005c5c:	2801      	cmp	r0, #1
 8005c5e:	d101      	bne.n	8005c64 <USBPD_PRL_SendMessage+0xdc>
 8005c60:	2005      	movs	r0, #5
 8005c62:	e185      	b.n	8005f70 <USBPD_PRL_SendMessage+0x3e8>
 8005c64:	2509      	movs	r5, #9
 8005c66:	e1b2      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005c68:	2106      	movs	r1, #6
 8005c6a:	e154      	b.n	8005f16 <USBPD_PRL_SendMessage+0x38e>
 8005c6c:	9903      	ldr	r1, [sp, #12]
 8005c6e:	1861      	adds	r1, r4, r1
 8005c70:	8a49      	ldrh	r1, [r1, #18]
 8005c72:	0609      	lsls	r1, r1, #24
 8005c74:	0f89      	lsrs	r1, r1, #30
 8005c76:	2902      	cmp	r1, #2
 8005c78:	d107      	bne.n	8005c8a <USBPD_PRL_SendMessage+0x102>
 8005c7a:	2a01      	cmp	r2, #1
 8005c7c:	d101      	bne.n	8005c82 <USBPD_PRL_SendMessage+0xfa>
 8005c7e:	7142      	strb	r2, [r0, #5]
 8005c80:	e1a5      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005c82:	2a02      	cmp	r2, #2
 8005c84:	d101      	bne.n	8005c8a <USBPD_PRL_SendMessage+0x102>
 8005c86:	2104      	movs	r1, #4
 8005c88:	e145      	b.n	8005f16 <USBPD_PRL_SendMessage+0x38e>
 8005c8a:	2105      	movs	r1, #5
 8005c8c:	e143      	b.n	8005f16 <USBPD_PRL_SendMessage+0x38e>
 8005c8e:	9803      	ldr	r0, [sp, #12]
 8005c90:	1820      	adds	r0, r4, r0
 8005c92:	8a43      	ldrh	r3, [r0, #18]
 8005c94:	4acf      	ldr	r2, [pc, #828]	; (8005fd4 <.text_24>)
 8005c96:	401a      	ands	r2, r3
 8005c98:	ab08      	add	r3, sp, #32
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	06db      	lsls	r3, r3, #27
 8005c9e:	0edb      	lsrs	r3, r3, #27
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	8243      	strh	r3, [r0, #18]
 8005ca4:	045a      	lsls	r2, r3, #17
 8005ca6:	0c52      	lsrs	r2, r2, #17
 8005ca8:	ab08      	add	r3, sp, #32
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	09db      	lsrs	r3, r3, #7
 8005cae:	03db      	lsls	r3, r3, #15
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	8243      	strh	r3, [r0, #18]
 8005cb4:	70a6      	strb	r6, [r4, #2]
 8005cb6:	8a43      	ldrh	r3, [r0, #18]
 8005cb8:	0bda      	lsrs	r2, r3, #15
 8005cba:	d023      	beq.n	8005d04 <USBPD_PRL_SendMessage+0x17c>
 8005cbc:	9a02      	ldr	r2, [sp, #8]
 8005cbe:	7892      	ldrb	r2, [r2, #2]
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	78db      	ldrb	r3, [r3, #3]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	18d2      	adds	r2, r2, r3
 8005cc8:	83a2      	strh	r2, [r4, #28]
 8005cca:	8ba2      	ldrh	r2, [r4, #28]
 8005ccc:	0a93      	lsrs	r3, r2, #10
 8005cce:	07db      	lsls	r3, r3, #31
 8005cd0:	d40f      	bmi.n	8005cf2 <USBPD_PRL_SendMessage+0x16a>
 8005cd2:	0ad2      	lsrs	r2, r2, #11
 8005cd4:	0712      	lsls	r2, r2, #28
 8005cd6:	d122      	bne.n	8005d1e <USBPD_PRL_SendMessage+0x196>
 8005cd8:	466a      	mov	r2, sp
 8005cda:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005cdc:	1f12      	subs	r2, r2, #4
 8005cde:	8462      	strh	r2, [r4, #34]	; 0x22
 8005ce0:	05d2      	lsls	r2, r2, #23
 8005ce2:	0dd2      	lsrs	r2, r2, #23
 8005ce4:	8ba3      	ldrh	r3, [r4, #28]
 8005ce6:	27fe      	movs	r7, #254	; 0xfe
 8005ce8:	023f      	lsls	r7, r7, #8
 8005cea:	401f      	ands	r7, r3
 8005cec:	433a      	orrs	r2, r7
 8005cee:	83a2      	strh	r2, [r4, #28]
 8005cf0:	e015      	b.n	8005d1e <USBPD_PRL_SendMessage+0x196>
 8005cf2:	8466      	strh	r6, [r4, #34]	; 0x22
 8005cf4:	8a42      	ldrh	r2, [r0, #18]
 8005cf6:	4bb8      	ldr	r3, [pc, #736]	; (8005fd8 <.text_25>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2280      	movs	r2, #128	; 0x80
 8005cfc:	0152      	lsls	r2, r2, #5
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	8242      	strh	r2, [r0, #18]
 8005d02:	e00c      	b.n	8005d1e <USBPD_PRL_SendMessage+0x196>
 8005d04:	4ab4      	ldr	r2, [pc, #720]	; (8005fd8 <.text_25>)
 8005d06:	401a      	ands	r2, r3
 8005d08:	466b      	mov	r3, sp
 8005d0a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d0c:	1e9b      	subs	r3, r3, #2
 8005d0e:	089b      	lsrs	r3, r3, #2
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	27e0      	movs	r7, #224	; 0xe0
 8005d14:	01ff      	lsls	r7, r7, #7
 8005d16:	401f      	ands	r7, r3
 8005d18:	4317      	orrs	r7, r2
 8005d1a:	8247      	strh	r7, [r0, #18]
 8005d1c:	8466      	strh	r6, [r4, #34]	; 0x22
 8005d1e:	aa08      	add	r2, sp, #32
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	2a0d      	cmp	r2, #13
 8005d24:	d10a      	bne.n	8005d3c <USBPD_PRL_SendMessage+0x1b4>
 8005d26:	8a40      	ldrh	r0, [r0, #18]
 8005d28:	22f0      	movs	r2, #240	; 0xf0
 8005d2a:	0212      	lsls	r2, r2, #8
 8005d2c:	4002      	ands	r2, r0
 8005d2e:	d105      	bne.n	8005d3c <USBPD_PRL_SendMessage+0x1b4>
 8005d30:	72ce      	strb	r6, [r1, #11]
 8005d32:	220f      	movs	r2, #15
 8005d34:	2103      	movs	r1, #3
 8005d36:	1da0      	adds	r0, r4, #6
 8005d38:	f014 f9fc 	bl	801a134 <__aeabi_memset>
 8005d3c:	2007      	movs	r0, #7
 8005d3e:	e117      	b.n	8005f70 <USBPD_PRL_SendMessage+0x3e8>
 8005d40:	4669      	mov	r1, sp
 8005d42:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	1841      	adds	r1, r0, r1
 8005d48:	4a5d      	ldr	r2, [pc, #372]	; (8005ec0 <USBPD_PRL_SendMessage+0x338>)
 8005d4a:	466b      	mov	r3, sp
 8005d4c:	7f1b      	ldrb	r3, [r3, #28]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	58d2      	ldr	r2, [r2, r3]
 8005d52:	466b      	mov	r3, sp
 8005d54:	791b      	ldrb	r3, [r3, #4]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	18d2      	adds	r2, r2, r3
 8005d5a:	8a52      	ldrh	r2, [r2, #18]
 8005d5c:	0bd3      	lsrs	r3, r2, #15
 8005d5e:	d074      	beq.n	8005e4a <USBPD_PRL_SendMessage+0x2c2>
 8005d60:	8b83      	ldrh	r3, [r0, #28]
 8005d62:	0a9b      	lsrs	r3, r3, #10
 8005d64:	07db      	lsls	r3, r3, #31
 8005d66:	d465      	bmi.n	8005e34 <USBPD_PRL_SendMessage+0x2ac>
 8005d68:	4b55      	ldr	r3, [pc, #340]	; (8005ec0 <USBPD_PRL_SendMessage+0x338>)
 8005d6a:	466f      	mov	r7, sp
 8005d6c:	7f3f      	ldrb	r7, [r7, #28]
 8005d6e:	00bf      	lsls	r7, r7, #2
 8005d70:	59db      	ldr	r3, [r3, r7]
 8005d72:	8b9b      	ldrh	r3, [r3, #28]
 8005d74:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 8005d76:	2f1b      	cmp	r7, #27
 8005d78:	d30a      	bcc.n	8005d90 <USBPD_PRL_SendMessage+0x208>
 8005d7a:	0bdf      	lsrs	r7, r3, #15
 8005d7c:	d008      	beq.n	8005d90 <USBPD_PRL_SendMessage+0x208>
 8005d7e:	23e0      	movs	r3, #224	; 0xe0
 8005d80:	01db      	lsls	r3, r3, #7
 8005d82:	4313      	orrs	r3, r2
 8005d84:	824b      	strh	r3, [r1, #18]
 8005d86:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8005d88:	391a      	subs	r1, #26
 8005d8a:	8441      	strh	r1, [r0, #34]	; 0x22
 8005d8c:	241e      	movs	r4, #30
 8005d8e:	e051      	b.n	8005e34 <USBPD_PRL_SendMessage+0x2ac>
 8005d90:	0ada      	lsrs	r2, r3, #11
 8005d92:	0712      	lsls	r2, r2, #28
 8005d94:	d107      	bne.n	8005da6 <USBPD_PRL_SendMessage+0x21e>
 8005d96:	22fe      	movs	r2, #254	; 0xfe
 8005d98:	0212      	lsls	r2, r2, #8
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d9e:	05db      	lsls	r3, r3, #23
 8005da0:	0ddb      	lsrs	r3, r3, #23
 8005da2:	4313      	orrs	r3, r2
 8005da4:	8383      	strh	r3, [r0, #28]
 8005da6:	8a4b      	ldrh	r3, [r1, #18]
 8005da8:	4a8b      	ldr	r2, [pc, #556]	; (8005fd8 <.text_25>)
 8005daa:	401a      	ands	r2, r3
 8005dac:	824a      	strh	r2, [r1, #18]
 8005dae:	8b83      	ldrh	r3, [r0, #28]
 8005db0:	0bdb      	lsrs	r3, r3, #15
 8005db2:	d03c      	beq.n	8005e2e <USBPD_PRL_SendMessage+0x2a6>
 8005db4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005db6:	1c9b      	adds	r3, r3, #2
 8005db8:	089b      	lsrs	r3, r3, #2
 8005dba:	031b      	lsls	r3, r3, #12
 8005dbc:	24e0      	movs	r4, #224	; 0xe0
 8005dbe:	01e4      	lsls	r4, r4, #7
 8005dc0:	401c      	ands	r4, r3
 8005dc2:	4314      	orrs	r4, r2
 8005dc4:	824c      	strh	r4, [r1, #18]
 8005dc6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8005dc8:	1c80      	adds	r0, r0, #2
 8005dca:	0781      	lsls	r1, r0, #30
 8005dcc:	0f89      	lsrs	r1, r1, #30
 8005dce:	d025      	beq.n	8005e1c <USBPD_PRL_SendMessage+0x294>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	483b      	ldr	r0, [pc, #236]	; (8005ec0 <USBPD_PRL_SendMessage+0x338>)
 8005dd4:	9b05      	ldr	r3, [sp, #20]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	18c0      	adds	r0, r0, r3
 8005dda:	9000      	str	r0, [sp, #0]
 8005ddc:	9802      	ldr	r0, [sp, #8]
 8005dde:	9102      	str	r1, [sp, #8]
 8005de0:	e004      	b.n	8005dec <USBPD_PRL_SendMessage+0x264>
 8005de2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005de4:	1859      	adds	r1, r3, r1
 8005de6:	1841      	adds	r1, r0, r1
 8005de8:	710e      	strb	r6, [r1, #4]
 8005dea:	1c52      	adds	r2, r2, #1
 8005dec:	9900      	ldr	r1, [sp, #0]
 8005dee:	680b      	ldr	r3, [r1, #0]
 8005df0:	b2d1      	uxtb	r1, r2
 8005df2:	2404      	movs	r4, #4
 8005df4:	9f02      	ldr	r7, [sp, #8]
 8005df6:	1be4      	subs	r4, r4, r7
 8005df8:	42a1      	cmp	r1, r4
 8005dfa:	d3f2      	bcc.n	8005de2 <USBPD_PRL_SendMessage+0x25a>
 8005dfc:	9002      	str	r0, [sp, #8]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	3012      	adds	r0, #18
 8005e02:	9903      	ldr	r1, [sp, #12]
 8005e04:	1840      	adds	r0, r0, r1
 8005e06:	8801      	ldrh	r1, [r0, #0]
 8005e08:	4a73      	ldr	r2, [pc, #460]	; (8005fd8 <.text_25>)
 8005e0a:	400a      	ands	r2, r1
 8005e0c:	0b09      	lsrs	r1, r1, #12
 8005e0e:	1c49      	adds	r1, r1, #1
 8005e10:	0309      	lsls	r1, r1, #12
 8005e12:	23e0      	movs	r3, #224	; 0xe0
 8005e14:	01db      	lsls	r3, r3, #7
 8005e16:	400b      	ands	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	8003      	strh	r3, [r0, #0]
 8005e1c:	9800      	ldr	r0, [sp, #0]
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	3012      	adds	r0, #18
 8005e22:	9903      	ldr	r1, [sp, #12]
 8005e24:	5a40      	ldrh	r0, [r0, r1]
 8005e26:	0440      	lsls	r0, r0, #17
 8005e28:	0f40      	lsrs	r0, r0, #29
 8005e2a:	0084      	lsls	r4, r0, #2
 8005e2c:	1ca4      	adds	r4, r4, #2
 8005e2e:	9800      	ldr	r0, [sp, #0]
 8005e30:	6800      	ldr	r0, [r0, #0]
 8005e32:	8446      	strh	r6, [r0, #34]	; 0x22
 8005e34:	9800      	ldr	r0, [sp, #0]
 8005e36:	6800      	ldr	r0, [r0, #0]
 8005e38:	8b80      	ldrh	r0, [r0, #28]
 8005e3a:	9902      	ldr	r1, [sp, #8]
 8005e3c:	7088      	strb	r0, [r1, #2]
 8005e3e:	9800      	ldr	r0, [sp, #0]
 8005e40:	6800      	ldr	r0, [r0, #0]
 8005e42:	8b80      	ldrh	r0, [r0, #28]
 8005e44:	0a00      	lsrs	r0, r0, #8
 8005e46:	9902      	ldr	r1, [sp, #8]
 8005e48:	70c8      	strb	r0, [r1, #3]
 8005e4a:	9800      	ldr	r0, [sp, #0]
 8005e4c:	6802      	ldr	r2, [r0, #0]
 8005e4e:	0010      	movs	r0, r2
 8005e50:	3012      	adds	r0, #18
 8005e52:	9903      	ldr	r1, [sp, #12]
 8005e54:	1840      	adds	r0, r0, r1
 8005e56:	8803      	ldrh	r3, [r0, #0]
 8005e58:	498c      	ldr	r1, [pc, #560]	; (800608c <.text_30>)
 8005e5a:	4019      	ands	r1, r3
 8005e5c:	320b      	adds	r2, #11
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	5cd2      	ldrb	r2, [r2, r3]
 8005e62:	0253      	lsls	r3, r2, #9
 8005e64:	22e0      	movs	r2, #224	; 0xe0
 8005e66:	0112      	lsls	r2, r2, #4
 8005e68:	401a      	ands	r2, r3
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	8002      	strh	r2, [r0, #0]
 8005e6e:	9802      	ldr	r0, [sp, #8]
 8005e70:	7002      	strb	r2, [r0, #0]
 8005e72:	9800      	ldr	r0, [sp, #0]
 8005e74:	6800      	ldr	r0, [r0, #0]
 8005e76:	3012      	adds	r0, #18
 8005e78:	9903      	ldr	r1, [sp, #12]
 8005e7a:	5a40      	ldrh	r0, [r0, r1]
 8005e7c:	0a00      	lsrs	r0, r0, #8
 8005e7e:	9902      	ldr	r1, [sp, #8]
 8005e80:	7048      	strb	r0, [r1, #1]
 8005e82:	9800      	ldr	r0, [sp, #0]
 8005e84:	6800      	ldr	r0, [r0, #0]
 8005e86:	81c4      	strh	r4, [r0, #14]
 8005e88:	210a      	movs	r1, #10
 8005e8a:	7141      	strb	r1, [r0, #5]
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	7401      	strb	r1, [r0, #16]
 8005e90:	b2a0      	uxth	r0, r4
 8005e92:	9000      	str	r0, [sp, #0]
 8005e94:	9b02      	ldr	r3, [sp, #8]
 8005e96:	4668      	mov	r0, sp
 8005e98:	7902      	ldrb	r2, [r0, #4]
 8005e9a:	7f01      	ldrb	r1, [r0, #28]
 8005e9c:	2002      	movs	r0, #2
 8005e9e:	4e7c      	ldr	r6, [pc, #496]	; (8006090 <.text_31>)
 8005ea0:	6836      	ldr	r6, [r6, #0]
 8005ea2:	47b0      	blx	r6
 8005ea4:	497b      	ldr	r1, [pc, #492]	; (8006094 <.text_32>)
 8005ea6:	4668      	mov	r0, sp
 8005ea8:	7940      	ldrb	r0, [r0, #5]
 8005eaa:	f009 ff1b 	bl	800fce4 <USBPD_TIM_Start>
 8005eae:	b2a3      	uxth	r3, r4
 8005eb0:	9a02      	ldr	r2, [sp, #8]
 8005eb2:	4668      	mov	r0, sp
 8005eb4:	7901      	ldrb	r1, [r0, #4]
 8005eb6:	7f00      	ldrb	r0, [r0, #28]
 8005eb8:	f008 fb83 	bl	800e5c2 <USBPD_PHY_SendMessage>
 8005ebc:	e087      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005ebe:	bf00      	nop
 8005ec0:	20000184 	.word	0x20000184
 8005ec4:	f3ef 8410 	mrs	r4, PRIMASK
 8005ec8:	b672      	cpsid	i
 8005eca:	9800      	ldr	r0, [sp, #0]
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	7940      	ldrb	r0, [r0, #5]
 8005ed0:	280a      	cmp	r0, #10
 8005ed2:	d109      	bne.n	8005ee8 <USBPD_PRL_SendMessage+0x360>
 8005ed4:	4668      	mov	r0, sp
 8005ed6:	7940      	ldrb	r0, [r0, #5]
 8005ed8:	f009 ff72 	bl	800fdc0 <USBPD_TIM_IsExpired>
 8005edc:	2801      	cmp	r0, #1
 8005ede:	d103      	bne.n	8005ee8 <USBPD_PRL_SendMessage+0x360>
 8005ee0:	200d      	movs	r0, #13
 8005ee2:	9900      	ldr	r1, [sp, #0]
 8005ee4:	6809      	ldr	r1, [r1, #0]
 8005ee6:	7148      	strb	r0, [r1, #5]
 8005ee8:	f384 8810 	msr	PRIMASK, r4
 8005eec:	e06f      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005eee:	7aca      	ldrb	r2, [r1, #11]
 8005ef0:	8b67      	ldrh	r7, [r4, #26]
 8005ef2:	053f      	lsls	r7, r7, #20
 8005ef4:	0f7f      	lsrs	r7, r7, #29
 8005ef6:	42ba      	cmp	r2, r7
 8005ef8:	d10c      	bne.n	8005f14 <USBPD_PRL_SendMessage+0x38c>
 8005efa:	7ea3      	ldrb	r3, [r4, #26]
 8005efc:	06db      	lsls	r3, r3, #27
 8005efe:	0edb      	lsrs	r3, r3, #27
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <USBPD_PRL_SendMessage+0x38c>
 8005f04:	1c52      	adds	r2, r2, #1
 8005f06:	0750      	lsls	r0, r2, #29
 8005f08:	0f40      	lsrs	r0, r0, #29
 8005f0a:	72c8      	strb	r0, [r1, #11]
 8005f0c:	9800      	ldr	r0, [sp, #0]
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	7146      	strb	r6, [r0, #5]
 8005f12:	e011      	b.n	8005f38 <USBPD_PRL_SendMessage+0x3b0>
 8005f14:	210d      	movs	r1, #13
 8005f16:	7141      	strb	r1, [r0, #5]
 8005f18:	e059      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005f1a:	7ac8      	ldrb	r0, [r1, #11]
 8005f1c:	1c40      	adds	r0, r0, #1
 8005f1e:	0740      	lsls	r0, r0, #29
 8005f20:	0f40      	lsrs	r0, r0, #29
 8005f22:	72c8      	strb	r0, [r1, #11]
 8005f24:	9800      	ldr	r0, [sp, #0]
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	7146      	strb	r6, [r0, #5]
 8005f2a:	8ba1      	ldrh	r1, [r4, #28]
 8005f2c:	485a      	ldr	r0, [pc, #360]	; (8006098 <.text_33>)
 8005f2e:	4008      	ands	r0, r1
 8005f30:	83a0      	strh	r0, [r4, #28]
 8005f32:	495a      	ldr	r1, [pc, #360]	; (800609c <.text_34>)
 8005f34:	4001      	ands	r1, r0
 8005f36:	83a1      	strh	r1, [r4, #28]
 8005f38:	2505      	movs	r5, #5
 8005f3a:	e048      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005f3c:	78a0      	ldrb	r0, [r4, #2]
 8005f3e:	1c40      	adds	r0, r0, #1
 8005f40:	70a0      	strb	r0, [r4, #2]
 8005f42:	9a03      	ldr	r2, [sp, #12]
 8005f44:	18a2      	adds	r2, r4, r2
 8005f46:	8a52      	ldrh	r2, [r2, #18]
 8005f48:	0613      	lsls	r3, r2, #24
 8005f4a:	0f9b      	lsrs	r3, r3, #30
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <USBPD_PRL_SendMessage+0x3cc>
 8005f50:	2303      	movs	r3, #3
 8005f52:	e000      	b.n	8005f56 <USBPD_PRL_SendMessage+0x3ce>
 8005f54:	2302      	movs	r3, #2
 8005f56:	0bd2      	lsrs	r2, r2, #15
 8005f58:	d006      	beq.n	8005f68 <USBPD_PRL_SendMessage+0x3e0>
 8005f5a:	8ba2      	ldrh	r2, [r4, #28]
 8005f5c:	0bd4      	lsrs	r4, r2, #15
 8005f5e:	d103      	bne.n	8005f68 <USBPD_PRL_SendMessage+0x3e0>
 8005f60:	05d2      	lsls	r2, r2, #23
 8005f62:	0dd2      	lsrs	r2, r2, #23
 8005f64:	2a1b      	cmp	r2, #27
 8005f66:	d207      	bcs.n	8005f78 <USBPD_PRL_SendMessage+0x3f0>
 8005f68:	b2c0      	uxtb	r0, r0
 8005f6a:	4283      	cmp	r3, r0
 8005f6c:	d304      	bcc.n	8005f78 <USBPD_PRL_SendMessage+0x3f0>
 8005f6e:	2010      	movs	r0, #16
 8005f70:	9900      	ldr	r1, [sp, #0]
 8005f72:	6809      	ldr	r1, [r1, #0]
 8005f74:	7148      	strb	r0, [r1, #5]
 8005f76:	e02a      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005f78:	9800      	ldr	r0, [sp, #0]
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	7146      	strb	r6, [r0, #5]
 8005f7e:	2507      	movs	r5, #7
 8005f80:	7ac8      	ldrb	r0, [r1, #11]
 8005f82:	1c40      	adds	r0, r0, #1
 8005f84:	2207      	movs	r2, #7
 8005f86:	4002      	ands	r2, r0
 8005f88:	72ca      	strb	r2, [r1, #11]
 8005f8a:	e020      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005f8c:	210a      	movs	r1, #10
 8005f8e:	7141      	strb	r1, [r0, #5]
 8005f90:	2002      	movs	r0, #2
 8005f92:	7420      	strb	r0, [r4, #16]
 8005f94:	493f      	ldr	r1, [pc, #252]	; (8006094 <.text_32>)
 8005f96:	4668      	mov	r0, sp
 8005f98:	7940      	ldrb	r0, [r0, #5]
 8005f9a:	f009 fea3 	bl	800fce4 <USBPD_TIM_Start>
 8005f9e:	89e3      	ldrh	r3, [r4, #14]
 8005fa0:	9a02      	ldr	r2, [sp, #8]
 8005fa2:	4668      	mov	r0, sp
 8005fa4:	7901      	ldrb	r1, [r0, #4]
 8005fa6:	7f00      	ldrb	r0, [r0, #28]
 8005fa8:	f008 fb0b 	bl	800e5c2 <USBPD_PHY_SendMessage>
 8005fac:	4668      	mov	r0, sp
 8005fae:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005fb0:	9000      	str	r0, [sp, #0]
 8005fb2:	9b02      	ldr	r3, [sp, #8]
 8005fb4:	4668      	mov	r0, sp
 8005fb6:	7902      	ldrb	r2, [r0, #4]
 8005fb8:	7f01      	ldrb	r1, [r0, #28]
 8005fba:	2002      	movs	r0, #2
 8005fbc:	4c34      	ldr	r4, [pc, #208]	; (8006090 <.text_31>)
 8005fbe:	6824      	ldr	r4, [r4, #0]
 8005fc0:	47a0      	blx	r4
 8005fc2:	e004      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005fc4:	7146      	strb	r6, [r0, #5]
 8005fc6:	2506      	movs	r5, #6
 8005fc8:	e001      	b.n	8005fce <USBPD_PRL_SendMessage+0x446>
 8005fca:	7146      	strb	r6, [r0, #5]
 8005fcc:	2510      	movs	r5, #16
 8005fce:	0028      	movs	r0, r5
 8005fd0:	b009      	add	sp, #36	; 0x24
 8005fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd4 <.text_24>:
 8005fd4:	0000ffe0 	.word	0x0000ffe0

08005fd8 <.text_25>:
 8005fd8:	00008fff 	.word	0x00008fff

08005fdc <USBPD_PRL_ResetRequestProcess>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	0005      	movs	r5, r0
 8005fe0:	000e      	movs	r6, r1
 8005fe2:	482f      	ldr	r0, [pc, #188]	; (80060a0 <.text_35>)
 8005fe4:	00a9      	lsls	r1, r5, #2
 8005fe6:	1840      	adds	r0, r0, r1
 8005fe8:	9000      	str	r0, [sp, #0]
 8005fea:	6804      	ldr	r4, [r0, #0]
 8005fec:	2700      	movs	r7, #0
 8005fee:	70e7      	strb	r7, [r4, #3]
 8005ff0:	72e7      	strb	r7, [r4, #11]
 8005ff2:	7327      	strb	r7, [r4, #12]
 8005ff4:	7367      	strb	r7, [r4, #13]
 8005ff6:	220f      	movs	r2, #15
 8005ff8:	2103      	movs	r1, #3
 8005ffa:	1da0      	adds	r0, r4, #6
 8005ffc:	f014 f89a 	bl	801a134 <__aeabi_memset>
 8006000:	9800      	ldr	r0, [sp, #0]
 8006002:	6800      	ldr	r0, [r0, #0]
 8006004:	7147      	strb	r7, [r0, #5]
 8006006:	9700      	str	r7, [sp, #0]
 8006008:	2300      	movs	r3, #0
 800600a:	0032      	movs	r2, r6
 800600c:	0029      	movs	r1, r5
 800600e:	2002      	movs	r0, #2
 8006010:	4f1f      	ldr	r7, [pc, #124]	; (8006090 <.text_31>)
 8006012:	683f      	ldr	r7, [r7, #0]
 8006014:	47b8      	blx	r7
 8006016:	0028      	movs	r0, r5
 8006018:	f000 f849 	bl	80060ae <PRL_DisableRX>
 800601c:	0031      	movs	r1, r6
 800601e:	0028      	movs	r0, r5
 8006020:	f008 fab9 	bl	800e596 <USBPD_PHY_ResetRequest>
 8006024:	2005      	movs	r0, #5
 8006026:	7120      	strb	r0, [r4, #4]
 8006028:	78e0      	ldrb	r0, [r4, #3]
 800602a:	2801      	cmp	r0, #1
 800602c:	d002      	beq.n	8006034 <USBPD_PRL_ResetRequestProcess+0x58>
 800602e:	7920      	ldrb	r0, [r4, #4]
 8006030:	2800      	cmp	r0, #0
 8006032:	d1f9      	bne.n	8006028 <USBPD_PRL_ResetRequestProcess+0x4c>
 8006034:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08006036 <USBDPD_PRL_BistCarrierEyeMode>:
 8006036:	b580      	push	{r7, lr}
 8006038:	2905      	cmp	r1, #5
 800603a:	d102      	bne.n	8006042 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 800603c:	f008 fae0 	bl	800e600 <USBPD_PHY_Send_BIST_Pattern>
 8006040:	bd02      	pop	{r1, pc}
 8006042:	2010      	movs	r0, #16
 8006044:	bd02      	pop	{r1, pc}

08006046 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8006046:	b580      	push	{r7, lr}
 8006048:	2905      	cmp	r1, #5
 800604a:	d103      	bne.n	8006054 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 800604c:	2107      	movs	r1, #7
 800604e:	f008 fae7 	bl	800e620 <USBPD_PHY_ExitTransmit>
 8006052:	bd02      	pop	{r1, pc}
 8006054:	2010      	movs	r0, #16
 8006056:	bd02      	pop	{r1, pc}

08006058 <USBPD_PRL_Reset>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	0004      	movs	r4, r0
 800605c:	4810      	ldr	r0, [pc, #64]	; (80060a0 <.text_35>)
 800605e:	00a1      	lsls	r1, r4, #2
 8006060:	5845      	ldr	r5, [r0, r1]
 8006062:	2600      	movs	r6, #0
 8006064:	716e      	strb	r6, [r5, #5]
 8006066:	702e      	strb	r6, [r5, #0]
 8006068:	712e      	strb	r6, [r5, #4]
 800606a:	72ee      	strb	r6, [r5, #11]
 800606c:	732e      	strb	r6, [r5, #12]
 800606e:	736e      	strb	r6, [r5, #13]
 8006070:	220f      	movs	r2, #15
 8006072:	2103      	movs	r1, #3
 8006074:	1da8      	adds	r0, r5, #6
 8006076:	f014 f85d 	bl	801a134 <__aeabi_memset>
 800607a:	2025      	movs	r0, #37	; 0x25
 800607c:	542e      	strb	r6, [r5, r0]
 800607e:	0020      	movs	r0, r4
 8006080:	f008 fa7f 	bl	800e582 <USBPD_PHY_Reset>
 8006084:	0020      	movs	r0, r4
 8006086:	f008 fb36 	bl	800e6f6 <USBPD_PHY_EnableRX>
 800608a:	bd70      	pop	{r4, r5, r6, pc}

0800608c <.text_30>:
 800608c:	0000f1ff 	.word	0x0000f1ff

08006090 <.text_31>:
 8006090:	20000000 	.word	0x20000000

08006094 <.text_32>:
 8006094:	00002710 	.word	0x00002710

08006098 <.text_33>:
 8006098:	000087ff 	.word	0x000087ff

0800609c <.text_34>:
 800609c:	0000fbff 	.word	0x0000fbff

080060a0 <.text_35>:
 80060a0:	20000184 	.word	0x20000184

080060a4 <USBPD_PRL_Stop>:
 80060a4:	b580      	push	{r7, lr}
 80060a6:	f008 fb35 	bl	800e714 <USBPD_PHY_DisableRX>
 80060aa:	bd01      	pop	{r0, pc}

080060ac <USBPD_PRL_DeInit>:
 80060ac:	4770      	bx	lr

080060ae <PRL_DisableRX>:
 80060ae:	b580      	push	{r7, lr}
 80060b0:	f008 fb30 	bl	800e714 <USBPD_PHY_DisableRX>
 80060b4:	bd01      	pop	{r0, pc}
	...

080060b8 <PRL_Received>:
 80060b8:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80060ba:	b089      	sub	sp, #36	; 0x24
 80060bc:	a809      	add	r0, sp, #36	; 0x24
 80060be:	7805      	ldrb	r5, [r0, #0]
 80060c0:	48d0      	ldr	r0, [pc, #832]	; (8006404 <PRL_Received+0x34c>)
 80060c2:	00a9      	lsls	r1, r5, #2
 80060c4:	1846      	adds	r6, r0, r1
 80060c6:	6834      	ldr	r4, [r6, #0]
 80060c8:	4628      	mov	r0, r5
 80060ca:	f008 fa4f 	bl	800e56c <USBPD_PHY_GetMinGOODCRCTimerValue>
 80060ce:	a909      	add	r1, sp, #36	; 0x24
 80060d0:	7809      	ldrb	r1, [r1, #0]
 80060d2:	0049      	lsls	r1, r1, #1
 80060d4:	466a      	mov	r2, sp
 80060d6:	7011      	strb	r1, [r2, #0]
 80060d8:	0001      	movs	r1, r0
 80060da:	4668      	mov	r0, sp
 80060dc:	7800      	ldrb	r0, [r0, #0]
 80060de:	f009 fe01 	bl	800fce4 <USBPD_TIM_Start>
 80060e2:	2030      	movs	r0, #48	; 0x30
 80060e4:	5c20      	ldrb	r0, [r4, r0]
 80060e6:	2131      	movs	r1, #49	; 0x31
 80060e8:	5c61      	ldrb	r1, [r4, r1]
 80060ea:	0209      	lsls	r1, r1, #8
 80060ec:	1840      	adds	r0, r0, r1
 80060ee:	4669      	mov	r1, sp
 80060f0:	8088      	strh	r0, [r1, #4]
 80060f2:	4668      	mov	r0, sp
 80060f4:	8880      	ldrh	r0, [r0, #4]
 80060f6:	0440      	lsls	r0, r0, #17
 80060f8:	0f40      	lsrs	r0, r0, #29
 80060fa:	0080      	lsls	r0, r0, #2
 80060fc:	9005      	str	r0, [sp, #20]
 80060fe:	1c80      	adds	r0, r0, #2
 8006100:	9007      	str	r0, [sp, #28]
 8006102:	48c1      	ldr	r0, [pc, #772]	; (8006408 <.text_40>)
 8006104:	8889      	ldrh	r1, [r1, #4]
 8006106:	4001      	ands	r1, r0
 8006108:	2901      	cmp	r1, #1
 800610a:	d116      	bne.n	800613a <PRL_Received+0x82>
 800610c:	0068      	lsls	r0, r5, #1
 800610e:	1c40      	adds	r0, r0, #1
 8006110:	b2c0      	uxtb	r0, r0
 8006112:	f009 fe55 	bl	800fdc0 <USBPD_TIM_IsExpired>
 8006116:	2801      	cmp	r0, #1
 8006118:	d04c      	beq.n	80061b4 <PRL_Received+0xfc>
 800611a:	200b      	movs	r0, #11
 800611c:	6831      	ldr	r1, [r6, #0]
 800611e:	7148      	strb	r0, [r1, #5]
 8006120:	4668      	mov	r0, sp
 8006122:	8880      	ldrh	r0, [r0, #4]
 8006124:	8360      	strh	r0, [r4, #26]
 8006126:	9807      	ldr	r0, [sp, #28]
 8006128:	9000      	str	r0, [sp, #0]
 800612a:	0023      	movs	r3, r4
 800612c:	3330      	adds	r3, #48	; 0x30
 800612e:	a80a      	add	r0, sp, #40	; 0x28
 8006130:	7802      	ldrb	r2, [r0, #0]
 8006132:	a809      	add	r0, sp, #36	; 0x24
 8006134:	7801      	ldrb	r1, [r0, #0]
 8006136:	2001      	movs	r0, #1
 8006138:	e15f      	b.n	80063fa <PRL_Received+0x342>
 800613a:	49b4      	ldr	r1, [pc, #720]	; (800640c <.text_41>)
 800613c:	880f      	ldrh	r7, [r1, #0]
 800613e:	2601      	movs	r6, #1
 8006140:	72a6      	strb	r6, [r4, #10]
 8006142:	a90a      	add	r1, sp, #40	; 0x28
 8006144:	7809      	ldrb	r1, [r1, #0]
 8006146:	1861      	adds	r1, r4, r1
 8006148:	9104      	str	r1, [sp, #16]
 800614a:	2500      	movs	r5, #0
 800614c:	4669      	mov	r1, sp
 800614e:	8889      	ldrh	r1, [r1, #4]
 8006150:	4008      	ands	r0, r1
 8006152:	280d      	cmp	r0, #13
 8006154:	d106      	bne.n	8006164 <PRL_Received+0xac>
 8006156:	9904      	ldr	r1, [sp, #16]
 8006158:	72cd      	strb	r5, [r1, #11]
 800615a:	220f      	movs	r2, #15
 800615c:	2103      	movs	r1, #3
 800615e:	1da0      	adds	r0, r4, #6
 8006160:	f013 ffe8 	bl	801a134 <__aeabi_memset>
 8006164:	a80a      	add	r0, sp, #40	; 0x28
 8006166:	7800      	ldrb	r0, [r0, #0]
 8006168:	2800      	cmp	r0, #0
 800616a:	d10d      	bne.n	8006188 <PRL_Received+0xd0>
 800616c:	8a61      	ldrh	r1, [r4, #18]
 800616e:	094a      	lsrs	r2, r1, #5
 8006170:	2001      	movs	r0, #1
 8006172:	4010      	ands	r0, r2
 8006174:	0a0a      	lsrs	r2, r1, #8
 8006176:	2101      	movs	r1, #1
 8006178:	4011      	ands	r1, r2
 800617a:	4abf      	ldr	r2, [pc, #764]	; (8006478 <.text_44>)
 800617c:	403a      	ands	r2, r7
 800617e:	0143      	lsls	r3, r0, #5
 8006180:	4313      	orrs	r3, r2
 8006182:	0208      	lsls	r0, r1, #8
 8006184:	4318      	orrs	r0, r3
 8006186:	e001      	b.n	800618c <PRL_Received+0xd4>
 8006188:	48bc      	ldr	r0, [pc, #752]	; (800647c <.text_45>)
 800618a:	4038      	ands	r0, r7
 800618c:	49bc      	ldr	r1, [pc, #752]	; (8006480 <.text_46>)
 800618e:	4001      	ands	r1, r0
 8006190:	4668      	mov	r0, sp
 8006192:	8880      	ldrh	r0, [r0, #4]
 8006194:	22e0      	movs	r2, #224	; 0xe0
 8006196:	0112      	lsls	r2, r2, #4
 8006198:	4002      	ands	r2, r0
 800619a:	430a      	orrs	r2, r1
 800619c:	2040      	movs	r0, #64	; 0x40
 800619e:	4310      	orrs	r0, r2
 80061a0:	7620      	strb	r0, [r4, #24]
 80061a2:	0a00      	lsrs	r0, r0, #8
 80061a4:	7660      	strb	r0, [r4, #25]
 80061a6:	a80a      	add	r0, sp, #40	; 0x28
 80061a8:	7801      	ldrb	r1, [r0, #0]
 80061aa:	a809      	add	r0, sp, #36	; 0x24
 80061ac:	7800      	ldrb	r0, [r0, #0]
 80061ae:	f7fa fee3 	bl	8000f78 <PE_PRL_PostReceiveEvent>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d100      	bne.n	80061b8 <PRL_Received+0x100>
 80061b6:	e123      	b.n	8006400 <PRL_Received+0x348>
 80061b8:	7426      	strb	r6, [r4, #16]
 80061ba:	4668      	mov	r0, sp
 80061bc:	7800      	ldrb	r0, [r0, #0]
 80061be:	f009 fdff 	bl	800fdc0 <USBPD_TIM_IsExpired>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0f9      	beq.n	80061ba <PRL_Received+0x102>
 80061c6:	2302      	movs	r3, #2
 80061c8:	0022      	movs	r2, r4
 80061ca:	3218      	adds	r2, #24
 80061cc:	a80a      	add	r0, sp, #40	; 0x28
 80061ce:	7801      	ldrb	r1, [r0, #0]
 80061d0:	a809      	add	r0, sp, #36	; 0x24
 80061d2:	7800      	ldrb	r0, [r0, #0]
 80061d4:	f008 f9f5 	bl	800e5c2 <USBPD_PHY_SendMessage>
 80061d8:	9006      	str	r0, [sp, #24]
 80061da:	a80a      	add	r0, sp, #40	; 0x28
 80061dc:	7800      	ldrb	r0, [r0, #0]
 80061de:	7260      	strb	r0, [r4, #9]
 80061e0:	0021      	movs	r1, r4
 80061e2:	3130      	adds	r1, #48	; 0x30
 80061e4:	a809      	add	r0, sp, #36	; 0x24
 80061e6:	7800      	ldrb	r0, [r0, #0]
 80061e8:	f7fa fefa 	bl	8000fe0 <PE_PRL_PostReceiveEventCopy>
 80061ec:	2033      	movs	r0, #51	; 0x33
 80061ee:	5c20      	ldrb	r0, [r4, r0]
 80061f0:	2132      	movs	r1, #50	; 0x32
 80061f2:	5c61      	ldrb	r1, [r4, r1]
 80061f4:	0203      	lsls	r3, r0, #8
 80061f6:	18ca      	adds	r2, r1, r3
 80061f8:	466b      	mov	r3, sp
 80061fa:	80da      	strh	r2, [r3, #6]
 80061fc:	466a      	mov	r2, sp
 80061fe:	8892      	ldrh	r2, [r2, #4]
 8006200:	0452      	lsls	r2, r2, #17
 8006202:	0f52      	lsrs	r2, r2, #29
 8006204:	81da      	strh	r2, [r3, #14]
 8006206:	466a      	mov	r2, sp
 8006208:	88d2      	ldrh	r2, [r2, #6]
 800620a:	05d2      	lsls	r2, r2, #23
 800620c:	0dd2      	lsrs	r2, r2, #23
 800620e:	811a      	strh	r2, [r3, #8]
 8006210:	466a      	mov	r2, sp
 8006212:	88d2      	ldrh	r2, [r2, #6]
 8006214:	0bd2      	lsrs	r2, r2, #15
 8006216:	819a      	strh	r2, [r3, #12]
 8006218:	466a      	mov	r2, sp
 800621a:	8892      	ldrh	r2, [r2, #4]
 800621c:	0bd2      	lsrs	r2, r2, #15
 800621e:	815a      	strh	r2, [r3, #10]
 8006220:	d007      	beq.n	8006232 <PRL_Received+0x17a>
 8006222:	466a      	mov	r2, sp
 8006224:	8992      	ldrh	r2, [r2, #12]
 8006226:	2a00      	cmp	r2, #0
 8006228:	d103      	bne.n	8006232 <PRL_Received+0x17a>
 800622a:	4668      	mov	r0, sp
 800622c:	8900      	ldrh	r0, [r0, #8]
 800622e:	1d00      	adds	r0, r0, #4
 8006230:	e01b      	b.n	800626a <PRL_Received+0x1b2>
 8006232:	7822      	ldrb	r2, [r4, #0]
 8006234:	2a00      	cmp	r2, #0
 8006236:	d117      	bne.n	8006268 <PRL_Received+0x1b0>
 8006238:	466a      	mov	r2, sp
 800623a:	89d2      	ldrh	r2, [r2, #14]
 800623c:	2a00      	cmp	r2, #0
 800623e:	d013      	beq.n	8006268 <PRL_Received+0x1b0>
 8006240:	466a      	mov	r2, sp
 8006242:	8892      	ldrh	r2, [r2, #4]
 8006244:	06d2      	lsls	r2, r2, #27
 8006246:	0ed2      	lsrs	r2, r2, #27
 8006248:	2a03      	cmp	r2, #3
 800624a:	d10d      	bne.n	8006268 <PRL_Received+0x1b0>
 800624c:	0200      	lsls	r0, r0, #8
 800624e:	1808      	adds	r0, r1, r0
 8006250:	2134      	movs	r1, #52	; 0x34
 8006252:	5c61      	ldrb	r1, [r4, r1]
 8006254:	0409      	lsls	r1, r1, #16
 8006256:	1840      	adds	r0, r0, r1
 8006258:	2135      	movs	r1, #53	; 0x35
 800625a:	5c61      	ldrb	r1, [r4, r1]
 800625c:	0609      	lsls	r1, r1, #24
 800625e:	1840      	adds	r0, r0, r1
 8006260:	0f00      	lsrs	r0, r0, #28
 8006262:	2808      	cmp	r0, #8
 8006264:	d100      	bne.n	8006268 <PRL_Received+0x1b0>
 8006266:	7026      	strb	r6, [r4, #0]
 8006268:	9807      	ldr	r0, [sp, #28]
 800626a:	9000      	str	r0, [sp, #0]
 800626c:	0023      	movs	r3, r4
 800626e:	3330      	adds	r3, #48	; 0x30
 8006270:	a80a      	add	r0, sp, #40	; 0x28
 8006272:	7802      	ldrb	r2, [r0, #0]
 8006274:	a809      	add	r0, sp, #36	; 0x24
 8006276:	7801      	ldrb	r1, [r0, #0]
 8006278:	2001      	movs	r0, #1
 800627a:	4fc1      	ldr	r7, [pc, #772]	; (8006580 <.text_51>)
 800627c:	683f      	ldr	r7, [r7, #0]
 800627e:	47b8      	blx	r7
 8006280:	9806      	ldr	r0, [sp, #24]
 8006282:	2800      	cmp	r0, #0
 8006284:	d10b      	bne.n	800629e <PRL_Received+0x1e6>
 8006286:	2002      	movs	r0, #2
 8006288:	9000      	str	r0, [sp, #0]
 800628a:	0023      	movs	r3, r4
 800628c:	3318      	adds	r3, #24
 800628e:	a80a      	add	r0, sp, #40	; 0x28
 8006290:	7802      	ldrb	r2, [r0, #0]
 8006292:	a809      	add	r0, sp, #36	; 0x24
 8006294:	7801      	ldrb	r1, [r0, #0]
 8006296:	2002      	movs	r0, #2
 8006298:	4fb9      	ldr	r7, [pc, #740]	; (8006580 <.text_51>)
 800629a:	683f      	ldr	r7, [r7, #0]
 800629c:	47b8      	blx	r7
 800629e:	4668      	mov	r0, sp
 80062a0:	8880      	ldrh	r0, [r0, #4]
 80062a2:	0a40      	lsrs	r0, r0, #9
 80062a4:	2107      	movs	r1, #7
 80062a6:	9a04      	ldr	r2, [sp, #16]
 80062a8:	7992      	ldrb	r2, [r2, #6]
 80062aa:	2307      	movs	r3, #7
 80062ac:	4003      	ands	r3, r0
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d103      	bne.n	80062ba <PRL_Received+0x202>
 80062b2:	9a06      	ldr	r2, [sp, #24]
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d100      	bne.n	80062ba <PRL_Received+0x202>
 80062b8:	e08f      	b.n	80063da <PRL_Received+0x322>
 80062ba:	4001      	ands	r1, r0
 80062bc:	9804      	ldr	r0, [sp, #16]
 80062be:	7181      	strb	r1, [r0, #6]
 80062c0:	4668      	mov	r0, sp
 80062c2:	8880      	ldrh	r0, [r0, #4]
 80062c4:	8420      	strh	r0, [r4, #32]
 80062c6:	4668      	mov	r0, sp
 80062c8:	8940      	ldrh	r0, [r0, #10]
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d043      	beq.n	8006356 <PRL_Received+0x29e>
 80062ce:	4668      	mov	r0, sp
 80062d0:	8980      	ldrh	r0, [r0, #12]
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d03f      	beq.n	8006356 <PRL_Received+0x29e>
 80062d6:	4668      	mov	r0, sp
 80062d8:	88c0      	ldrh	r0, [r0, #6]
 80062da:	83e0      	strh	r0, [r4, #30]
 80062dc:	4668      	mov	r0, sp
 80062de:	88c0      	ldrh	r0, [r0, #6]
 80062e0:	0440      	lsls	r0, r0, #17
 80062e2:	0f01      	lsrs	r1, r0, #28
 80062e4:	201a      	movs	r0, #26
 80062e6:	4348      	muls	r0, r1
 80062e8:	9905      	ldr	r1, [sp, #20]
 80062ea:	1e89      	subs	r1, r1, #2
 80062ec:	466a      	mov	r2, sp
 80062ee:	88d2      	ldrh	r2, [r2, #6]
 80062f0:	23f8      	movs	r3, #248	; 0xf8
 80062f2:	01db      	lsls	r3, r3, #7
 80062f4:	4013      	ands	r3, r2
 80062f6:	d12f      	bne.n	8006358 <PRL_Received+0x2a0>
 80062f8:	466a      	mov	r2, sp
 80062fa:	88d2      	ldrh	r2, [r2, #6]
 80062fc:	05d2      	lsls	r2, r2, #23
 80062fe:	0dd2      	lsrs	r2, r2, #23
 8006300:	466b      	mov	r3, sp
 8006302:	89db      	ldrh	r3, [r3, #14]
 8006304:	2b07      	cmp	r3, #7
 8006306:	d30a      	bcc.n	800631e <PRL_Received+0x266>
 8006308:	2a1a      	cmp	r2, #26
 800630a:	d811      	bhi.n	8006330 <PRL_Received+0x278>
 800630c:	e007      	b.n	800631e <PRL_Received+0x266>
 800630e:	0023      	movs	r3, r4
 8006310:	3334      	adds	r3, #52	; 0x34
 8006312:	5d5b      	ldrb	r3, [r3, r5]
 8006314:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006316:	182f      	adds	r7, r5, r0
 8006318:	55f3      	strb	r3, [r6, r7]
 800631a:	1c6d      	adds	r5, r5, #1
 800631c:	b2ad      	uxth	r5, r5
 800631e:	428d      	cmp	r5, r1
 8006320:	d3f5      	bcc.n	800630e <PRL_Received+0x256>
 8006322:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006324:	4291      	cmp	r1, r2
 8006326:	d301      	bcc.n	800632c <PRL_Received+0x274>
 8006328:	4669      	mov	r1, sp
 800632a:	8909      	ldrh	r1, [r1, #8]
 800632c:	8001      	strh	r1, [r0, #0]
 800632e:	e00c      	b.n	800634a <PRL_Received+0x292>
 8006330:	2025      	movs	r0, #37	; 0x25
 8006332:	5426      	strb	r6, [r4, r0]
 8006334:	0020      	movs	r0, r4
 8006336:	3034      	adds	r0, #52	; 0x34
 8006338:	5d40      	ldrb	r0, [r0, r5]
 800633a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800633c:	5548      	strb	r0, [r1, r5]
 800633e:	1c6d      	adds	r5, r5, #1
 8006340:	2d1a      	cmp	r5, #26
 8006342:	d3f7      	bcc.n	8006334 <PRL_Received+0x27c>
 8006344:	201a      	movs	r0, #26
 8006346:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006348:	8008      	strh	r0, [r1, #0]
 800634a:	a80a      	add	r0, sp, #40	; 0x28
 800634c:	7801      	ldrb	r1, [r0, #0]
 800634e:	a809      	add	r0, sp, #36	; 0x24
 8006350:	7800      	ldrb	r0, [r0, #0]
 8006352:	f7fa fe11 	bl	8000f78 <PE_PRL_PostReceiveEvent>
 8006356:	e053      	b.n	8006400 <PRL_Received+0x348>
 8006358:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800635a:	8812      	ldrh	r2, [r2, #0]
 800635c:	9b05      	ldr	r3, [sp, #20]
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	1e9b      	subs	r3, r3, #2
 8006362:	27ff      	movs	r7, #255	; 0xff
 8006364:	1dbf      	adds	r7, r7, #6
 8006366:	321a      	adds	r2, #26
 8006368:	42ba      	cmp	r2, r7
 800636a:	d21b      	bcs.n	80063a4 <PRL_Received+0x2ec>
 800636c:	466a      	mov	r2, sp
 800636e:	8912      	ldrh	r2, [r2, #8]
 8006370:	4293      	cmp	r3, r2
 8006372:	d217      	bcs.n	80063a4 <PRL_Received+0x2ec>
 8006374:	2225      	movs	r2, #37	; 0x25
 8006376:	54a6      	strb	r6, [r4, r2]
 8006378:	e007      	b.n	800638a <PRL_Received+0x2d2>
 800637a:	0022      	movs	r2, r4
 800637c:	3234      	adds	r2, #52	; 0x34
 800637e:	5d52      	ldrb	r2, [r2, r5]
 8006380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006382:	182e      	adds	r6, r5, r0
 8006384:	559a      	strb	r2, [r3, r6]
 8006386:	1c6d      	adds	r5, r5, #1
 8006388:	b2ad      	uxth	r5, r5
 800638a:	428d      	cmp	r5, r1
 800638c:	d3f5      	bcc.n	800637a <PRL_Received+0x2c2>
 800638e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006390:	8801      	ldrh	r1, [r0, #0]
 8006392:	466a      	mov	r2, sp
 8006394:	8892      	ldrh	r2, [r2, #4]
 8006396:	0a92      	lsrs	r2, r2, #10
 8006398:	231c      	movs	r3, #28
 800639a:	4013      	ands	r3, r2
 800639c:	1e9a      	subs	r2, r3, #2
 800639e:	1889      	adds	r1, r1, r2
 80063a0:	8001      	strh	r1, [r0, #0]
 80063a2:	e02d      	b.n	8006400 <PRL_Received+0x348>
 80063a4:	42bb      	cmp	r3, r7
 80063a6:	d215      	bcs.n	80063d4 <PRL_Received+0x31c>
 80063a8:	466a      	mov	r2, sp
 80063aa:	8912      	ldrh	r2, [r2, #8]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d311      	bcc.n	80063d4 <PRL_Received+0x31c>
 80063b0:	2225      	movs	r2, #37	; 0x25
 80063b2:	54a6      	strb	r6, [r4, r2]
 80063b4:	e007      	b.n	80063c6 <PRL_Received+0x30e>
 80063b6:	0022      	movs	r2, r4
 80063b8:	3234      	adds	r2, #52	; 0x34
 80063ba:	5d52      	ldrb	r2, [r2, r5]
 80063bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063be:	182e      	adds	r6, r5, r0
 80063c0:	559a      	strb	r2, [r3, r6]
 80063c2:	1c6d      	adds	r5, r5, #1
 80063c4:	b2ad      	uxth	r5, r5
 80063c6:	428d      	cmp	r5, r1
 80063c8:	d3f5      	bcc.n	80063b6 <PRL_Received+0x2fe>
 80063ca:	4668      	mov	r0, sp
 80063cc:	8900      	ldrh	r0, [r0, #8]
 80063ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80063d0:	8008      	strh	r0, [r1, #0]
 80063d2:	e015      	b.n	8006400 <PRL_Received+0x348>
 80063d4:	2025      	movs	r0, #37	; 0x25
 80063d6:	5425      	strb	r5, [r4, r0]
 80063d8:	e012      	b.n	8006400 <PRL_Received+0x348>
 80063da:	20ff      	movs	r0, #255	; 0xff
 80063dc:	7260      	strb	r0, [r4, #9]
 80063de:	7425      	strb	r5, [r4, #16]
 80063e0:	a809      	add	r0, sp, #36	; 0x24
 80063e2:	7800      	ldrb	r0, [r0, #0]
 80063e4:	f7fa fde4 	bl	8000fb0 <PE_PRL_PostReceiveEventError>
 80063e8:	72a5      	strb	r5, [r4, #10]
 80063ea:	2017      	movs	r0, #23
 80063ec:	9000      	str	r0, [sp, #0]
 80063ee:	bf00      	nop
 80063f0:	a367      	add	r3, pc, #412	; (adr r3, 8006590 <.text_55>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	a809      	add	r0, sp, #36	; 0x24
 80063f6:	7801      	ldrb	r1, [r0, #0]
 80063f8:	2006      	movs	r0, #6
 80063fa:	4c61      	ldr	r4, [pc, #388]	; (8006580 <.text_51>)
 80063fc:	6824      	ldr	r4, [r4, #0]
 80063fe:	47a0      	blx	r4
 8006400:	b00b      	add	sp, #44	; 0x2c
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006404:	20000184 	.word	0x20000184

08006408 <.text_40>:
 8006408:	0000f01f 	.word	0x0000f01f

0800640c <.text_41>:
 800640c:	0801a2fc 	.word	0x0801a2fc

08006410 <PRL_ResetIndicate>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	0004      	movs	r4, r0
 8006414:	000d      	movs	r5, r1
 8006416:	2d05      	cmp	r5, #5
 8006418:	d119      	bne.n	800644e <PRL_ResetIndicate+0x3e>
 800641a:	485a      	ldr	r0, [pc, #360]	; (8006584 <.text_52>)
 800641c:	00a1      	lsls	r1, r4, #2
 800641e:	1840      	adds	r0, r0, r1
 8006420:	9000      	str	r0, [sp, #0]
 8006422:	6807      	ldr	r7, [r0, #0]
 8006424:	2600      	movs	r6, #0
 8006426:	2000      	movs	r0, #0
 8006428:	b2c2      	uxtb	r2, r0
 800642a:	18ba      	adds	r2, r7, r2
 800642c:	72d6      	strb	r6, [r2, #11]
 800642e:	1c40      	adds	r0, r0, #1
 8006430:	b2c1      	uxtb	r1, r0
 8006432:	2903      	cmp	r1, #3
 8006434:	d3f8      	bcc.n	8006428 <PRL_ResetIndicate+0x18>
 8006436:	220f      	movs	r2, #15
 8006438:	2103      	movs	r1, #3
 800643a:	1db8      	adds	r0, r7, #6
 800643c:	f013 fe7a 	bl	801a134 <__aeabi_memset>
 8006440:	9900      	ldr	r1, [sp, #0]
 8006442:	6809      	ldr	r1, [r1, #0]
 8006444:	714e      	strb	r6, [r1, #5]
 8006446:	703e      	strb	r6, [r7, #0]
 8006448:	0020      	movs	r0, r4
 800644a:	f7ff fe30 	bl	80060ae <PRL_DisableRX>
 800644e:	2000      	movs	r0, #0
 8006450:	9000      	str	r0, [sp, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	002a      	movs	r2, r5
 8006456:	0021      	movs	r1, r4
 8006458:	2001      	movs	r0, #1
 800645a:	4e49      	ldr	r6, [pc, #292]	; (8006580 <.text_51>)
 800645c:	6836      	ldr	r6, [r6, #0]
 800645e:	47b0      	blx	r6
 8006460:	0029      	movs	r1, r5
 8006462:	0020      	movs	r0, r4
 8006464:	f7fa fc80 	bl	8000d68 <PE_PRL_ResetReceived>
 8006468:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800646a <PRL_ResetCompleted>:
 800646a:	2101      	movs	r1, #1
 800646c:	4a45      	ldr	r2, [pc, #276]	; (8006584 <.text_52>)
 800646e:	0080      	lsls	r0, r0, #2
 8006470:	5810      	ldr	r0, [r2, r0]
 8006472:	70c1      	strb	r1, [r0, #3]
 8006474:	4770      	bx	lr
	...

08006478 <.text_44>:
 8006478:	0000fedf 	.word	0x0000fedf

0800647c <.text_45>:
 800647c:	0000feff 	.word	0x0000feff

08006480 <.text_46>:
 8006480:	0000f13f 	.word	0x0000f13f

08006484 <PRL_BistCompleted>:
 8006484:	b580      	push	{r7, lr}
 8006486:	f7fa fc9b 	bl	8000dc0 <PE_PRL_BistCompleted>
 800648a:	bd01      	pop	{r0, pc}

0800648c <PRL_TxCompleted>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	0004      	movs	r4, r0
 8006490:	4a3c      	ldr	r2, [pc, #240]	; (8006584 <.text_52>)
 8006492:	00a3      	lsls	r3, r4, #2
 8006494:	58d6      	ldr	r6, [r2, r3]
 8006496:	2500      	movs	r5, #0
 8006498:	7c32      	ldrb	r2, [r6, #16]
 800649a:	2a01      	cmp	r2, #1
 800649c:	d002      	beq.n	80064a4 <PRL_TxCompleted+0x18>
 800649e:	2a02      	cmp	r2, #2
 80064a0:	d009      	beq.n	80064b6 <PRL_TxCompleted+0x2a>
 80064a2:	e010      	b.n	80064c6 <PRL_TxCompleted+0x3a>
 80064a4:	2900      	cmp	r1, #0
 80064a6:	d102      	bne.n	80064ae <PRL_TxCompleted+0x22>
 80064a8:	f7fa fdb4 	bl	8001014 <PE_PRL_PostReceiveEventComplete>
 80064ac:	e001      	b.n	80064b2 <PRL_TxCompleted+0x26>
 80064ae:	f7fa fd7f 	bl	8000fb0 <PE_PRL_PostReceiveEventError>
 80064b2:	72b5      	strb	r5, [r6, #10]
 80064b4:	e007      	b.n	80064c6 <PRL_TxCompleted+0x3a>
 80064b6:	f008 f84b 	bl	800e550 <USBPD_PHY_GetRetryTimerValue>
 80064ba:	0001      	movs	r1, r0
 80064bc:	0060      	lsls	r0, r4, #1
 80064be:	1c40      	adds	r0, r0, #1
 80064c0:	b2c0      	uxtb	r0, r0
 80064c2:	f009 fc0f 	bl	800fce4 <USBPD_TIM_Start>
 80064c6:	7435      	strb	r5, [r6, #16]
 80064c8:	bd70      	pop	{r4, r5, r6, pc}

080064ca <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80064ca:	b570      	push	{r4, r5, r6, lr}
 80064cc:	4c2d      	ldr	r4, [pc, #180]	; (8006584 <.text_52>)
 80064ce:	0080      	lsls	r0, r0, #2
 80064d0:	5820      	ldr	r0, [r4, r0]
 80064d2:	2480      	movs	r4, #128	; 0x80
 80064d4:	0224      	lsls	r4, r4, #8
 80064d6:	8b85      	ldrh	r5, [r0, #28]
 80064d8:	4e2b      	ldr	r6, [pc, #172]	; (8006588 <.text_53>)
 80064da:	402e      	ands	r6, r5
 80064dc:	02c9      	lsls	r1, r1, #11
 80064de:	4331      	orrs	r1, r6
 80064e0:	25fe      	movs	r5, #254	; 0xfe
 80064e2:	022d      	lsls	r5, r5, #8
 80064e4:	400d      	ands	r5, r1
 80064e6:	05d1      	lsls	r1, r2, #23
 80064e8:	0dc9      	lsrs	r1, r1, #23
 80064ea:	4329      	orrs	r1, r5
 80064ec:	4321      	orrs	r1, r4
 80064ee:	8381      	strh	r1, [r0, #28]
 80064f0:	8a41      	ldrh	r1, [r0, #18]
 80064f2:	430c      	orrs	r4, r1
 80064f4:	8244      	strh	r4, [r0, #18]
 80064f6:	4a25      	ldr	r2, [pc, #148]	; (800658c <.text_54>)
 80064f8:	4022      	ands	r2, r4
 80064fa:	2120      	movs	r1, #32
 80064fc:	5c41      	ldrb	r1, [r0, r1]
 80064fe:	06c9      	lsls	r1, r1, #27
 8006500:	0ec9      	lsrs	r1, r1, #27
 8006502:	4311      	orrs	r1, r2
 8006504:	8241      	strh	r1, [r0, #18]
 8006506:	7019      	strb	r1, [r3, #0]
 8006508:	8a41      	ldrh	r1, [r0, #18]
 800650a:	0a09      	lsrs	r1, r1, #8
 800650c:	7059      	strb	r1, [r3, #1]
 800650e:	8b81      	ldrh	r1, [r0, #28]
 8006510:	7099      	strb	r1, [r3, #2]
 8006512:	8b80      	ldrh	r0, [r0, #28]
 8006514:	0a00      	lsrs	r0, r0, #8
 8006516:	70d8      	strb	r0, [r3, #3]
 8006518:	bd70      	pop	{r4, r5, r6, pc}

0800651a <USBPD_PRL_PrepareChunkRequest>:
 800651a:	b510      	push	{r4, lr}
 800651c:	4a19      	ldr	r2, [pc, #100]	; (8006584 <.text_52>)
 800651e:	0080      	lsls	r0, r0, #2
 8006520:	5810      	ldr	r0, [r2, r0]
 8006522:	8b83      	ldrh	r3, [r0, #28]
 8006524:	2284      	movs	r2, #132	; 0x84
 8006526:	0212      	lsls	r2, r2, #8
 8006528:	431a      	orrs	r2, r3
 800652a:	8382      	strh	r2, [r0, #28]
 800652c:	2386      	movs	r3, #134	; 0x86
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	4013      	ands	r3, r2
 8006532:	8bc2      	ldrh	r2, [r0, #30]
 8006534:	0ad2      	lsrs	r2, r2, #11
 8006536:	1c52      	adds	r2, r2, #1
 8006538:	02d2      	lsls	r2, r2, #11
 800653a:	24f0      	movs	r4, #240	; 0xf0
 800653c:	01e4      	lsls	r4, r4, #7
 800653e:	4014      	ands	r4, r2
 8006540:	431c      	orrs	r4, r3
 8006542:	8384      	strh	r4, [r0, #28]
 8006544:	8a43      	ldrh	r3, [r0, #18]
 8006546:	2280      	movs	r2, #128	; 0x80
 8006548:	0212      	lsls	r2, r2, #8
 800654a:	431a      	orrs	r2, r3
 800654c:	0003      	movs	r3, r0
 800654e:	3312      	adds	r3, #18
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	4c0e      	ldr	r4, [pc, #56]	; (800658c <.text_54>)
 8006554:	4014      	ands	r4, r2
 8006556:	2220      	movs	r2, #32
 8006558:	5c82      	ldrb	r2, [r0, r2]
 800655a:	06d2      	lsls	r2, r2, #27
 800655c:	0ed2      	lsrs	r2, r2, #27
 800655e:	4322      	orrs	r2, r4
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	7142      	strb	r2, [r0, #5]
 8006566:	8a43      	ldrh	r3, [r0, #18]
 8006568:	700b      	strb	r3, [r1, #0]
 800656a:	8a43      	ldrh	r3, [r0, #18]
 800656c:	0a1b      	lsrs	r3, r3, #8
 800656e:	704b      	strb	r3, [r1, #1]
 8006570:	8b83      	ldrh	r3, [r0, #28]
 8006572:	708b      	strb	r3, [r1, #2]
 8006574:	8b80      	ldrh	r0, [r0, #28]
 8006576:	0a00      	lsrs	r0, r0, #8
 8006578:	70c8      	strb	r0, [r1, #3]
 800657a:	710a      	strb	r2, [r1, #4]
 800657c:	714a      	strb	r2, [r1, #5]
 800657e:	bd10      	pop	{r4, pc}

08006580 <.text_51>:
 8006580:	20000000 	.word	0x20000000

08006584 <.text_52>:
 8006584:	20000184 	.word	0x20000184

08006588 <.text_53>:
 8006588:	000083ff 	.word	0x000083ff

0800658c <.text_54>:
 800658c:	0000ffe0 	.word	0x0000ffe0

08006590 <.text_55>:
 8006590:	5f4c5250 	.word	0x5f4c5250
 8006594:	4e455645 	.word	0x4e455645
 8006598:	58525f54 	.word	0x58525f54
 800659c:	5349445f 	.word	0x5349445f
 80065a0:	44524143 	.word	0x44524143
 80065a4:	00004445 	.word	0x00004445

080065a8 <strlen>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	5cc2      	ldrb	r2, [r0, r3]
 80065ac:	3301      	adds	r3, #1
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	d1fb      	bne.n	80065aa <strlen+0x2>
 80065b2:	1e58      	subs	r0, r3, #1
 80065b4:	4770      	bx	lr
	...

080065b8 <__udivsi3>:
 80065b8:	2200      	movs	r2, #0
 80065ba:	0843      	lsrs	r3, r0, #1
 80065bc:	428b      	cmp	r3, r1
 80065be:	d374      	bcc.n	80066aa <__udivsi3+0xf2>
 80065c0:	0903      	lsrs	r3, r0, #4
 80065c2:	428b      	cmp	r3, r1
 80065c4:	d35f      	bcc.n	8006686 <__udivsi3+0xce>
 80065c6:	0a03      	lsrs	r3, r0, #8
 80065c8:	428b      	cmp	r3, r1
 80065ca:	d344      	bcc.n	8006656 <__udivsi3+0x9e>
 80065cc:	0b03      	lsrs	r3, r0, #12
 80065ce:	428b      	cmp	r3, r1
 80065d0:	d328      	bcc.n	8006624 <__udivsi3+0x6c>
 80065d2:	0c03      	lsrs	r3, r0, #16
 80065d4:	428b      	cmp	r3, r1
 80065d6:	d30d      	bcc.n	80065f4 <__udivsi3+0x3c>
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	0209      	lsls	r1, r1, #8
 80065dc:	ba12      	rev	r2, r2
 80065de:	0c03      	lsrs	r3, r0, #16
 80065e0:	428b      	cmp	r3, r1
 80065e2:	d302      	bcc.n	80065ea <__udivsi3+0x32>
 80065e4:	1212      	asrs	r2, r2, #8
 80065e6:	0209      	lsls	r1, r1, #8
 80065e8:	d065      	beq.n	80066b6 <__udivsi3+0xfe>
 80065ea:	0b03      	lsrs	r3, r0, #12
 80065ec:	428b      	cmp	r3, r1
 80065ee:	d319      	bcc.n	8006624 <__udivsi3+0x6c>
 80065f0:	e000      	b.n	80065f4 <__udivsi3+0x3c>
 80065f2:	0a09      	lsrs	r1, r1, #8
 80065f4:	0bc3      	lsrs	r3, r0, #15
 80065f6:	428b      	cmp	r3, r1
 80065f8:	d301      	bcc.n	80065fe <__udivsi3+0x46>
 80065fa:	03cb      	lsls	r3, r1, #15
 80065fc:	1ac0      	subs	r0, r0, r3
 80065fe:	4152      	adcs	r2, r2
 8006600:	0b83      	lsrs	r3, r0, #14
 8006602:	428b      	cmp	r3, r1
 8006604:	d301      	bcc.n	800660a <__udivsi3+0x52>
 8006606:	038b      	lsls	r3, r1, #14
 8006608:	1ac0      	subs	r0, r0, r3
 800660a:	4152      	adcs	r2, r2
 800660c:	0b43      	lsrs	r3, r0, #13
 800660e:	428b      	cmp	r3, r1
 8006610:	d301      	bcc.n	8006616 <__udivsi3+0x5e>
 8006612:	034b      	lsls	r3, r1, #13
 8006614:	1ac0      	subs	r0, r0, r3
 8006616:	4152      	adcs	r2, r2
 8006618:	0b03      	lsrs	r3, r0, #12
 800661a:	428b      	cmp	r3, r1
 800661c:	d301      	bcc.n	8006622 <__udivsi3+0x6a>
 800661e:	030b      	lsls	r3, r1, #12
 8006620:	1ac0      	subs	r0, r0, r3
 8006622:	4152      	adcs	r2, r2
 8006624:	0ac3      	lsrs	r3, r0, #11
 8006626:	428b      	cmp	r3, r1
 8006628:	d301      	bcc.n	800662e <__udivsi3+0x76>
 800662a:	02cb      	lsls	r3, r1, #11
 800662c:	1ac0      	subs	r0, r0, r3
 800662e:	4152      	adcs	r2, r2
 8006630:	0a83      	lsrs	r3, r0, #10
 8006632:	428b      	cmp	r3, r1
 8006634:	d301      	bcc.n	800663a <__udivsi3+0x82>
 8006636:	028b      	lsls	r3, r1, #10
 8006638:	1ac0      	subs	r0, r0, r3
 800663a:	4152      	adcs	r2, r2
 800663c:	0a43      	lsrs	r3, r0, #9
 800663e:	428b      	cmp	r3, r1
 8006640:	d301      	bcc.n	8006646 <__udivsi3+0x8e>
 8006642:	024b      	lsls	r3, r1, #9
 8006644:	1ac0      	subs	r0, r0, r3
 8006646:	4152      	adcs	r2, r2
 8006648:	0a03      	lsrs	r3, r0, #8
 800664a:	428b      	cmp	r3, r1
 800664c:	d301      	bcc.n	8006652 <__udivsi3+0x9a>
 800664e:	020b      	lsls	r3, r1, #8
 8006650:	1ac0      	subs	r0, r0, r3
 8006652:	4152      	adcs	r2, r2
 8006654:	d2cd      	bcs.n	80065f2 <__udivsi3+0x3a>
 8006656:	09c3      	lsrs	r3, r0, #7
 8006658:	428b      	cmp	r3, r1
 800665a:	d301      	bcc.n	8006660 <__udivsi3+0xa8>
 800665c:	01cb      	lsls	r3, r1, #7
 800665e:	1ac0      	subs	r0, r0, r3
 8006660:	4152      	adcs	r2, r2
 8006662:	0983      	lsrs	r3, r0, #6
 8006664:	428b      	cmp	r3, r1
 8006666:	d301      	bcc.n	800666c <__udivsi3+0xb4>
 8006668:	018b      	lsls	r3, r1, #6
 800666a:	1ac0      	subs	r0, r0, r3
 800666c:	4152      	adcs	r2, r2
 800666e:	0943      	lsrs	r3, r0, #5
 8006670:	428b      	cmp	r3, r1
 8006672:	d301      	bcc.n	8006678 <__udivsi3+0xc0>
 8006674:	014b      	lsls	r3, r1, #5
 8006676:	1ac0      	subs	r0, r0, r3
 8006678:	4152      	adcs	r2, r2
 800667a:	0903      	lsrs	r3, r0, #4
 800667c:	428b      	cmp	r3, r1
 800667e:	d301      	bcc.n	8006684 <__udivsi3+0xcc>
 8006680:	010b      	lsls	r3, r1, #4
 8006682:	1ac0      	subs	r0, r0, r3
 8006684:	4152      	adcs	r2, r2
 8006686:	08c3      	lsrs	r3, r0, #3
 8006688:	428b      	cmp	r3, r1
 800668a:	d301      	bcc.n	8006690 <__udivsi3+0xd8>
 800668c:	00cb      	lsls	r3, r1, #3
 800668e:	1ac0      	subs	r0, r0, r3
 8006690:	4152      	adcs	r2, r2
 8006692:	0883      	lsrs	r3, r0, #2
 8006694:	428b      	cmp	r3, r1
 8006696:	d301      	bcc.n	800669c <__udivsi3+0xe4>
 8006698:	008b      	lsls	r3, r1, #2
 800669a:	1ac0      	subs	r0, r0, r3
 800669c:	4152      	adcs	r2, r2
 800669e:	0843      	lsrs	r3, r0, #1
 80066a0:	428b      	cmp	r3, r1
 80066a2:	d301      	bcc.n	80066a8 <__udivsi3+0xf0>
 80066a4:	004b      	lsls	r3, r1, #1
 80066a6:	1ac0      	subs	r0, r0, r3
 80066a8:	4152      	adcs	r2, r2
 80066aa:	1a41      	subs	r1, r0, r1
 80066ac:	d200      	bcs.n	80066b0 <__udivsi3+0xf8>
 80066ae:	4601      	mov	r1, r0
 80066b0:	4152      	adcs	r2, r2
 80066b2:	4610      	mov	r0, r2
 80066b4:	4770      	bx	lr
 80066b6:	e7ff      	b.n	80066b8 <__udivsi3+0x100>
 80066b8:	b501      	push	{r0, lr}
 80066ba:	2000      	movs	r0, #0
 80066bc:	f000 f806 	bl	80066cc <__aeabi_idiv0>
 80066c0:	bd02      	pop	{r1, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)

080066c4 <__aeabi_uidivmod>:
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d0f7      	beq.n	80066b8 <__udivsi3+0x100>
 80066c8:	e776      	b.n	80065b8 <__udivsi3>
 80066ca:	4770      	bx	lr

080066cc <__aeabi_idiv0>:
 80066cc:	4770      	bx	lr
 80066ce:	46c0      	nop			; (mov r8, r8)

080066d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	4a11      	ldr	r2, [pc, #68]	; (8006724 <tx_application_define+0x54>)
 80066de:	4912      	ldr	r1, [pc, #72]	; (8006728 <tx_application_define+0x58>)
 80066e0:	4812      	ldr	r0, [pc, #72]	; (800672c <tx_application_define+0x5c>)
 80066e2:	2434      	movs	r4, #52	; 0x34
 80066e4:	9400      	str	r4, [sp, #0]
 80066e6:	f00d f9bf 	bl	8013a68 <_txe_byte_pool_create>
 80066ea:	1e03      	subs	r3, r0, #0
 80066ec:	d105      	bne.n	80066fa <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80066ee:	4b0f      	ldr	r3, [pc, #60]	; (800672c <tx_application_define+0x5c>)
 80066f0:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 f837 	bl	8006768 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	4a0c      	ldr	r2, [pc, #48]	; (8006730 <tx_application_define+0x60>)
 8006700:	490c      	ldr	r1, [pc, #48]	; (8006734 <tx_application_define+0x64>)
 8006702:	480d      	ldr	r0, [pc, #52]	; (8006738 <tx_application_define+0x68>)
 8006704:	2434      	movs	r4, #52	; 0x34
 8006706:	9400      	str	r4, [sp, #0]
 8006708:	f00d f9ae 	bl	8013a68 <_txe_byte_pool_create>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d105      	bne.n	800671c <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <tx_application_define+0x68>)
 8006712:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	0018      	movs	r0, r3
 8006718:	f012 fc8e 	bl	8019038 <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b005      	add	sp, #20
 8006722:	bd90      	pop	{r4, r7, pc}
 8006724:	20000190 	.word	0x20000190
 8006728:	0801a178 	.word	0x0801a178
 800672c:	20008190 	.word	0x20008190
 8006730:	200081c4 	.word	0x200081c4
 8006734:	0801a18c 	.word	0x0801a18c
 8006738:	200101c4 	.word	0x200101c4

0800673c <my_thread_entry>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void my_thread_entry(ULONG thread_input)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 /* Enter into a forever loop. */
 while(1)
 {
  /* Increment thread counter. */
  my_thread_counter++;
 8006744:	4b07      	ldr	r3, [pc, #28]	; (8006764 <my_thread_entry+0x28>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <my_thread_entry+0x28>)
 800674c:	601a      	str	r2, [r3, #0]

  //App_delay(100);
  tx_thread_sleep(20);
 800674e:	2014      	movs	r0, #20
 8006750:	f00c f9e4 	bl	8012b1c <_tx_thread_sleep>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8006754:	23a0      	movs	r3, #160	; 0xa0
 8006756:	05db      	lsls	r3, r3, #23
 8006758:	2120      	movs	r1, #32
 800675a:	0018      	movs	r0, r3
 800675c:	f001 f911 	bl	8007982 <HAL_GPIO_TogglePin>
  my_thread_counter++;
 8006760:	e7f0      	b.n	8006744 <my_thread_entry+0x8>
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	200102a8 	.word	0x200102a8

08006768 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b08f      	sub	sp, #60	; 0x3c
 800676c:	af08      	add	r7, sp, #32
 800676e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN App_ThreadX_Init */
  CHAR *pointer;

  /* Allocate the stack for MainThread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	00da      	lsls	r2, r3, #3
 800677c:	230c      	movs	r3, #12
 800677e:	18f9      	adds	r1, r7, r3
 8006780:	6938      	ldr	r0, [r7, #16]
 8006782:	2300      	movs	r3, #0
 8006784:	f00d f8fa 	bl	801397c <_txe_byte_allocate>
 8006788:	1e03      	subs	r3, r0, #0
 800678a:	d001      	beq.n	8006790 <App_ThreadX_Init+0x28>
					   1024, TX_NO_WAIT) != TX_SUCCESS)
  {
	ret = TX_POOL_ERROR;
 800678c:	2302      	movs	r3, #2
 800678e:	617b      	str	r3, [r7, #20]
  }

  tx_thread_create(&my_thread, "My Thread",
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4c0d      	ldr	r4, [pc, #52]	; (80067c8 <App_ThreadX_Init+0x60>)
 8006794:	490d      	ldr	r1, [pc, #52]	; (80067cc <App_ThreadX_Init+0x64>)
 8006796:	480e      	ldr	r0, [pc, #56]	; (80067d0 <App_ThreadX_Init+0x68>)
 8006798:	22b0      	movs	r2, #176	; 0xb0
 800679a:	9206      	str	r2, [sp, #24]
 800679c:	2201      	movs	r2, #1
 800679e:	9205      	str	r2, [sp, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	9204      	str	r2, [sp, #16]
 80067a4:	2203      	movs	r2, #3
 80067a6:	9203      	str	r2, [sp, #12]
 80067a8:	2203      	movs	r2, #3
 80067aa:	9202      	str	r2, [sp, #8]
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	00d2      	lsls	r2, r2, #3
 80067b0:	9201      	str	r2, [sp, #4]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	0022      	movs	r2, r4
 80067b8:	f00d ff04 	bl	80145c4 <_txe_thread_create>
		pointer,
		1024, 3, 3, TX_NO_TIME_SLICE, TX_AUTO_START);

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80067bc:	697b      	ldr	r3, [r7, #20]
}
 80067be:	0018      	movs	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b007      	add	sp, #28
 80067c4:	bd90      	pop	{r4, r7, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	0800673d 	.word	0x0800673d
 80067cc:	0801a1a0 	.word	0x0801a1a0
 80067d0:	200101f8 	.word	0x200101f8

080067d4 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80067d8:	f00a fabc 	bl	8010d54 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	0002      	movs	r2, r0
 80067ec:	1dfb      	adds	r3, r7, #7
 80067ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80067f0:	1dfb      	adds	r3, r7, #7
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b7f      	cmp	r3, #127	; 0x7f
 80067f6:	d809      	bhi.n	800680c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067f8:	1dfb      	adds	r3, r7, #7
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	001a      	movs	r2, r3
 80067fe:	231f      	movs	r3, #31
 8006800:	401a      	ands	r2, r3
 8006802:	4b04      	ldr	r3, [pc, #16]	; (8006814 <__NVIC_EnableIRQ+0x30>)
 8006804:	2101      	movs	r1, #1
 8006806:	4091      	lsls	r1, r2
 8006808:	000a      	movs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800680c:	46c0      	nop			; (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b002      	add	sp, #8
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000e100 	.word	0xe000e100

08006818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006818:	b590      	push	{r4, r7, lr}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	0002      	movs	r2, r0
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	1dfb      	adds	r3, r7, #7
 8006824:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006826:	1dfb      	adds	r3, r7, #7
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b7f      	cmp	r3, #127	; 0x7f
 800682c:	d828      	bhi.n	8006880 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800682e:	4a2f      	ldr	r2, [pc, #188]	; (80068ec <__NVIC_SetPriority+0xd4>)
 8006830:	1dfb      	adds	r3, r7, #7
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b25b      	sxtb	r3, r3
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	33c0      	adds	r3, #192	; 0xc0
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	589b      	ldr	r3, [r3, r2]
 800683e:	1dfa      	adds	r2, r7, #7
 8006840:	7812      	ldrb	r2, [r2, #0]
 8006842:	0011      	movs	r1, r2
 8006844:	2203      	movs	r2, #3
 8006846:	400a      	ands	r2, r1
 8006848:	00d2      	lsls	r2, r2, #3
 800684a:	21ff      	movs	r1, #255	; 0xff
 800684c:	4091      	lsls	r1, r2
 800684e:	000a      	movs	r2, r1
 8006850:	43d2      	mvns	r2, r2
 8006852:	401a      	ands	r2, r3
 8006854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	019b      	lsls	r3, r3, #6
 800685a:	22ff      	movs	r2, #255	; 0xff
 800685c:	401a      	ands	r2, r3
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	0018      	movs	r0, r3
 8006864:	2303      	movs	r3, #3
 8006866:	4003      	ands	r3, r0
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800686c:	481f      	ldr	r0, [pc, #124]	; (80068ec <__NVIC_SetPriority+0xd4>)
 800686e:	1dfb      	adds	r3, r7, #7
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b25b      	sxtb	r3, r3
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	430a      	orrs	r2, r1
 8006878:	33c0      	adds	r3, #192	; 0xc0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800687e:	e031      	b.n	80068e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006880:	4a1b      	ldr	r2, [pc, #108]	; (80068f0 <__NVIC_SetPriority+0xd8>)
 8006882:	1dfb      	adds	r3, r7, #7
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	0019      	movs	r1, r3
 8006888:	230f      	movs	r3, #15
 800688a:	400b      	ands	r3, r1
 800688c:	3b08      	subs	r3, #8
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	3306      	adds	r3, #6
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	18d3      	adds	r3, r2, r3
 8006896:	3304      	adds	r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	1dfa      	adds	r2, r7, #7
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	0011      	movs	r1, r2
 80068a0:	2203      	movs	r2, #3
 80068a2:	400a      	ands	r2, r1
 80068a4:	00d2      	lsls	r2, r2, #3
 80068a6:	21ff      	movs	r1, #255	; 0xff
 80068a8:	4091      	lsls	r1, r2
 80068aa:	000a      	movs	r2, r1
 80068ac:	43d2      	mvns	r2, r2
 80068ae:	401a      	ands	r2, r3
 80068b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	22ff      	movs	r2, #255	; 0xff
 80068b8:	401a      	ands	r2, r3
 80068ba:	1dfb      	adds	r3, r7, #7
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	0018      	movs	r0, r3
 80068c0:	2303      	movs	r3, #3
 80068c2:	4003      	ands	r3, r0
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068c8:	4809      	ldr	r0, [pc, #36]	; (80068f0 <__NVIC_SetPriority+0xd8>)
 80068ca:	1dfb      	adds	r3, r7, #7
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	001c      	movs	r4, r3
 80068d0:	230f      	movs	r3, #15
 80068d2:	4023      	ands	r3, r4
 80068d4:	3b08      	subs	r3, #8
 80068d6:	089b      	lsrs	r3, r3, #2
 80068d8:	430a      	orrs	r2, r1
 80068da:	3306      	adds	r3, #6
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	18c3      	adds	r3, r0, r3
 80068e0:	3304      	adds	r3, #4
 80068e2:	601a      	str	r2, [r3, #0]
}
 80068e4:	46c0      	nop			; (mov r8, r8)
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b003      	add	sp, #12
 80068ea:	bd90      	pop	{r4, r7, pc}
 80068ec:	e000e100 	.word	0xe000e100
 80068f0:	e000ed00 	.word	0xe000ed00

080068f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <MX_DMA_Init+0x44>)
 80068fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <MX_DMA_Init+0x44>)
 8006900:	2101      	movs	r1, #1
 8006902:	430a      	orrs	r2, r1
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <MX_DMA_Init+0x44>)
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	2201      	movs	r2, #1
 800690c:	4013      	ands	r3, r2
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8006912:	2100      	movs	r1, #0
 8006914:	2009      	movs	r0, #9
 8006916:	f7ff ff7f 	bl	8006818 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800691a:	2009      	movs	r0, #9
 800691c:	f7ff ff62 	bl	80067e4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8006920:	2100      	movs	r1, #0
 8006922:	200a      	movs	r0, #10
 8006924:	f7ff ff78 	bl	8006818 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006928:	200a      	movs	r0, #10
 800692a:	f7ff ff5b 	bl	80067e4 <__NVIC_EnableIRQ>

}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	46bd      	mov	sp, r7
 8006932:	b002      	add	sp, #8
 8006934:	bd80      	pop	{r7, pc}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	40021000 	.word	0x40021000

0800693c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b08b      	sub	sp, #44	; 0x2c
 8006940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006942:	2414      	movs	r4, #20
 8006944:	193b      	adds	r3, r7, r4
 8006946:	0018      	movs	r0, r3
 8006948:	2314      	movs	r3, #20
 800694a:	001a      	movs	r2, r3
 800694c:	2100      	movs	r1, #0
 800694e:	f013 fba7 	bl	801a0a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006952:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006956:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006958:	2104      	movs	r1, #4
 800695a:	430a      	orrs	r2, r1
 800695c:	635a      	str	r2, [r3, #52]	; 0x34
 800695e:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006962:	2204      	movs	r2, #4
 8006964:	4013      	ands	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800696a:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <MX_GPIO_Init+0xe0>)
 800696c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800696e:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006970:	2120      	movs	r1, #32
 8006972:	430a      	orrs	r2, r1
 8006974:	635a      	str	r2, [r3, #52]	; 0x34
 8006976:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697a:	2220      	movs	r2, #32
 800697c:	4013      	ands	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006982:	4b26      	ldr	r3, [pc, #152]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006986:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006988:	2101      	movs	r1, #1
 800698a:	430a      	orrs	r2, r1
 800698c:	635a      	str	r2, [r3, #52]	; 0x34
 800698e:	4b23      	ldr	r3, [pc, #140]	; (8006a1c <MX_GPIO_Init+0xe0>)
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	2201      	movs	r2, #1
 8006994:	4013      	ands	r3, r2
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <MX_GPIO_Init+0xe0>)
 800699c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699e:	4b1f      	ldr	r3, [pc, #124]	; (8006a1c <MX_GPIO_Init+0xe0>)
 80069a0:	2108      	movs	r1, #8
 80069a2:	430a      	orrs	r2, r1
 80069a4:	635a      	str	r2, [r3, #52]	; 0x34
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <MX_GPIO_Init+0xe0>)
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069aa:	2208      	movs	r2, #8
 80069ac:	4013      	ands	r3, r2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80069b2:	23a0      	movs	r3, #160	; 0xa0
 80069b4:	05db      	lsls	r3, r3, #23
 80069b6:	2200      	movs	r2, #0
 80069b8:	2120      	movs	r1, #32
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 ffc4 	bl	8007948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80069c0:	193b      	adds	r3, r7, r4
 80069c2:	220c      	movs	r2, #12
 80069c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c6:	193b      	adds	r3, r7, r4
 80069c8:	2202      	movs	r2, #2
 80069ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069cc:	193b      	adds	r3, r7, r4
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d2:	193b      	adds	r3, r7, r4
 80069d4:	2200      	movs	r2, #0
 80069d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80069d8:	193b      	adds	r3, r7, r4
 80069da:	2201      	movs	r2, #1
 80069dc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069de:	193a      	adds	r2, r7, r4
 80069e0:	23a0      	movs	r3, #160	; 0xa0
 80069e2:	05db      	lsls	r3, r3, #23
 80069e4:	0011      	movs	r1, r2
 80069e6:	0018      	movs	r0, r3
 80069e8:	f000 fe42 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80069ec:	0021      	movs	r1, r4
 80069ee:	187b      	adds	r3, r7, r1
 80069f0:	2220      	movs	r2, #32
 80069f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069f4:	187b      	adds	r3, r7, r1
 80069f6:	2201      	movs	r2, #1
 80069f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fa:	187b      	adds	r3, r7, r1
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	2202      	movs	r2, #2
 8006a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8006a06:	187a      	adds	r2, r7, r1
 8006a08:	23a0      	movs	r3, #160	; 0xa0
 8006a0a:	05db      	lsls	r3, r3, #23
 8006a0c:	0011      	movs	r1, r2
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f000 fe2e 	bl	8007670 <HAL_GPIO_Init>

}
 8006a14:	46c0      	nop			; (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b00b      	add	sp, #44	; 0x2c
 8006a1a:	bd90      	pop	{r4, r7, pc}
 8006a1c:	40021000 	.word	0x40021000

08006a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a24:	f000 fd16 	bl	8007454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a28:	f000 f80e 	bl	8006a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a2c:	f7ff ff86 	bl	800693c <MX_GPIO_Init>
  MX_DMA_Init();
 8006a30:	f7ff ff60 	bl	80068f4 <MX_DMA_Init>
  MX_UCPD2_Init();
 8006a34:	f000 fbae 	bl	8007194 <MX_UCPD2_Init>
  MX_USB_DRD_FS_PCD_Init();
 8006a38:	f000 fc4c 	bl	80072d4 <MX_USB_DRD_FS_PCD_Init>
  /* Call PreOsInit function */
  USBPD_PreInitOs();
 8006a3c:	f011 ff4e 	bl	80188dc <USBPD_PreInitOs>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8006a40:	f7ff fec8 	bl	80067d4 <MX_ThreadX_Init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint8_t HWbuffer[] = "Hello, World!\r\n";
  //CDC_Transmit_FS(HWbuffer, sizeof(HWbuffer));
  while (1)
 8006a44:	e7fe      	b.n	8006a44 <main+0x24>
	...

08006a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b09b      	sub	sp, #108	; 0x6c
 8006a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a4e:	242c      	movs	r4, #44	; 0x2c
 8006a50:	193b      	adds	r3, r7, r4
 8006a52:	0018      	movs	r0, r3
 8006a54:	233c      	movs	r3, #60	; 0x3c
 8006a56:	001a      	movs	r2, r3
 8006a58:	2100      	movs	r1, #0
 8006a5a:	f013 fb21 	bl	801a0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a5e:	231c      	movs	r3, #28
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	0018      	movs	r0, r3
 8006a64:	2310      	movs	r3, #16
 8006a66:	001a      	movs	r2, r3
 8006a68:	2100      	movs	r1, #0
 8006a6a:	f013 fb19 	bl	801a0a0 <memset>
  RCC_CRSInitTypeDef pInit = {0};
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	0018      	movs	r0, r3
 8006a72:	2318      	movs	r3, #24
 8006a74:	001a      	movs	r2, r3
 8006a76:	2100      	movs	r1, #0
 8006a78:	f013 fb12 	bl	801a0a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a7c:	2380      	movs	r3, #128	; 0x80
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f002 fe81 	bl	8009788 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006a86:	193b      	adds	r3, r7, r4
 8006a88:	2222      	movs	r2, #34	; 0x22
 8006a8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a8c:	193b      	adds	r3, r7, r4
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	0052      	lsls	r2, r2, #1
 8006a92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006a94:	193b      	adds	r3, r7, r4
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	03d2      	lsls	r2, r2, #15
 8006a9a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006a9c:	0021      	movs	r1, r4
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006aa4:	187b      	adds	r3, r7, r1
 8006aa6:	2240      	movs	r2, #64	; 0x40
 8006aa8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	2202      	movs	r2, #2
 8006aae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006ab0:	187b      	adds	r3, r7, r1
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006ab6:	187b      	adds	r3, r7, r1
 8006ab8:	2200      	movs	r2, #0
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8006abc:	187b      	adds	r3, r7, r1
 8006abe:	2209      	movs	r2, #9
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ac2:	187b      	adds	r3, r7, r1
 8006ac4:	2280      	movs	r2, #128	; 0x80
 8006ac6:	0292      	lsls	r2, r2, #10
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006aca:	187b      	adds	r3, r7, r1
 8006acc:	2280      	movs	r2, #128	; 0x80
 8006ace:	0492      	lsls	r2, r2, #18
 8006ad0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	05d2      	lsls	r2, r2, #23
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	0018      	movs	r0, r3
 8006ade:	f002 fe9f 	bl	8009820 <HAL_RCC_OscConfig>
 8006ae2:	1e03      	subs	r3, r0, #0
 8006ae4:	d001      	beq.n	8006aea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006ae6:	f000 f855 	bl	8006b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006aea:	211c      	movs	r1, #28
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	2207      	movs	r2, #7
 8006af0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	2202      	movs	r2, #2
 8006af6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	2200      	movs	r2, #0
 8006b02:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	2101      	movs	r1, #1
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f003 f9e9 	bl	8009ee0 <HAL_RCC_ClockConfig>
 8006b0e:	1e03      	subs	r3, r0, #0
 8006b10:	d001      	beq.n	8006b16 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8006b12:	f000 f83f 	bl	8006b94 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <SystemClock_Config+0x120>)
 8006b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <SystemClock_Config+0x120>)
 8006b1c:	2180      	movs	r1, #128	; 0x80
 8006b1e:	0249      	lsls	r1, r1, #9
 8006b20:	430a      	orrs	r2, r1
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b24:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <SystemClock_Config+0x120>)
 8006b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	025b      	lsls	r3, r3, #9
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	2280      	movs	r2, #128	; 0x80
 8006b3c:	0592      	lsls	r2, r2, #22
 8006b3e:	605a      	str	r2, [r3, #4]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8006b40:	1d3b      	adds	r3, r7, #4
 8006b42:	2200      	movs	r2, #0
 8006b44:	609a      	str	r2, [r3, #8]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <SystemClock_Config+0x124>)
 8006b4a:	60da      	str	r2, [r3, #12]
  pInit.ErrorLimitValue = 34;
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	2222      	movs	r2, #34	; 0x22
 8006b50:	611a      	str	r2, [r3, #16]
  pInit.HSI48CalibrationValue = 32;
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	2220      	movs	r2, #32
 8006b56:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&pInit);
 8006b58:	1d3b      	adds	r3, r7, #4
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f003 fdd0 	bl	800a700 <HAL_RCCEx_CRSConfig>
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b01b      	add	sp, #108	; 0x6c
 8006b66:	bd90      	pop	{r4, r7, pc}
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	0000bb7f 	.word	0x0000bb7f

08006b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d101      	bne.n	8006b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006b82:	f000 fc87 	bl	8007494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	40001000 	.word	0x40001000

08006b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b98:	b672      	cpsid	i
}
 8006b9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b9c:	e7fe      	b.n	8006b9c <Error_Handler+0x8>
	...

08006ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba6:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <HAL_MspInit+0x54>)
 8006ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_MspInit+0x54>)
 8006bac:	2101      	movs	r1, #1
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40
 8006bb2:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <HAL_MspInit+0x54>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4013      	ands	r3, r2
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <HAL_MspInit+0x54>)
 8006bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <HAL_MspInit+0x54>)
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	0549      	lsls	r1, r1, #21
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <HAL_MspInit+0x54>)
 8006bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	055b      	lsls	r3, r3, #21
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2100      	movs	r1, #0
 8006bde:	2004      	movs	r0, #4
 8006be0:	f000 fd20 	bl	8007624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8006be4:	2004      	movs	r0, #4
 8006be6:	f000 fd32 	bl	800764e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	40021000 	.word	0x40021000

08006bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bf8:	b5b0      	push	{r4, r5, r7, lr}
 8006bfa:	b08c      	sub	sp, #48	; 0x30
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006c00:	232b      	movs	r3, #43	; 0x2b
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006c08:	4b37      	ldr	r3, [pc, #220]	; (8006ce8 <HAL_InitTick+0xf0>)
 8006c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c0c:	4b36      	ldr	r3, [pc, #216]	; (8006ce8 <HAL_InitTick+0xf0>)
 8006c0e:	2110      	movs	r1, #16
 8006c10:	430a      	orrs	r2, r1
 8006c12:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c14:	4b34      	ldr	r3, [pc, #208]	; (8006ce8 <HAL_InitTick+0xf0>)
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	2210      	movs	r2, #16
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c20:	230c      	movs	r3, #12
 8006c22:	18fa      	adds	r2, r7, r3
 8006c24:	2410      	movs	r4, #16
 8006c26:	193b      	adds	r3, r7, r4
 8006c28:	0011      	movs	r1, r2
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f003 fb02 	bl	800a234 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006c3c:	f003 fae4 	bl	800a208 <HAL_RCC_GetPCLK1Freq>
 8006c40:	0003      	movs	r3, r0
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c44:	e004      	b.n	8006c50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006c46:	f003 fadf 	bl	800a208 <HAL_RCC_GetPCLK1Freq>
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	4926      	ldr	r1, [pc, #152]	; (8006cec <HAL_InitTick+0xf4>)
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7ff fcaf 	bl	80065b8 <__udivsi3>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c62:	4a24      	ldr	r2, [pc, #144]	; (8006cf4 <HAL_InitTick+0xfc>)
 8006c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006c66:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <HAL_InitTick+0x100>)
 8006c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c6e:	6a3a      	ldr	r2, [r7, #32]
 8006c70:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c78:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c7e:	4b1c      	ldr	r3, [pc, #112]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006c84:	252b      	movs	r5, #43	; 0x2b
 8006c86:	197c      	adds	r4, r7, r5
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f003 fd7e 	bl	800a78c <HAL_TIM_Base_Init>
 8006c90:	0003      	movs	r3, r0
 8006c92:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8006c94:	197b      	adds	r3, r7, r5
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11e      	bne.n	8006cda <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006c9c:	197c      	adds	r4, r7, r5
 8006c9e:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <HAL_InitTick+0xf8>)
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f003 fdd3 	bl	800a84c <HAL_TIM_Base_Start_IT>
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8006caa:	197b      	adds	r3, r7, r5
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d113      	bne.n	8006cda <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8006cb2:	2011      	movs	r0, #17
 8006cb4:	f000 fccb 	bl	800764e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d809      	bhi.n	8006cd2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	0019      	movs	r1, r3
 8006cc4:	2011      	movs	r0, #17
 8006cc6:	f000 fcad 	bl	8007624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <HAL_InitTick+0x104>)
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	e003      	b.n	8006cda <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8006cd2:	232b      	movs	r3, #43	; 0x2b
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8006cda:	232b      	movs	r3, #43	; 0x2b
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	781b      	ldrb	r3, [r3, #0]
}
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b00c      	add	sp, #48	; 0x30
 8006ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	000f4240 	.word	0x000f4240
 8006cf0:	200102ac 	.word	0x200102ac
 8006cf4:	40001000 	.word	0x40001000
 8006cf8:	000003e7 	.word	0x000003e7
 8006cfc:	20000008 	.word	0x20000008

08006d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d04:	e7fe      	b.n	8006d04 <NMI_Handler+0x4>

08006d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d0a:	e7fe      	b.n	8006d0a <HardFault_Handler+0x4>

08006d0c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <USB_UCPD1_2_IRQHandler+0x18>)
 8006d12:	0018      	movs	r0, r3
 8006d14:	f001 f81a 	bl	8007d4c <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8006d18:	f007 f9c8 	bl	800e0ac <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	200102fc 	.word	0x200102fc

08006d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006d2c:	46c0      	nop			; (mov r8, r8)
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006d40:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8006d42:	0018      	movs	r0, r3
 8006d44:	f003 fde4 	bl	800a910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	200102ac 	.word	0x200102ac

08006d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d5c:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <_sbrk+0x5c>)
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <_sbrk+0x60>)
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <_sbrk+0x64>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d70:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <_sbrk+0x64>)
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <_sbrk+0x68>)
 8006d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d76:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <_sbrk+0x64>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	18d3      	adds	r3, r2, r3
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d207      	bcs.n	8006d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d84:	f013 f9a6 	bl	801a0d4 <__errno>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	220c      	movs	r2, #12
 8006d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	425b      	negs	r3, r3
 8006d92:	e009      	b.n	8006da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d94:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <_sbrk+0x64>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <_sbrk+0x64>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	18d2      	adds	r2, r2, r3
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <_sbrk+0x64>)
 8006da4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006da6:	68fb      	ldr	r3, [r7, #12]
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b006      	add	sp, #24
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20024000 	.word	0x20024000
 8006db4:	00000400 	.word	0x00000400
 8006db8:	200102f8 	.word	0x200102f8
 8006dbc:	200115b0 	.word	0x200115b0

08006dc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <__NVIC_EnableIRQ>:
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	0002      	movs	r2, r0
 8006dd4:	1dfb      	adds	r3, r7, #7
 8006dd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006dd8:	1dfb      	adds	r3, r7, #7
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dde:	d809      	bhi.n	8006df4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006de0:	1dfb      	adds	r3, r7, #7
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	001a      	movs	r2, r3
 8006de6:	231f      	movs	r3, #31
 8006de8:	401a      	ands	r2, r3
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <__NVIC_EnableIRQ+0x30>)
 8006dec:	2101      	movs	r1, #1
 8006dee:	4091      	lsls	r1, r2
 8006df0:	000a      	movs	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	e000e100 	.word	0xe000e100

08006e00 <__NVIC_SetPriority>:
{
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	0002      	movs	r2, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	1dfb      	adds	r3, r7, #7
 8006e0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e0e:	1dfb      	adds	r3, r7, #7
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b7f      	cmp	r3, #127	; 0x7f
 8006e14:	d828      	bhi.n	8006e68 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e16:	4a2f      	ldr	r2, [pc, #188]	; (8006ed4 <__NVIC_SetPriority+0xd4>)
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	33c0      	adds	r3, #192	; 0xc0
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	589b      	ldr	r3, [r3, r2]
 8006e26:	1dfa      	adds	r2, r7, #7
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	400a      	ands	r2, r1
 8006e30:	00d2      	lsls	r2, r2, #3
 8006e32:	21ff      	movs	r1, #255	; 0xff
 8006e34:	4091      	lsls	r1, r2
 8006e36:	000a      	movs	r2, r1
 8006e38:	43d2      	mvns	r2, r2
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	22ff      	movs	r2, #255	; 0xff
 8006e44:	401a      	ands	r2, r3
 8006e46:	1dfb      	adds	r3, r7, #7
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	4003      	ands	r3, r0
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e54:	481f      	ldr	r0, [pc, #124]	; (8006ed4 <__NVIC_SetPriority+0xd4>)
 8006e56:	1dfb      	adds	r3, r7, #7
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	33c0      	adds	r3, #192	; 0xc0
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	501a      	str	r2, [r3, r0]
}
 8006e66:	e031      	b.n	8006ecc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e68:	4a1b      	ldr	r2, [pc, #108]	; (8006ed8 <__NVIC_SetPriority+0xd8>)
 8006e6a:	1dfb      	adds	r3, r7, #7
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	0019      	movs	r1, r3
 8006e70:	230f      	movs	r3, #15
 8006e72:	400b      	ands	r3, r1
 8006e74:	3b08      	subs	r3, #8
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	3306      	adds	r3, #6
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	18d3      	adds	r3, r2, r3
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	1dfa      	adds	r2, r7, #7
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	0011      	movs	r1, r2
 8006e88:	2203      	movs	r2, #3
 8006e8a:	400a      	ands	r2, r1
 8006e8c:	00d2      	lsls	r2, r2, #3
 8006e8e:	21ff      	movs	r1, #255	; 0xff
 8006e90:	4091      	lsls	r1, r2
 8006e92:	000a      	movs	r2, r1
 8006e94:	43d2      	mvns	r2, r2
 8006e96:	401a      	ands	r2, r3
 8006e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	019b      	lsls	r3, r3, #6
 8006e9e:	22ff      	movs	r2, #255	; 0xff
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	1dfb      	adds	r3, r7, #7
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	4003      	ands	r3, r0
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006eb0:	4809      	ldr	r0, [pc, #36]	; (8006ed8 <__NVIC_SetPriority+0xd8>)
 8006eb2:	1dfb      	adds	r3, r7, #7
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	001c      	movs	r4, r3
 8006eb8:	230f      	movs	r3, #15
 8006eba:	4023      	ands	r3, r4
 8006ebc:	3b08      	subs	r3, #8
 8006ebe:	089b      	lsrs	r3, r3, #2
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	3306      	adds	r3, #6
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	18c3      	adds	r3, r0, r3
 8006ec8:	3304      	adds	r3, #4
 8006eca:	601a      	str	r2, [r3, #0]
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bd90      	pop	{r4, r7, pc}
 8006ed4:	e000e100 	.word	0xe000e100
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <LL_DMA_SetDataTransferDirection+0x44>)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	18d3      	adds	r3, r2, r3
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	001a      	movs	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	18d3      	adds	r3, r2, r3
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <LL_DMA_SetDataTransferDirection+0x48>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	0019      	movs	r1, r3
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <LL_DMA_SetDataTransferDirection+0x44>)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	18d3      	adds	r3, r2, r3
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	001a      	movs	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	18d3      	adds	r3, r2, r3
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b006      	add	sp, #24
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	0801a360 	.word	0x0801a360
 8006f24:	ffffbfef 	.word	0xffffbfef

08006f28 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8006f38:	4a0c      	ldr	r2, [pc, #48]	; (8006f6c <LL_DMA_SetMode+0x44>)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	18d3      	adds	r3, r2, r3
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	001a      	movs	r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	4393      	bics	r3, r2
 8006f4c:	0019      	movs	r1, r3
 8006f4e:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <LL_DMA_SetMode+0x44>)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	18d3      	adds	r3, r2, r3
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	001a      	movs	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	18d3      	adds	r3, r2, r3
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
             Mode);
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b006      	add	sp, #24
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	0801a360 	.word	0x0801a360

08006f70 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8006f80:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	18d3      	adds	r3, r2, r3
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	001a      	movs	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	18d3      	adds	r3, r2, r3
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2240      	movs	r2, #64	; 0x40
 8006f92:	4393      	bics	r3, r2
 8006f94:	0019      	movs	r1, r3
 8006f96:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	18d3      	adds	r3, r2, r3
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	001a      	movs	r2, r3
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	18d3      	adds	r3, r2, r3
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b006      	add	sp, #24
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	0801a360 	.word	0x0801a360

08006fb8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <LL_DMA_SetMemoryIncMode+0x44>)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	18d3      	adds	r3, r2, r3
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	18d3      	adds	r3, r2, r3
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2280      	movs	r2, #128	; 0x80
 8006fda:	4393      	bics	r3, r2
 8006fdc:	0019      	movs	r1, r3
 8006fde:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <LL_DMA_SetMemoryIncMode+0x44>)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	18d3      	adds	r3, r2, r3
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	18d3      	adds	r3, r2, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b006      	add	sp, #24
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	0801a360 	.word	0x0801a360

08007000 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007010:	4a0c      	ldr	r2, [pc, #48]	; (8007044 <LL_DMA_SetPeriphSize+0x44>)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	18d3      	adds	r3, r2, r3
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	001a      	movs	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	18d3      	adds	r3, r2, r3
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a09      	ldr	r2, [pc, #36]	; (8007048 <LL_DMA_SetPeriphSize+0x48>)
 8007022:	4013      	ands	r3, r2
 8007024:	0019      	movs	r1, r3
 8007026:	4a07      	ldr	r2, [pc, #28]	; (8007044 <LL_DMA_SetPeriphSize+0x44>)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	18d3      	adds	r3, r2, r3
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	001a      	movs	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	18d3      	adds	r3, r2, r3
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	430a      	orrs	r2, r1
 8007038:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	46bd      	mov	sp, r7
 800703e:	b006      	add	sp, #24
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	0801a360 	.word	0x0801a360
 8007048:	fffffcff 	.word	0xfffffcff

0800704c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800705c:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <LL_DMA_SetMemorySize+0x44>)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	18d3      	adds	r3, r2, r3
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	001a      	movs	r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	18d3      	adds	r3, r2, r3
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a09      	ldr	r2, [pc, #36]	; (8007094 <LL_DMA_SetMemorySize+0x48>)
 800706e:	4013      	ands	r3, r2
 8007070:	0019      	movs	r1, r3
 8007072:	4a07      	ldr	r2, [pc, #28]	; (8007090 <LL_DMA_SetMemorySize+0x44>)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	18d3      	adds	r3, r2, r3
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	001a      	movs	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	18d3      	adds	r3, r2, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	430a      	orrs	r2, r1
 8007084:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	46bd      	mov	sp, r7
 800708a:	b006      	add	sp, #24
 800708c:	bd80      	pop	{r7, pc}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	0801a360 	.word	0x0801a360
 8007094:	fffff3ff 	.word	0xfffff3ff

08007098 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80070a8:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <LL_DMA_SetChannelPriorityLevel+0x44>)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	18d3      	adds	r3, r2, r3
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	001a      	movs	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	18d3      	adds	r3, r2, r3
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	0019      	movs	r1, r3
 80070be:	4a07      	ldr	r2, [pc, #28]	; (80070dc <LL_DMA_SetChannelPriorityLevel+0x44>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	18d3      	adds	r3, r2, r3
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	001a      	movs	r2, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	18d3      	adds	r3, r2, r3
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
             Priority);
}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b006      	add	sp, #24
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	0801a360 	.word	0x0801a360
 80070e0:	ffffcfff 	.word	0xffffcfff

080070e4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0a9b      	lsrs	r3, r3, #10
 80070f4:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <LL_DMA_SetPeriphRequest+0x50>)
 80070f6:	405a      	eors	r2, r3
 80070f8:	0013      	movs	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	18d3      	adds	r3, r2, r3
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <LL_DMA_SetPeriphRequest+0x54>)
 800710a:	4694      	mov	ip, r2
 800710c:	4463      	add	r3, ip
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	227f      	movs	r2, #127	; 0x7f
 8007112:	4393      	bics	r3, r2
 8007114:	0019      	movs	r1, r3
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	18d3      	adds	r3, r2, r3
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4a06      	ldr	r2, [pc, #24]	; (8007138 <LL_DMA_SetPeriphRequest+0x54>)
 8007120:	4694      	mov	ip, r2
 8007122:	4463      	add	r3, ip
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	46bd      	mov	sp, r7
 800712e:	b006      	add	sp, #24
 8007130:	bd80      	pop	{r7, pc}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	00100080 	.word	0x00100080
 8007138:	40020800 	.word	0x40020800

0800713c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <LL_APB1_GRP1_EnableClock+0x28>)
 8007146:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <LL_APB1_GRP1_EnableClock+0x28>)
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	430a      	orrs	r2, r1
 800714e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007150:	4b04      	ldr	r3, [pc, #16]	; (8007164 <LL_APB1_GRP1_EnableClock+0x28>)
 8007152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	4013      	ands	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	46c0      	nop			; (mov r8, r8)
 800715e:	46bd      	mov	sp, r7
 8007160:	b004      	add	sp, #16
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40021000 	.word	0x40021000

08007168 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <LL_IOP_GRP1_EnableClock+0x28>)
 8007172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007174:	4b06      	ldr	r3, [pc, #24]	; (8007190 <LL_IOP_GRP1_EnableClock+0x28>)
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	430a      	orrs	r2, r1
 800717a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <LL_IOP_GRP1_EnableClock+0x28>)
 800717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4013      	ands	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b004      	add	sp, #16
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40021000 	.word	0x40021000

08007194 <MX_UCPD2_Init>:

/* USER CODE END 0 */

/* UCPD2 init function */
void MX_UCPD2_Init(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800719a:	003b      	movs	r3, r7
 800719c:	0018      	movs	r0, r3
 800719e:	2318      	movs	r3, #24
 80071a0:	001a      	movs	r2, r3
 80071a2:	2100      	movs	r1, #0
 80071a4:	f012 ff7c 	bl	801a0a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	04db      	lsls	r3, r3, #19
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7ff ffc5 	bl	800713c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80071b2:	2008      	movs	r0, #8
 80071b4:	f7ff ffd8 	bl	8007168 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80071b8:	003b      	movs	r3, r7
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80071be:	003b      	movs	r3, r7
 80071c0:	2203      	movs	r2, #3
 80071c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071c4:	003b      	movs	r3, r7
 80071c6:	2200      	movs	r2, #0
 80071c8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071ca:	003b      	movs	r3, r7
 80071cc:	4a3f      	ldr	r2, [pc, #252]	; (80072cc <MX_UCPD2_Init+0x138>)
 80071ce:	0019      	movs	r1, r3
 80071d0:	0010      	movs	r0, r2
 80071d2:	f003 ff57 	bl	800b084 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80071d6:	003b      	movs	r3, r7
 80071d8:	2204      	movs	r2, #4
 80071da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80071dc:	003b      	movs	r3, r7
 80071de:	2203      	movs	r2, #3
 80071e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071e2:	003b      	movs	r3, r7
 80071e4:	2200      	movs	r2, #0
 80071e6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071e8:	003b      	movs	r3, r7
 80071ea:	4a38      	ldr	r2, [pc, #224]	; (80072cc <MX_UCPD2_Init+0x138>)
 80071ec:	0019      	movs	r1, r3
 80071ee:	0010      	movs	r0, r2
 80071f0:	f003 ff48 	bl	800b084 <LL_GPIO_Init>

  /* UCPD2 DMA Init */

  /* UCPD2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD2_RX);
 80071f4:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 80071f6:	223c      	movs	r2, #60	; 0x3c
 80071f8:	2100      	movs	r1, #0
 80071fa:	0018      	movs	r0, r3
 80071fc:	f7ff ff72 	bl	80070e4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007200:	4b33      	ldr	r3, [pc, #204]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	0018      	movs	r0, r3
 8007208:	f7ff fe68 	bl	8006edc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800720c:	4b30      	ldr	r3, [pc, #192]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	0018      	movs	r0, r3
 8007214:	f7ff ff40 	bl	8007098 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8007218:	4b2d      	ldr	r3, [pc, #180]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800721a:	2200      	movs	r2, #0
 800721c:	2100      	movs	r1, #0
 800721e:	0018      	movs	r0, r3
 8007220:	f7ff fe82 	bl	8006f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8007224:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007226:	2200      	movs	r2, #0
 8007228:	2100      	movs	r1, #0
 800722a:	0018      	movs	r0, r3
 800722c:	f7ff fea0 	bl	8006f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	2100      	movs	r1, #0
 8007236:	0018      	movs	r0, r3
 8007238:	f7ff febe 	bl	8006fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 800723c:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800723e:	2200      	movs	r2, #0
 8007240:	2100      	movs	r1, #0
 8007242:	0018      	movs	r0, r3
 8007244:	f7ff fedc 	bl	8007000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8007248:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800724a:	2200      	movs	r2, #0
 800724c:	2100      	movs	r1, #0
 800724e:	0018      	movs	r0, r3
 8007250:	f7ff fefc 	bl	800704c <LL_DMA_SetMemorySize>

  /* UCPD2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD2_TX);
 8007254:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007256:	223d      	movs	r2, #61	; 0x3d
 8007258:	2101      	movs	r1, #1
 800725a:	0018      	movs	r0, r3
 800725c:	f7ff ff42 	bl	80070e4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007260:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007262:	2210      	movs	r2, #16
 8007264:	2101      	movs	r1, #1
 8007266:	0018      	movs	r0, r3
 8007268:	f7ff fe38 	bl	8006edc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800726c:	4b18      	ldr	r3, [pc, #96]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800726e:	2200      	movs	r2, #0
 8007270:	2101      	movs	r1, #1
 8007272:	0018      	movs	r0, r3
 8007274:	f7ff ff10 	bl	8007098 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8007278:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800727a:	2200      	movs	r2, #0
 800727c:	2101      	movs	r1, #1
 800727e:	0018      	movs	r0, r3
 8007280:	f7ff fe52 	bl	8006f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8007284:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007286:	2200      	movs	r2, #0
 8007288:	2101      	movs	r1, #1
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff fe70 	bl	8006f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 8007292:	2280      	movs	r2, #128	; 0x80
 8007294:	2101      	movs	r1, #1
 8007296:	0018      	movs	r0, r3
 8007298:	f7ff fe8e 	bl	8006fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800729c:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 800729e:	2200      	movs	r2, #0
 80072a0:	2101      	movs	r1, #1
 80072a2:	0018      	movs	r0, r3
 80072a4:	f7ff feac 	bl	8007000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <MX_UCPD2_Init+0x13c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	2101      	movs	r1, #1
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7ff fecc 	bl	800704c <LL_DMA_SetMemorySize>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 80072b4:	2100      	movs	r1, #0
 80072b6:	2008      	movs	r0, #8
 80072b8:	f7ff fda2 	bl	8006e00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80072bc:	2008      	movs	r0, #8
 80072be:	f7ff fd85 	bl	8006dcc <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b006      	add	sp, #24
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	50000c00 	.word	0x50000c00
 80072d0:	40020000 	.word	0x40020000

080072d4 <MX_USB_DRD_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_DRD_FS;

/* USB_DRD_FS init function */

void MX_USB_DRD_FS_PCD_Init(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80072d8:	4b17      	ldr	r3, [pc, #92]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072da:	4a18      	ldr	r2, [pc, #96]	; (800733c <MX_USB_DRD_FS_PCD_Init+0x68>)
 80072dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80072de:	4b16      	ldr	r3, [pc, #88]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072e0:	2208      	movs	r2, #8
 80072e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 80072e4:	4b14      	ldr	r3, [pc, #80]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072e6:	2208      	movs	r2, #8
 80072e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072ec:	2202      	movs	r2, #2
 80072ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072f0:	4b11      	ldr	r3, [pc, #68]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072f2:	2202      	movs	r2, #2
 80072f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80072fe:	2200      	movs	r2, #0
 8007300:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8007302:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8007304:	2200      	movs	r2, #0
 8007306:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800730a:	2200      	movs	r2, #0
 800730c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800730e:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8007310:	2200      	movs	r2, #0
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8007316:	2200      	movs	r2, #0
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800731c:	2200      	movs	r2, #0
 800731e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8007322:	0018      	movs	r0, r3
 8007324:	f000 fbae 	bl	8007a84 <HAL_PCD_Init>
 8007328:	1e03      	subs	r3, r0, #0
 800732a:	d001      	beq.n	8007330 <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 800732c:	f7ff fc32 	bl	8006b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 8007330:	46c0      	nop			; (mov r8, r8)
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	200102fc 	.word	0x200102fc
 800733c:	40005c00 	.word	0x40005c00

08007340 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b099      	sub	sp, #100	; 0x64
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007348:	2414      	movs	r4, #20
 800734a:	193b      	adds	r3, r7, r4
 800734c:	0018      	movs	r0, r3
 800734e:	234c      	movs	r3, #76	; 0x4c
 8007350:	001a      	movs	r2, r3
 8007352:	2100      	movs	r1, #0
 8007354:	f012 fea4 	bl	801a0a0 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a25      	ldr	r2, [pc, #148]	; (80073f4 <HAL_PCD_MspInit+0xb4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d143      	bne.n	80073ea <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007362:	193b      	adds	r3, r7, r4
 8007364:	2280      	movs	r2, #128	; 0x80
 8007366:	0452      	lsls	r2, r2, #17
 8007368:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800736a:	193b      	adds	r3, r7, r4
 800736c:	2200      	movs	r2, #0
 800736e:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007370:	193b      	adds	r3, r7, r4
 8007372:	0018      	movs	r0, r3
 8007374:	f002 ff88 	bl	800a288 <HAL_RCCEx_PeriphCLKConfig>
 8007378:	1e03      	subs	r3, r0, #0
 800737a:	d001      	beq.n	8007380 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800737c:	f7ff fc0a 	bl	8006b94 <Error_Handler>
    }

    /* USB_DRD_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007380:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 8007382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007384:	4b1c      	ldr	r3, [pc, #112]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 8007386:	2180      	movs	r1, #128	; 0x80
 8007388:	0189      	lsls	r1, r1, #6
 800738a:	430a      	orrs	r2, r1
 800738c:	63da      	str	r2, [r3, #60]	; 0x3c
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 8007390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	019b      	lsls	r3, r3, #6
 8007396:	4013      	ands	r3, r2
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 800739e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	055b      	lsls	r3, r3, #21
 80073a4:	4013      	ands	r3, r2
 80073a6:	d116      	bne.n	80073d6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 80073aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ac:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	0549      	lsls	r1, r1, #21
 80073b2:	430a      	orrs	r2, r1
 80073b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80073b6:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 80073b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ba:	2380      	movs	r3, #128	; 0x80
 80073bc:	055b      	lsls	r3, r3, #21
 80073be:	4013      	ands	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80073c4:	f002 f9d2 	bl	800976c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 80073ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <HAL_PCD_MspInit+0xb8>)
 80073ce:	490b      	ldr	r1, [pc, #44]	; (80073fc <HAL_PCD_MspInit+0xbc>)
 80073d0:	400a      	ands	r2, r1
 80073d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80073d4:	e001      	b.n	80073da <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80073d6:	f002 f9c9 	bl	800976c <HAL_PWREx_EnableVddUSB>
    }

    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	2008      	movs	r0, #8
 80073e0:	f000 f920 	bl	8007624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80073e4:	2008      	movs	r0, #8
 80073e6:	f000 f932 	bl	800764e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b019      	add	sp, #100	; 0x64
 80073f0:	bd90      	pop	{r4, r7, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	40005c00 	.word	0x40005c00
 80073f8:	40021000 	.word	0x40021000
 80073fc:	efffffff 	.word	0xefffffff

08007400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007400:	480d      	ldr	r0, [pc, #52]	; (8007438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007402:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007404:	f7ff fcdc 	bl	8006dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007408:	480c      	ldr	r0, [pc, #48]	; (800743c <LoopForever+0x6>)
  ldr r1, =_edata
 800740a:	490d      	ldr	r1, [pc, #52]	; (8007440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800740c:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <LoopForever+0xe>)
  movs r3, #0
 800740e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007410:	e002      	b.n	8007418 <LoopCopyDataInit>

08007412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007416:	3304      	adds	r3, #4

08007418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800741a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800741c:	d3f9      	bcc.n	8007412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800741e:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007420:	4c0a      	ldr	r4, [pc, #40]	; (800744c <LoopForever+0x16>)
  movs r3, #0
 8007422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007424:	e001      	b.n	800742a <LoopFillZerobss>

08007426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007428:	3204      	adds	r2, #4

0800742a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800742a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800742c:	d3fb      	bcc.n	8007426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800742e:	f012 fe57 	bl	801a0e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007432:	f7ff faf5 	bl	8006a20 <main>

08007436 <LoopForever>:

LoopForever:
  b LoopForever
 8007436:	e7fe      	b.n	8007436 <LoopForever>
  ldr   r0, =_estack
 8007438:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800743c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007440:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8007444:	0801a4f8 	.word	0x0801a4f8
  ldr r2, =_sbss
 8007448:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800744c:	200115ac 	.word	0x200115ac

08007450 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007450:	e7fe      	b.n	8007450 <ADC1_COMP_IRQHandler>
	...

08007454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800745a:	1dfb      	adds	r3, r7, #7
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_Init+0x3c>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_Init+0x3c>)
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	0049      	lsls	r1, r1, #1
 800746a:	430a      	orrs	r2, r1
 800746c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800746e:	2003      	movs	r0, #3
 8007470:	f7ff fbc2 	bl	8006bf8 <HAL_InitTick>
 8007474:	1e03      	subs	r3, r0, #0
 8007476:	d003      	beq.n	8007480 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007478:	1dfb      	adds	r3, r7, #7
 800747a:	2201      	movs	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e001      	b.n	8007484 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007480:	f7ff fb8e 	bl	8006ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007484:	1dfb      	adds	r3, r7, #7
 8007486:	781b      	ldrb	r3, [r3, #0]
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b002      	add	sp, #8
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40022000 	.word	0x40022000

08007494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_IncTick+0x1c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	001a      	movs	r2, r3
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <HAL_IncTick+0x20>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	18d2      	adds	r2, r2, r3
 80074a4:	4b03      	ldr	r3, [pc, #12]	; (80074b4 <HAL_IncTick+0x20>)
 80074a6:	601a      	str	r2, [r3, #0]
}
 80074a8:	46c0      	nop			; (mov r8, r8)
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	2000000c 	.word	0x2000000c
 80074b4:	20010604 	.word	0x20010604

080074b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  return uwTick;
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <HAL_GetTick+0x10>)
 80074be:	681b      	ldr	r3, [r3, #0]
}
 80074c0:	0018      	movs	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	20010604 	.word	0x20010604

080074cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074d4:	f7ff fff0 	bl	80074b8 <HAL_GetTick>
 80074d8:	0003      	movs	r3, r0
 80074da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	d005      	beq.n	80074f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074e6:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <HAL_Delay+0x44>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	001a      	movs	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	f7ff ffe0 	bl	80074b8 <HAL_GetTick>
 80074f8:	0002      	movs	r2, r0
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d8f7      	bhi.n	80074f4 <HAL_Delay+0x28>
  {
  }
}
 8007504:	46c0      	nop			; (mov r8, r8)
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	46bd      	mov	sp, r7
 800750a:	b004      	add	sp, #16
 800750c:	bd80      	pop	{r7, pc}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	2000000c 	.word	0x2000000c

08007514 <__NVIC_EnableIRQ>:
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	0002      	movs	r2, r0
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007520:	1dfb      	adds	r3, r7, #7
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b7f      	cmp	r3, #127	; 0x7f
 8007526:	d809      	bhi.n	800753c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007528:	1dfb      	adds	r3, r7, #7
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	001a      	movs	r2, r3
 800752e:	231f      	movs	r3, #31
 8007530:	401a      	ands	r2, r3
 8007532:	4b04      	ldr	r3, [pc, #16]	; (8007544 <__NVIC_EnableIRQ+0x30>)
 8007534:	2101      	movs	r1, #1
 8007536:	4091      	lsls	r1, r2
 8007538:	000a      	movs	r2, r1
 800753a:	601a      	str	r2, [r3, #0]
}
 800753c:	46c0      	nop			; (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000e100 	.word	0xe000e100

08007548 <__NVIC_SetPriority>:
{
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	0002      	movs	r2, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	1dfb      	adds	r3, r7, #7
 8007554:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b7f      	cmp	r3, #127	; 0x7f
 800755c:	d828      	bhi.n	80075b0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800755e:	4a2f      	ldr	r2, [pc, #188]	; (800761c <__NVIC_SetPriority+0xd4>)
 8007560:	1dfb      	adds	r3, r7, #7
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b25b      	sxtb	r3, r3
 8007566:	089b      	lsrs	r3, r3, #2
 8007568:	33c0      	adds	r3, #192	; 0xc0
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	589b      	ldr	r3, [r3, r2]
 800756e:	1dfa      	adds	r2, r7, #7
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	0011      	movs	r1, r2
 8007574:	2203      	movs	r2, #3
 8007576:	400a      	ands	r2, r1
 8007578:	00d2      	lsls	r2, r2, #3
 800757a:	21ff      	movs	r1, #255	; 0xff
 800757c:	4091      	lsls	r1, r2
 800757e:	000a      	movs	r2, r1
 8007580:	43d2      	mvns	r2, r2
 8007582:	401a      	ands	r2, r3
 8007584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	019b      	lsls	r3, r3, #6
 800758a:	22ff      	movs	r2, #255	; 0xff
 800758c:	401a      	ands	r2, r3
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	0018      	movs	r0, r3
 8007594:	2303      	movs	r3, #3
 8007596:	4003      	ands	r3, r0
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800759c:	481f      	ldr	r0, [pc, #124]	; (800761c <__NVIC_SetPriority+0xd4>)
 800759e:	1dfb      	adds	r3, r7, #7
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	089b      	lsrs	r3, r3, #2
 80075a6:	430a      	orrs	r2, r1
 80075a8:	33c0      	adds	r3, #192	; 0xc0
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	501a      	str	r2, [r3, r0]
}
 80075ae:	e031      	b.n	8007614 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <__NVIC_SetPriority+0xd8>)
 80075b2:	1dfb      	adds	r3, r7, #7
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	0019      	movs	r1, r3
 80075b8:	230f      	movs	r3, #15
 80075ba:	400b      	ands	r3, r1
 80075bc:	3b08      	subs	r3, #8
 80075be:	089b      	lsrs	r3, r3, #2
 80075c0:	3306      	adds	r3, #6
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	18d3      	adds	r3, r2, r3
 80075c6:	3304      	adds	r3, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	1dfa      	adds	r2, r7, #7
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	0011      	movs	r1, r2
 80075d0:	2203      	movs	r2, #3
 80075d2:	400a      	ands	r2, r1
 80075d4:	00d2      	lsls	r2, r2, #3
 80075d6:	21ff      	movs	r1, #255	; 0xff
 80075d8:	4091      	lsls	r1, r2
 80075da:	000a      	movs	r2, r1
 80075dc:	43d2      	mvns	r2, r2
 80075de:	401a      	ands	r2, r3
 80075e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	019b      	lsls	r3, r3, #6
 80075e6:	22ff      	movs	r2, #255	; 0xff
 80075e8:	401a      	ands	r2, r3
 80075ea:	1dfb      	adds	r3, r7, #7
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	0018      	movs	r0, r3
 80075f0:	2303      	movs	r3, #3
 80075f2:	4003      	ands	r3, r0
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075f8:	4809      	ldr	r0, [pc, #36]	; (8007620 <__NVIC_SetPriority+0xd8>)
 80075fa:	1dfb      	adds	r3, r7, #7
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	001c      	movs	r4, r3
 8007600:	230f      	movs	r3, #15
 8007602:	4023      	ands	r3, r4
 8007604:	3b08      	subs	r3, #8
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	430a      	orrs	r2, r1
 800760a:	3306      	adds	r3, #6
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	18c3      	adds	r3, r0, r3
 8007610:	3304      	adds	r3, #4
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b003      	add	sp, #12
 800761a:	bd90      	pop	{r4, r7, pc}
 800761c:	e000e100 	.word	0xe000e100
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	210f      	movs	r1, #15
 8007630:	187b      	adds	r3, r7, r1
 8007632:	1c02      	adds	r2, r0, #0
 8007634:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	187b      	adds	r3, r7, r1
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	b25b      	sxtb	r3, r3
 800763e:	0011      	movs	r1, r2
 8007640:	0018      	movs	r0, r3
 8007642:	f7ff ff81 	bl	8007548 <__NVIC_SetPriority>
}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	46bd      	mov	sp, r7
 800764a:	b004      	add	sp, #16
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	0002      	movs	r2, r0
 8007656:	1dfb      	adds	r3, r7, #7
 8007658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800765a:	1dfb      	adds	r3, r7, #7
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b25b      	sxtb	r3, r3
 8007660:	0018      	movs	r0, r3
 8007662:	f7ff ff57 	bl	8007514 <__NVIC_EnableIRQ>
}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	46bd      	mov	sp, r7
 800766a:	b002      	add	sp, #8
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800767e:	e14d      	b.n	800791c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2101      	movs	r1, #1
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4091      	lsls	r1, r2
 800768a:	000a      	movs	r2, r1
 800768c:	4013      	ands	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d100      	bne.n	8007698 <HAL_GPIO_Init+0x28>
 8007696:	e13e      	b.n	8007916 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2203      	movs	r2, #3
 800769e:	4013      	ands	r3, r2
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d005      	beq.n	80076b0 <HAL_GPIO_Init+0x40>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d130      	bne.n	8007712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	2203      	movs	r2, #3
 80076bc:	409a      	lsls	r2, r3
 80076be:	0013      	movs	r3, r2
 80076c0:	43da      	mvns	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4013      	ands	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	409a      	lsls	r2, r3
 80076d2:	0013      	movs	r3, r2
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076e6:	2201      	movs	r2, #1
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	409a      	lsls	r2, r3
 80076ec:	0013      	movs	r3, r2
 80076ee:	43da      	mvns	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4013      	ands	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	2201      	movs	r2, #1
 80076fe:	401a      	ands	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	409a      	lsls	r2, r3
 8007704:	0013      	movs	r3, r2
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2203      	movs	r2, #3
 8007718:	4013      	ands	r3, r2
 800771a:	2b03      	cmp	r3, #3
 800771c:	d017      	beq.n	800774e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	2203      	movs	r2, #3
 800772a:	409a      	lsls	r2, r3
 800772c:	0013      	movs	r3, r2
 800772e:	43da      	mvns	r2, r3
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4013      	ands	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	409a      	lsls	r2, r3
 8007740:	0013      	movs	r3, r2
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2203      	movs	r2, #3
 8007754:	4013      	ands	r3, r2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d123      	bne.n	80077a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	08da      	lsrs	r2, r3, #3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3208      	adds	r2, #8
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	58d3      	ldr	r3, [r2, r3]
 8007766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2207      	movs	r2, #7
 800776c:	4013      	ands	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	220f      	movs	r2, #15
 8007772:	409a      	lsls	r2, r3
 8007774:	0013      	movs	r3, r2
 8007776:	43da      	mvns	r2, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4013      	ands	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2107      	movs	r1, #7
 8007786:	400b      	ands	r3, r1
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	409a      	lsls	r2, r3
 800778c:	0013      	movs	r3, r2
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	08da      	lsrs	r2, r3, #3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3208      	adds	r2, #8
 800779c:	0092      	lsls	r2, r2, #2
 800779e:	6939      	ldr	r1, [r7, #16]
 80077a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	2203      	movs	r2, #3
 80077ae:	409a      	lsls	r2, r3
 80077b0:	0013      	movs	r3, r2
 80077b2:	43da      	mvns	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4013      	ands	r3, r2
 80077b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2203      	movs	r2, #3
 80077c0:	401a      	ands	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	409a      	lsls	r2, r3
 80077c8:	0013      	movs	r3, r2
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	23c0      	movs	r3, #192	; 0xc0
 80077dc:	029b      	lsls	r3, r3, #10
 80077de:	4013      	ands	r3, r2
 80077e0:	d100      	bne.n	80077e4 <HAL_GPIO_Init+0x174>
 80077e2:	e098      	b.n	8007916 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80077e4:	4a53      	ldr	r2, [pc, #332]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	089b      	lsrs	r3, r3, #2
 80077ea:	3318      	adds	r3, #24
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	589b      	ldr	r3, [r3, r2]
 80077f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2203      	movs	r2, #3
 80077f6:	4013      	ands	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	220f      	movs	r2, #15
 80077fc:	409a      	lsls	r2, r3
 80077fe:	0013      	movs	r3, r2
 8007800:	43da      	mvns	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4013      	ands	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	23a0      	movs	r3, #160	; 0xa0
 800780c:	05db      	lsls	r3, r3, #23
 800780e:	429a      	cmp	r2, r3
 8007810:	d019      	beq.n	8007846 <HAL_GPIO_Init+0x1d6>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a48      	ldr	r2, [pc, #288]	; (8007938 <HAL_GPIO_Init+0x2c8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d013      	beq.n	8007842 <HAL_GPIO_Init+0x1d2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a47      	ldr	r2, [pc, #284]	; (800793c <HAL_GPIO_Init+0x2cc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00d      	beq.n	800783e <HAL_GPIO_Init+0x1ce>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a46      	ldr	r2, [pc, #280]	; (8007940 <HAL_GPIO_Init+0x2d0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d007      	beq.n	800783a <HAL_GPIO_Init+0x1ca>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a45      	ldr	r2, [pc, #276]	; (8007944 <HAL_GPIO_Init+0x2d4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d101      	bne.n	8007836 <HAL_GPIO_Init+0x1c6>
 8007832:	2304      	movs	r3, #4
 8007834:	e008      	b.n	8007848 <HAL_GPIO_Init+0x1d8>
 8007836:	2305      	movs	r3, #5
 8007838:	e006      	b.n	8007848 <HAL_GPIO_Init+0x1d8>
 800783a:	2303      	movs	r3, #3
 800783c:	e004      	b.n	8007848 <HAL_GPIO_Init+0x1d8>
 800783e:	2302      	movs	r3, #2
 8007840:	e002      	b.n	8007848 <HAL_GPIO_Init+0x1d8>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <HAL_GPIO_Init+0x1d8>
 8007846:	2300      	movs	r3, #0
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	2103      	movs	r1, #3
 800784c:	400a      	ands	r2, r1
 800784e:	00d2      	lsls	r2, r2, #3
 8007850:	4093      	lsls	r3, r2
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007858:	4936      	ldr	r1, [pc, #216]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	089b      	lsrs	r3, r3, #2
 800785e:	3318      	adds	r3, #24
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007866:	4b33      	ldr	r3, [pc, #204]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	43da      	mvns	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	4013      	ands	r3, r2
 8007874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	035b      	lsls	r3, r3, #13
 800787e:	4013      	ands	r3, r2
 8007880:	d003      	beq.n	800788a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800788a:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007890:	4b28      	ldr	r3, [pc, #160]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	43da      	mvns	r2, r3
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	4013      	ands	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	2380      	movs	r3, #128	; 0x80
 80078a6:	039b      	lsls	r3, r3, #14
 80078a8:	4013      	ands	r3, r2
 80078aa:	d003      	beq.n	80078b4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078b4:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078ba:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 80078bc:	2384      	movs	r3, #132	; 0x84
 80078be:	58d3      	ldr	r3, [r2, r3]
 80078c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	43da      	mvns	r2, r3
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4013      	ands	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	2380      	movs	r3, #128	; 0x80
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	4013      	ands	r3, r2
 80078d6:	d003      	beq.n	80078e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078e0:	4914      	ldr	r1, [pc, #80]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 80078e2:	2284      	movs	r2, #132	; 0x84
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80078e8:	4a12      	ldr	r2, [pc, #72]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 80078ea:	2380      	movs	r3, #128	; 0x80
 80078ec:	58d3      	ldr	r3, [r2, r3]
 80078ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	43da      	mvns	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4013      	ands	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	025b      	lsls	r3, r3, #9
 8007902:	4013      	ands	r3, r2
 8007904:	d003      	beq.n	800790e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800790e:	4909      	ldr	r1, [pc, #36]	; (8007934 <HAL_GPIO_Init+0x2c4>)
 8007910:	2280      	movs	r2, #128	; 0x80
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	40da      	lsrs	r2, r3
 8007924:	1e13      	subs	r3, r2, #0
 8007926:	d000      	beq.n	800792a <HAL_GPIO_Init+0x2ba>
 8007928:	e6aa      	b.n	8007680 <HAL_GPIO_Init+0x10>
  }
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46c0      	nop			; (mov r8, r8)
 800792e:	46bd      	mov	sp, r7
 8007930:	b006      	add	sp, #24
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40021800 	.word	0x40021800
 8007938:	50000400 	.word	0x50000400
 800793c:	50000800 	.word	0x50000800
 8007940:	50000c00 	.word	0x50000c00
 8007944:	50001000 	.word	0x50001000

08007948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	0008      	movs	r0, r1
 8007952:	0011      	movs	r1, r2
 8007954:	1cbb      	adds	r3, r7, #2
 8007956:	1c02      	adds	r2, r0, #0
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	1c7b      	adds	r3, r7, #1
 800795c:	1c0a      	adds	r2, r1, #0
 800795e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007960:	1c7b      	adds	r3, r7, #1
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007968:	1cbb      	adds	r3, r7, #2
 800796a:	881a      	ldrh	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007970:	e003      	b.n	800797a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007972:	1cbb      	adds	r3, r7, #2
 8007974:	881a      	ldrh	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46bd      	mov	sp, r7
 800797e:	b002      	add	sp, #8
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	000a      	movs	r2, r1
 800798c:	1cbb      	adds	r3, r7, #2
 800798e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007996:	1cbb      	adds	r3, r7, #2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4013      	ands	r3, r2
 800799e:	041a      	lsls	r2, r3, #16
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	43db      	mvns	r3, r3
 80079a4:	1cb9      	adds	r1, r7, #2
 80079a6:	8809      	ldrh	r1, [r1, #0]
 80079a8:	400b      	ands	r3, r1
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b004      	add	sp, #16
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	000a      	movs	r2, r1
 80079c2:	1cbb      	adds	r3, r7, #2
 80079c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80079c6:	230a      	movs	r3, #10
 80079c8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80079ca:	e002      	b.n	80079d2 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f9      	bne.n	80079cc <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80079d8:	1cbb      	adds	r3, r7, #2
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4a06      	ldr	r2, [pc, #24]	; (80079f8 <PCD_GET_EP_RX_CNT+0x40>)
 80079e0:	4694      	mov	ip, r2
 80079e2:	4463      	add	r3, ip
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	0c1b      	lsrs	r3, r3, #16
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	059b      	lsls	r3, r3, #22
 80079ec:	0d9b      	lsrs	r3, r3, #22
 80079ee:	b29b      	uxth	r3, r3
}
 80079f0:	0018      	movs	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b004      	add	sp, #16
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40009800 	.word	0x40009800

080079fc <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	000a      	movs	r2, r1
 8007a06:	1cbb      	adds	r3, r7, #2
 8007a08:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007a0e:	e002      	b.n	8007a16 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f9      	bne.n	8007a10 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8007a1c:	1cbb      	adds	r3, r7, #2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4a06      	ldr	r2, [pc, #24]	; (8007a3c <PCD_GET_EP_DBUF0_CNT+0x40>)
 8007a24:	4694      	mov	ip, r2
 8007a26:	4463      	add	r3, ip
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	0c1b      	lsrs	r3, r3, #16
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	059b      	lsls	r3, r3, #22
 8007a30:	0d9b      	lsrs	r3, r3, #22
 8007a32:	b29b      	uxth	r3, r3
}
 8007a34:	0018      	movs	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b004      	add	sp, #16
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40009800 	.word	0x40009800

08007a40 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	000a      	movs	r2, r1
 8007a4a:	1cbb      	adds	r3, r7, #2
 8007a4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8007a4e:	230a      	movs	r3, #10
 8007a50:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007a52:	e002      	b.n	8007a5a <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f9      	bne.n	8007a54 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8007a60:	1cbb      	adds	r3, r7, #2
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8007a68:	4694      	mov	ip, r2
 8007a6a:	4463      	add	r3, ip
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	059b      	lsls	r3, r3, #22
 8007a74:	0d9b      	lsrs	r3, r3, #22
 8007a76:	b29b      	uxth	r3, r3
}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b004      	add	sp, #16
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40009800 	.word	0x40009800

08007a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a86:	b08f      	sub	sp, #60	; 0x3c
 8007a88:	af0a      	add	r7, sp, #40	; 0x28
 8007a8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e10a      	b.n	8007cac <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a86      	ldr	r2, [pc, #536]	; (8007cb4 <HAL_PCD_Init+0x230>)
 8007a9a:	5c9b      	ldrb	r3, [r3, r2]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d108      	bne.n	8007ab4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	23af      	movs	r3, #175	; 0xaf
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7ff fc46 	bl	8007340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a7f      	ldr	r2, [pc, #508]	; (8007cb4 <HAL_PCD_Init+0x230>)
 8007ab8:	2103      	movs	r1, #3
 8007aba:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f003 fbc0 	bl	800b24c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007acc:	230f      	movs	r3, #15
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e05b      	b.n	8007b8e <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ad6:	240f      	movs	r4, #15
 8007ad8:	193b      	adds	r3, r7, r4
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	203d      	movs	r0, #61	; 0x3d
 8007ae0:	0013      	movs	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	189b      	adds	r3, r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	18cb      	adds	r3, r1, r3
 8007aea:	181b      	adds	r3, r3, r0
 8007aec:	2201      	movs	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007af0:	193b      	adds	r3, r7, r4
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	203c      	movs	r0, #60	; 0x3c
 8007af8:	0013      	movs	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	189b      	adds	r3, r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	18cb      	adds	r3, r1, r3
 8007b02:	181b      	adds	r3, r3, r0
 8007b04:	193a      	adds	r2, r7, r4
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007b0a:	0025      	movs	r5, r4
 8007b0c:	193b      	adds	r3, r7, r4
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	197b      	adds	r3, r7, r5
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	b29c      	uxth	r4, r3
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	2048      	movs	r0, #72	; 0x48
 8007b1a:	0013      	movs	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	18cb      	adds	r3, r1, r3
 8007b24:	181b      	adds	r3, r3, r0
 8007b26:	1c22      	adds	r2, r4, #0
 8007b28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007b2a:	197b      	adds	r3, r7, r5
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	203f      	movs	r0, #63	; 0x3f
 8007b32:	0013      	movs	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	189b      	adds	r3, r3, r2
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	18cb      	adds	r3, r1, r3
 8007b3c:	181b      	adds	r3, r3, r0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007b42:	197b      	adds	r3, r7, r5
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	0013      	movs	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	189b      	adds	r3, r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	18cb      	adds	r3, r1, r3
 8007b52:	334c      	adds	r3, #76	; 0x4c
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007b58:	197b      	adds	r3, r7, r5
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	0013      	movs	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	18cb      	adds	r3, r1, r3
 8007b68:	3350      	adds	r3, #80	; 0x50
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007b6e:	197b      	adds	r3, r7, r5
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	0013      	movs	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	189b      	adds	r3, r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	18cb      	adds	r3, r1, r3
 8007b7e:	3354      	adds	r3, #84	; 0x54
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b84:	197b      	adds	r3, r7, r5
 8007b86:	781a      	ldrb	r2, [r3, #0]
 8007b88:	197b      	adds	r3, r7, r5
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	210f      	movs	r1, #15
 8007b90:	187b      	adds	r3, r7, r1
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d39c      	bcc.n	8007ad6 <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b9c:	187b      	adds	r3, r7, r1
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	e056      	b.n	8007c52 <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ba4:	240f      	movs	r4, #15
 8007ba6:	193b      	adds	r3, r7, r4
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	237e      	movs	r3, #126	; 0x7e
 8007bae:	33ff      	adds	r3, #255	; 0xff
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	0013      	movs	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	18c3      	adds	r3, r0, r3
 8007bbc:	185b      	adds	r3, r3, r1
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007bc2:	193b      	adds	r3, r7, r4
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	23be      	movs	r3, #190	; 0xbe
 8007bca:	0059      	lsls	r1, r3, #1
 8007bcc:	0013      	movs	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	189b      	adds	r3, r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	18c3      	adds	r3, r0, r3
 8007bd6:	185b      	adds	r3, r3, r1
 8007bd8:	193a      	adds	r2, r7, r4
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007bde:	193b      	adds	r3, r7, r4
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	33ff      	adds	r3, #255	; 0xff
 8007be8:	0019      	movs	r1, r3
 8007bea:	0013      	movs	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	189b      	adds	r3, r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	18c3      	adds	r3, r0, r3
 8007bf4:	185b      	adds	r3, r3, r1
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007bfa:	193b      	adds	r3, r7, r4
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	23c6      	movs	r3, #198	; 0xc6
 8007c02:	0059      	lsls	r1, r3, #1
 8007c04:	0013      	movs	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	189b      	adds	r3, r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	18c3      	adds	r3, r0, r3
 8007c0e:	185b      	adds	r3, r3, r1
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c14:	193b      	adds	r3, r7, r4
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	23c8      	movs	r3, #200	; 0xc8
 8007c1c:	0059      	lsls	r1, r3, #1
 8007c1e:	0013      	movs	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	189b      	adds	r3, r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	18c3      	adds	r3, r0, r3
 8007c28:	185b      	adds	r3, r3, r1
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c2e:	193b      	adds	r3, r7, r4
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	23ca      	movs	r3, #202	; 0xca
 8007c36:	0059      	lsls	r1, r3, #1
 8007c38:	0013      	movs	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	189b      	adds	r3, r3, r2
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	18c3      	adds	r3, r0, r3
 8007c42:	185b      	adds	r3, r3, r1
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c48:	193b      	adds	r3, r7, r4
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	193b      	adds	r3, r7, r4
 8007c4e:	3201      	adds	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	230f      	movs	r3, #15
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d3a1      	bcc.n	8007ba4 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681c      	ldr	r4, [r3, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	466b      	mov	r3, sp
 8007c68:	001a      	movs	r2, r3
 8007c6a:	0003      	movs	r3, r0
 8007c6c:	3310      	adds	r3, #16
 8007c6e:	cb62      	ldmia	r3!, {r1, r5, r6}
 8007c70:	c262      	stmia	r2!, {r1, r5, r6}
 8007c72:	cb62      	ldmia	r3!, {r1, r5, r6}
 8007c74:	c262      	stmia	r2!, {r1, r5, r6}
 8007c76:	cb62      	ldmia	r3!, {r1, r5, r6}
 8007c78:	c262      	stmia	r2!, {r1, r5, r6}
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	6841      	ldr	r1, [r0, #4]
 8007c80:	6882      	ldr	r2, [r0, #8]
 8007c82:	68c3      	ldr	r3, [r0, #12]
 8007c84:	0020      	movs	r0, r4
 8007c86:	f003 fb13 	bl	800b2b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2238      	movs	r2, #56	; 0x38
 8007c8e:	2100      	movs	r1, #0
 8007c90:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <HAL_PCD_Init+0x230>)
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d103      	bne.n	8007caa <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f001 fd33 	bl	8009710 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	0018      	movs	r0, r3
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b005      	add	sp, #20
 8007cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb4:	000002bd 	.word	0x000002bd

08007cb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	23af      	movs	r3, #175	; 0xaf
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	5cd3      	ldrb	r3, [r2, r3]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_PCD_Start+0x18>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e014      	b.n	8007cfa <HAL_PCD_Start+0x42>
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	23af      	movs	r3, #175	; 0xaf
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f003 faa0 	bl	800b224 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f005 f9e8 	bl	800d0be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	23af      	movs	r3, #175	; 0xaf
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	b002      	add	sp, #8
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	23af      	movs	r3, #175	; 0xaf
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	5cd3      	ldrb	r3, [r2, r3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_PCD_Stop+0x18>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e014      	b.n	8007d44 <HAL_PCD_Stop+0x42>
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	23af      	movs	r3, #175	; 0xaf
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	2101      	movs	r1, #1
 8007d22:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	0018      	movs	r0, r3
 8007d2a:	f003 fa8f 	bl	800b24c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	0018      	movs	r0, r3
 8007d34:	f005 f9d4 	bl	800d0e0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	23af      	movs	r3, #175	; 0xaf
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	2100      	movs	r1, #0
 8007d40:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	0018      	movs	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f005 f9d3 	bl	800d104 <USB_ReadInterrupts>
 8007d5e:	0003      	movs	r3, r0
 8007d60:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8007d62:	4a7c      	ldr	r2, [pc, #496]	; (8007f54 <HAL_PCD_IRQHandler+0x208>)
 8007d64:	23a0      	movs	r3, #160	; 0xa0
 8007d66:	58d3      	ldr	r3, [r2, r3]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	d100      	bne.n	8007d70 <HAL_PCD_IRQHandler+0x24>
 8007d6e:	e0ed      	b.n	8007f4c <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	4013      	ands	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f000 fbb7 	bl	80084f0 <PCD_EP_ISR_Handler>

    return;
 8007d82:	e0e4      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	2380      	movs	r3, #128	; 0x80
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	d011      	beq.n	8007db2 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	496f      	ldr	r1, [pc, #444]	; (8007f58 <HAL_PCD_IRQHandler+0x20c>)
 8007d9a:	400a      	ands	r2, r1
 8007d9c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	0018      	movs	r0, r3
 8007da2:	f010 f9ef 	bl	8018184 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2100      	movs	r1, #0
 8007daa:	0018      	movs	r0, r3
 8007dac:	f000 f8fc 	bl	8007fa8 <HAL_PCD_SetAddress>

    return;
 8007db0:	e0cd      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	01db      	lsls	r3, r3, #7
 8007db8:	4013      	ands	r3, r2
 8007dba:	d008      	beq.n	8007dce <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4965      	ldr	r1, [pc, #404]	; (8007f5c <HAL_PCD_IRQHandler+0x210>)
 8007dc8:	400a      	ands	r2, r1
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8007dcc:	e0bf      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	2380      	movs	r3, #128	; 0x80
 8007dd2:	019b      	lsls	r3, r3, #6
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d008      	beq.n	8007dea <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	495f      	ldr	r1, [pc, #380]	; (8007f60 <HAL_PCD_IRQHandler+0x214>)
 8007de4:	400a      	ands	r2, r1
 8007de6:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8007de8:	e0b1      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	2380      	movs	r3, #128	; 0x80
 8007dee:	015b      	lsls	r3, r3, #5
 8007df0:	4013      	ands	r3, r2
 8007df2:	d02c      	beq.n	8007e4e <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2104      	movs	r1, #4
 8007e00:	438a      	bics	r2, r1
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2108      	movs	r1, #8
 8007e10:	438a      	bics	r2, r1
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	23bd      	movs	r3, #189	; 0xbd
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	5cd3      	ldrb	r3, [r2, r3]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d109      	bne.n	8007e34 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	23bd      	movs	r3, #189	; 0xbd
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	2100      	movs	r1, #0
 8007e28:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f001 fc90 	bl	8009754 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 f8ae 	bl	8007f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4947      	ldr	r1, [pc, #284]	; (8007f64 <HAL_PCD_IRQHandler+0x218>)
 8007e48:	400a      	ands	r2, r1
 8007e4a:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8007e4c:	e07f      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	4013      	ands	r3, r2
 8007e56:	d01c      	beq.n	8007e92 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2108      	movs	r1, #8
 8007e64:	430a      	orrs	r2, r1
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	493d      	ldr	r1, [pc, #244]	; (8007f68 <HAL_PCD_IRQHandler+0x21c>)
 8007e74:	400a      	ands	r2, r1
 8007e76:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2104      	movs	r1, #4
 8007e84:	430a      	orrs	r2, r1
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f000 f87c 	bl	8007f88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007e90:	e05d      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2280      	movs	r2, #128	; 0x80
 8007e96:	4013      	ands	r3, r2
 8007e98:	d038      	beq.n	8007f0c <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4931      	ldr	r1, [pc, #196]	; (8007f6c <HAL_PCD_IRQHandler+0x220>)
 8007ea6:	400a      	ands	r2, r1
 8007ea8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	23bd      	movs	r3, #189	; 0xbd
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	5cd3      	ldrb	r3, [r2, r3]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d125      	bne.n	8007f02 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2108      	movs	r1, #8
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	23bd      	movs	r3, #189	; 0xbd
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	2101      	movs	r1, #1
 8007ede:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	223c      	movs	r2, #60	; 0x3c
 8007eea:	4013      	ands	r3, r2
 8007eec:	0019      	movs	r1, r3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	23be      	movs	r3, #190	; 0xbe
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2101      	movs	r1, #1
 8007efa:	0018      	movs	r0, r3
 8007efc:	f001 fc2a 	bl	8009754 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007f00:	e025      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	0018      	movs	r0, r3
 8007f06:	f000 f83f 	bl	8007f88 <HAL_PCD_SuspendCallback>
    return;
 8007f0a:	e020      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	2380      	movs	r3, #128	; 0x80
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4013      	ands	r3, r2
 8007f14:	d00c      	beq.n	8007f30 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4913      	ldr	r1, [pc, #76]	; (8007f70 <HAL_PCD_IRQHandler+0x224>)
 8007f22:	400a      	ands	r2, r1
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f000 f825 	bl	8007f78 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007f2e:	e00e      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	2380      	movs	r3, #128	; 0x80
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	4013      	ands	r3, r2
 8007f38:	d009      	beq.n	8007f4e <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	490b      	ldr	r1, [pc, #44]	; (8007f74 <HAL_PCD_IRQHandler+0x228>)
 8007f46:	400a      	ands	r2, r1
 8007f48:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8007f4a:	e000      	b.n	8007f4e <HAL_PCD_IRQHandler+0x202>
    return;
 8007f4c:	46c0      	nop			; (mov r8, r8)
  }
}
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b004      	add	sp, #16
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	40010000 	.word	0x40010000
 8007f58:	0000fbff 	.word	0x0000fbff
 8007f5c:	0000bfff 	.word	0x0000bfff
 8007f60:	0000dfff 	.word	0x0000dfff
 8007f64:	0000efff 	.word	0x0000efff
 8007f68:	0000f7ff 	.word	0x0000f7ff
 8007f6c:	0000ff7f 	.word	0x0000ff7f
 8007f70:	0000fdff 	.word	0x0000fdff
 8007f74:	0000feff 	.word	0x0000feff

08007f78 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8007f80:	46c0      	nop			; (mov r8, r8)
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8007f90:	46c0      	nop			; (mov r8, r8)
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b002      	add	sp, #8
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8007fa0:	46c0      	nop			; (mov r8, r8)
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	000a      	movs	r2, r1
 8007fb2:	1cfb      	adds	r3, r7, #3
 8007fb4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	23af      	movs	r3, #175	; 0xaf
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	5cd3      	ldrb	r3, [r2, r3]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_PCD_SetAddress+0x1e>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e017      	b.n	8007ff6 <HAL_PCD_SetAddress+0x4e>
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	23af      	movs	r3, #175	; 0xaf
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	2101      	movs	r1, #1
 8007fce:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	1cfa      	adds	r2, r7, #3
 8007fd4:	2138      	movs	r1, #56	; 0x38
 8007fd6:	7812      	ldrb	r2, [r2, #0]
 8007fd8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	1cfb      	adds	r3, r7, #3
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	0010      	movs	r0, r2
 8007fe6:	f005 f857 	bl	800d098 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	23af      	movs	r3, #175	; 0xaf
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	b002      	add	sp, #8
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007ffe:	b590      	push	{r4, r7, lr}
 8008000:	b085      	sub	sp, #20
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	000c      	movs	r4, r1
 8008008:	0010      	movs	r0, r2
 800800a:	0019      	movs	r1, r3
 800800c:	1cfb      	adds	r3, r7, #3
 800800e:	1c22      	adds	r2, r4, #0
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	003b      	movs	r3, r7
 8008014:	1c02      	adds	r2, r0, #0
 8008016:	801a      	strh	r2, [r3, #0]
 8008018:	1cbb      	adds	r3, r7, #2
 800801a:	1c0a      	adds	r2, r1, #0
 800801c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800801e:	230b      	movs	r3, #11
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008026:	1cfb      	adds	r3, r7, #3
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b25b      	sxtb	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	da10      	bge.n	8008052 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008030:	1cfb      	adds	r3, r7, #3
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2207      	movs	r2, #7
 8008036:	401a      	ands	r2, r3
 8008038:	0013      	movs	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	189b      	adds	r3, r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	3338      	adds	r3, #56	; 0x38
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	18d3      	adds	r3, r2, r3
 8008046:	3304      	adds	r3, #4
 8008048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2201      	movs	r2, #1
 800804e:	705a      	strb	r2, [r3, #1]
 8008050:	e010      	b.n	8008074 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008052:	1cfb      	adds	r3, r7, #3
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2207      	movs	r2, #7
 8008058:	401a      	ands	r2, r3
 800805a:	0013      	movs	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	189b      	adds	r3, r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	3379      	adds	r3, #121	; 0x79
 8008064:	33ff      	adds	r3, #255	; 0xff
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	18d3      	adds	r3, r2, r3
 800806a:	3304      	adds	r3, #4
 800806c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008074:	1cfb      	adds	r3, r7, #3
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2207      	movs	r2, #7
 800807a:	4013      	ands	r3, r2
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008082:	003b      	movs	r3, r7
 8008084:	881a      	ldrh	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	1cba      	adds	r2, r7, #2
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80080a4:	1cbb      	adds	r3, r7, #2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d102      	bne.n	80080b2 <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	23af      	movs	r3, #175	; 0xaf
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	5cd3      	ldrb	r3, [r2, r3]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <HAL_PCD_EP_Open+0xc4>
 80080be:	2302      	movs	r3, #2
 80080c0:	e013      	b.n	80080ea <HAL_PCD_EP_Open+0xec>
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	23af      	movs	r3, #175	; 0xaf
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	2101      	movs	r1, #1
 80080ca:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	0011      	movs	r1, r2
 80080d4:	0018      	movs	r0, r3
 80080d6:	f003 f915 	bl	800b304 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	23af      	movs	r3, #175	; 0xaf
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	2100      	movs	r1, #0
 80080e2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80080e4:	230b      	movs	r3, #11
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	781b      	ldrb	r3, [r3, #0]
}
 80080ea:	0018      	movs	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b005      	add	sp, #20
 80080f0:	bd90      	pop	{r4, r7, pc}

080080f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	000a      	movs	r2, r1
 80080fc:	1cfb      	adds	r3, r7, #3
 80080fe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008100:	1cfb      	adds	r3, r7, #3
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b25b      	sxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	da10      	bge.n	800812c <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800810a:	1cfb      	adds	r3, r7, #3
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2207      	movs	r2, #7
 8008110:	401a      	ands	r2, r3
 8008112:	0013      	movs	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	189b      	adds	r3, r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	3338      	adds	r3, #56	; 0x38
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	18d3      	adds	r3, r2, r3
 8008120:	3304      	adds	r3, #4
 8008122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	705a      	strb	r2, [r3, #1]
 800812a:	e010      	b.n	800814e <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800812c:	1cfb      	adds	r3, r7, #3
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2207      	movs	r2, #7
 8008132:	401a      	ands	r2, r3
 8008134:	0013      	movs	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	189b      	adds	r3, r3, r2
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	3379      	adds	r3, #121	; 0x79
 800813e:	33ff      	adds	r3, #255	; 0xff
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	18d3      	adds	r3, r2, r3
 8008144:	3304      	adds	r3, #4
 8008146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800814e:	1cfb      	adds	r3, r7, #3
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2207      	movs	r2, #7
 8008154:	4013      	ands	r3, r2
 8008156:	b2da      	uxtb	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	23af      	movs	r3, #175	; 0xaf
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	5cd3      	ldrb	r3, [r2, r3]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_PCD_EP_Close+0x7a>
 8008168:	2302      	movs	r3, #2
 800816a:	e011      	b.n	8008190 <HAL_PCD_EP_Close+0x9e>
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	23af      	movs	r3, #175	; 0xaf
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	2101      	movs	r1, #1
 8008174:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	0011      	movs	r1, r2
 800817e:	0018      	movs	r0, r3
 8008180:	f003 fc04 	bl	800b98c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	23af      	movs	r3, #175	; 0xaf
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	2100      	movs	r1, #0
 800818c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	0018      	movs	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	b004      	add	sp, #16
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	200b      	movs	r0, #11
 80081a6:	183b      	adds	r3, r7, r0
 80081a8:	1c0a      	adds	r2, r1, #0
 80081aa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081ac:	0001      	movs	r1, r0
 80081ae:	187b      	adds	r3, r7, r1
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2207      	movs	r2, #7
 80081b4:	401a      	ands	r2, r3
 80081b6:	0013      	movs	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	3379      	adds	r3, #121	; 0x79
 80081c0:	33ff      	adds	r3, #255	; 0xff
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	18d3      	adds	r3, r2, r3
 80081c6:	3304      	adds	r3, #4
 80081c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2200      	movs	r2, #0
 80081da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2200      	movs	r2, #0
 80081e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081e2:	187b      	adds	r3, r7, r1
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2207      	movs	r2, #7
 80081e8:	4013      	ands	r3, r2
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2207      	movs	r2, #7
 80081f6:	4013      	ands	r3, r2
 80081f8:	d107      	bne.n	800820a <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	0011      	movs	r1, r2
 8008202:	0018      	movs	r0, r3
 8008204:	f003 fd28 	bl	800bc58 <USB_EPStartXfer>
 8008208:	e006      	b.n	8008218 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	0011      	movs	r1, r2
 8008212:	0018      	movs	r0, r3
 8008214:	f003 fd20 	bl	800bc58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	0018      	movs	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	b006      	add	sp, #24
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	000a      	movs	r2, r1
 800822c:	1cfb      	adds	r3, r7, #3
 800822e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008230:	1cfb      	adds	r3, r7, #3
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2207      	movs	r2, #7
 8008236:	401a      	ands	r2, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	23cc      	movs	r3, #204	; 0xcc
 800823c:	0059      	lsls	r1, r3, #1
 800823e:	0013      	movs	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	189b      	adds	r3, r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	18c3      	adds	r3, r0, r3
 8008248:	185b      	adds	r3, r3, r1
 800824a:	681b      	ldr	r3, [r3, #0]
}
 800824c:	0018      	movs	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	b002      	add	sp, #8
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	200b      	movs	r0, #11
 8008262:	183b      	adds	r3, r7, r0
 8008264:	1c0a      	adds	r2, r1, #0
 8008266:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008268:	183b      	adds	r3, r7, r0
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2207      	movs	r2, #7
 800826e:	401a      	ands	r2, r3
 8008270:	0013      	movs	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	189b      	adds	r3, r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	3338      	adds	r3, #56	; 0x38
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	18d3      	adds	r3, r2, r3
 800827e:	3304      	adds	r3, #4
 8008280:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2224      	movs	r2, #36	; 0x24
 8008292:	2101      	movs	r1, #1
 8008294:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2200      	movs	r2, #0
 80082a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2201      	movs	r2, #1
 80082a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082a8:	183b      	adds	r3, r7, r0
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2207      	movs	r2, #7
 80082ae:	4013      	ands	r3, r2
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80082b6:	183b      	adds	r3, r7, r0
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2207      	movs	r2, #7
 80082bc:	4013      	ands	r3, r2
 80082be:	d107      	bne.n	80082d0 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	0011      	movs	r1, r2
 80082c8:	0018      	movs	r0, r3
 80082ca:	f003 fcc5 	bl	800bc58 <USB_EPStartXfer>
 80082ce:	e006      	b.n	80082de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	0011      	movs	r1, r2
 80082d8:	0018      	movs	r0, r3
 80082da:	f003 fcbd 	bl	800bc58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	0018      	movs	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	b006      	add	sp, #24
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	000a      	movs	r2, r1
 80082f2:	1cfb      	adds	r3, r7, #3
 80082f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80082f6:	1cfb      	adds	r3, r7, #3
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2207      	movs	r2, #7
 80082fc:	401a      	ands	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d901      	bls.n	800830a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e048      	b.n	800839c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800830a:	1cfb      	adds	r3, r7, #3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b25b      	sxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	da10      	bge.n	8008336 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008314:	1cfb      	adds	r3, r7, #3
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2207      	movs	r2, #7
 800831a:	401a      	ands	r2, r3
 800831c:	0013      	movs	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	189b      	adds	r3, r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	3338      	adds	r3, #56	; 0x38
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	18d3      	adds	r3, r2, r3
 800832a:	3304      	adds	r3, #4
 800832c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	705a      	strb	r2, [r3, #1]
 8008334:	e00e      	b.n	8008354 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008336:	1cfb      	adds	r3, r7, #3
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	0013      	movs	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	189b      	adds	r3, r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	3379      	adds	r3, #121	; 0x79
 8008344:	33ff      	adds	r3, #255	; 0xff
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	18d3      	adds	r3, r2, r3
 800834a:	3304      	adds	r3, #4
 800834c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800835a:	1cfb      	adds	r3, r7, #3
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2207      	movs	r2, #7
 8008360:	4013      	ands	r3, r2
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	23af      	movs	r3, #175	; 0xaf
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	5cd3      	ldrb	r3, [r2, r3]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_PCD_EP_SetStall+0x90>
 8008374:	2302      	movs	r3, #2
 8008376:	e011      	b.n	800839c <HAL_PCD_EP_SetStall+0xb4>
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	23af      	movs	r3, #175	; 0xaf
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	2101      	movs	r1, #1
 8008380:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	0011      	movs	r1, r2
 800838a:	0018      	movs	r0, r3
 800838c:	f004 fd38 	bl	800ce00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	23af      	movs	r3, #175	; 0xaf
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	2100      	movs	r1, #0
 8008398:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	0018      	movs	r0, r3
 800839e:	46bd      	mov	sp, r7
 80083a0:	b004      	add	sp, #16
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	000a      	movs	r2, r1
 80083ae:	1cfb      	adds	r3, r7, #3
 80083b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80083b2:	1cfb      	adds	r3, r7, #3
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	220f      	movs	r2, #15
 80083b8:	401a      	ands	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d901      	bls.n	80083c6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e04a      	b.n	800845c <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083c6:	1cfb      	adds	r3, r7, #3
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	b25b      	sxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	da10      	bge.n	80083f2 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083d0:	1cfb      	adds	r3, r7, #3
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2207      	movs	r2, #7
 80083d6:	401a      	ands	r2, r3
 80083d8:	0013      	movs	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	189b      	adds	r3, r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	3338      	adds	r3, #56	; 0x38
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	18d3      	adds	r3, r2, r3
 80083e6:	3304      	adds	r3, #4
 80083e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	705a      	strb	r2, [r3, #1]
 80083f0:	e010      	b.n	8008414 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083f2:	1cfb      	adds	r3, r7, #3
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2207      	movs	r2, #7
 80083f8:	401a      	ands	r2, r3
 80083fa:	0013      	movs	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	189b      	adds	r3, r3, r2
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	3379      	adds	r3, #121	; 0x79
 8008404:	33ff      	adds	r3, #255	; 0xff
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	18d3      	adds	r3, r2, r3
 800840a:	3304      	adds	r3, #4
 800840c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800841a:	1cfb      	adds	r3, r7, #3
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2207      	movs	r2, #7
 8008420:	4013      	ands	r3, r2
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	23af      	movs	r3, #175	; 0xaf
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	5cd3      	ldrb	r3, [r2, r3]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_PCD_EP_ClrStall+0x94>
 8008434:	2302      	movs	r3, #2
 8008436:	e011      	b.n	800845c <HAL_PCD_EP_ClrStall+0xb8>
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	23af      	movs	r3, #175	; 0xaf
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	2101      	movs	r1, #1
 8008440:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	0011      	movs	r1, r2
 800844a:	0018      	movs	r0, r3
 800844c:	f004 fd1a 	bl	800ce84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	23af      	movs	r3, #175	; 0xaf
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	2100      	movs	r1, #0
 8008458:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b004      	add	sp, #16
 8008462:	bd80      	pop	{r7, pc}

08008464 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	000a      	movs	r2, r1
 800846e:	1cfb      	adds	r3, r7, #3
 8008470:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008472:	1cfb      	adds	r3, r7, #3
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b25b      	sxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	da0d      	bge.n	8008498 <HAL_PCD_EP_Abort+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800847c:	1cfb      	adds	r3, r7, #3
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2207      	movs	r2, #7
 8008482:	401a      	ands	r2, r3
 8008484:	0013      	movs	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	189b      	adds	r3, r3, r2
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	3338      	adds	r3, #56	; 0x38
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	18d3      	adds	r3, r2, r3
 8008492:	3304      	adds	r3, #4
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e00d      	b.n	80084b4 <HAL_PCD_EP_Abort+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008498:	1cfb      	adds	r3, r7, #3
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2207      	movs	r2, #7
 800849e:	401a      	ands	r2, r3
 80084a0:	0013      	movs	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	189b      	adds	r3, r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	3379      	adds	r3, #121	; 0x79
 80084aa:	33ff      	adds	r3, #255	; 0xff
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	18d3      	adds	r3, r2, r3
 80084b0:	3304      	adds	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	250b      	movs	r5, #11
 80084ba:	197c      	adds	r4, r7, r5
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	0011      	movs	r1, r2
 80084c0:	0018      	movs	r0, r3
 80084c2:	f004 fd71 	bl	800cfa8 <USB_EPStopXfer>
 80084c6:	0003      	movs	r3, r0
 80084c8:	7023      	strb	r3, [r4, #0]

  return ret;
 80084ca:	197b      	adds	r3, r7, r5
 80084cc:	781b      	ldrb	r3, [r3, #0]
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b004      	add	sp, #16
 80084d4:	bdb0      	pop	{r4, r5, r7, pc}

080084d6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	000a      	movs	r2, r1
 80084e0:	1cfb      	adds	r3, r7, #3
 80084e2:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	0018      	movs	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b002      	add	sp, #8
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b08e      	sub	sp, #56	; 0x38
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80084f8:	f000 fb90 	bl	8008c1c <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008502:	202a      	movs	r0, #42	; 0x2a
 8008504:	183b      	adds	r3, r7, r0
 8008506:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8008508:	183b      	adds	r3, r7, r0
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	2429      	movs	r4, #41	; 0x29
 8008510:	193b      	adds	r3, r7, r4
 8008512:	210f      	movs	r1, #15
 8008514:	400a      	ands	r2, r1
 8008516:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8008518:	193b      	adds	r3, r7, r4
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d000      	beq.n	8008522 <PCD_EP_ISR_Handler+0x32>
 8008520:	e136      	b.n	8008790 <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008522:	183b      	adds	r3, r7, r0
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	2210      	movs	r2, #16
 8008528:	4013      	ands	r3, r2
 800852a:	d143      	bne.n	80085b4 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4acb      	ldr	r2, [pc, #812]	; (8008860 <PCD_EP_ISR_Handler+0x370>)
 8008534:	4013      	ands	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	2180      	movs	r1, #128	; 0x80
 8008540:	0209      	lsls	r1, r1, #8
 8008542:	430a      	orrs	r2, r1
 8008544:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	333c      	adds	r3, #60	; 0x3c
 800854a:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	4ac4      	ldr	r2, [pc, #784]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 8008554:	4694      	mov	ip, r2
 8008556:	4463      	add	r3, ip
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	059b      	lsls	r3, r3, #22
 800855e:	0d9a      	lsrs	r2, r3, #22
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	695a      	ldr	r2, [r3, #20]
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	18d2      	adds	r2, r2, r3
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2100      	movs	r1, #0
 8008576:	0018      	movs	r0, r3
 8008578:	f00f fcd2 	bl	8017f20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2238      	movs	r2, #56	; 0x38
 8008580:	5c9b      	ldrb	r3, [r3, r2]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d100      	bne.n	800858a <PCD_EP_ISR_Handler+0x9a>
 8008588:	e348      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d000      	beq.n	8008594 <PCD_EP_ISR_Handler+0xa4>
 8008592:	e343      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2238      	movs	r2, #56	; 0x38
 8008598:	5c9b      	ldrb	r3, [r3, r2]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2280      	movs	r2, #128	; 0x80
 800859e:	4252      	negs	r2, r2
 80085a0:	4313      	orrs	r3, r2
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2238      	movs	r2, #56	; 0x38
 80085ae:	2100      	movs	r1, #0
 80085b0:	5499      	strb	r1, [r3, r2]
 80085b2:	e333      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	337d      	adds	r3, #125	; 0x7d
 80085b8:	33ff      	adds	r3, #255	; 0xff
 80085ba:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	2126      	movs	r1, #38	; 0x26
 80085c4:	187b      	adds	r3, r7, r1
 80085c6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	881a      	ldrh	r2, [r3, #0]
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	4013      	ands	r3, r2
 80085d2:	d02a      	beq.n	800862a <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	0019      	movs	r1, r3
 80085e0:	0010      	movs	r0, r2
 80085e2:	f7ff f9e9 	bl	80079b8 <PCD_GET_EP_RX_CNT>
 80085e6:	0003      	movs	r3, r0
 80085e8:	001a      	movs	r2, r3
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	22b1      	movs	r2, #177	; 0xb1
 80085f6:	0092      	lsls	r2, r2, #2
 80085f8:	1899      	adds	r1, r3, r2
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008602:	b29b      	uxth	r3, r3
 8008604:	f004 fe00 	bl	800d208 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a96      	ldr	r2, [pc, #600]	; (8008868 <PCD_EP_ISR_Handler+0x378>)
 8008610:	4013      	ands	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	2180      	movs	r1, #128	; 0x80
 800861c:	430a      	orrs	r2, r1
 800861e:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	0018      	movs	r0, r3
 8008624:	f00f fbf8 	bl	8017e18 <HAL_PCD_SetupStageCallback>
 8008628:	e2f8      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800862a:	2326      	movs	r3, #38	; 0x26
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	2200      	movs	r2, #0
 8008630:	5e9b      	ldrsh	r3, [r3, r2]
 8008632:	2b00      	cmp	r3, #0
 8008634:	db00      	blt.n	8008638 <PCD_EP_ISR_Handler+0x148>
 8008636:	e2f1      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a8a      	ldr	r2, [pc, #552]	; (8008868 <PCD_EP_ISR_Handler+0x378>)
 8008640:	4013      	ands	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	2180      	movs	r1, #128	; 0x80
 800864c:	430a      	orrs	r2, r1
 800864e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b29b      	uxth	r3, r3
 800865a:	0019      	movs	r1, r3
 800865c:	0010      	movs	r0, r2
 800865e:	f7ff f9ab 	bl	80079b8 <PCD_GET_EP_RX_CNT>
 8008662:	0003      	movs	r3, r0
 8008664:	001a      	movs	r2, r3
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800866a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01a      	beq.n	80086a8 <PCD_EP_ISR_Handler+0x1b8>
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d016      	beq.n	80086a8 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008680:	6959      	ldr	r1, [r3, #20]
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008684:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800868a:	b29b      	uxth	r3, r3
 800868c:	f004 fdbc 	bl	800d208 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	18d2      	adds	r2, r2, r3
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2100      	movs	r1, #0
 80086a2:	0018      	movs	r0, r3
 80086a4:	f00f fce4 	bl	8018070 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	2126      	movs	r1, #38	; 0x26
 80086b0:	187b      	adds	r3, r7, r1
 80086b2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80086b4:	187b      	adds	r3, r7, r1
 80086b6:	881a      	ldrh	r2, [r3, #0]
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	4013      	ands	r3, r2
 80086be:	d000      	beq.n	80086c2 <PCD_EP_ISR_Handler+0x1d2>
 80086c0:	e2ac      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
 80086c2:	187b      	adds	r3, r7, r1
 80086c4:	881a      	ldrh	r2, [r3, #0]
 80086c6:	23c0      	movs	r3, #192	; 0xc0
 80086c8:	019b      	lsls	r3, r3, #6
 80086ca:	401a      	ands	r2, r3
 80086cc:	23c0      	movs	r3, #192	; 0xc0
 80086ce:	019b      	lsls	r3, r3, #6
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d100      	bne.n	80086d6 <PCD_EP_ISR_Handler+0x1e6>
 80086d4:	e2a2      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80086d6:	4b63      	ldr	r3, [pc, #396]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	4b62      	ldr	r3, [pc, #392]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 80086dc:	0412      	lsls	r2, r2, #16
 80086de:	0c12      	lsrs	r2, r2, #16
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b3e      	cmp	r3, #62	; 0x3e
 80086e8:	d916      	bls.n	8008718 <PCD_EP_ISR_Handler+0x228>
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	61bb      	str	r3, [r7, #24]
 80086f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	221f      	movs	r2, #31
 80086f8:	4013      	ands	r3, r2
 80086fa:	d102      	bne.n	8008702 <PCD_EP_ISR_Handler+0x212>
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	3b01      	subs	r3, #1
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	4b58      	ldr	r3, [pc, #352]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	069b      	lsls	r3, r3, #26
 800870a:	431a      	orrs	r2, r3
 800870c:	4b55      	ldr	r3, [pc, #340]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	0609      	lsls	r1, r1, #24
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	e024      	b.n	8008762 <PCD_EP_ISR_Handler+0x272>
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10d      	bne.n	800873c <PCD_EP_ISR_Handler+0x24c>
 8008720:	4b50      	ldr	r3, [pc, #320]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	4b4f      	ldr	r3, [pc, #316]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 8008726:	4951      	ldr	r1, [pc, #324]	; (800886c <PCD_EP_ISR_Handler+0x37c>)
 8008728:	400a      	ands	r2, r1
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	4b4d      	ldr	r3, [pc, #308]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	4b4c      	ldr	r3, [pc, #304]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 8008732:	2180      	movs	r1, #128	; 0x80
 8008734:	0609      	lsls	r1, r1, #24
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	e012      	b.n	8008762 <PCD_EP_ISR_Handler+0x272>
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	61bb      	str	r3, [r7, #24]
 8008744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2201      	movs	r2, #1
 800874a:	4013      	ands	r3, r2
 800874c:	d002      	beq.n	8008754 <PCD_EP_ISR_Handler+0x264>
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	3301      	adds	r3, #1
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	4b43      	ldr	r3, [pc, #268]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 8008756:	6859      	ldr	r1, [r3, #4]
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	069a      	lsls	r2, r3, #26
 800875c:	4b41      	ldr	r3, [pc, #260]	; (8008864 <PCD_EP_ISR_Handler+0x374>)
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a41      	ldr	r2, [pc, #260]	; (8008870 <PCD_EP_ISR_Handler+0x380>)
 800876a:	4013      	ands	r3, r2
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2280      	movs	r2, #128	; 0x80
 8008772:	0152      	lsls	r2, r2, #5
 8008774:	4053      	eors	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2280      	movs	r2, #128	; 0x80
 800877c:	0192      	lsls	r2, r2, #6
 800877e:	4053      	eors	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	493a      	ldr	r1, [pc, #232]	; (8008874 <PCD_EP_ISR_Handler+0x384>)
 800878a:	430a      	orrs	r2, r1
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e245      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	001a      	movs	r2, r3
 8008796:	2129      	movs	r1, #41	; 0x29
 8008798:	187b      	adds	r3, r7, r1
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	18d3      	adds	r3, r2, r3
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	2026      	movs	r0, #38	; 0x26
 80087a4:	183b      	adds	r3, r7, r0
 80087a6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80087a8:	183b      	adds	r3, r7, r0
 80087aa:	2200      	movs	r2, #0
 80087ac:	5e9b      	ldrsh	r3, [r3, r2]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	db00      	blt.n	80087b4 <PCD_EP_ISR_Handler+0x2c4>
 80087b2:	e0e4      	b.n	800897e <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	001a      	movs	r2, r3
 80087ba:	187b      	adds	r3, r7, r1
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	18d3      	adds	r3, r2, r3
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a28      	ldr	r2, [pc, #160]	; (8008868 <PCD_EP_ISR_Handler+0x378>)
 80087c6:	4013      	ands	r3, r2
 80087c8:	623b      	str	r3, [r7, #32]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	001a      	movs	r2, r3
 80087d0:	0008      	movs	r0, r1
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	18d3      	adds	r3, r2, r3
 80087da:	6a3a      	ldr	r2, [r7, #32]
 80087dc:	2180      	movs	r1, #128	; 0x80
 80087de:	430a      	orrs	r2, r1
 80087e0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80087e2:	183b      	adds	r3, r7, r0
 80087e4:	781a      	ldrb	r2, [r3, #0]
 80087e6:	0013      	movs	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	189b      	adds	r3, r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	3379      	adds	r3, #121	; 0x79
 80087f0:	33ff      	adds	r3, #255	; 0xff
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	18d3      	adds	r3, r2, r3
 80087f6:	3304      	adds	r3, #4
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	7a9b      	ldrb	r3, [r3, #10]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d11d      	bne.n	800883e <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	252c      	movs	r5, #44	; 0x2c
 800880e:	197c      	adds	r4, r7, r5
 8008810:	0019      	movs	r1, r3
 8008812:	0010      	movs	r0, r2
 8008814:	f7ff f8d0 	bl	80079b8 <PCD_GET_EP_RX_CNT>
 8008818:	0003      	movs	r3, r0
 800881a:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800881c:	002c      	movs	r4, r5
 800881e:	193b      	adds	r3, r7, r4
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d100      	bne.n	8008828 <PCD_EP_ISR_Handler+0x338>
 8008826:	e082      	b.n	800892e <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	6959      	ldr	r1, [r3, #20]
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	889a      	ldrh	r2, [r3, #4]
 8008834:	193b      	adds	r3, r7, r4
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	f004 fce6 	bl	800d208 <USB_ReadPMA>
 800883c:	e077      	b.n	800892e <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800883e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008840:	78db      	ldrb	r3, [r3, #3]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d118      	bne.n	8008878 <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008846:	232c      	movs	r3, #44	; 0x2c
 8008848:	18fc      	adds	r4, r7, r3
 800884a:	2326      	movs	r3, #38	; 0x26
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	881a      	ldrh	r2, [r3, #0]
 8008850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	0018      	movs	r0, r3
 8008856:	f000 f9ef 	bl	8008c38 <HAL_PCD_EP_DB_Receive>
 800885a:	0003      	movs	r3, r0
 800885c:	8023      	strh	r3, [r4, #0]
 800885e:	e066      	b.n	800892e <PCD_EP_ISR_Handler+0x43e>
 8008860:	07ff8f0f 	.word	0x07ff8f0f
 8008864:	40009800 	.word	0x40009800
 8008868:	07ff0f8f 	.word	0x07ff0f8f
 800886c:	83ffffff 	.word	0x83ffffff
 8008870:	07ffbf8f 	.word	0x07ffbf8f
 8008874:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	001a      	movs	r2, r3
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	18d3      	adds	r3, r2, r3
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4adb      	ldr	r2, [pc, #876]	; (8008bf8 <PCD_EP_ISR_Handler+0x708>)
 800888a:	4013      	ands	r3, r2
 800888c:	61fb      	str	r3, [r7, #28]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	001a      	movs	r2, r3
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	18d3      	adds	r3, r2, r3
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	49d7      	ldr	r1, [pc, #860]	; (8008bfc <PCD_EP_ISR_Handler+0x70c>)
 80088a0:	430a      	orrs	r2, r1
 80088a2:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	001a      	movs	r2, r3
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	18d3      	adds	r3, r2, r3
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	01db      	lsls	r3, r3, #7
 80088b8:	4013      	ands	r3, r2
 80088ba:	d01c      	beq.n	80088f6 <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	252c      	movs	r5, #44	; 0x2c
 80088c8:	197c      	adds	r4, r7, r5
 80088ca:	0019      	movs	r1, r3
 80088cc:	0010      	movs	r0, r2
 80088ce:	f7ff f895 	bl	80079fc <PCD_GET_EP_DBUF0_CNT>
 80088d2:	0003      	movs	r3, r0
 80088d4:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80088d6:	002c      	movs	r4, r5
 80088d8:	193b      	adds	r3, r7, r4
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d026      	beq.n	800892e <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	6959      	ldr	r1, [r3, #20]
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	88da      	ldrh	r2, [r3, #6]
 80088ec:	193b      	adds	r3, r7, r4
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	f004 fc8a 	bl	800d208 <USB_ReadPMA>
 80088f4:	e01b      	b.n	800892e <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	252c      	movs	r5, #44	; 0x2c
 8008902:	197c      	adds	r4, r7, r5
 8008904:	0019      	movs	r1, r3
 8008906:	0010      	movs	r0, r2
 8008908:	f7ff f89a 	bl	8007a40 <PCD_GET_EP_DBUF1_CNT>
 800890c:	0003      	movs	r3, r0
 800890e:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8008910:	002c      	movs	r4, r5
 8008912:	193b      	adds	r3, r7, r4
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	6959      	ldr	r1, [r3, #20]
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	891a      	ldrh	r2, [r3, #8]
 8008926:	193b      	adds	r3, r7, r4
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	f004 fc6d 	bl	800d208 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	69da      	ldr	r2, [r3, #28]
 8008932:	212c      	movs	r1, #44	; 0x2c
 8008934:	187b      	adds	r3, r7, r1
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	18d2      	adds	r2, r2, r3
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	695a      	ldr	r2, [r3, #20]
 8008942:	187b      	adds	r3, r7, r1
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	18d2      	adds	r2, r2, r3
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <PCD_EP_ISR_Handler+0x470>
 8008954:	187b      	adds	r3, r7, r1
 8008956:	881a      	ldrh	r2, [r3, #0]
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	429a      	cmp	r2, r3
 800895e:	d207      	bcs.n	8008970 <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	0011      	movs	r1, r2
 8008968:	0018      	movs	r0, r3
 800896a:	f00f fb81 	bl	8018070 <HAL_PCD_DataOutStageCallback>
 800896e:	e006      	b.n	800897e <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008976:	0011      	movs	r1, r2
 8008978:	0018      	movs	r0, r3
 800897a:	f003 f96d 	bl	800bc58 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800897e:	2026      	movs	r0, #38	; 0x26
 8008980:	183b      	adds	r3, r7, r0
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	2280      	movs	r2, #128	; 0x80
 8008986:	4013      	ands	r3, r2
 8008988:	d100      	bne.n	800898c <PCD_EP_ISR_Handler+0x49c>
 800898a:	e147      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 800898c:	2129      	movs	r1, #41	; 0x29
 800898e:	187b      	adds	r3, r7, r1
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	0013      	movs	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	189b      	adds	r3, r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	3338      	adds	r3, #56	; 0x38
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	18d3      	adds	r3, r2, r3
 80089a0:	3304      	adds	r3, #4
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	001a      	movs	r2, r3
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	18d3      	adds	r3, r2, r3
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a92      	ldr	r2, [pc, #584]	; (8008c00 <PCD_EP_ISR_Handler+0x710>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	633b      	str	r3, [r7, #48]	; 0x30
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	001a      	movs	r2, r3
 80089c0:	187b      	adds	r3, r7, r1
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	18d3      	adds	r3, r2, r3
 80089c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	0209      	lsls	r1, r1, #8
 80089ce:	430a      	orrs	r2, r1
 80089d0:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d000      	beq.n	80089dc <PCD_EP_ISR_Handler+0x4ec>
 80089da:	e0c3      	b.n	8008b64 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 80089dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089de:	2200      	movs	r2, #0
 80089e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	7a9b      	ldrb	r3, [r3, #10]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d100      	bne.n	80089ec <PCD_EP_ISR_Handler+0x4fc>
 80089ea:	e0b3      	b.n	8008b54 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80089ec:	183b      	adds	r3, r7, r0
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	2240      	movs	r2, #64	; 0x40
 80089f2:	4013      	ands	r3, r2
 80089f4:	d057      	beq.n	8008aa6 <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d131      	bne.n	8008a62 <PCD_EP_ISR_Handler+0x572>
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4a7f      	ldr	r2, [pc, #508]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a06:	4694      	mov	ip, r2
 8008a08:	4463      	add	r3, ip
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	497c      	ldr	r1, [pc, #496]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a14:	468c      	mov	ip, r1
 8008a16:	4463      	add	r3, ip
 8008a18:	0412      	lsls	r2, r2, #16
 8008a1a:	0c12      	lsrs	r2, r2, #16
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4a77      	ldr	r2, [pc, #476]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a26:	4694      	mov	ip, r2
 8008a28:	4463      	add	r3, ip
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4974      	ldr	r1, [pc, #464]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a34:	468c      	mov	ip, r1
 8008a36:	4463      	add	r3, ip
 8008a38:	4973      	ldr	r1, [pc, #460]	; (8008c08 <PCD_EP_ISR_Handler+0x718>)
 8008a3a:	400a      	ands	r2, r1
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4a6f      	ldr	r2, [pc, #444]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a46:	4694      	mov	ip, r2
 8008a48:	4463      	add	r3, ip
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	496c      	ldr	r1, [pc, #432]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a54:	468c      	mov	ip, r1
 8008a56:	4463      	add	r3, ip
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	0609      	lsls	r1, r1, #24
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	e078      	b.n	8008b54 <PCD_EP_ISR_Handler+0x664>
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d174      	bne.n	8008b54 <PCD_EP_ISR_Handler+0x664>
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	4a64      	ldr	r2, [pc, #400]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a72:	4694      	mov	ip, r2
 8008a74:	4463      	add	r3, ip
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4961      	ldr	r1, [pc, #388]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a80:	468c      	mov	ip, r1
 8008a82:	4463      	add	r3, ip
 8008a84:	0412      	lsls	r2, r2, #16
 8008a86:	0c12      	lsrs	r2, r2, #16
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	4a5c      	ldr	r2, [pc, #368]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a92:	189a      	adds	r2, r3, r2
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	495a      	ldr	r1, [pc, #360]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008a9c:	468c      	mov	ip, r1
 8008a9e:	4463      	add	r3, ip
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e056      	b.n	8008b54 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa8:	785b      	ldrb	r3, [r3, #1]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d131      	bne.n	8008b12 <PCD_EP_ISR_Handler+0x622>
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	4a53      	ldr	r2, [pc, #332]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008ab6:	4694      	mov	ip, r2
 8008ab8:	4463      	add	r3, ip
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	4950      	ldr	r1, [pc, #320]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008ac4:	468c      	mov	ip, r1
 8008ac6:	4463      	add	r3, ip
 8008ac8:	0412      	lsls	r2, r2, #16
 8008aca:	0c12      	lsrs	r2, r2, #16
 8008acc:	605a      	str	r2, [r3, #4]
 8008ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4a4b      	ldr	r2, [pc, #300]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008ad6:	4694      	mov	ip, r2
 8008ad8:	4463      	add	r3, ip
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	4948      	ldr	r1, [pc, #288]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008ae4:	468c      	mov	ip, r1
 8008ae6:	4463      	add	r3, ip
 8008ae8:	4947      	ldr	r1, [pc, #284]	; (8008c08 <PCD_EP_ISR_Handler+0x718>)
 8008aea:	400a      	ands	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4a43      	ldr	r2, [pc, #268]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008af6:	4694      	mov	ip, r2
 8008af8:	4463      	add	r3, ip
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	00db      	lsls	r3, r3, #3
 8008b02:	4940      	ldr	r1, [pc, #256]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008b04:	468c      	mov	ip, r1
 8008b06:	4463      	add	r3, ip
 8008b08:	2180      	movs	r1, #128	; 0x80
 8008b0a:	0609      	lsls	r1, r1, #24
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	605a      	str	r2, [r3, #4]
 8008b10:	e020      	b.n	8008b54 <PCD_EP_ISR_Handler+0x664>
 8008b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b14:	785b      	ldrb	r3, [r3, #1]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d11c      	bne.n	8008b54 <PCD_EP_ISR_Handler+0x664>
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4a38      	ldr	r2, [pc, #224]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008b22:	4694      	mov	ip, r2
 8008b24:	4463      	add	r3, ip
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4935      	ldr	r1, [pc, #212]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008b30:	468c      	mov	ip, r1
 8008b32:	4463      	add	r3, ip
 8008b34:	0412      	lsls	r2, r2, #16
 8008b36:	0c12      	lsrs	r2, r2, #16
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	4a30      	ldr	r2, [pc, #192]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008b42:	189a      	adds	r2, r3, r2
 8008b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	492e      	ldr	r1, [pc, #184]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008b4c:	468c      	mov	ip, r1
 8008b4e:	4463      	add	r3, ip
 8008b50:	6852      	ldr	r2, [r2, #4]
 8008b52:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b56:	781a      	ldrb	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	0011      	movs	r1, r2
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f00f f9df 	bl	8017f20 <HAL_PCD_DataInStageCallback>
 8008b62:	e05b      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008b64:	2326      	movs	r3, #38	; 0x26
 8008b66:	18fb      	adds	r3, r7, r3
 8008b68:	881a      	ldrh	r2, [r3, #0]
 8008b6a:	2380      	movs	r3, #128	; 0x80
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d14c      	bne.n	8008c0c <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	4a22      	ldr	r2, [pc, #136]	; (8008c04 <PCD_EP_ISR_Handler+0x714>)
 8008b7a:	4694      	mov	ip, r2
 8008b7c:	4463      	add	r3, ip
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	0c1b      	lsrs	r3, r3, #16
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	212e      	movs	r1, #46	; 0x2e
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	0592      	lsls	r2, r2, #22
 8008b8a:	0d92      	lsrs	r2, r2, #22
 8008b8c:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	187b      	adds	r3, r7, r1
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d907      	bls.n	8008baa <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	619a      	str	r2, [r3, #24]
 8008ba8:	e002      	b.n	8008bb0 <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	2200      	movs	r2, #0
 8008bae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d107      	bne.n	8008bc8 <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	781a      	ldrb	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	0011      	movs	r1, r2
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f00f f9ad 	bl	8017f20 <HAL_PCD_DataInStageCallback>
 8008bc6:	e029      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bca:	695a      	ldr	r2, [r3, #20]
 8008bcc:	212e      	movs	r1, #46	; 0x2e
 8008bce:	187b      	adds	r3, r7, r1
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	18d2      	adds	r2, r2, r3
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bda:	69da      	ldr	r2, [r3, #28]
 8008bdc:	187b      	adds	r3, r7, r1
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	18d2      	adds	r2, r2, r3
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bec:	0011      	movs	r1, r2
 8008bee:	0018      	movs	r0, r3
 8008bf0:	f003 f832 	bl	800bc58 <USB_EPStartXfer>
 8008bf4:	e012      	b.n	8008c1c <PCD_EP_ISR_Handler+0x72c>
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	07ff8f8f 	.word	0x07ff8f8f
 8008bfc:	000080c0 	.word	0x000080c0
 8008c00:	07ff8f0f 	.word	0x07ff8f0f
 8008c04:	40009800 	.word	0x40009800
 8008c08:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008c0c:	2326      	movs	r3, #38	; 0x26
 8008c0e:	18fb      	adds	r3, r7, r3
 8008c10:	881a      	ldrh	r2, [r3, #0]
 8008c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	0018      	movs	r0, r3
 8008c18:	f000 f8fa 	bl	8008e10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	4013      	ands	r3, r2
 8008c28:	d000      	beq.n	8008c2c <PCD_EP_ISR_Handler+0x73c>
 8008c2a:	e467      	b.n	80084fc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	0018      	movs	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b00e      	add	sp, #56	; 0x38
 8008c34:	bdb0      	pop	{r4, r5, r7, pc}
 8008c36:	46c0      	nop			; (mov r8, r8)

08008c38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008c38:	b5b0      	push	{r4, r5, r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	1dbb      	adds	r3, r7, #6
 8008c44:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008c46:	1dbb      	adds	r3, r7, #6
 8008c48:	881a      	ldrh	r2, [r3, #0]
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	01db      	lsls	r3, r3, #7
 8008c4e:	4013      	ands	r3, r2
 8008c50:	d068      	beq.n	8008d24 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	251e      	movs	r5, #30
 8008c5e:	197c      	adds	r4, r7, r5
 8008c60:	0019      	movs	r1, r3
 8008c62:	0010      	movs	r0, r2
 8008c64:	f7fe feca 	bl	80079fc <PCD_GET_EP_DBUF0_CNT>
 8008c68:	0003      	movs	r3, r0
 8008c6a:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	699a      	ldr	r2, [r3, #24]
 8008c70:	197b      	adds	r3, r7, r5
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d307      	bcc.n	8008c88 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	197b      	adds	r3, r7, r5
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	1ad2      	subs	r2, r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	619a      	str	r2, [r3, #24]
 8008c86:	e002      	b.n	8008c8e <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d11a      	bne.n	8008ccc <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	001a      	movs	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	18d3      	adds	r3, r2, r3
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a56      	ldr	r2, [pc, #344]	; (8008e00 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	2280      	movs	r2, #128	; 0x80
 8008cb0:	0192      	lsls	r2, r2, #6
 8008cb2:	4053      	eors	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	001a      	movs	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	18d3      	adds	r3, r2, r3
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	494f      	ldr	r1, [pc, #316]	; (8008e04 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008ccc:	1dbb      	adds	r3, r7, #6
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	2240      	movs	r2, #64	; 0x40
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d015      	beq.n	8008d02 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	001a      	movs	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	18d3      	adds	r3, r2, r3
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a48      	ldr	r2, [pc, #288]	; (8008e08 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	001a      	movs	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	18d3      	adds	r3, r2, r3
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4943      	ldr	r1, [pc, #268]	; (8008e0c <HAL_PCD_EP_DB_Receive+0x1d4>)
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8008d02:	241e      	movs	r4, #30
 8008d04:	193b      	adds	r3, r7, r4
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d100      	bne.n	8008d0e <HAL_PCD_EP_DB_Receive+0xd6>
 8008d0c:	e071      	b.n	8008df2 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6959      	ldr	r1, [r3, #20]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	88da      	ldrh	r2, [r3, #6]
 8008d1a:	193b      	adds	r3, r7, r4
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	f004 fa73 	bl	800d208 <USB_ReadPMA>
 8008d22:	e066      	b.n	8008df2 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	251e      	movs	r5, #30
 8008d30:	197c      	adds	r4, r7, r5
 8008d32:	0019      	movs	r1, r3
 8008d34:	0010      	movs	r0, r2
 8008d36:	f7fe fe83 	bl	8007a40 <PCD_GET_EP_DBUF1_CNT>
 8008d3a:	0003      	movs	r3, r0
 8008d3c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	699a      	ldr	r2, [r3, #24]
 8008d42:	197b      	adds	r3, r7, r5
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d307      	bcc.n	8008d5a <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	197b      	adds	r3, r7, r5
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	619a      	str	r2, [r3, #24]
 8008d58:	e002      	b.n	8008d60 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d11a      	bne.n	8008d9e <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	001a      	movs	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	18d3      	adds	r3, r2, r3
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a21      	ldr	r2, [pc, #132]	; (8008e00 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	2280      	movs	r2, #128	; 0x80
 8008d82:	0192      	lsls	r2, r2, #6
 8008d84:	4053      	eors	r3, r2
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	18d3      	adds	r3, r2, r3
 8008d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d98:	491a      	ldr	r1, [pc, #104]	; (8008e04 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008d9e:	1dbb      	adds	r3, r7, #6
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	2240      	movs	r2, #64	; 0x40
 8008da4:	4013      	ands	r3, r2
 8008da6:	d115      	bne.n	8008dd4 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	001a      	movs	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	18d3      	adds	r3, r2, r3
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	623b      	str	r3, [r7, #32]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	001a      	movs	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	18d3      	adds	r3, r2, r3
 8008dcc:	6a3a      	ldr	r2, [r7, #32]
 8008dce:	490f      	ldr	r1, [pc, #60]	; (8008e0c <HAL_PCD_EP_DB_Receive+0x1d4>)
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8008dd4:	241e      	movs	r4, #30
 8008dd6:	193b      	adds	r3, r7, r4
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6959      	ldr	r1, [r3, #20]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	891a      	ldrh	r2, [r3, #8]
 8008dea:	193b      	adds	r3, r7, r4
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	f004 fa0b 	bl	800d208 <USB_ReadPMA>
    }
  }

  return count;
 8008df2:	231e      	movs	r3, #30
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	881b      	ldrh	r3, [r3, #0]
}
 8008df8:	0018      	movs	r0, r3
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	b00a      	add	sp, #40	; 0x28
 8008dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8008e00:	07ffbf8f 	.word	0x07ffbf8f
 8008e04:	00008080 	.word	0x00008080
 8008e08:	07ff8f8f 	.word	0x07ff8f8f
 8008e0c:	000080c0 	.word	0x000080c0

08008e10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008e10:	b5b0      	push	{r4, r5, r7, lr}
 8008e12:	b08e      	sub	sp, #56	; 0x38
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	1dbb      	adds	r3, r7, #6
 8008e1c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008e1e:	1dbb      	adds	r3, r7, #6
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	4013      	ands	r3, r2
 8008e26:	d100      	bne.n	8008e2a <HAL_PCD_EP_DB_Transmit+0x1a>
 8008e28:	e1fc      	b.n	8009224 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	2526      	movs	r5, #38	; 0x26
 8008e36:	197c      	adds	r4, r7, r5
 8008e38:	0019      	movs	r1, r3
 8008e3a:	0010      	movs	r0, r2
 8008e3c:	f7fe fdde 	bl	80079fc <PCD_GET_EP_DBUF0_CNT>
 8008e40:	0003      	movs	r3, r0
 8008e42:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	699a      	ldr	r2, [r3, #24]
 8008e48:	197b      	adds	r3, r7, r5
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d907      	bls.n	8008e60 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	699a      	ldr	r2, [r3, #24]
 8008e54:	197b      	adds	r3, r7, r5
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	1ad2      	subs	r2, r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	619a      	str	r2, [r3, #24]
 8008e5e:	e002      	b.n	8008e66 <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d000      	beq.n	8008e70 <HAL_PCD_EP_DB_Transmit+0x60>
 8008e6e:	e0d2      	b.n	8009016 <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d131      	bne.n	8008edc <HAL_PCD_EP_DB_Transmit+0xcc>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	4ae5      	ldr	r2, [pc, #916]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008e80:	4694      	mov	ip, r2
 8008e82:	4463      	add	r3, ip
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	49e1      	ldr	r1, [pc, #900]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008e8e:	468c      	mov	ip, r1
 8008e90:	4463      	add	r3, ip
 8008e92:	0412      	lsls	r2, r2, #16
 8008e94:	0c12      	lsrs	r2, r2, #16
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	4add      	ldr	r2, [pc, #884]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008ea0:	4694      	mov	ip, r2
 8008ea2:	4463      	add	r3, ip
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	49d9      	ldr	r1, [pc, #868]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008eae:	468c      	mov	ip, r1
 8008eb0:	4463      	add	r3, ip
 8008eb2:	49d9      	ldr	r1, [pc, #868]	; (8009218 <HAL_PCD_EP_DB_Transmit+0x408>)
 8008eb4:	400a      	ands	r2, r1
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4ad5      	ldr	r2, [pc, #852]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008ec0:	4694      	mov	ip, r2
 8008ec2:	4463      	add	r3, ip
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	49d1      	ldr	r1, [pc, #836]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008ece:	468c      	mov	ip, r1
 8008ed0:	4463      	add	r3, ip
 8008ed2:	2180      	movs	r1, #128	; 0x80
 8008ed4:	0609      	lsls	r1, r1, #24
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e020      	b.n	8008f1e <HAL_PCD_EP_DB_Transmit+0x10e>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d11c      	bne.n	8008f1e <HAL_PCD_EP_DB_Transmit+0x10e>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	4aca      	ldr	r2, [pc, #808]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008eec:	4694      	mov	ip, r2
 8008eee:	4463      	add	r3, ip
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	49c6      	ldr	r1, [pc, #792]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008efa:	468c      	mov	ip, r1
 8008efc:	4463      	add	r3, ip
 8008efe:	0412      	lsls	r2, r2, #16
 8008f00:	0c12      	lsrs	r2, r2, #16
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4ac2      	ldr	r2, [pc, #776]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f0c:	189a      	adds	r2, r3, r2
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	49bf      	ldr	r1, [pc, #764]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f16:	468c      	mov	ip, r1
 8008f18:	4463      	add	r3, ip
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d131      	bne.n	8008f8a <HAL_PCD_EP_DB_Transmit+0x17a>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	4ab9      	ldr	r2, [pc, #740]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f2e:	4694      	mov	ip, r2
 8008f30:	4463      	add	r3, ip
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	49b6      	ldr	r1, [pc, #728]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f3c:	468c      	mov	ip, r1
 8008f3e:	4463      	add	r3, ip
 8008f40:	0412      	lsls	r2, r2, #16
 8008f42:	0c12      	lsrs	r2, r2, #16
 8008f44:	605a      	str	r2, [r3, #4]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	4ab1      	ldr	r2, [pc, #708]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f4e:	4694      	mov	ip, r2
 8008f50:	4463      	add	r3, ip
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	49ae      	ldr	r1, [pc, #696]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f5c:	468c      	mov	ip, r1
 8008f5e:	4463      	add	r3, ip
 8008f60:	49ad      	ldr	r1, [pc, #692]	; (8009218 <HAL_PCD_EP_DB_Transmit+0x408>)
 8008f62:	400a      	ands	r2, r1
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4aa9      	ldr	r2, [pc, #676]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f6e:	4694      	mov	ip, r2
 8008f70:	4463      	add	r3, ip
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	49a6      	ldr	r1, [pc, #664]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f7c:	468c      	mov	ip, r1
 8008f7e:	4463      	add	r3, ip
 8008f80:	2180      	movs	r1, #128	; 0x80
 8008f82:	0609      	lsls	r1, r1, #24
 8008f84:	430a      	orrs	r2, r1
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	e020      	b.n	8008fcc <HAL_PCD_EP_DB_Transmit+0x1bc>
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d11c      	bne.n	8008fcc <HAL_PCD_EP_DB_Transmit+0x1bc>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	4a9e      	ldr	r2, [pc, #632]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008f9a:	4694      	mov	ip, r2
 8008f9c:	4463      	add	r3, ip
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	499b      	ldr	r1, [pc, #620]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008fa8:	468c      	mov	ip, r1
 8008faa:	4463      	add	r3, ip
 8008fac:	0412      	lsls	r2, r2, #16
 8008fae:	0c12      	lsrs	r2, r2, #16
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4a96      	ldr	r2, [pc, #600]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008fba:	189a      	adds	r2, r3, r2
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	4994      	ldr	r1, [pc, #592]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8008fc4:	468c      	mov	ip, r1
 8008fc6:	4463      	add	r3, ip
 8008fc8:	6852      	ldr	r2, [r2, #4]
 8008fca:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781a      	ldrb	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	0011      	movs	r1, r2
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f00e ffa3 	bl	8017f20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008fda:	1dbb      	adds	r3, r7, #6
 8008fdc:	881a      	ldrh	r2, [r3, #0]
 8008fde:	2380      	movs	r3, #128	; 0x80
 8008fe0:	01db      	lsls	r3, r3, #7
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	d100      	bne.n	8008fe8 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8008fe6:	e31a      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	001a      	movs	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	18d3      	adds	r3, r2, r3
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a88      	ldr	r2, [pc, #544]	; (800921c <HAL_PCD_EP_DB_Transmit+0x40c>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	001a      	movs	r2, r3
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	18d3      	adds	r3, r2, r3
 800900c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900e:	4984      	ldr	r1, [pc, #528]	; (8009220 <HAL_PCD_EP_DB_Transmit+0x410>)
 8009010:	430a      	orrs	r2, r1
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e303      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009016:	1dbb      	adds	r3, r7, #6
 8009018:	881a      	ldrh	r2, [r3, #0]
 800901a:	2380      	movs	r3, #128	; 0x80
 800901c:	01db      	lsls	r3, r3, #7
 800901e:	4013      	ands	r3, r2
 8009020:	d015      	beq.n	800904e <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	001a      	movs	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	18d3      	adds	r3, r2, r3
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a7a      	ldr	r2, [pc, #488]	; (800921c <HAL_PCD_EP_DB_Transmit+0x40c>)
 8009034:	4013      	ands	r3, r2
 8009036:	623b      	str	r3, [r7, #32]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	001a      	movs	r2, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	4975      	ldr	r1, [pc, #468]	; (8009220 <HAL_PCD_EP_DB_Transmit+0x410>)
 800904a:	430a      	orrs	r2, r1
 800904c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2224      	movs	r2, #36	; 0x24
 8009052:	5c9b      	ldrb	r3, [r3, r2]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d000      	beq.n	800905a <HAL_PCD_EP_DB_Transmit+0x24a>
 8009058:	e2e1      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	695a      	ldr	r2, [r3, #20]
 800905e:	2126      	movs	r1, #38	; 0x26
 8009060:	187b      	adds	r3, r7, r1
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	18d2      	adds	r2, r2, r3
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	69da      	ldr	r2, [r3, #28]
 800906e:	187b      	adds	r3, r7, r1
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	18d2      	adds	r2, r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6a1a      	ldr	r2, [r3, #32]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	429a      	cmp	r2, r3
 8009082:	d309      	bcc.n	8009098 <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6a1a      	ldr	r2, [r3, #32]
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	1ad2      	subs	r2, r2, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	621a      	str	r2, [r3, #32]
 8009096:	e016      	b.n	80090c6 <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d108      	bne.n	80090b2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 80090a0:	2326      	movs	r3, #38	; 0x26
 80090a2:	18fb      	adds	r3, r7, r3
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2224      	movs	r2, #36	; 0x24
 80090ac:	2100      	movs	r1, #0
 80090ae:	5499      	strb	r1, [r3, r2]
 80090b0:	e009      	b.n	80090c6 <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2224      	movs	r2, #36	; 0x24
 80090b6:	2100      	movs	r1, #0
 80090b8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d172      	bne.n	80091b4 <HAL_PCD_EP_DB_Transmit+0x3a4>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4a4f      	ldr	r2, [pc, #316]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80090d6:	4694      	mov	ip, r2
 80090d8:	4463      	add	r3, ip
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	494c      	ldr	r1, [pc, #304]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80090e4:	468c      	mov	ip, r1
 80090e6:	4463      	add	r3, ip
 80090e8:	0412      	lsls	r2, r2, #16
 80090ea:	0c12      	lsrs	r2, r2, #16
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	2b3e      	cmp	r3, #62	; 0x3e
 80090f2:	d91e      	bls.n	8009132 <HAL_PCD_EP_DB_Transmit+0x322>
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	221f      	movs	r2, #31
 80090fe:	4013      	ands	r3, r2
 8009100:	d102      	bne.n	8009108 <HAL_PCD_EP_DB_Transmit+0x2f8>
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	3b01      	subs	r3, #1
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	4a41      	ldr	r2, [pc, #260]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8009110:	4694      	mov	ip, r2
 8009112:	4463      	add	r3, ip
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	069b      	lsls	r3, r3, #26
 800911a:	431a      	orrs	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	493c      	ldr	r1, [pc, #240]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8009124:	468c      	mov	ip, r1
 8009126:	4463      	add	r3, ip
 8009128:	2180      	movs	r1, #128	; 0x80
 800912a:	0609      	lsls	r1, r1, #24
 800912c:	430a      	orrs	r2, r1
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	e065      	b.n	80091fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d121      	bne.n	800917c <HAL_PCD_EP_DB_Transmit+0x36c>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	4a35      	ldr	r2, [pc, #212]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8009140:	4694      	mov	ip, r2
 8009142:	4463      	add	r3, ip
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4931      	ldr	r1, [pc, #196]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 800914e:	468c      	mov	ip, r1
 8009150:	4463      	add	r3, ip
 8009152:	4931      	ldr	r1, [pc, #196]	; (8009218 <HAL_PCD_EP_DB_Transmit+0x408>)
 8009154:	400a      	ands	r2, r1
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	00db      	lsls	r3, r3, #3
 800915e:	4a2d      	ldr	r2, [pc, #180]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8009160:	4694      	mov	ip, r2
 8009162:	4463      	add	r3, ip
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4929      	ldr	r1, [pc, #164]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 800916e:	468c      	mov	ip, r1
 8009170:	4463      	add	r3, ip
 8009172:	2180      	movs	r1, #128	; 0x80
 8009174:	0609      	lsls	r1, r1, #24
 8009176:	430a      	orrs	r2, r1
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e040      	b.n	80091fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	2201      	movs	r2, #1
 8009186:	4013      	ands	r3, r2
 8009188:	d002      	beq.n	8009190 <HAL_PCD_EP_DB_Transmit+0x380>
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	3301      	adds	r3, #1
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4a1f      	ldr	r2, [pc, #124]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 8009198:	4694      	mov	ip, r2
 800919a:	4463      	add	r3, ip
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	069a      	lsls	r2, r3, #26
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	481a      	ldr	r0, [pc, #104]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80091aa:	4684      	mov	ip, r0
 80091ac:	4463      	add	r3, ip
 80091ae:	430a      	orrs	r2, r1
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	e024      	b.n	80091fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d120      	bne.n	80091fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	00db      	lsls	r3, r3, #3
 80091c2:	4a14      	ldr	r2, [pc, #80]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80091c4:	4694      	mov	ip, r2
 80091c6:	4463      	add	r3, ip
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	4910      	ldr	r1, [pc, #64]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80091d2:	468c      	mov	ip, r1
 80091d4:	4463      	add	r3, ip
 80091d6:	0412      	lsls	r2, r2, #16
 80091d8:	0c12      	lsrs	r2, r2, #16
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4a0c      	ldr	r2, [pc, #48]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80091e4:	4694      	mov	ip, r2
 80091e6:	4463      	add	r3, ip
 80091e8:	6819      	ldr	r1, [r3, #0]
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	041a      	lsls	r2, r3, #16
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4807      	ldr	r0, [pc, #28]	; (8009214 <HAL_PCD_EP_DB_Transmit+0x404>)
 80091f6:	4684      	mov	ip, r0
 80091f8:	4463      	add	r3, ip
 80091fa:	430a      	orrs	r2, r1
 80091fc:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	88da      	ldrh	r2, [r3, #6]
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	b29b      	uxth	r3, r3
 800920e:	f003 ff85 	bl	800d11c <USB_WritePMA>
 8009212:	e204      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
 8009214:	40009800 	.word	0x40009800
 8009218:	83ffffff 	.word	0x83ffffff
 800921c:	07ff8f8f 	.word	0x07ff8f8f
 8009220:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	2526      	movs	r5, #38	; 0x26
 8009230:	197c      	adds	r4, r7, r5
 8009232:	0019      	movs	r1, r3
 8009234:	0010      	movs	r0, r2
 8009236:	f7fe fc03 	bl	8007a40 <PCD_GET_EP_DBUF1_CNT>
 800923a:	0003      	movs	r3, r0
 800923c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	699a      	ldr	r2, [r3, #24]
 8009242:	197b      	adds	r3, r7, r5
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	429a      	cmp	r2, r3
 8009248:	d307      	bcc.n	800925a <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	197b      	adds	r3, r7, r5
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	619a      	str	r2, [r3, #24]
 8009258:	e002      	b.n	8009260 <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2200      	movs	r2, #0
 800925e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d000      	beq.n	800926a <HAL_PCD_EP_DB_Transmit+0x45a>
 8009268:	e0d2      	b.n	8009410 <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d131      	bne.n	80092d6 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	4acd      	ldr	r2, [pc, #820]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800927a:	4694      	mov	ip, r2
 800927c:	4463      	add	r3, ip
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	49ca      	ldr	r1, [pc, #808]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009288:	468c      	mov	ip, r1
 800928a:	4463      	add	r3, ip
 800928c:	0412      	lsls	r2, r2, #16
 800928e:	0c12      	lsrs	r2, r2, #16
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	4ac5      	ldr	r2, [pc, #788]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800929a:	4694      	mov	ip, r2
 800929c:	4463      	add	r3, ip
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	49c2      	ldr	r1, [pc, #776]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80092a8:	468c      	mov	ip, r1
 80092aa:	4463      	add	r3, ip
 80092ac:	49c1      	ldr	r1, [pc, #772]	; (80095b4 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 80092ae:	400a      	ands	r2, r1
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	4abd      	ldr	r2, [pc, #756]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80092ba:	4694      	mov	ip, r2
 80092bc:	4463      	add	r3, ip
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	49ba      	ldr	r1, [pc, #744]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80092c8:	468c      	mov	ip, r1
 80092ca:	4463      	add	r3, ip
 80092cc:	2180      	movs	r1, #128	; 0x80
 80092ce:	0609      	lsls	r1, r1, #24
 80092d0:	430a      	orrs	r2, r1
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e020      	b.n	8009318 <HAL_PCD_EP_DB_Transmit+0x508>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d11c      	bne.n	8009318 <HAL_PCD_EP_DB_Transmit+0x508>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4ab2      	ldr	r2, [pc, #712]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80092e6:	4694      	mov	ip, r2
 80092e8:	4463      	add	r3, ip
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	49af      	ldr	r1, [pc, #700]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80092f4:	468c      	mov	ip, r1
 80092f6:	4463      	add	r3, ip
 80092f8:	0412      	lsls	r2, r2, #16
 80092fa:	0c12      	lsrs	r2, r2, #16
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4aaa      	ldr	r2, [pc, #680]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009306:	189a      	adds	r2, r3, r2
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	49a8      	ldr	r1, [pc, #672]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009310:	468c      	mov	ip, r1
 8009312:	4463      	add	r3, ip
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d131      	bne.n	8009384 <HAL_PCD_EP_DB_Transmit+0x574>
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	4aa2      	ldr	r2, [pc, #648]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009328:	4694      	mov	ip, r2
 800932a:	4463      	add	r3, ip
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	499e      	ldr	r1, [pc, #632]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009336:	468c      	mov	ip, r1
 8009338:	4463      	add	r3, ip
 800933a:	0412      	lsls	r2, r2, #16
 800933c:	0c12      	lsrs	r2, r2, #16
 800933e:	605a      	str	r2, [r3, #4]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	4a9a      	ldr	r2, [pc, #616]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009348:	4694      	mov	ip, r2
 800934a:	4463      	add	r3, ip
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4996      	ldr	r1, [pc, #600]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009356:	468c      	mov	ip, r1
 8009358:	4463      	add	r3, ip
 800935a:	4996      	ldr	r1, [pc, #600]	; (80095b4 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 800935c:	400a      	ands	r2, r1
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	4a92      	ldr	r2, [pc, #584]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009368:	4694      	mov	ip, r2
 800936a:	4463      	add	r3, ip
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	498e      	ldr	r1, [pc, #568]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009376:	468c      	mov	ip, r1
 8009378:	4463      	add	r3, ip
 800937a:	2180      	movs	r1, #128	; 0x80
 800937c:	0609      	lsls	r1, r1, #24
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	e020      	b.n	80093c6 <HAL_PCD_EP_DB_Transmit+0x5b6>
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d11c      	bne.n	80093c6 <HAL_PCD_EP_DB_Transmit+0x5b6>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	4a87      	ldr	r2, [pc, #540]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009394:	4694      	mov	ip, r2
 8009396:	4463      	add	r3, ip
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4983      	ldr	r1, [pc, #524]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80093a2:	468c      	mov	ip, r1
 80093a4:	4463      	add	r3, ip
 80093a6:	0412      	lsls	r2, r2, #16
 80093a8:	0c12      	lsrs	r2, r2, #16
 80093aa:	605a      	str	r2, [r3, #4]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	4a7f      	ldr	r2, [pc, #508]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80093b4:	189a      	adds	r2, r3, r2
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	497c      	ldr	r1, [pc, #496]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80093be:	468c      	mov	ip, r1
 80093c0:	4463      	add	r3, ip
 80093c2:	6852      	ldr	r2, [r2, #4]
 80093c4:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	0011      	movs	r1, r2
 80093ce:	0018      	movs	r0, r3
 80093d0:	f00e fda6 	bl	8017f20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80093d4:	1dbb      	adds	r3, r7, #6
 80093d6:	881a      	ldrh	r2, [r3, #0]
 80093d8:	2380      	movs	r3, #128	; 0x80
 80093da:	01db      	lsls	r3, r3, #7
 80093dc:	4013      	ands	r3, r2
 80093de:	d000      	beq.n	80093e2 <HAL_PCD_EP_DB_Transmit+0x5d2>
 80093e0:	e11d      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	001a      	movs	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	18d3      	adds	r3, r2, r3
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a71      	ldr	r2, [pc, #452]	; (80095b8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	61fb      	str	r3, [r7, #28]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	001a      	movs	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	18d3      	adds	r3, r2, r3
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	496c      	ldr	r1, [pc, #432]	; (80095bc <HAL_PCD_EP_DB_Transmit+0x7ac>)
 800940a:	430a      	orrs	r2, r1
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e106      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009410:	1dbb      	adds	r3, r7, #6
 8009412:	881a      	ldrh	r2, [r3, #0]
 8009414:	2380      	movs	r3, #128	; 0x80
 8009416:	01db      	lsls	r3, r3, #7
 8009418:	4013      	ands	r3, r2
 800941a:	d115      	bne.n	8009448 <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	001a      	movs	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	18d3      	adds	r3, r2, r3
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a62      	ldr	r2, [pc, #392]	; (80095b8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800942e:	4013      	ands	r3, r2
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	001a      	movs	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	18d3      	adds	r3, r2, r3
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	495e      	ldr	r1, [pc, #376]	; (80095bc <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8009444:	430a      	orrs	r2, r1
 8009446:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2224      	movs	r2, #36	; 0x24
 800944c:	5c9b      	ldrb	r3, [r3, r2]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d000      	beq.n	8009454 <HAL_PCD_EP_DB_Transmit+0x644>
 8009452:	e0e4      	b.n	800961e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	695a      	ldr	r2, [r3, #20]
 8009458:	2126      	movs	r1, #38	; 0x26
 800945a:	187b      	adds	r3, r7, r1
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	18d2      	adds	r2, r2, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	187b      	adds	r3, r7, r1
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	18d2      	adds	r2, r2, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6a1a      	ldr	r2, [r3, #32]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	429a      	cmp	r2, r3
 800947c:	d309      	bcc.n	8009492 <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6a1a      	ldr	r2, [r3, #32]
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	1ad2      	subs	r2, r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	621a      	str	r2, [r3, #32]
 8009490:	e016      	b.n	80094c0 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d108      	bne.n	80094ac <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 800949a:	2326      	movs	r3, #38	; 0x26
 800949c:	18fb      	adds	r3, r7, r3
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2224      	movs	r2, #36	; 0x24
 80094a6:	2100      	movs	r1, #0
 80094a8:	5499      	strb	r1, [r3, r2]
 80094aa:	e009      	b.n	80094c0 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2200      	movs	r2, #0
 80094b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2224      	movs	r2, #36	; 0x24
 80094bc:	2100      	movs	r1, #0
 80094be:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d000      	beq.n	80094ca <HAL_PCD_EP_DB_Transmit+0x6ba>
 80094c8:	e07a      	b.n	80095c0 <HAL_PCD_EP_DB_Transmit+0x7b0>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4a37      	ldr	r2, [pc, #220]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80094d2:	4694      	mov	ip, r2
 80094d4:	4463      	add	r3, ip
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	4934      	ldr	r1, [pc, #208]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80094e0:	468c      	mov	ip, r1
 80094e2:	4463      	add	r3, ip
 80094e4:	0412      	lsls	r2, r2, #16
 80094e6:	0c12      	lsrs	r2, r2, #16
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	2b3e      	cmp	r3, #62	; 0x3e
 80094ee:	d91e      	bls.n	800952e <HAL_PCD_EP_DB_Transmit+0x71e>
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	61bb      	str	r3, [r7, #24]
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	221f      	movs	r2, #31
 80094fa:	4013      	ands	r3, r2
 80094fc:	d102      	bne.n	8009504 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	3b01      	subs	r3, #1
 8009502:	61bb      	str	r3, [r7, #24]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	4a29      	ldr	r2, [pc, #164]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800950c:	4694      	mov	ip, r2
 800950e:	4463      	add	r3, ip
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	069b      	lsls	r3, r3, #26
 8009516:	431a      	orrs	r2, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	4924      	ldr	r1, [pc, #144]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009520:	468c      	mov	ip, r1
 8009522:	4463      	add	r3, ip
 8009524:	2180      	movs	r1, #128	; 0x80
 8009526:	0609      	lsls	r1, r1, #24
 8009528:	430a      	orrs	r2, r1
 800952a:	605a      	str	r2, [r3, #4]
 800952c:	e06d      	b.n	800960a <HAL_PCD_EP_DB_Transmit+0x7fa>
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	2b00      	cmp	r3, #0
 8009532:	d121      	bne.n	8009578 <HAL_PCD_EP_DB_Transmit+0x768>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4a1d      	ldr	r2, [pc, #116]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800953c:	4694      	mov	ip, r2
 800953e:	4463      	add	r3, ip
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4919      	ldr	r1, [pc, #100]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800954a:	468c      	mov	ip, r1
 800954c:	4463      	add	r3, ip
 800954e:	4919      	ldr	r1, [pc, #100]	; (80095b4 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8009550:	400a      	ands	r2, r1
 8009552:	605a      	str	r2, [r3, #4]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4a15      	ldr	r2, [pc, #84]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800955c:	4694      	mov	ip, r2
 800955e:	4463      	add	r3, ip
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4911      	ldr	r1, [pc, #68]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800956a:	468c      	mov	ip, r1
 800956c:	4463      	add	r3, ip
 800956e:	2180      	movs	r1, #128	; 0x80
 8009570:	0609      	lsls	r1, r1, #24
 8009572:	430a      	orrs	r2, r1
 8009574:	605a      	str	r2, [r3, #4]
 8009576:	e048      	b.n	800960a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	085b      	lsrs	r3, r3, #1
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	2201      	movs	r2, #1
 8009582:	4013      	ands	r3, r2
 8009584:	d002      	beq.n	800958c <HAL_PCD_EP_DB_Transmit+0x77c>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	3301      	adds	r3, #1
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	4a07      	ldr	r2, [pc, #28]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8009594:	4694      	mov	ip, r2
 8009596:	4463      	add	r3, ip
 8009598:	6859      	ldr	r1, [r3, #4]
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	069a      	lsls	r2, r3, #26
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4802      	ldr	r0, [pc, #8]	; (80095b0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80095a6:	4684      	mov	ip, r0
 80095a8:	4463      	add	r3, ip
 80095aa:	430a      	orrs	r2, r1
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	e02c      	b.n	800960a <HAL_PCD_EP_DB_Transmit+0x7fa>
 80095b0:	40009800 	.word	0x40009800
 80095b4:	83ffffff 	.word	0x83ffffff
 80095b8:	07ff8f8f 	.word	0x07ff8f8f
 80095bc:	0000c080 	.word	0x0000c080
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d120      	bne.n	800960a <HAL_PCD_EP_DB_Transmit+0x7fa>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	4a25      	ldr	r2, [pc, #148]	; (8009664 <HAL_PCD_EP_DB_Transmit+0x854>)
 80095d0:	4694      	mov	ip, r2
 80095d2:	4463      	add	r3, ip
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4921      	ldr	r1, [pc, #132]	; (8009664 <HAL_PCD_EP_DB_Transmit+0x854>)
 80095de:	468c      	mov	ip, r1
 80095e0:	4463      	add	r3, ip
 80095e2:	0412      	lsls	r2, r2, #16
 80095e4:	0c12      	lsrs	r2, r2, #16
 80095e6:	605a      	str	r2, [r3, #4]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <HAL_PCD_EP_DB_Transmit+0x854>)
 80095f0:	4694      	mov	ip, r2
 80095f2:	4463      	add	r3, ip
 80095f4:	6859      	ldr	r1, [r3, #4]
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	041a      	lsls	r2, r3, #16
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	4818      	ldr	r0, [pc, #96]	; (8009664 <HAL_PCD_EP_DB_Transmit+0x854>)
 8009602:	4684      	mov	ip, r0
 8009604:	4463      	add	r3, ip
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6959      	ldr	r1, [r3, #20]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	891a      	ldrh	r2, [r3, #8]
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	b29b      	uxth	r3, r3
 800961a:	f003 fd7f 	bl	800d11c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	001a      	movs	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	18d3      	adds	r3, r2, r3
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a0e      	ldr	r2, [pc, #56]	; (8009668 <HAL_PCD_EP_DB_Transmit+0x858>)
 8009630:	4013      	ands	r3, r2
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
 8009634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009636:	2210      	movs	r2, #16
 8009638:	4053      	eors	r3, r2
 800963a:	637b      	str	r3, [r7, #52]	; 0x34
 800963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963e:	2220      	movs	r2, #32
 8009640:	4053      	eors	r3, r2
 8009642:	637b      	str	r3, [r7, #52]	; 0x34
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	001a      	movs	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	18d3      	adds	r3, r2, r3
 8009652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009654:	4905      	ldr	r1, [pc, #20]	; (800966c <HAL_PCD_EP_DB_Transmit+0x85c>)
 8009656:	430a      	orrs	r2, r1
 8009658:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	0018      	movs	r0, r3
 800965e:	46bd      	mov	sp, r7
 8009660:	b00e      	add	sp, #56	; 0x38
 8009662:	bdb0      	pop	{r4, r5, r7, pc}
 8009664:	40009800 	.word	0x40009800
 8009668:	07ff8fbf 	.word	0x07ff8fbf
 800966c:	00008080 	.word	0x00008080

08009670 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	0008      	movs	r0, r1
 800967a:	0011      	movs	r1, r2
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	240a      	movs	r4, #10
 8009680:	193b      	adds	r3, r7, r4
 8009682:	1c02      	adds	r2, r0, #0
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	2308      	movs	r3, #8
 8009688:	18fb      	adds	r3, r7, r3
 800968a:	1c0a      	adds	r2, r1, #0
 800968c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800968e:	0021      	movs	r1, r4
 8009690:	187b      	adds	r3, r7, r1
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	2280      	movs	r2, #128	; 0x80
 8009696:	4013      	ands	r3, r2
 8009698:	b29b      	uxth	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00d      	beq.n	80096ba <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800969e:	187b      	adds	r3, r7, r1
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	2207      	movs	r2, #7
 80096a4:	401a      	ands	r2, r3
 80096a6:	0013      	movs	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	189b      	adds	r3, r3, r2
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	3338      	adds	r3, #56	; 0x38
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	18d3      	adds	r3, r2, r3
 80096b4:	3304      	adds	r3, #4
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	e00c      	b.n	80096d4 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096ba:	230a      	movs	r3, #10
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	881a      	ldrh	r2, [r3, #0]
 80096c0:	0013      	movs	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	189b      	adds	r3, r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	3379      	adds	r3, #121	; 0x79
 80096ca:	33ff      	adds	r3, #255	; 0xff
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	18d3      	adds	r3, r2, r3
 80096d0:	3304      	adds	r3, #4
 80096d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80096d4:	2308      	movs	r3, #8
 80096d6:	18fb      	adds	r3, r7, r3
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d107      	bne.n	80096ee <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2200      	movs	r2, #0
 80096e2:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	809a      	strh	r2, [r3, #4]
 80096ec:	e00b      	b.n	8009706 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2201      	movs	r2, #1
 80096f2:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	0c1b      	lsrs	r3, r3, #16
 8009700:	b29a      	uxth	r2, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	0018      	movs	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	b007      	add	sp, #28
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	23bf      	movs	r3, #191	; 0xbf
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	2101      	movs	r1, #1
 8009726:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	23bd      	movs	r3, #189	; 0xbd
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	2100      	movs	r1, #0
 8009730:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	2201      	movs	r2, #1
 8009738:	431a      	orrs	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009742:	2202      	movs	r2, #2
 8009744:	431a      	orrs	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	0018      	movs	r0, r3
 800974e:	46bd      	mov	sp, r7
 8009750:	b004      	add	sp, #16
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	000a      	movs	r2, r1
 800975e:	1cfb      	adds	r3, r7, #3
 8009760:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	46bd      	mov	sp, r7
 8009766:	b002      	add	sp, #8
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009770:	4b04      	ldr	r3, [pc, #16]	; (8009784 <HAL_PWREx_EnableVddUSB+0x18>)
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	4b03      	ldr	r3, [pc, #12]	; (8009784 <HAL_PWREx_EnableVddUSB+0x18>)
 8009776:	2180      	movs	r1, #128	; 0x80
 8009778:	00c9      	lsls	r1, r1, #3
 800977a:	430a      	orrs	r2, r1
 800977c:	605a      	str	r2, [r3, #4]
}
 800977e:	46c0      	nop			; (mov r8, r8)
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40007000 	.word	0x40007000

08009788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009790:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a19      	ldr	r2, [pc, #100]	; (80097fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009796:	4013      	ands	r3, r2
 8009798:	0019      	movs	r1, r3
 800979a:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	430a      	orrs	r2, r1
 80097a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d11f      	bne.n	80097ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80097ac:	4b14      	ldr	r3, [pc, #80]	; (8009800 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	0013      	movs	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	189b      	adds	r3, r3, r2
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	4912      	ldr	r1, [pc, #72]	; (8009804 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80097ba:	0018      	movs	r0, r3
 80097bc:	f7fc fefc 	bl	80065b8 <__udivsi3>
 80097c0:	0003      	movs	r3, r0
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097c6:	e008      	b.n	80097da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e001      	b.n	80097da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e009      	b.n	80097ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80097dc:	695a      	ldr	r2, [r3, #20]
 80097de:	2380      	movs	r3, #128	; 0x80
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	401a      	ands	r2, r3
 80097e4:	2380      	movs	r3, #128	; 0x80
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d0ed      	beq.n	80097c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	0018      	movs	r0, r3
 80097f0:	46bd      	mov	sp, r7
 80097f2:	b004      	add	sp, #16
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	40007000 	.word	0x40007000
 80097fc:	fffff9ff 	.word	0xfffff9ff
 8009800:	20000004 	.word	0x20000004
 8009804:	000f4240 	.word	0x000f4240

08009808 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800980c:	4b03      	ldr	r3, [pc, #12]	; (800981c <LL_RCC_GetAPB1Prescaler+0x14>)
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	23e0      	movs	r3, #224	; 0xe0
 8009812:	01db      	lsls	r3, r3, #7
 8009814:	4013      	ands	r3, r2
}
 8009816:	0018      	movs	r0, r3
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40021000 	.word	0x40021000

08009820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f000 fb50 	bl	8009ed4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2201      	movs	r2, #1
 800983a:	4013      	ands	r3, r2
 800983c:	d100      	bne.n	8009840 <HAL_RCC_OscConfig+0x20>
 800983e:	e07c      	b.n	800993a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009840:	4bc3      	ldr	r3, [pc, #780]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2238      	movs	r2, #56	; 0x38
 8009846:	4013      	ands	r3, r2
 8009848:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800984a:	4bc1      	ldr	r3, [pc, #772]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	2203      	movs	r2, #3
 8009850:	4013      	ands	r3, r2
 8009852:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b10      	cmp	r3, #16
 8009858:	d102      	bne.n	8009860 <HAL_RCC_OscConfig+0x40>
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b03      	cmp	r3, #3
 800985e:	d002      	beq.n	8009866 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b08      	cmp	r3, #8
 8009864:	d10b      	bne.n	800987e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009866:	4bba      	ldr	r3, [pc, #744]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	2380      	movs	r3, #128	; 0x80
 800986c:	029b      	lsls	r3, r3, #10
 800986e:	4013      	ands	r3, r2
 8009870:	d062      	beq.n	8009938 <HAL_RCC_OscConfig+0x118>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d15e      	bne.n	8009938 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e32a      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	2380      	movs	r3, #128	; 0x80
 8009884:	025b      	lsls	r3, r3, #9
 8009886:	429a      	cmp	r2, r3
 8009888:	d107      	bne.n	800989a <HAL_RCC_OscConfig+0x7a>
 800988a:	4bb1      	ldr	r3, [pc, #708]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4bb0      	ldr	r3, [pc, #704]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009890:	2180      	movs	r1, #128	; 0x80
 8009892:	0249      	lsls	r1, r1, #9
 8009894:	430a      	orrs	r2, r1
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e020      	b.n	80098dc <HAL_RCC_OscConfig+0xbc>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	23a0      	movs	r3, #160	; 0xa0
 80098a0:	02db      	lsls	r3, r3, #11
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d10e      	bne.n	80098c4 <HAL_RCC_OscConfig+0xa4>
 80098a6:	4baa      	ldr	r3, [pc, #680]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4ba9      	ldr	r3, [pc, #676]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098ac:	2180      	movs	r1, #128	; 0x80
 80098ae:	02c9      	lsls	r1, r1, #11
 80098b0:	430a      	orrs	r2, r1
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	4ba6      	ldr	r3, [pc, #664]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4ba5      	ldr	r3, [pc, #660]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098ba:	2180      	movs	r1, #128	; 0x80
 80098bc:	0249      	lsls	r1, r1, #9
 80098be:	430a      	orrs	r2, r1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e00b      	b.n	80098dc <HAL_RCC_OscConfig+0xbc>
 80098c4:	4ba2      	ldr	r3, [pc, #648]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	4ba1      	ldr	r3, [pc, #644]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098ca:	49a2      	ldr	r1, [pc, #648]	; (8009b54 <HAL_RCC_OscConfig+0x334>)
 80098cc:	400a      	ands	r2, r1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	4b9f      	ldr	r3, [pc, #636]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	4b9e      	ldr	r3, [pc, #632]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80098d6:	49a0      	ldr	r1, [pc, #640]	; (8009b58 <HAL_RCC_OscConfig+0x338>)
 80098d8:	400a      	ands	r2, r1
 80098da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d014      	beq.n	800990e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e4:	f7fd fde8 	bl	80074b8 <HAL_GetTick>
 80098e8:	0003      	movs	r3, r0
 80098ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098ec:	e008      	b.n	8009900 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098ee:	f7fd fde3 	bl	80074b8 <HAL_GetTick>
 80098f2:	0002      	movs	r2, r0
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	2b64      	cmp	r3, #100	; 0x64
 80098fa:	d901      	bls.n	8009900 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e2e9      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009900:	4b93      	ldr	r3, [pc, #588]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	2380      	movs	r3, #128	; 0x80
 8009906:	029b      	lsls	r3, r3, #10
 8009908:	4013      	ands	r3, r2
 800990a:	d0f0      	beq.n	80098ee <HAL_RCC_OscConfig+0xce>
 800990c:	e015      	b.n	800993a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990e:	f7fd fdd3 	bl	80074b8 <HAL_GetTick>
 8009912:	0003      	movs	r3, r0
 8009914:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009918:	f7fd fdce 	bl	80074b8 <HAL_GetTick>
 800991c:	0002      	movs	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	; 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e2d4      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800992a:	4b89      	ldr	r3, [pc, #548]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	2380      	movs	r3, #128	; 0x80
 8009930:	029b      	lsls	r3, r3, #10
 8009932:	4013      	ands	r3, r2
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0xf8>
 8009936:	e000      	b.n	800993a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009938:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2202      	movs	r2, #2
 8009940:	4013      	ands	r3, r2
 8009942:	d100      	bne.n	8009946 <HAL_RCC_OscConfig+0x126>
 8009944:	e099      	b.n	8009a7a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009946:	4b82      	ldr	r3, [pc, #520]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	2238      	movs	r2, #56	; 0x38
 800994c:	4013      	ands	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009950:	4b7f      	ldr	r3, [pc, #508]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	2203      	movs	r2, #3
 8009956:	4013      	ands	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	2b10      	cmp	r3, #16
 800995e:	d102      	bne.n	8009966 <HAL_RCC_OscConfig+0x146>
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d002      	beq.n	800996c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d135      	bne.n	80099d8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800996c:	4b78      	ldr	r3, [pc, #480]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	2380      	movs	r3, #128	; 0x80
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	4013      	ands	r3, r2
 8009976:	d005      	beq.n	8009984 <HAL_RCC_OscConfig+0x164>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e2a7      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009984:	4b72      	ldr	r3, [pc, #456]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4a74      	ldr	r2, [pc, #464]	; (8009b5c <HAL_RCC_OscConfig+0x33c>)
 800998a:	4013      	ands	r3, r2
 800998c:	0019      	movs	r1, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	021a      	lsls	r2, r3, #8
 8009994:	4b6e      	ldr	r3, [pc, #440]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009996:	430a      	orrs	r2, r1
 8009998:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d112      	bne.n	80099c6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80099a0:	4b6b      	ldr	r3, [pc, #428]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a6e      	ldr	r2, [pc, #440]	; (8009b60 <HAL_RCC_OscConfig+0x340>)
 80099a6:	4013      	ands	r3, r2
 80099a8:	0019      	movs	r1, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691a      	ldr	r2, [r3, #16]
 80099ae:	4b68      	ldr	r3, [pc, #416]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099b0:	430a      	orrs	r2, r1
 80099b2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80099b4:	4b66      	ldr	r3, [pc, #408]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	0adb      	lsrs	r3, r3, #11
 80099ba:	2207      	movs	r2, #7
 80099bc:	4013      	ands	r3, r2
 80099be:	4a69      	ldr	r2, [pc, #420]	; (8009b64 <HAL_RCC_OscConfig+0x344>)
 80099c0:	40da      	lsrs	r2, r3
 80099c2:	4b69      	ldr	r3, [pc, #420]	; (8009b68 <HAL_RCC_OscConfig+0x348>)
 80099c4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80099c6:	4b69      	ldr	r3, [pc, #420]	; (8009b6c <HAL_RCC_OscConfig+0x34c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	0018      	movs	r0, r3
 80099cc:	f7fd f914 	bl	8006bf8 <HAL_InitTick>
 80099d0:	1e03      	subs	r3, r0, #0
 80099d2:	d051      	beq.n	8009a78 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e27d      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d030      	beq.n	8009a42 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80099e0:	4b5b      	ldr	r3, [pc, #364]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a5e      	ldr	r2, [pc, #376]	; (8009b60 <HAL_RCC_OscConfig+0x340>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	0019      	movs	r1, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691a      	ldr	r2, [r3, #16]
 80099ee:	4b58      	ldr	r3, [pc, #352]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099f0:	430a      	orrs	r2, r1
 80099f2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80099f4:	4b56      	ldr	r3, [pc, #344]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	4b55      	ldr	r3, [pc, #340]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 80099fa:	2180      	movs	r1, #128	; 0x80
 80099fc:	0049      	lsls	r1, r1, #1
 80099fe:	430a      	orrs	r2, r1
 8009a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a02:	f7fd fd59 	bl	80074b8 <HAL_GetTick>
 8009a06:	0003      	movs	r3, r0
 8009a08:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a0a:	e008      	b.n	8009a1e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a0c:	f7fd fd54 	bl	80074b8 <HAL_GetTick>
 8009a10:	0002      	movs	r2, r0
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d901      	bls.n	8009a1e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e25a      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a1e:	4b4c      	ldr	r3, [pc, #304]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	2380      	movs	r3, #128	; 0x80
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4013      	ands	r3, r2
 8009a28:	d0f0      	beq.n	8009a0c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a2a:	4b49      	ldr	r3, [pc, #292]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	4a4b      	ldr	r2, [pc, #300]	; (8009b5c <HAL_RCC_OscConfig+0x33c>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	0019      	movs	r1, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	021a      	lsls	r2, r3, #8
 8009a3a:	4b45      	ldr	r3, [pc, #276]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
 8009a40:	e01b      	b.n	8009a7a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009a42:	4b43      	ldr	r3, [pc, #268]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4b42      	ldr	r3, [pc, #264]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a48:	4949      	ldr	r1, [pc, #292]	; (8009b70 <HAL_RCC_OscConfig+0x350>)
 8009a4a:	400a      	ands	r2, r1
 8009a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4e:	f7fd fd33 	bl	80074b8 <HAL_GetTick>
 8009a52:	0003      	movs	r3, r0
 8009a54:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a58:	f7fd fd2e 	bl	80074b8 <HAL_GetTick>
 8009a5c:	0002      	movs	r2, r0
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e234      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a6a:	4b39      	ldr	r3, [pc, #228]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	2380      	movs	r3, #128	; 0x80
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	4013      	ands	r3, r2
 8009a74:	d1f0      	bne.n	8009a58 <HAL_RCC_OscConfig+0x238>
 8009a76:	e000      	b.n	8009a7a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2208      	movs	r2, #8
 8009a80:	4013      	ands	r3, r2
 8009a82:	d047      	beq.n	8009b14 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009a84:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	2238      	movs	r2, #56	; 0x38
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b18      	cmp	r3, #24
 8009a8e:	d10a      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009a90:	4b2f      	ldr	r3, [pc, #188]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a94:	2202      	movs	r2, #2
 8009a96:	4013      	ands	r3, r2
 8009a98:	d03c      	beq.n	8009b14 <HAL_RCC_OscConfig+0x2f4>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d138      	bne.n	8009b14 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e216      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d019      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009aae:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ab2:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aba:	f7fd fcfd 	bl	80074b8 <HAL_GetTick>
 8009abe:	0003      	movs	r3, r0
 8009ac0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ac4:	f7fd fcf8 	bl	80074b8 <HAL_GetTick>
 8009ac8:	0002      	movs	r2, r0
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e1fe      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009ad6:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ada:	2202      	movs	r2, #2
 8009adc:	4013      	ands	r3, r2
 8009ade:	d0f1      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x2a4>
 8009ae0:	e018      	b.n	8009b14 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009ae2:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009ae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009ae8:	2101      	movs	r1, #1
 8009aea:	438a      	bics	r2, r1
 8009aec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aee:	f7fd fce3 	bl	80074b8 <HAL_GetTick>
 8009af2:	0003      	movs	r3, r0
 8009af4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009af6:	e008      	b.n	8009b0a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009af8:	f7fd fcde 	bl	80074b8 <HAL_GetTick>
 8009afc:	0002      	movs	r2, r0
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d901      	bls.n	8009b0a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e1e4      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009b0a:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b0e:	2202      	movs	r2, #2
 8009b10:	4013      	ands	r3, r2
 8009b12:	d1f1      	bne.n	8009af8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2204      	movs	r2, #4
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	d100      	bne.n	8009b20 <HAL_RCC_OscConfig+0x300>
 8009b1e:	e0c7      	b.n	8009cb0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b20:	231f      	movs	r3, #31
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2238      	movs	r2, #56	; 0x38
 8009b2e:	4013      	ands	r3, r2
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d11f      	bne.n	8009b74 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <HAL_RCC_OscConfig+0x330>)
 8009b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b38:	2202      	movs	r2, #2
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	d100      	bne.n	8009b40 <HAL_RCC_OscConfig+0x320>
 8009b3e:	e0b7      	b.n	8009cb0 <HAL_RCC_OscConfig+0x490>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d000      	beq.n	8009b4a <HAL_RCC_OscConfig+0x32a>
 8009b48:	e0b2      	b.n	8009cb0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e1c2      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	40021000 	.word	0x40021000
 8009b54:	fffeffff 	.word	0xfffeffff
 8009b58:	fffbffff 	.word	0xfffbffff
 8009b5c:	ffff80ff 	.word	0xffff80ff
 8009b60:	ffffc7ff 	.word	0xffffc7ff
 8009b64:	00f42400 	.word	0x00f42400
 8009b68:	20000004 	.word	0x20000004
 8009b6c:	20000008 	.word	0x20000008
 8009b70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b74:	4bb5      	ldr	r3, [pc, #724]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	055b      	lsls	r3, r3, #21
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d101      	bne.n	8009b84 <HAL_RCC_OscConfig+0x364>
 8009b80:	2301      	movs	r3, #1
 8009b82:	e000      	b.n	8009b86 <HAL_RCC_OscConfig+0x366>
 8009b84:	2300      	movs	r3, #0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d011      	beq.n	8009bae <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009b8a:	4bb0      	ldr	r3, [pc, #704]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b8e:	4baf      	ldr	r3, [pc, #700]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009b90:	2180      	movs	r1, #128	; 0x80
 8009b92:	0549      	lsls	r1, r1, #21
 8009b94:	430a      	orrs	r2, r1
 8009b96:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b98:	4bac      	ldr	r3, [pc, #688]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b9c:	2380      	movs	r3, #128	; 0x80
 8009b9e:	055b      	lsls	r3, r3, #21
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009ba6:	231f      	movs	r3, #31
 8009ba8:	18fb      	adds	r3, r7, r3
 8009baa:	2201      	movs	r2, #1
 8009bac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bae:	4ba8      	ldr	r3, [pc, #672]	; (8009e50 <HAL_RCC_OscConfig+0x630>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	2380      	movs	r3, #128	; 0x80
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	d11a      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bba:	4ba5      	ldr	r3, [pc, #660]	; (8009e50 <HAL_RCC_OscConfig+0x630>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4ba4      	ldr	r3, [pc, #656]	; (8009e50 <HAL_RCC_OscConfig+0x630>)
 8009bc0:	2180      	movs	r1, #128	; 0x80
 8009bc2:	0049      	lsls	r1, r1, #1
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009bc8:	f7fd fc76 	bl	80074b8 <HAL_GetTick>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bd0:	e008      	b.n	8009be4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd2:	f7fd fc71 	bl	80074b8 <HAL_GetTick>
 8009bd6:	0002      	movs	r2, r0
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d901      	bls.n	8009be4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e177      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009be4:	4b9a      	ldr	r3, [pc, #616]	; (8009e50 <HAL_RCC_OscConfig+0x630>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	2380      	movs	r3, #128	; 0x80
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	4013      	ands	r3, r2
 8009bee:	d0f0      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d106      	bne.n	8009c06 <HAL_RCC_OscConfig+0x3e6>
 8009bf8:	4b94      	ldr	r3, [pc, #592]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bfc:	4b93      	ldr	r3, [pc, #588]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009bfe:	2101      	movs	r1, #1
 8009c00:	430a      	orrs	r2, r1
 8009c02:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c04:	e01c      	b.n	8009c40 <HAL_RCC_OscConfig+0x420>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d10c      	bne.n	8009c28 <HAL_RCC_OscConfig+0x408>
 8009c0e:	4b8f      	ldr	r3, [pc, #572]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c12:	4b8e      	ldr	r3, [pc, #568]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c14:	2104      	movs	r1, #4
 8009c16:	430a      	orrs	r2, r1
 8009c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c1a:	4b8c      	ldr	r3, [pc, #560]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c1e:	4b8b      	ldr	r3, [pc, #556]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c20:	2101      	movs	r1, #1
 8009c22:	430a      	orrs	r2, r1
 8009c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c26:	e00b      	b.n	8009c40 <HAL_RCC_OscConfig+0x420>
 8009c28:	4b88      	ldr	r3, [pc, #544]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c2c:	4b87      	ldr	r3, [pc, #540]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c2e:	2101      	movs	r1, #1
 8009c30:	438a      	bics	r2, r1
 8009c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c34:	4b85      	ldr	r3, [pc, #532]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c38:	4b84      	ldr	r3, [pc, #528]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c3a:	2104      	movs	r1, #4
 8009c3c:	438a      	bics	r2, r1
 8009c3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d014      	beq.n	8009c72 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7fd fc36 	bl	80074b8 <HAL_GetTick>
 8009c4c:	0003      	movs	r3, r0
 8009c4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c50:	e009      	b.n	8009c66 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c52:	f7fd fc31 	bl	80074b8 <HAL_GetTick>
 8009c56:	0002      	movs	r2, r0
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	4a7d      	ldr	r2, [pc, #500]	; (8009e54 <HAL_RCC_OscConfig+0x634>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e136      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c66:	4b79      	ldr	r3, [pc, #484]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d0f0      	beq.n	8009c52 <HAL_RCC_OscConfig+0x432>
 8009c70:	e013      	b.n	8009c9a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c72:	f7fd fc21 	bl	80074b8 <HAL_GetTick>
 8009c76:	0003      	movs	r3, r0
 8009c78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c7a:	e009      	b.n	8009c90 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c7c:	f7fd fc1c 	bl	80074b8 <HAL_GetTick>
 8009c80:	0002      	movs	r2, r0
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	4a73      	ldr	r2, [pc, #460]	; (8009e54 <HAL_RCC_OscConfig+0x634>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d901      	bls.n	8009c90 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e121      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c90:	4b6e      	ldr	r3, [pc, #440]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c94:	2202      	movs	r2, #2
 8009c96:	4013      	ands	r3, r2
 8009c98:	d1f0      	bne.n	8009c7c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009c9a:	231f      	movs	r3, #31
 8009c9c:	18fb      	adds	r3, r7, r3
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d105      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009ca4:	4b69      	ldr	r3, [pc, #420]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ca8:	4b68      	ldr	r3, [pc, #416]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009caa:	496b      	ldr	r1, [pc, #428]	; (8009e58 <HAL_RCC_OscConfig+0x638>)
 8009cac:	400a      	ands	r2, r1
 8009cae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	d039      	beq.n	8009d2e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01b      	beq.n	8009cfa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cc2:	4b62      	ldr	r3, [pc, #392]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	4b61      	ldr	r3, [pc, #388]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009cc8:	2180      	movs	r1, #128	; 0x80
 8009cca:	03c9      	lsls	r1, r1, #15
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd0:	f7fd fbf2 	bl	80074b8 <HAL_GetTick>
 8009cd4:	0003      	movs	r3, r0
 8009cd6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009cd8:	e008      	b.n	8009cec <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cda:	f7fd fbed 	bl	80074b8 <HAL_GetTick>
 8009cde:	0002      	movs	r2, r0
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d901      	bls.n	8009cec <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e0f3      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009cec:	4b57      	ldr	r3, [pc, #348]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	d0f0      	beq.n	8009cda <HAL_RCC_OscConfig+0x4ba>
 8009cf8:	e019      	b.n	8009d2e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cfa:	4b54      	ldr	r3, [pc, #336]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4b53      	ldr	r3, [pc, #332]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d00:	4956      	ldr	r1, [pc, #344]	; (8009e5c <HAL_RCC_OscConfig+0x63c>)
 8009d02:	400a      	ands	r2, r1
 8009d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d06:	f7fd fbd7 	bl	80074b8 <HAL_GetTick>
 8009d0a:	0003      	movs	r3, r0
 8009d0c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d10:	f7fd fbd2 	bl	80074b8 <HAL_GetTick>
 8009d14:	0002      	movs	r2, r0
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e0d8      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009d22:	4b4a      	ldr	r3, [pc, #296]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	2380      	movs	r3, #128	; 0x80
 8009d28:	041b      	lsls	r3, r3, #16
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d1f0      	bne.n	8009d10 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d100      	bne.n	8009d38 <HAL_RCC_OscConfig+0x518>
 8009d36:	e0cc      	b.n	8009ed2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d38:	4b44      	ldr	r3, [pc, #272]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2238      	movs	r2, #56	; 0x38
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d100      	bne.n	8009d46 <HAL_RCC_OscConfig+0x526>
 8009d44:	e07b      	b.n	8009e3e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d156      	bne.n	8009dfc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d4e:	4b3f      	ldr	r3, [pc, #252]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b3e      	ldr	r3, [pc, #248]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d54:	4942      	ldr	r1, [pc, #264]	; (8009e60 <HAL_RCC_OscConfig+0x640>)
 8009d56:	400a      	ands	r2, r1
 8009d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5a:	f7fd fbad 	bl	80074b8 <HAL_GetTick>
 8009d5e:	0003      	movs	r3, r0
 8009d60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d62:	e008      	b.n	8009d76 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d64:	f7fd fba8 	bl	80074b8 <HAL_GetTick>
 8009d68:	0002      	movs	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e0ae      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d76:	4b35      	ldr	r3, [pc, #212]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	2380      	movs	r3, #128	; 0x80
 8009d7c:	049b      	lsls	r3, r3, #18
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d1f0      	bne.n	8009d64 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d82:	4b32      	ldr	r3, [pc, #200]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4a37      	ldr	r2, [pc, #220]	; (8009e64 <HAL_RCC_OscConfig+0x644>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	0019      	movs	r1, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	431a      	orrs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	431a      	orrs	r2, r3
 8009db0:	4b26      	ldr	r3, [pc, #152]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009db2:	430a      	orrs	r2, r1
 8009db4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009db6:	4b25      	ldr	r3, [pc, #148]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	4b24      	ldr	r3, [pc, #144]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009dbc:	2180      	movs	r1, #128	; 0x80
 8009dbe:	0449      	lsls	r1, r1, #17
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009dc4:	4b21      	ldr	r3, [pc, #132]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	4b20      	ldr	r3, [pc, #128]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009dca:	2180      	movs	r1, #128	; 0x80
 8009dcc:	0549      	lsls	r1, r1, #21
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd2:	f7fd fb71 	bl	80074b8 <HAL_GetTick>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dda:	e008      	b.n	8009dee <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ddc:	f7fd fb6c 	bl	80074b8 <HAL_GetTick>
 8009de0:	0002      	movs	r2, r0
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d901      	bls.n	8009dee <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e072      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dee:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	2380      	movs	r3, #128	; 0x80
 8009df4:	049b      	lsls	r3, r3, #18
 8009df6:	4013      	ands	r3, r2
 8009df8:	d0f0      	beq.n	8009ddc <HAL_RCC_OscConfig+0x5bc>
 8009dfa:	e06a      	b.n	8009ed2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dfc:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009e02:	4917      	ldr	r1, [pc, #92]	; (8009e60 <HAL_RCC_OscConfig+0x640>)
 8009e04:	400a      	ands	r2, r1
 8009e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e08:	f7fd fb56 	bl	80074b8 <HAL_GetTick>
 8009e0c:	0003      	movs	r3, r0
 8009e0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e10:	e008      	b.n	8009e24 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e12:	f7fd fb51 	bl	80074b8 <HAL_GetTick>
 8009e16:	0002      	movs	r2, r0
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e057      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e24:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	2380      	movs	r3, #128	; 0x80
 8009e2a:	049b      	lsls	r3, r3, #18
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	d1f0      	bne.n	8009e12 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <HAL_RCC_OscConfig+0x62c>)
 8009e36:	490c      	ldr	r1, [pc, #48]	; (8009e68 <HAL_RCC_OscConfig+0x648>)
 8009e38:	400a      	ands	r2, r1
 8009e3a:	60da      	str	r2, [r3, #12]
 8009e3c:	e049      	b.n	8009ed2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d112      	bne.n	8009e6c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e044      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
 8009e4a:	46c0      	nop			; (mov r8, r8)
 8009e4c:	40021000 	.word	0x40021000
 8009e50:	40007000 	.word	0x40007000
 8009e54:	00001388 	.word	0x00001388
 8009e58:	efffffff 	.word	0xefffffff
 8009e5c:	ffbfffff 	.word	0xffbfffff
 8009e60:	feffffff 	.word	0xfeffffff
 8009e64:	11c1808c 	.word	0x11c1808c
 8009e68:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009e6c:	4b1b      	ldr	r3, [pc, #108]	; (8009edc <HAL_RCC_OscConfig+0x6bc>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2203      	movs	r2, #3
 8009e76:	401a      	ands	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d126      	bne.n	8009ece <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2270      	movs	r2, #112	; 0x70
 8009e84:	401a      	ands	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d11f      	bne.n	8009ece <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	23fe      	movs	r3, #254	; 0xfe
 8009e92:	01db      	lsls	r3, r3, #7
 8009e94:	401a      	ands	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d116      	bne.n	8009ece <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	23f8      	movs	r3, #248	; 0xf8
 8009ea4:	039b      	lsls	r3, r3, #14
 8009ea6:	401a      	ands	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d10e      	bne.n	8009ece <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	23e0      	movs	r3, #224	; 0xe0
 8009eb4:	051b      	lsls	r3, r3, #20
 8009eb6:	401a      	ands	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d106      	bne.n	8009ece <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	0f5b      	lsrs	r3, r3, #29
 8009ec4:	075a      	lsls	r2, r3, #29
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d001      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	b008      	add	sp, #32
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	40021000 	.word	0x40021000

08009ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e0e9      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ef4:	4b76      	ldr	r3, [pc, #472]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2207      	movs	r2, #7
 8009efa:	4013      	ands	r3, r2
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d91e      	bls.n	8009f40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f02:	4b73      	ldr	r3, [pc, #460]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2207      	movs	r2, #7
 8009f08:	4393      	bics	r3, r2
 8009f0a:	0019      	movs	r1, r3
 8009f0c:	4b70      	ldr	r3, [pc, #448]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009f14:	f7fd fad0 	bl	80074b8 <HAL_GetTick>
 8009f18:	0003      	movs	r3, r0
 8009f1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f1c:	e009      	b.n	8009f32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f1e:	f7fd facb 	bl	80074b8 <HAL_GetTick>
 8009f22:	0002      	movs	r2, r0
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	4a6a      	ldr	r2, [pc, #424]	; (800a0d4 <HAL_RCC_ClockConfig+0x1f4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e0ca      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f32:	4b67      	ldr	r3, [pc, #412]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2207      	movs	r2, #7
 8009f38:	4013      	ands	r3, r2
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d1ee      	bne.n	8009f1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2202      	movs	r2, #2
 8009f46:	4013      	ands	r3, r2
 8009f48:	d015      	beq.n	8009f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	4013      	ands	r3, r2
 8009f52:	d006      	beq.n	8009f62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009f54:	4b60      	ldr	r3, [pc, #384]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	4b5f      	ldr	r3, [pc, #380]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f5a:	21e0      	movs	r1, #224	; 0xe0
 8009f5c:	01c9      	lsls	r1, r1, #7
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f62:	4b5d      	ldr	r3, [pc, #372]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	4a5d      	ldr	r2, [pc, #372]	; (800a0dc <HAL_RCC_ClockConfig+0x1fc>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	0019      	movs	r1, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	4b59      	ldr	r3, [pc, #356]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f72:	430a      	orrs	r2, r1
 8009f74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	d057      	beq.n	800a030 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d107      	bne.n	8009f98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f88:	4b53      	ldr	r3, [pc, #332]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	029b      	lsls	r3, r3, #10
 8009f90:	4013      	ands	r3, r2
 8009f92:	d12b      	bne.n	8009fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e097      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d107      	bne.n	8009fb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fa0:	4b4d      	ldr	r3, [pc, #308]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	2380      	movs	r3, #128	; 0x80
 8009fa6:	049b      	lsls	r3, r3, #18
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d11f      	bne.n	8009fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e08b      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d107      	bne.n	8009fc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009fb8:	4b47      	ldr	r3, [pc, #284]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d113      	bne.n	8009fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e07f      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d106      	bne.n	8009fde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009fd0:	4b41      	ldr	r3, [pc, #260]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	d108      	bne.n	8009fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e074      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fde:	4b3e      	ldr	r3, [pc, #248]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	d101      	bne.n	8009fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e06d      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009fec:	4b3a      	ldr	r3, [pc, #232]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	4393      	bics	r3, r2
 8009ff4:	0019      	movs	r1, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	4b37      	ldr	r3, [pc, #220]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a000:	f7fd fa5a 	bl	80074b8 <HAL_GetTick>
 800a004:	0003      	movs	r3, r0
 800a006:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a008:	e009      	b.n	800a01e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a00a:	f7fd fa55 	bl	80074b8 <HAL_GetTick>
 800a00e:	0002      	movs	r2, r0
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	4a2f      	ldr	r2, [pc, #188]	; (800a0d4 <HAL_RCC_ClockConfig+0x1f4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d901      	bls.n	800a01e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e054      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a01e:	4b2e      	ldr	r3, [pc, #184]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	2238      	movs	r2, #56	; 0x38
 800a024:	401a      	ands	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d1ec      	bne.n	800a00a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a030:	4b27      	ldr	r3, [pc, #156]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2207      	movs	r2, #7
 800a036:	4013      	ands	r3, r2
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d21e      	bcs.n	800a07c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03e:	4b24      	ldr	r3, [pc, #144]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2207      	movs	r2, #7
 800a044:	4393      	bics	r3, r2
 800a046:	0019      	movs	r1, r3
 800a048:	4b21      	ldr	r3, [pc, #132]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a050:	f7fd fa32 	bl	80074b8 <HAL_GetTick>
 800a054:	0003      	movs	r3, r0
 800a056:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a058:	e009      	b.n	800a06e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a05a:	f7fd fa2d 	bl	80074b8 <HAL_GetTick>
 800a05e:	0002      	movs	r2, r0
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	4a1b      	ldr	r2, [pc, #108]	; (800a0d4 <HAL_RCC_ClockConfig+0x1f4>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e02c      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a06e:	4b18      	ldr	r3, [pc, #96]	; (800a0d0 <HAL_RCC_ClockConfig+0x1f0>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2207      	movs	r2, #7
 800a074:	4013      	ands	r3, r2
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d1ee      	bne.n	800a05a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2204      	movs	r2, #4
 800a082:	4013      	ands	r3, r2
 800a084:	d009      	beq.n	800a09a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a086:	4b14      	ldr	r3, [pc, #80]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	4a15      	ldr	r2, [pc, #84]	; (800a0e0 <HAL_RCC_ClockConfig+0x200>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	0019      	movs	r1, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 800a096:	430a      	orrs	r2, r1
 800a098:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a09a:	f000 f829 	bl	800a0f0 <HAL_RCC_GetSysClockFreq>
 800a09e:	0001      	movs	r1, r0
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <HAL_RCC_ClockConfig+0x1f8>)
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	220f      	movs	r2, #15
 800a0a8:	401a      	ands	r2, r3
 800a0aa:	4b0e      	ldr	r3, [pc, #56]	; (800a0e4 <HAL_RCC_ClockConfig+0x204>)
 800a0ac:	0092      	lsls	r2, r2, #2
 800a0ae:	58d3      	ldr	r3, [r2, r3]
 800a0b0:	221f      	movs	r2, #31
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	000a      	movs	r2, r1
 800a0b6:	40da      	lsrs	r2, r3
 800a0b8:	4b0b      	ldr	r3, [pc, #44]	; (800a0e8 <HAL_RCC_ClockConfig+0x208>)
 800a0ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <HAL_RCC_ClockConfig+0x20c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7fc fd99 	bl	8006bf8 <HAL_InitTick>
 800a0c6:	0003      	movs	r3, r0
}
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	b004      	add	sp, #16
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	40022000 	.word	0x40022000
 800a0d4:	00001388 	.word	0x00001388
 800a0d8:	40021000 	.word	0x40021000
 800a0dc:	fffff0ff 	.word	0xfffff0ff
 800a0e0:	ffff8fff 	.word	0xffff8fff
 800a0e4:	0801a300 	.word	0x0801a300
 800a0e8:	20000004 	.word	0x20000004
 800a0ec:	20000008 	.word	0x20000008

0800a0f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a0f6:	4b3c      	ldr	r3, [pc, #240]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2238      	movs	r2, #56	; 0x38
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	d10f      	bne.n	800a120 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	0adb      	lsrs	r3, r3, #11
 800a106:	2207      	movs	r2, #7
 800a108:	4013      	ands	r3, r2
 800a10a:	2201      	movs	r2, #1
 800a10c:	409a      	lsls	r2, r3
 800a10e:	0013      	movs	r3, r2
 800a110:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	4835      	ldr	r0, [pc, #212]	; (800a1ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800a116:	f7fc fa4f 	bl	80065b8 <__udivsi3>
 800a11a:	0003      	movs	r3, r0
 800a11c:	613b      	str	r3, [r7, #16]
 800a11e:	e05d      	b.n	800a1dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a120:	4b31      	ldr	r3, [pc, #196]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2238      	movs	r2, #56	; 0x38
 800a126:	4013      	ands	r3, r2
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d102      	bne.n	800a132 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a12c:	4b30      	ldr	r3, [pc, #192]	; (800a1f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	e054      	b.n	800a1dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a132:	4b2d      	ldr	r3, [pc, #180]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2238      	movs	r2, #56	; 0x38
 800a138:	4013      	ands	r3, r2
 800a13a:	2b10      	cmp	r3, #16
 800a13c:	d138      	bne.n	800a1b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a13e:	4b2a      	ldr	r3, [pc, #168]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	2203      	movs	r2, #3
 800a144:	4013      	ands	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a148:	4b27      	ldr	r3, [pc, #156]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	091b      	lsrs	r3, r3, #4
 800a14e:	2207      	movs	r2, #7
 800a150:	4013      	ands	r3, r2
 800a152:	3301      	adds	r3, #1
 800a154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d10d      	bne.n	800a178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	4824      	ldr	r0, [pc, #144]	; (800a1f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a160:	f7fc fa2a 	bl	80065b8 <__udivsi3>
 800a164:	0003      	movs	r3, r0
 800a166:	0019      	movs	r1, r3
 800a168:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	0a1b      	lsrs	r3, r3, #8
 800a16e:	227f      	movs	r2, #127	; 0x7f
 800a170:	4013      	ands	r3, r2
 800a172:	434b      	muls	r3, r1
 800a174:	617b      	str	r3, [r7, #20]
        break;
 800a176:	e00d      	b.n	800a194 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	481c      	ldr	r0, [pc, #112]	; (800a1ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800a17c:	f7fc fa1c 	bl	80065b8 <__udivsi3>
 800a180:	0003      	movs	r3, r0
 800a182:	0019      	movs	r1, r3
 800a184:	4b18      	ldr	r3, [pc, #96]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	227f      	movs	r2, #127	; 0x7f
 800a18c:	4013      	ands	r3, r2
 800a18e:	434b      	muls	r3, r1
 800a190:	617b      	str	r3, [r7, #20]
        break;
 800a192:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a194:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	0f5b      	lsrs	r3, r3, #29
 800a19a:	2207      	movs	r2, #7
 800a19c:	4013      	ands	r3, r2
 800a19e:	3301      	adds	r3, #1
 800a1a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	6978      	ldr	r0, [r7, #20]
 800a1a6:	f7fc fa07 	bl	80065b8 <__udivsi3>
 800a1aa:	0003      	movs	r3, r0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	e015      	b.n	800a1dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a1b0:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2238      	movs	r2, #56	; 0x38
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	d103      	bne.n	800a1c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a1bc:	2380      	movs	r3, #128	; 0x80
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	e00b      	b.n	800a1dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a1c4:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	2238      	movs	r2, #56	; 0x38
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b18      	cmp	r3, #24
 800a1ce:	d103      	bne.n	800a1d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a1d0:	23fa      	movs	r3, #250	; 0xfa
 800a1d2:	01db      	lsls	r3, r3, #7
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	e001      	b.n	800a1dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a1dc:	693b      	ldr	r3, [r7, #16]
}
 800a1de:	0018      	movs	r0, r3
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	b006      	add	sp, #24
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	40021000 	.word	0x40021000
 800a1ec:	00f42400 	.word	0x00f42400
 800a1f0:	007a1200 	.word	0x007a1200

0800a1f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <HAL_RCC_GetHCLKFreq+0x10>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
}
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	20000004 	.word	0x20000004

0800a208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a208:	b5b0      	push	{r4, r5, r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a20c:	f7ff fff2 	bl	800a1f4 <HAL_RCC_GetHCLKFreq>
 800a210:	0004      	movs	r4, r0
 800a212:	f7ff faf9 	bl	8009808 <LL_RCC_GetAPB1Prescaler>
 800a216:	0003      	movs	r3, r0
 800a218:	0b1a      	lsrs	r2, r3, #12
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a21c:	0092      	lsls	r2, r2, #2
 800a21e:	58d3      	ldr	r3, [r2, r3]
 800a220:	221f      	movs	r2, #31
 800a222:	4013      	ands	r3, r2
 800a224:	40dc      	lsrs	r4, r3
 800a226:	0023      	movs	r3, r4
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bdb0      	pop	{r4, r5, r7, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	0801a340 	.word	0x0801a340

0800a234 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2207      	movs	r2, #7
 800a242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a244:	4b0e      	ldr	r3, [pc, #56]	; (800a280 <HAL_RCC_GetClockConfig+0x4c>)
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2207      	movs	r2, #7
 800a24a:	401a      	ands	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <HAL_RCC_GetClockConfig+0x4c>)
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	23f0      	movs	r3, #240	; 0xf0
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	401a      	ands	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800a25e:	4b08      	ldr	r3, [pc, #32]	; (800a280 <HAL_RCC_GetClockConfig+0x4c>)
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	23e0      	movs	r3, #224	; 0xe0
 800a264:	01db      	lsls	r3, r3, #7
 800a266:	401a      	ands	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <HAL_RCC_GetClockConfig+0x50>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2207      	movs	r2, #7
 800a272:	401a      	ands	r2, r3
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	601a      	str	r2, [r3, #0]
}
 800a278:	46c0      	nop			; (mov r8, r8)
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b002      	add	sp, #8
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	40021000 	.word	0x40021000
 800a284:	40022000 	.word	0x40022000

0800a288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a290:	2313      	movs	r3, #19
 800a292:	18fb      	adds	r3, r7, r3
 800a294:	2200      	movs	r2, #0
 800a296:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a298:	2312      	movs	r3, #18
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	2380      	movs	r3, #128	; 0x80
 800a2a6:	029b      	lsls	r3, r3, #10
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	d100      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a2ac:	e0ad      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2ae:	2011      	movs	r0, #17
 800a2b0:	183b      	adds	r3, r7, r0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2b6:	4b47      	ldr	r3, [pc, #284]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a2b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ba:	2380      	movs	r3, #128	; 0x80
 800a2bc:	055b      	lsls	r3, r3, #21
 800a2be:	4013      	ands	r3, r2
 800a2c0:	d110      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2c2:	4b44      	ldr	r3, [pc, #272]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a2c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2c6:	4b43      	ldr	r3, [pc, #268]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a2c8:	2180      	movs	r1, #128	; 0x80
 800a2ca:	0549      	lsls	r1, r1, #21
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2d0:	4b40      	ldr	r3, [pc, #256]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d4:	2380      	movs	r3, #128	; 0x80
 800a2d6:	055b      	lsls	r3, r3, #21
 800a2d8:	4013      	ands	r3, r2
 800a2da:	60bb      	str	r3, [r7, #8]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2de:	183b      	adds	r3, r7, r0
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2e4:	4b3c      	ldr	r3, [pc, #240]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	4b3b      	ldr	r3, [pc, #236]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a2ea:	2180      	movs	r1, #128	; 0x80
 800a2ec:	0049      	lsls	r1, r1, #1
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a2f2:	f7fd f8e1 	bl	80074b8 <HAL_GetTick>
 800a2f6:	0003      	movs	r3, r0
 800a2f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2fa:	e00b      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2fc:	f7fd f8dc 	bl	80074b8 <HAL_GetTick>
 800a300:	0002      	movs	r2, r0
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d904      	bls.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a30a:	2313      	movs	r3, #19
 800a30c:	18fb      	adds	r3, r7, r3
 800a30e:	2203      	movs	r2, #3
 800a310:	701a      	strb	r2, [r3, #0]
        break;
 800a312:	e005      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a314:	4b30      	ldr	r3, [pc, #192]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	2380      	movs	r3, #128	; 0x80
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	4013      	ands	r3, r2
 800a31e:	d0ed      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a320:	2313      	movs	r3, #19
 800a322:	18fb      	adds	r3, r7, r3
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d15e      	bne.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a32a:	4b2a      	ldr	r3, [pc, #168]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a32c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a32e:	23c0      	movs	r3, #192	; 0xc0
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4013      	ands	r3, r2
 800a334:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d019      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	429a      	cmp	r2, r3
 800a344:	d014      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a346:	4b23      	ldr	r3, [pc, #140]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a34a:	4a24      	ldr	r2, [pc, #144]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a350:	4b20      	ldr	r3, [pc, #128]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a354:	4b1f      	ldr	r3, [pc, #124]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a356:	2180      	movs	r1, #128	; 0x80
 800a358:	0249      	lsls	r1, r1, #9
 800a35a:	430a      	orrs	r2, r1
 800a35c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a35e:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a360:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a364:	491e      	ldr	r1, [pc, #120]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800a366:	400a      	ands	r2, r1
 800a368:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a36a:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	2201      	movs	r2, #1
 800a374:	4013      	ands	r3, r2
 800a376:	d016      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a378:	f7fd f89e 	bl	80074b8 <HAL_GetTick>
 800a37c:	0003      	movs	r3, r0
 800a37e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a380:	e00c      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a382:	f7fd f899 	bl	80074b8 <HAL_GetTick>
 800a386:	0002      	movs	r2, r0
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	4a15      	ldr	r2, [pc, #84]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d904      	bls.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a392:	2313      	movs	r3, #19
 800a394:	18fb      	adds	r3, r7, r3
 800a396:	2203      	movs	r2, #3
 800a398:	701a      	strb	r2, [r3, #0]
            break;
 800a39a:	e004      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a39e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a0:	2202      	movs	r2, #2
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	d0ed      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a3a6:	2313      	movs	r3, #19
 800a3a8:	18fb      	adds	r3, r7, r3
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3b4:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	0019      	movs	r1, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3be:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3c4:	e016      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a3c6:	2312      	movs	r3, #18
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	2213      	movs	r2, #19
 800a3cc:	18ba      	adds	r2, r7, r2
 800a3ce:	7812      	ldrb	r2, [r2, #0]
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	e00f      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a3d4:	40021000 	.word	0x40021000
 800a3d8:	40007000 	.word	0x40007000
 800a3dc:	fffffcff 	.word	0xfffffcff
 800a3e0:	fffeffff 	.word	0xfffeffff
 800a3e4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e8:	2312      	movs	r3, #18
 800a3ea:	18fb      	adds	r3, r7, r3
 800a3ec:	2213      	movs	r2, #19
 800a3ee:	18ba      	adds	r2, r7, r2
 800a3f0:	7812      	ldrb	r2, [r2, #0]
 800a3f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3f4:	2311      	movs	r3, #17
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d105      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3fe:	4bb6      	ldr	r3, [pc, #728]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a402:	4bb5      	ldr	r3, [pc, #724]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a404:	49b5      	ldr	r1, [pc, #724]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800a406:	400a      	ands	r2, r1
 800a408:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2201      	movs	r2, #1
 800a410:	4013      	ands	r3, r2
 800a412:	d009      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a414:	4bb0      	ldr	r3, [pc, #704]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a418:	2203      	movs	r2, #3
 800a41a:	4393      	bics	r3, r2
 800a41c:	0019      	movs	r1, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	4bad      	ldr	r3, [pc, #692]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a424:	430a      	orrs	r2, r1
 800a426:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2202      	movs	r2, #2
 800a42e:	4013      	ands	r3, r2
 800a430:	d009      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a432:	4ba9      	ldr	r3, [pc, #676]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a436:	220c      	movs	r2, #12
 800a438:	4393      	bics	r3, r2
 800a43a:	0019      	movs	r1, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	4ba5      	ldr	r3, [pc, #660]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a442:	430a      	orrs	r2, r1
 800a444:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2204      	movs	r2, #4
 800a44c:	4013      	ands	r3, r2
 800a44e:	d009      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a450:	4ba1      	ldr	r3, [pc, #644]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a454:	2230      	movs	r2, #48	; 0x30
 800a456:	4393      	bics	r3, r2
 800a458:	0019      	movs	r1, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	4b9e      	ldr	r3, [pc, #632]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a460:	430a      	orrs	r2, r1
 800a462:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2210      	movs	r2, #16
 800a46a:	4013      	ands	r3, r2
 800a46c:	d009      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a46e:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a472:	4a9b      	ldr	r2, [pc, #620]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800a474:	4013      	ands	r3, r2
 800a476:	0019      	movs	r1, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	4b96      	ldr	r3, [pc, #600]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a47e:	430a      	orrs	r2, r1
 800a480:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	2380      	movs	r3, #128	; 0x80
 800a488:	015b      	lsls	r3, r3, #5
 800a48a:	4013      	ands	r3, r2
 800a48c:	d009      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800a48e:	4b92      	ldr	r3, [pc, #584]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a492:	4a94      	ldr	r2, [pc, #592]	; (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a494:	4013      	ands	r3, r2
 800a496:	0019      	movs	r1, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	695a      	ldr	r2, [r3, #20]
 800a49c:	4b8e      	ldr	r3, [pc, #568]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	2380      	movs	r3, #128	; 0x80
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	d009      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4ae:	4b8a      	ldr	r3, [pc, #552]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	4a8d      	ldr	r2, [pc, #564]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	0019      	movs	r1, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4bc:	4b86      	ldr	r3, [pc, #536]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	2380      	movs	r3, #128	; 0x80
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	d009      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a4ce:	4b82      	ldr	r3, [pc, #520]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	4a86      	ldr	r2, [pc, #536]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	0019      	movs	r1, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4dc:	4b7e      	ldr	r3, [pc, #504]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	d009      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a4ec:	4b7a      	ldr	r3, [pc, #488]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f0:	4a7f      	ldr	r2, [pc, #508]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	0019      	movs	r1, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	4b77      	ldr	r3, [pc, #476]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2240      	movs	r2, #64	; 0x40
 800a506:	4013      	ands	r3, r2
 800a508:	d009      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a50a:	4b73      	ldr	r3, [pc, #460]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	4a79      	ldr	r2, [pc, #484]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a510:	4013      	ands	r3, r2
 800a512:	0019      	movs	r1, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	69da      	ldr	r2, [r3, #28]
 800a518:	4b6f      	ldr	r3, [pc, #444]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a51a:	430a      	orrs	r2, r1
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	2380      	movs	r3, #128	; 0x80
 800a524:	01db      	lsls	r3, r3, #7
 800a526:	4013      	ands	r3, r2
 800a528:	d015      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a52a:	4b6b      	ldr	r3, [pc, #428]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	0899      	lsrs	r1, r3, #2
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a536:	4b68      	ldr	r3, [pc, #416]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a538:	430a      	orrs	r2, r1
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a540:	2380      	movs	r3, #128	; 0x80
 800a542:	05db      	lsls	r3, r3, #23
 800a544:	429a      	cmp	r2, r3
 800a546:	d106      	bne.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a548:	4b63      	ldr	r3, [pc, #396]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	4b62      	ldr	r3, [pc, #392]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a54e:	2180      	movs	r1, #128	; 0x80
 800a550:	0249      	lsls	r1, r1, #9
 800a552:	430a      	orrs	r2, r1
 800a554:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	2380      	movs	r3, #128	; 0x80
 800a55c:	031b      	lsls	r3, r3, #12
 800a55e:	4013      	ands	r3, r2
 800a560:	d009      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a562:	4b5d      	ldr	r3, [pc, #372]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a566:	2240      	movs	r2, #64	; 0x40
 800a568:	4393      	bics	r3, r2
 800a56a:	0019      	movs	r1, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a570:	4b59      	ldr	r3, [pc, #356]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a572:	430a      	orrs	r2, r1
 800a574:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	2380      	movs	r3, #128	; 0x80
 800a57c:	039b      	lsls	r3, r3, #14
 800a57e:	4013      	ands	r3, r2
 800a580:	d016      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a582:	4b55      	ldr	r3, [pc, #340]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a586:	4a5c      	ldr	r2, [pc, #368]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a588:	4013      	ands	r3, r2
 800a58a:	0019      	movs	r1, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a590:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a592:	430a      	orrs	r2, r1
 800a594:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	03db      	lsls	r3, r3, #15
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d106      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a5a2:	4b4d      	ldr	r3, [pc, #308]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	4b4c      	ldr	r3, [pc, #304]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5a8:	2180      	movs	r1, #128	; 0x80
 800a5aa:	0449      	lsls	r1, r1, #17
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	2380      	movs	r3, #128	; 0x80
 800a5b6:	03db      	lsls	r3, r3, #15
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	d016      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a5bc:	4b46      	ldr	r3, [pc, #280]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c0:	4a4e      	ldr	r2, [pc, #312]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	0019      	movs	r1, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ca:	4b43      	ldr	r3, [pc, #268]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5d4:	2380      	movs	r3, #128	; 0x80
 800a5d6:	045b      	lsls	r3, r3, #17
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d106      	bne.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a5dc:	4b3e      	ldr	r3, [pc, #248]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	4b3d      	ldr	r3, [pc, #244]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5e2:	2180      	movs	r1, #128	; 0x80
 800a5e4:	0449      	lsls	r1, r1, #17
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	2380      	movs	r3, #128	; 0x80
 800a5f0:	011b      	lsls	r3, r3, #4
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d014      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a5f6:	4b38      	ldr	r3, [pc, #224]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fa:	2203      	movs	r2, #3
 800a5fc:	4393      	bics	r3, r2
 800a5fe:	0019      	movs	r1, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a1a      	ldr	r2, [r3, #32]
 800a604:	4b34      	ldr	r3, [pc, #208]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a606:	430a      	orrs	r2, r1
 800a608:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d106      	bne.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a612:	4b31      	ldr	r3, [pc, #196]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	4b30      	ldr	r3, [pc, #192]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a618:	2180      	movs	r1, #128	; 0x80
 800a61a:	0249      	lsls	r1, r1, #9
 800a61c:	430a      	orrs	r2, r1
 800a61e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	019b      	lsls	r3, r3, #6
 800a628:	4013      	ands	r3, r2
 800a62a:	d014      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a62c:	4b2a      	ldr	r3, [pc, #168]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a630:	220c      	movs	r2, #12
 800a632:	4393      	bics	r3, r2
 800a634:	0019      	movs	r1, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63a:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a63c:	430a      	orrs	r2, r1
 800a63e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	2b04      	cmp	r3, #4
 800a646:	d106      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a648:	4b23      	ldr	r3, [pc, #140]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	4b22      	ldr	r3, [pc, #136]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a64e:	2180      	movs	r1, #128	; 0x80
 800a650:	0249      	lsls	r1, r1, #9
 800a652:	430a      	orrs	r2, r1
 800a654:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	2380      	movs	r3, #128	; 0x80
 800a65c:	045b      	lsls	r3, r3, #17
 800a65e:	4013      	ands	r3, r2
 800a660:	d016      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a662:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a666:	4a22      	ldr	r2, [pc, #136]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a668:	4013      	ands	r3, r2
 800a66a:	0019      	movs	r1, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a670:	4b19      	ldr	r3, [pc, #100]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a672:	430a      	orrs	r2, r1
 800a674:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a67a:	2380      	movs	r3, #128	; 0x80
 800a67c:	019b      	lsls	r3, r3, #6
 800a67e:	429a      	cmp	r2, r3
 800a680:	d106      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a688:	2180      	movs	r1, #128	; 0x80
 800a68a:	0449      	lsls	r1, r1, #17
 800a68c:	430a      	orrs	r2, r1
 800a68e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	2380      	movs	r3, #128	; 0x80
 800a696:	049b      	lsls	r3, r3, #18
 800a698:	4013      	ands	r3, r2
 800a69a:	d016      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a69c:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a0:	4a10      	ldr	r2, [pc, #64]	; (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	0019      	movs	r1, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6aa:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6b4:	2380      	movs	r3, #128	; 0x80
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d106      	bne.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6c2:	2180      	movs	r1, #128	; 0x80
 800a6c4:	0449      	lsls	r1, r1, #17
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a6ca:	2312      	movs	r3, #18
 800a6cc:	18fb      	adds	r3, r7, r3
 800a6ce:	781b      	ldrb	r3, [r3, #0]
}
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b006      	add	sp, #24
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	40021000 	.word	0x40021000
 800a6dc:	efffffff 	.word	0xefffffff
 800a6e0:	fffff3ff 	.word	0xfffff3ff
 800a6e4:	fffffcff 	.word	0xfffffcff
 800a6e8:	fff3ffff 	.word	0xfff3ffff
 800a6ec:	ffcfffff 	.word	0xffcfffff
 800a6f0:	ffffcfff 	.word	0xffffcfff
 800a6f4:	ffff3fff 	.word	0xffff3fff
 800a6f8:	ffbfffff 	.word	0xffbfffff
 800a6fc:	feffffff 	.word	0xfeffffff

0800a700 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a708:	4b1c      	ldr	r3, [pc, #112]	; (800a77c <HAL_RCCEx_CRSConfig+0x7c>)
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	4b1b      	ldr	r3, [pc, #108]	; (800a77c <HAL_RCCEx_CRSConfig+0x7c>)
 800a70e:	2180      	movs	r1, #128	; 0x80
 800a710:	0249      	lsls	r1, r1, #9
 800a712:	430a      	orrs	r2, r1
 800a714:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_CRS_RELEASE_RESET();
 800a716:	4b19      	ldr	r3, [pc, #100]	; (800a77c <HAL_RCCEx_CRSConfig+0x7c>)
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <HAL_RCCEx_CRSConfig+0x7c>)
 800a71c:	4918      	ldr	r1, [pc, #96]	; (800a780 <HAL_RCCEx_CRSConfig+0x80>)
 800a71e:	400a      	ands	r2, r1
 800a720:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	431a      	orrs	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	4313      	orrs	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	041b      	lsls	r3, r3, #16
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a74a:	4b0e      	ldr	r3, [pc, #56]	; (800a784 <HAL_RCCEx_CRSConfig+0x84>)
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a750:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <HAL_RCCEx_CRSConfig+0x84>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a0c      	ldr	r2, [pc, #48]	; (800a788 <HAL_RCCEx_CRSConfig+0x88>)
 800a756:	4013      	ands	r3, r2
 800a758:	0019      	movs	r1, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	021a      	lsls	r2, r3, #8
 800a760:	4b08      	ldr	r3, [pc, #32]	; (800a784 <HAL_RCCEx_CRSConfig+0x84>)
 800a762:	430a      	orrs	r2, r1
 800a764:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a766:	4b07      	ldr	r3, [pc, #28]	; (800a784 <HAL_RCCEx_CRSConfig+0x84>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4b06      	ldr	r3, [pc, #24]	; (800a784 <HAL_RCCEx_CRSConfig+0x84>)
 800a76c:	2160      	movs	r1, #96	; 0x60
 800a76e:	430a      	orrs	r2, r1
 800a770:	601a      	str	r2, [r3, #0]
}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	46bd      	mov	sp, r7
 800a776:	b004      	add	sp, #16
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	46c0      	nop			; (mov r8, r8)
 800a77c:	40021000 	.word	0x40021000
 800a780:	fffeffff 	.word	0xfffeffff
 800a784:	40006c00 	.word	0x40006c00
 800a788:	ffff80ff 	.word	0xffff80ff

0800a78c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e04a      	b.n	800a834 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	223d      	movs	r2, #61	; 0x3d
 800a7a2:	5c9b      	ldrb	r3, [r3, r2]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d107      	bne.n	800a7ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	223c      	movs	r2, #60	; 0x3c
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f000 f841 	bl	800a83c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	223d      	movs	r2, #61	; 0x3d
 800a7be:	2102      	movs	r1, #2
 800a7c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	0019      	movs	r1, r3
 800a7cc:	0010      	movs	r0, r2
 800a7ce:	f000 f9f1 	bl	800abb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2248      	movs	r2, #72	; 0x48
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	223e      	movs	r2, #62	; 0x3e
 800a7de:	2101      	movs	r1, #1
 800a7e0:	5499      	strb	r1, [r3, r2]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	223f      	movs	r2, #63	; 0x3f
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	5499      	strb	r1, [r3, r2]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2240      	movs	r2, #64	; 0x40
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	5499      	strb	r1, [r3, r2]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2241      	movs	r2, #65	; 0x41
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	5499      	strb	r1, [r3, r2]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2242      	movs	r2, #66	; 0x42
 800a7fe:	2101      	movs	r1, #1
 800a800:	5499      	strb	r1, [r3, r2]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2243      	movs	r2, #67	; 0x43
 800a806:	2101      	movs	r1, #1
 800a808:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2244      	movs	r2, #68	; 0x44
 800a80e:	2101      	movs	r1, #1
 800a810:	5499      	strb	r1, [r3, r2]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2245      	movs	r2, #69	; 0x45
 800a816:	2101      	movs	r1, #1
 800a818:	5499      	strb	r1, [r3, r2]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2246      	movs	r2, #70	; 0x46
 800a81e:	2101      	movs	r1, #1
 800a820:	5499      	strb	r1, [r3, r2]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2247      	movs	r2, #71	; 0x47
 800a826:	2101      	movs	r1, #1
 800a828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	223d      	movs	r2, #61	; 0x3d
 800a82e:	2101      	movs	r1, #1
 800a830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	0018      	movs	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	b002      	add	sp, #8
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a844:	46c0      	nop			; (mov r8, r8)
 800a846:	46bd      	mov	sp, r7
 800a848:	b002      	add	sp, #8
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	223d      	movs	r2, #61	; 0x3d
 800a858:	5c9b      	ldrb	r3, [r3, r2]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d001      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e047      	b.n	800a8f4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	223d      	movs	r2, #61	; 0x3d
 800a868:	2102      	movs	r1, #2
 800a86a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2101      	movs	r1, #1
 800a878:	430a      	orrs	r2, r1
 800a87a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a1e      	ldr	r2, [pc, #120]	; (800a8fc <HAL_TIM_Base_Start_IT+0xb0>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d014      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x64>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	2380      	movs	r3, #128	; 0x80
 800a88c:	05db      	lsls	r3, r3, #23
 800a88e:	429a      	cmp	r2, r3
 800a890:	d00e      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x64>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a1a      	ldr	r2, [pc, #104]	; (800a900 <HAL_TIM_Base_Start_IT+0xb4>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x64>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a18      	ldr	r2, [pc, #96]	; (800a904 <HAL_TIM_Base_Start_IT+0xb8>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0x64>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a17      	ldr	r2, [pc, #92]	; (800a908 <HAL_TIM_Base_Start_IT+0xbc>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d116      	bne.n	800a8de <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	4a15      	ldr	r2, [pc, #84]	; (800a90c <HAL_TIM_Base_Start_IT+0xc0>)
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b06      	cmp	r3, #6
 800a8c0:	d016      	beq.n	800a8f0 <HAL_TIM_Base_Start_IT+0xa4>
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	2380      	movs	r3, #128	; 0x80
 800a8c6:	025b      	lsls	r3, r3, #9
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d011      	beq.n	800a8f0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8dc:	e008      	b.n	800a8f0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	e000      	b.n	800a8f2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	b004      	add	sp, #16
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	40012c00 	.word	0x40012c00
 800a900:	40000400 	.word	0x40000400
 800a904:	40000800 	.word	0x40000800
 800a908:	40014000 	.word	0x40014000
 800a90c:	00010007 	.word	0x00010007

0800a910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2202      	movs	r2, #2
 800a920:	4013      	ands	r3, r2
 800a922:	2b02      	cmp	r3, #2
 800a924:	d124      	bne.n	800a970 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2202      	movs	r2, #2
 800a92e:	4013      	ands	r3, r2
 800a930:	2b02      	cmp	r3, #2
 800a932:	d11d      	bne.n	800a970 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2203      	movs	r2, #3
 800a93a:	4252      	negs	r2, r2
 800a93c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	2203      	movs	r2, #3
 800a94c:	4013      	ands	r3, r2
 800a94e:	d004      	beq.n	800a95a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	0018      	movs	r0, r3
 800a954:	f000 f916 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800a958:	e007      	b.n	800a96a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	0018      	movs	r0, r3
 800a95e:	f000 f909 	bl	800ab74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	0018      	movs	r0, r3
 800a966:	f000 f915 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	2204      	movs	r2, #4
 800a978:	4013      	ands	r3, r2
 800a97a:	2b04      	cmp	r3, #4
 800a97c:	d125      	bne.n	800a9ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	2204      	movs	r2, #4
 800a986:	4013      	ands	r3, r2
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d11e      	bne.n	800a9ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2205      	movs	r2, #5
 800a992:	4252      	negs	r2, r2
 800a994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699a      	ldr	r2, [r3, #24]
 800a9a2:	23c0      	movs	r3, #192	; 0xc0
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	d004      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f000 f8e9 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800a9b2:	e007      	b.n	800a9c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	f000 f8dc 	bl	800ab74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	0018      	movs	r0, r3
 800a9c0:	f000 f8e8 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	d124      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	2208      	movs	r2, #8
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	2b08      	cmp	r3, #8
 800a9e4:	d11d      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2209      	movs	r2, #9
 800a9ec:	4252      	negs	r2, r2
 800a9ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69db      	ldr	r3, [r3, #28]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	4013      	ands	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	0018      	movs	r0, r3
 800aa06:	f000 f8bd 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800aa0a:	e007      	b.n	800aa1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f000 f8b0 	bl	800ab74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	0018      	movs	r0, r3
 800aa18:	f000 f8bc 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	2210      	movs	r2, #16
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	2b10      	cmp	r3, #16
 800aa2e:	d125      	bne.n	800aa7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	2210      	movs	r2, #16
 800aa38:	4013      	ands	r3, r2
 800aa3a:	2b10      	cmp	r3, #16
 800aa3c:	d11e      	bne.n	800aa7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2211      	movs	r2, #17
 800aa44:	4252      	negs	r2, r2
 800aa46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	69da      	ldr	r2, [r3, #28]
 800aa54:	23c0      	movs	r3, #192	; 0xc0
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4013      	ands	r3, r2
 800aa5a:	d004      	beq.n	800aa66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	0018      	movs	r0, r3
 800aa60:	f000 f890 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800aa64:	e007      	b.n	800aa76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f000 f883 	bl	800ab74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	0018      	movs	r0, r3
 800aa72:	f000 f88f 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	2201      	movs	r2, #1
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d10f      	bne.n	800aaaa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2201      	movs	r2, #1
 800aa92:	4013      	ands	r3, r2
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d108      	bne.n	800aaaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	4252      	negs	r2, r2
 800aaa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	f7fc f863 	bl	8006b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	2280      	movs	r2, #128	; 0x80
 800aab2:	4013      	ands	r3, r2
 800aab4:	2b80      	cmp	r3, #128	; 0x80
 800aab6:	d10f      	bne.n	800aad8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	2280      	movs	r2, #128	; 0x80
 800aac0:	4013      	ands	r3, r2
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d108      	bne.n	800aad8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2281      	movs	r2, #129	; 0x81
 800aacc:	4252      	negs	r2, r2
 800aace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	0018      	movs	r0, r3
 800aad4:	f000 f900 	bl	800acd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	2380      	movs	r3, #128	; 0x80
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	401a      	ands	r2, r3
 800aae4:	2380      	movs	r3, #128	; 0x80
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d10e      	bne.n	800ab0a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2280      	movs	r2, #128	; 0x80
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	2b80      	cmp	r3, #128	; 0x80
 800aaf8:	d107      	bne.n	800ab0a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a1c      	ldr	r2, [pc, #112]	; (800ab70 <HAL_TIM_IRQHandler+0x260>)
 800ab00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	0018      	movs	r0, r3
 800ab06:	f000 f8ef 	bl	800ace8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	2240      	movs	r2, #64	; 0x40
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b40      	cmp	r3, #64	; 0x40
 800ab16:	d10f      	bne.n	800ab38 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2240      	movs	r2, #64	; 0x40
 800ab20:	4013      	ands	r3, r2
 800ab22:	2b40      	cmp	r3, #64	; 0x40
 800ab24:	d108      	bne.n	800ab38 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2241      	movs	r2, #65	; 0x41
 800ab2c:	4252      	negs	r2, r2
 800ab2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	0018      	movs	r0, r3
 800ab34:	f000 f836 	bl	800aba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	4013      	ands	r3, r2
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	d10f      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2220      	movs	r2, #32
 800ab4e:	4013      	ands	r3, r2
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d108      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2221      	movs	r2, #33	; 0x21
 800ab5a:	4252      	negs	r2, r2
 800ab5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	0018      	movs	r0, r3
 800ab62:	f000 f8b1 	bl	800acc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	b002      	add	sp, #8
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	fffffeff 	.word	0xfffffeff

0800ab74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab7c:	46c0      	nop			; (mov r8, r8)
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	b002      	add	sp, #8
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab8c:	46c0      	nop			; (mov r8, r8)
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b002      	add	sp, #8
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab9c:	46c0      	nop			; (mov r8, r8)
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	b002      	add	sp, #8
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abac:	46c0      	nop			; (mov r8, r8)
 800abae:	46bd      	mov	sp, r7
 800abb0:	b002      	add	sp, #8
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a38      	ldr	r2, [pc, #224]	; (800aca8 <TIM_Base_SetConfig+0xf4>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00c      	beq.n	800abe6 <TIM_Base_SetConfig+0x32>
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	2380      	movs	r3, #128	; 0x80
 800abd0:	05db      	lsls	r3, r3, #23
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d007      	beq.n	800abe6 <TIM_Base_SetConfig+0x32>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a34      	ldr	r2, [pc, #208]	; (800acac <TIM_Base_SetConfig+0xf8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_Base_SetConfig+0x32>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a33      	ldr	r2, [pc, #204]	; (800acb0 <TIM_Base_SetConfig+0xfc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d108      	bne.n	800abf8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2270      	movs	r2, #112	; 0x70
 800abea:	4393      	bics	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a2b      	ldr	r2, [pc, #172]	; (800aca8 <TIM_Base_SetConfig+0xf4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d01c      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	2380      	movs	r3, #128	; 0x80
 800ac04:	05db      	lsls	r3, r3, #23
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d017      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a27      	ldr	r2, [pc, #156]	; (800acac <TIM_Base_SetConfig+0xf8>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d013      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a26      	ldr	r2, [pc, #152]	; (800acb0 <TIM_Base_SetConfig+0xfc>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00f      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a25      	ldr	r2, [pc, #148]	; (800acb4 <TIM_Base_SetConfig+0x100>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d00b      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a24      	ldr	r2, [pc, #144]	; (800acb8 <TIM_Base_SetConfig+0x104>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d007      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a23      	ldr	r2, [pc, #140]	; (800acbc <TIM_Base_SetConfig+0x108>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d003      	beq.n	800ac3a <TIM_Base_SetConfig+0x86>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a22      	ldr	r2, [pc, #136]	; (800acc0 <TIM_Base_SetConfig+0x10c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d108      	bne.n	800ac4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4a21      	ldr	r2, [pc, #132]	; (800acc4 <TIM_Base_SetConfig+0x110>)
 800ac3e:	4013      	ands	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2280      	movs	r2, #128	; 0x80
 800ac50:	4393      	bics	r3, r2
 800ac52:	001a      	movs	r2, r3
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a0c      	ldr	r2, [pc, #48]	; (800aca8 <TIM_Base_SetConfig+0xf4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00b      	beq.n	800ac92 <TIM_Base_SetConfig+0xde>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a0e      	ldr	r2, [pc, #56]	; (800acb8 <TIM_Base_SetConfig+0x104>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d007      	beq.n	800ac92 <TIM_Base_SetConfig+0xde>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a0d      	ldr	r2, [pc, #52]	; (800acbc <TIM_Base_SetConfig+0x108>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d003      	beq.n	800ac92 <TIM_Base_SetConfig+0xde>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a0c      	ldr	r2, [pc, #48]	; (800acc0 <TIM_Base_SetConfig+0x10c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d103      	bne.n	800ac9a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	691a      	ldr	r2, [r3, #16]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	615a      	str	r2, [r3, #20]
}
 800aca0:	46c0      	nop			; (mov r8, r8)
 800aca2:	46bd      	mov	sp, r7
 800aca4:	b004      	add	sp, #16
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	40012c00 	.word	0x40012c00
 800acac:	40000400 	.word	0x40000400
 800acb0:	40000800 	.word	0x40000800
 800acb4:	40002000 	.word	0x40002000
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800
 800acc4:	fffffcff 	.word	0xfffffcff

0800acc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acd0:	46c0      	nop			; (mov r8, r8)
 800acd2:	46bd      	mov	sp, r7
 800acd4:	b002      	add	sp, #8
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ace0:	46c0      	nop			; (mov r8, r8)
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b002      	add	sp, #8
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acf0:	46c0      	nop			; (mov r8, r8)
 800acf2:	46bd      	mov	sp, r7
 800acf4:	b002      	add	sp, #8
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <LL_DMA_ConfigTransfer>:
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800ad08:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <LL_DMA_ConfigTransfer+0x44>)
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	18d3      	adds	r3, r2, r3
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	001a      	movs	r2, r3
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	18d3      	adds	r3, r2, r3
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <LL_DMA_ConfigTransfer+0x48>)
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	0019      	movs	r1, r3
 800ad1e:	4a07      	ldr	r2, [pc, #28]	; (800ad3c <LL_DMA_ConfigTransfer+0x44>)
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	18d3      	adds	r3, r2, r3
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	001a      	movs	r2, r3
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	18d3      	adds	r3, r2, r3
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	601a      	str	r2, [r3, #0]
}
 800ad32:	46c0      	nop			; (mov r8, r8)
 800ad34:	46bd      	mov	sp, r7
 800ad36:	b006      	add	sp, #24
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	46c0      	nop			; (mov r8, r8)
 800ad3c:	0801a368 	.word	0x0801a368
 800ad40:	ffff800f 	.word	0xffff800f

0800ad44 <LL_DMA_SetDataLength>:
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800ad54:	4a0b      	ldr	r2, [pc, #44]	; (800ad84 <LL_DMA_SetDataLength+0x40>)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	18d3      	adds	r3, r2, r3
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	001a      	movs	r2, r3
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	18d3      	adds	r3, r2, r3
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	0c1b      	lsrs	r3, r3, #16
 800ad66:	0419      	lsls	r1, r3, #16
 800ad68:	4a06      	ldr	r2, [pc, #24]	; (800ad84 <LL_DMA_SetDataLength+0x40>)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	18d3      	adds	r3, r2, r3
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	001a      	movs	r2, r3
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	18d3      	adds	r3, r2, r3
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	605a      	str	r2, [r3, #4]
}
 800ad7c:	46c0      	nop			; (mov r8, r8)
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	b006      	add	sp, #24
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	0801a368 	.word	0x0801a368

0800ad88 <LL_DMA_SetMemoryAddress>:
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800ad98:	4a06      	ldr	r2, [pc, #24]	; (800adb4 <LL_DMA_SetMemoryAddress+0x2c>)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	18d3      	adds	r3, r2, r3
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	001a      	movs	r2, r3
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	18d3      	adds	r3, r2, r3
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	60da      	str	r2, [r3, #12]
}
 800adaa:	46c0      	nop			; (mov r8, r8)
 800adac:	46bd      	mov	sp, r7
 800adae:	b006      	add	sp, #24
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	46c0      	nop			; (mov r8, r8)
 800adb4:	0801a368 	.word	0x0801a368

0800adb8 <LL_DMA_SetPeriphAddress>:
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800adc8:	4a06      	ldr	r2, [pc, #24]	; (800ade4 <LL_DMA_SetPeriphAddress+0x2c>)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	18d3      	adds	r3, r2, r3
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	001a      	movs	r2, r3
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	18d3      	adds	r3, r2, r3
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	609a      	str	r2, [r3, #8]
}
 800adda:	46c0      	nop			; (mov r8, r8)
 800addc:	46bd      	mov	sp, r7
 800adde:	b006      	add	sp, #24
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	0801a368 	.word	0x0801a368

0800ade8 <LL_DMA_SetPeriphRequest>:
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	0a9b      	lsrs	r3, r3, #10
 800adf8:	4a0f      	ldr	r2, [pc, #60]	; (800ae38 <LL_DMA_SetPeriphRequest+0x50>)
 800adfa:	405a      	eors	r2, r3
 800adfc:	0013      	movs	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	18d3      	adds	r3, r2, r3
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4a0b      	ldr	r2, [pc, #44]	; (800ae3c <LL_DMA_SetPeriphRequest+0x54>)
 800ae0e:	4694      	mov	ip, r2
 800ae10:	4463      	add	r3, ip
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	227f      	movs	r2, #127	; 0x7f
 800ae16:	4393      	bics	r3, r2
 800ae18:	0019      	movs	r1, r3
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	18d3      	adds	r3, r2, r3
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4a06      	ldr	r2, [pc, #24]	; (800ae3c <LL_DMA_SetPeriphRequest+0x54>)
 800ae24:	4694      	mov	ip, r2
 800ae26:	4463      	add	r3, ip
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	601a      	str	r2, [r3, #0]
}
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	46bd      	mov	sp, r7
 800ae32:	b006      	add	sp, #24
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	46c0      	nop			; (mov r8, r8)
 800ae38:	00100080 	.word	0x00100080
 800ae3c:	40020800 	.word	0x40020800

0800ae40 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ae54:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800ae5a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800ae60:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800ae66:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800ae6c:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ae72:	431a      	orrs	r2, r3
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	0018      	movs	r0, r3
 800ae7a:	f7ff ff3d 	bl	800acf8 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	0018      	movs	r0, r3
 800ae88:	f7ff ff7e 	bl	800ad88 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68b9      	ldr	r1, [r7, #8]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	0018      	movs	r0, r3
 800ae96:	f7ff ff8f 	bl	800adb8 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1a      	ldr	r2, [r3, #32]
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	0018      	movs	r0, r3
 800aea4:	f7ff ff4e 	bl	800ad44 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	f7ff ff99 	bl	800ade8 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	0018      	movs	r0, r3
 800aeba:	46bd      	mov	sp, r7
 800aebc:	b004      	add	sp, #16
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	629a      	str	r2, [r3, #40]	; 0x28
}
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	46bd      	mov	sp, r7
 800af0e:	b002      	add	sp, #8
 800af10:	bd80      	pop	{r7, pc}

0800af12 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6819      	ldr	r1, [r3, #0]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	435b      	muls	r3, r3
 800af26:	001a      	movs	r2, r3
 800af28:	0013      	movs	r3, r2
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	189b      	adds	r3, r3, r2
 800af2e:	43db      	mvns	r3, r3
 800af30:	400b      	ands	r3, r1
 800af32:	001a      	movs	r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	435b      	muls	r3, r3
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	434b      	muls	r3, r1
 800af3c:	431a      	orrs	r2, r3
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	601a      	str	r2, [r3, #0]
}
 800af42:	46c0      	nop			; (mov r8, r8)
 800af44:	46bd      	mov	sp, r7
 800af46:	b004      	add	sp, #16
 800af48:	bd80      	pop	{r7, pc}

0800af4a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	43d2      	mvns	r2, r2
 800af5e:	401a      	ands	r2, r3
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	434b      	muls	r3, r1
 800af66:	431a      	orrs	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	605a      	str	r2, [r3, #4]
}
 800af6c:	46c0      	nop			; (mov r8, r8)
 800af6e:	46bd      	mov	sp, r7
 800af70:	b004      	add	sp, #16
 800af72:	bd80      	pop	{r7, pc}

0800af74 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6899      	ldr	r1, [r3, #8]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	435b      	muls	r3, r3
 800af88:	001a      	movs	r2, r3
 800af8a:	0013      	movs	r3, r2
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	189b      	adds	r3, r3, r2
 800af90:	43db      	mvns	r3, r3
 800af92:	400b      	ands	r3, r1
 800af94:	001a      	movs	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	435b      	muls	r3, r3
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	434b      	muls	r3, r1
 800af9e:	431a      	orrs	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	609a      	str	r2, [r3, #8]
}
 800afa4:	46c0      	nop			; (mov r8, r8)
 800afa6:	46bd      	mov	sp, r7
 800afa8:	b004      	add	sp, #16
 800afaa:	bd80      	pop	{r7, pc}

0800afac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68d9      	ldr	r1, [r3, #12]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	435b      	muls	r3, r3
 800afc0:	001a      	movs	r2, r3
 800afc2:	0013      	movs	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	189b      	adds	r3, r3, r2
 800afc8:	43db      	mvns	r3, r3
 800afca:	400b      	ands	r3, r1
 800afcc:	001a      	movs	r2, r3
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	435b      	muls	r3, r3
 800afd2:	6879      	ldr	r1, [r7, #4]
 800afd4:	434b      	muls	r3, r1
 800afd6:	431a      	orrs	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	60da      	str	r2, [r3, #12]
}
 800afdc:	46c0      	nop			; (mov r8, r8)
 800afde:	46bd      	mov	sp, r7
 800afe0:	b004      	add	sp, #16
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a19      	ldr	r1, [r3, #32]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	435b      	muls	r3, r3
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	4353      	muls	r3, r2
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	435a      	muls	r2, r3
 800b000:	0013      	movs	r3, r2
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	43db      	mvns	r3, r3
 800b008:	400b      	ands	r3, r1
 800b00a:	001a      	movs	r2, r3
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	435b      	muls	r3, r3
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	434b      	muls	r3, r1
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	434b      	muls	r3, r1
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	434b      	muls	r3, r1
 800b01c:	431a      	orrs	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800b022:	46c0      	nop			; (mov r8, r8)
 800b024:	46bd      	mov	sp, r7
 800b026:	b004      	add	sp, #16
 800b028:	bd80      	pop	{r7, pc}

0800b02a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	0a1b      	lsrs	r3, r3, #8
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0a12      	lsrs	r2, r2, #8
 800b042:	4353      	muls	r3, r2
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	0a12      	lsrs	r2, r2, #8
 800b048:	4353      	muls	r3, r2
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	0a12      	lsrs	r2, r2, #8
 800b04e:	435a      	muls	r2, r3
 800b050:	0013      	movs	r3, r2
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	1a9b      	subs	r3, r3, r2
 800b056:	43db      	mvns	r3, r3
 800b058:	400b      	ands	r3, r1
 800b05a:	001a      	movs	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	0a1b      	lsrs	r3, r3, #8
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	0a09      	lsrs	r1, r1, #8
 800b064:	434b      	muls	r3, r1
 800b066:	68b9      	ldr	r1, [r7, #8]
 800b068:	0a09      	lsrs	r1, r1, #8
 800b06a:	434b      	muls	r3, r1
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	0a09      	lsrs	r1, r1, #8
 800b070:	434b      	muls	r3, r1
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	434b      	muls	r3, r1
 800b076:	431a      	orrs	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800b07c:	46c0      	nop			; (mov r8, r8)
 800b07e:	46bd      	mov	sp, r7
 800b080:	b004      	add	sp, #16
 800b082:	bd80      	pop	{r7, pc}

0800b084 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800b092:	e047      	b.n	800b124 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2101      	movs	r1, #1
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4091      	lsls	r1, r2
 800b09e:	000a      	movs	r2, r1
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d039      	beq.n	800b11e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d003      	beq.n	800b0ba <LL_GPIO_Init+0x36>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d10d      	bne.n	800b0d6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f7ff ff56 	bl	800af74 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f7ff ff3a 	bl	800af4a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	691a      	ldr	r2, [r3, #16]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f7ff ff64 	bl	800afac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d111      	bne.n	800b110 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2bff      	cmp	r3, #255	; 0xff
 800b0f0:	d807      	bhi.n	800b102 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	695a      	ldr	r2, [r3, #20]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	f7ff ff72 	bl	800afe4 <LL_GPIO_SetAFPin_0_7>
 800b100:	e006      	b.n	800b110 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	0018      	movs	r0, r3
 800b10c:	f7ff ff8d 	bl	800b02a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	0018      	movs	r0, r3
 800b11a:	f7ff fefa 	bl	800af12 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3301      	adds	r3, #1
 800b122:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	40da      	lsrs	r2, r3
 800b12c:	1e13      	subs	r3, r2, #0
 800b12e:	d1b1      	bne.n	800b094 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800b130:	2300      	movs	r3, #0
}
 800b132:	0018      	movs	r0, r3
 800b134:	46bd      	mov	sp, r7
 800b136:	b004      	add	sp, #16
 800b138:	bd80      	pop	{r7, pc}

0800b13a <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	005b      	lsls	r3, r3, #1
 800b148:	085a      	lsrs	r2, r3, #1
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	601a      	str	r2, [r3, #0]
}
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	46bd      	mov	sp, r7
 800b152:	b002      	add	sp, #8
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <LL_APB1_GRP1_EnableClock>:
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <LL_APB1_GRP1_EnableClock+0x28>)
 800b162:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b164:	4b06      	ldr	r3, [pc, #24]	; (800b180 <LL_APB1_GRP1_EnableClock+0x28>)
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	430a      	orrs	r2, r1
 800b16a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800b16c:	4b04      	ldr	r3, [pc, #16]	; (800b180 <LL_APB1_GRP1_EnableClock+0x28>)
 800b16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	4013      	ands	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b176:	68fb      	ldr	r3, [r7, #12]
}
 800b178:	46c0      	nop			; (mov r8, r8)
 800b17a:	46bd      	mov	sp, r7
 800b17c:	b004      	add	sp, #16
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	40021000 	.word	0x40021000

0800b184 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a16      	ldr	r2, [pc, #88]	; (800b1ec <LL_UCPD_Init+0x68>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d104      	bne.n	800b1a0 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800b196:	2380      	movs	r3, #128	; 0x80
 800b198:	049b      	lsls	r3, r3, #18
 800b19a:	0018      	movs	r0, r3
 800b19c:	f7ff ffdc 	bl	800b158 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <LL_UCPD_Init+0x6c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d104      	bne.n	800b1b2 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	04db      	lsls	r3, r3, #19
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f7ff ffd3 	bl	800b158 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f7ff ffc0 	bl	800b13a <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a0d      	ldr	r2, [pc, #52]	; (800b1f4 <LL_UCPD_Init+0x70>)
 800b1c0:	401a      	ands	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	6819      	ldr	r1, [r3, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	02db      	lsls	r3, r3, #11
 800b1cc:	4319      	orrs	r1, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	019b      	lsls	r3, r3, #6
 800b1d4:	4319      	orrs	r1, r3
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	b002      	add	sp, #8
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	4000a000 	.word	0x4000a000
 800b1f0:	4000a400 	.word	0x4000a400
 800b1f4:	fff10000 	.word	0xfff10000

0800b1f8 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2280      	movs	r2, #128	; 0x80
 800b204:	0292      	lsls	r2, r2, #10
 800b206:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2207      	movs	r2, #7
 800b20c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2210      	movs	r2, #16
 800b212:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	220d      	movs	r2, #13
 800b218:	60da      	str	r2, [r3, #12]
}
 800b21a:	46c0      	nop			; (mov r8, r8)
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b002      	add	sp, #8
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b232:	4b05      	ldr	r3, [pc, #20]	; (800b248 <USB_EnableGlobalInt+0x24>)
 800b234:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	0018      	movs	r0, r3
 800b240:	46bd      	mov	sp, r7
 800b242:	b004      	add	sp, #16
 800b244:	bd80      	pop	{r7, pc}
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	0000bf80 	.word	0x0000bf80

0800b24c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <USB_DisableGlobalInt+0x24>)
 800b256:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	43d2      	mvns	r2, r2
 800b260:	401a      	ands	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	0018      	movs	r0, r3
 800b26a:	46bd      	mov	sp, r7
 800b26c:	b004      	add	sp, #16
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	0000bf80 	.word	0x0000bf80

0800b274 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	000a      	movs	r2, r1
 800b27e:	1cfb      	adds	r3, r7, #3
 800b280:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800b282:	1cfb      	adds	r3, r7, #3
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	085a      	lsrs	r2, r3, #1
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	641a      	str	r2, [r3, #64]	; 0x40
 800b296:	e006      	b.n	800b2a6 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29c:	2280      	movs	r2, #128	; 0x80
 800b29e:	0612      	lsls	r2, r2, #24
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	b002      	add	sp, #8
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	b590      	push	{r4, r7, lr}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	2004      	movs	r0, #4
 800b2bc:	2410      	movs	r4, #16
 800b2be:	1900      	adds	r0, r0, r4
 800b2c0:	2408      	movs	r4, #8
 800b2c2:	46a4      	mov	ip, r4
 800b2c4:	44bc      	add	ip, r7
 800b2c6:	4460      	add	r0, ip
 800b2c8:	6001      	str	r1, [r0, #0]
 800b2ca:	6042      	str	r2, [r0, #4]
 800b2cc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	2201      	movs	r2, #1
 800b2da:	4393      	bics	r3, r2
 800b2dc:	001a      	movs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f7ff ffc4 	bl	800b274 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	0018      	movs	r0, r3
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	b003      	add	sp, #12
 800b2fa:	bc90      	pop	{r4, r7}
 800b2fc:	bc08      	pop	{r3}
 800b2fe:	b004      	add	sp, #16
 800b300:	4718      	bx	r3
	...

0800b304 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b09e      	sub	sp, #120	; 0x78
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b30e:	2377      	movs	r3, #119	; 0x77
 800b310:	18fb      	adds	r3, r7, r3
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	18d3      	adds	r3, r2, r3
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4ad8      	ldr	r2, [pc, #864]	; (800b684 <USB_ActivateEndpoint+0x380>)
 800b324:	4013      	ands	r3, r2
 800b326:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	78db      	ldrb	r3, [r3, #3]
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d00e      	beq.n	800b34e <USB_ActivateEndpoint+0x4a>
 800b330:	dc19      	bgt.n	800b366 <USB_ActivateEndpoint+0x62>
 800b332:	2b02      	cmp	r3, #2
 800b334:	d01c      	beq.n	800b370 <USB_ActivateEndpoint+0x6c>
 800b336:	dc16      	bgt.n	800b366 <USB_ActivateEndpoint+0x62>
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <USB_ActivateEndpoint+0x3e>
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d00c      	beq.n	800b35a <USB_ActivateEndpoint+0x56>
 800b340:	e011      	b.n	800b366 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b344:	2280      	movs	r2, #128	; 0x80
 800b346:	0092      	lsls	r2, r2, #2
 800b348:	4313      	orrs	r3, r2
 800b34a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800b34c:	e011      	b.n	800b372 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b34e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b350:	22c0      	movs	r2, #192	; 0xc0
 800b352:	00d2      	lsls	r2, r2, #3
 800b354:	4313      	orrs	r3, r2
 800b356:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800b358:	e00b      	b.n	800b372 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b35a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b35c:	2280      	movs	r2, #128	; 0x80
 800b35e:	00d2      	lsls	r2, r2, #3
 800b360:	4313      	orrs	r3, r2
 800b362:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800b364:	e005      	b.n	800b372 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800b366:	2377      	movs	r3, #119	; 0x77
 800b368:	18fb      	adds	r3, r7, r3
 800b36a:	2201      	movs	r2, #1
 800b36c:	701a      	strb	r2, [r3, #0]
      break;
 800b36e:	e000      	b.n	800b372 <USB_ActivateEndpoint+0x6e>
      break;
 800b370:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	18d3      	adds	r3, r2, r3
 800b37c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b37e:	49c2      	ldr	r1, [pc, #776]	; (800b688 <USB_ActivateEndpoint+0x384>)
 800b380:	430a      	orrs	r2, r1
 800b382:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	18d3      	adds	r3, r2, r3
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4abe      	ldr	r2, [pc, #760]	; (800b68c <USB_ActivateEndpoint+0x388>)
 800b392:	4013      	ands	r3, r2
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	7812      	ldrb	r2, [r2, #0]
 800b398:	4313      	orrs	r3, r2
 800b39a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	18d3      	adds	r3, r2, r3
 800b3a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3a8:	49b7      	ldr	r1, [pc, #732]	; (800b688 <USB_ActivateEndpoint+0x384>)
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	7a9b      	ldrb	r3, [r3, #10]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d000      	beq.n	800b3b8 <USB_ActivateEndpoint+0xb4>
 800b3b6:	e177      	b.n	800b6a8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	785b      	ldrb	r3, [r3, #1]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d06e      	beq.n	800b49e <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	4ab2      	ldr	r2, [pc, #712]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b3c8:	4694      	mov	ip, r2
 800b3ca:	4463      	add	r3, ip
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	49ae      	ldr	r1, [pc, #696]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b3d6:	468c      	mov	ip, r1
 800b3d8:	4463      	add	r3, ip
 800b3da:	0c12      	lsrs	r2, r2, #16
 800b3dc:	0412      	lsls	r2, r2, #16
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4aaa      	ldr	r2, [pc, #680]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b3e8:	4694      	mov	ip, r2
 800b3ea:	4463      	add	r3, ip
 800b3ec:	6819      	ldr	r1, [r3, #0]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	889b      	ldrh	r3, [r3, #4]
 800b3f2:	089b      	lsrs	r3, r3, #2
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	009a      	lsls	r2, r3, #2
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	48a4      	ldr	r0, [pc, #656]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b400:	4684      	mov	ip, r0
 800b402:	4463      	add	r3, ip
 800b404:	430a      	orrs	r2, r1
 800b406:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	18d3      	adds	r3, r2, r3
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	61bb      	str	r3, [r7, #24]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2240      	movs	r2, #64	; 0x40
 800b41a:	4013      	ands	r3, r2
 800b41c:	d011      	beq.n	800b442 <USB_ActivateEndpoint+0x13e>
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	18d3      	adds	r3, r2, r3
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a98      	ldr	r2, [pc, #608]	; (800b68c <USB_ActivateEndpoint+0x388>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	18d3      	adds	r3, r2, r3
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	4995      	ldr	r1, [pc, #596]	; (800b694 <USB_ActivateEndpoint+0x390>)
 800b43e:	430a      	orrs	r2, r1
 800b440:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	78db      	ldrb	r3, [r3, #3]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d016      	beq.n	800b478 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	18d3      	adds	r3, r2, r3
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a90      	ldr	r2, [pc, #576]	; (800b698 <USB_ActivateEndpoint+0x394>)
 800b458:	4013      	ands	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2220      	movs	r2, #32
 800b460:	4053      	eors	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	18d3      	adds	r3, r2, r3
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4985      	ldr	r1, [pc, #532]	; (800b688 <USB_ActivateEndpoint+0x384>)
 800b472:	430a      	orrs	r2, r1
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	e270      	b.n	800b95a <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	18d3      	adds	r3, r2, r3
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a84      	ldr	r2, [pc, #528]	; (800b698 <USB_ActivateEndpoint+0x394>)
 800b486:	4013      	ands	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	18d3      	adds	r3, r2, r3
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	497c      	ldr	r1, [pc, #496]	; (800b688 <USB_ActivateEndpoint+0x384>)
 800b498:	430a      	orrs	r2, r1
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e25d      	b.n	800b95a <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	4a7a      	ldr	r2, [pc, #488]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b4a6:	4694      	mov	ip, r2
 800b4a8:	4463      	add	r3, ip
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	4977      	ldr	r1, [pc, #476]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b4b4:	468c      	mov	ip, r1
 800b4b6:	4463      	add	r3, ip
 800b4b8:	0c12      	lsrs	r2, r2, #16
 800b4ba:	0412      	lsls	r2, r2, #16
 800b4bc:	605a      	str	r2, [r3, #4]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	4a72      	ldr	r2, [pc, #456]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b4c6:	4694      	mov	ip, r2
 800b4c8:	4463      	add	r3, ip
 800b4ca:	6859      	ldr	r1, [r3, #4]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	889b      	ldrh	r3, [r3, #4]
 800b4d0:	089b      	lsrs	r3, r3, #2
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	009a      	lsls	r2, r3, #2
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	486c      	ldr	r0, [pc, #432]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b4de:	4684      	mov	ip, r0
 800b4e0:	4463      	add	r3, ip
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	4a68      	ldr	r2, [pc, #416]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b4ee:	4694      	mov	ip, r2
 800b4f0:	4463      	add	r3, ip
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	4965      	ldr	r1, [pc, #404]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b4fc:	468c      	mov	ip, r1
 800b4fe:	4463      	add	r3, ip
 800b500:	0412      	lsls	r2, r2, #16
 800b502:	0c12      	lsrs	r2, r2, #16
 800b504:	605a      	str	r2, [r3, #4]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b3e      	cmp	r3, #62	; 0x3e
 800b50c:	d920      	bls.n	800b550 <USB_ActivateEndpoint+0x24c>
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	095b      	lsrs	r3, r3, #5
 800b514:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	221f      	movs	r2, #31
 800b51c:	4013      	ands	r3, r2
 800b51e:	d102      	bne.n	800b526 <USB_ActivateEndpoint+0x222>
 800b520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b522:	3b01      	subs	r3, #1
 800b524:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	4a58      	ldr	r2, [pc, #352]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b52e:	4694      	mov	ip, r2
 800b530:	4463      	add	r3, ip
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b536:	069b      	lsls	r3, r3, #26
 800b538:	431a      	orrs	r2, r3
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	00db      	lsls	r3, r3, #3
 800b540:	4953      	ldr	r1, [pc, #332]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b542:	468c      	mov	ip, r1
 800b544:	4463      	add	r3, ip
 800b546:	2180      	movs	r1, #128	; 0x80
 800b548:	0609      	lsls	r1, r1, #24
 800b54a:	430a      	orrs	r2, r1
 800b54c:	605a      	str	r2, [r3, #4]
 800b54e:	e042      	b.n	800b5d6 <USB_ActivateEndpoint+0x2d2>
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d121      	bne.n	800b59c <USB_ActivateEndpoint+0x298>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	4a4c      	ldr	r2, [pc, #304]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b560:	4694      	mov	ip, r2
 800b562:	4463      	add	r3, ip
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	4948      	ldr	r1, [pc, #288]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b56e:	468c      	mov	ip, r1
 800b570:	4463      	add	r3, ip
 800b572:	494a      	ldr	r1, [pc, #296]	; (800b69c <USB_ActivateEndpoint+0x398>)
 800b574:	400a      	ands	r2, r1
 800b576:	605a      	str	r2, [r3, #4]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	4a44      	ldr	r2, [pc, #272]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b580:	4694      	mov	ip, r2
 800b582:	4463      	add	r3, ip
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4940      	ldr	r1, [pc, #256]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b58e:	468c      	mov	ip, r1
 800b590:	4463      	add	r3, ip
 800b592:	2180      	movs	r1, #128	; 0x80
 800b594:	0609      	lsls	r1, r1, #24
 800b596:	430a      	orrs	r2, r1
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	e01c      	b.n	800b5d6 <USB_ActivateEndpoint+0x2d2>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	085b      	lsrs	r3, r3, #1
 800b5a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	d002      	beq.n	800b5b4 <USB_ActivateEndpoint+0x2b0>
 800b5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	4a35      	ldr	r2, [pc, #212]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b5bc:	4694      	mov	ip, r2
 800b5be:	4463      	add	r3, ip
 800b5c0:	6859      	ldr	r1, [r3, #4]
 800b5c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c4:	069a      	lsls	r2, r3, #26
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	4830      	ldr	r0, [pc, #192]	; (800b690 <USB_ActivateEndpoint+0x38c>)
 800b5ce:	4684      	mov	ip, r0
 800b5d0:	4463      	add	r3, ip
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	18d3      	adds	r3, r2, r3
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5e6:	2380      	movs	r3, #128	; 0x80
 800b5e8:	01db      	lsls	r3, r3, #7
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	d011      	beq.n	800b612 <USB_ActivateEndpoint+0x30e>
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	18d3      	adds	r3, r2, r3
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a24      	ldr	r2, [pc, #144]	; (800b68c <USB_ActivateEndpoint+0x388>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	18d3      	adds	r3, r2, r3
 800b60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60c:	4924      	ldr	r1, [pc, #144]	; (800b6a0 <USB_ActivateEndpoint+0x39c>)
 800b60e:	430a      	orrs	r2, r1
 800b610:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d11c      	bne.n	800b654 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	18d3      	adds	r3, r2, r3
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a1f      	ldr	r2, [pc, #124]	; (800b6a4 <USB_ActivateEndpoint+0x3a0>)
 800b628:	4013      	ands	r3, r2
 800b62a:	61fb      	str	r3, [r7, #28]
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	2280      	movs	r2, #128	; 0x80
 800b630:	0152      	lsls	r2, r2, #5
 800b632:	4053      	eors	r3, r2
 800b634:	61fb      	str	r3, [r7, #28]
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	2280      	movs	r2, #128	; 0x80
 800b63a:	0192      	lsls	r2, r2, #6
 800b63c:	4053      	eors	r3, r2
 800b63e:	61fb      	str	r3, [r7, #28]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	18d3      	adds	r3, r2, r3
 800b64a:	69fa      	ldr	r2, [r7, #28]
 800b64c:	490e      	ldr	r1, [pc, #56]	; (800b688 <USB_ActivateEndpoint+0x384>)
 800b64e:	430a      	orrs	r2, r1
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	e182      	b.n	800b95a <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	18d3      	adds	r3, r2, r3
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a10      	ldr	r2, [pc, #64]	; (800b6a4 <USB_ActivateEndpoint+0x3a0>)
 800b662:	4013      	ands	r3, r2
 800b664:	623b      	str	r3, [r7, #32]
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	2280      	movs	r2, #128	; 0x80
 800b66a:	0192      	lsls	r2, r2, #6
 800b66c:	4053      	eors	r3, r2
 800b66e:	623b      	str	r3, [r7, #32]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	18d3      	adds	r3, r2, r3
 800b67a:	6a3a      	ldr	r2, [r7, #32]
 800b67c:	4902      	ldr	r1, [pc, #8]	; (800b688 <USB_ActivateEndpoint+0x384>)
 800b67e:	430a      	orrs	r2, r1
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	e16a      	b.n	800b95a <USB_ActivateEndpoint+0x656>
 800b684:	07ff898f 	.word	0x07ff898f
 800b688:	00008080 	.word	0x00008080
 800b68c:	07ff8f8f 	.word	0x07ff8f8f
 800b690:	40009800 	.word	0x40009800
 800b694:	000080c0 	.word	0x000080c0
 800b698:	07ff8fbf 	.word	0x07ff8fbf
 800b69c:	83ffffff 	.word	0x83ffffff
 800b6a0:	0000c080 	.word	0x0000c080
 800b6a4:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	78db      	ldrb	r3, [r3, #3]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d112      	bne.n	800b6d6 <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	18d3      	adds	r3, r2, r3
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4aaa      	ldr	r2, [pc, #680]	; (800b968 <USB_ActivateEndpoint+0x664>)
 800b6be:	4013      	ands	r3, r2
 800b6c0:	663b      	str	r3, [r7, #96]	; 0x60
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	18d3      	adds	r3, r2, r3
 800b6cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6ce:	49a7      	ldr	r1, [pc, #668]	; (800b96c <USB_ActivateEndpoint+0x668>)
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e011      	b.n	800b6fa <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	18d3      	adds	r3, r2, r3
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4aa3      	ldr	r2, [pc, #652]	; (800b970 <USB_ActivateEndpoint+0x66c>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	667b      	str	r3, [r7, #100]	; 0x64
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	18d3      	adds	r3, r2, r3
 800b6f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b6f4:	499f      	ldr	r1, [pc, #636]	; (800b974 <USB_ActivateEndpoint+0x670>)
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	4a9d      	ldr	r2, [pc, #628]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b702:	4694      	mov	ip, r2
 800b704:	4463      	add	r3, ip
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	499a      	ldr	r1, [pc, #616]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b710:	468c      	mov	ip, r1
 800b712:	4463      	add	r3, ip
 800b714:	0c12      	lsrs	r2, r2, #16
 800b716:	0412      	lsls	r2, r2, #16
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	4a95      	ldr	r2, [pc, #596]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b722:	4694      	mov	ip, r2
 800b724:	4463      	add	r3, ip
 800b726:	6819      	ldr	r1, [r3, #0]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	88db      	ldrh	r3, [r3, #6]
 800b72c:	089b      	lsrs	r3, r3, #2
 800b72e:	b29b      	uxth	r3, r3
 800b730:	009a      	lsls	r2, r3, #2
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	488f      	ldr	r0, [pc, #572]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b73a:	4684      	mov	ip, r0
 800b73c:	4463      	add	r3, ip
 800b73e:	430a      	orrs	r2, r1
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	4a8b      	ldr	r2, [pc, #556]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b74a:	4694      	mov	ip, r2
 800b74c:	4463      	add	r3, ip
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	4988      	ldr	r1, [pc, #544]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b758:	468c      	mov	ip, r1
 800b75a:	4463      	add	r3, ip
 800b75c:	0c12      	lsrs	r2, r2, #16
 800b75e:	0412      	lsls	r2, r2, #16
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4a83      	ldr	r2, [pc, #524]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b76a:	4694      	mov	ip, r2
 800b76c:	4463      	add	r3, ip
 800b76e:	6859      	ldr	r1, [r3, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	891b      	ldrh	r3, [r3, #8]
 800b774:	089b      	lsrs	r3, r3, #2
 800b776:	b29b      	uxth	r3, r3
 800b778:	009a      	lsls	r2, r3, #2
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	487d      	ldr	r0, [pc, #500]	; (800b978 <USB_ActivateEndpoint+0x674>)
 800b782:	4684      	mov	ip, r0
 800b784:	4463      	add	r3, ip
 800b786:	430a      	orrs	r2, r1
 800b788:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	785b      	ldrb	r3, [r3, #1]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d169      	bne.n	800b866 <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	18d3      	adds	r3, r2, r3
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7a2:	2380      	movs	r3, #128	; 0x80
 800b7a4:	01db      	lsls	r3, r3, #7
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	d011      	beq.n	800b7ce <USB_ActivateEndpoint+0x4ca>
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	18d3      	adds	r3, r2, r3
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a6c      	ldr	r2, [pc, #432]	; (800b968 <USB_ActivateEndpoint+0x664>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	18d3      	adds	r3, r2, r3
 800b7c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7c8:	496c      	ldr	r1, [pc, #432]	; (800b97c <USB_ActivateEndpoint+0x678>)
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	18d3      	adds	r3, r2, r3
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	2240      	movs	r2, #64	; 0x40
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	d011      	beq.n	800b808 <USB_ActivateEndpoint+0x504>
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	18d3      	adds	r3, r2, r3
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a5d      	ldr	r2, [pc, #372]	; (800b968 <USB_ActivateEndpoint+0x664>)
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	18d3      	adds	r3, r2, r3
 800b800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b802:	495f      	ldr	r1, [pc, #380]	; (800b980 <USB_ActivateEndpoint+0x67c>)
 800b804:	430a      	orrs	r2, r1
 800b806:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	18d3      	adds	r3, r2, r3
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a5b      	ldr	r2, [pc, #364]	; (800b984 <USB_ActivateEndpoint+0x680>)
 800b816:	4013      	ands	r3, r2
 800b818:	633b      	str	r3, [r7, #48]	; 0x30
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	2280      	movs	r2, #128	; 0x80
 800b81e:	0152      	lsls	r2, r2, #5
 800b820:	4053      	eors	r3, r2
 800b822:	633b      	str	r3, [r7, #48]	; 0x30
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	2280      	movs	r2, #128	; 0x80
 800b828:	0192      	lsls	r2, r2, #6
 800b82a:	4053      	eors	r3, r2
 800b82c:	633b      	str	r3, [r7, #48]	; 0x30
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	18d3      	adds	r3, r2, r3
 800b838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83a:	494e      	ldr	r1, [pc, #312]	; (800b974 <USB_ActivateEndpoint+0x670>)
 800b83c:	430a      	orrs	r2, r1
 800b83e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	18d3      	adds	r3, r2, r3
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a4e      	ldr	r2, [pc, #312]	; (800b988 <USB_ActivateEndpoint+0x684>)
 800b84e:	4013      	ands	r3, r2
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	18d3      	adds	r3, r2, r3
 800b85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b85e:	4945      	ldr	r1, [pc, #276]	; (800b974 <USB_ActivateEndpoint+0x670>)
 800b860:	430a      	orrs	r2, r1
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	e079      	b.n	800b95a <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	18d3      	adds	r3, r2, r3
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b876:	2380      	movs	r3, #128	; 0x80
 800b878:	01db      	lsls	r3, r3, #7
 800b87a:	4013      	ands	r3, r2
 800b87c:	d011      	beq.n	800b8a2 <USB_ActivateEndpoint+0x59e>
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	18d3      	adds	r3, r2, r3
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a37      	ldr	r2, [pc, #220]	; (800b968 <USB_ActivateEndpoint+0x664>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	18d3      	adds	r3, r2, r3
 800b89a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b89c:	4937      	ldr	r1, [pc, #220]	; (800b97c <USB_ActivateEndpoint+0x678>)
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	18d3      	adds	r3, r2, r3
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	657b      	str	r3, [r7, #84]	; 0x54
 800b8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b2:	2240      	movs	r2, #64	; 0x40
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	d011      	beq.n	800b8dc <USB_ActivateEndpoint+0x5d8>
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	18d3      	adds	r3, r2, r3
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a28      	ldr	r2, [pc, #160]	; (800b968 <USB_ActivateEndpoint+0x664>)
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	18d3      	adds	r3, r2, r3
 800b8d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8d6:	492a      	ldr	r1, [pc, #168]	; (800b980 <USB_ActivateEndpoint+0x67c>)
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	78db      	ldrb	r3, [r3, #3]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d016      	beq.n	800b912 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	18d3      	adds	r3, r2, r3
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a25      	ldr	r2, [pc, #148]	; (800b988 <USB_ActivateEndpoint+0x684>)
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	4053      	eors	r3, r2
 800b8fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	18d3      	adds	r3, r2, r3
 800b908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b90a:	491a      	ldr	r1, [pc, #104]	; (800b974 <USB_ActivateEndpoint+0x670>)
 800b90c:	430a      	orrs	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	e011      	b.n	800b936 <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	18d3      	adds	r3, r2, r3
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a1a      	ldr	r2, [pc, #104]	; (800b988 <USB_ActivateEndpoint+0x684>)
 800b920:	4013      	ands	r3, r2
 800b922:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	18d3      	adds	r3, r2, r3
 800b92e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b930:	4910      	ldr	r1, [pc, #64]	; (800b974 <USB_ActivateEndpoint+0x670>)
 800b932:	430a      	orrs	r2, r1
 800b934:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	18d3      	adds	r3, r2, r3
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a10      	ldr	r2, [pc, #64]	; (800b984 <USB_ActivateEndpoint+0x680>)
 800b944:	4013      	ands	r3, r2
 800b946:	647b      	str	r3, [r7, #68]	; 0x44
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	18d3      	adds	r3, r2, r3
 800b952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b954:	4907      	ldr	r1, [pc, #28]	; (800b974 <USB_ActivateEndpoint+0x670>)
 800b956:	430a      	orrs	r2, r1
 800b958:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b95a:	2377      	movs	r3, #119	; 0x77
 800b95c:	18fb      	adds	r3, r7, r3
 800b95e:	781b      	ldrb	r3, [r3, #0]
}
 800b960:	0018      	movs	r0, r3
 800b962:	46bd      	mov	sp, r7
 800b964:	b01e      	add	sp, #120	; 0x78
 800b966:	bd80      	pop	{r7, pc}
 800b968:	07ff8f8f 	.word	0x07ff8f8f
 800b96c:	00008180 	.word	0x00008180
 800b970:	07ff8e8f 	.word	0x07ff8e8f
 800b974:	00008080 	.word	0x00008080
 800b978:	40009800 	.word	0x40009800
 800b97c:	0000c080 	.word	0x0000c080
 800b980:	000080c0 	.word	0x000080c0
 800b984:	07ffbf8f 	.word	0x07ffbf8f
 800b988:	07ff8fbf 	.word	0x07ff8fbf

0800b98c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b096      	sub	sp, #88	; 0x58
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	7a9b      	ldrb	r3, [r3, #10]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d164      	bne.n	800ba68 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d02f      	beq.n	800ba06 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	18d3      	adds	r3, r2, r3
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	613b      	str	r3, [r7, #16]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2240      	movs	r2, #64	; 0x40
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	d011      	beq.n	800b9e0 <USB_DeactivateEndpoint+0x54>
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	18d3      	adds	r3, r2, r3
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a9d      	ldr	r2, [pc, #628]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	18d3      	adds	r3, r2, r3
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	499a      	ldr	r1, [pc, #616]	; (800bc44 <USB_DeactivateEndpoint+0x2b8>)
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	18d3      	adds	r3, r2, r3
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a96      	ldr	r2, [pc, #600]	; (800bc48 <USB_DeactivateEndpoint+0x2bc>)
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	60bb      	str	r3, [r7, #8]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	18d3      	adds	r3, r2, r3
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	4993      	ldr	r1, [pc, #588]	; (800bc4c <USB_DeactivateEndpoint+0x2c0>)
 800ba00:	430a      	orrs	r2, r1
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e117      	b.n	800bc36 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	18d3      	adds	r3, r2, r3
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	69fa      	ldr	r2, [r7, #28]
 800ba16:	2380      	movs	r3, #128	; 0x80
 800ba18:	01db      	lsls	r3, r3, #7
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	d011      	beq.n	800ba42 <USB_DeactivateEndpoint+0xb6>
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	18d3      	adds	r3, r2, r3
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a85      	ldr	r2, [pc, #532]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	18d3      	adds	r3, r2, r3
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	4984      	ldr	r1, [pc, #528]	; (800bc50 <USB_DeactivateEndpoint+0x2c4>)
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	18d3      	adds	r3, r2, r3
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a81      	ldr	r2, [pc, #516]	; (800bc54 <USB_DeactivateEndpoint+0x2c8>)
 800ba50:	4013      	ands	r3, r2
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	18d3      	adds	r3, r2, r3
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	497a      	ldr	r1, [pc, #488]	; (800bc4c <USB_DeactivateEndpoint+0x2c0>)
 800ba62:	430a      	orrs	r2, r1
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	e0e6      	b.n	800bc36 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	785b      	ldrb	r3, [r3, #1]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d171      	bne.n	800bb54 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	18d3      	adds	r3, r2, r3
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba80:	2380      	movs	r3, #128	; 0x80
 800ba82:	01db      	lsls	r3, r3, #7
 800ba84:	4013      	ands	r3, r2
 800ba86:	d011      	beq.n	800baac <USB_DeactivateEndpoint+0x120>
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	18d3      	adds	r3, r2, r3
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a6a      	ldr	r2, [pc, #424]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	18d3      	adds	r3, r2, r3
 800baa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa6:	496a      	ldr	r1, [pc, #424]	; (800bc50 <USB_DeactivateEndpoint+0x2c4>)
 800baa8:	430a      	orrs	r2, r1
 800baaa:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	18d3      	adds	r3, r2, r3
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	633b      	str	r3, [r7, #48]	; 0x30
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	2240      	movs	r2, #64	; 0x40
 800babe:	4013      	ands	r3, r2
 800bac0:	d011      	beq.n	800bae6 <USB_DeactivateEndpoint+0x15a>
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	18d3      	adds	r3, r2, r3
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a5c      	ldr	r2, [pc, #368]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	18d3      	adds	r3, r2, r3
 800bade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bae0:	4958      	ldr	r1, [pc, #352]	; (800bc44 <USB_DeactivateEndpoint+0x2b8>)
 800bae2:	430a      	orrs	r2, r1
 800bae4:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	18d3      	adds	r3, r2, r3
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a53      	ldr	r2, [pc, #332]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	18d3      	adds	r3, r2, r3
 800bb02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb04:	494f      	ldr	r1, [pc, #316]	; (800bc44 <USB_DeactivateEndpoint+0x2b8>)
 800bb06:	430a      	orrs	r2, r1
 800bb08:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	18d3      	adds	r3, r2, r3
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a4f      	ldr	r2, [pc, #316]	; (800bc54 <USB_DeactivateEndpoint+0x2c8>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	18d3      	adds	r3, r2, r3
 800bb26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb28:	4948      	ldr	r1, [pc, #288]	; (800bc4c <USB_DeactivateEndpoint+0x2c0>)
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	18d3      	adds	r3, r2, r3
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a43      	ldr	r2, [pc, #268]	; (800bc48 <USB_DeactivateEndpoint+0x2bc>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	623b      	str	r3, [r7, #32]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	18d3      	adds	r3, r2, r3
 800bb4a:	6a3a      	ldr	r2, [r7, #32]
 800bb4c:	493f      	ldr	r1, [pc, #252]	; (800bc4c <USB_DeactivateEndpoint+0x2c0>)
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	e070      	b.n	800bc36 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	18d3      	adds	r3, r2, r3
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	657b      	str	r3, [r7, #84]	; 0x54
 800bb62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb64:	2380      	movs	r3, #128	; 0x80
 800bb66:	01db      	lsls	r3, r3, #7
 800bb68:	4013      	ands	r3, r2
 800bb6a:	d011      	beq.n	800bb90 <USB_DeactivateEndpoint+0x204>
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	18d3      	adds	r3, r2, r3
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a31      	ldr	r2, [pc, #196]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	653b      	str	r3, [r7, #80]	; 0x50
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	18d3      	adds	r3, r2, r3
 800bb88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb8a:	4931      	ldr	r1, [pc, #196]	; (800bc50 <USB_DeactivateEndpoint+0x2c4>)
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	18d3      	adds	r3, r2, r3
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba0:	2240      	movs	r2, #64	; 0x40
 800bba2:	4013      	ands	r3, r2
 800bba4:	d011      	beq.n	800bbca <USB_DeactivateEndpoint+0x23e>
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	18d3      	adds	r3, r2, r3
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a23      	ldr	r2, [pc, #140]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	18d3      	adds	r3, r2, r3
 800bbc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbc4:	491f      	ldr	r1, [pc, #124]	; (800bc44 <USB_DeactivateEndpoint+0x2b8>)
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	18d3      	adds	r3, r2, r3
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a1a      	ldr	r2, [pc, #104]	; (800bc40 <USB_DeactivateEndpoint+0x2b4>)
 800bbd8:	4013      	ands	r3, r2
 800bbda:	647b      	str	r3, [r7, #68]	; 0x44
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	18d3      	adds	r3, r2, r3
 800bbe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbe8:	4919      	ldr	r1, [pc, #100]	; (800bc50 <USB_DeactivateEndpoint+0x2c4>)
 800bbea:	430a      	orrs	r2, r1
 800bbec:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	18d3      	adds	r3, r2, r3
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a13      	ldr	r2, [pc, #76]	; (800bc48 <USB_DeactivateEndpoint+0x2bc>)
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	643b      	str	r3, [r7, #64]	; 0x40
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	18d3      	adds	r3, r2, r3
 800bc0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc0c:	490f      	ldr	r1, [pc, #60]	; (800bc4c <USB_DeactivateEndpoint+0x2c0>)
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	18d3      	adds	r3, r2, r3
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a0d      	ldr	r2, [pc, #52]	; (800bc54 <USB_DeactivateEndpoint+0x2c8>)
 800bc20:	4013      	ands	r3, r2
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	18d3      	adds	r3, r2, r3
 800bc2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc30:	4906      	ldr	r1, [pc, #24]	; (800bc4c <USB_DeactivateEndpoint+0x2c0>)
 800bc32:	430a      	orrs	r2, r1
 800bc34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	0018      	movs	r0, r3
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	b016      	add	sp, #88	; 0x58
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	07ff8f8f 	.word	0x07ff8f8f
 800bc44:	000080c0 	.word	0x000080c0
 800bc48:	07ff8fbf 	.word	0x07ff8fbf
 800bc4c:	00008080 	.word	0x00008080
 800bc50:	0000c080 	.word	0x0000c080
 800bc54:	07ffbf8f 	.word	0x07ffbf8f

0800bc58 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bc58:	b590      	push	{r4, r7, lr}
 800bc5a:	b097      	sub	sp, #92	; 0x5c
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	785b      	ldrb	r3, [r3, #1]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d001      	beq.n	800bc6e <USB_EPStartXfer+0x16>
 800bc6a:	f000 fd24 	bl	800c6b6 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	699a      	ldr	r2, [r3, #24]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d903      	bls.n	800bc82 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	657b      	str	r3, [r7, #84]	; 0x54
 800bc80:	e002      	b.n	800bc88 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	7a9b      	ldrb	r3, [r3, #10]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d12b      	bne.n	800bce8 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	6959      	ldr	r1, [r3, #20]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	889a      	ldrh	r2, [r3, #4]
 800bc98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f001 fa3d 	bl	800d11c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	4ade      	ldr	r2, [pc, #888]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bcaa:	4694      	mov	ip, r2
 800bcac:	4463      	add	r3, ip
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	49db      	ldr	r1, [pc, #876]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bcb8:	468c      	mov	ip, r1
 800bcba:	4463      	add	r3, ip
 800bcbc:	0412      	lsls	r2, r2, #16
 800bcbe:	0c12      	lsrs	r2, r2, #16
 800bcc0:	601a      	str	r2, [r3, #0]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	4ad6      	ldr	r2, [pc, #856]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bcca:	4694      	mov	ip, r2
 800bccc:	4463      	add	r3, ip
 800bcce:	6819      	ldr	r1, [r3, #0]
 800bcd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcd2:	041a      	lsls	r2, r3, #16
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	48d2      	ldr	r0, [pc, #840]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bcdc:	4684      	mov	ip, r0
 800bcde:	4463      	add	r3, ip
 800bce0:	430a      	orrs	r2, r1
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	f000 fccb 	bl	800c67e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	78db      	ldrb	r3, [r3, #3]
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d000      	beq.n	800bcf2 <USB_EPStartXfer+0x9a>
 800bcf0:	e35e      	b.n	800c3b0 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	6a1a      	ldr	r2, [r3, #32]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d800      	bhi.n	800bd00 <USB_EPStartXfer+0xa8>
 800bcfe:	e309      	b.n	800c314 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	18d3      	adds	r3, r2, r3
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4ac6      	ldr	r2, [pc, #792]	; (800c028 <USB_EPStartXfer+0x3d0>)
 800bd0e:	4013      	ands	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	18d3      	adds	r3, r2, r3
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	49c3      	ldr	r1, [pc, #780]	; (800c02c <USB_EPStartXfer+0x3d4>)
 800bd20:	430a      	orrs	r2, r1
 800bd22:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	6a1a      	ldr	r2, [r3, #32]
 800bd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd2a:	1ad2      	subs	r2, r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	18d3      	adds	r3, r2, r3
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2240      	movs	r2, #64	; 0x40
 800bd3e:	4013      	ands	r3, r2
 800bd40:	d100      	bne.n	800bd44 <USB_EPStartXfer+0xec>
 800bd42:	e177      	b.n	800c034 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	785b      	ldrb	r3, [r3, #1]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d172      	bne.n	800be32 <USB_EPStartXfer+0x1da>
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	4ab4      	ldr	r2, [pc, #720]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bd54:	4694      	mov	ip, r2
 800bd56:	4463      	add	r3, ip
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	49b0      	ldr	r1, [pc, #704]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bd62:	468c      	mov	ip, r1
 800bd64:	4463      	add	r3, ip
 800bd66:	0412      	lsls	r2, r2, #16
 800bd68:	0c12      	lsrs	r2, r2, #16
 800bd6a:	605a      	str	r2, [r3, #4]
 800bd6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd6e:	2b3e      	cmp	r3, #62	; 0x3e
 800bd70:	d91e      	bls.n	800bdb0 <USB_EPStartXfer+0x158>
 800bd72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd74:	095b      	lsrs	r3, r3, #5
 800bd76:	653b      	str	r3, [r7, #80]	; 0x50
 800bd78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd7a:	221f      	movs	r2, #31
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	d102      	bne.n	800bd86 <USB_EPStartXfer+0x12e>
 800bd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd82:	3b01      	subs	r3, #1
 800bd84:	653b      	str	r3, [r7, #80]	; 0x50
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	4aa5      	ldr	r2, [pc, #660]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bd8e:	4694      	mov	ip, r2
 800bd90:	4463      	add	r3, ip
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd96:	069b      	lsls	r3, r3, #26
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	49a0      	ldr	r1, [pc, #640]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bda2:	468c      	mov	ip, r1
 800bda4:	4463      	add	r3, ip
 800bda6:	2180      	movs	r1, #128	; 0x80
 800bda8:	0609      	lsls	r1, r1, #24
 800bdaa:	430a      	orrs	r2, r1
 800bdac:	605a      	str	r2, [r3, #4]
 800bdae:	e065      	b.n	800be7c <USB_EPStartXfer+0x224>
 800bdb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d121      	bne.n	800bdfa <USB_EPStartXfer+0x1a2>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	4a99      	ldr	r2, [pc, #612]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bdbe:	4694      	mov	ip, r2
 800bdc0:	4463      	add	r3, ip
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	4996      	ldr	r1, [pc, #600]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bdcc:	468c      	mov	ip, r1
 800bdce:	4463      	add	r3, ip
 800bdd0:	4997      	ldr	r1, [pc, #604]	; (800c030 <USB_EPStartXfer+0x3d8>)
 800bdd2:	400a      	ands	r2, r1
 800bdd4:	605a      	str	r2, [r3, #4]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	4a91      	ldr	r2, [pc, #580]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bdde:	4694      	mov	ip, r2
 800bde0:	4463      	add	r3, ip
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	498e      	ldr	r1, [pc, #568]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bdec:	468c      	mov	ip, r1
 800bdee:	4463      	add	r3, ip
 800bdf0:	2180      	movs	r1, #128	; 0x80
 800bdf2:	0609      	lsls	r1, r1, #24
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	605a      	str	r2, [r3, #4]
 800bdf8:	e040      	b.n	800be7c <USB_EPStartXfer+0x224>
 800bdfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	653b      	str	r3, [r7, #80]	; 0x50
 800be00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be02:	2201      	movs	r2, #1
 800be04:	4013      	ands	r3, r2
 800be06:	d002      	beq.n	800be0e <USB_EPStartXfer+0x1b6>
 800be08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0a:	3301      	adds	r3, #1
 800be0c:	653b      	str	r3, [r7, #80]	; 0x50
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	00db      	lsls	r3, r3, #3
 800be14:	4a83      	ldr	r2, [pc, #524]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800be16:	4694      	mov	ip, r2
 800be18:	4463      	add	r3, ip
 800be1a:	6859      	ldr	r1, [r3, #4]
 800be1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be1e:	069a      	lsls	r2, r3, #26
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	487f      	ldr	r0, [pc, #508]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800be28:	4684      	mov	ip, r0
 800be2a:	4463      	add	r3, ip
 800be2c:	430a      	orrs	r2, r1
 800be2e:	605a      	str	r2, [r3, #4]
 800be30:	e024      	b.n	800be7c <USB_EPStartXfer+0x224>
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	785b      	ldrb	r3, [r3, #1]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d120      	bne.n	800be7c <USB_EPStartXfer+0x224>
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	00db      	lsls	r3, r3, #3
 800be40:	4a78      	ldr	r2, [pc, #480]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800be42:	4694      	mov	ip, r2
 800be44:	4463      	add	r3, ip
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	4975      	ldr	r1, [pc, #468]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800be50:	468c      	mov	ip, r1
 800be52:	4463      	add	r3, ip
 800be54:	0412      	lsls	r2, r2, #16
 800be56:	0c12      	lsrs	r2, r2, #16
 800be58:	605a      	str	r2, [r3, #4]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	4a70      	ldr	r2, [pc, #448]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800be62:	4694      	mov	ip, r2
 800be64:	4463      	add	r3, ip
 800be66:	6859      	ldr	r1, [r3, #4]
 800be68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be6a:	041a      	lsls	r2, r3, #16
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	486c      	ldr	r0, [pc, #432]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800be74:	4684      	mov	ip, r0
 800be76:	4463      	add	r3, ip
 800be78:	430a      	orrs	r2, r1
 800be7a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800be7c:	201a      	movs	r0, #26
 800be7e:	183b      	adds	r3, r7, r0
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	8912      	ldrh	r2, [r2, #8]
 800be84:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	6959      	ldr	r1, [r3, #20]
 800be8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be8c:	b29c      	uxth	r4, r3
 800be8e:	183b      	adds	r3, r7, r0
 800be90:	881a      	ldrh	r2, [r3, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	0023      	movs	r3, r4
 800be96:	f001 f941 	bl	800d11c <USB_WritePMA>
            ep->xfer_buff += len;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	695a      	ldr	r2, [r3, #20]
 800be9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea0:	18d2      	adds	r2, r2, r3
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	6a1a      	ldr	r2, [r3, #32]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d906      	bls.n	800bec0 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	6a1a      	ldr	r2, [r3, #32]
 800beb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beb8:	1ad2      	subs	r2, r2, r3
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	621a      	str	r2, [r3, #32]
 800bebe:	e005      	b.n	800becc <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2200      	movs	r2, #0
 800beca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	785b      	ldrb	r3, [r3, #1]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d172      	bne.n	800bfba <USB_EPStartXfer+0x362>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	4a52      	ldr	r2, [pc, #328]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bedc:	4694      	mov	ip, r2
 800bede:	4463      	add	r3, ip
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	494e      	ldr	r1, [pc, #312]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800beea:	468c      	mov	ip, r1
 800beec:	4463      	add	r3, ip
 800beee:	0412      	lsls	r2, r2, #16
 800bef0:	0c12      	lsrs	r2, r2, #16
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bef6:	2b3e      	cmp	r3, #62	; 0x3e
 800bef8:	d91e      	bls.n	800bf38 <USB_EPStartXfer+0x2e0>
 800befa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800befc:	095b      	lsrs	r3, r3, #5
 800befe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf02:	221f      	movs	r2, #31
 800bf04:	4013      	ands	r3, r2
 800bf06:	d102      	bne.n	800bf0e <USB_EPStartXfer+0x2b6>
 800bf08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	00db      	lsls	r3, r3, #3
 800bf14:	4a43      	ldr	r2, [pc, #268]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf16:	4694      	mov	ip, r2
 800bf18:	4463      	add	r3, ip
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1e:	069b      	lsls	r3, r3, #26
 800bf20:	431a      	orrs	r2, r3
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	493e      	ldr	r1, [pc, #248]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf2a:	468c      	mov	ip, r1
 800bf2c:	4463      	add	r3, ip
 800bf2e:	2180      	movs	r1, #128	; 0x80
 800bf30:	0609      	lsls	r1, r1, #24
 800bf32:	430a      	orrs	r2, r1
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	e065      	b.n	800c004 <USB_EPStartXfer+0x3ac>
 800bf38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d121      	bne.n	800bf82 <USB_EPStartXfer+0x32a>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4a37      	ldr	r2, [pc, #220]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf46:	4694      	mov	ip, r2
 800bf48:	4463      	add	r3, ip
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	4934      	ldr	r1, [pc, #208]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf54:	468c      	mov	ip, r1
 800bf56:	4463      	add	r3, ip
 800bf58:	4935      	ldr	r1, [pc, #212]	; (800c030 <USB_EPStartXfer+0x3d8>)
 800bf5a:	400a      	ands	r2, r1
 800bf5c:	601a      	str	r2, [r3, #0]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	4a2f      	ldr	r2, [pc, #188]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf66:	4694      	mov	ip, r2
 800bf68:	4463      	add	r3, ip
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	492c      	ldr	r1, [pc, #176]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf74:	468c      	mov	ip, r1
 800bf76:	4463      	add	r3, ip
 800bf78:	2180      	movs	r1, #128	; 0x80
 800bf7a:	0609      	lsls	r1, r1, #24
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	e040      	b.n	800c004 <USB_EPStartXfer+0x3ac>
 800bf82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf84:	085b      	lsrs	r3, r3, #1
 800bf86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	d002      	beq.n	800bf96 <USB_EPStartXfer+0x33e>
 800bf90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf92:	3301      	adds	r3, #1
 800bf94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	00db      	lsls	r3, r3, #3
 800bf9c:	4a21      	ldr	r2, [pc, #132]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bf9e:	4694      	mov	ip, r2
 800bfa0:	4463      	add	r3, ip
 800bfa2:	6819      	ldr	r1, [r3, #0]
 800bfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa6:	069a      	lsls	r2, r3, #26
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	481d      	ldr	r0, [pc, #116]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bfb0:	4684      	mov	ip, r0
 800bfb2:	4463      	add	r3, ip
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	e024      	b.n	800c004 <USB_EPStartXfer+0x3ac>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	785b      	ldrb	r3, [r3, #1]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d120      	bne.n	800c004 <USB_EPStartXfer+0x3ac>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	4a16      	ldr	r2, [pc, #88]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bfca:	4694      	mov	ip, r2
 800bfcc:	4463      	add	r3, ip
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	4913      	ldr	r1, [pc, #76]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bfd8:	468c      	mov	ip, r1
 800bfda:	4463      	add	r3, ip
 800bfdc:	0412      	lsls	r2, r2, #16
 800bfde:	0c12      	lsrs	r2, r2, #16
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	4a0e      	ldr	r2, [pc, #56]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bfea:	4694      	mov	ip, r2
 800bfec:	4463      	add	r3, ip
 800bfee:	6819      	ldr	r1, [r3, #0]
 800bff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bff2:	041a      	lsls	r2, r3, #16
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	480a      	ldr	r0, [pc, #40]	; (800c024 <USB_EPStartXfer+0x3cc>)
 800bffc:	4684      	mov	ip, r0
 800bffe:	4463      	add	r3, ip
 800c000:	430a      	orrs	r2, r1
 800c002:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c004:	201a      	movs	r0, #26
 800c006:	183b      	adds	r3, r7, r0
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	88d2      	ldrh	r2, [r2, #6]
 800c00c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	6959      	ldr	r1, [r3, #20]
 800c012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c014:	b29c      	uxth	r4, r3
 800c016:	183b      	adds	r3, r7, r0
 800c018:	881a      	ldrh	r2, [r3, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	0023      	movs	r3, r4
 800c01e:	f001 f87d 	bl	800d11c <USB_WritePMA>
 800c022:	e32c      	b.n	800c67e <USB_EPStartXfer+0xa26>
 800c024:	40009800 	.word	0x40009800
 800c028:	07ff8f8f 	.word	0x07ff8f8f
 800c02c:	00008180 	.word	0x00008180
 800c030:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	785b      	ldrb	r3, [r3, #1]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d172      	bne.n	800c122 <USB_EPStartXfer+0x4ca>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	00db      	lsls	r3, r3, #3
 800c042:	4ad7      	ldr	r2, [pc, #860]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c044:	4694      	mov	ip, r2
 800c046:	4463      	add	r3, ip
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	49d3      	ldr	r1, [pc, #844]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c052:	468c      	mov	ip, r1
 800c054:	4463      	add	r3, ip
 800c056:	0412      	lsls	r2, r2, #16
 800c058:	0c12      	lsrs	r2, r2, #16
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c05e:	2b3e      	cmp	r3, #62	; 0x3e
 800c060:	d91e      	bls.n	800c0a0 <USB_EPStartXfer+0x448>
 800c062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c064:	095b      	lsrs	r3, r3, #5
 800c066:	64bb      	str	r3, [r7, #72]	; 0x48
 800c068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c06a:	221f      	movs	r2, #31
 800c06c:	4013      	ands	r3, r2
 800c06e:	d102      	bne.n	800c076 <USB_EPStartXfer+0x41e>
 800c070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c072:	3b01      	subs	r3, #1
 800c074:	64bb      	str	r3, [r7, #72]	; 0x48
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	4ac8      	ldr	r2, [pc, #800]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c07e:	4694      	mov	ip, r2
 800c080:	4463      	add	r3, ip
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c086:	069b      	lsls	r3, r3, #26
 800c088:	431a      	orrs	r2, r3
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	49c3      	ldr	r1, [pc, #780]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c092:	468c      	mov	ip, r1
 800c094:	4463      	add	r3, ip
 800c096:	2180      	movs	r1, #128	; 0x80
 800c098:	0609      	lsls	r1, r1, #24
 800c09a:	430a      	orrs	r2, r1
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	e065      	b.n	800c16c <USB_EPStartXfer+0x514>
 800c0a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d121      	bne.n	800c0ea <USB_EPStartXfer+0x492>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	4abc      	ldr	r2, [pc, #752]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c0ae:	4694      	mov	ip, r2
 800c0b0:	4463      	add	r3, ip
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	49b9      	ldr	r1, [pc, #740]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c0bc:	468c      	mov	ip, r1
 800c0be:	4463      	add	r3, ip
 800c0c0:	49b8      	ldr	r1, [pc, #736]	; (800c3a4 <USB_EPStartXfer+0x74c>)
 800c0c2:	400a      	ands	r2, r1
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	4ab4      	ldr	r2, [pc, #720]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c0ce:	4694      	mov	ip, r2
 800c0d0:	4463      	add	r3, ip
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	00db      	lsls	r3, r3, #3
 800c0da:	49b1      	ldr	r1, [pc, #708]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c0dc:	468c      	mov	ip, r1
 800c0de:	4463      	add	r3, ip
 800c0e0:	2180      	movs	r1, #128	; 0x80
 800c0e2:	0609      	lsls	r1, r1, #24
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	e040      	b.n	800c16c <USB_EPStartXfer+0x514>
 800c0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ec:	085b      	lsrs	r3, r3, #1
 800c0ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	d002      	beq.n	800c0fe <USB_EPStartXfer+0x4a6>
 800c0f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	4aa6      	ldr	r2, [pc, #664]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c106:	4694      	mov	ip, r2
 800c108:	4463      	add	r3, ip
 800c10a:	6819      	ldr	r1, [r3, #0]
 800c10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c10e:	069a      	lsls	r2, r3, #26
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	48a2      	ldr	r0, [pc, #648]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c118:	4684      	mov	ip, r0
 800c11a:	4463      	add	r3, ip
 800c11c:	430a      	orrs	r2, r1
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	e024      	b.n	800c16c <USB_EPStartXfer+0x514>
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	785b      	ldrb	r3, [r3, #1]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d120      	bne.n	800c16c <USB_EPStartXfer+0x514>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	4a9b      	ldr	r2, [pc, #620]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c132:	4694      	mov	ip, r2
 800c134:	4463      	add	r3, ip
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	4998      	ldr	r1, [pc, #608]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c140:	468c      	mov	ip, r1
 800c142:	4463      	add	r3, ip
 800c144:	0412      	lsls	r2, r2, #16
 800c146:	0c12      	lsrs	r2, r2, #16
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	4a93      	ldr	r2, [pc, #588]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c152:	4694      	mov	ip, r2
 800c154:	4463      	add	r3, ip
 800c156:	6819      	ldr	r1, [r3, #0]
 800c158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c15a:	041a      	lsls	r2, r3, #16
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	00db      	lsls	r3, r3, #3
 800c162:	488f      	ldr	r0, [pc, #572]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c164:	4684      	mov	ip, r0
 800c166:	4463      	add	r3, ip
 800c168:	430a      	orrs	r2, r1
 800c16a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c16c:	201a      	movs	r0, #26
 800c16e:	183b      	adds	r3, r7, r0
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	88d2      	ldrh	r2, [r2, #6]
 800c174:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	6959      	ldr	r1, [r3, #20]
 800c17a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c17c:	b29c      	uxth	r4, r3
 800c17e:	183b      	adds	r3, r7, r0
 800c180:	881a      	ldrh	r2, [r3, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	0023      	movs	r3, r4
 800c186:	f000 ffc9 	bl	800d11c <USB_WritePMA>
            ep->xfer_buff += len;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	695a      	ldr	r2, [r3, #20]
 800c18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c190:	18d2      	adds	r2, r2, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	6a1a      	ldr	r2, [r3, #32]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d906      	bls.n	800c1b0 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	6a1a      	ldr	r2, [r3, #32]
 800c1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a8:	1ad2      	subs	r2, r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	621a      	str	r2, [r3, #32]
 800c1ae:	e005      	b.n	800c1bc <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	785b      	ldrb	r3, [r3, #1]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d172      	bne.n	800c2aa <USB_EPStartXfer+0x652>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	4a75      	ldr	r2, [pc, #468]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c1cc:	4694      	mov	ip, r2
 800c1ce:	4463      	add	r3, ip
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	4971      	ldr	r1, [pc, #452]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c1da:	468c      	mov	ip, r1
 800c1dc:	4463      	add	r3, ip
 800c1de:	0412      	lsls	r2, r2, #16
 800c1e0:	0c12      	lsrs	r2, r2, #16
 800c1e2:	605a      	str	r2, [r3, #4]
 800c1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e6:	2b3e      	cmp	r3, #62	; 0x3e
 800c1e8:	d91e      	bls.n	800c228 <USB_EPStartXfer+0x5d0>
 800c1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ec:	095b      	lsrs	r3, r3, #5
 800c1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f2:	221f      	movs	r2, #31
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	d102      	bne.n	800c1fe <USB_EPStartXfer+0x5a6>
 800c1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	4a66      	ldr	r2, [pc, #408]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c206:	4694      	mov	ip, r2
 800c208:	4463      	add	r3, ip
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c20e:	069b      	lsls	r3, r3, #26
 800c210:	431a      	orrs	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	4961      	ldr	r1, [pc, #388]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c21a:	468c      	mov	ip, r1
 800c21c:	4463      	add	r3, ip
 800c21e:	2180      	movs	r1, #128	; 0x80
 800c220:	0609      	lsls	r1, r1, #24
 800c222:	430a      	orrs	r2, r1
 800c224:	605a      	str	r2, [r3, #4]
 800c226:	e065      	b.n	800c2f4 <USB_EPStartXfer+0x69c>
 800c228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d121      	bne.n	800c272 <USB_EPStartXfer+0x61a>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	4a5a      	ldr	r2, [pc, #360]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c236:	4694      	mov	ip, r2
 800c238:	4463      	add	r3, ip
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	4957      	ldr	r1, [pc, #348]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c244:	468c      	mov	ip, r1
 800c246:	4463      	add	r3, ip
 800c248:	4956      	ldr	r1, [pc, #344]	; (800c3a4 <USB_EPStartXfer+0x74c>)
 800c24a:	400a      	ands	r2, r1
 800c24c:	605a      	str	r2, [r3, #4]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	00db      	lsls	r3, r3, #3
 800c254:	4a52      	ldr	r2, [pc, #328]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c256:	4694      	mov	ip, r2
 800c258:	4463      	add	r3, ip
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	494f      	ldr	r1, [pc, #316]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c264:	468c      	mov	ip, r1
 800c266:	4463      	add	r3, ip
 800c268:	2180      	movs	r1, #128	; 0x80
 800c26a:	0609      	lsls	r1, r1, #24
 800c26c:	430a      	orrs	r2, r1
 800c26e:	605a      	str	r2, [r3, #4]
 800c270:	e040      	b.n	800c2f4 <USB_EPStartXfer+0x69c>
 800c272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c274:	085b      	lsrs	r3, r3, #1
 800c276:	647b      	str	r3, [r7, #68]	; 0x44
 800c278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c27a:	2201      	movs	r2, #1
 800c27c:	4013      	ands	r3, r2
 800c27e:	d002      	beq.n	800c286 <USB_EPStartXfer+0x62e>
 800c280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c282:	3301      	adds	r3, #1
 800c284:	647b      	str	r3, [r7, #68]	; 0x44
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	4a44      	ldr	r2, [pc, #272]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c28e:	4694      	mov	ip, r2
 800c290:	4463      	add	r3, ip
 800c292:	6859      	ldr	r1, [r3, #4]
 800c294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c296:	069a      	lsls	r2, r3, #26
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	4840      	ldr	r0, [pc, #256]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c2a0:	4684      	mov	ip, r0
 800c2a2:	4463      	add	r3, ip
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	605a      	str	r2, [r3, #4]
 800c2a8:	e024      	b.n	800c2f4 <USB_EPStartXfer+0x69c>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d120      	bne.n	800c2f4 <USB_EPStartXfer+0x69c>
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	4a39      	ldr	r2, [pc, #228]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c2ba:	4694      	mov	ip, r2
 800c2bc:	4463      	add	r3, ip
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	4936      	ldr	r1, [pc, #216]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c2c8:	468c      	mov	ip, r1
 800c2ca:	4463      	add	r3, ip
 800c2cc:	0412      	lsls	r2, r2, #16
 800c2ce:	0c12      	lsrs	r2, r2, #16
 800c2d0:	605a      	str	r2, [r3, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4a31      	ldr	r2, [pc, #196]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c2da:	4694      	mov	ip, r2
 800c2dc:	4463      	add	r3, ip
 800c2de:	6859      	ldr	r1, [r3, #4]
 800c2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e2:	041a      	lsls	r2, r3, #16
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	482d      	ldr	r0, [pc, #180]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c2ec:	4684      	mov	ip, r0
 800c2ee:	4463      	add	r3, ip
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c2f4:	201a      	movs	r0, #26
 800c2f6:	183b      	adds	r3, r7, r0
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	8912      	ldrh	r2, [r2, #8]
 800c2fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	6959      	ldr	r1, [r3, #20]
 800c302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c304:	b29c      	uxth	r4, r3
 800c306:	183b      	adds	r3, r7, r0
 800c308:	881a      	ldrh	r2, [r3, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	0023      	movs	r3, r4
 800c30e:	f000 ff05 	bl	800d11c <USB_WritePMA>
 800c312:	e1b4      	b.n	800c67e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	18d3      	adds	r3, r2, r3
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a20      	ldr	r2, [pc, #128]	; (800c3a8 <USB_EPStartXfer+0x750>)
 800c328:	4013      	ands	r3, r2
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	18d3      	adds	r3, r2, r3
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	491c      	ldr	r1, [pc, #112]	; (800c3ac <USB_EPStartXfer+0x754>)
 800c33a:	430a      	orrs	r2, r1
 800c33c:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	4a16      	ldr	r2, [pc, #88]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c346:	4694      	mov	ip, r2
 800c348:	4463      	add	r3, ip
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	4913      	ldr	r1, [pc, #76]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c354:	468c      	mov	ip, r1
 800c356:	4463      	add	r3, ip
 800c358:	0412      	lsls	r2, r2, #16
 800c35a:	0c12      	lsrs	r2, r2, #16
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	4a0e      	ldr	r2, [pc, #56]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c366:	4694      	mov	ip, r2
 800c368:	4463      	add	r3, ip
 800c36a:	6819      	ldr	r1, [r3, #0]
 800c36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c36e:	041a      	lsls	r2, r3, #16
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	480a      	ldr	r0, [pc, #40]	; (800c3a0 <USB_EPStartXfer+0x748>)
 800c378:	4684      	mov	ip, r0
 800c37a:	4463      	add	r3, ip
 800c37c:	430a      	orrs	r2, r1
 800c37e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c380:	201a      	movs	r0, #26
 800c382:	183b      	adds	r3, r7, r0
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	88d2      	ldrh	r2, [r2, #6]
 800c388:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	6959      	ldr	r1, [r3, #20]
 800c38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c390:	b29c      	uxth	r4, r3
 800c392:	183b      	adds	r3, r7, r0
 800c394:	881a      	ldrh	r2, [r3, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	0023      	movs	r3, r4
 800c39a:	f000 febf 	bl	800d11c <USB_WritePMA>
 800c39e:	e16e      	b.n	800c67e <USB_EPStartXfer+0xa26>
 800c3a0:	40009800 	.word	0x40009800
 800c3a4:	83ffffff 	.word	0x83ffffff
 800c3a8:	07ff8e8f 	.word	0x07ff8e8f
 800c3ac:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	6a1a      	ldr	r2, [r3, #32]
 800c3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3b6:	1ad2      	subs	r2, r2, r3
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	18d3      	adds	r3, r2, r3
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2240      	movs	r2, #64	; 0x40
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	d100      	bne.n	800c3d0 <USB_EPStartXfer+0x778>
 800c3ce:	e0ab      	b.n	800c528 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	785b      	ldrb	r3, [r3, #1]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d172      	bne.n	800c4be <USB_EPStartXfer+0x866>
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	4adc      	ldr	r2, [pc, #880]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c3e0:	4694      	mov	ip, r2
 800c3e2:	4463      	add	r3, ip
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	49d8      	ldr	r1, [pc, #864]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c3ee:	468c      	mov	ip, r1
 800c3f0:	4463      	add	r3, ip
 800c3f2:	0412      	lsls	r2, r2, #16
 800c3f4:	0c12      	lsrs	r2, r2, #16
 800c3f6:	605a      	str	r2, [r3, #4]
 800c3f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3fa:	2b3e      	cmp	r3, #62	; 0x3e
 800c3fc:	d91e      	bls.n	800c43c <USB_EPStartXfer+0x7e4>
 800c3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c400:	095b      	lsrs	r3, r3, #5
 800c402:	643b      	str	r3, [r7, #64]	; 0x40
 800c404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c406:	221f      	movs	r2, #31
 800c408:	4013      	ands	r3, r2
 800c40a:	d102      	bne.n	800c412 <USB_EPStartXfer+0x7ba>
 800c40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c40e:	3b01      	subs	r3, #1
 800c410:	643b      	str	r3, [r7, #64]	; 0x40
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	4acd      	ldr	r2, [pc, #820]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c41a:	4694      	mov	ip, r2
 800c41c:	4463      	add	r3, ip
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c422:	069b      	lsls	r3, r3, #26
 800c424:	431a      	orrs	r2, r3
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	49c8      	ldr	r1, [pc, #800]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c42e:	468c      	mov	ip, r1
 800c430:	4463      	add	r3, ip
 800c432:	2180      	movs	r1, #128	; 0x80
 800c434:	0609      	lsls	r1, r1, #24
 800c436:	430a      	orrs	r2, r1
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	e065      	b.n	800c508 <USB_EPStartXfer+0x8b0>
 800c43c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d121      	bne.n	800c486 <USB_EPStartXfer+0x82e>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4ac1      	ldr	r2, [pc, #772]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c44a:	4694      	mov	ip, r2
 800c44c:	4463      	add	r3, ip
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	49be      	ldr	r1, [pc, #760]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c458:	468c      	mov	ip, r1
 800c45a:	4463      	add	r3, ip
 800c45c:	49bd      	ldr	r1, [pc, #756]	; (800c754 <USB_EPStartXfer+0xafc>)
 800c45e:	400a      	ands	r2, r1
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	00db      	lsls	r3, r3, #3
 800c468:	4ab9      	ldr	r2, [pc, #740]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c46a:	4694      	mov	ip, r2
 800c46c:	4463      	add	r3, ip
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	00db      	lsls	r3, r3, #3
 800c476:	49b6      	ldr	r1, [pc, #728]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c478:	468c      	mov	ip, r1
 800c47a:	4463      	add	r3, ip
 800c47c:	2180      	movs	r1, #128	; 0x80
 800c47e:	0609      	lsls	r1, r1, #24
 800c480:	430a      	orrs	r2, r1
 800c482:	605a      	str	r2, [r3, #4]
 800c484:	e040      	b.n	800c508 <USB_EPStartXfer+0x8b0>
 800c486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c488:	085b      	lsrs	r3, r3, #1
 800c48a:	643b      	str	r3, [r7, #64]	; 0x40
 800c48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c48e:	2201      	movs	r2, #1
 800c490:	4013      	ands	r3, r2
 800c492:	d002      	beq.n	800c49a <USB_EPStartXfer+0x842>
 800c494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c496:	3301      	adds	r3, #1
 800c498:	643b      	str	r3, [r7, #64]	; 0x40
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4aab      	ldr	r2, [pc, #684]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c4a2:	4694      	mov	ip, r2
 800c4a4:	4463      	add	r3, ip
 800c4a6:	6859      	ldr	r1, [r3, #4]
 800c4a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4aa:	069a      	lsls	r2, r3, #26
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	48a7      	ldr	r0, [pc, #668]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c4b4:	4684      	mov	ip, r0
 800c4b6:	4463      	add	r3, ip
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	605a      	str	r2, [r3, #4]
 800c4bc:	e024      	b.n	800c508 <USB_EPStartXfer+0x8b0>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d120      	bne.n	800c508 <USB_EPStartXfer+0x8b0>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	4aa0      	ldr	r2, [pc, #640]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c4ce:	4694      	mov	ip, r2
 800c4d0:	4463      	add	r3, ip
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	499d      	ldr	r1, [pc, #628]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c4dc:	468c      	mov	ip, r1
 800c4de:	4463      	add	r3, ip
 800c4e0:	0412      	lsls	r2, r2, #16
 800c4e2:	0c12      	lsrs	r2, r2, #16
 800c4e4:	605a      	str	r2, [r3, #4]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	4a98      	ldr	r2, [pc, #608]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c4ee:	4694      	mov	ip, r2
 800c4f0:	4463      	add	r3, ip
 800c4f2:	6859      	ldr	r1, [r3, #4]
 800c4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4f6:	041a      	lsls	r2, r3, #16
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	4894      	ldr	r0, [pc, #592]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c500:	4684      	mov	ip, r0
 800c502:	4463      	add	r3, ip
 800c504:	430a      	orrs	r2, r1
 800c506:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800c508:	201a      	movs	r0, #26
 800c50a:	183b      	adds	r3, r7, r0
 800c50c:	683a      	ldr	r2, [r7, #0]
 800c50e:	8912      	ldrh	r2, [r2, #8]
 800c510:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6959      	ldr	r1, [r3, #20]
 800c516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c518:	b29c      	uxth	r4, r3
 800c51a:	183b      	adds	r3, r7, r0
 800c51c:	881a      	ldrh	r2, [r3, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	0023      	movs	r3, r4
 800c522:	f000 fdfb 	bl	800d11c <USB_WritePMA>
 800c526:	e0aa      	b.n	800c67e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	785b      	ldrb	r3, [r3, #1]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d172      	bne.n	800c616 <USB_EPStartXfer+0x9be>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	4a86      	ldr	r2, [pc, #536]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c538:	4694      	mov	ip, r2
 800c53a:	4463      	add	r3, ip
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	4982      	ldr	r1, [pc, #520]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c546:	468c      	mov	ip, r1
 800c548:	4463      	add	r3, ip
 800c54a:	0412      	lsls	r2, r2, #16
 800c54c:	0c12      	lsrs	r2, r2, #16
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c552:	2b3e      	cmp	r3, #62	; 0x3e
 800c554:	d91e      	bls.n	800c594 <USB_EPStartXfer+0x93c>
 800c556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c558:	095b      	lsrs	r3, r3, #5
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c55e:	221f      	movs	r2, #31
 800c560:	4013      	ands	r3, r2
 800c562:	d102      	bne.n	800c56a <USB_EPStartXfer+0x912>
 800c564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c566:	3b01      	subs	r3, #1
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4a77      	ldr	r2, [pc, #476]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c572:	4694      	mov	ip, r2
 800c574:	4463      	add	r3, ip
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c57a:	069b      	lsls	r3, r3, #26
 800c57c:	431a      	orrs	r2, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	4972      	ldr	r1, [pc, #456]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c586:	468c      	mov	ip, r1
 800c588:	4463      	add	r3, ip
 800c58a:	2180      	movs	r1, #128	; 0x80
 800c58c:	0609      	lsls	r1, r1, #24
 800c58e:	430a      	orrs	r2, r1
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	e065      	b.n	800c660 <USB_EPStartXfer+0xa08>
 800c594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c596:	2b00      	cmp	r3, #0
 800c598:	d121      	bne.n	800c5de <USB_EPStartXfer+0x986>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	4a6b      	ldr	r2, [pc, #428]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c5a2:	4694      	mov	ip, r2
 800c5a4:	4463      	add	r3, ip
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	4968      	ldr	r1, [pc, #416]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c5b0:	468c      	mov	ip, r1
 800c5b2:	4463      	add	r3, ip
 800c5b4:	4967      	ldr	r1, [pc, #412]	; (800c754 <USB_EPStartXfer+0xafc>)
 800c5b6:	400a      	ands	r2, r1
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	4a63      	ldr	r2, [pc, #396]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c5c2:	4694      	mov	ip, r2
 800c5c4:	4463      	add	r3, ip
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	4960      	ldr	r1, [pc, #384]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c5d0:	468c      	mov	ip, r1
 800c5d2:	4463      	add	r3, ip
 800c5d4:	2180      	movs	r1, #128	; 0x80
 800c5d6:	0609      	lsls	r1, r1, #24
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	e040      	b.n	800c660 <USB_EPStartXfer+0xa08>
 800c5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e0:	085b      	lsrs	r3, r3, #1
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	d002      	beq.n	800c5f2 <USB_EPStartXfer+0x99a>
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	4a55      	ldr	r2, [pc, #340]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c5fa:	4694      	mov	ip, r2
 800c5fc:	4463      	add	r3, ip
 800c5fe:	6819      	ldr	r1, [r3, #0]
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c602:	069a      	lsls	r2, r3, #26
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	00db      	lsls	r3, r3, #3
 800c60a:	4851      	ldr	r0, [pc, #324]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c60c:	4684      	mov	ip, r0
 800c60e:	4463      	add	r3, ip
 800c610:	430a      	orrs	r2, r1
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	e024      	b.n	800c660 <USB_EPStartXfer+0xa08>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d120      	bne.n	800c660 <USB_EPStartXfer+0xa08>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	4a4a      	ldr	r2, [pc, #296]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c626:	4694      	mov	ip, r2
 800c628:	4463      	add	r3, ip
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	4947      	ldr	r1, [pc, #284]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c634:	468c      	mov	ip, r1
 800c636:	4463      	add	r3, ip
 800c638:	0412      	lsls	r2, r2, #16
 800c63a:	0c12      	lsrs	r2, r2, #16
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	4a42      	ldr	r2, [pc, #264]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c646:	4694      	mov	ip, r2
 800c648:	4463      	add	r3, ip
 800c64a:	6819      	ldr	r1, [r3, #0]
 800c64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c64e:	041a      	lsls	r2, r3, #16
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	00db      	lsls	r3, r3, #3
 800c656:	483e      	ldr	r0, [pc, #248]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c658:	4684      	mov	ip, r0
 800c65a:	4463      	add	r3, ip
 800c65c:	430a      	orrs	r2, r1
 800c65e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c660:	201a      	movs	r0, #26
 800c662:	183b      	adds	r3, r7, r0
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	88d2      	ldrh	r2, [r2, #6]
 800c668:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	6959      	ldr	r1, [r3, #20]
 800c66e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c670:	b29c      	uxth	r4, r3
 800c672:	183b      	adds	r3, r7, r0
 800c674:	881a      	ldrh	r2, [r3, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	0023      	movs	r3, r4
 800c67a:	f000 fd4f 	bl	800d11c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	18d3      	adds	r3, r2, r3
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a33      	ldr	r2, [pc, #204]	; (800c758 <USB_EPStartXfer+0xb00>)
 800c68c:	4013      	ands	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2210      	movs	r2, #16
 800c694:	4053      	eors	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2220      	movs	r2, #32
 800c69c:	4053      	eors	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	18d3      	adds	r3, r2, r3
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	492b      	ldr	r1, [pc, #172]	; (800c75c <USB_EPStartXfer+0xb04>)
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	601a      	str	r2, [r3, #0]
 800c6b2:	f000 fb97 	bl	800cde4 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	7a9b      	ldrb	r3, [r3, #10]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d000      	beq.n	800c6c0 <USB_EPStartXfer+0xa68>
 800c6be:	e090      	b.n	800c7e2 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	699a      	ldr	r2, [r3, #24]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d909      	bls.n	800c6e0 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	699a      	ldr	r2, [r3, #24]
 800c6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6d8:	1ad2      	subs	r2, r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	619a      	str	r2, [r3, #24]
 800c6de:	e005      	b.n	800c6ec <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	4a17      	ldr	r2, [pc, #92]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c6f4:	4694      	mov	ip, r2
 800c6f6:	4463      	add	r3, ip
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	4913      	ldr	r1, [pc, #76]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c702:	468c      	mov	ip, r1
 800c704:	4463      	add	r3, ip
 800c706:	0412      	lsls	r2, r2, #16
 800c708:	0c12      	lsrs	r2, r2, #16
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c70e:	2b3e      	cmp	r3, #62	; 0x3e
 800c710:	d926      	bls.n	800c760 <USB_EPStartXfer+0xb08>
 800c712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c714:	095b      	lsrs	r3, r3, #5
 800c716:	63bb      	str	r3, [r7, #56]	; 0x38
 800c718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c71a:	221f      	movs	r2, #31
 800c71c:	4013      	ands	r3, r2
 800c71e:	d102      	bne.n	800c726 <USB_EPStartXfer+0xace>
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	3b01      	subs	r3, #1
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	4a08      	ldr	r2, [pc, #32]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c72e:	4694      	mov	ip, r2
 800c730:	4463      	add	r3, ip
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	069b      	lsls	r3, r3, #26
 800c738:	431a      	orrs	r2, r3
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	4903      	ldr	r1, [pc, #12]	; (800c750 <USB_EPStartXfer+0xaf8>)
 800c742:	468c      	mov	ip, r1
 800c744:	4463      	add	r3, ip
 800c746:	2180      	movs	r1, #128	; 0x80
 800c748:	0609      	lsls	r1, r1, #24
 800c74a:	430a      	orrs	r2, r1
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	e32d      	b.n	800cdac <USB_EPStartXfer+0x1154>
 800c750:	40009800 	.word	0x40009800
 800c754:	83ffffff 	.word	0x83ffffff
 800c758:	07ff8fbf 	.word	0x07ff8fbf
 800c75c:	00008080 	.word	0x00008080
 800c760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c762:	2b00      	cmp	r3, #0
 800c764:	d121      	bne.n	800c7aa <USB_EPStartXfer+0xb52>
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	4ae0      	ldr	r2, [pc, #896]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c76e:	4694      	mov	ip, r2
 800c770:	4463      	add	r3, ip
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	49dd      	ldr	r1, [pc, #884]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c77c:	468c      	mov	ip, r1
 800c77e:	4463      	add	r3, ip
 800c780:	49dc      	ldr	r1, [pc, #880]	; (800caf4 <USB_EPStartXfer+0xe9c>)
 800c782:	400a      	ands	r2, r1
 800c784:	605a      	str	r2, [r3, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	4ad8      	ldr	r2, [pc, #864]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c78e:	4694      	mov	ip, r2
 800c790:	4463      	add	r3, ip
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	49d5      	ldr	r1, [pc, #852]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c79c:	468c      	mov	ip, r1
 800c79e:	4463      	add	r3, ip
 800c7a0:	2180      	movs	r1, #128	; 0x80
 800c7a2:	0609      	lsls	r1, r1, #24
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	605a      	str	r2, [r3, #4]
 800c7a8:	e300      	b.n	800cdac <USB_EPStartXfer+0x1154>
 800c7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7ac:	085b      	lsrs	r3, r3, #1
 800c7ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	d002      	beq.n	800c7be <USB_EPStartXfer+0xb66>
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	4aca      	ldr	r2, [pc, #808]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c7c6:	4694      	mov	ip, r2
 800c7c8:	4463      	add	r3, ip
 800c7ca:	6859      	ldr	r1, [r3, #4]
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	069a      	lsls	r2, r3, #26
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	48c6      	ldr	r0, [pc, #792]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c7d8:	4684      	mov	ip, r0
 800c7da:	4463      	add	r3, ip
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	605a      	str	r2, [r3, #4]
 800c7e0:	e2e4      	b.n	800cdac <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	78db      	ldrb	r3, [r3, #3]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d000      	beq.n	800c7ec <USB_EPStartXfer+0xb94>
 800c7ea:	e189      	b.n	800cb00 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d000      	beq.n	800c7f6 <USB_EPStartXfer+0xb9e>
 800c7f4:	e078      	b.n	800c8e8 <USB_EPStartXfer+0xc90>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	4abc      	ldr	r2, [pc, #752]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c7fe:	4694      	mov	ip, r2
 800c800:	4463      	add	r3, ip
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	49b9      	ldr	r1, [pc, #740]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c80c:	468c      	mov	ip, r1
 800c80e:	4463      	add	r3, ip
 800c810:	0412      	lsls	r2, r2, #16
 800c812:	0c12      	lsrs	r2, r2, #16
 800c814:	601a      	str	r2, [r3, #0]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	2b3e      	cmp	r3, #62	; 0x3e
 800c81c:	d920      	bls.n	800c860 <USB_EPStartXfer+0xc08>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	095b      	lsrs	r3, r3, #5
 800c824:	637b      	str	r3, [r7, #52]	; 0x34
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	221f      	movs	r2, #31
 800c82c:	4013      	ands	r3, r2
 800c82e:	d102      	bne.n	800c836 <USB_EPStartXfer+0xbde>
 800c830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c832:	3b01      	subs	r3, #1
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	4aac      	ldr	r2, [pc, #688]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c83e:	4694      	mov	ip, r2
 800c840:	4463      	add	r3, ip
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c846:	069b      	lsls	r3, r3, #26
 800c848:	431a      	orrs	r2, r3
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	49a7      	ldr	r1, [pc, #668]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c852:	468c      	mov	ip, r1
 800c854:	4463      	add	r3, ip
 800c856:	2180      	movs	r1, #128	; 0x80
 800c858:	0609      	lsls	r1, r1, #24
 800c85a:	430a      	orrs	r2, r1
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e069      	b.n	800c934 <USB_EPStartXfer+0xcdc>
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d121      	bne.n	800c8ac <USB_EPStartXfer+0xc54>
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	4aa0      	ldr	r2, [pc, #640]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c870:	4694      	mov	ip, r2
 800c872:	4463      	add	r3, ip
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	499c      	ldr	r1, [pc, #624]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c87e:	468c      	mov	ip, r1
 800c880:	4463      	add	r3, ip
 800c882:	499c      	ldr	r1, [pc, #624]	; (800caf4 <USB_EPStartXfer+0xe9c>)
 800c884:	400a      	ands	r2, r1
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	00db      	lsls	r3, r3, #3
 800c88e:	4a98      	ldr	r2, [pc, #608]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c890:	4694      	mov	ip, r2
 800c892:	4463      	add	r3, ip
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4994      	ldr	r1, [pc, #592]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c89e:	468c      	mov	ip, r1
 800c8a0:	4463      	add	r3, ip
 800c8a2:	2180      	movs	r1, #128	; 0x80
 800c8a4:	0609      	lsls	r1, r1, #24
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e043      	b.n	800c934 <USB_EPStartXfer+0xcdc>
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	d002      	beq.n	800c8c4 <USB_EPStartXfer+0xc6c>
 800c8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	4a89      	ldr	r2, [pc, #548]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c8cc:	4694      	mov	ip, r2
 800c8ce:	4463      	add	r3, ip
 800c8d0:	6819      	ldr	r1, [r3, #0]
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d4:	069a      	lsls	r2, r3, #26
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	4884      	ldr	r0, [pc, #528]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c8de:	4684      	mov	ip, r0
 800c8e0:	4463      	add	r3, ip
 800c8e2:	430a      	orrs	r2, r1
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	e025      	b.n	800c934 <USB_EPStartXfer+0xcdc>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	785b      	ldrb	r3, [r3, #1]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d121      	bne.n	800c934 <USB_EPStartXfer+0xcdc>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	4a7e      	ldr	r2, [pc, #504]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c8f8:	4694      	mov	ip, r2
 800c8fa:	4463      	add	r3, ip
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	497a      	ldr	r1, [pc, #488]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c906:	468c      	mov	ip, r1
 800c908:	4463      	add	r3, ip
 800c90a:	0412      	lsls	r2, r2, #16
 800c90c:	0c12      	lsrs	r2, r2, #16
 800c90e:	601a      	str	r2, [r3, #0]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	4a76      	ldr	r2, [pc, #472]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c918:	4694      	mov	ip, r2
 800c91a:	4463      	add	r3, ip
 800c91c:	6819      	ldr	r1, [r3, #0]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	041a      	lsls	r2, r3, #16
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	4871      	ldr	r0, [pc, #452]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c92c:	4684      	mov	ip, r0
 800c92e:	4463      	add	r3, ip
 800c930:	430a      	orrs	r2, r1
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	785b      	ldrb	r3, [r3, #1]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d000      	beq.n	800c93e <USB_EPStartXfer+0xce6>
 800c93c:	e078      	b.n	800ca30 <USB_EPStartXfer+0xdd8>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4a6a      	ldr	r2, [pc, #424]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c946:	4694      	mov	ip, r2
 800c948:	4463      	add	r3, ip
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	4967      	ldr	r1, [pc, #412]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c954:	468c      	mov	ip, r1
 800c956:	4463      	add	r3, ip
 800c958:	0412      	lsls	r2, r2, #16
 800c95a:	0c12      	lsrs	r2, r2, #16
 800c95c:	605a      	str	r2, [r3, #4]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b3e      	cmp	r3, #62	; 0x3e
 800c964:	d920      	bls.n	800c9a8 <USB_EPStartXfer+0xd50>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	095b      	lsrs	r3, r3, #5
 800c96c:	633b      	str	r3, [r7, #48]	; 0x30
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	221f      	movs	r2, #31
 800c974:	4013      	ands	r3, r2
 800c976:	d102      	bne.n	800c97e <USB_EPStartXfer+0xd26>
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	3b01      	subs	r3, #1
 800c97c:	633b      	str	r3, [r7, #48]	; 0x30
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	4a5a      	ldr	r2, [pc, #360]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c986:	4694      	mov	ip, r2
 800c988:	4463      	add	r3, ip
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	069b      	lsls	r3, r3, #26
 800c990:	431a      	orrs	r2, r3
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	4955      	ldr	r1, [pc, #340]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c99a:	468c      	mov	ip, r1
 800c99c:	4463      	add	r3, ip
 800c99e:	2180      	movs	r1, #128	; 0x80
 800c9a0:	0609      	lsls	r1, r1, #24
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	605a      	str	r2, [r3, #4]
 800c9a6:	e069      	b.n	800ca7c <USB_EPStartXfer+0xe24>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d121      	bne.n	800c9f4 <USB_EPStartXfer+0xd9c>
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	4a4e      	ldr	r2, [pc, #312]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c9b8:	4694      	mov	ip, r2
 800c9ba:	4463      	add	r3, ip
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	494a      	ldr	r1, [pc, #296]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c9c6:	468c      	mov	ip, r1
 800c9c8:	4463      	add	r3, ip
 800c9ca:	494a      	ldr	r1, [pc, #296]	; (800caf4 <USB_EPStartXfer+0xe9c>)
 800c9cc:	400a      	ands	r2, r1
 800c9ce:	605a      	str	r2, [r3, #4]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	4a46      	ldr	r2, [pc, #280]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c9d8:	4694      	mov	ip, r2
 800c9da:	4463      	add	r3, ip
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	4942      	ldr	r1, [pc, #264]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800c9e6:	468c      	mov	ip, r1
 800c9e8:	4463      	add	r3, ip
 800c9ea:	2180      	movs	r1, #128	; 0x80
 800c9ec:	0609      	lsls	r1, r1, #24
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	e043      	b.n	800ca7c <USB_EPStartXfer+0xe24>
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	085b      	lsrs	r3, r3, #1
 800c9fa:	633b      	str	r3, [r7, #48]	; 0x30
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	2201      	movs	r2, #1
 800ca02:	4013      	ands	r3, r2
 800ca04:	d002      	beq.n	800ca0c <USB_EPStartXfer+0xdb4>
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	3301      	adds	r3, #1
 800ca0a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	4a37      	ldr	r2, [pc, #220]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800ca14:	4694      	mov	ip, r2
 800ca16:	4463      	add	r3, ip
 800ca18:	6859      	ldr	r1, [r3, #4]
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	069a      	lsls	r2, r3, #26
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	4832      	ldr	r0, [pc, #200]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800ca26:	4684      	mov	ip, r0
 800ca28:	4463      	add	r3, ip
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	605a      	str	r2, [r3, #4]
 800ca2e:	e025      	b.n	800ca7c <USB_EPStartXfer+0xe24>
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d121      	bne.n	800ca7c <USB_EPStartXfer+0xe24>
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	00db      	lsls	r3, r3, #3
 800ca3e:	4a2c      	ldr	r2, [pc, #176]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800ca40:	4694      	mov	ip, r2
 800ca42:	4463      	add	r3, ip
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	4928      	ldr	r1, [pc, #160]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800ca4e:	468c      	mov	ip, r1
 800ca50:	4463      	add	r3, ip
 800ca52:	0412      	lsls	r2, r2, #16
 800ca54:	0c12      	lsrs	r2, r2, #16
 800ca56:	605a      	str	r2, [r3, #4]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	4a24      	ldr	r2, [pc, #144]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800ca60:	4694      	mov	ip, r2
 800ca62:	4463      	add	r3, ip
 800ca64:	6859      	ldr	r1, [r3, #4]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	041a      	lsls	r2, r3, #16
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	481f      	ldr	r0, [pc, #124]	; (800caf0 <USB_EPStartXfer+0xe98>)
 800ca74:	4684      	mov	ip, r0
 800ca76:	4463      	add	r3, ip
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	69db      	ldr	r3, [r3, #28]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d100      	bne.n	800ca86 <USB_EPStartXfer+0xe2e>
 800ca84:	e192      	b.n	800cdac <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	18d3      	adds	r3, r2, r3
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	2126      	movs	r1, #38	; 0x26
 800ca94:	187b      	adds	r3, r7, r1
 800ca96:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ca98:	187b      	adds	r3, r7, r1
 800ca9a:	881a      	ldrh	r2, [r3, #0]
 800ca9c:	2380      	movs	r3, #128	; 0x80
 800ca9e:	01db      	lsls	r3, r3, #7
 800caa0:	4013      	ands	r3, r2
 800caa2:	d004      	beq.n	800caae <USB_EPStartXfer+0xe56>
 800caa4:	187b      	adds	r3, r7, r1
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	2240      	movs	r2, #64	; 0x40
 800caaa:	4013      	ands	r3, r2
 800caac:	d10d      	bne.n	800caca <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800caae:	2126      	movs	r1, #38	; 0x26
 800cab0:	187b      	adds	r3, r7, r1
 800cab2:	881a      	ldrh	r2, [r3, #0]
 800cab4:	2380      	movs	r3, #128	; 0x80
 800cab6:	01db      	lsls	r3, r3, #7
 800cab8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800caba:	d000      	beq.n	800cabe <USB_EPStartXfer+0xe66>
 800cabc:	e176      	b.n	800cdac <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cabe:	187b      	adds	r3, r7, r1
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	2240      	movs	r2, #64	; 0x40
 800cac4:	4013      	ands	r3, r2
 800cac6:	d000      	beq.n	800caca <USB_EPStartXfer+0xe72>
 800cac8:	e170      	b.n	800cdac <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	18d3      	adds	r3, r2, r3
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a08      	ldr	r2, [pc, #32]	; (800caf8 <USB_EPStartXfer+0xea0>)
 800cad8:	4013      	ands	r3, r2
 800cada:	623b      	str	r3, [r7, #32]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	18d3      	adds	r3, r2, r3
 800cae6:	6a3a      	ldr	r2, [r7, #32]
 800cae8:	4904      	ldr	r1, [pc, #16]	; (800cafc <USB_EPStartXfer+0xea4>)
 800caea:	430a      	orrs	r2, r1
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	e15d      	b.n	800cdac <USB_EPStartXfer+0x1154>
 800caf0:	40009800 	.word	0x40009800
 800caf4:	83ffffff 	.word	0x83ffffff
 800caf8:	07ff8f8f 	.word	0x07ff8f8f
 800cafc:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	78db      	ldrb	r3, [r3, #3]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d000      	beq.n	800cb0a <USB_EPStartXfer+0xeb2>
 800cb08:	e14e      	b.n	800cda8 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	699a      	ldr	r2, [r3, #24]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d909      	bls.n	800cb2a <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb22:	1ad2      	subs	r2, r2, r3
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	619a      	str	r2, [r3, #24]
 800cb28:	e005      	b.n	800cb36 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2200      	movs	r2, #0
 800cb34:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	785b      	ldrb	r3, [r3, #1]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d172      	bne.n	800cc24 <USB_EPStartXfer+0xfcc>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	00db      	lsls	r3, r3, #3
 800cb44:	4aaa      	ldr	r2, [pc, #680]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cb46:	4694      	mov	ip, r2
 800cb48:	4463      	add	r3, ip
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	49a7      	ldr	r1, [pc, #668]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cb54:	468c      	mov	ip, r1
 800cb56:	4463      	add	r3, ip
 800cb58:	0412      	lsls	r2, r2, #16
 800cb5a:	0c12      	lsrs	r2, r2, #16
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb60:	2b3e      	cmp	r3, #62	; 0x3e
 800cb62:	d91e      	bls.n	800cba2 <USB_EPStartXfer+0xf4a>
 800cb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb66:	095b      	lsrs	r3, r3, #5
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb6c:	221f      	movs	r2, #31
 800cb6e:	4013      	ands	r3, r2
 800cb70:	d102      	bne.n	800cb78 <USB_EPStartXfer+0xf20>
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	3b01      	subs	r3, #1
 800cb76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	4a9c      	ldr	r2, [pc, #624]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cb80:	4694      	mov	ip, r2
 800cb82:	4463      	add	r3, ip
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	069b      	lsls	r3, r3, #26
 800cb8a:	431a      	orrs	r2, r3
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	4997      	ldr	r1, [pc, #604]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cb94:	468c      	mov	ip, r1
 800cb96:	4463      	add	r3, ip
 800cb98:	2180      	movs	r1, #128	; 0x80
 800cb9a:	0609      	lsls	r1, r1, #24
 800cb9c:	430a      	orrs	r2, r1
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	e065      	b.n	800cc6e <USB_EPStartXfer+0x1016>
 800cba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d121      	bne.n	800cbec <USB_EPStartXfer+0xf94>
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	4a90      	ldr	r2, [pc, #576]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cbb0:	4694      	mov	ip, r2
 800cbb2:	4463      	add	r3, ip
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	00db      	lsls	r3, r3, #3
 800cbbc:	498c      	ldr	r1, [pc, #560]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cbbe:	468c      	mov	ip, r1
 800cbc0:	4463      	add	r3, ip
 800cbc2:	498c      	ldr	r1, [pc, #560]	; (800cdf4 <USB_EPStartXfer+0x119c>)
 800cbc4:	400a      	ands	r2, r1
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	4a88      	ldr	r2, [pc, #544]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cbd0:	4694      	mov	ip, r2
 800cbd2:	4463      	add	r3, ip
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	4984      	ldr	r1, [pc, #528]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cbde:	468c      	mov	ip, r1
 800cbe0:	4463      	add	r3, ip
 800cbe2:	2180      	movs	r1, #128	; 0x80
 800cbe4:	0609      	lsls	r1, r1, #24
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	e040      	b.n	800cc6e <USB_EPStartXfer+0x1016>
 800cbec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbee:	085b      	lsrs	r3, r3, #1
 800cbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	d002      	beq.n	800cc00 <USB_EPStartXfer+0xfa8>
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	4a7a      	ldr	r2, [pc, #488]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc08:	4694      	mov	ip, r2
 800cc0a:	4463      	add	r3, ip
 800cc0c:	6819      	ldr	r1, [r3, #0]
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	069a      	lsls	r2, r3, #26
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	4875      	ldr	r0, [pc, #468]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc1a:	4684      	mov	ip, r0
 800cc1c:	4463      	add	r3, ip
 800cc1e:	430a      	orrs	r2, r1
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	e024      	b.n	800cc6e <USB_EPStartXfer+0x1016>
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	785b      	ldrb	r3, [r3, #1]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d120      	bne.n	800cc6e <USB_EPStartXfer+0x1016>
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	4a6f      	ldr	r2, [pc, #444]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc34:	4694      	mov	ip, r2
 800cc36:	4463      	add	r3, ip
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	496b      	ldr	r1, [pc, #428]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc42:	468c      	mov	ip, r1
 800cc44:	4463      	add	r3, ip
 800cc46:	0412      	lsls	r2, r2, #16
 800cc48:	0c12      	lsrs	r2, r2, #16
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	4a67      	ldr	r2, [pc, #412]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc54:	4694      	mov	ip, r2
 800cc56:	4463      	add	r3, ip
 800cc58:	6819      	ldr	r1, [r3, #0]
 800cc5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc5c:	041a      	lsls	r2, r3, #16
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	4862      	ldr	r0, [pc, #392]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc66:	4684      	mov	ip, r0
 800cc68:	4463      	add	r3, ip
 800cc6a:	430a      	orrs	r2, r1
 800cc6c:	601a      	str	r2, [r3, #0]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	785b      	ldrb	r3, [r3, #1]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d172      	bne.n	800cd5c <USB_EPStartXfer+0x1104>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	4a5c      	ldr	r2, [pc, #368]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc7e:	4694      	mov	ip, r2
 800cc80:	4463      	add	r3, ip
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	00db      	lsls	r3, r3, #3
 800cc8a:	4959      	ldr	r1, [pc, #356]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cc8c:	468c      	mov	ip, r1
 800cc8e:	4463      	add	r3, ip
 800cc90:	0412      	lsls	r2, r2, #16
 800cc92:	0c12      	lsrs	r2, r2, #16
 800cc94:	605a      	str	r2, [r3, #4]
 800cc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc98:	2b3e      	cmp	r3, #62	; 0x3e
 800cc9a:	d91e      	bls.n	800ccda <USB_EPStartXfer+0x1082>
 800cc9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc9e:	095b      	lsrs	r3, r3, #5
 800cca0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca4:	221f      	movs	r2, #31
 800cca6:	4013      	ands	r3, r2
 800cca8:	d102      	bne.n	800ccb0 <USB_EPStartXfer+0x1058>
 800ccaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccac:	3b01      	subs	r3, #1
 800ccae:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	4a4e      	ldr	r2, [pc, #312]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800ccb8:	4694      	mov	ip, r2
 800ccba:	4463      	add	r3, ip
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc0:	069b      	lsls	r3, r3, #26
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	4949      	ldr	r1, [pc, #292]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cccc:	468c      	mov	ip, r1
 800ccce:	4463      	add	r3, ip
 800ccd0:	2180      	movs	r1, #128	; 0x80
 800ccd2:	0609      	lsls	r1, r1, #24
 800ccd4:	430a      	orrs	r2, r1
 800ccd6:	605a      	str	r2, [r3, #4]
 800ccd8:	e068      	b.n	800cdac <USB_EPStartXfer+0x1154>
 800ccda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d121      	bne.n	800cd24 <USB_EPStartXfer+0x10cc>
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	4a42      	ldr	r2, [pc, #264]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cce8:	4694      	mov	ip, r2
 800ccea:	4463      	add	r3, ip
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	493e      	ldr	r1, [pc, #248]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800ccf6:	468c      	mov	ip, r1
 800ccf8:	4463      	add	r3, ip
 800ccfa:	493e      	ldr	r1, [pc, #248]	; (800cdf4 <USB_EPStartXfer+0x119c>)
 800ccfc:	400a      	ands	r2, r1
 800ccfe:	605a      	str	r2, [r3, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	4a3a      	ldr	r2, [pc, #232]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd08:	4694      	mov	ip, r2
 800cd0a:	4463      	add	r3, ip
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	4936      	ldr	r1, [pc, #216]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd16:	468c      	mov	ip, r1
 800cd18:	4463      	add	r3, ip
 800cd1a:	2180      	movs	r1, #128	; 0x80
 800cd1c:	0609      	lsls	r1, r1, #24
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	605a      	str	r2, [r3, #4]
 800cd22:	e043      	b.n	800cdac <USB_EPStartXfer+0x1154>
 800cd24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd26:	085b      	lsrs	r3, r3, #1
 800cd28:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	4013      	ands	r3, r2
 800cd30:	d002      	beq.n	800cd38 <USB_EPStartXfer+0x10e0>
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	3301      	adds	r3, #1
 800cd36:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	4a2c      	ldr	r2, [pc, #176]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd40:	4694      	mov	ip, r2
 800cd42:	4463      	add	r3, ip
 800cd44:	6859      	ldr	r1, [r3, #4]
 800cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd48:	069a      	lsls	r2, r3, #26
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	4827      	ldr	r0, [pc, #156]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd52:	4684      	mov	ip, r0
 800cd54:	4463      	add	r3, ip
 800cd56:	430a      	orrs	r2, r1
 800cd58:	605a      	str	r2, [r3, #4]
 800cd5a:	e027      	b.n	800cdac <USB_EPStartXfer+0x1154>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	785b      	ldrb	r3, [r3, #1]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d123      	bne.n	800cdac <USB_EPStartXfer+0x1154>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	4a21      	ldr	r2, [pc, #132]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd6c:	4694      	mov	ip, r2
 800cd6e:	4463      	add	r3, ip
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	491d      	ldr	r1, [pc, #116]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd7a:	468c      	mov	ip, r1
 800cd7c:	4463      	add	r3, ip
 800cd7e:	0412      	lsls	r2, r2, #16
 800cd80:	0c12      	lsrs	r2, r2, #16
 800cd82:	605a      	str	r2, [r3, #4]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	4a19      	ldr	r2, [pc, #100]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd8c:	4694      	mov	ip, r2
 800cd8e:	4463      	add	r3, ip
 800cd90:	6859      	ldr	r1, [r3, #4]
 800cd92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd94:	041a      	lsls	r2, r3, #16
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	4814      	ldr	r0, [pc, #80]	; (800cdf0 <USB_EPStartXfer+0x1198>)
 800cd9e:	4684      	mov	ip, r0
 800cda0:	4463      	add	r3, ip
 800cda2:	430a      	orrs	r2, r1
 800cda4:	605a      	str	r2, [r3, #4]
 800cda6:	e001      	b.n	800cdac <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e01c      	b.n	800cde6 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	18d3      	adds	r3, r2, r3
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a0f      	ldr	r2, [pc, #60]	; (800cdf8 <USB_EPStartXfer+0x11a0>)
 800cdba:	4013      	ands	r3, r2
 800cdbc:	61fb      	str	r3, [r7, #28]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	2280      	movs	r2, #128	; 0x80
 800cdc2:	0152      	lsls	r2, r2, #5
 800cdc4:	4053      	eors	r3, r2
 800cdc6:	61fb      	str	r3, [r7, #28]
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	2280      	movs	r2, #128	; 0x80
 800cdcc:	0192      	lsls	r2, r2, #6
 800cdce:	4053      	eors	r3, r2
 800cdd0:	61fb      	str	r3, [r7, #28]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	18d3      	adds	r3, r2, r3
 800cddc:	69fa      	ldr	r2, [r7, #28]
 800cdde:	4907      	ldr	r1, [pc, #28]	; (800cdfc <USB_EPStartXfer+0x11a4>)
 800cde0:	430a      	orrs	r2, r1
 800cde2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	0018      	movs	r0, r3
 800cde8:	46bd      	mov	sp, r7
 800cdea:	b017      	add	sp, #92	; 0x5c
 800cdec:	bd90      	pop	{r4, r7, pc}
 800cdee:	46c0      	nop			; (mov r8, r8)
 800cdf0:	40009800 	.word	0x40009800
 800cdf4:	83ffffff 	.word	0x83ffffff
 800cdf8:	07ffbf8f 	.word	0x07ffbf8f
 800cdfc:	00008080 	.word	0x00008080

0800ce00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d016      	beq.n	800ce40 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	18d3      	adds	r3, r2, r3
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a16      	ldr	r2, [pc, #88]	; (800ce78 <USB_EPSetStall+0x78>)
 800ce20:	4013      	ands	r3, r2
 800ce22:	60bb      	str	r3, [r7, #8]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2210      	movs	r2, #16
 800ce28:	4053      	eors	r3, r2
 800ce2a:	60bb      	str	r3, [r7, #8]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	18d3      	adds	r3, r2, r3
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	4910      	ldr	r1, [pc, #64]	; (800ce7c <USB_EPSetStall+0x7c>)
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e016      	b.n	800ce6e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	18d3      	adds	r3, r2, r3
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a0c      	ldr	r2, [pc, #48]	; (800ce80 <USB_EPSetStall+0x80>)
 800ce4e:	4013      	ands	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2280      	movs	r2, #128	; 0x80
 800ce56:	0152      	lsls	r2, r2, #5
 800ce58:	4053      	eors	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	18d3      	adds	r3, r2, r3
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	4904      	ldr	r1, [pc, #16]	; (800ce7c <USB_EPSetStall+0x7c>)
 800ce6a:	430a      	orrs	r2, r1
 800ce6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	0018      	movs	r0, r3
 800ce72:	46bd      	mov	sp, r7
 800ce74:	b004      	add	sp, #16
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	07ff8fbf 	.word	0x07ff8fbf
 800ce7c:	00008080 	.word	0x00008080
 800ce80:	07ffbf8f 	.word	0x07ffbf8f

0800ce84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b088      	sub	sp, #32
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	7a9b      	ldrb	r3, [r3, #10]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d000      	beq.n	800ce98 <USB_EPClearStall+0x14>
 800ce96:	e075      	b.n	800cf84 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	785b      	ldrb	r3, [r3, #1]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d037      	beq.n	800cf10 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	18d3      	adds	r3, r2, r3
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	613b      	str	r3, [r7, #16]
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	2240      	movs	r2, #64	; 0x40
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	d011      	beq.n	800ceda <USB_EPClearStall+0x56>
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	18d3      	adds	r3, r2, r3
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a33      	ldr	r2, [pc, #204]	; (800cf90 <USB_EPClearStall+0x10c>)
 800cec4:	4013      	ands	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	492f      	ldr	r1, [pc, #188]	; (800cf94 <USB_EPClearStall+0x110>)
 800ced6:	430a      	orrs	r2, r1
 800ced8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	78db      	ldrb	r3, [r3, #3]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d050      	beq.n	800cf84 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	18d3      	adds	r3, r2, r3
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a2a      	ldr	r2, [pc, #168]	; (800cf98 <USB_EPClearStall+0x114>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	60bb      	str	r3, [r7, #8]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	2220      	movs	r2, #32
 800cef8:	4053      	eors	r3, r2
 800cefa:	60bb      	str	r3, [r7, #8]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	18d3      	adds	r3, r2, r3
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	4924      	ldr	r1, [pc, #144]	; (800cf9c <USB_EPClearStall+0x118>)
 800cf0a:	430a      	orrs	r2, r1
 800cf0c:	601a      	str	r2, [r3, #0]
 800cf0e:	e039      	b.n	800cf84 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	18d3      	adds	r3, r2, r3
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	61fb      	str	r3, [r7, #28]
 800cf1e:	69fa      	ldr	r2, [r7, #28]
 800cf20:	2380      	movs	r3, #128	; 0x80
 800cf22:	01db      	lsls	r3, r3, #7
 800cf24:	4013      	ands	r3, r2
 800cf26:	d011      	beq.n	800cf4c <USB_EPClearStall+0xc8>
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	18d3      	adds	r3, r2, r3
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a16      	ldr	r2, [pc, #88]	; (800cf90 <USB_EPClearStall+0x10c>)
 800cf36:	4013      	ands	r3, r2
 800cf38:	61bb      	str	r3, [r7, #24]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	18d3      	adds	r3, r2, r3
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	4916      	ldr	r1, [pc, #88]	; (800cfa0 <USB_EPClearStall+0x11c>)
 800cf48:	430a      	orrs	r2, r1
 800cf4a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	18d3      	adds	r3, r2, r3
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a12      	ldr	r2, [pc, #72]	; (800cfa4 <USB_EPClearStall+0x120>)
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2280      	movs	r2, #128	; 0x80
 800cf62:	0152      	lsls	r2, r2, #5
 800cf64:	4053      	eors	r3, r2
 800cf66:	617b      	str	r3, [r7, #20]
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	2280      	movs	r2, #128	; 0x80
 800cf6c:	0192      	lsls	r2, r2, #6
 800cf6e:	4053      	eors	r3, r2
 800cf70:	617b      	str	r3, [r7, #20]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	18d3      	adds	r3, r2, r3
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	4907      	ldr	r1, [pc, #28]	; (800cf9c <USB_EPClearStall+0x118>)
 800cf80:	430a      	orrs	r2, r1
 800cf82:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	0018      	movs	r0, r3
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	b008      	add	sp, #32
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	46c0      	nop			; (mov r8, r8)
 800cf90:	07ff8f8f 	.word	0x07ff8f8f
 800cf94:	000080c0 	.word	0x000080c0
 800cf98:	07ff8fbf 	.word	0x07ff8fbf
 800cf9c:	00008080 	.word	0x00008080
 800cfa0:	0000c080 	.word	0x0000c080
 800cfa4:	07ffbf8f 	.word	0x07ffbf8f

0800cfa8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d131      	bne.n	800d01e <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	7a9b      	ldrb	r3, [r3, #10]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d15f      	bne.n	800d082 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	78db      	ldrb	r3, [r3, #3]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d016      	beq.n	800cff8 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	18d3      	adds	r3, r2, r3
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a2d      	ldr	r2, [pc, #180]	; (800d08c <USB_EPStopXfer+0xe4>)
 800cfd8:	4013      	ands	r3, r2
 800cfda:	60bb      	str	r3, [r7, #8]
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2220      	movs	r2, #32
 800cfe0:	4053      	eors	r3, r2
 800cfe2:	60bb      	str	r3, [r7, #8]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	18d3      	adds	r3, r2, r3
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	4927      	ldr	r1, [pc, #156]	; (800d090 <USB_EPStopXfer+0xe8>)
 800cff2:	430a      	orrs	r2, r1
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	e044      	b.n	800d082 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	18d3      	adds	r3, r2, r3
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a21      	ldr	r2, [pc, #132]	; (800d08c <USB_EPStopXfer+0xe4>)
 800d006:	4013      	ands	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	18d3      	adds	r3, r2, r3
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	491e      	ldr	r1, [pc, #120]	; (800d090 <USB_EPStopXfer+0xe8>)
 800d018:	430a      	orrs	r2, r1
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	e031      	b.n	800d082 <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	7a9b      	ldrb	r3, [r3, #10]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d12d      	bne.n	800d082 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	78db      	ldrb	r3, [r3, #3]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d017      	beq.n	800d05e <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	18d3      	adds	r3, r2, r3
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a16      	ldr	r2, [pc, #88]	; (800d094 <USB_EPStopXfer+0xec>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	613b      	str	r3, [r7, #16]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	2280      	movs	r2, #128	; 0x80
 800d044:	0192      	lsls	r2, r2, #6
 800d046:	4053      	eors	r3, r2
 800d048:	613b      	str	r3, [r7, #16]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	18d3      	adds	r3, r2, r3
 800d054:	693a      	ldr	r2, [r7, #16]
 800d056:	490e      	ldr	r1, [pc, #56]	; (800d090 <USB_EPStopXfer+0xe8>)
 800d058:	430a      	orrs	r2, r1
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	e011      	b.n	800d082 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	18d3      	adds	r3, r2, r3
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a0a      	ldr	r2, [pc, #40]	; (800d094 <USB_EPStopXfer+0xec>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	18d3      	adds	r3, r2, r3
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	4904      	ldr	r1, [pc, #16]	; (800d090 <USB_EPStopXfer+0xe8>)
 800d07e:	430a      	orrs	r2, r1
 800d080:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	0018      	movs	r0, r3
 800d086:	46bd      	mov	sp, r7
 800d088:	b006      	add	sp, #24
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	07ff8fbf 	.word	0x07ff8fbf
 800d090:	00008080 	.word	0x00008080
 800d094:	07ffbf8f 	.word	0x07ffbf8f

0800d098 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	000a      	movs	r2, r1
 800d0a2:	1cfb      	adds	r3, r7, #3
 800d0a4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800d0a6:	1cfb      	adds	r3, r7, #3
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d102      	bne.n	800d0b4 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2280      	movs	r2, #128	; 0x80
 800d0b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	b002      	add	sp, #8
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ca:	2280      	movs	r2, #128	; 0x80
 800d0cc:	0212      	lsls	r2, r2, #8
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	b002      	add	sp, #8
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ec:	4a04      	ldr	r2, [pc, #16]	; (800d100 <USB_DevDisconnect+0x20>)
 800d0ee:	401a      	ands	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	b002      	add	sp, #8
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	ffff7fff 	.word	0xffff7fff

0800d104 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d110:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d112:	68fb      	ldr	r3, [r7, #12]
}
 800d114:	0018      	movs	r0, r3
 800d116:	46bd      	mov	sp, r7
 800d118:	b004      	add	sp, #16
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08a      	sub	sp, #40	; 0x28
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	0019      	movs	r1, r3
 800d128:	1dbb      	adds	r3, r7, #6
 800d12a:	801a      	strh	r2, [r3, #0]
 800d12c:	1d3b      	adds	r3, r7, #4
 800d12e:	1c0a      	adds	r2, r1, #0
 800d130:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d132:	1d3b      	adds	r3, r7, #4
 800d134:	881b      	ldrh	r3, [r3, #0]
 800d136:	3303      	adds	r3, #3
 800d138:	089b      	lsrs	r3, r3, #2
 800d13a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d13c:	2016      	movs	r0, #22
 800d13e:	183b      	adds	r3, r7, r0
 800d140:	1d3a      	adds	r2, r7, #4
 800d142:	8812      	ldrh	r2, [r2, #0]
 800d144:	2103      	movs	r1, #3
 800d146:	400a      	ands	r2, r1
 800d148:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d14e:	183b      	adds	r3, r7, r0
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <USB_WritePMA+0x40>
  {
    NbWords--;
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	3b01      	subs	r3, #1
 800d15a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d15c:	1dbb      	adds	r3, r7, #6
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	4a28      	ldr	r2, [pc, #160]	; (800d204 <USB_WritePMA+0xe8>)
 800d162:	4694      	mov	ip, r2
 800d164:	4463      	add	r3, ip
 800d166:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	623b      	str	r3, [r7, #32]
 800d16c:	e01f      	b.n	800d1ae <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	7859      	ldrb	r1, [r3, #1]
 800d174:	0209      	lsls	r1, r1, #8
 800d176:	430a      	orrs	r2, r1
 800d178:	7899      	ldrb	r1, [r3, #2]
 800d17a:	0409      	lsls	r1, r1, #16
 800d17c:	430a      	orrs	r2, r1
 800d17e:	78db      	ldrb	r3, [r3, #3]
 800d180:	061b      	lsls	r3, r3, #24
 800d182:	4313      	orrs	r3, r2
 800d184:	001a      	movs	r2, r3
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	3304      	adds	r3, #4
 800d18e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	3301      	adds	r3, #1
 800d194:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	3301      	adds	r3, #1
 800d19a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	623b      	str	r3, [r7, #32]
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1dc      	bne.n	800d16e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d1b4:	2316      	movs	r3, #22
 800d1b6:	18fb      	adds	r3, r7, r3
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d01e      	beq.n	800d1fc <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	001a      	movs	r2, r3
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	409a      	lsls	r2, r3
 800d1ce:	0013      	movs	r3, r2
 800d1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d1e2:	2116      	movs	r1, #22
 800d1e4:	187b      	adds	r3, r7, r1
 800d1e6:	881a      	ldrh	r2, [r3, #0]
 800d1e8:	187b      	adds	r3, r7, r1
 800d1ea:	3a01      	subs	r2, #1
 800d1ec:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800d1ee:	187b      	adds	r3, r7, r1
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1e5      	bne.n	800d1c2 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1fa:	601a      	str	r2, [r3, #0]
  }
}
 800d1fc:	46c0      	nop			; (mov r8, r8)
 800d1fe:	46bd      	mov	sp, r7
 800d200:	b00a      	add	sp, #40	; 0x28
 800d202:	bd80      	pop	{r7, pc}
 800d204:	40009800 	.word	0x40009800

0800d208 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d208:	b590      	push	{r4, r7, lr}
 800d20a:	b08b      	sub	sp, #44	; 0x2c
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	0019      	movs	r1, r3
 800d214:	1dbb      	adds	r3, r7, #6
 800d216:	801a      	strh	r2, [r3, #0]
 800d218:	1d3b      	adds	r3, r7, #4
 800d21a:	1c0a      	adds	r2, r1, #0
 800d21c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d21e:	1d3b      	adds	r3, r7, #4
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	3303      	adds	r3, #3
 800d224:	089b      	lsrs	r3, r3, #2
 800d226:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d228:	201a      	movs	r0, #26
 800d22a:	183b      	adds	r3, r7, r0
 800d22c:	1d3a      	adds	r2, r7, #4
 800d22e:	8812      	ldrh	r2, [r2, #0]
 800d230:	2103      	movs	r1, #3
 800d232:	400a      	ands	r2, r1
 800d234:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d23a:	1dbb      	adds	r3, r7, #6
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	4a39      	ldr	r2, [pc, #228]	; (800d324 <USB_ReadPMA+0x11c>)
 800d240:	4694      	mov	ip, r2
 800d242:	4463      	add	r3, ip
 800d244:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d246:	183b      	adds	r3, r7, r0
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	3b01      	subs	r3, #1
 800d252:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
 800d258:	e03c      	b.n	800d2d4 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	21ff      	movs	r1, #255	; 0xff
 800d262:	4011      	ands	r1, r2
 800d264:	000c      	movs	r4, r1
 800d266:	7819      	ldrb	r1, [r3, #0]
 800d268:	2000      	movs	r0, #0
 800d26a:	4001      	ands	r1, r0
 800d26c:	1c08      	adds	r0, r1, #0
 800d26e:	1c21      	adds	r1, r4, #0
 800d270:	4301      	orrs	r1, r0
 800d272:	7019      	strb	r1, [r3, #0]
 800d274:	0a11      	lsrs	r1, r2, #8
 800d276:	20ff      	movs	r0, #255	; 0xff
 800d278:	4001      	ands	r1, r0
 800d27a:	000c      	movs	r4, r1
 800d27c:	7859      	ldrb	r1, [r3, #1]
 800d27e:	2000      	movs	r0, #0
 800d280:	4001      	ands	r1, r0
 800d282:	1c08      	adds	r0, r1, #0
 800d284:	1c21      	adds	r1, r4, #0
 800d286:	4301      	orrs	r1, r0
 800d288:	7059      	strb	r1, [r3, #1]
 800d28a:	0c11      	lsrs	r1, r2, #16
 800d28c:	20ff      	movs	r0, #255	; 0xff
 800d28e:	4001      	ands	r1, r0
 800d290:	000c      	movs	r4, r1
 800d292:	7899      	ldrb	r1, [r3, #2]
 800d294:	2000      	movs	r0, #0
 800d296:	4001      	ands	r1, r0
 800d298:	1c08      	adds	r0, r1, #0
 800d29a:	1c21      	adds	r1, r4, #0
 800d29c:	4301      	orrs	r1, r0
 800d29e:	7099      	strb	r1, [r3, #2]
 800d2a0:	0e10      	lsrs	r0, r2, #24
 800d2a2:	78da      	ldrb	r2, [r3, #3]
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	400a      	ands	r2, r1
 800d2a8:	1c11      	adds	r1, r2, #0
 800d2aa:	1c02      	adds	r2, r0, #0
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1bf      	bne.n	800d25a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d2da:	231a      	movs	r3, #26
 800d2dc:	18fb      	adds	r3, r7, r3
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01b      	beq.n	800d31c <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	40da      	lsrs	r2, r3
 800d2f4:	0013      	movs	r3, r2
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	701a      	strb	r2, [r3, #0]
      count++;
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	3301      	adds	r3, #1
 800d300:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	3301      	adds	r3, #1
 800d306:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d308:	211a      	movs	r1, #26
 800d30a:	187b      	adds	r3, r7, r1
 800d30c:	881a      	ldrh	r2, [r3, #0]
 800d30e:	187b      	adds	r3, r7, r1
 800d310:	3a01      	subs	r2, #1
 800d312:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800d314:	187b      	adds	r3, r7, r1
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e6      	bne.n	800d2ea <USB_ReadPMA+0xe2>
  }
}
 800d31c:	46c0      	nop			; (mov r8, r8)
 800d31e:	46bd      	mov	sp, r7
 800d320:	b00b      	add	sp, #44	; 0x2c
 800d322:	bd90      	pop	{r4, r7, pc}
 800d324:	40009800 	.word	0x40009800

0800d328 <__NVIC_EnableIRQ>:
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	0002      	movs	r2, r0
 800d330:	1dfb      	adds	r3, r7, #7
 800d332:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d334:	1dfb      	adds	r3, r7, #7
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b7f      	cmp	r3, #127	; 0x7f
 800d33a:	d809      	bhi.n	800d350 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d33c:	1dfb      	adds	r3, r7, #7
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	001a      	movs	r2, r3
 800d342:	231f      	movs	r3, #31
 800d344:	401a      	ands	r2, r3
 800d346:	4b04      	ldr	r3, [pc, #16]	; (800d358 <__NVIC_EnableIRQ+0x30>)
 800d348:	2101      	movs	r1, #1
 800d34a:	4091      	lsls	r1, r2
 800d34c:	000a      	movs	r2, r1
 800d34e:	601a      	str	r2, [r3, #0]
}
 800d350:	46c0      	nop			; (mov r8, r8)
 800d352:	46bd      	mov	sp, r7
 800d354:	b002      	add	sp, #8
 800d356:	bd80      	pop	{r7, pc}
 800d358:	e000e100 	.word	0xe000e100

0800d35c <__NVIC_SetPriority>:
{
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	0002      	movs	r2, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	1dfb      	adds	r3, r7, #7
 800d368:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d36a:	1dfb      	adds	r3, r7, #7
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	2b7f      	cmp	r3, #127	; 0x7f
 800d370:	d828      	bhi.n	800d3c4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d372:	4a2f      	ldr	r2, [pc, #188]	; (800d430 <__NVIC_SetPriority+0xd4>)
 800d374:	1dfb      	adds	r3, r7, #7
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	b25b      	sxtb	r3, r3
 800d37a:	089b      	lsrs	r3, r3, #2
 800d37c:	33c0      	adds	r3, #192	; 0xc0
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	589b      	ldr	r3, [r3, r2]
 800d382:	1dfa      	adds	r2, r7, #7
 800d384:	7812      	ldrb	r2, [r2, #0]
 800d386:	0011      	movs	r1, r2
 800d388:	2203      	movs	r2, #3
 800d38a:	400a      	ands	r2, r1
 800d38c:	00d2      	lsls	r2, r2, #3
 800d38e:	21ff      	movs	r1, #255	; 0xff
 800d390:	4091      	lsls	r1, r2
 800d392:	000a      	movs	r2, r1
 800d394:	43d2      	mvns	r2, r2
 800d396:	401a      	ands	r2, r3
 800d398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	019b      	lsls	r3, r3, #6
 800d39e:	22ff      	movs	r2, #255	; 0xff
 800d3a0:	401a      	ands	r2, r3
 800d3a2:	1dfb      	adds	r3, r7, #7
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	4003      	ands	r3, r0
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d3b0:	481f      	ldr	r0, [pc, #124]	; (800d430 <__NVIC_SetPriority+0xd4>)
 800d3b2:	1dfb      	adds	r3, r7, #7
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	b25b      	sxtb	r3, r3
 800d3b8:	089b      	lsrs	r3, r3, #2
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	33c0      	adds	r3, #192	; 0xc0
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	501a      	str	r2, [r3, r0]
}
 800d3c2:	e031      	b.n	800d428 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d3c4:	4a1b      	ldr	r2, [pc, #108]	; (800d434 <__NVIC_SetPriority+0xd8>)
 800d3c6:	1dfb      	adds	r3, r7, #7
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	0019      	movs	r1, r3
 800d3cc:	230f      	movs	r3, #15
 800d3ce:	400b      	ands	r3, r1
 800d3d0:	3b08      	subs	r3, #8
 800d3d2:	089b      	lsrs	r3, r3, #2
 800d3d4:	3306      	adds	r3, #6
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	18d3      	adds	r3, r2, r3
 800d3da:	3304      	adds	r3, #4
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	1dfa      	adds	r2, r7, #7
 800d3e0:	7812      	ldrb	r2, [r2, #0]
 800d3e2:	0011      	movs	r1, r2
 800d3e4:	2203      	movs	r2, #3
 800d3e6:	400a      	ands	r2, r1
 800d3e8:	00d2      	lsls	r2, r2, #3
 800d3ea:	21ff      	movs	r1, #255	; 0xff
 800d3ec:	4091      	lsls	r1, r2
 800d3ee:	000a      	movs	r2, r1
 800d3f0:	43d2      	mvns	r2, r2
 800d3f2:	401a      	ands	r2, r3
 800d3f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	019b      	lsls	r3, r3, #6
 800d3fa:	22ff      	movs	r2, #255	; 0xff
 800d3fc:	401a      	ands	r2, r3
 800d3fe:	1dfb      	adds	r3, r7, #7
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	0018      	movs	r0, r3
 800d404:	2303      	movs	r3, #3
 800d406:	4003      	ands	r3, r0
 800d408:	00db      	lsls	r3, r3, #3
 800d40a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d40c:	4809      	ldr	r0, [pc, #36]	; (800d434 <__NVIC_SetPriority+0xd8>)
 800d40e:	1dfb      	adds	r3, r7, #7
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	001c      	movs	r4, r3
 800d414:	230f      	movs	r3, #15
 800d416:	4023      	ands	r3, r4
 800d418:	3b08      	subs	r3, #8
 800d41a:	089b      	lsrs	r3, r3, #2
 800d41c:	430a      	orrs	r2, r1
 800d41e:	3306      	adds	r3, #6
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	18c3      	adds	r3, r0, r3
 800d424:	3304      	adds	r3, #4
 800d426:	601a      	str	r2, [r3, #0]
}
 800d428:	46c0      	nop			; (mov r8, r8)
 800d42a:	46bd      	mov	sp, r7
 800d42c:	b003      	add	sp, #12
 800d42e:	bd90      	pop	{r4, r7, pc}
 800d430:	e000e100 	.word	0xe000e100
 800d434:	e000ed00 	.word	0xe000ed00

0800d438 <LL_UCPD_Enable>:
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2280      	movs	r2, #128	; 0x80
 800d446:	0612      	lsls	r2, r2, #24
 800d448:	431a      	orrs	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
}
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	46bd      	mov	sp, r7
 800d452:	b002      	add	sp, #8
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a05      	ldr	r2, [pc, #20]	; (800d47c <LL_UCPD_SetRxOrderSet+0x24>)
 800d468:	401a      	ands	r2, r3
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	431a      	orrs	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]
}
 800d472:	46c0      	nop			; (mov r8, r8)
 800d474:	46bd      	mov	sp, r7
 800d476:	b002      	add	sp, #8
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	46c0      	nop			; (mov r8, r8)
 800d47c:	e00fffff 	.word	0xe00fffff

0800d480 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	4a05      	ldr	r2, [pc, #20]	; (800d4a4 <LL_UCPD_SetccEnable+0x24>)
 800d490:	401a      	ands	r2, r3
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	431a      	orrs	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60da      	str	r2, [r3, #12]
}
 800d49a:	46c0      	nop			; (mov r8, r8)
 800d49c:	46bd      	mov	sp, r7
 800d49e:	b002      	add	sp, #8
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	46c0      	nop			; (mov r8, r8)
 800d4a4:	fffff3ff 	.word	0xfffff3ff

0800d4a8 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	2280      	movs	r2, #128	; 0x80
 800d4b6:	0212      	lsls	r2, r2, #8
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	611a      	str	r2, [r3, #16]
}
 800d4be:	46c0      	nop			; (mov r8, r8)
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	b002      	add	sp, #8
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	2280      	movs	r2, #128	; 0x80
 800d4d4:	01d2      	lsls	r2, r2, #7
 800d4d6:	431a      	orrs	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	611a      	str	r2, [r3, #16]
}
 800d4dc:	46c0      	nop			; (mov r8, r8)
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	b002      	add	sp, #8
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e6:	b08b      	sub	sp, #44	; 0x2c
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60b9      	str	r1, [r7, #8]
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	240f      	movs	r4, #15
 800d4f2:	193b      	adds	r3, r7, r4
 800d4f4:	1c02      	adds	r2, r0, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d4f8:	193b      	adds	r3, r7, r4
 800d4fa:	781a      	ldrb	r2, [r3, #0]
 800d4fc:	0013      	movs	r3, r2
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	189b      	adds	r3, r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4a65      	ldr	r2, [pc, #404]	; (800d69c <CAD_Init+0x1b8>)
 800d506:	189b      	adds	r3, r3, r2
 800d508:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800d50a:	193b      	adds	r3, r7, r4
 800d50c:	781a      	ldrb	r2, [r3, #0]
 800d50e:	4964      	ldr	r1, [pc, #400]	; (800d6a0 <CAD_Init+0x1bc>)
 800d510:	0013      	movs	r3, r2
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	18cb      	adds	r3, r1, r3
 800d51a:	3310      	adds	r3, #16
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800d520:	193b      	adds	r3, r7, r4
 800d522:	781a      	ldrb	r2, [r3, #0]
 800d524:	495e      	ldr	r1, [pc, #376]	; (800d6a0 <CAD_Init+0x1bc>)
 800d526:	0013      	movs	r3, r2
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	1a9b      	subs	r3, r3, r2
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	18cb      	adds	r3, r1, r3
 800d530:	330c      	adds	r3, #12
 800d532:	68ba      	ldr	r2, [r7, #8]
 800d534:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800d536:	193b      	adds	r3, r7, r4
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	4959      	ldr	r1, [pc, #356]	; (800d6a0 <CAD_Init+0x1bc>)
 800d53c:	0013      	movs	r3, r2
 800d53e:	00db      	lsls	r3, r3, #3
 800d540:	1a9b      	subs	r3, r3, r2
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	18cb      	adds	r3, r1, r3
 800d546:	330c      	adds	r3, #12
 800d548:	6819      	ldr	r1, [r3, #0]
 800d54a:	193b      	adds	r3, r7, r4
 800d54c:	781a      	ldrb	r2, [r3, #0]
 800d54e:	4854      	ldr	r0, [pc, #336]	; (800d6a0 <CAD_Init+0x1bc>)
 800d550:	0013      	movs	r3, r2
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	1a9b      	subs	r3, r3, r2
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	18c3      	adds	r3, r0, r3
 800d55a:	3310      	adds	r3, #16
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	794a      	ldrb	r2, [r1, #5]
 800d560:	0612      	lsls	r2, r2, #24
 800d562:	0f92      	lsrs	r2, r2, #30
 800d564:	b2d2      	uxtb	r2, r2
 800d566:	2103      	movs	r1, #3
 800d568:	400a      	ands	r2, r1
 800d56a:	0010      	movs	r0, r2
 800d56c:	789a      	ldrb	r2, [r3, #2]
 800d56e:	2103      	movs	r1, #3
 800d570:	438a      	bics	r2, r1
 800d572:	1c11      	adds	r1, r2, #0
 800d574:	1c02      	adds	r2, r0, #0
 800d576:	430a      	orrs	r2, r1
 800d578:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800d57a:	193b      	adds	r3, r7, r4
 800d57c:	781a      	ldrb	r2, [r3, #0]
 800d57e:	4948      	ldr	r1, [pc, #288]	; (800d6a0 <CAD_Init+0x1bc>)
 800d580:	0013      	movs	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	1a9b      	subs	r3, r3, r2
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	18cb      	adds	r3, r1, r3
 800d58a:	3310      	adds	r3, #16
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	789a      	ldrb	r2, [r3, #2]
 800d590:	210c      	movs	r1, #12
 800d592:	438a      	bics	r2, r1
 800d594:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	220c      	movs	r2, #12
 800d59a:	2100      	movs	r1, #0
 800d59c:	0018      	movs	r0, r3
 800d59e:	f00c fd7f 	bl	801a0a0 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800d5a2:	193b      	adds	r3, r7, r4
 800d5a4:	781a      	ldrb	r2, [r3, #0]
 800d5a6:	493e      	ldr	r1, [pc, #248]	; (800d6a0 <CAD_Init+0x1bc>)
 800d5a8:	0013      	movs	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	1a9b      	subs	r3, r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	18cb      	adds	r3, r1, r3
 800d5b2:	332c      	adds	r3, #44	; 0x2c
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800d5b8:	0025      	movs	r5, r4
 800d5ba:	193b      	adds	r3, r7, r4
 800d5bc:	781c      	ldrb	r4, [r3, #0]
 800d5be:	197b      	adds	r3, r7, r5
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	0018      	movs	r0, r3
 800d5c4:	f000 fc08 	bl	800ddd8 <USBPD_HW_GetUSPDInstance>
 800d5c8:	0001      	movs	r1, r0
 800d5ca:	4a35      	ldr	r2, [pc, #212]	; (800d6a0 <CAD_Init+0x1bc>)
 800d5cc:	0023      	movs	r3, r4
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	1b1b      	subs	r3, r3, r4
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800d5d6:	2614      	movs	r6, #20
 800d5d8:	19bb      	adds	r3, r7, r6
 800d5da:	0018      	movs	r0, r3
 800d5dc:	f7fd fe0c 	bl	800b1f8 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800d5e0:	002c      	movs	r4, r5
 800d5e2:	193b      	adds	r3, r7, r4
 800d5e4:	781a      	ldrb	r2, [r3, #0]
 800d5e6:	492e      	ldr	r1, [pc, #184]	; (800d6a0 <CAD_Init+0x1bc>)
 800d5e8:	0013      	movs	r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	1a9b      	subs	r3, r3, r2
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	585b      	ldr	r3, [r3, r1]
 800d5f2:	19ba      	adds	r2, r7, r6
 800d5f4:	0011      	movs	r1, r2
 800d5f6:	0018      	movs	r0, r3
 800d5f8:	f7fd fdc4 	bl	800b184 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800d5fc:	193b      	adds	r3, r7, r4
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	4927      	ldr	r1, [pc, #156]	; (800d6a0 <CAD_Init+0x1bc>)
 800d602:	0013      	movs	r3, r2
 800d604:	00db      	lsls	r3, r3, #3
 800d606:	1a9b      	subs	r3, r3, r2
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	585b      	ldr	r3, [r3, r1]
 800d60c:	22f8      	movs	r2, #248	; 0xf8
 800d60e:	0452      	lsls	r2, r2, #17
 800d610:	0011      	movs	r1, r2
 800d612:	0018      	movs	r0, r3
 800d614:	f7ff ff20 	bl	800d458 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800d618:	193b      	adds	r3, r7, r4
 800d61a:	781a      	ldrb	r2, [r3, #0]
 800d61c:	4920      	ldr	r1, [pc, #128]	; (800d6a0 <CAD_Init+0x1bc>)
 800d61e:	0013      	movs	r3, r2
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	1a9b      	subs	r3, r3, r2
 800d624:	00db      	lsls	r3, r3, #3
 800d626:	585b      	ldr	r3, [r3, r1]
 800d628:	22c0      	movs	r2, #192	; 0xc0
 800d62a:	0112      	lsls	r2, r2, #4
 800d62c:	0011      	movs	r1, r2
 800d62e:	0018      	movs	r0, r3
 800d630:	f7ff ff26 	bl	800d480 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800d634:	193b      	adds	r3, r7, r4
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	0018      	movs	r0, r3
 800d63a:	f00b fcb0 	bl	8018f9e <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800d63e:	193b      	adds	r3, r7, r4
 800d640:	781a      	ldrb	r2, [r3, #0]
 800d642:	4917      	ldr	r1, [pc, #92]	; (800d6a0 <CAD_Init+0x1bc>)
 800d644:	0013      	movs	r3, r2
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	1a9b      	subs	r3, r3, r2
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	585b      	ldr	r3, [r3, r1]
 800d64e:	0018      	movs	r0, r3
 800d650:	f7ff fef2 	bl	800d438 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800d654:	193b      	adds	r3, r7, r4
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	0018      	movs	r0, r3
 800d65a:	f001 fcdd 	bl	800f018 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	4a10      	ldr	r2, [pc, #64]	; (800d6a4 <CAD_Init+0x1c0>)
 800d662:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800d664:	193b      	adds	r3, r7, r4
 800d666:	781a      	ldrb	r2, [r3, #0]
 800d668:	490d      	ldr	r1, [pc, #52]	; (800d6a0 <CAD_Init+0x1bc>)
 800d66a:	0013      	movs	r3, r2
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	00db      	lsls	r3, r3, #3
 800d672:	18cb      	adds	r3, r1, r3
 800d674:	330c      	adds	r3, #12
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	795b      	ldrb	r3, [r3, #5]
 800d67a:	06db      	lsls	r3, r3, #27
 800d67c:	0fdb      	lsrs	r3, r3, #31
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	01d0      	lsls	r0, r2, #7
 800d684:	785a      	ldrb	r2, [r3, #1]
 800d686:	217f      	movs	r1, #127	; 0x7f
 800d688:	400a      	ands	r2, r1
 800d68a:	1c11      	adds	r1, r2, #0
 800d68c:	1c02      	adds	r2, r0, #0
 800d68e:	430a      	orrs	r2, r1
 800d690:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800d692:	46c0      	nop			; (mov r8, r8)
 800d694:	46bd      	mov	sp, r7
 800d696:	b00b      	add	sp, #44	; 0x2c
 800d698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d69a:	46c0      	nop			; (mov r8, r8)
 800d69c:	20010608 	.word	0x20010608
 800d6a0:	20010620 	.word	0x20010620
 800d6a4:	0800d7a5 	.word	0x0800d7a5

0800d6a8 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	0002      	movs	r2, r0
 800d6b0:	1dfb      	adds	r3, r7, #7
 800d6b2:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800d6b4:	1dfb      	adds	r3, r7, #7
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	0018      	movs	r0, r3
 800d6ba:	f001 fd5d 	bl	800f178 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800d6be:	1dfb      	adds	r3, r7, #7
 800d6c0:	7819      	ldrb	r1, [r3, #0]
 800d6c2:	4a0c      	ldr	r2, [pc, #48]	; (800d6f4 <CAD_Enter_ErrorRecovery+0x4c>)
 800d6c4:	000b      	movs	r3, r1
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	185b      	adds	r3, r3, r1
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	5c99      	ldrb	r1, [r3, r2]
 800d6ce:	2080      	movs	r0, #128	; 0x80
 800d6d0:	4240      	negs	r0, r0
 800d6d2:	4301      	orrs	r1, r0
 800d6d4:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800d6d6:	1dfb      	adds	r3, r7, #7
 800d6d8:	781a      	ldrb	r2, [r3, #0]
 800d6da:	4907      	ldr	r1, [pc, #28]	; (800d6f8 <CAD_Enter_ErrorRecovery+0x50>)
 800d6dc:	0013      	movs	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	18cb      	adds	r3, r1, r3
 800d6e6:	332c      	adds	r3, #44	; 0x2c
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4798      	blx	r3
}
 800d6ec:	46c0      	nop			; (mov r8, r8)
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	b002      	add	sp, #8
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20010608 	.word	0x20010608
 800d6f8:	20010620 	.word	0x20010620

0800d6fc <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	0002      	movs	r2, r0
 800d704:	6039      	str	r1, [r7, #0]
 800d706:	1dfb      	adds	r3, r7, #7
 800d708:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800d70a:	1dfb      	adds	r3, r7, #7
 800d70c:	781a      	ldrb	r2, [r3, #0]
 800d70e:	4919      	ldr	r1, [pc, #100]	; (800d774 <CAD_SRC_Set_ResistorRp+0x78>)
 800d710:	0013      	movs	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	1a9b      	subs	r3, r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	18cb      	adds	r3, r1, r3
 800d71a:	3310      	adds	r3, #16
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	1c11      	adds	r1, r2, #0
 800d722:	2203      	movs	r2, #3
 800d724:	400a      	ands	r2, r1
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	2103      	movs	r1, #3
 800d72a:	400a      	ands	r2, r1
 800d72c:	0010      	movs	r0, r2
 800d72e:	789a      	ldrb	r2, [r3, #2]
 800d730:	2103      	movs	r1, #3
 800d732:	438a      	bics	r2, r1
 800d734:	1c11      	adds	r1, r2, #0
 800d736:	1c02      	adds	r2, r0, #0
 800d738:	430a      	orrs	r2, r1
 800d73a:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800d73c:	1dfb      	adds	r3, r7, #7
 800d73e:	781a      	ldrb	r2, [r3, #0]
 800d740:	490d      	ldr	r1, [pc, #52]	; (800d778 <CAD_SRC_Set_ResistorRp+0x7c>)
 800d742:	0013      	movs	r3, r2
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	189b      	adds	r3, r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	18cb      	adds	r3, r1, r3
 800d74c:	785a      	ldrb	r2, [r3, #1]
 800d74e:	2101      	movs	r1, #1
 800d750:	430a      	orrs	r2, r1
 800d752:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800d754:	1dfb      	adds	r3, r7, #7
 800d756:	781a      	ldrb	r2, [r3, #0]
 800d758:	4906      	ldr	r1, [pc, #24]	; (800d774 <CAD_SRC_Set_ResistorRp+0x78>)
 800d75a:	0013      	movs	r3, r2
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	18cb      	adds	r3, r1, r3
 800d764:	332c      	adds	r3, #44	; 0x2c
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4798      	blx	r3
  return 0;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	0018      	movs	r0, r3
 800d76e:	46bd      	mov	sp, r7
 800d770:	b002      	add	sp, #8
 800d772:	bd80      	pop	{r7, pc}
 800d774:	20010620 	.word	0x20010620
 800d778:	20010608 	.word	0x20010608

0800d77c <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	0002      	movs	r2, r0
 800d784:	6039      	str	r1, [r7, #0]
 800d786:	1dfb      	adds	r3, r7, #7
 800d788:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	1dfb      	adds	r3, r7, #7
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	0011      	movs	r1, r2
 800d792:	0018      	movs	r0, r3
 800d794:	f7ff ffb2 	bl	800d6fc <CAD_SRC_Set_ResistorRp>
 800d798:	0003      	movs	r3, r0
}
 800d79a:	0018      	movs	r0, r3
 800d79c:	46bd      	mov	sp, r7
 800d79e:	b002      	add	sp, #8
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	607a      	str	r2, [r7, #4]
 800d7ae:	210f      	movs	r1, #15
 800d7b0:	187b      	adds	r3, r7, r1
 800d7b2:	1c02      	adds	r2, r0, #0
 800d7b4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d7b6:	187b      	adds	r3, r7, r1
 800d7b8:	781a      	ldrb	r2, [r3, #0]
 800d7ba:	0013      	movs	r3, r2
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	189b      	adds	r3, r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	4a1b      	ldr	r2, [pc, #108]	; (800d830 <CAD_StateMachine_SNK+0x8c>)
 800d7c4:	189b      	adds	r3, r3, r2
 800d7c6:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	785b      	ldrb	r3, [r3, #1]
 800d7d0:	069b      	lsls	r3, r3, #26
 800d7d2:	0edb      	lsrs	r3, r3, #27
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	d019      	beq.n	800d80e <CAD_StateMachine_SNK+0x6a>
 800d7da:	dc23      	bgt.n	800d824 <CAD_StateMachine_SNK+0x80>
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d002      	beq.n	800d7e6 <CAD_StateMachine_SNK+0x42>
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d009      	beq.n	800d7f8 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 800d7e4:	e01e      	b.n	800d824 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 800d7e6:	230f      	movs	r3, #15
 800d7e8:	18fb      	adds	r3, r7, r3
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	0018      	movs	r0, r3
 800d7ee:	f000 f98b 	bl	800db08 <ManageStateDetached_SNK>
 800d7f2:	0003      	movs	r3, r0
 800d7f4:	617b      	str	r3, [r7, #20]
      break;
 800d7f6:	e016      	b.n	800d826 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	68b9      	ldr	r1, [r7, #8]
 800d7fc:	230f      	movs	r3, #15
 800d7fe:	18fb      	adds	r3, r7, r3
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	0018      	movs	r0, r3
 800d804:	f000 f9d2 	bl	800dbac <ManageStateAttachedWait_SNK>
 800d808:	0003      	movs	r3, r0
 800d80a:	617b      	str	r3, [r7, #20]
      break;
 800d80c:	e00b      	b.n	800d826 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	68b9      	ldr	r1, [r7, #8]
 800d812:	230f      	movs	r3, #15
 800d814:	18fb      	adds	r3, r7, r3
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	0018      	movs	r0, r3
 800d81a:	f000 fa55 	bl	800dcc8 <ManageStateAttached_SNK>
 800d81e:	0003      	movs	r3, r0
 800d820:	617b      	str	r3, [r7, #20]
      break;
 800d822:	e000      	b.n	800d826 <CAD_StateMachine_SNK+0x82>
      break;
 800d824:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800d826:	697b      	ldr	r3, [r7, #20]
}
 800d828:	0018      	movs	r0, r3
 800d82a:	46bd      	mov	sp, r7
 800d82c:	b006      	add	sp, #24
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20010608 	.word	0x20010608

0800d834 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800d834:	b590      	push	{r4, r7, lr}
 800d836:	b087      	sub	sp, #28
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
 800d83e:	210f      	movs	r1, #15
 800d840:	187b      	adds	r3, r7, r1
 800d842:	1c02      	adds	r2, r0, #0
 800d844:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d846:	187b      	adds	r3, r7, r1
 800d848:	781a      	ldrb	r2, [r3, #0]
 800d84a:	0013      	movs	r3, r2
 800d84c:	005b      	lsls	r3, r3, #1
 800d84e:	189b      	adds	r3, r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4a5d      	ldr	r2, [pc, #372]	; (800d9c8 <CAD_StateMachine+0x194>)
 800d854:	189b      	adds	r3, r3, r2
 800d856:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800d858:	2302      	movs	r3, #2
 800d85a:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2200      	movs	r2, #0
 800d860:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800d862:	187b      	adds	r3, r7, r1
 800d864:	781a      	ldrb	r2, [r3, #0]
 800d866:	4959      	ldr	r1, [pc, #356]	; (800d9cc <CAD_StateMachine+0x198>)
 800d868:	0013      	movs	r3, r2
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	1a9b      	subs	r3, r3, r2
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	18cb      	adds	r3, r1, r3
 800d872:	3310      	adds	r3, #16
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2210      	movs	r2, #16
 800d87a:	4013      	ands	r3, r2
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <CAD_StateMachine+0x52>
  {
    return _timing;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	e09c      	b.n	800d9c0 <CAD_StateMachine+0x18c>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	227f      	movs	r2, #127	; 0x7f
 800d88c:	4393      	bics	r3, r2
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00c      	beq.n	800d8ae <CAD_StateMachine+0x7a>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	781a      	ldrb	r2, [r3, #0]
 800d898:	217f      	movs	r1, #127	; 0x7f
 800d89a:	400a      	ands	r2, r1
 800d89c:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	785a      	ldrb	r2, [r3, #1]
 800d8a2:	213e      	movs	r1, #62	; 0x3e
 800d8a4:	438a      	bics	r2, r1
 800d8a6:	1c11      	adds	r1, r2, #0
 800d8a8:	2218      	movs	r2, #24
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	785b      	ldrb	r3, [r3, #1]
 800d8b2:	069b      	lsls	r3, r3, #26
 800d8b4:	0edb      	lsrs	r3, r3, #27
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b0d      	cmp	r3, #13
 800d8ba:	d05c      	beq.n	800d976 <CAD_StateMachine+0x142>
 800d8bc:	dc72      	bgt.n	800d9a4 <CAD_StateMachine+0x170>
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <CAD_StateMachine+0x94>
 800d8c2:	2b0c      	cmp	r3, #12
 800d8c4:	d02b      	beq.n	800d91e <CAD_StateMachine+0xea>
 800d8c6:	e06d      	b.n	800d9a4 <CAD_StateMachine+0x170>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800d8c8:	240f      	movs	r4, #15
 800d8ca:	193b      	adds	r3, r7, r4
 800d8cc:	781a      	ldrb	r2, [r3, #0]
 800d8ce:	493f      	ldr	r1, [pc, #252]	; (800d9cc <CAD_StateMachine+0x198>)
 800d8d0:	0013      	movs	r3, r2
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	1a9b      	subs	r3, r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	585b      	ldr	r3, [r3, r1]
 800d8da:	0018      	movs	r0, r3
 800d8dc:	f7ff fde4 	bl	800d4a8 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800d8e0:	193b      	adds	r3, r7, r4
 800d8e2:	781a      	ldrb	r2, [r3, #0]
 800d8e4:	4939      	ldr	r1, [pc, #228]	; (800d9cc <CAD_StateMachine+0x198>)
 800d8e6:	0013      	movs	r3, r2
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	1a9b      	subs	r3, r3, r2
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	585b      	ldr	r3, [r3, r1]
 800d8f0:	0018      	movs	r0, r3
 800d8f2:	f7ff fde8 	bl	800d4c6 <LL_UCPD_EnableIT_TypeCEventCC1>
#endif /* !_LOW_POWER */
      if (0 == PortNum)
 800d8f6:	193b      	adds	r3, r7, r4
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <CAD_StateMachine+0xd8>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800d8fe:	2102      	movs	r1, #2
 800d900:	2008      	movs	r0, #8
 800d902:	f7ff fd2b 	bl	800d35c <__NVIC_SetPriority>
 800d906:	2008      	movs	r0, #8
 800d908:	f7ff fd0e 	bl	800d328 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	785a      	ldrb	r2, [r3, #1]
 800d910:	213e      	movs	r1, #62	; 0x3e
 800d912:	438a      	bics	r2, r1
 800d914:	1c11      	adds	r1, r2, #0
 800d916:	2202      	movs	r2, #2
 800d918:	430a      	orrs	r2, r1
 800d91a:	705a      	strb	r2, [r3, #1]
      break;
 800d91c:	e04f      	b.n	800d9be <CAD_StateMachine+0x18a>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800d91e:	240f      	movs	r4, #15
 800d920:	193b      	adds	r3, r7, r4
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	0018      	movs	r0, r3
 800d926:	f001 fc27 	bl	800f178 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800d92a:	193b      	adds	r3, r7, r4
 800d92c:	781a      	ldrb	r2, [r3, #0]
 800d92e:	4927      	ldr	r1, [pc, #156]	; (800d9cc <CAD_StateMachine+0x198>)
 800d930:	0013      	movs	r3, r2
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	18cb      	adds	r3, r1, r3
 800d93a:	3334      	adds	r3, #52	; 0x34
 800d93c:	2200      	movs	r2, #0
 800d93e:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	781a      	ldrb	r2, [r3, #0]
 800d94a:	2103      	movs	r1, #3
 800d94c:	438a      	bics	r2, r1
 800d94e:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	2201      	movs	r2, #1
 800d954:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800d956:	f7f9 fdaf 	bl	80074b8 <HAL_GetTick>
 800d95a:	0002      	movs	r2, r0
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800d960:	231a      	movs	r3, #26
 800d962:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	785a      	ldrb	r2, [r3, #1]
 800d968:	213e      	movs	r1, #62	; 0x3e
 800d96a:	438a      	bics	r2, r1
 800d96c:	1c11      	adds	r1, r2, #0
 800d96e:	221a      	movs	r2, #26
 800d970:	430a      	orrs	r2, r1
 800d972:	705a      	strb	r2, [r3, #1]
      break;
 800d974:	e023      	b.n	800d9be <CAD_StateMachine+0x18a>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800d976:	f7f9 fd9f 	bl	80074b8 <HAL_GetTick>
 800d97a:	0002      	movs	r2, r0
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	2b1a      	cmp	r3, #26
 800d984:	d91a      	bls.n	800d9bc <CAD_StateMachine+0x188>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 800d986:	230f      	movs	r3, #15
 800d988:	18fb      	adds	r3, r7, r3
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	0018      	movs	r0, r3
 800d98e:	f001 fb43 	bl	800f018 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	785a      	ldrb	r2, [r3, #1]
 800d996:	213e      	movs	r1, #62	; 0x3e
 800d998:	438a      	bics	r2, r1
 800d99a:	1c11      	adds	r1, r2, #0
 800d99c:	2202      	movs	r2, #2
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	705a      	strb	r2, [r3, #1]
      }
      break;
 800d9a2:	e00b      	b.n	800d9bc <CAD_StateMachine+0x188>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	687c      	ldr	r4, [r7, #4]
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	220f      	movs	r2, #15
 800d9ae:	18ba      	adds	r2, r7, r2
 800d9b0:	7810      	ldrb	r0, [r2, #0]
 800d9b2:	0022      	movs	r2, r4
 800d9b4:	4798      	blx	r3
 800d9b6:	0003      	movs	r3, r0
 800d9b8:	617b      	str	r3, [r7, #20]
      break;
 800d9ba:	e000      	b.n	800d9be <CAD_StateMachine+0x18a>
      break;
 800d9bc:	46c0      	nop			; (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800d9be:	697b      	ldr	r3, [r7, #20]
}
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	b007      	add	sp, #28
 800d9c6:	bd90      	pop	{r4, r7, pc}
 800d9c8:	20010608 	.word	0x20010608
 800d9cc:	20010620 	.word	0x20010620

0800d9d0 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	0002      	movs	r2, r0
 800d9d8:	1dfb      	adds	r3, r7, #7
 800d9da:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d9dc:	1dfb      	adds	r3, r7, #7
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	0013      	movs	r3, r2
 800d9e2:	005b      	lsls	r3, r3, #1
 800d9e4:	189b      	adds	r3, r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4a45      	ldr	r2, [pc, #276]	; (800db00 <CAD_Check_HW_SNK+0x130>)
 800d9ea:	189b      	adds	r3, r3, r2
 800d9ec:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800d9ee:	1dfb      	adds	r3, r7, #7
 800d9f0:	781a      	ldrb	r2, [r3, #0]
 800d9f2:	4944      	ldr	r1, [pc, #272]	; (800db04 <CAD_Check_HW_SNK+0x134>)
 800d9f4:	0013      	movs	r3, r2
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	1a9b      	subs	r3, r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	585b      	ldr	r3, [r3, r1]
 800d9fe:	695a      	ldr	r2, [r3, #20]
 800da00:	23c0      	movs	r3, #192	; 0xc0
 800da02:	029b      	lsls	r3, r3, #10
 800da04:	4013      	ands	r3, r2
 800da06:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800da08:	1dfb      	adds	r3, r7, #7
 800da0a:	781a      	ldrb	r2, [r3, #0]
 800da0c:	493d      	ldr	r1, [pc, #244]	; (800db04 <CAD_Check_HW_SNK+0x134>)
 800da0e:	0013      	movs	r3, r2
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	1a9b      	subs	r3, r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	585b      	ldr	r3, [r3, r1]
 800da18:	695a      	ldr	r2, [r3, #20]
 800da1a:	23c0      	movs	r3, #192	; 0xc0
 800da1c:	031b      	lsls	r3, r3, #12
 800da1e:	4013      	ands	r3, r2
 800da20:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	781a      	ldrb	r2, [r3, #0]
 800da26:	2103      	movs	r1, #3
 800da28:	438a      	bics	r2, r1
 800da2a:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	781a      	ldrb	r2, [r3, #0]
 800da30:	211c      	movs	r1, #28
 800da32:	438a      	bics	r2, r1
 800da34:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d02c      	beq.n	800da96 <CAD_Check_HW_SNK+0xc6>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d129      	bne.n	800da96 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	781a      	ldrb	r2, [r3, #0]
 800da46:	211c      	movs	r1, #28
 800da48:	438a      	bics	r2, r1
 800da4a:	1c11      	adds	r1, r2, #0
 800da4c:	2204      	movs	r2, #4
 800da4e:	430a      	orrs	r2, r1
 800da50:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	781a      	ldrb	r2, [r3, #0]
 800da56:	2103      	movs	r1, #3
 800da58:	438a      	bics	r2, r1
 800da5a:	1c11      	adds	r1, r2, #0
 800da5c:	2201      	movs	r2, #1
 800da5e:	430a      	orrs	r2, r1
 800da60:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	0c18      	lsrs	r0, r3, #16
 800da66:	1dfb      	adds	r3, r7, #7
 800da68:	781a      	ldrb	r2, [r3, #0]
 800da6a:	4926      	ldr	r1, [pc, #152]	; (800db04 <CAD_Check_HW_SNK+0x134>)
 800da6c:	0013      	movs	r3, r2
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	1a9b      	subs	r3, r3, r2
 800da72:	00db      	lsls	r3, r3, #3
 800da74:	18cb      	adds	r3, r1, r3
 800da76:	3310      	adds	r3, #16
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	1c01      	adds	r1, r0, #0
 800da7c:	2203      	movs	r2, #3
 800da7e:	400a      	ands	r2, r1
 800da80:	b2d2      	uxtb	r2, r2
 800da82:	2103      	movs	r1, #3
 800da84:	400a      	ands	r2, r1
 800da86:	0090      	lsls	r0, r2, #2
 800da88:	789a      	ldrb	r2, [r3, #2]
 800da8a:	210c      	movs	r1, #12
 800da8c:	438a      	bics	r2, r1
 800da8e:	1c11      	adds	r1, r2, #0
 800da90:	1c02      	adds	r2, r0, #0
 800da92:	430a      	orrs	r2, r1
 800da94:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d12c      	bne.n	800daf6 <CAD_Check_HW_SNK+0x126>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d029      	beq.n	800daf6 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	781a      	ldrb	r2, [r3, #0]
 800daa6:	211c      	movs	r1, #28
 800daa8:	438a      	bics	r2, r1
 800daaa:	1c11      	adds	r1, r2, #0
 800daac:	2204      	movs	r2, #4
 800daae:	430a      	orrs	r2, r1
 800dab0:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	781a      	ldrb	r2, [r3, #0]
 800dab6:	2103      	movs	r1, #3
 800dab8:	438a      	bics	r2, r1
 800daba:	1c11      	adds	r1, r2, #0
 800dabc:	2202      	movs	r2, #2
 800dabe:	430a      	orrs	r2, r1
 800dac0:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	0c98      	lsrs	r0, r3, #18
 800dac6:	1dfb      	adds	r3, r7, #7
 800dac8:	781a      	ldrb	r2, [r3, #0]
 800daca:	490e      	ldr	r1, [pc, #56]	; (800db04 <CAD_Check_HW_SNK+0x134>)
 800dacc:	0013      	movs	r3, r2
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	1a9b      	subs	r3, r3, r2
 800dad2:	00db      	lsls	r3, r3, #3
 800dad4:	18cb      	adds	r3, r1, r3
 800dad6:	3310      	adds	r3, #16
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	1c01      	adds	r1, r0, #0
 800dadc:	2203      	movs	r2, #3
 800dade:	400a      	ands	r2, r1
 800dae0:	b2d2      	uxtb	r2, r2
 800dae2:	2103      	movs	r1, #3
 800dae4:	400a      	ands	r2, r1
 800dae6:	0090      	lsls	r0, r2, #2
 800dae8:	789a      	ldrb	r2, [r3, #2]
 800daea:	210c      	movs	r1, #12
 800daec:	438a      	bics	r2, r1
 800daee:	1c11      	adds	r1, r2, #0
 800daf0:	1c02      	adds	r2, r0, #0
 800daf2:	430a      	orrs	r2, r1
 800daf4:	709a      	strb	r2, [r3, #2]
  }
}
 800daf6:	46c0      	nop			; (mov r8, r8)
 800daf8:	46bd      	mov	sp, r7
 800dafa:	b006      	add	sp, #24
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	46c0      	nop			; (mov r8, r8)
 800db00:	20010608 	.word	0x20010608
 800db04:	20010620 	.word	0x20010620

0800db08 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	0002      	movs	r2, r0
 800db10:	1dfb      	adds	r3, r7, #7
 800db12:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800db14:	1dfb      	adds	r3, r7, #7
 800db16:	781a      	ldrb	r2, [r3, #0]
 800db18:	0013      	movs	r3, r2
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	189b      	adds	r3, r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4a21      	ldr	r2, [pc, #132]	; (800dba8 <ManageStateDetached_SNK+0xa0>)
 800db22:	189b      	adds	r3, r3, r2
 800db24:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800db26:	2302      	movs	r3, #2
 800db28:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800db2a:	1dfb      	adds	r3, r7, #7
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	0018      	movs	r0, r3
 800db30:	f7ff ff4e 	bl	800d9d0 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	221c      	movs	r2, #28
 800db3a:	4013      	ands	r3, r2
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800db42:	2301      	movs	r3, #1
 800db44:	425b      	negs	r3, r3
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	e029      	b.n	800db9e <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800db4a:	f7f9 fcb5 	bl	80074b8 <HAL_GetTick>
 800db4e:	0002      	movs	r2, r0
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	785a      	ldrb	r2, [r3, #1]
 800db58:	213e      	movs	r1, #62	; 0x3e
 800db5a:	438a      	bics	r2, r1
 800db5c:	1c11      	adds	r1, r2, #0
 800db5e:	2204      	movs	r2, #4
 800db60:	430a      	orrs	r2, r1
 800db62:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800db64:	2001      	movs	r0, #1
 800db66:	f7f9 fcb1 	bl	80074cc <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800db6a:	1dfb      	adds	r3, r7, #7
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	0018      	movs	r0, r3
 800db70:	f7ff ff2e 	bl	800d9d0 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	221c      	movs	r2, #28
 800db7a:	4013      	ands	r3, r2
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d108      	bne.n	800db94 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	785a      	ldrb	r2, [r3, #1]
 800db86:	213e      	movs	r1, #62	; 0x3e
 800db88:	438a      	bics	r2, r1
 800db8a:	1c11      	adds	r1, r2, #0
 800db8c:	2202      	movs	r2, #2
 800db8e:	430a      	orrs	r2, r1
 800db90:	705a      	strb	r2, [r3, #1]
 800db92:	e004      	b.n	800db9e <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800db94:	1dfb      	adds	r3, r7, #7
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	0018      	movs	r0, r3
 800db9a:	f00b fa11 	bl	8018fc0 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800db9e:	68fb      	ldr	r3, [r7, #12]
}
 800dba0:	0018      	movs	r0, r3
 800dba2:	46bd      	mov	sp, r7
 800dba4:	b004      	add	sp, #16
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	20010608 	.word	0x20010608

0800dbac <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dbac:	b590      	push	{r4, r7, lr}
 800dbae:	b089      	sub	sp, #36	; 0x24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60b9      	str	r1, [r7, #8]
 800dbb4:	607a      	str	r2, [r7, #4]
 800dbb6:	240f      	movs	r4, #15
 800dbb8:	193b      	adds	r3, r7, r4
 800dbba:	1c02      	adds	r2, r0, #0
 800dbbc:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dbbe:	193b      	adds	r3, r7, r4
 800dbc0:	781a      	ldrb	r2, [r3, #0]
 800dbc2:	0013      	movs	r3, r2
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	189b      	adds	r3, r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4a3e      	ldr	r2, [pc, #248]	; (800dcc4 <ManageStateAttachedWait_SNK+0x118>)
 800dbcc:	189b      	adds	r3, r3, r2
 800dbce:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800dbd4:	f7f9 fc70 	bl	80074b8 <HAL_GetTick>
 800dbd8:	0002      	movs	r2, r0
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800dbe2:	193b      	adds	r3, r7, r4
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	f7ff fef2 	bl	800d9d0 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	221c      	movs	r2, #28
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b04      	cmp	r3, #4
 800dbf8:	d130      	bne.n	800dc5c <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b78      	cmp	r3, #120	; 0x78
 800dbfe:	d927      	bls.n	800dc50 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800dc00:	193b      	adds	r3, r7, r4
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2101      	movs	r1, #1
 800dc06:	0018      	movs	r0, r3
 800dc08:	f00b f872 	bl	8018cf0 <USBPD_PWR_IF_GetVBUSStatus>
 800dc0c:	0003      	movs	r3, r0
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d11e      	bne.n	800dc50 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	079b      	lsls	r3, r3, #30
 800dc18:	0f9b      	lsrs	r3, r3, #30
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	001a      	movs	r2, r3
 800dc1e:	193b      	adds	r3, r7, r4
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	0011      	movs	r1, r2
 800dc24:	0018      	movs	r0, r3
 800dc26:	f001 fb49 	bl	800f2bc <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	785a      	ldrb	r2, [r3, #1]
 800dc2e:	213e      	movs	r1, #62	; 0x3e
 800dc30:	438a      	bics	r2, r1
 800dc32:	1c11      	adds	r1, r2, #0
 800dc34:	2206      	movs	r2, #6
 800dc36:	430a      	orrs	r2, r1
 800dc38:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	079b      	lsls	r3, r3, #30
 800dc46:	0f9b      	lsrs	r3, r3, #30
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	001a      	movs	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	781a      	ldrb	r2, [r3, #0]
 800dc54:	2120      	movs	r1, #32
 800dc56:	438a      	bics	r2, r1
 800dc58:	701a      	strb	r2, [r3, #0]
 800dc5a:	e02e      	b.n	800dcba <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2220      	movs	r2, #32
 800dc62:	4013      	ands	r3, r2
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10c      	bne.n	800dc84 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800dc6a:	f7f9 fc25 	bl	80074b8 <HAL_GetTick>
 800dc6e:	0002      	movs	r2, r0
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	781a      	ldrb	r2, [r3, #0]
 800dc78:	2120      	movs	r1, #32
 800dc7a:	430a      	orrs	r2, r1
 800dc7c:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800dc7e:	230c      	movs	r3, #12
 800dc80:	61fb      	str	r3, [r7, #28]
 800dc82:	e01a      	b.n	800dcba <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800dc84:	f7f9 fc18 	bl	80074b8 <HAL_GetTick>
 800dc88:	0002      	movs	r2, r0
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	2b0c      	cmp	r3, #12
 800dc92:	d912      	bls.n	800dcba <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	781a      	ldrb	r2, [r3, #0]
 800dc98:	2120      	movs	r1, #32
 800dc9a:	438a      	bics	r2, r1
 800dc9c:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	785a      	ldrb	r2, [r3, #1]
 800dca2:	213e      	movs	r1, #62	; 0x3e
 800dca4:	438a      	bics	r2, r1
 800dca6:	1c11      	adds	r1, r2, #0
 800dca8:	2202      	movs	r2, #2
 800dcaa:	430a      	orrs	r2, r1
 800dcac:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800dcae:	230f      	movs	r3, #15
 800dcb0:	18fb      	adds	r3, r7, r3
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	0018      	movs	r0, r3
 800dcb6:	f00b f994 	bl	8018fe2 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800dcba:	69fb      	ldr	r3, [r7, #28]
}
 800dcbc:	0018      	movs	r0, r3
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	b009      	add	sp, #36	; 0x24
 800dcc2:	bd90      	pop	{r4, r7, pc}
 800dcc4:	20010608 	.word	0x20010608

0800dcc8 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dcc8:	b590      	push	{r4, r7, lr}
 800dcca:	b089      	sub	sp, #36	; 0x24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60b9      	str	r1, [r7, #8]
 800dcd0:	607a      	str	r2, [r7, #4]
 800dcd2:	210f      	movs	r1, #15
 800dcd4:	187b      	adds	r3, r7, r1
 800dcd6:	1c02      	adds	r2, r0, #0
 800dcd8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dcda:	0008      	movs	r0, r1
 800dcdc:	183b      	adds	r3, r7, r0
 800dcde:	781a      	ldrb	r2, [r3, #0]
 800dce0:	0013      	movs	r3, r2
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	189b      	adds	r3, r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4a2e      	ldr	r2, [pc, #184]	; (800dda4 <ManageStateAttached_SNK+0xdc>)
 800dcea:	189b      	adds	r3, r3, r2
 800dcec:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800dcee:	2302      	movs	r3, #2
 800dcf0:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800dcf6:	183b      	adds	r3, r7, r0
 800dcf8:	781a      	ldrb	r2, [r3, #0]
 800dcfa:	492b      	ldr	r1, [pc, #172]	; (800dda8 <ManageStateAttached_SNK+0xe0>)
 800dcfc:	0013      	movs	r3, r2
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	1a9b      	subs	r3, r3, r2
 800dd02:	00db      	lsls	r3, r3, #3
 800dd04:	18cb      	adds	r3, r1, r3
 800dd06:	3334      	adds	r3, #52	; 0x34
 800dd08:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d10c      	bne.n	800dd28 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800dd0e:	183b      	adds	r3, r7, r0
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	4925      	ldr	r1, [pc, #148]	; (800dda8 <ManageStateAttached_SNK+0xe0>)
 800dd14:	0013      	movs	r3, r2
 800dd16:	00db      	lsls	r3, r3, #3
 800dd18:	1a9b      	subs	r3, r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	585b      	ldr	r3, [r3, r1]
 800dd1e:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800dd20:	23c0      	movs	r3, #192	; 0xc0
 800dd22:	029b      	lsls	r3, r3, #10
 800dd24:	4013      	ands	r3, r2
 800dd26:	e00c      	b.n	800dd42 <ManageStateAttached_SNK+0x7a>
 800dd28:	230f      	movs	r3, #15
 800dd2a:	18fb      	adds	r3, r7, r3
 800dd2c:	781a      	ldrb	r2, [r3, #0]
 800dd2e:	491e      	ldr	r1, [pc, #120]	; (800dda8 <ManageStateAttached_SNK+0xe0>)
 800dd30:	0013      	movs	r3, r2
 800dd32:	00db      	lsls	r3, r3, #3
 800dd34:	1a9b      	subs	r3, r3, r2
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	585b      	ldr	r3, [r3, r1]
 800dd3a:	695a      	ldr	r2, [r3, #20]
 800dd3c:	23c0      	movs	r3, #192	; 0xc0
 800dd3e:	031b      	lsls	r3, r3, #12
 800dd40:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800dd42:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800dd44:	240f      	movs	r4, #15
 800dd46:	193b      	adds	r3, r7, r4
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2102      	movs	r1, #2
 800dd4c:	0018      	movs	r0, r3
 800dd4e:	f00a ffcf 	bl	8018cf0 <USBPD_PWR_IF_GetVBUSStatus>
 800dd52:	0003      	movs	r3, r0
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d11e      	bne.n	800dd96 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d11a      	bne.n	800dd96 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 800dd60:	193b      	adds	r3, r7, r4
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	0018      	movs	r0, r3
 800dd66:	f001 fc0b 	bl	800f580 <HW_SignalDetachment>
    /* restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	781a      	ldrb	r2, [r3, #0]
 800dd6e:	211c      	movs	r1, #28
 800dd70:	438a      	bics	r2, r1
 800dd72:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	785a      	ldrb	r2, [r3, #1]
 800dd78:	213e      	movs	r1, #62	; 0x3e
 800dd7a:	438a      	bics	r2, r1
 800dd7c:	1c11      	adds	r1, r2, #0
 800dd7e:	2202      	movs	r2, #2
 800dd80:	430a      	orrs	r2, r1
 800dd82:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2201      	movs	r2, #1
 800dd88:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	61fb      	str	r3, [r7, #28]
 800dd94:	e001      	b.n	800dd9a <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800dd96:	230a      	movs	r3, #10
 800dd98:	61fb      	str	r3, [r7, #28]
  }

  return _timing;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
}
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	b009      	add	sp, #36	; 0x24
 800dda2:	bd90      	pop	{r4, r7, pc}
 800dda4:	20010608 	.word	0x20010608
 800dda8:	20010620 	.word	0x20010620

0800ddac <LL_AHB1_GRP1_EnableClock>:
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800ddb4:	4b07      	ldr	r3, [pc, #28]	; (800ddd4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ddb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ddb8:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800ddc0:	4b04      	ldr	r3, [pc, #16]	; (800ddd4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ddca:	68fb      	ldr	r3, [r7, #12]
}
 800ddcc:	46c0      	nop			; (mov r8, r8)
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	b004      	add	sp, #16
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	40021000 	.word	0x40021000

0800ddd8 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	0002      	movs	r2, r0
 800dde0:	1dfb      	adds	r3, r7, #7
 800dde2:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 800dde4:	4b02      	ldr	r3, [pc, #8]	; (800ddf0 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 800dde6:	0018      	movs	r0, r3
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b002      	add	sp, #8
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	46c0      	nop			; (mov r8, r8)
 800ddf0:	4000a400 	.word	0x4000a400

0800ddf4 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800ddf4:	b590      	push	{r4, r7, lr}
 800ddf6:	b08f      	sub	sp, #60	; 0x3c
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	0002      	movs	r2, r0
 800ddfc:	1dfb      	adds	r3, r7, #7
 800ddfe:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800de00:	240c      	movs	r4, #12
 800de02:	193b      	adds	r3, r7, r4
 800de04:	0018      	movs	r0, r3
 800de06:	f7fd f85b 	bl	800aec0 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800de0a:	193b      	adds	r3, r7, r4
 800de0c:	2200      	movs	r2, #0
 800de0e:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800de10:	193b      	adds	r3, r7, r4
 800de12:	2200      	movs	r2, #0
 800de14:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800de16:	193b      	adds	r3, r7, r4
 800de18:	2200      	movs	r2, #0
 800de1a:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800de1c:	193b      	adds	r3, r7, r4
 800de1e:	2280      	movs	r2, #128	; 0x80
 800de20:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800de22:	193b      	adds	r3, r7, r4
 800de24:	2200      	movs	r2, #0
 800de26:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800de28:	193b      	adds	r3, r7, r4
 800de2a:	2200      	movs	r2, #0
 800de2c:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800de2e:	193b      	adds	r3, r7, r4
 800de30:	2200      	movs	r2, #0
 800de32:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800de34:	193b      	adds	r3, r7, r4
 800de36:	2200      	movs	r2, #0
 800de38:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800de3a:	193b      	adds	r3, r7, r4
 800de3c:	2200      	movs	r2, #0
 800de3e:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800de40:	193b      	adds	r3, r7, r4
 800de42:	2280      	movs	r2, #128	; 0x80
 800de44:	0192      	lsls	r2, r2, #6
 800de46:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 800de48:	1dfb      	adds	r3, r7, #7
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10c      	bne.n	800de6a <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800de50:	2001      	movs	r0, #1
 800de52:	f7ff ffab 	bl	800ddac <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800de56:	193b      	adds	r3, r7, r4
 800de58:	223c      	movs	r2, #60	; 0x3c
 800de5a:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800de5c:	193b      	adds	r3, r7, r4
 800de5e:	4806      	ldr	r0, [pc, #24]	; (800de78 <USBPD_HW_Init_DMARxInstance+0x84>)
 800de60:	001a      	movs	r2, r3
 800de62:	2100      	movs	r1, #0
 800de64:	f7fc ffec 	bl	800ae40 <LL_DMA_Init>
      break;
 800de68:	e000      	b.n	800de6c <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800de6a:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800de6c:	4b03      	ldr	r3, [pc, #12]	; (800de7c <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800de6e:	0018      	movs	r0, r3
 800de70:	46bd      	mov	sp, r7
 800de72:	b00f      	add	sp, #60	; 0x3c
 800de74:	bd90      	pop	{r4, r7, pc}
 800de76:	46c0      	nop			; (mov r8, r8)
 800de78:	40020000 	.word	0x40020000
 800de7c:	40020008 	.word	0x40020008

0800de80 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	0002      	movs	r2, r0
 800de88:	1dfb      	adds	r3, r7, #7
 800de8a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800de8c:	46c0      	nop			; (mov r8, r8)
 800de8e:	46bd      	mov	sp, r7
 800de90:	b002      	add	sp, #8
 800de92:	bd80      	pop	{r7, pc}

0800de94 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800de94:	b590      	push	{r4, r7, lr}
 800de96:	b08f      	sub	sp, #60	; 0x3c
 800de98:	af00      	add	r7, sp, #0
 800de9a:	0002      	movs	r2, r0
 800de9c:	1dfb      	adds	r3, r7, #7
 800de9e:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800dea0:	240c      	movs	r4, #12
 800dea2:	193b      	adds	r3, r7, r4
 800dea4:	0018      	movs	r0, r3
 800dea6:	f7fd f80b 	bl	800aec0 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800deaa:	193b      	adds	r3, r7, r4
 800deac:	2210      	movs	r2, #16
 800deae:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800deb0:	193b      	adds	r3, r7, r4
 800deb2:	2200      	movs	r2, #0
 800deb4:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800deb6:	193b      	adds	r3, r7, r4
 800deb8:	2200      	movs	r2, #0
 800deba:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800debc:	193b      	adds	r3, r7, r4
 800debe:	2280      	movs	r2, #128	; 0x80
 800dec0:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800dec2:	193b      	adds	r3, r7, r4
 800dec4:	2200      	movs	r2, #0
 800dec6:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800dec8:	193b      	adds	r3, r7, r4
 800deca:	2200      	movs	r2, #0
 800decc:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800dece:	193b      	adds	r3, r7, r4
 800ded0:	2200      	movs	r2, #0
 800ded2:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800ded4:	193b      	adds	r3, r7, r4
 800ded6:	2200      	movs	r2, #0
 800ded8:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800deda:	193b      	adds	r3, r7, r4
 800dedc:	2200      	movs	r2, #0
 800dede:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800dee0:	1dfb      	adds	r3, r7, #7
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d110      	bne.n	800df0a <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800dee8:	2001      	movs	r0, #1
 800deea:	f7ff ff5f 	bl	800ddac <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800deee:	193b      	adds	r3, r7, r4
 800def0:	223d      	movs	r2, #61	; 0x3d
 800def2:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800def4:	193b      	adds	r3, r7, r4
 800def6:	2280      	movs	r2, #128	; 0x80
 800def8:	0152      	lsls	r2, r2, #5
 800defa:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800defc:	193b      	adds	r3, r7, r4
 800defe:	4806      	ldr	r0, [pc, #24]	; (800df18 <USBPD_HW_Init_DMATxInstance+0x84>)
 800df00:	001a      	movs	r2, r3
 800df02:	2101      	movs	r1, #1
 800df04:	f7fc ff9c 	bl	800ae40 <LL_DMA_Init>
      break;
 800df08:	e000      	b.n	800df0c <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800df0a:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800df0c:	4b03      	ldr	r3, [pc, #12]	; (800df1c <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800df0e:	0018      	movs	r0, r3
 800df10:	46bd      	mov	sp, r7
 800df12:	b00f      	add	sp, #60	; 0x3c
 800df14:	bd90      	pop	{r4, r7, pc}
 800df16:	46c0      	nop			; (mov r8, r8)
 800df18:	40020000 	.word	0x40020000
 800df1c:	4002001c 	.word	0x4002001c

0800df20 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	0002      	movs	r2, r0
 800df28:	1dfb      	adds	r3, r7, #7
 800df2a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800df2c:	46c0      	nop			; (mov r8, r8)
 800df2e:	46bd      	mov	sp, r7
 800df30:	b002      	add	sp, #8
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	0002      	movs	r2, r0
 800df3c:	1dfb      	adds	r3, r7, #7
 800df3e:	701a      	strb	r2, [r3, #0]
 800df40:	1dbb      	adds	r3, r7, #6
 800df42:	1c0a      	adds	r2, r1, #0
 800df44:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800df46:	46c0      	nop			; (mov r8, r8)
  }
}
 800df48:	46c0      	nop			; (mov r8, r8)
 800df4a:	46bd      	mov	sp, r7
 800df4c:	b002      	add	sp, #8
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	2280      	movs	r2, #128	; 0x80
 800df5e:	0212      	lsls	r2, r2, #8
 800df60:	431a      	orrs	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	619a      	str	r2, [r3, #24]
}
 800df66:	46c0      	nop			; (mov r8, r8)
 800df68:	46bd      	mov	sp, r7
 800df6a:	b002      	add	sp, #8
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b082      	sub	sp, #8
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	2280      	movs	r2, #128	; 0x80
 800df7c:	01d2      	lsls	r2, r2, #7
 800df7e:	431a      	orrs	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	619a      	str	r2, [r3, #24]
}
 800df84:	46c0      	nop			; (mov r8, r8)
 800df86:	46bd      	mov	sp, r7
 800df88:	b002      	add	sp, #8
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	699b      	ldr	r3, [r3, #24]
 800df98:	2280      	movs	r2, #128	; 0x80
 800df9a:	0152      	lsls	r2, r2, #5
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	619a      	str	r2, [r3, #24]
}
 800dfa2:	46c0      	nop			; (mov r8, r8)
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	b002      	add	sp, #8
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b082      	sub	sp, #8
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	699b      	ldr	r3, [r3, #24]
 800dfb6:	2280      	movs	r2, #128	; 0x80
 800dfb8:	0112      	lsls	r2, r2, #4
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	619a      	str	r2, [r3, #24]
}
 800dfc0:	46c0      	nop			; (mov r8, r8)
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	b002      	add	sp, #8
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	2280      	movs	r2, #128	; 0x80
 800dfd6:	00d2      	lsls	r2, r2, #3
 800dfd8:	431a      	orrs	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	619a      	str	r2, [r3, #24]
}
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	b002      	add	sp, #8
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b082      	sub	sp, #8
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	2280      	movs	r2, #128	; 0x80
 800dff4:	0092      	lsls	r2, r2, #2
 800dff6:	431a      	orrs	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	619a      	str	r2, [r3, #24]
}
 800dffc:	46c0      	nop			; (mov r8, r8)
 800dffe:	46bd      	mov	sp, r7
 800e000:	b002      	add	sp, #8
 800e002:	bd80      	pop	{r7, pc}

0800e004 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	2240      	movs	r2, #64	; 0x40
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	619a      	str	r2, [r3, #24]
}
 800e018:	46c0      	nop			; (mov r8, r8)
 800e01a:	46bd      	mov	sp, r7
 800e01c:	b002      	add	sp, #8
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	699b      	ldr	r3, [r3, #24]
 800e02c:	2220      	movs	r2, #32
 800e02e:	431a      	orrs	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	619a      	str	r2, [r3, #24]
}
 800e034:	46c0      	nop			; (mov r8, r8)
 800e036:	46bd      	mov	sp, r7
 800e038:	b002      	add	sp, #8
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	2210      	movs	r2, #16
 800e04a:	431a      	orrs	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	619a      	str	r2, [r3, #24]
}
 800e050:	46c0      	nop			; (mov r8, r8)
 800e052:	46bd      	mov	sp, r7
 800e054:	b002      	add	sp, #8
 800e056:	bd80      	pop	{r7, pc}

0800e058 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	2208      	movs	r2, #8
 800e066:	431a      	orrs	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	619a      	str	r2, [r3, #24]
}
 800e06c:	46c0      	nop			; (mov r8, r8)
 800e06e:	46bd      	mov	sp, r7
 800e070:	b002      	add	sp, #8
 800e072:	bd80      	pop	{r7, pc}

0800e074 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	2204      	movs	r2, #4
 800e082:	431a      	orrs	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	619a      	str	r2, [r3, #24]
}
 800e088:	46c0      	nop			; (mov r8, r8)
 800e08a:	46bd      	mov	sp, r7
 800e08c:	b002      	add	sp, #8
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	2202      	movs	r2, #2
 800e09e:	431a      	orrs	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	619a      	str	r2, [r3, #24]
}
 800e0a4:	46c0      	nop			; (mov r8, r8)
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	b002      	add	sp, #8
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	f000 f803 	bl	800e0bc <PORTx_IRQHandler>
}
 800e0b6:	46c0      	nop			; (mov r8, r8)
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	0002      	movs	r2, r0
 800e0c4:	1dfb      	adds	r3, r7, #7
 800e0c6:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800e0c8:	1dfb      	adds	r3, r7, #7
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	49d1      	ldr	r1, [pc, #836]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e0ce:	0013      	movs	r3, r2
 800e0d0:	00db      	lsls	r3, r3, #3
 800e0d2:	1a9b      	subs	r3, r3, r2
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	585b      	ldr	r3, [r3, r1]
 800e0d8:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	d100      	bne.n	800e0ec <PORTx_IRQHandler+0x30>
 800e0ea:	e1b5      	b.n	800e458 <PORTx_IRQHandler+0x39c>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	d02c      	beq.n	800e14e <PORTx_IRQHandler+0x92>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	0018      	movs	r0, r3
 800e0f8:	f7ff ffca 	bl	800e090 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e0fc:	1dfb      	adds	r3, r7, #7
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	49c4      	ldr	r1, [pc, #784]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e102:	0013      	movs	r3, r2
 800e104:	00db      	lsls	r3, r3, #3
 800e106:	1a9b      	subs	r3, r3, r2
 800e108:	00db      	lsls	r3, r3, #3
 800e10a:	18cb      	adds	r3, r1, r3
 800e10c:	3304      	adds	r3, #4
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6819      	ldr	r1, [r3, #0]
 800e112:	1dfb      	adds	r3, r7, #7
 800e114:	781a      	ldrb	r2, [r3, #0]
 800e116:	48bf      	ldr	r0, [pc, #764]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e118:	0013      	movs	r3, r2
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	1a9b      	subs	r3, r3, r2
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	18c3      	adds	r3, r0, r3
 800e122:	3304      	adds	r3, #4
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2201      	movs	r2, #1
 800e128:	4391      	bics	r1, r2
 800e12a:	000a      	movs	r2, r1
 800e12c:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800e12e:	1dfb      	adds	r3, r7, #7
 800e130:	781a      	ldrb	r2, [r3, #0]
 800e132:	49b8      	ldr	r1, [pc, #736]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e134:	0013      	movs	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	1a9b      	subs	r3, r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	18cb      	adds	r3, r1, r3
 800e13e:	3314      	adds	r3, #20
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	1dfa      	adds	r2, r7, #7
 800e144:	7812      	ldrb	r2, [r2, #0]
 800e146:	2101      	movs	r1, #1
 800e148:	0010      	movs	r0, r2
 800e14a:	4798      	blx	r3
      return;
 800e14c:	e184      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2204      	movs	r2, #4
 800e152:	4013      	ands	r3, r2
 800e154:	d02c      	beq.n	800e1b0 <PORTx_IRQHandler+0xf4>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	0018      	movs	r0, r3
 800e15a:	f7ff ff8b 	bl	800e074 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e15e:	1dfb      	adds	r3, r7, #7
 800e160:	781a      	ldrb	r2, [r3, #0]
 800e162:	49ac      	ldr	r1, [pc, #688]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e164:	0013      	movs	r3, r2
 800e166:	00db      	lsls	r3, r3, #3
 800e168:	1a9b      	subs	r3, r3, r2
 800e16a:	00db      	lsls	r3, r3, #3
 800e16c:	18cb      	adds	r3, r1, r3
 800e16e:	3304      	adds	r3, #4
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	1dfb      	adds	r3, r7, #7
 800e176:	781a      	ldrb	r2, [r3, #0]
 800e178:	48a6      	ldr	r0, [pc, #664]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e17a:	0013      	movs	r3, r2
 800e17c:	00db      	lsls	r3, r3, #3
 800e17e:	1a9b      	subs	r3, r3, r2
 800e180:	00db      	lsls	r3, r3, #3
 800e182:	18c3      	adds	r3, r0, r3
 800e184:	3304      	adds	r3, #4
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2201      	movs	r2, #1
 800e18a:	4391      	bics	r1, r2
 800e18c:	000a      	movs	r2, r1
 800e18e:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800e190:	1dfb      	adds	r3, r7, #7
 800e192:	781a      	ldrb	r2, [r3, #0]
 800e194:	499f      	ldr	r1, [pc, #636]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e196:	0013      	movs	r3, r2
 800e198:	00db      	lsls	r3, r3, #3
 800e19a:	1a9b      	subs	r3, r3, r2
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	18cb      	adds	r3, r1, r3
 800e1a0:	3314      	adds	r3, #20
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	1dfa      	adds	r2, r7, #7
 800e1a6:	7812      	ldrb	r2, [r2, #0]
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	0010      	movs	r0, r2
 800e1ac:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800e1ae:	e153      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2208      	movs	r2, #8
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	d02c      	beq.n	800e212 <PORTx_IRQHandler+0x156>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	0018      	movs	r0, r3
 800e1bc:	f7ff ff4c 	bl	800e058 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e1c0:	1dfb      	adds	r3, r7, #7
 800e1c2:	781a      	ldrb	r2, [r3, #0]
 800e1c4:	4993      	ldr	r1, [pc, #588]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e1c6:	0013      	movs	r3, r2
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	1a9b      	subs	r3, r3, r2
 800e1cc:	00db      	lsls	r3, r3, #3
 800e1ce:	18cb      	adds	r3, r1, r3
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6819      	ldr	r1, [r3, #0]
 800e1d6:	1dfb      	adds	r3, r7, #7
 800e1d8:	781a      	ldrb	r2, [r3, #0]
 800e1da:	488e      	ldr	r0, [pc, #568]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e1dc:	0013      	movs	r3, r2
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	1a9b      	subs	r3, r3, r2
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	18c3      	adds	r3, r0, r3
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	4391      	bics	r1, r2
 800e1ee:	000a      	movs	r2, r1
 800e1f0:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800e1f2:	1dfb      	adds	r3, r7, #7
 800e1f4:	781a      	ldrb	r2, [r3, #0]
 800e1f6:	4987      	ldr	r1, [pc, #540]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e1f8:	0013      	movs	r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	1a9b      	subs	r3, r3, r2
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	18cb      	adds	r3, r1, r3
 800e202:	3314      	adds	r3, #20
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	1dfa      	adds	r2, r7, #7
 800e208:	7812      	ldrb	r2, [r2, #0]
 800e20a:	2102      	movs	r1, #2
 800e20c:	0010      	movs	r0, r2
 800e20e:	4798      	blx	r3
      return;
 800e210:	e122      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* HRSTDISC : the sent of the hrad reset has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2210      	movs	r2, #16
 800e216:	4013      	ands	r3, r2
 800e218:	d004      	beq.n	800e224 <PORTx_IRQHandler+0x168>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	0018      	movs	r0, r3
 800e21e:	f7ff ff0d 	bl	800e03c <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800e222:	e119      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2220      	movs	r2, #32
 800e228:	4013      	ands	r3, r2
 800e22a:	d013      	beq.n	800e254 <PORTx_IRQHandler+0x198>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	0018      	movs	r0, r3
 800e230:	f7ff fef6 	bl	800e020 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e234:	1dfb      	adds	r3, r7, #7
 800e236:	781a      	ldrb	r2, [r3, #0]
 800e238:	4976      	ldr	r1, [pc, #472]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e23a:	0013      	movs	r3, r2
 800e23c:	00db      	lsls	r3, r3, #3
 800e23e:	1a9b      	subs	r3, r3, r2
 800e240:	00db      	lsls	r3, r3, #3
 800e242:	18cb      	adds	r3, r1, r3
 800e244:	3324      	adds	r3, #36	; 0x24
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	1dfa      	adds	r2, r7, #7
 800e24a:	7812      	ldrb	r2, [r2, #0]
 800e24c:	2105      	movs	r1, #5
 800e24e:	0010      	movs	r0, r2
 800e250:	4798      	blx	r3
      return;
 800e252:	e101      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2240      	movs	r2, #64	; 0x40
 800e258:	4013      	ands	r3, r2
 800e25a:	d004      	beq.n	800e266 <PORTx_IRQHandler+0x1aa>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	0018      	movs	r0, r3
 800e260:	f7ff fed0 	bl	800e004 <LL_UCPD_ClearFlag_TxUND>
      return;
 800e264:	e0f8      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	2380      	movs	r3, #128	; 0x80
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4013      	ands	r3, r2
 800e26e:	d017      	beq.n	800e2a0 <PORTx_IRQHandler+0x1e4>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e274:	2b05      	cmp	r3, #5
 800e276:	d10e      	bne.n	800e296 <PORTx_IRQHandler+0x1da>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800e278:	1dfb      	adds	r3, r7, #7
 800e27a:	781a      	ldrb	r2, [r3, #0]
 800e27c:	4965      	ldr	r1, [pc, #404]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e27e:	0013      	movs	r3, r2
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	1a9b      	subs	r3, r3, r2
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	18cb      	adds	r3, r1, r3
 800e288:	331c      	adds	r3, #28
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	1dfa      	adds	r2, r7, #7
 800e28e:	7812      	ldrb	r2, [r2, #0]
 800e290:	2106      	movs	r1, #6
 800e292:	0010      	movs	r0, r2
 800e294:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	0018      	movs	r0, r3
 800e29a:	f7ff fea4 	bl	800dfe6 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      return;
 800e29e:	e0db      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	2380      	movs	r3, #128	; 0x80
 800e2a4:	00db      	lsls	r3, r3, #3
 800e2a6:	4013      	ands	r3, r2
 800e2a8:	d013      	beq.n	800e2d2 <PORTx_IRQHandler+0x216>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e2aa:	1dfb      	adds	r3, r7, #7
 800e2ac:	781a      	ldrb	r2, [r3, #0]
 800e2ae:	4959      	ldr	r1, [pc, #356]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e2b0:	0013      	movs	r3, r2
 800e2b2:	00db      	lsls	r3, r3, #3
 800e2b4:	1a9b      	subs	r3, r3, r2
 800e2b6:	00db      	lsls	r3, r3, #3
 800e2b8:	18cb      	adds	r3, r1, r3
 800e2ba:	331c      	adds	r3, #28
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	1dfa      	adds	r2, r7, #7
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	2105      	movs	r1, #5
 800e2c4:	0010      	movs	r0, r2
 800e2c6:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f7ff fe7c 	bl	800dfc8 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800e2d0:	e0c2      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	2380      	movs	r3, #128	; 0x80
 800e2d6:	011b      	lsls	r3, r3, #4
 800e2d8:	4013      	ands	r3, r2
 800e2da:	d009      	beq.n	800e2f0 <PORTx_IRQHandler+0x234>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag[PortNum] = 1;
 800e2dc:	1dfb      	adds	r3, r7, #7
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	4a4d      	ldr	r2, [pc, #308]	; (800e418 <PORTx_IRQHandler+0x35c>)
 800e2e2:	2101      	movs	r1, #1
 800e2e4:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	0018      	movs	r0, r3
 800e2ea:	f7ff fe5e 	bl	800dfaa <LL_UCPD_ClearFlag_RxOvr>
      return;
 800e2ee:	e0b3      	b.n	800e458 <PORTx_IRQHandler+0x39c>
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	2380      	movs	r3, #128	; 0x80
 800e2f4:	015b      	lsls	r3, r3, #5
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	d100      	bne.n	800e2fc <PORTx_IRQHandler+0x240>
 800e2fa:	e08f      	b.n	800e41c <PORTx_IRQHandler+0x360>
    {
      /* for DMA mode add a control to check if the number of data received is corresponding with the number of
         data receive by USBPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	0018      	movs	r0, r3
 800e300:	f7ff fe44 	bl	800df8c <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e304:	1dfb      	adds	r3, r7, #7
 800e306:	781a      	ldrb	r2, [r3, #0]
 800e308:	4942      	ldr	r1, [pc, #264]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e30a:	0013      	movs	r3, r2
 800e30c:	00db      	lsls	r3, r3, #3
 800e30e:	1a9b      	subs	r3, r3, r2
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	18cb      	adds	r3, r1, r3
 800e314:	3308      	adds	r3, #8
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6819      	ldr	r1, [r3, #0]
 800e31a:	1dfb      	adds	r3, r7, #7
 800e31c:	781a      	ldrb	r2, [r3, #0]
 800e31e:	483d      	ldr	r0, [pc, #244]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e320:	0013      	movs	r3, r2
 800e322:	00db      	lsls	r3, r3, #3
 800e324:	1a9b      	subs	r3, r3, r2
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	18c3      	adds	r3, r0, r3
 800e32a:	3308      	adds	r3, #8
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2201      	movs	r2, #1
 800e330:	4391      	bics	r1, r2
 800e332:	000a      	movs	r2, r1
 800e334:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800e336:	46c0      	nop			; (mov r8, r8)
 800e338:	1dfb      	adds	r3, r7, #7
 800e33a:	781a      	ldrb	r2, [r3, #0]
 800e33c:	4935      	ldr	r1, [pc, #212]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e33e:	0013      	movs	r3, r2
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	1a9b      	subs	r3, r3, r2
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	18cb      	adds	r3, r1, r3
 800e348:	3308      	adds	r3, #8
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2201      	movs	r2, #1
 800e350:	4013      	ands	r3, r2
 800e352:	2b01      	cmp	r3, #1
 800e354:	d0f0      	beq.n	800e338 <PORTx_IRQHandler+0x27c>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800e356:	1dfb      	adds	r3, r7, #7
 800e358:	781a      	ldrb	r2, [r3, #0]
 800e35a:	492e      	ldr	r1, [pc, #184]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e35c:	0013      	movs	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	1a9b      	subs	r3, r3, r2
 800e362:	00db      	lsls	r3, r3, #3
 800e364:	18cb      	adds	r3, r1, r3
 800e366:	3330      	adds	r3, #48	; 0x30
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	1dfb      	adds	r3, r7, #7
 800e36c:	781a      	ldrb	r2, [r3, #0]
 800e36e:	4929      	ldr	r1, [pc, #164]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e370:	0013      	movs	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	1a9b      	subs	r3, r3, r2
 800e376:	00db      	lsls	r3, r3, #3
 800e378:	18cb      	adds	r3, r1, r3
 800e37a:	3308      	adds	r3, #8
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	0002      	movs	r2, r0
 800e380:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800e382:	1dfb      	adds	r3, r7, #7
 800e384:	781a      	ldrb	r2, [r3, #0]
 800e386:	4923      	ldr	r1, [pc, #140]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e388:	0013      	movs	r3, r2
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	18cb      	adds	r3, r1, r3
 800e392:	3308      	adds	r3, #8
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2284      	movs	r2, #132	; 0x84
 800e398:	0052      	lsls	r2, r2, #1
 800e39a:	605a      	str	r2, [r3, #4]

      /* enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e39c:	1dfb      	adds	r3, r7, #7
 800e39e:	781a      	ldrb	r2, [r3, #0]
 800e3a0:	491c      	ldr	r1, [pc, #112]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e3a2:	0013      	movs	r3, r2
 800e3a4:	00db      	lsls	r3, r3, #3
 800e3a6:	1a9b      	subs	r3, r3, r2
 800e3a8:	00db      	lsls	r3, r3, #3
 800e3aa:	18cb      	adds	r3, r1, r3
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6819      	ldr	r1, [r3, #0]
 800e3b2:	1dfb      	adds	r3, r7, #7
 800e3b4:	781a      	ldrb	r2, [r3, #0]
 800e3b6:	4817      	ldr	r0, [pc, #92]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e3b8:	0013      	movs	r3, r2
 800e3ba:	00db      	lsls	r3, r3, #3
 800e3bc:	1a9b      	subs	r3, r3, r2
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	18c3      	adds	r3, r0, r3
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	2380      	movs	r3, #128	; 0x80
 800e3d0:	019b      	lsls	r3, r3, #6
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	d117      	bne.n	800e406 <PORTx_IRQHandler+0x34a>
 800e3d6:	1dfb      	adds	r3, r7, #7
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	4a0f      	ldr	r2, [pc, #60]	; (800e418 <PORTx_IRQHandler+0x35c>)
 800e3dc:	5cd3      	ldrb	r3, [r2, r3]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d111      	bne.n	800e406 <PORTx_IRQHandler+0x34a>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800e3e2:	1dfb      	adds	r3, r7, #7
 800e3e4:	781a      	ldrb	r2, [r3, #0]
 800e3e6:	490b      	ldr	r1, [pc, #44]	; (800e414 <PORTx_IRQHandler+0x358>)
 800e3e8:	0013      	movs	r3, r2
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	1a9b      	subs	r3, r3, r2
 800e3ee:	00db      	lsls	r3, r3, #3
 800e3f0:	18cb      	adds	r3, r1, r3
 800e3f2:	3320      	adds	r3, #32
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fa:	2107      	movs	r1, #7
 800e3fc:	4019      	ands	r1, r3
 800e3fe:	1dfb      	adds	r3, r7, #7
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	0018      	movs	r0, r3
 800e404:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800e406:	1dfb      	adds	r3, r7, #7
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	4a03      	ldr	r2, [pc, #12]	; (800e418 <PORTx_IRQHandler+0x35c>)
 800e40c:	2100      	movs	r1, #0
 800e40e:	54d1      	strb	r1, [r2, r3]
      return;
 800e410:	e022      	b.n	800e458 <PORTx_IRQHandler+0x39c>
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	20010620 	.word	0x20010620
 800e418:	20010614 	.word	0x20010614
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	2380      	movs	r3, #128	; 0x80
 800e420:	01db      	lsls	r3, r3, #7
 800e422:	4013      	ands	r3, r2
 800e424:	d104      	bne.n	800e430 <PORTx_IRQHandler+0x374>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	2380      	movs	r3, #128	; 0x80
 800e42a:	021b      	lsls	r3, r3, #8
 800e42c:	4013      	ands	r3, r2
 800e42e:	d013      	beq.n	800e458 <PORTx_IRQHandler+0x39c>
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	0018      	movs	r0, r3
 800e434:	f7ff fd9b 	bl	800df6e <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	0018      	movs	r0, r3
 800e43c:	f7ff fd88 	bl	800df50 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800e440:	1dfb      	adds	r3, r7, #7
 800e442:	781a      	ldrb	r2, [r3, #0]
 800e444:	4906      	ldr	r1, [pc, #24]	; (800e460 <PORTx_IRQHandler+0x3a4>)
 800e446:	0013      	movs	r3, r2
 800e448:	00db      	lsls	r3, r3, #3
 800e44a:	1a9b      	subs	r3, r3, r2
 800e44c:	00db      	lsls	r3, r3, #3
 800e44e:	18cb      	adds	r3, r1, r3
 800e450:	332c      	adds	r3, #44	; 0x2c
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800e456:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 800e458:	46bd      	mov	sp, r7
 800e45a:	b004      	add	sp, #16
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	46c0      	nop			; (mov r8, r8)
 800e460:	20010620 	.word	0x20010620

0800e464 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800e464:	b590      	push	{r4, r7, lr}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60b9      	str	r1, [r7, #8]
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	603b      	str	r3, [r7, #0]
 800e470:	240f      	movs	r4, #15
 800e472:	193b      	adds	r3, r7, r4
 800e474:	1c02      	adds	r2, r0, #0
 800e476:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800e478:	193b      	adds	r3, r7, r4
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	6919      	ldr	r1, [r3, #16]
 800e480:	4830      	ldr	r0, [pc, #192]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e482:	0013      	movs	r3, r2
 800e484:	00db      	lsls	r3, r3, #3
 800e486:	1a9b      	subs	r3, r3, r2
 800e488:	00db      	lsls	r3, r3, #3
 800e48a:	18c3      	adds	r3, r0, r3
 800e48c:	3314      	adds	r3, #20
 800e48e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800e490:	193b      	adds	r3, r7, r4
 800e492:	781a      	ldrb	r2, [r3, #0]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	68d9      	ldr	r1, [r3, #12]
 800e498:	482a      	ldr	r0, [pc, #168]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e49a:	0013      	movs	r3, r2
 800e49c:	00db      	lsls	r3, r3, #3
 800e49e:	1a9b      	subs	r3, r3, r2
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	18c3      	adds	r3, r0, r3
 800e4a4:	3318      	adds	r3, #24
 800e4a6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800e4a8:	193b      	adds	r3, r7, r4
 800e4aa:	781a      	ldrb	r2, [r3, #0]
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	6859      	ldr	r1, [r3, #4]
 800e4b0:	4824      	ldr	r0, [pc, #144]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e4b2:	0013      	movs	r3, r2
 800e4b4:	00db      	lsls	r3, r3, #3
 800e4b6:	1a9b      	subs	r3, r3, r2
 800e4b8:	00db      	lsls	r3, r3, #3
 800e4ba:	18c3      	adds	r3, r0, r3
 800e4bc:	331c      	adds	r3, #28
 800e4be:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800e4c0:	193b      	adds	r3, r7, r4
 800e4c2:	781a      	ldrb	r2, [r3, #0]
 800e4c4:	491f      	ldr	r1, [pc, #124]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e4c6:	0013      	movs	r3, r2
 800e4c8:	00db      	lsls	r3, r3, #3
 800e4ca:	1a9b      	subs	r3, r3, r2
 800e4cc:	00db      	lsls	r3, r3, #3
 800e4ce:	18cb      	adds	r3, r1, r3
 800e4d0:	3320      	adds	r3, #32
 800e4d2:	4a1d      	ldr	r2, [pc, #116]	; (800e548 <USBPD_PHY_Init+0xe4>)
 800e4d4:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800e4d6:	193b      	adds	r3, r7, r4
 800e4d8:	781a      	ldrb	r2, [r3, #0]
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	6899      	ldr	r1, [r3, #8]
 800e4de:	4819      	ldr	r0, [pc, #100]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e4e0:	0013      	movs	r3, r2
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	1a9b      	subs	r3, r3, r2
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	18c3      	adds	r3, r0, r3
 800e4ea:	3324      	adds	r3, #36	; 0x24
 800e4ec:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800e4ee:	193b      	adds	r3, r7, r4
 800e4f0:	781a      	ldrb	r2, [r3, #0]
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	6959      	ldr	r1, [r3, #20]
 800e4f6:	4813      	ldr	r0, [pc, #76]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e4f8:	0013      	movs	r3, r2
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	1a9b      	subs	r3, r3, r2
 800e4fe:	00db      	lsls	r3, r3, #3
 800e500:	18c3      	adds	r3, r0, r3
 800e502:	3328      	adds	r3, #40	; 0x28
 800e504:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800e506:	193b      	adds	r3, r7, r4
 800e508:	781a      	ldrb	r2, [r3, #0]
 800e50a:	490e      	ldr	r1, [pc, #56]	; (800e544 <USBPD_PHY_Init+0xe0>)
 800e50c:	0013      	movs	r3, r2
 800e50e:	00db      	lsls	r3, r3, #3
 800e510:	1a9b      	subs	r3, r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	18cb      	adds	r3, r1, r3
 800e516:	3330      	adds	r3, #48	; 0x30
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800e51c:	193b      	adds	r3, r7, r4
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	4a0a      	ldr	r2, [pc, #40]	; (800e54c <USBPD_PHY_Init+0xe8>)
 800e522:	00db      	lsls	r3, r3, #3
 800e524:	18d3      	adds	r3, r2, r3
 800e526:	3304      	adds	r3, #4
 800e528:	6a3a      	ldr	r2, [r7, #32]
 800e52a:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800e52c:	193b      	adds	r3, r7, r4
 800e52e:	781a      	ldrb	r2, [r3, #0]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	6819      	ldr	r1, [r3, #0]
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <USBPD_PHY_Init+0xe8>)
 800e536:	00d2      	lsls	r2, r2, #3
 800e538:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	0018      	movs	r0, r3
 800e53e:	46bd      	mov	sp, r7
 800e540:	b005      	add	sp, #20
 800e542:	bd90      	pop	{r4, r7, pc}
 800e544:	20010620 	.word	0x20010620
 800e548:	0800e735 	.word	0x0800e735
 800e54c:	20010618 	.word	0x20010618

0800e550 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	0002      	movs	r2, r0
 800e558:	1dfb      	adds	r3, r7, #7
 800e55a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800e55c:	4b02      	ldr	r3, [pc, #8]	; (800e568 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800e55e:	0018      	movs	r0, r3
 800e560:	46bd      	mov	sp, r7
 800e562:	b002      	add	sp, #8
 800e564:	bd80      	pop	{r7, pc}
 800e566:	46c0      	nop			; (mov r8, r8)
 800e568:	00000389 	.word	0x00000389

0800e56c <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	0002      	movs	r2, r0
 800e574:	1dfb      	adds	r3, r7, #7
 800e576:	701a      	strb	r2, [r3, #0]
  return 30u;
 800e578:	231e      	movs	r3, #30
}
 800e57a:	0018      	movs	r0, r3
 800e57c:	46bd      	mov	sp, r7
 800e57e:	b002      	add	sp, #8
 800e580:	bd80      	pop	{r7, pc}

0800e582 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b082      	sub	sp, #8
 800e586:	af00      	add	r7, sp, #0
 800e588:	0002      	movs	r2, r0
 800e58a:	1dfb      	adds	r3, r7, #7
 800e58c:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800e58e:	46c0      	nop			; (mov r8, r8)
 800e590:	46bd      	mov	sp, r7
 800e592:	b002      	add	sp, #8
 800e594:	bd80      	pop	{r7, pc}

0800e596 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	0002      	movs	r2, r0
 800e59e:	1dfb      	adds	r3, r7, #7
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	1dbb      	adds	r3, r7, #6
 800e5a4:	1c0a      	adds	r2, r1, #0
 800e5a6:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800e5a8:	1dbb      	adds	r3, r7, #6
 800e5aa:	7819      	ldrb	r1, [r3, #0]
 800e5ac:	1dfb      	adds	r3, r7, #7
 800e5ae:	7818      	ldrb	r0, [r3, #0]
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f000 f805 	bl	800e5c2 <USBPD_PHY_SendMessage>
 800e5b8:	0003      	movs	r3, r0
}
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	b002      	add	sp, #8
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800e5c2:	b590      	push	{r4, r7, lr}
 800e5c4:	b083      	sub	sp, #12
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	0004      	movs	r4, r0
 800e5ca:	0008      	movs	r0, r1
 800e5cc:	603a      	str	r2, [r7, #0]
 800e5ce:	0019      	movs	r1, r3
 800e5d0:	1dfb      	adds	r3, r7, #7
 800e5d2:	1c22      	adds	r2, r4, #0
 800e5d4:	701a      	strb	r2, [r3, #0]
 800e5d6:	1dbb      	adds	r3, r7, #6
 800e5d8:	1c02      	adds	r2, r0, #0
 800e5da:	701a      	strb	r2, [r3, #0]
 800e5dc:	1d3b      	adds	r3, r7, #4
 800e5de:	1c0a      	adds	r2, r1, #0
 800e5e0:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800e5e2:	1d3b      	adds	r3, r7, #4
 800e5e4:	881c      	ldrh	r4, [r3, #0]
 800e5e6:	683a      	ldr	r2, [r7, #0]
 800e5e8:	1dbb      	adds	r3, r7, #6
 800e5ea:	7819      	ldrb	r1, [r3, #0]
 800e5ec:	1dfb      	adds	r3, r7, #7
 800e5ee:	7818      	ldrb	r0, [r3, #0]
 800e5f0:	0023      	movs	r3, r4
 800e5f2:	f000 fb2f 	bl	800ec54 <USBPD_HW_IF_SendBuffer>
 800e5f6:	0003      	movs	r3, r0
}
 800e5f8:	0018      	movs	r0, r3
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	b003      	add	sp, #12
 800e5fe:	bd90      	pop	{r4, r7, pc}

0800e600 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	0002      	movs	r2, r0
 800e608:	1dfb      	adds	r3, r7, #7
 800e60a:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800e60c:	1dfb      	adds	r3, r7, #7
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	0018      	movs	r0, r3
 800e612:	f000 fc1b 	bl	800ee4c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	0018      	movs	r0, r3
 800e61a:	46bd      	mov	sp, r7
 800e61c:	b002      	add	sp, #8
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	0002      	movs	r2, r0
 800e628:	1dfb      	adds	r3, r7, #7
 800e62a:	701a      	strb	r2, [r3, #0]
 800e62c:	1dbb      	adds	r3, r7, #6
 800e62e:	1c0a      	adds	r2, r1, #0
 800e630:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800e632:	1dbb      	adds	r3, r7, #6
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	2b07      	cmp	r3, #7
 800e638:	d104      	bne.n	800e644 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800e63a:	1dfb      	adds	r3, r7, #7
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	0018      	movs	r0, r3
 800e640:	f000 fad0 	bl	800ebe4 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	0018      	movs	r0, r3
 800e648:	46bd      	mov	sp, r7
 800e64a:	b002      	add	sp, #8
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b082      	sub	sp, #8
 800e652:	af00      	add	r7, sp, #0
 800e654:	0002      	movs	r2, r0
 800e656:	1dfb      	adds	r3, r7, #7
 800e658:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800e65a:	1dfb      	adds	r3, r7, #7
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	0018      	movs	r0, r3
 800e660:	f001 f81c 	bl	800f69c <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800e664:	46c0      	nop			; (mov r8, r8)
 800e666:	46bd      	mov	sp, r7
 800e668:	b002      	add	sp, #8
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	0002      	movs	r2, r0
 800e674:	1dfb      	adds	r3, r7, #7
 800e676:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800e678:	1dfb      	adds	r3, r7, #7
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	0018      	movs	r0, r3
 800e67e:	f001 f827 	bl	800f6d0 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800e682:	46c0      	nop			; (mov r8, r8)
 800e684:	46bd      	mov	sp, r7
 800e686:	b002      	add	sp, #8
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	0002      	movs	r2, r0
 800e694:	6039      	str	r1, [r7, #0]
 800e696:	1dfb      	adds	r3, r7, #7
 800e698:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800e69a:	1dfb      	adds	r3, r7, #7
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	4a05      	ldr	r2, [pc, #20]	; (800e6b4 <USBPD_PHY_SOPSupported+0x28>)
 800e6a0:	00db      	lsls	r3, r3, #3
 800e6a2:	18d3      	adds	r3, r2, r3
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	601a      	str	r2, [r3, #0]
}
 800e6aa:	46c0      	nop			; (mov r8, r8)
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	b002      	add	sp, #8
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	46c0      	nop			; (mov r8, r8)
 800e6b4:	20010618 	.word	0x20010618

0800e6b8 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	0002      	movs	r2, r0
 800e6c0:	1dfb      	adds	r3, r7, #7
 800e6c2:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800e6c4:	1dfb      	adds	r3, r7, #7
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	f001 f81b 	bl	800f704 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800e6ce:	0003      	movs	r3, r0
}
 800e6d0:	0018      	movs	r0, r3
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	b002      	add	sp, #8
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	0002      	movs	r2, r0
 800e6e0:	1dfb      	adds	r3, r7, #7
 800e6e2:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800e6e4:	1dfb      	adds	r3, r7, #7
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	0018      	movs	r0, r3
 800e6ea:	f001 f84f 	bl	800f78c <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800e6ee:	46c0      	nop			; (mov r8, r8)
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	b002      	add	sp, #8
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	0002      	movs	r2, r0
 800e6fe:	1dfb      	adds	r3, r7, #7
 800e700:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800e702:	1dfb      	adds	r3, r7, #7
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	0018      	movs	r0, r3
 800e708:	f000 fda8 	bl	800f25c <USBPD_HW_IF_EnableRX>
}
 800e70c:	46c0      	nop			; (mov r8, r8)
 800e70e:	46bd      	mov	sp, r7
 800e710:	b002      	add	sp, #8
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	0002      	movs	r2, r0
 800e71c:	1dfb      	adds	r3, r7, #7
 800e71e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800e720:	1dfb      	adds	r3, r7, #7
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	0018      	movs	r0, r3
 800e726:	f000 fdb1 	bl	800f28c <USBPD_HW_IF_DisableRX>
}
 800e72a:	46c0      	nop			; (mov r8, r8)
 800e72c:	46bd      	mov	sp, r7
 800e72e:	b002      	add	sp, #8
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800e734:	b590      	push	{r4, r7, lr}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	0002      	movs	r2, r0
 800e73c:	6039      	str	r1, [r7, #0]
 800e73e:	1dfb      	adds	r3, r7, #7
 800e740:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800e742:	2008      	movs	r0, #8
 800e744:	183b      	adds	r3, r7, r0
 800e746:	4a2e      	ldr	r2, [pc, #184]	; (800e800 <PHY_Rx_Completed+0xcc>)
 800e748:	6811      	ldr	r1, [r2, #0]
 800e74a:	6019      	str	r1, [r3, #0]
 800e74c:	8892      	ldrh	r2, [r2, #4]
 800e74e:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800e750:	240f      	movs	r4, #15
 800e752:	193b      	adds	r3, r7, r4
 800e754:	1839      	adds	r1, r7, r0
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	188a      	adds	r2, r1, r2
 800e75a:	7812      	ldrb	r2, [r2, #0]
 800e75c:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800e75e:	193b      	adds	r3, r7, r4
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	2b04      	cmp	r3, #4
 800e764:	dc02      	bgt.n	800e76c <PHY_Rx_Completed+0x38>
 800e766:	2b00      	cmp	r3, #0
 800e768:	da1d      	bge.n	800e7a6 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800e76a:	e040      	b.n	800e7ee <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800e76c:	2b06      	cmp	r3, #6
 800e76e:	d13e      	bne.n	800e7ee <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800e770:	1dfb      	adds	r3, r7, #7
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	4a23      	ldr	r2, [pc, #140]	; (800e804 <PHY_Rx_Completed+0xd0>)
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	18d3      	adds	r3, r2, r3
 800e77a:	3304      	adds	r3, #4
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	221e      	movs	r2, #30
 800e780:	4013      	ands	r3, r2
 800e782:	2b1e      	cmp	r3, #30
 800e784:	d135      	bne.n	800e7f2 <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800e786:	1dfb      	adds	r3, r7, #7
 800e788:	781a      	ldrb	r2, [r3, #0]
 800e78a:	491f      	ldr	r1, [pc, #124]	; (800e808 <PHY_Rx_Completed+0xd4>)
 800e78c:	0013      	movs	r3, r2
 800e78e:	00db      	lsls	r3, r3, #3
 800e790:	1a9b      	subs	r3, r3, r2
 800e792:	00db      	lsls	r3, r3, #3
 800e794:	18cb      	adds	r3, r1, r3
 800e796:	331c      	adds	r3, #28
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	1dfa      	adds	r2, r7, #7
 800e79c:	7812      	ldrb	r2, [r2, #0]
 800e79e:	2106      	movs	r1, #6
 800e7a0:	0010      	movs	r0, r2
 800e7a2:	4798      	blx	r3
      break;
 800e7a4:	e025      	b.n	800e7f2 <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800e7a6:	240f      	movs	r4, #15
 800e7a8:	193b      	adds	r3, r7, r4
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	409a      	lsls	r2, r3
 800e7b0:	0013      	movs	r3, r2
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	0018      	movs	r0, r3
 800e7b6:	1dfb      	adds	r3, r7, #7
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	4a12      	ldr	r2, [pc, #72]	; (800e804 <PHY_Rx_Completed+0xd0>)
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	18d3      	adds	r3, r2, r3
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	193a      	adds	r2, r7, r4
 800e7c6:	7812      	ldrb	r2, [r2, #0]
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	4091      	lsls	r1, r2
 800e7cc:	000a      	movs	r2, r1
 800e7ce:	b2d2      	uxtb	r2, r2
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	4298      	cmp	r0, r3
 800e7d4:	d10f      	bne.n	800e7f6 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800e7d6:	1dfb      	adds	r3, r7, #7
 800e7d8:	781a      	ldrb	r2, [r3, #0]
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <PHY_Rx_Completed+0xd0>)
 800e7dc:	00d2      	lsls	r2, r2, #3
 800e7de:	58d3      	ldr	r3, [r2, r3]
 800e7e0:	193a      	adds	r2, r7, r4
 800e7e2:	7811      	ldrb	r1, [r2, #0]
 800e7e4:	1dfa      	adds	r2, r7, #7
 800e7e6:	7812      	ldrb	r2, [r2, #0]
 800e7e8:	0010      	movs	r0, r2
 800e7ea:	4798      	blx	r3
      break;
 800e7ec:	e003      	b.n	800e7f6 <PHY_Rx_Completed+0xc2>
      break;
 800e7ee:	46c0      	nop			; (mov r8, r8)
 800e7f0:	e002      	b.n	800e7f8 <PHY_Rx_Completed+0xc4>
      break;
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	e000      	b.n	800e7f8 <PHY_Rx_Completed+0xc4>
      break;
 800e7f6:	46c0      	nop			; (mov r8, r8)
  }
}
 800e7f8:	46c0      	nop			; (mov r8, r8)
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	b005      	add	sp, #20
 800e7fe:	bd90      	pop	{r4, r7, pc}
 800e800:	0801a1ac 	.word	0x0801a1ac
 800e804:	20010618 	.word	0x20010618
 800e808:	20010620 	.word	0x20010620

0800e80c <LL_AHB1_GRP1_EnableClock>:
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800e814:	4b07      	ldr	r3, [pc, #28]	; (800e834 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e816:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e818:	4b06      	ldr	r3, [pc, #24]	; (800e834 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	430a      	orrs	r2, r1
 800e81e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800e820:	4b04      	ldr	r3, [pc, #16]	; (800e834 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	4013      	ands	r3, r2
 800e828:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e82a:	68fb      	ldr	r3, [r7, #12]
}
 800e82c:	46c0      	nop			; (mov r8, r8)
 800e82e:	46bd      	mov	sp, r7
 800e830:	b004      	add	sp, #16
 800e832:	bd80      	pop	{r7, pc}
 800e834:	40021000 	.word	0x40021000

0800e838 <LL_APB1_GRP1_EnableClock>:
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800e840:	4b07      	ldr	r3, [pc, #28]	; (800e860 <LL_APB1_GRP1_EnableClock+0x28>)
 800e842:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e844:	4b06      	ldr	r3, [pc, #24]	; (800e860 <LL_APB1_GRP1_EnableClock+0x28>)
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	430a      	orrs	r2, r1
 800e84a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800e84c:	4b04      	ldr	r3, [pc, #16]	; (800e860 <LL_APB1_GRP1_EnableClock+0x28>)
 800e84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	4013      	ands	r3, r2
 800e854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e856:	68fb      	ldr	r3, [r7, #12]
}
 800e858:	46c0      	nop			; (mov r8, r8)
 800e85a:	46bd      	mov	sp, r7
 800e85c:	b004      	add	sp, #16
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	40021000 	.word	0x40021000

0800e864 <LL_APB2_GRP1_EnableClock>:
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800e86c:	4b07      	ldr	r3, [pc, #28]	; (800e88c <LL_APB2_GRP1_EnableClock+0x28>)
 800e86e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e870:	4b06      	ldr	r3, [pc, #24]	; (800e88c <LL_APB2_GRP1_EnableClock+0x28>)
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	430a      	orrs	r2, r1
 800e876:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800e878:	4b04      	ldr	r3, [pc, #16]	; (800e88c <LL_APB2_GRP1_EnableClock+0x28>)
 800e87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	4013      	ands	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e882:	68fb      	ldr	r3, [r7, #12]
}
 800e884:	46c0      	nop			; (mov r8, r8)
 800e886:	46bd      	mov	sp, r7
 800e888:	b004      	add	sp, #16
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	40021000 	.word	0x40021000

0800e890 <LL_UCPD_Enable>:
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2280      	movs	r2, #128	; 0x80
 800e89e:	0612      	lsls	r2, r2, #24
 800e8a0:	431a      	orrs	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
}
 800e8a6:	46c0      	nop			; (mov r8, r8)
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	b002      	add	sp, #8
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <LL_UCPD_Disable>:
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b082      	sub	sp, #8
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	005b      	lsls	r3, r3, #1
 800e8bc:	085a      	lsrs	r2, r3, #1
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	601a      	str	r2, [r3, #0]
}
 800e8c2:	46c0      	nop			; (mov r8, r8)
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	b002      	add	sp, #8
 800e8c8:	bd80      	pop	{r7, pc}
	...

0800e8cc <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	4a03      	ldr	r2, [pc, #12]	; (800e8e8 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800e8da:	401a      	ands	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	60da      	str	r2, [r3, #12]
}
 800e8e0:	46c0      	nop			; (mov r8, r8)
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	b002      	add	sp, #8
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	ffdfffff 	.word	0xffdfffff

0800e8ec <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	2280      	movs	r2, #128	; 0x80
 800e8fa:	0392      	lsls	r2, r2, #14
 800e8fc:	431a      	orrs	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	60da      	str	r2, [r3, #12]
}
 800e902:	46c0      	nop			; (mov r8, r8)
 800e904:	46bd      	mov	sp, r7
 800e906:	b002      	add	sp, #8
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	4a03      	ldr	r2, [pc, #12]	; (800e928 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800e91a:	401a      	ands	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	60da      	str	r2, [r3, #12]
}
 800e920:	46c0      	nop			; (mov r8, r8)
 800e922:	46bd      	mov	sp, r7
 800e924:	b002      	add	sp, #8
 800e926:	bd80      	pop	{r7, pc}
 800e928:	ffefffff 	.word	0xffefffff

0800e92c <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	2280      	movs	r2, #128	; 0x80
 800e93a:	0352      	lsls	r2, r2, #13
 800e93c:	431a      	orrs	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	60da      	str	r2, [r3, #12]
}
 800e942:	46c0      	nop			; (mov r8, r8)
 800e944:	46bd      	mov	sp, r7
 800e946:	b002      	add	sp, #8
 800e948:	bd80      	pop	{r7, pc}

0800e94a <LL_UCPD_SignalFRSTX>:
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	2280      	movs	r2, #128	; 0x80
 800e958:	0292      	lsls	r2, r2, #10
 800e95a:	431a      	orrs	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	60da      	str	r2, [r3, #12]
}
 800e960:	46c0      	nop			; (mov r8, r8)
 800e962:	46bd      	mov	sp, r7
 800e964:	b002      	add	sp, #8
 800e966:	bd80      	pop	{r7, pc}

0800e968 <LL_UCPD_FRSDetectionEnable>:
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	2280      	movs	r2, #128	; 0x80
 800e976:	0252      	lsls	r2, r2, #9
 800e978:	431a      	orrs	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	60da      	str	r2, [r3, #12]
}
 800e97e:	46c0      	nop			; (mov r8, r8)
 800e980:	46bd      	mov	sp, r7
 800e982:	b002      	add	sp, #8
 800e984:	bd80      	pop	{r7, pc}
	...

0800e988 <LL_UCPD_FRSDetectionDisable>:
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	4a03      	ldr	r2, [pc, #12]	; (800e9a4 <LL_UCPD_FRSDetectionDisable+0x1c>)
 800e996:	401a      	ands	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	60da      	str	r2, [r3, #12]
}
 800e99c:	46c0      	nop			; (mov r8, r8)
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	b002      	add	sp, #8
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	fffeffff 	.word	0xfffeffff

0800e9a8 <LL_UCPD_SetccEnable>:
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	4a05      	ldr	r2, [pc, #20]	; (800e9cc <LL_UCPD_SetccEnable+0x24>)
 800e9b8:	401a      	ands	r2, r3
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	431a      	orrs	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60da      	str	r2, [r3, #12]
}
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	b002      	add	sp, #8
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	fffff3ff 	.word	0xfffff3ff

0800e9d0 <LL_UCPD_SetSNKRole>:
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	2280      	movs	r2, #128	; 0x80
 800e9de:	0092      	lsls	r2, r2, #2
 800e9e0:	431a      	orrs	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	60da      	str	r2, [r3, #12]
}
 800e9e6:	46c0      	nop			; (mov r8, r8)
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	b002      	add	sp, #8
 800e9ec:	bd80      	pop	{r7, pc}
	...

0800e9f0 <LL_UCPD_SetSRCRole>:
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	4a03      	ldr	r2, [pc, #12]	; (800ea0c <LL_UCPD_SetSRCRole+0x1c>)
 800e9fe:	401a      	ands	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	60da      	str	r2, [r3, #12]
}
 800ea04:	46c0      	nop			; (mov r8, r8)
 800ea06:	46bd      	mov	sp, r7
 800ea08:	b002      	add	sp, #8
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	fffffdff 	.word	0xfffffdff

0800ea10 <LL_UCPD_SetRpResistor>:
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	4a05      	ldr	r2, [pc, #20]	; (800ea34 <LL_UCPD_SetRpResistor+0x24>)
 800ea20:	401a      	ands	r2, r3
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	431a      	orrs	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	60da      	str	r2, [r3, #12]
}
 800ea2a:	46c0      	nop			; (mov r8, r8)
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	b002      	add	sp, #8
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	46c0      	nop			; (mov r8, r8)
 800ea34:	fffffe7f 	.word	0xfffffe7f

0800ea38 <LL_UCPD_SetCCPin>:
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	2240      	movs	r2, #64	; 0x40
 800ea48:	4393      	bics	r3, r2
 800ea4a:	001a      	movs	r2, r3
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	431a      	orrs	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	60da      	str	r2, [r3, #12]
}
 800ea54:	46c0      	nop			; (mov r8, r8)
 800ea56:	46bd      	mov	sp, r7
 800ea58:	b002      	add	sp, #8
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <LL_UCPD_RxEnable>:
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	2220      	movs	r2, #32
 800ea6a:	431a      	orrs	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	60da      	str	r2, [r3, #12]
}
 800ea70:	46c0      	nop			; (mov r8, r8)
 800ea72:	46bd      	mov	sp, r7
 800ea74:	b002      	add	sp, #8
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <LL_UCPD_RxDisable>:
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	2220      	movs	r2, #32
 800ea86:	4393      	bics	r3, r2
 800ea88:	001a      	movs	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60da      	str	r2, [r3, #12]
}
 800ea8e:	46c0      	nop			; (mov r8, r8)
 800ea90:	46bd      	mov	sp, r7
 800ea92:	b002      	add	sp, #8
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <LL_UCPD_SetRxMode>:
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b082      	sub	sp, #8
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	2210      	movs	r2, #16
 800eaa6:	4393      	bics	r3, r2
 800eaa8:	001a      	movs	r2, r3
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	431a      	orrs	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	60da      	str	r2, [r3, #12]
}
 800eab2:	46c0      	nop			; (mov r8, r8)
 800eab4:	46bd      	mov	sp, r7
 800eab6:	b002      	add	sp, #8
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <LL_UCPD_SendHardReset>:
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	2208      	movs	r2, #8
 800eac8:	431a      	orrs	r2, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	60da      	str	r2, [r3, #12]
}
 800eace:	46c0      	nop			; (mov r8, r8)
 800ead0:	46bd      	mov	sp, r7
 800ead2:	b002      	add	sp, #8
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <LL_UCPD_SendMessage>:
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b082      	sub	sp, #8
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	2204      	movs	r2, #4
 800eae4:	431a      	orrs	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	60da      	str	r2, [r3, #12]
}
 800eaea:	46c0      	nop			; (mov r8, r8)
 800eaec:	46bd      	mov	sp, r7
 800eaee:	b002      	add	sp, #8
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <LL_UCPD_SetTxMode>:
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	2203      	movs	r2, #3
 800eb02:	4393      	bics	r3, r2
 800eb04:	001a      	movs	r2, r3
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	431a      	orrs	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	60da      	str	r2, [r3, #12]
}
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	46bd      	mov	sp, r7
 800eb12:	b002      	add	sp, #8
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b082      	sub	sp, #8
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2280      	movs	r2, #128	; 0x80
 800eb24:	05d2      	lsls	r2, r2, #23
 800eb26:	431a      	orrs	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	601a      	str	r2, [r3, #0]
}
 800eb2c:	46c0      	nop			; (mov r8, r8)
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	b002      	add	sp, #8
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a03      	ldr	r2, [pc, #12]	; (800eb50 <LL_UCPD_RxDMADisable+0x1c>)
 800eb42:	401a      	ands	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	601a      	str	r2, [r3, #0]
}
 800eb48:	46c0      	nop			; (mov r8, r8)
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	b002      	add	sp, #8
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	bfffffff 	.word	0xbfffffff

0800eb54 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2280      	movs	r2, #128	; 0x80
 800eb62:	0592      	lsls	r2, r2, #22
 800eb64:	431a      	orrs	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	601a      	str	r2, [r3, #0]
}
 800eb6a:	46c0      	nop			; (mov r8, r8)
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	b002      	add	sp, #8
 800eb70:	bd80      	pop	{r7, pc}
	...

0800eb74 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a03      	ldr	r2, [pc, #12]	; (800eb90 <LL_UCPD_TxDMADisable+0x1c>)
 800eb82:	401a      	ands	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	601a      	str	r2, [r3, #0]
}
 800eb88:	46c0      	nop			; (mov r8, r8)
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	b002      	add	sp, #8
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	dfffffff 	.word	0xdfffffff

0800eb94 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	61da      	str	r2, [r3, #28]
}
 800eba4:	46c0      	nop			; (mov r8, r8)
 800eba6:	46bd      	mov	sp, r7
 800eba8:	b002      	add	sp, #8
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	683a      	ldr	r2, [r7, #0]
 800ebba:	621a      	str	r2, [r3, #32]
}
 800ebbc:	46c0      	nop			; (mov r8, r8)
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	b002      	add	sp, #8
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800ebc8:	2380      	movs	r3, #128	; 0x80
 800ebca:	055b      	lsls	r3, r3, #21
 800ebcc:	0018      	movs	r0, r3
 800ebce:	f7ff fe33 	bl	800e838 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800ebd2:	2380      	movs	r3, #128	; 0x80
 800ebd4:	015b      	lsls	r3, r3, #5
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f7ff fe18 	bl	800e80c <LL_AHB1_GRP1_EnableClock>
}
 800ebdc:	46c0      	nop			; (mov r8, r8)
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
	...

0800ebe4 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	0002      	movs	r2, r0
 800ebec:	1dfb      	adds	r3, r7, #7
 800ebee:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800ebf0:	1dfb      	adds	r3, r7, #7
 800ebf2:	781a      	ldrb	r2, [r3, #0]
 800ebf4:	4916      	ldr	r1, [pc, #88]	; (800ec50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ebf6:	0013      	movs	r3, r2
 800ebf8:	00db      	lsls	r3, r3, #3
 800ebfa:	1a9b      	subs	r3, r3, r2
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	585b      	ldr	r3, [r3, r1]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	2207      	movs	r2, #7
 800ec04:	4393      	bics	r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800ec08:	1dfb      	adds	r3, r7, #7
 800ec0a:	781a      	ldrb	r2, [r3, #0]
 800ec0c:	4910      	ldr	r1, [pc, #64]	; (800ec50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ec0e:	0013      	movs	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	1a9b      	subs	r3, r3, r2
 800ec14:	00db      	lsls	r3, r3, #3
 800ec16:	585b      	ldr	r3, [r3, r1]
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f7ff fe48 	bl	800e8ae <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800ec1e:	1dfb      	adds	r3, r7, #7
 800ec20:	781a      	ldrb	r2, [r3, #0]
 800ec22:	490b      	ldr	r1, [pc, #44]	; (800ec50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ec24:	0013      	movs	r3, r2
 800ec26:	00db      	lsls	r3, r3, #3
 800ec28:	1a9b      	subs	r3, r3, r2
 800ec2a:	00db      	lsls	r3, r3, #3
 800ec2c:	585b      	ldr	r3, [r3, r1]
 800ec2e:	0018      	movs	r0, r3
 800ec30:	f7ff fe2e 	bl	800e890 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800ec34:	1dfb      	adds	r3, r7, #7
 800ec36:	781a      	ldrb	r2, [r3, #0]
 800ec38:	4905      	ldr	r1, [pc, #20]	; (800ec50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ec3a:	0013      	movs	r3, r2
 800ec3c:	00db      	lsls	r3, r3, #3
 800ec3e:	1a9b      	subs	r3, r3, r2
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	585b      	ldr	r3, [r3, r1]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	60da      	str	r2, [r3, #12]
}
 800ec48:	46c0      	nop			; (mov r8, r8)
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	b004      	add	sp, #16
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	20010620 	.word	0x20010620

0800ec54 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800ec54:	b590      	push	{r4, r7, lr}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60ba      	str	r2, [r7, #8]
 800ec5c:	607b      	str	r3, [r7, #4]
 800ec5e:	240f      	movs	r4, #15
 800ec60:	193b      	adds	r3, r7, r4
 800ec62:	1c02      	adds	r2, r0, #0
 800ec64:	701a      	strb	r2, [r3, #0]
 800ec66:	200e      	movs	r0, #14
 800ec68:	183b      	adds	r3, r7, r0
 800ec6a:	1c0a      	adds	r2, r1, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800ec6e:	2317      	movs	r3, #23
 800ec70:	18fb      	adds	r3, r7, r3
 800ec72:	2200      	movs	r2, #0
 800ec74:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800ec76:	183b      	adds	r3, r7, r0
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2b05      	cmp	r3, #5
 800ec7c:	d10b      	bne.n	800ec96 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800ec7e:	193b      	adds	r3, r7, r4
 800ec80:	781a      	ldrb	r2, [r3, #0]
 800ec82:	496d      	ldr	r1, [pc, #436]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ec84:	0013      	movs	r3, r2
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	1a9b      	subs	r3, r3, r2
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	585b      	ldr	r3, [r3, r1]
 800ec8e:	0018      	movs	r0, r3
 800ec90:	f7ff ff13 	bl	800eaba <LL_UCPD_SendHardReset>
 800ec94:	e0c9      	b.n	800ee2a <USBPD_HW_IF_SendBuffer+0x1d6>
  }
  else
  {
    switch (Type)
 800ec96:	230e      	movs	r3, #14
 800ec98:	18fb      	adds	r3, r7, r3
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	2b07      	cmp	r3, #7
 800ec9e:	d871      	bhi.n	800ed84 <USBPD_HW_IF_SendBuffer+0x130>
 800eca0:	009a      	lsls	r2, r3, #2
 800eca2:	4b66      	ldr	r3, [pc, #408]	; (800ee3c <USBPD_HW_IF_SendBuffer+0x1e8>)
 800eca4:	18d3      	adds	r3, r2, r3
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	469f      	mov	pc, r3
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800ecaa:	240f      	movs	r4, #15
 800ecac:	193b      	adds	r3, r7, r4
 800ecae:	781a      	ldrb	r2, [r3, #0]
 800ecb0:	4961      	ldr	r1, [pc, #388]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ecb2:	0013      	movs	r3, r2
 800ecb4:	00db      	lsls	r3, r3, #3
 800ecb6:	1a9b      	subs	r3, r3, r2
 800ecb8:	00db      	lsls	r3, r3, #3
 800ecba:	585b      	ldr	r3, [r3, r1]
 800ecbc:	4a60      	ldr	r2, [pc, #384]	; (800ee40 <USBPD_HW_IF_SendBuffer+0x1ec>)
 800ecbe:	0011      	movs	r1, r2
 800ecc0:	0018      	movs	r0, r3
 800ecc2:	f7ff ff67 	bl	800eb94 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800ecc6:	193b      	adds	r3, r7, r4
 800ecc8:	781a      	ldrb	r2, [r3, #0]
 800ecca:	495b      	ldr	r1, [pc, #364]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800eccc:	0013      	movs	r3, r2
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	1a9b      	subs	r3, r3, r2
 800ecd2:	00db      	lsls	r3, r3, #3
 800ecd4:	585b      	ldr	r3, [r3, r1]
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	0018      	movs	r0, r3
 800ecda:	f7ff ff0a 	bl	800eaf2 <LL_UCPD_SetTxMode>
        break;
 800ecde:	e056      	b.n	800ed8e <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800ece0:	240f      	movs	r4, #15
 800ece2:	193b      	adds	r3, r7, r4
 800ece4:	781a      	ldrb	r2, [r3, #0]
 800ece6:	4954      	ldr	r1, [pc, #336]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ece8:	0013      	movs	r3, r2
 800ecea:	00db      	lsls	r3, r3, #3
 800ecec:	1a9b      	subs	r3, r3, r2
 800ecee:	00db      	lsls	r3, r3, #3
 800ecf0:	585b      	ldr	r3, [r3, r1]
 800ecf2:	4a54      	ldr	r2, [pc, #336]	; (800ee44 <USBPD_HW_IF_SendBuffer+0x1f0>)
 800ecf4:	0011      	movs	r1, r2
 800ecf6:	0018      	movs	r0, r3
 800ecf8:	f7ff ff4c 	bl	800eb94 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800ecfc:	193b      	adds	r3, r7, r4
 800ecfe:	781a      	ldrb	r2, [r3, #0]
 800ed00:	494d      	ldr	r1, [pc, #308]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ed02:	0013      	movs	r3, r2
 800ed04:	00db      	lsls	r3, r3, #3
 800ed06:	1a9b      	subs	r3, r3, r2
 800ed08:	00db      	lsls	r3, r3, #3
 800ed0a:	585b      	ldr	r3, [r3, r1]
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	0018      	movs	r0, r3
 800ed10:	f7ff feef 	bl	800eaf2 <LL_UCPD_SetTxMode>
        break;
 800ed14:	e03b      	b.n	800ed8e <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800ed16:	240f      	movs	r4, #15
 800ed18:	193b      	adds	r3, r7, r4
 800ed1a:	781a      	ldrb	r2, [r3, #0]
 800ed1c:	4946      	ldr	r1, [pc, #280]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ed1e:	0013      	movs	r3, r2
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	1a9b      	subs	r3, r3, r2
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	585b      	ldr	r3, [r3, r1]
 800ed28:	4a47      	ldr	r2, [pc, #284]	; (800ee48 <USBPD_HW_IF_SendBuffer+0x1f4>)
 800ed2a:	0011      	movs	r1, r2
 800ed2c:	0018      	movs	r0, r3
 800ed2e:	f7ff ff31 	bl	800eb94 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800ed32:	193b      	adds	r3, r7, r4
 800ed34:	781a      	ldrb	r2, [r3, #0]
 800ed36:	4940      	ldr	r1, [pc, #256]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ed38:	0013      	movs	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	1a9b      	subs	r3, r3, r2
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	585b      	ldr	r3, [r3, r1]
 800ed42:	2100      	movs	r1, #0
 800ed44:	0018      	movs	r0, r3
 800ed46:	f7ff fed4 	bl	800eaf2 <LL_UCPD_SetTxMode>
        break;
 800ed4a:	e020      	b.n	800ed8e <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800ed4c:	230f      	movs	r3, #15
 800ed4e:	18fb      	adds	r3, r7, r3
 800ed50:	781a      	ldrb	r2, [r3, #0]
 800ed52:	4939      	ldr	r1, [pc, #228]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ed54:	0013      	movs	r3, r2
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	1a9b      	subs	r3, r3, r2
 800ed5a:	00db      	lsls	r3, r3, #3
 800ed5c:	585b      	ldr	r3, [r3, r1]
 800ed5e:	2101      	movs	r1, #1
 800ed60:	0018      	movs	r0, r3
 800ed62:	f7ff fec6 	bl	800eaf2 <LL_UCPD_SetTxMode>
        break;
 800ed66:	e012      	b.n	800ed8e <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800ed68:	230f      	movs	r3, #15
 800ed6a:	18fb      	adds	r3, r7, r3
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	4932      	ldr	r1, [pc, #200]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ed70:	0013      	movs	r3, r2
 800ed72:	00db      	lsls	r3, r3, #3
 800ed74:	1a9b      	subs	r3, r3, r2
 800ed76:	00db      	lsls	r3, r3, #3
 800ed78:	585b      	ldr	r3, [r3, r1]
 800ed7a:	2102      	movs	r1, #2
 800ed7c:	0018      	movs	r0, r3
 800ed7e:	f7ff feb8 	bl	800eaf2 <LL_UCPD_SetTxMode>
        break;
 800ed82:	e004      	b.n	800ed8e <USBPD_HW_IF_SendBuffer+0x13a>
      }
      default :
        _status = USBPD_ERROR;
 800ed84:	2317      	movs	r3, #23
 800ed86:	18fb      	adds	r3, r7, r3
 800ed88:	2202      	movs	r2, #2
 800ed8a:	701a      	strb	r2, [r3, #0]
        break;
 800ed8c:	46c0      	nop			; (mov r8, r8)
    }

    if (USBPD_OK == _status)
 800ed8e:	2317      	movs	r3, #23
 800ed90:	18fb      	adds	r3, r7, r3
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d148      	bne.n	800ee2a <USBPD_HW_IF_SendBuffer+0x1d6>
    {
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800ed98:	240f      	movs	r4, #15
 800ed9a:	193b      	adds	r3, r7, r4
 800ed9c:	781a      	ldrb	r2, [r3, #0]
 800ed9e:	4926      	ldr	r1, [pc, #152]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800eda0:	0013      	movs	r3, r2
 800eda2:	00db      	lsls	r3, r3, #3
 800eda4:	1a9b      	subs	r3, r3, r2
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	18cb      	adds	r3, r1, r3
 800edaa:	3304      	adds	r3, #4
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	68ba      	ldr	r2, [r7, #8]
 800edb0:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800edb2:	193b      	adds	r3, r7, r4
 800edb4:	781a      	ldrb	r2, [r3, #0]
 800edb6:	4920      	ldr	r1, [pc, #128]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800edb8:	0013      	movs	r3, r2
 800edba:	00db      	lsls	r3, r3, #3
 800edbc:	1a9b      	subs	r3, r3, r2
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	18cb      	adds	r3, r1, r3
 800edc2:	3304      	adds	r3, #4
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 800edca:	193b      	adds	r3, r7, r4
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	491a      	ldr	r1, [pc, #104]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800edd0:	0013      	movs	r3, r2
 800edd2:	00db      	lsls	r3, r3, #3
 800edd4:	1a9b      	subs	r3, r3, r2
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	18cb      	adds	r3, r1, r3
 800edda:	3304      	adds	r3, #4
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6819      	ldr	r1, [r3, #0]
 800ede0:	193b      	adds	r3, r7, r4
 800ede2:	781a      	ldrb	r2, [r3, #0]
 800ede4:	4814      	ldr	r0, [pc, #80]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ede6:	0013      	movs	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	1a9b      	subs	r3, r3, r2
 800edec:	00db      	lsls	r3, r3, #3
 800edee:	18c3      	adds	r3, r0, r3
 800edf0:	3304      	adds	r3, #4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2201      	movs	r2, #1
 800edf6:	430a      	orrs	r2, r1
 800edf8:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800edfa:	193b      	adds	r3, r7, r4
 800edfc:	781a      	ldrb	r2, [r3, #0]
 800edfe:	490e      	ldr	r1, [pc, #56]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ee00:	0013      	movs	r3, r2
 800ee02:	00db      	lsls	r3, r3, #3
 800ee04:	1a9b      	subs	r3, r3, r2
 800ee06:	00db      	lsls	r3, r3, #3
 800ee08:	585b      	ldr	r3, [r3, r1]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	0011      	movs	r1, r2
 800ee0e:	0018      	movs	r0, r3
 800ee10:	f7ff fecc 	bl	800ebac <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800ee14:	193b      	adds	r3, r7, r4
 800ee16:	781a      	ldrb	r2, [r3, #0]
 800ee18:	4907      	ldr	r1, [pc, #28]	; (800ee38 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800ee1a:	0013      	movs	r3, r2
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	1a9b      	subs	r3, r3, r2
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	585b      	ldr	r3, [r3, r1]
 800ee24:	0018      	movs	r0, r3
 800ee26:	f7ff fe56 	bl	800ead6 <LL_UCPD_SendMessage>
    }
  }
  return _status;
 800ee2a:	2317      	movs	r3, #23
 800ee2c:	18fb      	adds	r3, r7, r3
 800ee2e:	781b      	ldrb	r3, [r3, #0]
}
 800ee30:	0018      	movs	r0, r3
 800ee32:	46bd      	mov	sp, r7
 800ee34:	b007      	add	sp, #28
 800ee36:	bd90      	pop	{r4, r7, pc}
 800ee38:	20010620 	.word	0x20010620
 800ee3c:	0801a370 	.word	0x0801a370
 800ee40:	0008e318 	.word	0x0008e318
 800ee44:	00031b18 	.word	0x00031b18
 800ee48:	000360d8 	.word	0x000360d8

0800ee4c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	0002      	movs	r2, r0
 800ee54:	1dfb      	adds	r3, r7, #7
 800ee56:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800ee58:	1dfb      	adds	r3, r7, #7
 800ee5a:	781a      	ldrb	r2, [r3, #0]
 800ee5c:	490c      	ldr	r1, [pc, #48]	; (800ee90 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800ee5e:	0013      	movs	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	1a9b      	subs	r3, r3, r2
 800ee64:	00db      	lsls	r3, r3, #3
 800ee66:	585b      	ldr	r3, [r3, r1]
 800ee68:	2102      	movs	r1, #2
 800ee6a:	0018      	movs	r0, r3
 800ee6c:	f7ff fe41 	bl	800eaf2 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800ee70:	1dfb      	adds	r3, r7, #7
 800ee72:	781a      	ldrb	r2, [r3, #0]
 800ee74:	4906      	ldr	r1, [pc, #24]	; (800ee90 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800ee76:	0013      	movs	r3, r2
 800ee78:	00db      	lsls	r3, r3, #3
 800ee7a:	1a9b      	subs	r3, r3, r2
 800ee7c:	00db      	lsls	r3, r3, #3
 800ee7e:	585b      	ldr	r3, [r3, r1]
 800ee80:	0018      	movs	r0, r3
 800ee82:	f7ff fe28 	bl	800ead6 <LL_UCPD_SendMessage>
}
 800ee86:	46c0      	nop			; (mov r8, r8)
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	b002      	add	sp, #8
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	46c0      	nop			; (mov r8, r8)
 800ee90:	20010620 	.word	0x20010620

0800ee94 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	0002      	movs	r2, r0
 800ee9c:	1dfb      	adds	r3, r7, #7
 800ee9e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800eea0:	2001      	movs	r0, #1
 800eea2:	f7ff fcdf 	bl	800e864 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800eea6:	1dfb      	adds	r3, r7, #7
 800eea8:	781a      	ldrb	r2, [r3, #0]
 800eeaa:	4953      	ldr	r1, [pc, #332]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800eeac:	0013      	movs	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	1a9b      	subs	r3, r3, r2
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	18cb      	adds	r3, r1, r3
 800eeb6:	3310      	adds	r3, #16
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	789b      	ldrb	r3, [r3, #2]
 800eebc:	079b      	lsls	r3, r3, #30
 800eebe:	0f9b      	lsrs	r3, r3, #30
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d021      	beq.n	800ef0a <USBPDM1_AssertRp+0x76>
 800eec6:	dc2f      	bgt.n	800ef28 <USBPDM1_AssertRp+0x94>
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d002      	beq.n	800eed2 <USBPDM1_AssertRp+0x3e>
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d00d      	beq.n	800eeec <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800eed0:	e02a      	b.n	800ef28 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800eed2:	1dfb      	adds	r3, r7, #7
 800eed4:	781a      	ldrb	r2, [r3, #0]
 800eed6:	4948      	ldr	r1, [pc, #288]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800eed8:	0013      	movs	r3, r2
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	00db      	lsls	r3, r3, #3
 800eee0:	585b      	ldr	r3, [r3, r1]
 800eee2:	2180      	movs	r1, #128	; 0x80
 800eee4:	0018      	movs	r0, r3
 800eee6:	f7ff fd93 	bl	800ea10 <LL_UCPD_SetRpResistor>
      break;
 800eeea:	e01e      	b.n	800ef2a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800eeec:	1dfb      	adds	r3, r7, #7
 800eeee:	781a      	ldrb	r2, [r3, #0]
 800eef0:	4941      	ldr	r1, [pc, #260]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800eef2:	0013      	movs	r3, r2
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	1a9b      	subs	r3, r3, r2
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	585b      	ldr	r3, [r3, r1]
 800eefc:	2280      	movs	r2, #128	; 0x80
 800eefe:	0052      	lsls	r2, r2, #1
 800ef00:	0011      	movs	r1, r2
 800ef02:	0018      	movs	r0, r3
 800ef04:	f7ff fd84 	bl	800ea10 <LL_UCPD_SetRpResistor>
      break;
 800ef08:	e00f      	b.n	800ef2a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800ef0a:	1dfb      	adds	r3, r7, #7
 800ef0c:	781a      	ldrb	r2, [r3, #0]
 800ef0e:	493a      	ldr	r1, [pc, #232]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800ef10:	0013      	movs	r3, r2
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	1a9b      	subs	r3, r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	585b      	ldr	r3, [r3, r1]
 800ef1a:	22c0      	movs	r2, #192	; 0xc0
 800ef1c:	0052      	lsls	r2, r2, #1
 800ef1e:	0011      	movs	r1, r2
 800ef20:	0018      	movs	r0, r3
 800ef22:	f7ff fd75 	bl	800ea10 <LL_UCPD_SetRpResistor>
      break;
 800ef26:	e000      	b.n	800ef2a <USBPDM1_AssertRp+0x96>
      break;
 800ef28:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800ef2a:	1dfb      	adds	r3, r7, #7
 800ef2c:	781a      	ldrb	r2, [r3, #0]
 800ef2e:	4932      	ldr	r1, [pc, #200]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800ef30:	0013      	movs	r3, r2
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	1a9b      	subs	r3, r3, r2
 800ef36:	00db      	lsls	r3, r3, #3
 800ef38:	585b      	ldr	r3, [r3, r1]
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	f7ff fd33 	bl	800e9a8 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800ef42:	1dfb      	adds	r3, r7, #7
 800ef44:	781a      	ldrb	r2, [r3, #0]
 800ef46:	492c      	ldr	r1, [pc, #176]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800ef48:	0013      	movs	r3, r2
 800ef4a:	00db      	lsls	r3, r3, #3
 800ef4c:	1a9b      	subs	r3, r3, r2
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	585b      	ldr	r3, [r3, r1]
 800ef52:	0018      	movs	r0, r3
 800ef54:	f7ff fd4c 	bl	800e9f0 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800ef58:	1dfb      	adds	r3, r7, #7
 800ef5a:	781a      	ldrb	r2, [r3, #0]
 800ef5c:	4926      	ldr	r1, [pc, #152]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800ef5e:	0013      	movs	r3, r2
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	18cb      	adds	r3, r1, r3
 800ef68:	3334      	adds	r3, #52	; 0x34
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10e      	bne.n	800ef8e <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800ef70:	1dfb      	adds	r3, r7, #7
 800ef72:	781a      	ldrb	r2, [r3, #0]
 800ef74:	4920      	ldr	r1, [pc, #128]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800ef76:	0013      	movs	r3, r2
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	1a9b      	subs	r3, r3, r2
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	585b      	ldr	r3, [r3, r1]
 800ef80:	22c0      	movs	r2, #192	; 0xc0
 800ef82:	0112      	lsls	r2, r2, #4
 800ef84:	0011      	movs	r1, r2
 800ef86:	0018      	movs	r0, r3
 800ef88:	f7ff fd0e 	bl	800e9a8 <LL_UCPD_SetccEnable>
 800ef8c:	e01b      	b.n	800efc6 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800ef8e:	1dfb      	adds	r3, r7, #7
 800ef90:	781a      	ldrb	r2, [r3, #0]
 800ef92:	4919      	ldr	r1, [pc, #100]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800ef94:	0013      	movs	r3, r2
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	1a9b      	subs	r3, r3, r2
 800ef9a:	00db      	lsls	r3, r3, #3
 800ef9c:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800ef9e:	1dfb      	adds	r3, r7, #7
 800efa0:	781a      	ldrb	r2, [r3, #0]
 800efa2:	4915      	ldr	r1, [pc, #84]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800efa4:	0013      	movs	r3, r2
 800efa6:	00db      	lsls	r3, r3, #3
 800efa8:	1a9b      	subs	r3, r3, r2
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	18cb      	adds	r3, r1, r3
 800efae:	3334      	adds	r3, #52	; 0x34
 800efb0:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d102      	bne.n	800efbc <USBPDM1_AssertRp+0x128>
 800efb6:	2380      	movs	r3, #128	; 0x80
 800efb8:	00db      	lsls	r3, r3, #3
 800efba:	e001      	b.n	800efc0 <USBPDM1_AssertRp+0x12c>
 800efbc:	2380      	movs	r3, #128	; 0x80
 800efbe:	011b      	lsls	r3, r3, #4
 800efc0:	0019      	movs	r1, r3
 800efc2:	f7ff fcf1 	bl	800e9a8 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800efc6:	4b0d      	ldr	r3, [pc, #52]	; (800effc <USBPDM1_AssertRp+0x168>)
 800efc8:	6819      	ldr	r1, [r3, #0]
 800efca:	1dfb      	adds	r3, r7, #7
 800efcc:	781a      	ldrb	r2, [r3, #0]
 800efce:	480a      	ldr	r0, [pc, #40]	; (800eff8 <USBPDM1_AssertRp+0x164>)
 800efd0:	0013      	movs	r3, r2
 800efd2:	00db      	lsls	r3, r3, #3
 800efd4:	1a9b      	subs	r3, r3, r2
 800efd6:	00db      	lsls	r3, r3, #3
 800efd8:	581b      	ldr	r3, [r3, r0]
 800efda:	4a09      	ldr	r2, [pc, #36]	; (800f000 <USBPDM1_AssertRp+0x16c>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d102      	bne.n	800efe6 <USBPDM1_AssertRp+0x152>
 800efe0:	2380      	movs	r3, #128	; 0x80
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	e001      	b.n	800efea <USBPDM1_AssertRp+0x156>
 800efe6:	2380      	movs	r3, #128	; 0x80
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	4a04      	ldr	r2, [pc, #16]	; (800effc <USBPDM1_AssertRp+0x168>)
 800efec:	430b      	orrs	r3, r1
 800efee:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 800eff0:	46c0      	nop			; (mov r8, r8)
 800eff2:	46bd      	mov	sp, r7
 800eff4:	b002      	add	sp, #8
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20010620 	.word	0x20010620
 800effc:	40010000 	.word	0x40010000
 800f000:	4000a000 	.word	0x4000a000

0800f004 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	0002      	movs	r2, r0
 800f00c:	1dfb      	adds	r3, r7, #7
 800f00e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f010:	46c0      	nop			; (mov r8, r8)
 800f012:	46bd      	mov	sp, r7
 800f014:	b002      	add	sp, #8
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	0002      	movs	r2, r0
 800f020:	1dfb      	adds	r3, r7, #7
 800f022:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800f024:	1dfb      	adds	r3, r7, #7
 800f026:	781a      	ldrb	r2, [r3, #0]
 800f028:	494b      	ldr	r1, [pc, #300]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f02a:	0013      	movs	r3, r2
 800f02c:	00db      	lsls	r3, r3, #3
 800f02e:	1a9b      	subs	r3, r3, r2
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	585b      	ldr	r3, [r3, r1]
 800f034:	0018      	movs	r0, r3
 800f036:	f7ff fc59 	bl	800e8ec <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800f03a:	1dfb      	adds	r3, r7, #7
 800f03c:	781a      	ldrb	r2, [r3, #0]
 800f03e:	4946      	ldr	r1, [pc, #280]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f040:	0013      	movs	r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	1a9b      	subs	r3, r3, r2
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	585b      	ldr	r3, [r3, r1]
 800f04a:	0018      	movs	r0, r3
 800f04c:	f7ff fc6e 	bl	800e92c <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f050:	2001      	movs	r0, #1
 800f052:	f7ff fc07 	bl	800e864 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f056:	1dfb      	adds	r3, r7, #7
 800f058:	781a      	ldrb	r2, [r3, #0]
 800f05a:	493f      	ldr	r1, [pc, #252]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f05c:	0013      	movs	r3, r2
 800f05e:	00db      	lsls	r3, r3, #3
 800f060:	1a9b      	subs	r3, r3, r2
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	585b      	ldr	r3, [r3, r1]
 800f066:	2100      	movs	r1, #0
 800f068:	0018      	movs	r0, r3
 800f06a:	f7ff fc9d 	bl	800e9a8 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800f06e:	1dfb      	adds	r3, r7, #7
 800f070:	781a      	ldrb	r2, [r3, #0]
 800f072:	4939      	ldr	r1, [pc, #228]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f074:	0013      	movs	r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	1a9b      	subs	r3, r3, r2
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	585b      	ldr	r3, [r3, r1]
 800f07e:	0018      	movs	r0, r3
 800f080:	f7ff fca6 	bl	800e9d0 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800f084:	1dfb      	adds	r3, r7, #7
 800f086:	781a      	ldrb	r2, [r3, #0]
 800f088:	4933      	ldr	r1, [pc, #204]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f08a:	0013      	movs	r3, r2
 800f08c:	00db      	lsls	r3, r3, #3
 800f08e:	1a9b      	subs	r3, r3, r2
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	18cb      	adds	r3, r1, r3
 800f094:	3334      	adds	r3, #52	; 0x34
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10e      	bne.n	800f0ba <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f09c:	1dfb      	adds	r3, r7, #7
 800f09e:	781a      	ldrb	r2, [r3, #0]
 800f0a0:	492d      	ldr	r1, [pc, #180]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f0a2:	0013      	movs	r3, r2
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	585b      	ldr	r3, [r3, r1]
 800f0ac:	22c0      	movs	r2, #192	; 0xc0
 800f0ae:	0112      	lsls	r2, r2, #4
 800f0b0:	0011      	movs	r1, r2
 800f0b2:	0018      	movs	r0, r3
 800f0b4:	f7ff fc78 	bl	800e9a8 <LL_UCPD_SetccEnable>
 800f0b8:	e01b      	b.n	800f0f2 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f0ba:	1dfb      	adds	r3, r7, #7
 800f0bc:	781a      	ldrb	r2, [r3, #0]
 800f0be:	4926      	ldr	r1, [pc, #152]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f0c0:	0013      	movs	r3, r2
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f0ca:	1dfb      	adds	r3, r7, #7
 800f0cc:	781a      	ldrb	r2, [r3, #0]
 800f0ce:	4922      	ldr	r1, [pc, #136]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f0d0:	0013      	movs	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	1a9b      	subs	r3, r3, r2
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	18cb      	adds	r3, r1, r3
 800f0da:	3334      	adds	r3, #52	; 0x34
 800f0dc:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d102      	bne.n	800f0e8 <USBPDM1_AssertRd+0xd0>
 800f0e2:	2380      	movs	r3, #128	; 0x80
 800f0e4:	00db      	lsls	r3, r3, #3
 800f0e6:	e001      	b.n	800f0ec <USBPDM1_AssertRd+0xd4>
 800f0e8:	2380      	movs	r3, #128	; 0x80
 800f0ea:	011b      	lsls	r3, r3, #4
 800f0ec:	0019      	movs	r1, r3
 800f0ee:	f7ff fc5b 	bl	800e9a8 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f0f2:	4b1a      	ldr	r3, [pc, #104]	; (800f15c <USBPDM1_AssertRd+0x144>)
 800f0f4:	6819      	ldr	r1, [r3, #0]
 800f0f6:	1dfb      	adds	r3, r7, #7
 800f0f8:	781a      	ldrb	r2, [r3, #0]
 800f0fa:	4817      	ldr	r0, [pc, #92]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f0fc:	0013      	movs	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	1a9b      	subs	r3, r3, r2
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	581b      	ldr	r3, [r3, r0]
 800f106:	4a16      	ldr	r2, [pc, #88]	; (800f160 <USBPDM1_AssertRd+0x148>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d102      	bne.n	800f112 <USBPDM1_AssertRd+0xfa>
 800f10c:	2380      	movs	r3, #128	; 0x80
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	e001      	b.n	800f116 <USBPDM1_AssertRd+0xfe>
 800f112:	2380      	movs	r3, #128	; 0x80
 800f114:	00db      	lsls	r3, r3, #3
 800f116:	4a11      	ldr	r2, [pc, #68]	; (800f15c <USBPDM1_AssertRd+0x144>)
 800f118:	430b      	orrs	r3, r1
 800f11a:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 800f11c:	2001      	movs	r0, #1
 800f11e:	f7f8 f9d5 	bl	80074cc <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800f122:	1dfb      	adds	r3, r7, #7
 800f124:	781a      	ldrb	r2, [r3, #0]
 800f126:	490c      	ldr	r1, [pc, #48]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f128:	0013      	movs	r3, r2
 800f12a:	00db      	lsls	r3, r3, #3
 800f12c:	1a9b      	subs	r3, r3, r2
 800f12e:	00db      	lsls	r3, r3, #3
 800f130:	585b      	ldr	r3, [r3, r1]
 800f132:	0018      	movs	r0, r3
 800f134:	f7ff fbca 	bl	800e8cc <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800f138:	1dfb      	adds	r3, r7, #7
 800f13a:	781a      	ldrb	r2, [r3, #0]
 800f13c:	4906      	ldr	r1, [pc, #24]	; (800f158 <USBPDM1_AssertRd+0x140>)
 800f13e:	0013      	movs	r3, r2
 800f140:	00db      	lsls	r3, r3, #3
 800f142:	1a9b      	subs	r3, r3, r2
 800f144:	00db      	lsls	r3, r3, #3
 800f146:	585b      	ldr	r3, [r3, r1]
 800f148:	0018      	movs	r0, r3
 800f14a:	f7ff fbdf 	bl	800e90c <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 800f14e:	46c0      	nop			; (mov r8, r8)
 800f150:	46bd      	mov	sp, r7
 800f152:	b002      	add	sp, #8
 800f154:	bd80      	pop	{r7, pc}
 800f156:	46c0      	nop			; (mov r8, r8)
 800f158:	20010620 	.word	0x20010620
 800f15c:	40010000 	.word	0x40010000
 800f160:	4000a000 	.word	0x4000a000

0800f164 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	0002      	movs	r2, r0
 800f16c:	1dfb      	adds	r3, r7, #7
 800f16e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f170:	46c0      	nop			; (mov r8, r8)
 800f172:	46bd      	mov	sp, r7
 800f174:	b002      	add	sp, #8
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	0002      	movs	r2, r0
 800f180:	1dfb      	adds	r3, r7, #7
 800f182:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f184:	2001      	movs	r0, #1
 800f186:	f7ff fb6d 	bl	800e864 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800f18a:	1dfb      	adds	r3, r7, #7
 800f18c:	781a      	ldrb	r2, [r3, #0]
 800f18e:	4930      	ldr	r1, [pc, #192]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f190:	0013      	movs	r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	1a9b      	subs	r3, r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	585b      	ldr	r3, [r3, r1]
 800f19a:	0018      	movs	r0, r3
 800f19c:	f7ff fc28 	bl	800e9f0 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800f1a0:	1dfb      	adds	r3, r7, #7
 800f1a2:	781a      	ldrb	r2, [r3, #0]
 800f1a4:	492a      	ldr	r1, [pc, #168]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f1a6:	0013      	movs	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	1a9b      	subs	r3, r3, r2
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	585b      	ldr	r3, [r3, r1]
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f7ff fc2c 	bl	800ea10 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f1b8:	1dfb      	adds	r3, r7, #7
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	4924      	ldr	r1, [pc, #144]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f1be:	0013      	movs	r3, r2
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	1a9b      	subs	r3, r3, r2
 800f1c4:	00db      	lsls	r3, r3, #3
 800f1c6:	585b      	ldr	r3, [r3, r1]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	0018      	movs	r0, r3
 800f1cc:	f7ff fbec 	bl	800e9a8 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f1d0:	4b20      	ldr	r3, [pc, #128]	; (800f254 <USBPDM1_EnterErrorRecovery+0xdc>)
 800f1d2:	6819      	ldr	r1, [r3, #0]
 800f1d4:	1dfb      	adds	r3, r7, #7
 800f1d6:	781a      	ldrb	r2, [r3, #0]
 800f1d8:	481d      	ldr	r0, [pc, #116]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f1da:	0013      	movs	r3, r2
 800f1dc:	00db      	lsls	r3, r3, #3
 800f1de:	1a9b      	subs	r3, r3, r2
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	581b      	ldr	r3, [r3, r0]
 800f1e4:	4a1c      	ldr	r2, [pc, #112]	; (800f258 <USBPDM1_EnterErrorRecovery+0xe0>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d102      	bne.n	800f1f0 <USBPDM1_EnterErrorRecovery+0x78>
 800f1ea:	2380      	movs	r3, #128	; 0x80
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	e001      	b.n	800f1f4 <USBPDM1_EnterErrorRecovery+0x7c>
 800f1f0:	2380      	movs	r3, #128	; 0x80
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	4a17      	ldr	r2, [pc, #92]	; (800f254 <USBPDM1_EnterErrorRecovery+0xdc>)
 800f1f6:	430b      	orrs	r3, r1
 800f1f8:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f1fa:	1dfb      	adds	r3, r7, #7
 800f1fc:	781a      	ldrb	r2, [r3, #0]
 800f1fe:	4914      	ldr	r1, [pc, #80]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f200:	0013      	movs	r3, r2
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	1a9b      	subs	r3, r3, r2
 800f206:	00db      	lsls	r3, r3, #3
 800f208:	585b      	ldr	r3, [r3, r1]
 800f20a:	0018      	movs	r0, r3
 800f20c:	f7ff fc34 	bl	800ea78 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f210:	1dfb      	adds	r3, r7, #7
 800f212:	781a      	ldrb	r2, [r3, #0]
 800f214:	490e      	ldr	r1, [pc, #56]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f216:	0013      	movs	r3, r2
 800f218:	00db      	lsls	r3, r3, #3
 800f21a:	1a9b      	subs	r3, r3, r2
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	18cb      	adds	r3, r1, r3
 800f220:	330c      	adds	r3, #12
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	7a1b      	ldrb	r3, [r3, #8]
 800f226:	2202      	movs	r2, #2
 800f228:	4013      	ands	r3, r2
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00a      	beq.n	800f246 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800f230:	1dfb      	adds	r3, r7, #7
 800f232:	781a      	ldrb	r2, [r3, #0]
 800f234:	4906      	ldr	r1, [pc, #24]	; (800f250 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f236:	0013      	movs	r3, r2
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	1a9b      	subs	r3, r3, r2
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	585b      	ldr	r3, [r3, r1]
 800f240:	0018      	movs	r0, r3
 800f242:	f7ff fba1 	bl	800e988 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 800f246:	46c0      	nop			; (mov r8, r8)
 800f248:	46bd      	mov	sp, r7
 800f24a:	b002      	add	sp, #8
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	46c0      	nop			; (mov r8, r8)
 800f250:	20010620 	.word	0x20010620
 800f254:	40010000 	.word	0x40010000
 800f258:	4000a000 	.word	0x4000a000

0800f25c <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	0002      	movs	r2, r0
 800f264:	1dfb      	adds	r3, r7, #7
 800f266:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800f268:	1dfb      	adds	r3, r7, #7
 800f26a:	781a      	ldrb	r2, [r3, #0]
 800f26c:	4906      	ldr	r1, [pc, #24]	; (800f288 <USBPD_HW_IF_EnableRX+0x2c>)
 800f26e:	0013      	movs	r3, r2
 800f270:	00db      	lsls	r3, r3, #3
 800f272:	1a9b      	subs	r3, r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	585b      	ldr	r3, [r3, r1]
 800f278:	0018      	movs	r0, r3
 800f27a:	f7ff fbef 	bl	800ea5c <LL_UCPD_RxEnable>
}
 800f27e:	46c0      	nop			; (mov r8, r8)
 800f280:	46bd      	mov	sp, r7
 800f282:	b002      	add	sp, #8
 800f284:	bd80      	pop	{r7, pc}
 800f286:	46c0      	nop			; (mov r8, r8)
 800f288:	20010620 	.word	0x20010620

0800f28c <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	0002      	movs	r2, r0
 800f294:	1dfb      	adds	r3, r7, #7
 800f296:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f298:	1dfb      	adds	r3, r7, #7
 800f29a:	781a      	ldrb	r2, [r3, #0]
 800f29c:	4906      	ldr	r1, [pc, #24]	; (800f2b8 <USBPD_HW_IF_DisableRX+0x2c>)
 800f29e:	0013      	movs	r3, r2
 800f2a0:	00db      	lsls	r3, r3, #3
 800f2a2:	1a9b      	subs	r3, r3, r2
 800f2a4:	00db      	lsls	r3, r3, #3
 800f2a6:	585b      	ldr	r3, [r3, r1]
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	f7ff fbe5 	bl	800ea78 <LL_UCPD_RxDisable>
}
 800f2ae:	46c0      	nop			; (mov r8, r8)
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	b002      	add	sp, #8
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	46c0      	nop			; (mov r8, r8)
 800f2b8:	20010620 	.word	0x20010620

0800f2bc <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	0002      	movs	r2, r0
 800f2c4:	6039      	str	r1, [r7, #0]
 800f2c6:	1dfb      	adds	r3, r7, #7
 800f2c8:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800f2ca:	f000 fc51 	bl	800fb70 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800f2ce:	1dfb      	adds	r3, r7, #7
 800f2d0:	781c      	ldrb	r4, [r3, #0]
 800f2d2:	1dfb      	adds	r3, r7, #7
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	0018      	movs	r0, r3
 800f2d8:	f7fe fddc 	bl	800de94 <USBPD_HW_Init_DMATxInstance>
 800f2dc:	0001      	movs	r1, r0
 800f2de:	4aa6      	ldr	r2, [pc, #664]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f2e0:	0023      	movs	r3, r4
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	1b1b      	subs	r3, r3, r4
 800f2e6:	00db      	lsls	r3, r3, #3
 800f2e8:	18d3      	adds	r3, r2, r3
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800f2ee:	1dfb      	adds	r3, r7, #7
 800f2f0:	781c      	ldrb	r4, [r3, #0]
 800f2f2:	1dfb      	adds	r3, r7, #7
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	0018      	movs	r0, r3
 800f2f8:	f7fe fd7c 	bl	800ddf4 <USBPD_HW_Init_DMARxInstance>
 800f2fc:	0001      	movs	r1, r0
 800f2fe:	4a9e      	ldr	r2, [pc, #632]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f300:	0023      	movs	r3, r4
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	1b1b      	subs	r3, r3, r4
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	18d3      	adds	r3, r2, r3
 800f30a:	3308      	adds	r3, #8
 800f30c:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800f30e:	1dfb      	adds	r3, r7, #7
 800f310:	781a      	ldrb	r2, [r3, #0]
 800f312:	4999      	ldr	r1, [pc, #612]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f314:	0013      	movs	r3, r2
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	1a9b      	subs	r3, r3, r2
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	585b      	ldr	r3, [r3, r1]
 800f31e:	3330      	adds	r3, #48	; 0x30
 800f320:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800f322:	1dfb      	adds	r3, r7, #7
 800f324:	781a      	ldrb	r2, [r3, #0]
 800f326:	4994      	ldr	r1, [pc, #592]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f328:	0013      	movs	r3, r2
 800f32a:	00db      	lsls	r3, r3, #3
 800f32c:	1a9b      	subs	r3, r3, r2
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	18cb      	adds	r3, r1, r3
 800f332:	3308      	adds	r3, #8
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800f33a:	1dfb      	adds	r3, r7, #7
 800f33c:	781a      	ldrb	r2, [r3, #0]
 800f33e:	498e      	ldr	r1, [pc, #568]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f340:	0013      	movs	r3, r2
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	1a9b      	subs	r3, r3, r2
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	18cb      	adds	r3, r1, r3
 800f34a:	3330      	adds	r3, #48	; 0x30
 800f34c:	6818      	ldr	r0, [r3, #0]
 800f34e:	1dfb      	adds	r3, r7, #7
 800f350:	781a      	ldrb	r2, [r3, #0]
 800f352:	4989      	ldr	r1, [pc, #548]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f354:	0013      	movs	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	1a9b      	subs	r3, r3, r2
 800f35a:	00db      	lsls	r3, r3, #3
 800f35c:	18cb      	adds	r3, r1, r3
 800f35e:	3308      	adds	r3, #8
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	0002      	movs	r2, r0
 800f364:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800f366:	1dfb      	adds	r3, r7, #7
 800f368:	781a      	ldrb	r2, [r3, #0]
 800f36a:	4983      	ldr	r1, [pc, #524]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f36c:	0013      	movs	r3, r2
 800f36e:	00db      	lsls	r3, r3, #3
 800f370:	1a9b      	subs	r3, r3, r2
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	18cb      	adds	r3, r1, r3
 800f376:	3308      	adds	r3, #8
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2284      	movs	r2, #132	; 0x84
 800f37c:	0052      	lsls	r2, r2, #1
 800f37e:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800f380:	1dfb      	adds	r3, r7, #7
 800f382:	781a      	ldrb	r2, [r3, #0]
 800f384:	497c      	ldr	r1, [pc, #496]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f386:	0013      	movs	r3, r2
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	00db      	lsls	r3, r3, #3
 800f38e:	18cb      	adds	r3, r1, r3
 800f390:	3308      	adds	r3, #8
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6819      	ldr	r1, [r3, #0]
 800f396:	1dfb      	adds	r3, r7, #7
 800f398:	781a      	ldrb	r2, [r3, #0]
 800f39a:	4877      	ldr	r0, [pc, #476]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f39c:	0013      	movs	r3, r2
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	1a9b      	subs	r3, r3, r2
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	18c3      	adds	r3, r0, r3
 800f3a6:	3308      	adds	r3, #8
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800f3b0:	1dfb      	adds	r3, r7, #7
 800f3b2:	781a      	ldrb	r2, [r3, #0]
 800f3b4:	4970      	ldr	r1, [pc, #448]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f3b6:	0013      	movs	r3, r2
 800f3b8:	00db      	lsls	r3, r3, #3
 800f3ba:	1a9b      	subs	r3, r3, r2
 800f3bc:	00db      	lsls	r3, r3, #3
 800f3be:	585b      	ldr	r3, [r3, r1]
 800f3c0:	3324      	adds	r3, #36	; 0x24
 800f3c2:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800f3c4:	1dfb      	adds	r3, r7, #7
 800f3c6:	781a      	ldrb	r2, [r3, #0]
 800f3c8:	496b      	ldr	r1, [pc, #428]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f3ca:	0013      	movs	r3, r2
 800f3cc:	00db      	lsls	r3, r3, #3
 800f3ce:	1a9b      	subs	r3, r3, r2
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	18cb      	adds	r3, r1, r3
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800f3dc:	1dfb      	adds	r3, r7, #7
 800f3de:	781a      	ldrb	r2, [r3, #0]
 800f3e0:	4965      	ldr	r1, [pc, #404]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f3e2:	0013      	movs	r3, r2
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	1a9b      	subs	r3, r3, r2
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	585b      	ldr	r3, [r3, r1]
 800f3ec:	6919      	ldr	r1, [r3, #16]
 800f3ee:	1dfb      	adds	r3, r7, #7
 800f3f0:	781a      	ldrb	r2, [r3, #0]
 800f3f2:	4861      	ldr	r0, [pc, #388]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f3f4:	0013      	movs	r3, r2
 800f3f6:	00db      	lsls	r3, r3, #3
 800f3f8:	1a9b      	subs	r3, r3, r2
 800f3fa:	00db      	lsls	r3, r3, #3
 800f3fc:	581b      	ldr	r3, [r3, r0]
 800f3fe:	4a5f      	ldr	r2, [pc, #380]	; (800f57c <HW_SignalAttachement+0x2c0>)
 800f400:	430a      	orrs	r2, r1
 800f402:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800f404:	1dfb      	adds	r3, r7, #7
 800f406:	781a      	ldrb	r2, [r3, #0]
 800f408:	495b      	ldr	r1, [pc, #364]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f40a:	0013      	movs	r3, r2
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	1a9b      	subs	r3, r3, r2
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	18cb      	adds	r3, r1, r3
 800f414:	3334      	adds	r3, #52	; 0x34
 800f416:	683a      	ldr	r2, [r7, #0]
 800f418:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800f41a:	1dfb      	adds	r3, r7, #7
 800f41c:	781a      	ldrb	r2, [r3, #0]
 800f41e:	4956      	ldr	r1, [pc, #344]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f420:	0013      	movs	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	1a9b      	subs	r3, r3, r2
 800f426:	00db      	lsls	r3, r3, #3
 800f428:	5858      	ldr	r0, [r3, r1]
 800f42a:	1dfb      	adds	r3, r7, #7
 800f42c:	781a      	ldrb	r2, [r3, #0]
 800f42e:	4952      	ldr	r1, [pc, #328]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f430:	0013      	movs	r3, r2
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	1a9b      	subs	r3, r3, r2
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	18cb      	adds	r3, r1, r3
 800f43a:	3334      	adds	r3, #52	; 0x34
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d101      	bne.n	800f446 <HW_SignalAttachement+0x18a>
 800f442:	2300      	movs	r3, #0
 800f444:	e000      	b.n	800f448 <HW_SignalAttachement+0x18c>
 800f446:	2340      	movs	r3, #64	; 0x40
 800f448:	0019      	movs	r1, r3
 800f44a:	f7ff faf5 	bl	800ea38 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f44e:	1dfb      	adds	r3, r7, #7
 800f450:	781a      	ldrb	r2, [r3, #0]
 800f452:	4949      	ldr	r1, [pc, #292]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f454:	0013      	movs	r3, r2
 800f456:	00db      	lsls	r3, r3, #3
 800f458:	1a9b      	subs	r3, r3, r2
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	18cb      	adds	r3, r1, r3
 800f45e:	330c      	adds	r3, #12
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	7a1b      	ldrb	r3, [r3, #8]
 800f464:	2202      	movs	r2, #2
 800f466:	4013      	ands	r3, r2
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d034      	beq.n	800f4d8 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800f46e:	1dfb      	adds	r3, r7, #7
 800f470:	781a      	ldrb	r2, [r3, #0]
 800f472:	4941      	ldr	r1, [pc, #260]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f474:	0013      	movs	r3, r2
 800f476:	00db      	lsls	r3, r3, #3
 800f478:	1a9b      	subs	r3, r3, r2
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	18cb      	adds	r3, r1, r3
 800f47e:	3334      	adds	r3, #52	; 0x34
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d101      	bne.n	800f48a <HW_SignalAttachement+0x1ce>
 800f486:	2301      	movs	r3, #1
 800f488:	e000      	b.n	800f48c <HW_SignalAttachement+0x1d0>
 800f48a:	2302      	movs	r3, #2
 800f48c:	1dfa      	adds	r2, r7, #7
 800f48e:	7812      	ldrb	r2, [r2, #0]
 800f490:	0019      	movs	r1, r3
 800f492:	0010      	movs	r0, r2
 800f494:	f7fe fd4e 	bl	800df34 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800f498:	1dfb      	adds	r3, r7, #7
 800f49a:	781a      	ldrb	r2, [r3, #0]
 800f49c:	4936      	ldr	r1, [pc, #216]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f49e:	0013      	movs	r3, r2
 800f4a0:	00db      	lsls	r3, r3, #3
 800f4a2:	1a9b      	subs	r3, r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	585b      	ldr	r3, [r3, r1]
 800f4a8:	0018      	movs	r0, r3
 800f4aa:	f7ff fa5d 	bl	800e968 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800f4ae:	1dfb      	adds	r3, r7, #7
 800f4b0:	781a      	ldrb	r2, [r3, #0]
 800f4b2:	4931      	ldr	r1, [pc, #196]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f4b4:	0013      	movs	r3, r2
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	1a9b      	subs	r3, r3, r2
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	585b      	ldr	r3, [r3, r1]
 800f4be:	6919      	ldr	r1, [r3, #16]
 800f4c0:	1dfb      	adds	r3, r7, #7
 800f4c2:	781a      	ldrb	r2, [r3, #0]
 800f4c4:	482c      	ldr	r0, [pc, #176]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f4c6:	0013      	movs	r3, r2
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	1a9b      	subs	r3, r3, r2
 800f4cc:	00db      	lsls	r3, r3, #3
 800f4ce:	581b      	ldr	r3, [r3, r0]
 800f4d0:	2280      	movs	r2, #128	; 0x80
 800f4d2:	0352      	lsls	r2, r2, #13
 800f4d4:	430a      	orrs	r2, r1
 800f4d6:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 800f4d8:	1dfb      	adds	r3, r7, #7
 800f4da:	781a      	ldrb	r2, [r3, #0]
 800f4dc:	4926      	ldr	r1, [pc, #152]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f4de:	0013      	movs	r3, r2
 800f4e0:	00db      	lsls	r3, r3, #3
 800f4e2:	1a9b      	subs	r3, r3, r2
 800f4e4:	00db      	lsls	r3, r3, #3
 800f4e6:	18cb      	adds	r3, r1, r3
 800f4e8:	3334      	adds	r3, #52	; 0x34
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d10e      	bne.n	800f50e <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 800f4f0:	1dfb      	adds	r3, r7, #7
 800f4f2:	781a      	ldrb	r2, [r3, #0]
 800f4f4:	4920      	ldr	r1, [pc, #128]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f4f6:	0013      	movs	r3, r2
 800f4f8:	00db      	lsls	r3, r3, #3
 800f4fa:	1a9b      	subs	r3, r3, r2
 800f4fc:	00db      	lsls	r3, r3, #3
 800f4fe:	585b      	ldr	r3, [r3, r1]
 800f500:	2280      	movs	r2, #128	; 0x80
 800f502:	00d2      	lsls	r2, r2, #3
 800f504:	0011      	movs	r1, r2
 800f506:	0018      	movs	r0, r3
 800f508:	f7ff fa4e 	bl	800e9a8 <LL_UCPD_SetccEnable>
 800f50c:	e00d      	b.n	800f52a <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800f50e:	1dfb      	adds	r3, r7, #7
 800f510:	781a      	ldrb	r2, [r3, #0]
 800f512:	4919      	ldr	r1, [pc, #100]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f514:	0013      	movs	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	1a9b      	subs	r3, r3, r2
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	585b      	ldr	r3, [r3, r1]
 800f51e:	2280      	movs	r2, #128	; 0x80
 800f520:	0112      	lsls	r2, r2, #4
 800f522:	0011      	movs	r1, r2
 800f524:	0018      	movs	r0, r3
 800f526:	f7ff fa3f 	bl	800e9a8 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800f52a:	1dfb      	adds	r3, r7, #7
 800f52c:	781a      	ldrb	r2, [r3, #0]
 800f52e:	4912      	ldr	r1, [pc, #72]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f530:	0013      	movs	r3, r2
 800f532:	00db      	lsls	r3, r3, #3
 800f534:	1a9b      	subs	r3, r3, r2
 800f536:	00db      	lsls	r3, r3, #3
 800f538:	585b      	ldr	r3, [r3, r1]
 800f53a:	2100      	movs	r1, #0
 800f53c:	0018      	movs	r0, r3
 800f53e:	f7ff faaa 	bl	800ea96 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800f542:	1dfb      	adds	r3, r7, #7
 800f544:	781a      	ldrb	r2, [r3, #0]
 800f546:	490c      	ldr	r1, [pc, #48]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f548:	0013      	movs	r3, r2
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	1a9b      	subs	r3, r3, r2
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	585b      	ldr	r3, [r3, r1]
 800f552:	0018      	movs	r0, r3
 800f554:	f7ff fadf 	bl	800eb16 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800f558:	1dfb      	adds	r3, r7, #7
 800f55a:	781a      	ldrb	r2, [r3, #0]
 800f55c:	4906      	ldr	r1, [pc, #24]	; (800f578 <HW_SignalAttachement+0x2bc>)
 800f55e:	0013      	movs	r3, r2
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	1a9b      	subs	r3, r3, r2
 800f564:	00db      	lsls	r3, r3, #3
 800f566:	585b      	ldr	r3, [r3, r1]
 800f568:	0018      	movs	r0, r3
 800f56a:	f7ff faf3 	bl	800eb54 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800f56e:	46c0      	nop			; (mov r8, r8)
 800f570:	46bd      	mov	sp, r7
 800f572:	b005      	add	sp, #20
 800f574:	bd90      	pop	{r4, r7, pc}
 800f576:	46c0      	nop			; (mov r8, r8)
 800f578:	20010620 	.word	0x20010620
 800f57c:	00001e7e 	.word	0x00001e7e

0800f580 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	0002      	movs	r2, r0
 800f588:	1dfb      	adds	r3, r7, #7
 800f58a:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800f58c:	1dfb      	adds	r3, r7, #7
 800f58e:	781a      	ldrb	r2, [r3, #0]
 800f590:	4941      	ldr	r1, [pc, #260]	; (800f698 <HW_SignalDetachment+0x118>)
 800f592:	0013      	movs	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	1a9b      	subs	r3, r3, r2
 800f598:	00db      	lsls	r3, r3, #3
 800f59a:	585b      	ldr	r3, [r3, r1]
 800f59c:	0018      	movs	r0, r3
 800f59e:	f7ff fac9 	bl	800eb34 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800f5a2:	1dfb      	adds	r3, r7, #7
 800f5a4:	781a      	ldrb	r2, [r3, #0]
 800f5a6:	493c      	ldr	r1, [pc, #240]	; (800f698 <HW_SignalDetachment+0x118>)
 800f5a8:	0013      	movs	r3, r2
 800f5aa:	00db      	lsls	r3, r3, #3
 800f5ac:	1a9b      	subs	r3, r3, r2
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	585b      	ldr	r3, [r3, r1]
 800f5b2:	0018      	movs	r0, r3
 800f5b4:	f7ff fade 	bl	800eb74 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f5b8:	1dfb      	adds	r3, r7, #7
 800f5ba:	781a      	ldrb	r2, [r3, #0]
 800f5bc:	4936      	ldr	r1, [pc, #216]	; (800f698 <HW_SignalDetachment+0x118>)
 800f5be:	0013      	movs	r3, r2
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	1a9b      	subs	r3, r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	585b      	ldr	r3, [r3, r1]
 800f5c8:	0018      	movs	r0, r3
 800f5ca:	f7ff fa55 	bl	800ea78 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800f5ce:	1dfb      	adds	r3, r7, #7
 800f5d0:	781a      	ldrb	r2, [r3, #0]
 800f5d2:	4931      	ldr	r1, [pc, #196]	; (800f698 <HW_SignalDetachment+0x118>)
 800f5d4:	0013      	movs	r3, r2
 800f5d6:	00db      	lsls	r3, r3, #3
 800f5d8:	1a9b      	subs	r3, r3, r2
 800f5da:	00db      	lsls	r3, r3, #3
 800f5dc:	585b      	ldr	r3, [r3, r1]
 800f5de:	22c0      	movs	r2, #192	; 0xc0
 800f5e0:	0212      	lsls	r2, r2, #8
 800f5e2:	611a      	str	r2, [r3, #16]
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800f5e4:	1dfb      	adds	r3, r7, #7
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	0018      	movs	r0, r3
 800f5ea:	f7fe fc99 	bl	800df20 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800f5ee:	1dfb      	adds	r3, r7, #7
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	0018      	movs	r0, r3
 800f5f4:	f7fe fc44 	bl	800de80 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f5f8:	1dfb      	adds	r3, r7, #7
 800f5fa:	781a      	ldrb	r2, [r3, #0]
 800f5fc:	4926      	ldr	r1, [pc, #152]	; (800f698 <HW_SignalDetachment+0x118>)
 800f5fe:	0013      	movs	r3, r2
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	1a9b      	subs	r3, r3, r2
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	585b      	ldr	r3, [r3, r1]
 800f608:	22c0      	movs	r2, #192	; 0xc0
 800f60a:	0112      	lsls	r2, r2, #4
 800f60c:	0011      	movs	r1, r2
 800f60e:	0018      	movs	r0, r3
 800f610:	f7ff f9ca 	bl	800e9a8 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800f614:	1dfb      	adds	r3, r7, #7
 800f616:	781a      	ldrb	r2, [r3, #0]
 800f618:	491f      	ldr	r1, [pc, #124]	; (800f698 <HW_SignalDetachment+0x118>)
 800f61a:	0013      	movs	r3, r2
 800f61c:	00db      	lsls	r3, r3, #3
 800f61e:	1a9b      	subs	r3, r3, r2
 800f620:	00db      	lsls	r3, r3, #3
 800f622:	18cb      	adds	r3, r1, r3
 800f624:	3310      	adds	r3, #16
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2204      	movs	r2, #4
 800f62c:	4013      	ands	r3, r2
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b00      	cmp	r3, #0
 800f632:	d104      	bne.n	800f63e <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800f634:	1dfb      	adds	r3, r7, #7
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	0018      	movs	r0, r3
 800f63a:	f009 fcd2 	bl	8018fe2 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f63e:	1dfb      	adds	r3, r7, #7
 800f640:	781a      	ldrb	r2, [r3, #0]
 800f642:	4915      	ldr	r1, [pc, #84]	; (800f698 <HW_SignalDetachment+0x118>)
 800f644:	0013      	movs	r3, r2
 800f646:	00db      	lsls	r3, r3, #3
 800f648:	1a9b      	subs	r3, r3, r2
 800f64a:	00db      	lsls	r3, r3, #3
 800f64c:	18cb      	adds	r3, r1, r3
 800f64e:	330c      	adds	r3, #12
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	7a1b      	ldrb	r3, [r3, #8]
 800f654:	2202      	movs	r2, #2
 800f656:	4013      	ands	r3, r2
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00a      	beq.n	800f674 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800f65e:	1dfb      	adds	r3, r7, #7
 800f660:	781a      	ldrb	r2, [r3, #0]
 800f662:	490d      	ldr	r1, [pc, #52]	; (800f698 <HW_SignalDetachment+0x118>)
 800f664:	0013      	movs	r3, r2
 800f666:	00db      	lsls	r3, r3, #3
 800f668:	1a9b      	subs	r3, r3, r2
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	585b      	ldr	r3, [r3, r1]
 800f66e:	0018      	movs	r0, r3
 800f670:	f7ff f98a 	bl	800e988 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 800f674:	1dfb      	adds	r3, r7, #7
 800f676:	781a      	ldrb	r2, [r3, #0]
 800f678:	4907      	ldr	r1, [pc, #28]	; (800f698 <HW_SignalDetachment+0x118>)
 800f67a:	0013      	movs	r3, r2
 800f67c:	00db      	lsls	r3, r3, #3
 800f67e:	1a9b      	subs	r3, r3, r2
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	18cb      	adds	r3, r1, r3
 800f684:	3334      	adds	r3, #52	; 0x34
 800f686:	2200      	movs	r2, #0
 800f688:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800f68a:	f000 fb11 	bl	800fcb0 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800f68e:	46c0      	nop			; (mov r8, r8)
 800f690:	46bd      	mov	sp, r7
 800f692:	b002      	add	sp, #8
 800f694:	bd80      	pop	{r7, pc}
 800f696:	46c0      	nop			; (mov r8, r8)
 800f698:	20010620 	.word	0x20010620

0800f69c <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	0002      	movs	r2, r0
 800f6a4:	1dfb      	adds	r3, r7, #7
 800f6a6:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800f6a8:	1dfb      	adds	r3, r7, #7
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	4907      	ldr	r1, [pc, #28]	; (800f6cc <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 800f6ae:	0013      	movs	r3, r2
 800f6b0:	00db      	lsls	r3, r3, #3
 800f6b2:	1a9b      	subs	r3, r3, r2
 800f6b4:	00db      	lsls	r3, r3, #3
 800f6b6:	585b      	ldr	r3, [r3, r1]
 800f6b8:	2280      	movs	r2, #128	; 0x80
 800f6ba:	0052      	lsls	r2, r2, #1
 800f6bc:	0011      	movs	r1, r2
 800f6be:	0018      	movs	r0, r3
 800f6c0:	f7ff f9a6 	bl	800ea10 <LL_UCPD_SetRpResistor>
}
 800f6c4:	46c0      	nop			; (mov r8, r8)
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	b002      	add	sp, #8
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	20010620 	.word	0x20010620

0800f6d0 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	0002      	movs	r2, r0
 800f6d8:	1dfb      	adds	r3, r7, #7
 800f6da:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800f6dc:	1dfb      	adds	r3, r7, #7
 800f6de:	781a      	ldrb	r2, [r3, #0]
 800f6e0:	4907      	ldr	r1, [pc, #28]	; (800f700 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 800f6e2:	0013      	movs	r3, r2
 800f6e4:	00db      	lsls	r3, r3, #3
 800f6e6:	1a9b      	subs	r3, r3, r2
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	585b      	ldr	r3, [r3, r1]
 800f6ec:	22c0      	movs	r2, #192	; 0xc0
 800f6ee:	0052      	lsls	r2, r2, #1
 800f6f0:	0011      	movs	r1, r2
 800f6f2:	0018      	movs	r0, r3
 800f6f4:	f7ff f98c 	bl	800ea10 <LL_UCPD_SetRpResistor>
}
 800f6f8:	46c0      	nop			; (mov r8, r8)
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	b002      	add	sp, #8
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	20010620 	.word	0x20010620

0800f704 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	0002      	movs	r2, r0
 800f70c:	1dfb      	adds	r3, r7, #7
 800f70e:	701a      	strb	r2, [r3, #0]
  switch (Ports[PortNum].CCx)
 800f710:	1dfb      	adds	r3, r7, #7
 800f712:	781a      	ldrb	r2, [r3, #0]
 800f714:	491c      	ldr	r1, [pc, #112]	; (800f788 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800f716:	0013      	movs	r3, r2
 800f718:	00db      	lsls	r3, r3, #3
 800f71a:	1a9b      	subs	r3, r3, r2
 800f71c:	00db      	lsls	r3, r3, #3
 800f71e:	18cb      	adds	r3, r1, r3
 800f720:	3334      	adds	r3, #52	; 0x34
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d002      	beq.n	800f72e <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d012      	beq.n	800f752 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800f72c:	e026      	b.n	800f77c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800f72e:	1dfb      	adds	r3, r7, #7
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	4915      	ldr	r1, [pc, #84]	; (800f788 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800f734:	0013      	movs	r3, r2
 800f736:	00db      	lsls	r3, r3, #3
 800f738:	1a9b      	subs	r3, r3, r2
 800f73a:	00db      	lsls	r3, r3, #3
 800f73c:	585b      	ldr	r3, [r3, r1]
 800f73e:	695a      	ldr	r2, [r3, #20]
 800f740:	23c0      	movs	r3, #192	; 0xc0
 800f742:	029b      	lsls	r3, r3, #10
 800f744:	401a      	ands	r2, r3
 800f746:	23c0      	movs	r3, #192	; 0xc0
 800f748:	029b      	lsls	r3, r3, #10
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d113      	bne.n	800f776 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 800f74e:	2301      	movs	r3, #1
 800f750:	e015      	b.n	800f77e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800f752:	1dfb      	adds	r3, r7, #7
 800f754:	781a      	ldrb	r2, [r3, #0]
 800f756:	490c      	ldr	r1, [pc, #48]	; (800f788 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800f758:	0013      	movs	r3, r2
 800f75a:	00db      	lsls	r3, r3, #3
 800f75c:	1a9b      	subs	r3, r3, r2
 800f75e:	00db      	lsls	r3, r3, #3
 800f760:	585b      	ldr	r3, [r3, r1]
 800f762:	695a      	ldr	r2, [r3, #20]
 800f764:	23c0      	movs	r3, #192	; 0xc0
 800f766:	031b      	lsls	r3, r3, #12
 800f768:	401a      	ands	r2, r3
 800f76a:	23c0      	movs	r3, #192	; 0xc0
 800f76c:	031b      	lsls	r3, r3, #12
 800f76e:	429a      	cmp	r2, r3
 800f770:	d103      	bne.n	800f77a <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 800f772:	2301      	movs	r3, #1
 800f774:	e003      	b.n	800f77e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 800f776:	46c0      	nop			; (mov r8, r8)
 800f778:	e000      	b.n	800f77c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 800f77a:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	0018      	movs	r0, r3
 800f780:	46bd      	mov	sp, r7
 800f782:	b002      	add	sp, #8
 800f784:	bd80      	pop	{r7, pc}
 800f786:	46c0      	nop			; (mov r8, r8)
 800f788:	20010620 	.word	0x20010620

0800f78c <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	0002      	movs	r2, r0
 800f794:	1dfb      	adds	r3, r7, #7
 800f796:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 800f798:	1dfb      	adds	r3, r7, #7
 800f79a:	781a      	ldrb	r2, [r3, #0]
 800f79c:	4906      	ldr	r1, [pc, #24]	; (800f7b8 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 800f79e:	0013      	movs	r3, r2
 800f7a0:	00db      	lsls	r3, r3, #3
 800f7a2:	1a9b      	subs	r3, r3, r2
 800f7a4:	00db      	lsls	r3, r3, #3
 800f7a6:	585b      	ldr	r3, [r3, r1]
 800f7a8:	0018      	movs	r0, r3
 800f7aa:	f7ff f8ce 	bl	800e94a <LL_UCPD_SignalFRSTX>
}
 800f7ae:	46c0      	nop			; (mov r8, r8)
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	b002      	add	sp, #8
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	46c0      	nop			; (mov r8, r8)
 800f7b8:	20010620 	.word	0x20010620

0800f7bc <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	0002      	movs	r2, r0
 800f7c4:	1dfb      	adds	r3, r7, #7
 800f7c6:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800f7c8:	1dfb      	adds	r3, r7, #7
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	220c      	movs	r2, #12
 800f7ce:	18ba      	adds	r2, r7, r2
 800f7d0:	0011      	movs	r1, r2
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	f009 fc17 	bl	8019006 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	b29b      	uxth	r3, r3
}
 800f7dc:	0018      	movs	r0, r3
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	b004      	add	sp, #16
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <LL_APB2_GRP1_EnableClock>:
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800f7ec:	4b07      	ldr	r3, [pc, #28]	; (800f80c <LL_APB2_GRP1_EnableClock+0x28>)
 800f7ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f7f0:	4b06      	ldr	r3, [pc, #24]	; (800f80c <LL_APB2_GRP1_EnableClock+0x28>)
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	430a      	orrs	r2, r1
 800f7f6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800f7f8:	4b04      	ldr	r3, [pc, #16]	; (800f80c <LL_APB2_GRP1_EnableClock+0x28>)
 800f7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	4013      	ands	r3, r2
 800f800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f802:	68fb      	ldr	r3, [r7, #12]
}
 800f804:	46c0      	nop			; (mov r8, r8)
 800f806:	46bd      	mov	sp, r7
 800f808:	b004      	add	sp, #16
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	40021000 	.word	0x40021000

0800f810 <LL_APB2_GRP1_DisableClock>:
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 800f818:	4b05      	ldr	r3, [pc, #20]	; (800f830 <LL_APB2_GRP1_DisableClock+0x20>)
 800f81a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	43d9      	mvns	r1, r3
 800f820:	4b03      	ldr	r3, [pc, #12]	; (800f830 <LL_APB2_GRP1_DisableClock+0x20>)
 800f822:	400a      	ands	r2, r1
 800f824:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f826:	46c0      	nop			; (mov r8, r8)
 800f828:	46bd      	mov	sp, r7
 800f82a:	b002      	add	sp, #8
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	46c0      	nop			; (mov r8, r8)
 800f830:	40021000 	.word	0x40021000

0800f834 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2201      	movs	r2, #1
 800f842:	431a      	orrs	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	601a      	str	r2, [r3, #0]
}
 800f848:	46c0      	nop			; (mov r8, r8)
 800f84a:	46bd      	mov	sp, r7
 800f84c:	b002      	add	sp, #8
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2270      	movs	r2, #112	; 0x70
 800f860:	4393      	bics	r3, r2
 800f862:	001a      	movs	r2, r3
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	431a      	orrs	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]
}
 800f86c:	46c0      	nop			; (mov r8, r8)
 800f86e:	46bd      	mov	sp, r7
 800f870:	b002      	add	sp, #8
 800f872:	bd80      	pop	{r7, pc}

0800f874 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	683a      	ldr	r2, [r7, #0]
 800f882:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f884:	46c0      	nop			; (mov r8, r8)
 800f886:	46bd      	mov	sp, r7
 800f888:	b002      	add	sp, #8
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f898:	0018      	movs	r0, r3
 800f89a:	46bd      	mov	sp, r7
 800f89c:	b002      	add	sp, #8
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f8b0:	46c0      	nop			; (mov r8, r8)
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	b002      	add	sp, #8
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d02c      	beq.n	800f924 <LL_TIM_OC_SetMode+0x6c>
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d027      	beq.n	800f920 <LL_TIM_OC_SetMode+0x68>
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	2b10      	cmp	r3, #16
 800f8d4:	d022      	beq.n	800f91c <LL_TIM_OC_SetMode+0x64>
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b40      	cmp	r3, #64	; 0x40
 800f8da:	d01d      	beq.n	800f918 <LL_TIM_OC_SetMode+0x60>
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	2380      	movs	r3, #128	; 0x80
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d016      	beq.n	800f914 <LL_TIM_OC_SetMode+0x5c>
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	2380      	movs	r3, #128	; 0x80
 800f8ea:	00db      	lsls	r3, r3, #3
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d00f      	beq.n	800f910 <LL_TIM_OC_SetMode+0x58>
 800f8f0:	68ba      	ldr	r2, [r7, #8]
 800f8f2:	2380      	movs	r3, #128	; 0x80
 800f8f4:	015b      	lsls	r3, r3, #5
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d008      	beq.n	800f90c <LL_TIM_OC_SetMode+0x54>
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	2380      	movs	r3, #128	; 0x80
 800f8fe:	025b      	lsls	r3, r3, #9
 800f900:	429a      	cmp	r2, r3
 800f902:	d101      	bne.n	800f908 <LL_TIM_OC_SetMode+0x50>
 800f904:	2307      	movs	r3, #7
 800f906:	e00e      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f908:	2308      	movs	r3, #8
 800f90a:	e00c      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f90c:	2306      	movs	r3, #6
 800f90e:	e00a      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f910:	2305      	movs	r3, #5
 800f912:	e008      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f914:	2304      	movs	r3, #4
 800f916:	e006      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f918:	2303      	movs	r3, #3
 800f91a:	e004      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f91c:	2302      	movs	r3, #2
 800f91e:	e002      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f920:	2301      	movs	r3, #1
 800f922:	e000      	b.n	800f926 <LL_TIM_OC_SetMode+0x6e>
 800f924:	2300      	movs	r3, #0
 800f926:	2017      	movs	r0, #23
 800f928:	183a      	adds	r2, r7, r0
 800f92a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	3318      	adds	r3, #24
 800f930:	0019      	movs	r1, r3
 800f932:	183b      	adds	r3, r7, r0
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	4a0e      	ldr	r2, [pc, #56]	; (800f970 <LL_TIM_OC_SetMode+0xb8>)
 800f938:	5cd3      	ldrb	r3, [r2, r3]
 800f93a:	18cb      	adds	r3, r1, r3
 800f93c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	183a      	adds	r2, r7, r0
 800f944:	7812      	ldrb	r2, [r2, #0]
 800f946:	490b      	ldr	r1, [pc, #44]	; (800f974 <LL_TIM_OC_SetMode+0xbc>)
 800f948:	5c8a      	ldrb	r2, [r1, r2]
 800f94a:	0011      	movs	r1, r2
 800f94c:	4a0a      	ldr	r2, [pc, #40]	; (800f978 <LL_TIM_OC_SetMode+0xc0>)
 800f94e:	408a      	lsls	r2, r1
 800f950:	43d2      	mvns	r2, r2
 800f952:	401a      	ands	r2, r3
 800f954:	183b      	adds	r3, r7, r0
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	4906      	ldr	r1, [pc, #24]	; (800f974 <LL_TIM_OC_SetMode+0xbc>)
 800f95a:	5ccb      	ldrb	r3, [r1, r3]
 800f95c:	0019      	movs	r1, r3
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	408b      	lsls	r3, r1
 800f962:	431a      	orrs	r2, r3
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	601a      	str	r2, [r3, #0]
}
 800f968:	46c0      	nop			; (mov r8, r8)
 800f96a:	46bd      	mov	sp, r7
 800f96c:	b006      	add	sp, #24
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	0801a390 	.word	0x0801a390
 800f974:	0801a39c 	.word	0x0801a39c
 800f978:	00010073 	.word	0x00010073

0800f97c <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b086      	sub	sp, #24
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d02c      	beq.n	800f9e8 <LL_TIM_OC_SetPolarity+0x6c>
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	2b04      	cmp	r3, #4
 800f992:	d027      	beq.n	800f9e4 <LL_TIM_OC_SetPolarity+0x68>
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2b10      	cmp	r3, #16
 800f998:	d022      	beq.n	800f9e0 <LL_TIM_OC_SetPolarity+0x64>
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	2b40      	cmp	r3, #64	; 0x40
 800f99e:	d01d      	beq.n	800f9dc <LL_TIM_OC_SetPolarity+0x60>
 800f9a0:	68ba      	ldr	r2, [r7, #8]
 800f9a2:	2380      	movs	r3, #128	; 0x80
 800f9a4:	005b      	lsls	r3, r3, #1
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d016      	beq.n	800f9d8 <LL_TIM_OC_SetPolarity+0x5c>
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	2380      	movs	r3, #128	; 0x80
 800f9ae:	00db      	lsls	r3, r3, #3
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d00f      	beq.n	800f9d4 <LL_TIM_OC_SetPolarity+0x58>
 800f9b4:	68ba      	ldr	r2, [r7, #8]
 800f9b6:	2380      	movs	r3, #128	; 0x80
 800f9b8:	015b      	lsls	r3, r3, #5
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d008      	beq.n	800f9d0 <LL_TIM_OC_SetPolarity+0x54>
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	2380      	movs	r3, #128	; 0x80
 800f9c2:	025b      	lsls	r3, r3, #9
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d101      	bne.n	800f9cc <LL_TIM_OC_SetPolarity+0x50>
 800f9c8:	2307      	movs	r3, #7
 800f9ca:	e00e      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9cc:	2308      	movs	r3, #8
 800f9ce:	e00c      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9d0:	2306      	movs	r3, #6
 800f9d2:	e00a      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9d4:	2305      	movs	r3, #5
 800f9d6:	e008      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9d8:	2304      	movs	r3, #4
 800f9da:	e006      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9dc:	2303      	movs	r3, #3
 800f9de:	e004      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	e002      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e000      	b.n	800f9ea <LL_TIM_OC_SetPolarity+0x6e>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	2017      	movs	r0, #23
 800f9ec:	183a      	adds	r2, r7, r0
 800f9ee:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6a1b      	ldr	r3, [r3, #32]
 800f9f4:	183a      	adds	r2, r7, r0
 800f9f6:	7812      	ldrb	r2, [r2, #0]
 800f9f8:	490a      	ldr	r1, [pc, #40]	; (800fa24 <LL_TIM_OC_SetPolarity+0xa8>)
 800f9fa:	5c8a      	ldrb	r2, [r1, r2]
 800f9fc:	0011      	movs	r1, r2
 800f9fe:	2202      	movs	r2, #2
 800fa00:	408a      	lsls	r2, r1
 800fa02:	43d2      	mvns	r2, r2
 800fa04:	401a      	ands	r2, r3
 800fa06:	183b      	adds	r3, r7, r0
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	4906      	ldr	r1, [pc, #24]	; (800fa24 <LL_TIM_OC_SetPolarity+0xa8>)
 800fa0c:	5ccb      	ldrb	r3, [r1, r3]
 800fa0e:	0019      	movs	r1, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	408b      	lsls	r3, r1
 800fa14:	431a      	orrs	r2, r3
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	621a      	str	r2, [r3, #32]
}
 800fa1a:	46c0      	nop			; (mov r8, r8)
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	b006      	add	sp, #24
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	46c0      	nop			; (mov r8, r8)
 800fa24:	0801a3a8 	.word	0x0801a3a8

0800fa28 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	683a      	ldr	r2, [r7, #0]
 800fa36:	635a      	str	r2, [r3, #52]	; 0x34
}
 800fa38:	46c0      	nop			; (mov r8, r8)
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	b002      	add	sp, #8
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	683a      	ldr	r2, [r7, #0]
 800fa4e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fa50:	46c0      	nop			; (mov r8, r8)
 800fa52:	46bd      	mov	sp, r7
 800fa54:	b002      	add	sp, #8
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fa68:	46c0      	nop			; (mov r8, r8)
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	b002      	add	sp, #8
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fa80:	46c0      	nop			; (mov r8, r8)
 800fa82:	46bd      	mov	sp, r7
 800fa84:	b002      	add	sp, #8
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2203      	movs	r2, #3
 800fa94:	4252      	negs	r2, r2
 800fa96:	611a      	str	r2, [r3, #16]
}
 800fa98:	46c0      	nop			; (mov r8, r8)
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	b002      	add	sp, #8
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	691b      	ldr	r3, [r3, #16]
 800faac:	2202      	movs	r2, #2
 800faae:	4013      	ands	r3, r2
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d101      	bne.n	800fab8 <LL_TIM_IsActiveFlag_CC1+0x18>
 800fab4:	2301      	movs	r3, #1
 800fab6:	e000      	b.n	800faba <LL_TIM_IsActiveFlag_CC1+0x1a>
 800fab8:	2300      	movs	r3, #0
}
 800faba:	0018      	movs	r0, r3
 800fabc:	46bd      	mov	sp, r7
 800fabe:	b002      	add	sp, #8
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2205      	movs	r2, #5
 800face:	4252      	negs	r2, r2
 800fad0:	611a      	str	r2, [r3, #16]
}
 800fad2:	46c0      	nop			; (mov r8, r8)
 800fad4:	46bd      	mov	sp, r7
 800fad6:	b002      	add	sp, #8
 800fad8:	bd80      	pop	{r7, pc}

0800fada <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b082      	sub	sp, #8
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	2204      	movs	r2, #4
 800fae8:	4013      	ands	r3, r2
 800faea:	2b04      	cmp	r3, #4
 800faec:	d101      	bne.n	800faf2 <LL_TIM_IsActiveFlag_CC2+0x18>
 800faee:	2301      	movs	r3, #1
 800faf0:	e000      	b.n	800faf4 <LL_TIM_IsActiveFlag_CC2+0x1a>
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	0018      	movs	r0, r3
 800faf6:	46bd      	mov	sp, r7
 800faf8:	b002      	add	sp, #8
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2209      	movs	r2, #9
 800fb08:	4252      	negs	r2, r2
 800fb0a:	611a      	str	r2, [r3, #16]
}
 800fb0c:	46c0      	nop			; (mov r8, r8)
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	b002      	add	sp, #8
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	691b      	ldr	r3, [r3, #16]
 800fb20:	2208      	movs	r2, #8
 800fb22:	4013      	ands	r3, r2
 800fb24:	2b08      	cmp	r3, #8
 800fb26:	d101      	bne.n	800fb2c <LL_TIM_IsActiveFlag_CC3+0x18>
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e000      	b.n	800fb2e <LL_TIM_IsActiveFlag_CC3+0x1a>
 800fb2c:	2300      	movs	r3, #0
}
 800fb2e:	0018      	movs	r0, r3
 800fb30:	46bd      	mov	sp, r7
 800fb32:	b002      	add	sp, #8
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b082      	sub	sp, #8
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2211      	movs	r2, #17
 800fb42:	4252      	negs	r2, r2
 800fb44:	611a      	str	r2, [r3, #16]
}
 800fb46:	46c0      	nop			; (mov r8, r8)
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	b002      	add	sp, #8
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b082      	sub	sp, #8
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	2210      	movs	r2, #16
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	2b10      	cmp	r3, #16
 800fb60:	d101      	bne.n	800fb66 <LL_TIM_IsActiveFlag_CC4+0x18>
 800fb62:	2301      	movs	r3, #1
 800fb64:	e000      	b.n	800fb68 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	0018      	movs	r0, r3
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	b002      	add	sp, #8
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 800fb70:	b5b0      	push	{r4, r5, r7, lr}
 800fb72:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 800fb74:	4b48      	ldr	r3, [pc, #288]	; (800fc98 <USBPD_TIM_Init+0x128>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	b25b      	sxtb	r3, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d000      	beq.n	800fb80 <USBPD_TIM_Init+0x10>
 800fb7e:	e07e      	b.n	800fc7e <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 800fb80:	2380      	movs	r3, #128	; 0x80
 800fb82:	011b      	lsls	r3, r3, #4
 800fb84:	0018      	movs	r0, r3
 800fb86:	f7ff fe2d 	bl	800f7e4 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 800fb8a:	4b44      	ldr	r3, [pc, #272]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	0018      	movs	r0, r3
 800fb90:	f7ff fe5e 	bl	800f850 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 800fb94:	4b42      	ldr	r3, [pc, #264]	; (800fca0 <USBPD_TIM_Init+0x130>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4a42      	ldr	r2, [pc, #264]	; (800fca4 <USBPD_TIM_Init+0x134>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d90b      	bls.n	800fbb6 <USBPD_TIM_Init+0x46>
 800fb9e:	4b40      	ldr	r3, [pc, #256]	; (800fca0 <USBPD_TIM_Init+0x130>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a41      	ldr	r2, [pc, #260]	; (800fca8 <USBPD_TIM_Init+0x138>)
 800fba4:	4694      	mov	ip, r2
 800fba6:	4463      	add	r3, ip
 800fba8:	4940      	ldr	r1, [pc, #256]	; (800fcac <USBPD_TIM_Init+0x13c>)
 800fbaa:	0018      	movs	r0, r3
 800fbac:	f7f6 fd04 	bl	80065b8 <__udivsi3>
 800fbb0:	0003      	movs	r3, r0
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	e000      	b.n	800fbb8 <USBPD_TIM_Init+0x48>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	4a38      	ldr	r2, [pc, #224]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fbba:	0019      	movs	r1, r3
 800fbbc:	0010      	movs	r0, r2
 800fbbe:	f7ff fe59 	bl	800f874 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 800fbc2:	4b37      	ldr	r3, [pc, #220]	; (800fca0 <USBPD_TIM_Init+0x130>)
 800fbc4:	681c      	ldr	r4, [r3, #0]
 800fbc6:	4b35      	ldr	r3, [pc, #212]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fbc8:	0018      	movs	r0, r3
 800fbca:	f7ff fe5f 	bl	800f88c <LL_TIM_GetPrescaler>
 800fbce:	0003      	movs	r3, r0
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	0019      	movs	r1, r3
 800fbd4:	0020      	movs	r0, r4
 800fbd6:	f7f6 fcef 	bl	80065b8 <__udivsi3>
 800fbda:	0003      	movs	r3, r0
 800fbdc:	2b63      	cmp	r3, #99	; 0x63
 800fbde:	d910      	bls.n	800fc02 <USBPD_TIM_Init+0x92>
 800fbe0:	4b2f      	ldr	r3, [pc, #188]	; (800fca0 <USBPD_TIM_Init+0x130>)
 800fbe2:	681c      	ldr	r4, [r3, #0]
 800fbe4:	4b2d      	ldr	r3, [pc, #180]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fbe6:	0018      	movs	r0, r3
 800fbe8:	f7ff fe50 	bl	800f88c <LL_TIM_GetPrescaler>
 800fbec:	0003      	movs	r3, r0
 800fbee:	3301      	adds	r3, #1
 800fbf0:	2264      	movs	r2, #100	; 0x64
 800fbf2:	4353      	muls	r3, r2
 800fbf4:	0019      	movs	r1, r3
 800fbf6:	0020      	movs	r0, r4
 800fbf8:	f7f6 fcde 	bl	80065b8 <__udivsi3>
 800fbfc:	0003      	movs	r3, r0
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	e000      	b.n	800fc04 <USBPD_TIM_Init+0x94>
 800fc02:	2300      	movs	r3, #0
 800fc04:	4a25      	ldr	r2, [pc, #148]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc06:	0019      	movs	r1, r3
 800fc08:	0010      	movs	r0, r2
 800fc0a:	f7ff fe49 	bl	800f8a0 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 800fc0e:	4b23      	ldr	r3, [pc, #140]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc10:	2230      	movs	r2, #48	; 0x30
 800fc12:	2101      	movs	r1, #1
 800fc14:	0018      	movs	r0, r3
 800fc16:	f7ff fe4f 	bl	800f8b8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 800fc1a:	4b20      	ldr	r3, [pc, #128]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc1c:	2230      	movs	r2, #48	; 0x30
 800fc1e:	2110      	movs	r1, #16
 800fc20:	0018      	movs	r0, r3
 800fc22:	f7ff fe49 	bl	800f8b8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 800fc26:	2380      	movs	r3, #128	; 0x80
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	481c      	ldr	r0, [pc, #112]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc2c:	2230      	movs	r2, #48	; 0x30
 800fc2e:	0019      	movs	r1, r3
 800fc30:	f7ff fe42 	bl	800f8b8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 800fc34:	2380      	movs	r3, #128	; 0x80
 800fc36:	015b      	lsls	r3, r3, #5
 800fc38:	4818      	ldr	r0, [pc, #96]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc3a:	2230      	movs	r2, #48	; 0x30
 800fc3c:	0019      	movs	r1, r3
 800fc3e:	f7ff fe3b 	bl	800f8b8 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 800fc42:	4b16      	ldr	r3, [pc, #88]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc44:	2200      	movs	r2, #0
 800fc46:	2101      	movs	r1, #1
 800fc48:	0018      	movs	r0, r3
 800fc4a:	f7ff fe97 	bl	800f97c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 800fc4e:	4b13      	ldr	r3, [pc, #76]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc50:	2200      	movs	r2, #0
 800fc52:	2110      	movs	r1, #16
 800fc54:	0018      	movs	r0, r3
 800fc56:	f7ff fe91 	bl	800f97c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 800fc5a:	2380      	movs	r3, #128	; 0x80
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	480f      	ldr	r0, [pc, #60]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	0019      	movs	r1, r3
 800fc64:	f7ff fe8a 	bl	800f97c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 800fc68:	2380      	movs	r3, #128	; 0x80
 800fc6a:	015b      	lsls	r3, r3, #5
 800fc6c:	480b      	ldr	r0, [pc, #44]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc6e:	2200      	movs	r2, #0
 800fc70:	0019      	movs	r1, r3
 800fc72:	f7ff fe83 	bl	800f97c <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 800fc76:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <USBPD_TIM_Init+0x12c>)
 800fc78:	0018      	movs	r0, r3
 800fc7a:	f7ff fddb 	bl	800f834 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 800fc7e:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <USBPD_TIM_Init+0x128>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	b25b      	sxtb	r3, r3
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	3301      	adds	r3, #1
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	b25a      	sxtb	r2, r3
 800fc8c:	4b02      	ldr	r3, [pc, #8]	; (800fc98 <USBPD_TIM_Init+0x128>)
 800fc8e:	701a      	strb	r2, [r3, #0]
}
 800fc90:	46c0      	nop			; (mov r8, r8)
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bdb0      	pop	{r4, r5, r7, pc}
 800fc96:	46c0      	nop			; (mov r8, r8)
 800fc98:	20010658 	.word	0x20010658
 800fc9c:	40012c00 	.word	0x40012c00
 800fca0:	20000004 	.word	0x20000004
 800fca4:	000f423f 	.word	0x000f423f
 800fca8:	0007a120 	.word	0x0007a120
 800fcac:	000f4240 	.word	0x000f4240

0800fcb0 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	af00      	add	r7, sp, #0
  timer_initcounter--;
 800fcb4:	4b0a      	ldr	r3, [pc, #40]	; (800fce0 <USBPD_TIM_DeInit+0x30>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	b25b      	sxtb	r3, r3
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	b25a      	sxtb	r2, r3
 800fcc2:	4b07      	ldr	r3, [pc, #28]	; (800fce0 <USBPD_TIM_DeInit+0x30>)
 800fcc4:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 800fcc6:	4b06      	ldr	r3, [pc, #24]	; (800fce0 <USBPD_TIM_DeInit+0x30>)
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	b25b      	sxtb	r3, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d104      	bne.n	800fcda <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 800fcd0:	2380      	movs	r3, #128	; 0x80
 800fcd2:	011b      	lsls	r3, r3, #4
 800fcd4:	0018      	movs	r0, r3
 800fcd6:	f7ff fd9b 	bl	800f810 <LL_APB2_GRP1_DisableClock>
  }
}
 800fcda:	46c0      	nop			; (mov r8, r8)
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	20010658 	.word	0x20010658

0800fce4 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	0002      	movs	r2, r0
 800fcec:	6039      	str	r1, [r7, #0]
 800fcee:	1dfb      	adds	r3, r7, #7
 800fcf0:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 800fcf2:	1dfb      	adds	r3, r7, #7
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d044      	beq.n	800fd84 <USBPD_TIM_Start+0xa0>
 800fcfa:	dc57      	bgt.n	800fdac <USBPD_TIM_Start+0xc8>
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d02d      	beq.n	800fd5c <USBPD_TIM_Start+0x78>
 800fd00:	dc54      	bgt.n	800fdac <USBPD_TIM_Start+0xc8>
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d002      	beq.n	800fd0c <USBPD_TIM_Start+0x28>
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d014      	beq.n	800fd34 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 800fd0a:	e04f      	b.n	800fdac <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 800fd0c:	4b2a      	ldr	r3, [pc, #168]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	18d3      	adds	r3, r2, r3
 800fd14:	4929      	ldr	r1, [pc, #164]	; (800fdbc <USBPD_TIM_Start+0xd8>)
 800fd16:	0018      	movs	r0, r3
 800fd18:	f7f6 fcd4 	bl	80066c4 <__aeabi_uidivmod>
 800fd1c:	000b      	movs	r3, r1
 800fd1e:	001a      	movs	r2, r3
 800fd20:	4b25      	ldr	r3, [pc, #148]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd22:	0011      	movs	r1, r2
 800fd24:	0018      	movs	r0, r3
 800fd26:	f7ff fe7f 	bl	800fa28 <LL_TIM_OC_SetCompareCH1>
 800fd2a:	4b23      	ldr	r3, [pc, #140]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd2c:	0018      	movs	r0, r3
 800fd2e:	f7ff feab 	bl	800fa88 <LL_TIM_ClearFlag_CC1>
      break;
 800fd32:	e03c      	b.n	800fdae <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 800fd34:	4b20      	ldr	r3, [pc, #128]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	18d3      	adds	r3, r2, r3
 800fd3c:	491f      	ldr	r1, [pc, #124]	; (800fdbc <USBPD_TIM_Start+0xd8>)
 800fd3e:	0018      	movs	r0, r3
 800fd40:	f7f6 fcc0 	bl	80066c4 <__aeabi_uidivmod>
 800fd44:	000b      	movs	r3, r1
 800fd46:	001a      	movs	r2, r3
 800fd48:	4b1b      	ldr	r3, [pc, #108]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd4a:	0011      	movs	r1, r2
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	f7ff fe77 	bl	800fa40 <LL_TIM_OC_SetCompareCH2>
 800fd52:	4b19      	ldr	r3, [pc, #100]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd54:	0018      	movs	r0, r3
 800fd56:	f7ff feb4 	bl	800fac2 <LL_TIM_ClearFlag_CC2>
      break;
 800fd5a:	e028      	b.n	800fdae <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 800fd5c:	4b16      	ldr	r3, [pc, #88]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	18d3      	adds	r3, r2, r3
 800fd64:	4915      	ldr	r1, [pc, #84]	; (800fdbc <USBPD_TIM_Start+0xd8>)
 800fd66:	0018      	movs	r0, r3
 800fd68:	f7f6 fcac 	bl	80066c4 <__aeabi_uidivmod>
 800fd6c:	000b      	movs	r3, r1
 800fd6e:	001a      	movs	r2, r3
 800fd70:	4b11      	ldr	r3, [pc, #68]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd72:	0011      	movs	r1, r2
 800fd74:	0018      	movs	r0, r3
 800fd76:	f7ff fe6f 	bl	800fa58 <LL_TIM_OC_SetCompareCH3>
 800fd7a:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd7c:	0018      	movs	r0, r3
 800fd7e:	f7ff febd 	bl	800fafc <LL_TIM_ClearFlag_CC3>
      break;
 800fd82:	e014      	b.n	800fdae <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 800fd84:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	18d3      	adds	r3, r2, r3
 800fd8c:	490b      	ldr	r1, [pc, #44]	; (800fdbc <USBPD_TIM_Start+0xd8>)
 800fd8e:	0018      	movs	r0, r3
 800fd90:	f7f6 fc98 	bl	80066c4 <__aeabi_uidivmod>
 800fd94:	000b      	movs	r3, r1
 800fd96:	001a      	movs	r2, r3
 800fd98:	4b07      	ldr	r3, [pc, #28]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fd9a:	0011      	movs	r1, r2
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	f7ff fe67 	bl	800fa70 <LL_TIM_OC_SetCompareCH4>
 800fda2:	4b05      	ldr	r3, [pc, #20]	; (800fdb8 <USBPD_TIM_Start+0xd4>)
 800fda4:	0018      	movs	r0, r3
 800fda6:	f7ff fec6 	bl	800fb36 <LL_TIM_ClearFlag_CC4>
      break;
 800fdaa:	e000      	b.n	800fdae <USBPD_TIM_Start+0xca>
      break;
 800fdac:	46c0      	nop			; (mov r8, r8)
  }
}
 800fdae:	46c0      	nop			; (mov r8, r8)
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	b002      	add	sp, #8
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	46c0      	nop			; (mov r8, r8)
 800fdb8:	40012c00 	.word	0x40012c00
 800fdbc:	00002710 	.word	0x00002710

0800fdc0 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	0002      	movs	r2, r0
 800fdc8:	1dfb      	adds	r3, r7, #7
 800fdca:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	60fb      	str	r3, [r7, #12]
  switch (Id)
 800fdd0:	1dfb      	adds	r3, r7, #7
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	2b03      	cmp	r3, #3
 800fdd6:	d01d      	beq.n	800fe14 <USBPD_TIM_IsExpired+0x54>
 800fdd8:	dc23      	bgt.n	800fe22 <USBPD_TIM_IsExpired+0x62>
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	d013      	beq.n	800fe06 <USBPD_TIM_IsExpired+0x46>
 800fdde:	dc20      	bgt.n	800fe22 <USBPD_TIM_IsExpired+0x62>
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d002      	beq.n	800fdea <USBPD_TIM_IsExpired+0x2a>
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d007      	beq.n	800fdf8 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 800fde8:	e01b      	b.n	800fe22 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 800fdea:	4b11      	ldr	r3, [pc, #68]	; (800fe30 <USBPD_TIM_IsExpired+0x70>)
 800fdec:	0018      	movs	r0, r3
 800fdee:	f7ff fe57 	bl	800faa0 <LL_TIM_IsActiveFlag_CC1>
 800fdf2:	0003      	movs	r3, r0
 800fdf4:	60fb      	str	r3, [r7, #12]
      break;
 800fdf6:	e015      	b.n	800fe24 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 800fdf8:	4b0d      	ldr	r3, [pc, #52]	; (800fe30 <USBPD_TIM_IsExpired+0x70>)
 800fdfa:	0018      	movs	r0, r3
 800fdfc:	f7ff fe6d 	bl	800fada <LL_TIM_IsActiveFlag_CC2>
 800fe00:	0003      	movs	r3, r0
 800fe02:	60fb      	str	r3, [r7, #12]
      break;
 800fe04:	e00e      	b.n	800fe24 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 800fe06:	4b0a      	ldr	r3, [pc, #40]	; (800fe30 <USBPD_TIM_IsExpired+0x70>)
 800fe08:	0018      	movs	r0, r3
 800fe0a:	f7ff fe83 	bl	800fb14 <LL_TIM_IsActiveFlag_CC3>
 800fe0e:	0003      	movs	r3, r0
 800fe10:	60fb      	str	r3, [r7, #12]
      break;
 800fe12:	e007      	b.n	800fe24 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 800fe14:	4b06      	ldr	r3, [pc, #24]	; (800fe30 <USBPD_TIM_IsExpired+0x70>)
 800fe16:	0018      	movs	r0, r3
 800fe18:	f7ff fe99 	bl	800fb4e <LL_TIM_IsActiveFlag_CC4>
 800fe1c:	0003      	movs	r3, r0
 800fe1e:	60fb      	str	r3, [r7, #12]
      break;
 800fe20:	e000      	b.n	800fe24 <USBPD_TIM_IsExpired+0x64>
      break;
 800fe22:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 800fe24:	68fb      	ldr	r3, [r7, #12]
}
 800fe26:	0018      	movs	r0, r3
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	b004      	add	sp, #16
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	46c0      	nop			; (mov r8, r8)
 800fe30:	40012c00 	.word	0x40012c00

0800fe34 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b094      	sub	sp, #80	; 0x50
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	607a      	str	r2, [r7, #4]
 800fe40:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	3303      	adds	r3, #3
 800fe46:	2203      	movs	r2, #3
 800fe48:	4393      	bics	r3, r2
 800fe4a:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fe4c:	f3ef 8310 	mrs	r3, PRIMASK
 800fe50:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fe52:	b672      	cpsid	i
    return(primask_value);
 800fe54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800fe56:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800fe58:	4b56      	ldr	r3, [pc, #344]	; (800ffb4 <_tx_byte_allocate+0x180>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe66:	621a      	str	r2, [r3, #32]
 800fe68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe6a:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6e:	f383 8810 	msr	PRIMASK, r3
}
 800fe72:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	0011      	movs	r1, r2
 800fe7a:	0018      	movs	r0, r3
 800fe7c:	f000 f9c0 	bl	8010200 <_tx_byte_pool_search>
 800fe80:	0003      	movs	r3, r0
 800fe82:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fe84:	f3ef 8310 	mrs	r3, PRIMASK
 800fe88:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fe8a:	b672      	cpsid	i
    return(primask_value);
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800fe8e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800fe90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d002      	beq.n	800fe9c <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800fe96:	2301      	movs	r3, #1
 800fe98:	647b      	str	r3, [r7, #68]	; 0x44
 800fe9a:	e006      	b.n	800feaa <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6a1b      	ldr	r3, [r3, #32]
 800fea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d101      	bne.n	800feaa <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800fea6:	2301      	movs	r3, #1
 800fea8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 800feaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feac:	2b00      	cmp	r3, #0
 800feae:	d0d8      	beq.n	800fe62 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800feb4:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800feb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d008      	beq.n	800fece <_tx_byte_allocate+0x9a>
 800febc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800febe:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fec0:	6a3b      	ldr	r3, [r7, #32]
 800fec2:	f383 8810 	msr	PRIMASK, r3
}
 800fec6:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800fec8:	2300      	movs	r3, #0
 800feca:	64bb      	str	r3, [r7, #72]	; 0x48
 800fecc:	e06d      	b.n	800ffaa <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d062      	beq.n	800ff9a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800fed4:	4b38      	ldr	r3, [pc, #224]	; (800ffb8 <_tx_byte_allocate+0x184>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d007      	beq.n	800feec <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800fedc:	2310      	movs	r3, #16
 800fede:	64bb      	str	r3, [r7, #72]	; 0x48
 800fee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fee2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	f383 8810 	msr	PRIMASK, r3
}
 800feea:	e05e      	b.n	800ffaa <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800feec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feee:	4a33      	ldr	r2, [pc, #204]	; (800ffbc <_tx_byte_allocate+0x188>)
 800fef0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800fef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800fef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800fefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ff04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff06:	22ac      	movs	r2, #172	; 0xac
 800ff08:	589b      	ldr	r3, [r3, r2]
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff0e:	21ac      	movs	r1, #172	; 0xac
 800ff10:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff16:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff1c:	1c5a      	adds	r2, r3, #1
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ff22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d109      	bne.n	800ff3c <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff2c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800ff2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff32:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ff34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff38:	675a      	str	r2, [r3, #116]	; 0x74
 800ff3a:	e011      	b.n	800ff60 <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ff42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff46:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ff48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff4c:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ff4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff52:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ff54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff58:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ff5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff5e:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ff60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff62:	2209      	movs	r2, #9
 800ff64:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ff66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff68:	2201      	movs	r2, #1
 800ff6a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ff6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff6e:	683a      	ldr	r2, [r7, #0]
 800ff70:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ff72:	4b11      	ldr	r3, [pc, #68]	; (800ffb8 <_tx_byte_allocate+0x184>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <_tx_byte_allocate+0x184>)
 800ff7a:	601a      	str	r2, [r3, #0]
 800ff7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff7e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	f383 8810 	msr	PRIMASK, r3
}
 800ff86:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ff88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff8a:	0018      	movs	r0, r3
 800ff8c:	f002 ffea 	bl	8012f64 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ff90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff92:	2284      	movs	r2, #132	; 0x84
 800ff94:	589b      	ldr	r3, [r3, r2]
 800ff96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff98:	e007      	b.n	800ffaa <_tx_byte_allocate+0x176>
 800ff9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff9c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	f383 8810 	msr	PRIMASK, r3
}
 800ffa4:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800ffa6:	2310      	movs	r3, #16
 800ffa8:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800ffaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ffac:	0018      	movs	r0, r3
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	b014      	add	sp, #80	; 0x50
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	20010694 	.word	0x20010694
 800ffb8:	2001072c 	.word	0x2001072c
 800ffbc:	0800ffc1 	.word	0x0800ffc1

0800ffc0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08c      	sub	sp, #48	; 0x30
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ffca:	f3ef 8310 	mrs	r3, PRIMASK
 800ffce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ffd0:	b672      	cpsid	i
    return(primask_value);
 800ffd2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800ffd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ffda:	4b32      	ldr	r3, [pc, #200]	; (80100a4 <_tx_byte_pool_cleanup+0xe4>)
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d157      	bne.n	8010090 <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	22ac      	movs	r2, #172	; 0xac
 800ffe4:	589b      	ldr	r3, [r3, r2]
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d151      	bne.n	8010090 <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800fff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d04b      	beq.n	8010090 <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a2a      	ldr	r2, [pc, #168]	; (80100a8 <_tx_byte_pool_cleanup+0xe8>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d146      	bne.n	8010090 <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8010002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010006:	2b00      	cmp	r3, #0
 8010008:	d042      	beq.n	8010090 <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8010010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010014:	1e5a      	subs	r2, r3, #1
 8010016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010018:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801001a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	2b00      	cmp	r3, #0
 8010024:	d103      	bne.n	801002e <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	2200      	movs	r2, #0
 801002a:	625a      	str	r2, [r3, #36]	; 0x24
 801002c:	e013      	b.n	8010056 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010032:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010038:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	69fa      	ldr	r2, [r7, #28]
 801003e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	6a3a      	ldr	r2, [r7, #32]
 8010044:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8010046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	429a      	cmp	r2, r3
 801004e:	d102      	bne.n	8010056 <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8010050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010052:	6a3a      	ldr	r2, [r7, #32]
 8010054:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005a:	2b09      	cmp	r3, #9
 801005c:	d118      	bne.n	8010090 <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2284      	movs	r2, #132	; 0x84
 8010062:	2110      	movs	r1, #16
 8010064:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010066:	4b11      	ldr	r3, [pc, #68]	; (80100ac <_tx_byte_pool_cleanup+0xec>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	1c5a      	adds	r2, r3, #1
 801006c:	4b0f      	ldr	r3, [pc, #60]	; (80100ac <_tx_byte_pool_cleanup+0xec>)
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010072:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	f383 8810 	msr	PRIMASK, r3
}
 801007a:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	0018      	movs	r0, r3
 8010080:	f002 fe70 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010084:	f3ef 8310 	mrs	r3, PRIMASK
 8010088:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801008a:	b672      	cpsid	i
    return(primask_value);
 801008c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801008e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010092:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f383 8810 	msr	PRIMASK, r3
}
 801009a:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801009c:	46c0      	nop			; (mov r8, r8)
 801009e:	46bd      	mov	sp, r7
 80100a0:	b00c      	add	sp, #48	; 0x30
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	0800ffc1 	.word	0x0800ffc1
 80100a8:	42595445 	.word	0x42595445
 80100ac:	2001072c 	.word	0x2001072c

080100b0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b092      	sub	sp, #72	; 0x48
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
 80100bc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	647b      	str	r3, [r7, #68]	; 0x44
 80100c2:	233f      	movs	r3, #63	; 0x3f
 80100c4:	18fb      	adds	r3, r7, r3
 80100c6:	2200      	movs	r2, #0
 80100c8:	701a      	strb	r2, [r3, #0]
 80100ca:	2334      	movs	r3, #52	; 0x34
 80100cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80100ce:	2300      	movs	r3, #0
 80100d0:	643b      	str	r3, [r7, #64]	; 0x40
 80100d2:	e009      	b.n	80100e8 <_tx_byte_pool_create+0x38>
 80100d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d6:	1c5a      	adds	r2, r3, #1
 80100d8:	647a      	str	r2, [r7, #68]	; 0x44
 80100da:	223f      	movs	r2, #63	; 0x3f
 80100dc:	18ba      	adds	r2, r7, r2
 80100de:	7812      	ldrb	r2, [r2, #0]
 80100e0:	701a      	strb	r2, [r3, #0]
 80100e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100e4:	3301      	adds	r3, #1
 80100e6:	643b      	str	r3, [r7, #64]	; 0x40
 80100e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d3f1      	bcc.n	80100d4 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	2203      	movs	r2, #3
 80100f4:	4393      	bics	r3, r2
 80100f6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	68ba      	ldr	r2, [r7, #8]
 80100fc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	3b08      	subs	r3, #8
 801011a:	001a      	movs	r2, r3
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2202      	movs	r2, #2
 8010124:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801012a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	18d3      	adds	r3, r2, r3
 8010130:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	3b04      	subs	r3, #4
 8010136:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801013c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801013e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8010140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010144:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8010146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010148:	3b04      	subs	r3, #4
 801014a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801014c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010162:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8010168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801016a:	3304      	adds	r3, #4
 801016c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801016e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010170:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	4a1e      	ldr	r2, [pc, #120]	; (80101f0 <_tx_byte_pool_create+0x140>)
 8010176:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2200      	movs	r2, #0
 801017c:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801017e:	f3ef 8310 	mrs	r3, PRIMASK
 8010182:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010184:	b672      	cpsid	i
    return(primask_value);
 8010186:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8010188:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	4a19      	ldr	r2, [pc, #100]	; (80101f4 <_tx_byte_pool_create+0x144>)
 801018e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8010190:	4b19      	ldr	r3, [pc, #100]	; (80101f8 <_tx_byte_pool_create+0x148>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d109      	bne.n	80101ac <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8010198:	4b18      	ldr	r3, [pc, #96]	; (80101fc <_tx_byte_pool_create+0x14c>)
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	631a      	str	r2, [r3, #48]	; 0x30
 80101aa:	e011      	b.n	80101d0 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80101ac:	4b13      	ldr	r3, [pc, #76]	; (80101fc <_tx_byte_pool_create+0x14c>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80101b2:	6a3b      	ldr	r3, [r7, #32]
 80101b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80101b8:	6a3b      	ldr	r3, [r7, #32]
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	68fa      	ldr	r2, [r7, #12]
 80101c2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	69fa      	ldr	r2, [r7, #28]
 80101c8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6a3a      	ldr	r2, [r7, #32]
 80101ce:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80101d0:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <_tx_byte_pool_create+0x148>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	1c5a      	adds	r2, r3, #1
 80101d6:	4b08      	ldr	r3, [pc, #32]	; (80101f8 <_tx_byte_pool_create+0x148>)
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f383 8810 	msr	PRIMASK, r3
}
 80101e4:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80101e6:	2300      	movs	r3, #0
}
 80101e8:	0018      	movs	r0, r3
 80101ea:	46bd      	mov	sp, r7
 80101ec:	b012      	add	sp, #72	; 0x48
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	ffffeeee 	.word	0xffffeeee
 80101f4:	42595445 	.word	0x42595445
 80101f8:	20010688 	.word	0x20010688
 80101fc:	20010684 	.word	0x20010684

08010200 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b094      	sub	sp, #80	; 0x50
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801020a:	2300      	movs	r3, #0
 801020c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801020e:	f3ef 8310 	mrs	r3, PRIMASK
 8010212:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010214:	b672      	cpsid	i
    return(primask_value);
 8010216:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8010218:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	689a      	ldr	r2, [r3, #8]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	3b02      	subs	r3, #2
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	18d3      	adds	r3, r2, r3
 8010228:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	429a      	cmp	r2, r3
 8010230:	d308      	bcc.n	8010244 <_tx_byte_pool_search+0x44>
 8010232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010234:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	f383 8810 	msr	PRIMASK, r3
}
 801023c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	64bb      	str	r3, [r7, #72]	; 0x48
 8010242:	e0db      	b.n	80103fc <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8010244:	4b70      	ldr	r3, [pc, #448]	; (8010408 <_tx_byte_pool_search+0x208>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801024e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	695b      	ldr	r3, [r3, #20]
 8010254:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	3301      	adds	r3, #1
 801025c:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 801025e:	2300      	movs	r3, #0
 8010260:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8010262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010264:	3304      	adds	r3, #4
 8010266:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8010268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a66      	ldr	r2, [pc, #408]	; (801040c <_tx_byte_pool_search+0x20c>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d143      	bne.n	80102fe <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8010276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010278:	2b00      	cmp	r3, #0
 801027a:	d104      	bne.n	8010286 <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010280:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8010282:	2301      	movs	r3, #1
 8010284:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8010286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010288:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 801028a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8010290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8010298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801029a:	3b08      	subs	r3, #8
 801029c:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801029e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d255      	bcs.n	8010352 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80102a6:	2300      	movs	r3, #0
 80102a8:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80102aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ac:	3304      	adds	r3, #4
 80102ae:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80102b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a54      	ldr	r2, [pc, #336]	; (801040c <_tx_byte_pool_search+0x20c>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d113      	bne.n	80102e6 <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80102be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c0:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 80102c2:	6a3b      	ldr	r3, [r7, #32]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c8:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	1e5a      	subs	r2, r3, #1
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	695b      	ldr	r3, [r3, #20]
 80102d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102da:	429a      	cmp	r2, r3
 80102dc:	d114      	bne.n	8010308 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102e2:	615a      	str	r2, [r3, #20]
 80102e4:	e010      	b.n	8010308 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80102e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e8:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 80102ea:	6a3b      	ldr	r3, [r7, #32]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80102f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 80102f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f8:	3b01      	subs	r3, #1
 80102fa:	643b      	str	r3, [r7, #64]	; 0x40
 80102fc:	e004      	b.n	8010308 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80102fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010300:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 8010302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8010308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 801030e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010310:	3b01      	subs	r3, #1
 8010312:	643b      	str	r3, [r7, #64]	; 0x40
 8010314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010316:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	f383 8810 	msr	PRIMASK, r3
}
 801031e:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010320:	f3ef 8310 	mrs	r3, PRIMASK
 8010324:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010326:	b672      	cpsid	i
    return(primask_value);
 8010328:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801032a:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6a1b      	ldr	r3, [r3, #32]
 8010330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010332:	429a      	cmp	r2, r3
 8010334:	d009      	beq.n	801034a <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	695b      	ldr	r3, [r3, #20]
 801033a:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	3301      	adds	r3, #1
 8010342:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010348:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801034a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801034c:	2b00      	cmp	r3, #0
 801034e:	d188      	bne.n	8010262 <_tx_byte_pool_search+0x62>
 8010350:	e000      	b.n	8010354 <_tx_byte_pool_search+0x154>
                    break;
 8010352:	46c0      	nop			; (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8010354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010356:	2b00      	cmp	r3, #0
 8010358:	d048      	beq.n	80103ec <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 801035a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	2b13      	cmp	r3, #19
 8010362:	d91e      	bls.n	80103a2 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	3308      	adds	r3, #8
 8010368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801036a:	18d3      	adds	r3, r2, r3
 801036c:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8010372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010374:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010380:	3304      	adds	r3, #4
 8010382:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8010384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010386:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8010388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038a:	4a20      	ldr	r2, [pc, #128]	; (801040c <_tx_byte_pool_search+0x20c>)
 801038c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	1c5a      	adds	r2, r3, #1
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8010398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801039c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80103a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103a4:	3304      	adds	r3, #4
 80103a6:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80103a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103aa:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	689a      	ldr	r2, [r3, #8]
 80103b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	3b08      	subs	r3, #8
 80103bc:	001a      	movs	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	695b      	ldr	r3, [r3, #20]
 80103c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d105      	bne.n	80103d8 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80103cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103ce:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80103d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	615a      	str	r2, [r3, #20]
 80103d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f383 8810 	msr	PRIMASK, r3
}
 80103e2:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80103e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103e6:	3308      	adds	r3, #8
 80103e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80103ea:	e007      	b.n	80103fc <_tx_byte_pool_search+0x1fc>
 80103ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	f383 8810 	msr	PRIMASK, r3
}
 80103f6:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80103f8:	2300      	movs	r3, #0
 80103fa:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80103fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80103fe:	0018      	movs	r0, r3
 8010400:	46bd      	mov	sp, r7
 8010402:	b014      	add	sp, #80	; 0x50
 8010404:	bd80      	pop	{r7, pc}
 8010406:	46c0      	nop			; (mov r8, r8)
 8010408:	20010694 	.word	0x20010694
 801040c:	ffffeeee 	.word	0xffffeeee

08010410 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08c      	sub	sp, #48	; 0x30
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801041a:	f3ef 8310 	mrs	r3, PRIMASK
 801041e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010420:	b672      	cpsid	i
    return(primask_value);
 8010422:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8010424:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801042a:	4b37      	ldr	r3, [pc, #220]	; (8010508 <_tx_event_flags_cleanup+0xf8>)
 801042c:	429a      	cmp	r2, r3
 801042e:	d161      	bne.n	80104f4 <_tx_event_flags_cleanup+0xe4>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	22ac      	movs	r2, #172	; 0xac
 8010434:	589b      	ldr	r3, [r3, r2]
 8010436:	683a      	ldr	r2, [r7, #0]
 8010438:	429a      	cmp	r2, r3
 801043a:	d15b      	bne.n	80104f4 <_tx_event_flags_cleanup+0xe4>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010440:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	2b00      	cmp	r3, #0
 8010446:	d055      	beq.n	80104f4 <_tx_event_flags_cleanup+0xe4>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8010448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a2f      	ldr	r2, [pc, #188]	; (801050c <_tx_event_flags_cleanup+0xfc>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d150      	bne.n	80104f4 <_tx_event_flags_cleanup+0xe4>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d04c      	beq.n	80104f4 <_tx_event_flags_cleanup+0xe4>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010462:	695b      	ldr	r3, [r3, #20]
 8010464:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8010466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d020      	beq.n	80104b4 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8010472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010474:	3b01      	subs	r3, #1
 8010476:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8010478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801047c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 801047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010480:	2b00      	cmp	r3, #0
 8010482:	d103      	bne.n	801048c <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010486:	2200      	movs	r2, #0
 8010488:	611a      	str	r2, [r3, #16]
 801048a:	e016      	b.n	80104ba <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010490:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010496:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	69ba      	ldr	r2, [r7, #24]
 801049c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	69fa      	ldr	r2, [r7, #28]
 80104a2:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 80104a4:	6a3a      	ldr	r2, [r7, #32]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d106      	bne.n	80104ba <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 80104ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ae:	69fa      	ldr	r2, [r7, #28]
 80104b0:	611a      	str	r2, [r3, #16]
 80104b2:	e002      	b.n	80104ba <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b6:	2201      	movs	r2, #1
 80104b8:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104be:	2b07      	cmp	r3, #7
 80104c0:	d118      	bne.n	80104f4 <_tx_event_flags_cleanup+0xe4>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2284      	movs	r2, #132	; 0x84
 80104c6:	2107      	movs	r1, #7
 80104c8:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80104ca:	4b11      	ldr	r3, [pc, #68]	; (8010510 <_tx_event_flags_cleanup+0x100>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	1c5a      	adds	r2, r3, #1
 80104d0:	4b0f      	ldr	r3, [pc, #60]	; (8010510 <_tx_event_flags_cleanup+0x100>)
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f383 8810 	msr	PRIMASK, r3
}
 80104de:	46c0      	nop			; (mov r8, r8)
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	0018      	movs	r0, r3
 80104e4:	f002 fc3e 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80104e8:	f3ef 8310 	mrs	r3, PRIMASK
 80104ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80104ee:	b672      	cpsid	i
    return(primask_value);
 80104f0:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80104f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	f383 8810 	msr	PRIMASK, r3
}
 80104fe:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010500:	46c0      	nop			; (mov r8, r8)
 8010502:	46bd      	mov	sp, r7
 8010504:	b00c      	add	sp, #48	; 0x30
 8010506:	bd80      	pop	{r7, pc}
 8010508:	08010411 	.word	0x08010411
 801050c:	4456444e 	.word	0x4456444e
 8010510:	2001072c 	.word	0x2001072c

08010514 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b08c      	sub	sp, #48	; 0x30
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010522:	2327      	movs	r3, #39	; 0x27
 8010524:	18fb      	adds	r3, r7, r3
 8010526:	2200      	movs	r2, #0
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	2324      	movs	r3, #36	; 0x24
 801052c:	623b      	str	r3, [r7, #32]
 801052e:	2300      	movs	r3, #0
 8010530:	62bb      	str	r3, [r7, #40]	; 0x28
 8010532:	e009      	b.n	8010548 <_tx_event_flags_create+0x34>
 8010534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010536:	1c5a      	adds	r2, r3, #1
 8010538:	62fa      	str	r2, [r7, #44]	; 0x2c
 801053a:	2227      	movs	r2, #39	; 0x27
 801053c:	18ba      	adds	r2, r7, r2
 801053e:	7812      	ldrb	r2, [r2, #0]
 8010540:	701a      	strb	r2, [r3, #0]
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	3301      	adds	r3, #1
 8010546:	62bb      	str	r3, [r7, #40]	; 0x28
 8010548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	429a      	cmp	r2, r3
 801054e:	d3f1      	bcc.n	8010534 <_tx_event_flags_create+0x20>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010556:	f3ef 8310 	mrs	r3, PRIMASK
 801055a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801055c:	b672      	cpsid	i
    return(primask_value);
 801055e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8010560:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4a18      	ldr	r2, [pc, #96]	; (80105c8 <_tx_event_flags_create+0xb4>)
 8010566:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8010568:	4b18      	ldr	r3, [pc, #96]	; (80105cc <_tx_event_flags_create+0xb8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d109      	bne.n	8010584 <_tx_event_flags_create+0x70>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8010570:	4b17      	ldr	r3, [pc, #92]	; (80105d0 <_tx_event_flags_create+0xbc>)
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	601a      	str	r2, [r3, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	61da      	str	r2, [r3, #28]
 8010582:	e011      	b.n	80105a8 <_tx_event_flags_create+0x94>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8010584:	4b12      	ldr	r3, [pc, #72]	; (80105d0 <_tx_event_flags_create+0xbc>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	69db      	ldr	r3, [r3, #28]
 801058e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	69ba      	ldr	r2, [r7, #24]
 80105a6:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 80105a8:	4b08      	ldr	r3, [pc, #32]	; (80105cc <_tx_event_flags_create+0xb8>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	4b07      	ldr	r3, [pc, #28]	; (80105cc <_tx_event_flags_create+0xb8>)
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f383 8810 	msr	PRIMASK, r3
}
 80105bc:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80105be:	2300      	movs	r3, #0
}
 80105c0:	0018      	movs	r0, r3
 80105c2:	46bd      	mov	sp, r7
 80105c4:	b00c      	add	sp, #48	; 0x30
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	4456444e 	.word	0x4456444e
 80105cc:	20010670 	.word	0x20010670
 80105d0:	2001066c 	.word	0x2001066c

080105d4 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b08e      	sub	sp, #56	; 0x38
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80105dc:	f3ef 8310 	mrs	r3, PRIMASK
 80105e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80105e2:	b672      	cpsid	i
    return(primask_value);
 80105e4:	69fb      	ldr	r3, [r7, #28]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 80105e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 80105ee:	4b3c      	ldr	r3, [pc, #240]	; (80106e0 <_tx_event_flags_delete+0x10c>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	1e5a      	subs	r2, r3, #1
 80105f4:	4b3a      	ldr	r3, [pc, #232]	; (80106e0 <_tx_event_flags_delete+0x10c>)
 80105f6:	601a      	str	r2, [r3, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80105f8:	4b39      	ldr	r3, [pc, #228]	; (80106e0 <_tx_event_flags_delete+0x10c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d103      	bne.n	8010608 <_tx_event_flags_delete+0x34>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 8010600:	4b38      	ldr	r3, [pc, #224]	; (80106e4 <_tx_event_flags_delete+0x110>)
 8010602:	2200      	movs	r2, #0
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	e013      	b.n	8010630 <_tx_event_flags_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	627b      	str	r3, [r7, #36]	; 0x24
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010618:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801061e:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 8010620:	4b30      	ldr	r3, [pc, #192]	; (80106e4 <_tx_event_flags_delete+0x110>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	429a      	cmp	r2, r3
 8010628:	d102      	bne.n	8010630 <_tx_event_flags_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 801062a:	4b2e      	ldr	r3, [pc, #184]	; (80106e4 <_tx_event_flags_delete+0x110>)
 801062c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801062e:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010630:	4b2d      	ldr	r3, [pc, #180]	; (80106e8 <_tx_event_flags_delete+0x114>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	1c5a      	adds	r2, r3, #1
 8010636:	4b2c      	ldr	r3, [pc, #176]	; (80106e8 <_tx_event_flags_delete+0x114>)
 8010638:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	691b      	ldr	r3, [r3, #16]
 801063e:	637b      	str	r3, [r7, #52]	; 0x34
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	633b      	str	r3, [r7, #48]	; 0x30
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	615a      	str	r2, [r3, #20]
 8010652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010654:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	f383 8810 	msr	PRIMASK, r3
}
 801065c:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801065e:	e023      	b.n	80106a8 <_tx_event_flags_delete+0xd4>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	3b01      	subs	r3, #1
 8010664:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010666:	f3ef 8310 	mrs	r3, PRIMASK
 801066a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801066c:	b672      	cpsid	i
    return(primask_value);
 801066e:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8010670:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010674:	2200      	movs	r2, #0
 8010676:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8010678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067a:	2284      	movs	r2, #132	; 0x84
 801067c:	2101      	movs	r1, #1
 801067e:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010684:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8010686:	4b18      	ldr	r3, [pc, #96]	; (80106e8 <_tx_event_flags_delete+0x114>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	1c5a      	adds	r2, r3, #1
 801068c:	4b16      	ldr	r3, [pc, #88]	; (80106e8 <_tx_event_flags_delete+0x114>)
 801068e:	601a      	str	r2, [r3, #0]
 8010690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010692:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	f383 8810 	msr	PRIMASK, r3
}
 801069a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069e:	0018      	movs	r0, r3
 80106a0:	f002 fb60 	bl	8012d64 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80106a4:	6a3b      	ldr	r3, [r7, #32]
 80106a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1d8      	bne.n	8010660 <_tx_event_flags_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80106ae:	f3ef 8310 	mrs	r3, PRIMASK
 80106b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80106b4:	b672      	cpsid	i
    return(primask_value);
 80106b6:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80106b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80106ba:	4b0b      	ldr	r3, [pc, #44]	; (80106e8 <_tx_event_flags_delete+0x114>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	1e5a      	subs	r2, r3, #1
 80106c0:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <_tx_event_flags_delete+0x114>)
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f383 8810 	msr	PRIMASK, r3
}
 80106ce:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80106d0:	f002 fb10 	bl	8012cf4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	0018      	movs	r0, r3
 80106d8:	46bd      	mov	sp, r7
 80106da:	b00e      	add	sp, #56	; 0x38
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	46c0      	nop			; (mov r8, r8)
 80106e0:	20010670 	.word	0x20010670
 80106e4:	2001066c 	.word	0x2001066c
 80106e8:	2001072c 	.word	0x2001072c

080106ec <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b094      	sub	sp, #80	; 0x50
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80106fa:	f3ef 8310 	mrs	r3, PRIMASK
 80106fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010700:	b672      	cpsid	i
    return(primask_value);
 8010702:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8010704:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2202      	movs	r2, #2
 8010710:	4013      	ands	r3, r2
 8010712:	63bb      	str	r3, [r7, #56]	; 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6a1b      	ldr	r3, [r3, #32]
 8010718:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 801071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071c:	2b00      	cmp	r3, #0
 801071e:	d004      	beq.n	801072a <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8010720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010722:	43da      	mvns	r2, r3
 8010724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010726:	4013      	ands	r3, r2
 8010728:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 801072a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072c:	2b02      	cmp	r3, #2
 801072e:	d10a      	bne.n	8010746 <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8010730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	4013      	ands	r3, r2
 8010736:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8010738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	429a      	cmp	r2, r3
 801073e:	d006      	beq.n	801074e <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8010740:	2300      	movs	r3, #0
 8010742:	643b      	str	r3, [r7, #64]	; 0x40
 8010744:	e003      	b.n	801074e <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8010746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	4013      	ands	r3, r2
 801074c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 801074e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010750:	2b00      	cmp	r3, #0
 8010752:	d029      	beq.n	80107a8 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010758:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	4013      	ands	r3, r2
 8010760:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d11c      	bne.n	80107a2 <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8010768:	2300      	movs	r3, #0
 801076a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	695b      	ldr	r3, [r3, #20]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d005      	beq.n	8010780 <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	691b      	ldr	r3, [r3, #16]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d101      	bne.n	8010780 <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 801077c:	2301      	movs	r3, #1
 801077e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8010780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010782:	2b01      	cmp	r3, #1
 8010784:	d106      	bne.n	8010794 <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6a1a      	ldr	r2, [r3, #32]
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	621a      	str	r2, [r3, #32]
 8010792:	e006      	b.n	80107a2 <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	43d2      	mvns	r2, r2
 801079c:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80107a2:	2300      	movs	r3, #0
 80107a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80107a6:	e06f      	b.n	8010888 <_tx_event_flags_get+0x19c>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80107a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d06a      	beq.n	8010884 <_tx_event_flags_get+0x198>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80107ae:	4b3c      	ldr	r3, [pc, #240]	; (80108a0 <_tx_event_flags_get+0x1b4>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d002      	beq.n	80107bc <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 80107b6:	2307      	movs	r3, #7
 80107b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80107ba:	e065      	b.n	8010888 <_tx_event_flags_get+0x19c>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80107bc:	4b39      	ldr	r3, [pc, #228]	; (80108a4 <_tx_event_flags_get+0x1b8>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	633b      	str	r3, [r7, #48]	; 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	4a38      	ldr	r2, [pc, #224]	; (80108a8 <_tx_event_flags_get+0x1bc>)
 80107c6:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80107c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	2180      	movs	r1, #128	; 0x80
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	505a      	str	r2, [r3, r1]

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 80107dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	22ac      	movs	r2, #172	; 0xac
 80107e6:	589b      	ldr	r3, [r3, r2]
 80107e8:	1c5a      	adds	r2, r3, #1
 80107ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ec:	21ac      	movs	r1, #172	; 0xac
 80107ee:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	695b      	ldr	r3, [r3, #20]
 80107f4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80107f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d109      	bne.n	8010810 <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010800:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010806:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801080c:	675a      	str	r2, [r3, #116]	; 0x74
 801080e:	e011      	b.n	8010834 <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801081a:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010820:	627b      	str	r3, [r7, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010826:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082c:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010832:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	695b      	ldr	r3, [r3, #20]
 8010838:	1c5a      	adds	r2, r3, #1
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	2207      	movs	r2, #7
 8010842:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	2201      	movs	r2, #1
 8010848:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801084e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010850:	4b13      	ldr	r3, [pc, #76]	; (80108a0 <_tx_event_flags_get+0x1b4>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	4b12      	ldr	r3, [pc, #72]	; (80108a0 <_tx_event_flags_get+0x1b4>)
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f383 8810 	msr	PRIMASK, r3
}
 8010864:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	0018      	movs	r0, r3
 801086a:	f002 fb7b 	bl	8012f64 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801086e:	f3ef 8310 	mrs	r3, PRIMASK
 8010872:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010874:	b672      	cpsid	i
    return(primask_value);
 8010876:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 8010878:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087c:	2284      	movs	r2, #132	; 0x84
 801087e:	589b      	ldr	r3, [r3, r2]
 8010880:	64bb      	str	r3, [r7, #72]	; 0x48
 8010882:	e001      	b.n	8010888 <_tx_event_flags_get+0x19c>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8010884:	2307      	movs	r3, #7
 8010886:	64bb      	str	r3, [r7, #72]	; 0x48
 8010888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801088a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	f383 8810 	msr	PRIMASK, r3
}
 8010892:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8010894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010896:	0018      	movs	r0, r3
 8010898:	46bd      	mov	sp, r7
 801089a:	b014      	add	sp, #80	; 0x50
 801089c:	bd80      	pop	{r7, pc}
 801089e:	46c0      	nop			; (mov r8, r8)
 80108a0:	2001072c 	.word	0x2001072c
 80108a4:	20010694 	.word	0x20010694
 80108a8:	08010411 	.word	0x08010411

080108ac <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80108ac:	b590      	push	{r4, r7, lr}
 80108ae:	b0a3      	sub	sp, #140	; 0x8c
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80108b8:	f3ef 8310 	mrs	r3, PRIMASK
 80108bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80108be:	b672      	cpsid	i
    return(primask_value);
 80108c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80108c2:	2284      	movs	r2, #132	; 0x84
 80108c4:	18ba      	adds	r2, r7, r2
 80108c6:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2202      	movs	r2, #2
 80108cc:	4013      	ands	r3, r2
 80108ce:	d024      	beq.n	801091a <_tx_event_flags_set+0x6e>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 80108d0:	2300      	movs	r3, #0
 80108d2:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d005      	beq.n	80108e8 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 80108e4:	2301      	movs	r3, #1
 80108e6:	663b      	str	r3, [r7, #96]	; 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 80108e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d107      	bne.n	80108fe <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6a1a      	ldr	r2, [r3, #32]
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	43db      	mvns	r3, r3
 80108f6:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	621a      	str	r2, [r3, #32]
 80108fc:	e005      	b.n	801090a <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	689b      	ldr	r3, [r3, #8]
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	609a      	str	r2, [r3, #8]
 801090a:	2384      	movs	r3, #132	; 0x84
 801090c:	18fb      	adds	r3, r7, r3
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	f383 8810 	msr	PRIMASK, r3
}
 8010918:	e1ce      	b.n	8010cb8 <_tx_event_flags_set+0x40c>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	689a      	ldr	r2, [r3, #8]
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6a1b      	ldr	r3, [r3, #32]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d006      	beq.n	801093c <_tx_event_flags_set+0x90>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6a1b      	ldr	r3, [r3, #32]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	43d2      	mvns	r2, r2
 8010936:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 801093c:	2300      	movs	r3, #0
 801093e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	695b      	ldr	r3, [r3, #20]
 8010944:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	691b      	ldr	r3, [r3, #16]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d100      	bne.n	8010950 <_tx_event_flags_set+0xa4>
 801094e:	e19f      	b.n	8010c90 <_tx_event_flags_set+0x3e4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8010950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010952:	2b01      	cmp	r3, #1
 8010954:	d16c      	bne.n	8010a30 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	2280      	movs	r2, #128	; 0x80
 801095c:	18b9      	adds	r1, r7, r2
 801095e:	600b      	str	r3, [r1, #0]

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8010966:	18bb      	adds	r3, r7, r2
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801096c:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 801096e:	18bb      	adds	r3, r7, r2
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2280      	movs	r2, #128	; 0x80
 8010974:	589b      	ldr	r3, [r3, r2]
 8010976:	657b      	str	r3, [r7, #84]	; 0x54

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8010978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801097a:	2202      	movs	r2, #2
 801097c:	4013      	ands	r3, r2
 801097e:	653b      	str	r3, [r7, #80]	; 0x50

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8010980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010982:	2b02      	cmp	r3, #2
 8010984:	d10a      	bne.n	801099c <_tx_event_flags_set+0xf0>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8010986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801098a:	4013      	ands	r3, r2
 801098c:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 801098e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010992:	429a      	cmp	r2, r3
 8010994:	d006      	beq.n	80109a4 <_tx_event_flags_set+0xf8>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8010996:	2300      	movs	r3, #0
 8010998:	66bb      	str	r3, [r7, #104]	; 0x68
 801099a:	e003      	b.n	80109a4 <_tx_event_flags_set+0xf8>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 801099c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801099e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109a0:	4013      	ands	r3, r2
 80109a2:	66bb      	str	r3, [r7, #104]	; 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80109a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d100      	bne.n	80109ac <_tx_event_flags_set+0x100>
 80109aa:	e178      	b.n	8010c9e <_tx_event_flags_set+0x3f2>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 80109ac:	2301      	movs	r3, #1
 80109ae:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80109b0:	2380      	movs	r3, #128	; 0x80
 80109b2:	18fb      	adds	r3, r7, r3
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    *suspend_info_ptr =  current_event_flags;
 80109ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80109be:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80109c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109c2:	2201      	movs	r2, #1
 80109c4:	4013      	ands	r3, r2
 80109c6:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 80109c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d106      	bne.n	80109dc <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109d4:	43d2      	mvns	r2, r2
 80109d6:	401a      	ands	r2, r3
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2200      	movs	r2, #0
 80109e6:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80109e8:	2080      	movs	r0, #128	; 0x80
 80109ea:	183b      	adds	r3, r7, r0
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2200      	movs	r2, #0
 80109f0:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80109f2:	183b      	adds	r3, r7, r0
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	2284      	movs	r2, #132	; 0x84
 80109f8:	2100      	movs	r1, #0
 80109fa:	5099      	str	r1, [r3, r2]
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 80109fc:	4bb1      	ldr	r3, [pc, #708]	; (8010cc4 <_tx_event_flags_set+0x418>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	4bb0      	ldr	r3, [pc, #704]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	2484      	movs	r4, #132	; 0x84
 8010a08:	193b      	adds	r3, r7, r4
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	f383 8810 	msr	PRIMASK, r3
}
 8010a14:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010a16:	183b      	adds	r3, r7, r0
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	0018      	movs	r0, r3
 8010a1c:	f002 f9a2 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010a20:	f3ef 8310 	mrs	r3, PRIMASK
 8010a24:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010a26:	b672      	cpsid	i
    return(primask_value);
 8010a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8010a2a:	193a      	adds	r2, r7, r4
 8010a2c:	6013      	str	r3, [r2, #0]
 8010a2e:	e136      	b.n	8010c9e <_tx_event_flags_set+0x3f2>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	691b      	ldr	r3, [r3, #16]
 8010a34:	677b      	str	r3, [r7, #116]	; 0x74
                thread_ptr =      suspended_list;
 8010a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a38:	2280      	movs	r2, #128	; 0x80
 8010a3a:	18ba      	adds	r2, r7, r2
 8010a3c:	6013      	str	r3, [r2, #0]

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2200      	movs	r2, #0
 8010a42:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8010a44:	2300      	movs	r3, #0
 8010a46:	67fb      	str	r3, [r7, #124]	; 0x7c
                last_satisfied =  TX_NULL;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8010a52:	4b9c      	ldr	r3, [pc, #624]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	1c5a      	adds	r2, r3, #1
 8010a58:	4b9a      	ldr	r3, [pc, #616]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010a5a:	601a      	str	r2, [r3, #0]
 8010a5c:	2284      	movs	r2, #132	; 0x84
 8010a5e:	18bb      	adds	r3, r7, r2
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a66:	f383 8810 	msr	PRIMASK, r3
}
 8010a6a:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010a72:	b672      	cpsid	i
    return(primask_value);
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 8010a76:	18ba      	adds	r2, r7, r2
 8010a78:	6013      	str	r3, [r2, #0]
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d00e      	beq.n	8010aa0 <_tx_event_flags_set+0x1f4>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2200      	movs	r2, #0
 8010a86:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8010a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a8a:	2280      	movs	r2, #128	; 0x80
 8010a8c:	18ba      	adds	r2, r7, r2
 8010a8e:	6013      	str	r3, [r2, #0]

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	695b      	ldr	r3, [r3, #20]
 8010a94:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010aa0:	2280      	movs	r2, #128	; 0x80
 8010aa2:	18bb      	adds	r3, r7, r2
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aa8:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8010aaa:	18bb      	adds	r3, r7, r2
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ab0:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8010ab2:	18bb      	adds	r3, r7, r2
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2280      	movs	r2, #128	; 0x80
 8010ab8:	589b      	ldr	r3, [r3, r2]
 8010aba:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8010abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010abe:	2202      	movs	r2, #2
 8010ac0:	4013      	ands	r3, r2
 8010ac2:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8010ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d10a      	bne.n	8010ae0 <_tx_event_flags_set+0x234>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8010aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ace:	4013      	ands	r3, r2
 8010ad0:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8010ad2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d006      	beq.n	8010ae8 <_tx_event_flags_set+0x23c>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8010ada:	2300      	movs	r3, #0
 8010adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ade:	e003      	b.n	8010ae8 <_tx_event_flags_set+0x23c>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8010ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8010ae8:	2380      	movs	r3, #128	; 0x80
 8010aea:	18fb      	adds	r3, r7, r3
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af0:	2b07      	cmp	r3, #7
 8010af2:	d001      	beq.n	8010af8 <_tx_event_flags_set+0x24c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8010af4:	2301      	movs	r3, #1
 8010af6:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8010af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d069      	beq.n	8010bd2 <_tx_event_flags_set+0x326>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8010afe:	2301      	movs	r3, #1
 8010b00:	667b      	str	r3, [r7, #100]	; 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8010b02:	2280      	movs	r2, #128	; 0x80
 8010b04:	18bb      	adds	r3, r7, r2
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b0a:	2b07      	cmp	r3, #7
 8010b0c:	d11e      	bne.n	8010b4c <_tx_event_flags_set+0x2a0>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010b0e:	18bb      	adds	r3, r7, r2
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b14:	64fb      	str	r3, [r7, #76]	; 0x4c
                            *suspend_info_ptr =  current_event_flags;
 8010b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010b1a:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b1e:	2201      	movs	r2, #1
 8010b20:	4013      	ands	r3, r2
 8010b22:	64bb      	str	r3, [r7, #72]	; 0x48

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8010b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d106      	bne.n	8010b38 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b30:	43d2      	mvns	r2, r2
 8010b32:	401a      	ands	r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010b38:	2180      	movs	r1, #128	; 0x80
 8010b3a:	187b      	adds	r3, r7, r1
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010b42:	187b      	adds	r3, r7, r1
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2284      	movs	r2, #132	; 0x84
 8010b48:	2100      	movs	r1, #0
 8010b4a:	5099      	str	r1, [r3, r2]

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010b4c:	2280      	movs	r2, #128	; 0x80
 8010b4e:	18bb      	adds	r3, r7, r2
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b54:	18ba      	adds	r2, r7, r2
 8010b56:	6812      	ldr	r2, [r2, #0]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d102      	bne.n	8010b62 <_tx_event_flags_set+0x2b6>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	677b      	str	r3, [r7, #116]	; 0x74
 8010b60:	e017      	b.n	8010b92 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8010b62:	2180      	movs	r1, #128	; 0x80
 8010b64:	187b      	adds	r3, r7, r1
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b6a:	647b      	str	r3, [r7, #68]	; 0x44
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8010b6c:	187b      	adds	r3, r7, r1
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b72:	643b      	str	r3, [r7, #64]	; 0x40
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b78:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b7e:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8010b80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010b82:	187b      	adds	r3, r7, r1
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d103      	bne.n	8010b92 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8010b8a:	187b      	adds	r3, r7, r1
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b90:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	1e5a      	subs	r2, r3, #1
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8010b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10b      	bne.n	8010bba <_tx_event_flags_set+0x30e>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8010ba2:	2280      	movs	r2, #128	; 0x80
 8010ba4:	18bb      	adds	r3, r7, r2
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
                            last_satisfied =  thread_ptr;
 8010baa:	18bb      	adds	r3, r7, r2
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	67bb      	str	r3, [r7, #120]	; 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8010bb0:	18bb      	adds	r3, r7, r2
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	671a      	str	r2, [r3, #112]	; 0x70
 8010bb8:	e00b      	b.n	8010bd2 <_tx_event_flags_set+0x326>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8010bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bbc:	2180      	movs	r1, #128	; 0x80
 8010bbe:	187a      	adds	r2, r7, r1
 8010bc0:	6812      	ldr	r2, [r2, #0]
 8010bc2:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8010bc4:	187b      	adds	r3, r7, r1
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8010bcc:	187b      	adds	r3, r7, r1
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	67bb      	str	r3, [r7, #120]	; 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8010bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bd4:	2280      	movs	r2, #128	; 0x80
 8010bd6:	18ba      	adds	r2, r7, r2
 8010bd8:	6013      	str	r3, [r2, #0]

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8010bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	673b      	str	r3, [r7, #112]	; 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8010be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d000      	beq.n	8010be8 <_tx_event_flags_set+0x33c>
 8010be6:	e739      	b.n	8010a5c <_tx_event_flags_set+0x1b0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010bec:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00a      	beq.n	8010c0c <_tx_event_flags_set+0x360>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	689a      	ldr	r2, [r3, #8]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	43db      	mvns	r3, r3
 8010c00:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	621a      	str	r2, [r3, #32]
 8010c0c:	2384      	movs	r3, #132	; 0x84
 8010c0e:	18fb      	adds	r3, r7, r3
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c16:	f383 8810 	msr	PRIMASK, r3
}
 8010c1a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8010c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c1e:	2280      	movs	r2, #128	; 0x80
 8010c20:	18ba      	adds	r2, r7, r2
 8010c22:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 8010c24:	e021      	b.n	8010c6a <_tx_event_flags_set+0x3be>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010c26:	2180      	movs	r1, #128	; 0x80
 8010c28:	187b      	adds	r3, r7, r1
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010c30:	f3ef 8310 	mrs	r3, PRIMASK
 8010c34:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010c36:	b672      	cpsid	i
    return(primask_value);
 8010c38:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8010c3a:	2084      	movs	r0, #132	; 0x84
 8010c3c:	183a      	adds	r2, r7, r0
 8010c3e:	6013      	str	r3, [r2, #0]
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8010c40:	4b20      	ldr	r3, [pc, #128]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	4b1f      	ldr	r3, [pc, #124]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	183b      	adds	r3, r7, r0
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010c50:	6a3b      	ldr	r3, [r7, #32]
 8010c52:	f383 8810 	msr	PRIMASK, r3
}
 8010c56:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010c58:	000c      	movs	r4, r1
 8010c5a:	187b      	adds	r3, r7, r1
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	0018      	movs	r0, r3
 8010c60:	f002 f880 	bl	8012d64 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8010c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c66:	193a      	adds	r2, r7, r4
 8010c68:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 8010c6a:	2380      	movs	r3, #128	; 0x80
 8010c6c:	18fb      	adds	r3, r7, r3
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1d8      	bne.n	8010c26 <_tx_event_flags_set+0x37a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010c74:	f3ef 8310 	mrs	r3, PRIMASK
 8010c78:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010c7a:	b672      	cpsid	i
    return(primask_value);
 8010c7c:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8010c7e:	2284      	movs	r2, #132	; 0x84
 8010c80:	18ba      	adds	r2, r7, r2
 8010c82:	6013      	str	r3, [r2, #0]

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8010c84:	4b0f      	ldr	r3, [pc, #60]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	1e5a      	subs	r2, r3, #1
 8010c8a:	4b0e      	ldr	r3, [pc, #56]	; (8010cc4 <_tx_event_flags_set+0x418>)
 8010c8c:	601a      	str	r2, [r3, #0]
 8010c8e:	e006      	b.n	8010c9e <_tx_event_flags_set+0x3f2>
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	695b      	ldr	r3, [r3, #20]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <_tx_event_flags_set+0x3f2>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	60da      	str	r2, [r3, #12]
 8010c9e:	2384      	movs	r3, #132	; 0x84
 8010ca0:	18fb      	adds	r3, r7, r3
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f383 8810 	msr	PRIMASK, r3
}
 8010cac:	46c0      	nop			; (mov r8, r8)
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8010cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d101      	bne.n	8010cb8 <_tx_event_flags_set+0x40c>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8010cb4:	f002 f81e 	bl	8012cf4 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	0018      	movs	r0, r3
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	b023      	add	sp, #140	; 0x8c
 8010cc0:	bd90      	pop	{r4, r7, pc}
 8010cc2:	46c0      	nop			; (mov r8, r8)
 8010cc4:	2001072c 	.word	0x2001072c

08010cc8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8010ccc:	f001 fe20 	bl	8012910 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8010cd0:	f002 fc26 	bl	8013520 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8010cd4:	4b13      	ldr	r3, [pc, #76]	; (8010d24 <_tx_initialize_high_level+0x5c>)
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	4b13      	ldr	r3, [pc, #76]	; (8010d28 <_tx_initialize_high_level+0x60>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8010ce0:	4b12      	ldr	r3, [pc, #72]	; (8010d2c <_tx_initialize_high_level+0x64>)
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	4b12      	ldr	r3, [pc, #72]	; (8010d30 <_tx_initialize_high_level+0x68>)
 8010ce8:	2200      	movs	r2, #0
 8010cea:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8010cec:	4b11      	ldr	r3, [pc, #68]	; (8010d34 <_tx_initialize_high_level+0x6c>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	4b11      	ldr	r3, [pc, #68]	; (8010d38 <_tx_initialize_high_level+0x70>)
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8010cf8:	4b10      	ldr	r3, [pc, #64]	; (8010d3c <_tx_initialize_high_level+0x74>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	601a      	str	r2, [r3, #0]
 8010cfe:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <_tx_initialize_high_level+0x78>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8010d04:	4b0f      	ldr	r3, [pc, #60]	; (8010d44 <_tx_initialize_high_level+0x7c>)
 8010d06:	2200      	movs	r2, #0
 8010d08:	601a      	str	r2, [r3, #0]
 8010d0a:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <_tx_initialize_high_level+0x80>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8010d10:	4b0e      	ldr	r3, [pc, #56]	; (8010d4c <_tx_initialize_high_level+0x84>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	4b0e      	ldr	r3, [pc, #56]	; (8010d50 <_tx_initialize_high_level+0x88>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]
#endif
}
 8010d1c:	46c0      	nop			; (mov r8, r8)
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	46c0      	nop			; (mov r8, r8)
 8010d24:	2001065c 	.word	0x2001065c
 8010d28:	20010660 	.word	0x20010660
 8010d2c:	20010664 	.word	0x20010664
 8010d30:	20010668 	.word	0x20010668
 8010d34:	2001066c 	.word	0x2001066c
 8010d38:	20010670 	.word	0x20010670
 8010d3c:	2001067c 	.word	0x2001067c
 8010d40:	20010680 	.word	0x20010680
 8010d44:	20010684 	.word	0x20010684
 8010d48:	20010688 	.word	0x20010688
 8010d4c:	20010674 	.word	0x20010674
 8010d50:	20010678 	.word	0x20010678

08010d54 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010d58:	4b10      	ldr	r3, [pc, #64]	; (8010d9c <_tx_initialize_kernel_enter+0x48>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a10      	ldr	r2, [pc, #64]	; (8010da0 <_tx_initialize_kernel_enter+0x4c>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d00b      	beq.n	8010d7a <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010d62:	4b0e      	ldr	r3, [pc, #56]	; (8010d9c <_tx_initialize_kernel_enter+0x48>)
 8010d64:	4a0f      	ldr	r2, [pc, #60]	; (8010da4 <_tx_initialize_kernel_enter+0x50>)
 8010d66:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8010d68:	f7ef f9d2 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8010d6c:	f7ff ffac 	bl	8010cc8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8010d70:	4b0d      	ldr	r3, [pc, #52]	; (8010da8 <_tx_initialize_kernel_enter+0x54>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	1c5a      	adds	r2, r3, #1
 8010d76:	4b0c      	ldr	r3, [pc, #48]	; (8010da8 <_tx_initialize_kernel_enter+0x54>)
 8010d78:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010d7a:	4b08      	ldr	r3, [pc, #32]	; (8010d9c <_tx_initialize_kernel_enter+0x48>)
 8010d7c:	4a09      	ldr	r2, [pc, #36]	; (8010da4 <_tx_initialize_kernel_enter+0x50>)
 8010d7e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010d80:	4b0a      	ldr	r3, [pc, #40]	; (8010dac <_tx_initialize_kernel_enter+0x58>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	0018      	movs	r0, r3
 8010d86:	f7f5 fca3 	bl	80066d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8010d8a:	4b04      	ldr	r3, [pc, #16]	; (8010d9c <_tx_initialize_kernel_enter+0x48>)
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010d90:	f7ef fa06 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010d94:	46c0      	nop			; (mov r8, r8)
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	46c0      	nop			; (mov r8, r8)
 8010d9c:	20000010 	.word	0x20000010
 8010da0:	f0f0f0f1 	.word	0xf0f0f0f1
 8010da4:	f0f0f0f0 	.word	0xf0f0f0f0
 8010da8:	2001072c 	.word	0x2001072c
 8010dac:	2001068c 	.word	0x2001068c

08010db0 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b08c      	sub	sp, #48	; 0x30
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010dba:	f3ef 8310 	mrs	r3, PRIMASK
 8010dbe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010dc0:	b672      	cpsid	i
    return(primask_value);
 8010dc2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8010dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010dca:	4b32      	ldr	r3, [pc, #200]	; (8010e94 <_tx_mutex_cleanup+0xe4>)
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d157      	bne.n	8010e80 <_tx_mutex_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	22ac      	movs	r2, #172	; 0xac
 8010dd4:	589b      	ldr	r3, [r3, r2]
 8010dd6:	683a      	ldr	r2, [r7, #0]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d151      	bne.n	8010e80 <_tx_mutex_cleanup+0xd0>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010de0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8010de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d04b      	beq.n	8010e80 <_tx_mutex_cleanup+0xd0>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8010de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a2a      	ldr	r2, [pc, #168]	; (8010e98 <_tx_mutex_cleanup+0xe8>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d146      	bne.n	8010e80 <_tx_mutex_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d042      	beq.n	8010e80 <_tx_mutex_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	69db      	ldr	r3, [r3, #28]
 8010e04:	1e5a      	subs	r2, r3, #1
 8010e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e08:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d103      	bne.n	8010e1e <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e18:	2200      	movs	r2, #0
 8010e1a:	619a      	str	r2, [r3, #24]
 8010e1c:	e013      	b.n	8010e46 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e22:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e28:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010e2a:	6a3b      	ldr	r3, [r7, #32]
 8010e2c:	69fa      	ldr	r2, [r7, #28]
 8010e2e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	6a3a      	ldr	r2, [r7, #32]
 8010e34:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e38:	699b      	ldr	r3, [r3, #24]
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d102      	bne.n	8010e46 <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8010e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e42:	6a3a      	ldr	r2, [r7, #32]
 8010e44:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e4a:	2b0d      	cmp	r3, #13
 8010e4c:	d118      	bne.n	8010e80 <_tx_mutex_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2284      	movs	r2, #132	; 0x84
 8010e52:	211d      	movs	r1, #29
 8010e54:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010e56:	4b11      	ldr	r3, [pc, #68]	; (8010e9c <_tx_mutex_cleanup+0xec>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	1c5a      	adds	r2, r3, #1
 8010e5c:	4b0f      	ldr	r3, [pc, #60]	; (8010e9c <_tx_mutex_cleanup+0xec>)
 8010e5e:	601a      	str	r2, [r3, #0]
 8010e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e62:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	f383 8810 	msr	PRIMASK, r3
}
 8010e6a:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	0018      	movs	r0, r3
 8010e70:	f001 ff78 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010e74:	f3ef 8310 	mrs	r3, PRIMASK
 8010e78:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010e7a:	b672      	cpsid	i
    return(primask_value);
 8010e7c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e82:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f383 8810 	msr	PRIMASK, r3
}
 8010e8a:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010e8c:	46c0      	nop			; (mov r8, r8)
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	b00c      	add	sp, #48	; 0x30
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	08010db1 	.word	0x08010db1
 8010e98:	4d555445 	.word	0x4d555445
 8010e9c:	2001072c 	.word	0x2001072c

08010ea0 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8010eac:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010eae:	b672      	cpsid	i
    return(primask_value);
 8010eb0:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010eb2:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010eb4:	4b1a      	ldr	r3, [pc, #104]	; (8010f20 <_tx_mutex_thread_release+0x80>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	4b19      	ldr	r3, [pc, #100]	; (8010f20 <_tx_mutex_thread_release+0x80>)
 8010ebc:	601a      	str	r2, [r3, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	22a4      	movs	r2, #164	; 0xa4
 8010ec2:	589b      	ldr	r3, [r3, r2]
 8010ec4:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d016      	beq.n	8010efa <_tx_mutex_thread_release+0x5a>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	609a      	str	r2, [r3, #8]
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f383 8810 	msr	PRIMASK, r3
}
 8010edc:	46c0      	nop			; (mov r8, r8)
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	0018      	movs	r0, r3
 8010ee2:	f000 fafb 	bl	80114dc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8010eea:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010eec:	b672      	cpsid	i
    return(primask_value);
 8010eee:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8010ef0:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	22a4      	movs	r2, #164	; 0xa4
 8010ef6:	589b      	ldr	r3, [r3, r2]
 8010ef8:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d1de      	bne.n	8010ebe <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8010f00:	4b07      	ldr	r3, [pc, #28]	; (8010f20 <_tx_mutex_thread_release+0x80>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	1e5a      	subs	r2, r3, #1
 8010f06:	4b06      	ldr	r3, [pc, #24]	; (8010f20 <_tx_mutex_thread_release+0x80>)
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	f383 8810 	msr	PRIMASK, r3
}
 8010f14:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010f16:	46c0      	nop			; (mov r8, r8)
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	b008      	add	sp, #32
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	46c0      	nop			; (mov r8, r8)
 8010f20:	2001072c 	.word	0x2001072c

08010f24 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b08e      	sub	sp, #56	; 0x38
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	637b      	str	r3, [r7, #52]	; 0x34
 8010f34:	232f      	movs	r3, #47	; 0x2f
 8010f36:	18fb      	adds	r3, r7, r3
 8010f38:	2200      	movs	r2, #0
 8010f3a:	701a      	strb	r2, [r3, #0]
 8010f3c:	2334      	movs	r3, #52	; 0x34
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f40:	2300      	movs	r3, #0
 8010f42:	633b      	str	r3, [r7, #48]	; 0x30
 8010f44:	e009      	b.n	8010f5a <_tx_mutex_create+0x36>
 8010f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f48:	1c5a      	adds	r2, r3, #1
 8010f4a:	637a      	str	r2, [r7, #52]	; 0x34
 8010f4c:	222f      	movs	r2, #47	; 0x2f
 8010f4e:	18ba      	adds	r2, r7, r2
 8010f50:	7812      	ldrb	r2, [r2, #0]
 8010f52:	701a      	strb	r2, [r3, #0]
 8010f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f56:	3301      	adds	r3, #1
 8010f58:	633b      	str	r3, [r7, #48]	; 0x30
 8010f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d3f1      	bcc.n	8010f46 <_tx_mutex_create+0x22>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8010f72:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010f74:	b672      	cpsid	i
    return(primask_value);
 8010f76:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	4a1a      	ldr	r2, [pc, #104]	; (8010fe8 <_tx_mutex_create+0xc4>)
 8010f7e:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8010f80:	4b1a      	ldr	r3, [pc, #104]	; (8010fec <_tx_mutex_create+0xc8>)
 8010f82:	4a1b      	ldr	r2, [pc, #108]	; (8010ff0 <_tx_mutex_create+0xcc>)
 8010f84:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010f86:	4b1b      	ldr	r3, [pc, #108]	; (8010ff4 <_tx_mutex_create+0xd0>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d109      	bne.n	8010fa2 <_tx_mutex_create+0x7e>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8010f8e:	4b1a      	ldr	r3, [pc, #104]	; (8010ff8 <_tx_mutex_create+0xd4>)
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	601a      	str	r2, [r3, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	625a      	str	r2, [r3, #36]	; 0x24
 8010fa0:	e011      	b.n	8010fc6 <_tx_mutex_create+0xa2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8010fa2:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <_tx_mutex_create+0xd4>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8010fa8:	6a3b      	ldr	r3, [r7, #32]
 8010faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fac:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8010fae:	6a3b      	ldr	r3, [r7, #32]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	69fa      	ldr	r2, [r7, #28]
 8010fbe:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	6a3a      	ldr	r2, [r7, #32]
 8010fc4:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8010fc6:	4b0b      	ldr	r3, [pc, #44]	; (8010ff4 <_tx_mutex_create+0xd0>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	1c5a      	adds	r2, r3, #1
 8010fcc:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <_tx_mutex_create+0xd0>)
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	f383 8810 	msr	PRIMASK, r3
}
 8010fda:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	0018      	movs	r0, r3
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	b00e      	add	sp, #56	; 0x38
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	46c0      	nop			; (mov r8, r8)
 8010fe8:	4d555445 	.word	0x4d555445
 8010fec:	20010730 	.word	0x20010730
 8010ff0:	08010ea1 	.word	0x08010ea1
 8010ff4:	20010678 	.word	0x20010678
 8010ff8:	20010674 	.word	0x20010674

08010ffc <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b090      	sub	sp, #64	; 0x40
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011006:	f3ef 8310 	mrs	r3, PRIMASK
 801100a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801100c:	b672      	cpsid	i
    return(primask_value);
 801100e:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8011010:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011012:	4b7b      	ldr	r3, [pc, #492]	; (8011200 <_tx_mutex_get+0x204>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d144      	bne.n	80110aa <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2201      	movs	r2, #1
 8011024:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801102a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 801102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102e:	2b00      	cmp	r3, #0
 8011030:	d032      	beq.n	8011098 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	691b      	ldr	r3, [r3, #16]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d106      	bne.n	8011048 <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801103a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2220      	movs	r2, #32
 8011046:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8011048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801104a:	22a4      	movs	r2, #164	; 0xa4
 801104c:	589b      	ldr	r3, [r3, r2]
 801104e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	2b00      	cmp	r3, #0
 8011054:	d00f      	beq.n	8011076 <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801105a:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a3a      	ldr	r2, [r7, #32]
 801106c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011072:	62da      	str	r2, [r3, #44]	; 0x2c
 8011074:	e009      	b.n	801108a <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011078:	21a4      	movs	r1, #164	; 0xa4
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	505a      	str	r2, [r3, r1]
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108c:	22a0      	movs	r2, #160	; 0xa0
 801108e:	589b      	ldr	r3, [r3, r2]
 8011090:	1c5a      	adds	r2, r3, #1
 8011092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011094:	21a0      	movs	r1, #160	; 0xa0
 8011096:	505a      	str	r2, [r3, r1]
 8011098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	f383 8810 	msr	PRIMASK, r3
}
 80110a2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80110a4:	2300      	movs	r3, #0
 80110a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a8:	e0a4      	b.n	80111f4 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	68db      	ldr	r3, [r3, #12]
 80110ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d10d      	bne.n	80110d0 <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	1c5a      	adds	r2, r3, #1
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	609a      	str	r2, [r3, #8]
 80110be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	f383 8810 	msr	PRIMASK, r3
}
 80110c8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80110ca:	2300      	movs	r3, #0
 80110cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110ce:	e091      	b.n	80111f4 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d100      	bne.n	80110d8 <_tx_mutex_get+0xdc>
 80110d6:	e085      	b.n	80111e4 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80110d8:	4b4a      	ldr	r3, [pc, #296]	; (8011204 <_tx_mutex_get+0x208>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d008      	beq.n	80110f2 <_tx_mutex_get+0xf6>
 80110e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	f383 8810 	msr	PRIMASK, r3
}
 80110ea:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80110ec:	231d      	movs	r3, #29
 80110ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f0:	e080      	b.n	80111f4 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80110f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fa:	4a43      	ldr	r2, [pc, #268]	; (8011208 <_tx_mutex_get+0x20c>)
 80110fc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80110fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011106:	22ac      	movs	r2, #172	; 0xac
 8011108:	589b      	ldr	r3, [r3, r2]
 801110a:	1c5a      	adds	r2, r3, #1
 801110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110e:	21ac      	movs	r1, #172	; 0xac
 8011110:	505a      	str	r2, [r3, r1]
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d109      	bne.n	801112e <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801111e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011124:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801112a:	675a      	str	r2, [r3, #116]	; 0x74
 801112c:	e011      	b.n	8011152 <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	699b      	ldr	r3, [r3, #24]
 8011132:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011138:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801113e:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011144:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801114a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011150:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	69db      	ldr	r3, [r3, #28]
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115e:	220d      	movs	r2, #13
 8011160:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011164:	2201      	movs	r2, #1
 8011166:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801116e:	4b25      	ldr	r3, [pc, #148]	; (8011204 <_tx_mutex_get+0x208>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	4b23      	ldr	r3, [pc, #140]	; (8011204 <_tx_mutex_get+0x208>)
 8011176:	601a      	str	r2, [r3, #0]
 8011178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f383 8810 	msr	PRIMASK, r3
}
 8011182:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	691b      	ldr	r3, [r3, #16]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d122      	bne.n	80111d2 <_tx_mutex_get+0x1d6>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011194:	429a      	cmp	r2, r3
 8011196:	d903      	bls.n	80111a0 <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8011198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80111a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a6:	219c      	movs	r1, #156	; 0x9c
 80111a8:	585b      	ldr	r3, [r3, r1]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d204      	bcs.n	80111b8 <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80111ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	219c      	movs	r1, #156	; 0x9c
 80111b6:	505a      	str	r2, [r3, r1]
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80111b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d906      	bls.n	80111d2 <_tx_mutex_get+0x1d6>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80111c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ca:	0011      	movs	r1, r2
 80111cc:	0018      	movs	r0, r3
 80111ce:	f000 f8cb 	bl	8011368 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80111d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d4:	0018      	movs	r0, r3
 80111d6:	f001 fec5 	bl	8012f64 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80111da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111dc:	2284      	movs	r2, #132	; 0x84
 80111de:	589b      	ldr	r3, [r3, r2]
 80111e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111e2:	e007      	b.n	80111f4 <_tx_mutex_get+0x1f8>
 80111e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	f383 8810 	msr	PRIMASK, r3
}
 80111ee:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80111f0:	231d      	movs	r3, #29
 80111f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 80111f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80111f6:	0018      	movs	r0, r3
 80111f8:	46bd      	mov	sp, r7
 80111fa:	b010      	add	sp, #64	; 0x40
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	46c0      	nop			; (mov r8, r8)
 8011200:	20010694 	.word	0x20010694
 8011204:	2001072c 	.word	0x2001072c
 8011208:	08010db1 	.word	0x08010db1

0801120c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b090      	sub	sp, #64	; 0x40
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011214:	f3ef 8310 	mrs	r3, PRIMASK
 8011218:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801121a:	b672      	cpsid	i
    return(primask_value);
 801121c:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801121e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	69db      	ldr	r3, [r3, #28]
 8011224:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8011226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011228:	2b01      	cmp	r3, #1
 801122a:	d805      	bhi.n	8011238 <_tx_mutex_prioritize+0x2c>
 801122c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	f383 8810 	msr	PRIMASK, r3
}
 8011236:	e090      	b.n	801135a <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	2b02      	cmp	r3, #2
 801123c:	d114      	bne.n	8011268 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011248:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011252:	429a      	cmp	r2, r3
 8011254:	d202      	bcs.n	801125c <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801125a:	619a      	str	r2, [r3, #24]
 801125c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801125e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	f383 8810 	msr	PRIMASK, r3
}
 8011266:	e078      	b.n	801135a <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	699b      	ldr	r3, [r3, #24]
 801126c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011270:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8011272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011276:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8011278:	4b3a      	ldr	r3, [pc, #232]	; (8011364 <_tx_mutex_prioritize+0x158>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	1c5a      	adds	r2, r3, #1
 801127e:	4b39      	ldr	r3, [pc, #228]	; (8011364 <_tx_mutex_prioritize+0x158>)
 8011280:	601a      	str	r2, [r3, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8011282:	2300      	movs	r3, #0
 8011284:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8011286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128e:	429a      	cmp	r2, r3
 8011290:	d201      	bcs.n	8011296 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8011292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011294:	637b      	str	r3, [r7, #52]	; 0x34
 8011296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011298:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f383 8810 	msr	PRIMASK, r3
}
 80112a0:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80112a2:	f3ef 8310 	mrs	r3, PRIMASK
 80112a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80112a8:	b672      	cpsid	i
    return(primask_value);
 80112aa:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80112ac:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	699b      	ldr	r3, [r3, #24]
 80112b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d002      	beq.n	80112be <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80112b8:	2301      	movs	r3, #1
 80112ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80112bc:	e006      	b.n	80112cc <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	69db      	ldr	r3, [r3, #28]
 80112c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d001      	beq.n	80112cc <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80112c8:	2301      	movs	r3, #1
 80112ca:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d103      	bne.n	80112da <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80112d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80112d8:	e00c      	b.n	80112f4 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	699b      	ldr	r3, [r3, #24]
 80112de:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	69db      	ldr	r3, [r3, #28]
 80112e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80112e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80112ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ee:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80112f0:	2300      	movs	r3, #0
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 80112f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d1c4      	bne.n	8011286 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80112fc:	4b19      	ldr	r3, [pc, #100]	; (8011364 <_tx_mutex_prioritize+0x158>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	1e5a      	subs	r2, r3, #1
 8011302:	4b18      	ldr	r3, [pc, #96]	; (8011364 <_tx_mutex_prioritize+0x158>)
 8011304:	601a      	str	r2, [r3, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8011306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130a:	429a      	cmp	r2, r3
 801130c:	d01d      	beq.n	801134a <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 801130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011312:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8011314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011318:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	6a3a      	ldr	r2, [r7, #32]
 801131e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8011320:	6a3b      	ldr	r3, [r7, #32]
 8011322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011324:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8011326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801132a:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 801132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801132e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011330:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8011332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011334:	6a3a      	ldr	r2, [r7, #32]
 8011336:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8011338:	6a3b      	ldr	r3, [r7, #32]
 801133a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801133c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 801133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011342:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011348:	619a      	str	r2, [r3, #24]
 801134a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801134c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	f383 8810 	msr	PRIMASK, r3
}
 8011354:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011356:	f001 fccd 	bl	8012cf4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801135a:	2300      	movs	r3, #0
#endif
}
 801135c:	0018      	movs	r0, r3
 801135e:	46bd      	mov	sp, r7
 8011360:	b010      	add	sp, #64	; 0x40
 8011362:	bd80      	pop	{r7, pc}
 8011364:	2001072c 	.word	0x2001072c

08011368 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b08e      	sub	sp, #56	; 0x38
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011372:	f3ef 8310 	mrs	r3, PRIMASK
 8011376:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011378:	b672      	cpsid	i
    return(primask_value);
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801137c:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011382:	2b00      	cmp	r3, #0
 8011384:	d017      	beq.n	80113b6 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2298      	movs	r2, #152	; 0x98
 8011390:	589b      	ldr	r3, [r3, r2]
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	429a      	cmp	r2, r3
 8011396:	d905      	bls.n	80113a4 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2298      	movs	r2, #152	; 0x98
 801139c:	589a      	ldr	r2, [r3, r2]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80113a2:	e002      	b.n	80113aa <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	683a      	ldr	r2, [r7, #0]
 80113a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80113aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	f383 8810 	msr	PRIMASK, r3
}
 80113b4:	e087      	b.n	80114c6 <_tx_mutex_priority_change+0x15e>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80113b6:	4b46      	ldr	r3, [pc, #280]	; (80114d0 <_tx_mutex_priority_change+0x168>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80113c2:	4b44      	ldr	r3, [pc, #272]	; (80114d4 <_tx_mutex_priority_change+0x16c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	1c9a      	adds	r2, r3, #2
 80113c8:	4b42      	ldr	r3, [pc, #264]	; (80114d4 <_tx_mutex_priority_change+0x16c>)
 80113ca:	601a      	str	r2, [r3, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	220e      	movs	r2, #14
 80113d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2201      	movs	r2, #1
 80113d6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2200      	movs	r2, #0
 80113dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80113de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	f383 8810 	msr	PRIMASK, r3
}
 80113e8:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	0018      	movs	r0, r3
 80113ee:	f001 fdb9 	bl	8012f64 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113f2:	f3ef 8310 	mrs	r3, PRIMASK
 80113f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80113f8:	b672      	cpsid	i
    return(primask_value);
 80113fa:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80113fc:	637b      	str	r3, [r7, #52]	; 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2298      	movs	r2, #152	; 0x98
 8011408:	589b      	ldr	r3, [r3, r2]
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	429a      	cmp	r2, r3
 801140e:	d905      	bls.n	801141c <_tx_mutex_priority_change+0xb4>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2298      	movs	r2, #152	; 0x98
 8011414:	589a      	ldr	r2, [r3, r2]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	63da      	str	r2, [r3, #60]	; 0x3c
 801141a:	e002      	b.n	8011422 <_tx_mutex_priority_change+0xba>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	63da      	str	r2, [r3, #60]	; 0x3c
 8011422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011424:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	f383 8810 	msr	PRIMASK, r3
}
 801142c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	0018      	movs	r0, r3
 8011432:	f001 fc97 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011436:	f3ef 8310 	mrs	r3, PRIMASK
 801143a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801143c:	b672      	cpsid	i
    return(primask_value);
 801143e:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8011440:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8011442:	4b23      	ldr	r3, [pc, #140]	; (80114d0 <_tx_mutex_priority_change+0x168>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144c:	429a      	cmp	r2, r3
 801144e:	d034      	beq.n	80114ba <_tx_mutex_priority_change+0x152>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011454:	2b00      	cmp	r3, #0
 8011456:	d130      	bne.n	80114ba <_tx_mutex_priority_change+0x152>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011460:	429a      	cmp	r2, r3
 8011462:	d811      	bhi.n	8011488 <_tx_mutex_priority_change+0x120>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	429a      	cmp	r2, r3
 801146a:	d126      	bne.n	80114ba <_tx_mutex_priority_change+0x152>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 801146c:	4b18      	ldr	r3, [pc, #96]	; (80114d0 <_tx_mutex_priority_change+0x168>)
 801146e:	687a      	ldr	r2, [r7, #4]
 8011470:	601a      	str	r2, [r3, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8011472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	429a      	cmp	r2, r3
 8011478:	d21f      	bcs.n	80114ba <_tx_mutex_priority_change+0x152>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801147e:	4b16      	ldr	r3, [pc, #88]	; (80114d8 <_tx_mutex_priority_change+0x170>)
 8011480:	0092      	lsls	r2, r2, #2
 8011482:	6879      	ldr	r1, [r7, #4]
 8011484:	50d1      	str	r1, [r2, r3]
 8011486:	e018      	b.n	80114ba <_tx_mutex_priority_change+0x152>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	429a      	cmp	r2, r3
 8011492:	d212      	bcs.n	80114ba <_tx_mutex_priority_change+0x152>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149c:	429a      	cmp	r2, r3
 801149e:	d80c      	bhi.n	80114ba <_tx_mutex_priority_change+0x152>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80114a0:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <_tx_mutex_priority_change+0x168>)
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	601a      	str	r2, [r3, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 80114a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d205      	bcs.n	80114ba <_tx_mutex_priority_change+0x152>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114b2:	4b09      	ldr	r3, [pc, #36]	; (80114d8 <_tx_mutex_priority_change+0x170>)
 80114b4:	0092      	lsls	r2, r2, #2
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	50d1      	str	r1, [r2, r3]
 80114ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114bc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f383 8810 	msr	PRIMASK, r3
}
 80114c4:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80114c6:	46c0      	nop			; (mov r8, r8)
 80114c8:	46bd      	mov	sp, r7
 80114ca:	b00e      	add	sp, #56	; 0x38
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	46c0      	nop			; (mov r8, r8)
 80114d0:	20010698 	.word	0x20010698
 80114d4:	2001072c 	.word	0x2001072c
 80114d8:	200106ac 	.word	0x200106ac

080114dc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b0a0      	sub	sp, #128	; 0x80
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80114e4:	2320      	movs	r3, #32
 80114e6:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80114e8:	f3ef 8310 	mrs	r3, PRIMASK
 80114ec:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 80114ee:	b672      	cpsid	i
    return(primask_value);
 80114f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80114f2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d100      	bne.n	80114fe <_tx_mutex_put+0x22>
 80114fc:	e1c5      	b.n	801188a <_tx_mutex_put+0x3ae>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011504:	4bb4      	ldr	r3, [pc, #720]	; (80117d8 <_tx_mutex_put+0x2fc>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011510:	429a      	cmp	r2, r3
 8011512:	d00b      	beq.n	801152c <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8011514:	4bb1      	ldr	r3, [pc, #708]	; (80117dc <_tx_mutex_put+0x300>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d107      	bne.n	801152c <_tx_mutex_put+0x50>
 801151c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801151e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011522:	f383 8810 	msr	PRIMASK, r3
}
 8011526:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8011528:	231e      	movs	r3, #30
 801152a:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 801152c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801152e:	2b20      	cmp	r3, #32
 8011530:	d000      	beq.n	8011534 <_tx_mutex_put+0x58>
 8011532:	e1b2      	b.n	801189a <_tx_mutex_put+0x3be>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	1e5a      	subs	r2, r3, #1
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	689b      	ldr	r3, [r3, #8]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d008      	beq.n	8011558 <_tx_mutex_put+0x7c>
 8011546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011548:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154c:	f383 8810 	msr	PRIMASK, r3
}
 8011550:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8011552:	2300      	movs	r3, #0
 8011554:	673b      	str	r3, [r7, #112]	; 0x70
 8011556:	e1a0      	b.n	801189a <_tx_mutex_put+0x3be>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8011558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801155a:	2b00      	cmp	r3, #0
 801155c:	d108      	bne.n	8011570 <_tx_mutex_put+0x94>
 801155e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011560:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011564:	f383 8810 	msr	PRIMASK, r3
}
 8011568:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 801156a:	2300      	movs	r3, #0
 801156c:	673b      	str	r3, [r7, #112]	; 0x70
 801156e:	e194      	b.n	801189a <_tx_mutex_put+0x3be>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8011570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011572:	22a0      	movs	r2, #160	; 0xa0
 8011574:	589b      	ldr	r3, [r3, r2]
 8011576:	1e5a      	subs	r2, r3, #1
 8011578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801157a:	21a0      	movs	r1, #160	; 0xa0
 801157c:	505a      	str	r2, [r3, r1]

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 801157e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011580:	22a0      	movs	r2, #160	; 0xa0
 8011582:	589b      	ldr	r3, [r3, r2]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d104      	bne.n	8011592 <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8011588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801158a:	22a4      	movs	r2, #164	; 0xa4
 801158c:	2100      	movs	r1, #0
 801158e:	5099      	str	r1, [r3, r2]
 8011590:	e015      	b.n	80115be <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011596:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801159c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801159e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80115a2:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80115a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80115a8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80115aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115ac:	22a4      	movs	r2, #164	; 0xa4
 80115ae:	589b      	ldr	r3, [r3, r2]
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d103      	bne.n	80115be <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80115b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115b8:	21a4      	movs	r1, #164	; 0xa4
 80115ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80115bc:	505a      	str	r2, [r3, r1]
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	699b      	ldr	r3, [r3, #24]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d10e      	bne.n	80115e4 <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	691b      	ldr	r3, [r3, #16]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d10a      	bne.n	80115e4 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	60da      	str	r2, [r3, #12]
 80115d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80115d6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80115d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115da:	f383 8810 	msr	PRIMASK, r3
}
 80115de:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80115e0:	2300      	movs	r3, #0
 80115e2:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80115e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80115e6:	2b20      	cmp	r3, #32
 80115e8:	d000      	beq.n	80115ec <_tx_mutex_put+0x110>
 80115ea:	e156      	b.n	801189a <_tx_mutex_put+0x3be>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 80115ec:	2300      	movs	r3, #0
 80115ee:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 80115f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115f2:	2294      	movs	r2, #148	; 0x94
 80115f4:	589b      	ldr	r3, [r3, r2]
 80115f6:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d140      	bne.n	8011682 <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011600:	4b76      	ldr	r3, [pc, #472]	; (80117dc <_tx_mutex_put+0x300>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	1c5a      	adds	r2, r3, #1
 8011606:	4b75      	ldr	r3, [pc, #468]	; (80117dc <_tx_mutex_put+0x300>)
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801160c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011610:	f383 8810 	msr	PRIMASK, r3
}
 8011614:	46c0      	nop			; (mov r8, r8)
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011616:	2320      	movs	r3, #32
 8011618:	66bb      	str	r3, [r7, #104]	; 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801161a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801161c:	22a4      	movs	r2, #164	; 0xa4
 801161e:	589b      	ldr	r3, [r3, r2]
 8011620:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 8011622:	e016      	b.n	8011652 <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8011624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011626:	691b      	ldr	r3, [r3, #16]
 8011628:	2b01      	cmp	r3, #1
 801162a:	d107      	bne.n	801163c <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 801162c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011632:	429a      	cmp	r2, r3
 8011634:	d902      	bls.n	801163c <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8011636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801163a:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 801163c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011640:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8011642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011644:	22a4      	movs	r2, #164	; 0xa4
 8011646:	589b      	ldr	r3, [r3, r2]
 8011648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801164a:	429a      	cmp	r2, r3
 801164c:	d101      	bne.n	8011652 <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 801164e:	2300      	movs	r3, #0
 8011650:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 8011652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1e5      	bne.n	8011624 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011658:	f3ef 8310 	mrs	r3, PRIMASK
 801165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 801165e:	b672      	cpsid	i
    return(primask_value);
 8011660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011662:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011664:	4b5d      	ldr	r3, [pc, #372]	; (80117dc <_tx_mutex_put+0x300>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	1e5a      	subs	r2, r3, #1
 801166a:	4b5c      	ldr	r3, [pc, #368]	; (80117dc <_tx_mutex_put+0x300>)
 801166c:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801166e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011670:	219c      	movs	r1, #156	; 0x9c
 8011672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011674:	505a      	str	r2, [r3, r1]

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8011676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801167a:	429a      	cmp	r2, r3
 801167c:	d201      	bcs.n	8011682 <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 801167e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011680:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	69db      	ldr	r3, [r3, #28]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d91d      	bls.n	80116c6 <_tx_mutex_put+0x1ea>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d119      	bne.n	80116c6 <_tx_mutex_put+0x1ea>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8011692:	4b52      	ldr	r3, [pc, #328]	; (80117dc <_tx_mutex_put+0x300>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	4b50      	ldr	r3, [pc, #320]	; (80117dc <_tx_mutex_put+0x300>)
 801169a:	601a      	str	r2, [r3, #0]
 801169c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801169e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80116a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a2:	f383 8810 	msr	PRIMASK, r3
}
 80116a6:	46c0      	nop			; (mov r8, r8)
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	0018      	movs	r0, r3
 80116ac:	f7ff fdae 	bl	801120c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80116b0:	f3ef 8310 	mrs	r3, PRIMASK
 80116b4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80116b6:	b672      	cpsid	i
    return(primask_value);
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80116ba:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80116bc:	4b47      	ldr	r3, [pc, #284]	; (80117dc <_tx_mutex_put+0x300>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	1e5a      	subs	r2, r3, #1
 80116c2:	4b46      	ldr	r3, [pc, #280]	; (80117dc <_tx_mutex_put+0x300>)
 80116c4:	601a      	str	r2, [r3, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	699b      	ldr	r3, [r3, #24]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d133      	bne.n	8011736 <_tx_mutex_put+0x25a>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80116ce:	4b43      	ldr	r3, [pc, #268]	; (80117dc <_tx_mutex_put+0x300>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	1c5a      	adds	r2, r3, #1
 80116d4:	4b41      	ldr	r3, [pc, #260]	; (80117dc <_tx_mutex_put+0x300>)
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116da:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80116dc:	6a3b      	ldr	r3, [r7, #32]
 80116de:	f383 8810 	msr	PRIMASK, r3
}
 80116e2:	46c0      	nop			; (mov r8, r8)
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2220      	movs	r2, #32
 80116e8:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d006      	beq.n	8011704 <_tx_mutex_put+0x228>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80116fc:	0011      	movs	r1, r2
 80116fe:	0018      	movs	r0, r3
 8011700:	f7ff fe32 	bl	8011368 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011704:	f3ef 8310 	mrs	r3, PRIMASK
 8011708:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801170a:	b672      	cpsid	i
    return(primask_value);
 801170c:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 801170e:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011710:	4b32      	ldr	r3, [pc, #200]	; (80117dc <_tx_mutex_put+0x300>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	1e5a      	subs	r2, r3, #1
 8011716:	4b31      	ldr	r3, [pc, #196]	; (80117dc <_tx_mutex_put+0x300>)
 8011718:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2200      	movs	r2, #0
 801171e:	60da      	str	r2, [r3, #12]
 8011720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011722:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	f383 8810 	msr	PRIMASK, r3
}
 801172a:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 801172c:	f001 fae2 	bl	8012cf4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8011730:	2300      	movs	r3, #0
 8011732:	673b      	str	r3, [r7, #112]	; 0x70
 8011734:	e0b1      	b.n	801189a <_tx_mutex_put+0x3be>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	699b      	ldr	r3, [r3, #24]
 801173a:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	691b      	ldr	r3, [r3, #16]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d109      	bne.n	8011758 <_tx_mutex_put+0x27c>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	67bb      	str	r3, [r7, #120]	; 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801174a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2220      	movs	r2, #32
 8011756:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8011758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801175a:	22a0      	movs	r2, #160	; 0xa0
 801175c:	589b      	ldr	r3, [r3, r2]
 801175e:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8011760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011762:	2b00      	cmp	r3, #0
 8011764:	d10a      	bne.n	801177c <_tx_mutex_put+0x2a0>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011768:	21a4      	movs	r1, #164	; 0xa4
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	505a      	str	r2, [r3, r1]
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	631a      	str	r2, [r3, #48]	; 0x30
 801177a:	e012      	b.n	80117a2 <_tx_mutex_put+0x2c6>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 801177c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801177e:	22a4      	movs	r2, #164	; 0xa4
 8011780:	589b      	ldr	r3, [r3, r2]
 8011782:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8011784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011788:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801178a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8011790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801179a:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80117a0:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80117a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117a8:	21a0      	movs	r1, #160	; 0xa0
 80117aa:	505a      	str	r2, [r3, r1]

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2201      	movs	r2, #1
 80117b0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80117b6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	69db      	ldr	r3, [r3, #28]
 80117bc:	1e5a      	subs	r2, r3, #1
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	69db      	ldr	r3, [r3, #28]
 80117c6:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80117c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d108      	bne.n	80117e0 <_tx_mutex_put+0x304>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2200      	movs	r2, #0
 80117d2:	619a      	str	r2, [r3, #24]
 80117d4:	e013      	b.n	80117fe <_tx_mutex_put+0x322>
 80117d6:	46c0      	nop			; (mov r8, r8)
 80117d8:	20010694 	.word	0x20010694
 80117dc:	2001072c 	.word	0x2001072c
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80117e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117e4:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117ea:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80117ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80117f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117f6:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80117f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117fc:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80117fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011800:	2200      	movs	r2, #0
 8011802:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011806:	2284      	movs	r2, #132	; 0x84
 8011808:	2100      	movs	r1, #0
 801180a:	5099      	str	r1, [r3, r2]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801180c:	4b25      	ldr	r3, [pc, #148]	; (80118a4 <_tx_mutex_put+0x3c8>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	4b24      	ldr	r3, [pc, #144]	; (80118a4 <_tx_mutex_put+0x3c8>)
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011818:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	f383 8810 	msr	PRIMASK, r3
}
 8011820:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	691b      	ldr	r3, [r3, #16]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d128      	bne.n	801187c <_tx_mutex_put+0x3a0>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	69db      	ldr	r3, [r3, #28]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d019      	beq.n	8011866 <_tx_mutex_put+0x38a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	0018      	movs	r0, r3
 8011836:	f7ff fce9 	bl	801120c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801183a:	f3ef 8310 	mrs	r3, PRIMASK
 801183e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011840:	b672      	cpsid	i
    return(primask_value);
 8011842:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8011844:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	699b      	ldr	r3, [r3, #24]
 801184a:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 801184c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801184e:	2b00      	cmp	r3, #0
 8011850:	d003      	beq.n	801185a <_tx_mutex_put+0x37e>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8011852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	629a      	str	r2, [r3, #40]	; 0x28
 801185a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801185c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f383 8810 	msr	PRIMASK, r3
}
 8011864:	46c0      	nop			; (mov r8, r8)

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8011866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801186c:	429a      	cmp	r2, r3
 801186e:	d005      	beq.n	801187c <_tx_mutex_put+0x3a0>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8011870:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011874:	0011      	movs	r1, r2
 8011876:	0018      	movs	r0, r3
 8011878:	f7ff fd76 	bl	8011368 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 801187c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801187e:	0018      	movs	r0, r3
 8011880:	f001 fa70 	bl	8012d64 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8011884:	2300      	movs	r3, #0
 8011886:	673b      	str	r3, [r7, #112]	; 0x70
 8011888:	e007      	b.n	801189a <_tx_mutex_put+0x3be>
 801188a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801188c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	f383 8810 	msr	PRIMASK, r3
}
 8011894:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8011896:	231e      	movs	r3, #30
 8011898:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 801189a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 801189c:	0018      	movs	r0, r3
 801189e:	46bd      	mov	sp, r7
 80118a0:	b020      	add	sp, #128	; 0x80
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	2001072c 	.word	0x2001072c

080118a8 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08c      	sub	sp, #48	; 0x30
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80118b2:	f3ef 8310 	mrs	r3, PRIMASK
 80118b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80118b8:	b672      	cpsid	i
    return(primask_value);
 80118ba:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80118bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80118c2:	4b37      	ldr	r3, [pc, #220]	; (80119a0 <_tx_queue_cleanup+0xf8>)
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d160      	bne.n	801198a <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	22ac      	movs	r2, #172	; 0xac
 80118cc:	589b      	ldr	r3, [r3, r2]
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d15a      	bne.n	801198a <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118d8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80118da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d054      	beq.n	801198a <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80118e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4a2f      	ldr	r2, [pc, #188]	; (80119a4 <_tx_queue_cleanup+0xfc>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d14f      	bne.n	801198a <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80118ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d04b      	beq.n	801198a <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 80118f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fc:	1e5a      	subs	r2, r3, #1
 80118fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011900:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011906:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190a:	2b00      	cmp	r3, #0
 801190c:	d103      	bne.n	8011916 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011910:	2200      	movs	r2, #0
 8011912:	629a      	str	r2, [r3, #40]	; 0x28
 8011914:	e013      	b.n	801193e <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801191a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011920:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011922:	6a3b      	ldr	r3, [r7, #32]
 8011924:	69fa      	ldr	r2, [r7, #28]
 8011926:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	6a3a      	ldr	r2, [r7, #32]
 801192c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 801192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011932:	687a      	ldr	r2, [r7, #4]
 8011934:	429a      	cmp	r2, r3
 8011936:	d102      	bne.n	801193e <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8011938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801193a:	6a3a      	ldr	r2, [r7, #32]
 801193c:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011942:	2b05      	cmp	r3, #5
 8011944:	d121      	bne.n	801198a <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8011946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011948:	691b      	ldr	r3, [r3, #16]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d004      	beq.n	8011958 <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2284      	movs	r2, #132	; 0x84
 8011952:	210b      	movs	r1, #11
 8011954:	5099      	str	r1, [r3, r2]
 8011956:	e003      	b.n	8011960 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2284      	movs	r2, #132	; 0x84
 801195c:	210a      	movs	r1, #10
 801195e:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011960:	4b11      	ldr	r3, [pc, #68]	; (80119a8 <_tx_queue_cleanup+0x100>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	1c5a      	adds	r2, r3, #1
 8011966:	4b10      	ldr	r3, [pc, #64]	; (80119a8 <_tx_queue_cleanup+0x100>)
 8011968:	601a      	str	r2, [r3, #0]
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	f383 8810 	msr	PRIMASK, r3
}
 8011974:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	0018      	movs	r0, r3
 801197a:	f001 f9f3 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801197e:	f3ef 8310 	mrs	r3, PRIMASK
 8011982:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011984:	b672      	cpsid	i
    return(primask_value);
 8011986:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011988:	62fb      	str	r3, [r7, #44]	; 0x2c
 801198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f383 8810 	msr	PRIMASK, r3
}
 8011994:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011996:	46c0      	nop			; (mov r8, r8)
 8011998:	46bd      	mov	sp, r7
 801199a:	b00c      	add	sp, #48	; 0x30
 801199c:	bd80      	pop	{r7, pc}
 801199e:	46c0      	nop			; (mov r8, r8)
 80119a0:	080118a9 	.word	0x080118a9
 80119a4:	51554555 	.word	0x51554555
 80119a8:	2001072c 	.word	0x2001072c

080119ac <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b090      	sub	sp, #64	; 0x40
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
 80119b8:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119be:	2337      	movs	r3, #55	; 0x37
 80119c0:	18fb      	adds	r3, r7, r3
 80119c2:	2200      	movs	r2, #0
 80119c4:	701a      	strb	r2, [r3, #0]
 80119c6:	2338      	movs	r3, #56	; 0x38
 80119c8:	633b      	str	r3, [r7, #48]	; 0x30
 80119ca:	2300      	movs	r3, #0
 80119cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80119ce:	e009      	b.n	80119e4 <_tx_queue_create+0x38>
 80119d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80119d6:	2237      	movs	r2, #55	; 0x37
 80119d8:	18ba      	adds	r2, r7, r2
 80119da:	7812      	ldrb	r2, [r2, #0]
 80119dc:	701a      	strb	r2, [r3, #0]
 80119de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e0:	3301      	adds	r3, #1
 80119e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80119e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d3f1      	bcc.n	80119d0 <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	0019      	movs	r1, r3
 80119fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011a00:	f7f4 fdda 	bl	80065b8 <__udivsi3>
 8011a04:	0003      	movs	r3, r0
 8011a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8011a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	4353      	muls	r3, r2
 8011a0e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	683a      	ldr	r2, [r7, #0]
 8011a14:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	699a      	ldr	r2, [r3, #24]
 8011a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	18d2      	adds	r2, r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	683a      	ldr	r2, [r7, #0]
 8011a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a34:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a3a:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8011a40:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011a42:	b672      	cpsid	i
    return(primask_value);
 8011a44:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8011a46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	4a19      	ldr	r2, [pc, #100]	; (8011ab0 <_tx_queue_create+0x104>)
 8011a4c:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8011a4e:	4b19      	ldr	r3, [pc, #100]	; (8011ab4 <_tx_queue_create+0x108>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d109      	bne.n	8011a6a <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8011a56:	4b18      	ldr	r3, [pc, #96]	; (8011ab8 <_tx_queue_create+0x10c>)
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	68fa      	ldr	r2, [r7, #12]
 8011a60:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	68fa      	ldr	r2, [r7, #12]
 8011a66:	635a      	str	r2, [r3, #52]	; 0x34
 8011a68:	e011      	b.n	8011a8e <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8011a6a:	4b13      	ldr	r3, [pc, #76]	; (8011ab8 <_tx_queue_create+0x10c>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8011a70:	6a3b      	ldr	r3, [r7, #32]
 8011a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a74:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	68fa      	ldr	r2, [r7, #12]
 8011a7a:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	69fa      	ldr	r2, [r7, #28]
 8011a86:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6a3a      	ldr	r2, [r7, #32]
 8011a8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8011a8e:	4b09      	ldr	r3, [pc, #36]	; (8011ab4 <_tx_queue_create+0x108>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	1c5a      	adds	r2, r3, #1
 8011a94:	4b07      	ldr	r3, [pc, #28]	; (8011ab4 <_tx_queue_create+0x108>)
 8011a96:	601a      	str	r2, [r3, #0]
 8011a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	f383 8810 	msr	PRIMASK, r3
}
 8011aa2:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	0018      	movs	r0, r3
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	b010      	add	sp, #64	; 0x40
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	46c0      	nop			; (mov r8, r8)
 8011ab0:	51554555 	.word	0x51554555
 8011ab4:	20010668 	.word	0x20010668
 8011ab8:	20010664 	.word	0x20010664

08011abc <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b094      	sub	sp, #80	; 0x50
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	60b9      	str	r1, [r7, #8]
 8011ac6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011acc:	f3ef 8310 	mrs	r3, PRIMASK
 8011ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011ad2:	b672      	cpsid	i
    return(primask_value);
 8011ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8011ad6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011adc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	691b      	ldr	r3, [r3, #16]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d100      	bne.n	8011ae8 <_tx_queue_receive+0x2c>
 8011ae6:	e137      	b.n	8011d58 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d13c      	bne.n	8011b68 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	689b      	ldr	r3, [r3, #8]
 8011afc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b00:	1d13      	adds	r3, r2, #4
 8011b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b06:	1d19      	adds	r1, r3, #4
 8011b08:	64b9      	str	r1, [r7, #72]	; 0x48
 8011b0a:	6812      	ldr	r2, [r2, #0]
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d90e      	bls.n	8011b32 <_tx_queue_receive+0x76>
 8011b14:	e007      	b.n	8011b26 <_tx_queue_receive+0x6a>
 8011b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b18:	1d13      	adds	r3, r2, #4
 8011b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b1e:	1d19      	adds	r1, r3, #4
 8011b20:	64b9      	str	r1, [r7, #72]	; 0x48
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	601a      	str	r2, [r3, #0]
 8011b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8011b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1f1      	bne.n	8011b16 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	69db      	ldr	r3, [r3, #28]
 8011b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d102      	bne.n	8011b42 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	699b      	ldr	r3, [r3, #24]
 8011b40:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b46:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	695b      	ldr	r3, [r3, #20]
 8011b4c:	1c5a      	adds	r2, r3, #1
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	691b      	ldr	r3, [r3, #16]
 8011b56:	1e5a      	subs	r2, r3, #1
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	611a      	str	r2, [r3, #16]
 8011b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b62:	f383 8810 	msr	PRIMASK, r3
}
 8011b66:	e166      	b.n	8011e36 <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b6c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8011b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b70:	2280      	movs	r2, #128	; 0x80
 8011b72:	589b      	ldr	r3, [r3, r2]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d154      	bne.n	8011c22 <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b8a:	1d13      	adds	r3, r2, #4
 8011b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b90:	1d19      	adds	r1, r3, #4
 8011b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8011b94:	6812      	ldr	r2, [r2, #0]
 8011b96:	601a      	str	r2, [r3, #0]
 8011b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d90e      	bls.n	8011bbc <_tx_queue_receive+0x100>
 8011b9e:	e007      	b.n	8011bb0 <_tx_queue_receive+0xf4>
 8011ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ba2:	1d13      	adds	r3, r2, #4
 8011ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ba8:	1d19      	adds	r1, r3, #4
 8011baa:	64b9      	str	r1, [r7, #72]	; 0x48
 8011bac:	6812      	ldr	r2, [r2, #0]
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bb2:	3b01      	subs	r3, #1
 8011bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8011bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1f1      	bne.n	8011ba0 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8011bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d103      	bne.n	8011bd0 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8011bce:	e00e      	b.n	8011bee <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd4:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bda:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011be0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011be6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8011be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bec:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bf2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfc:	2284      	movs	r2, #132	; 0x84
 8011bfe:	2100      	movs	r1, #0
 8011c00:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011c02:	4b8f      	ldr	r3, [pc, #572]	; (8011e40 <_tx_queue_receive+0x384>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	1c5a      	adds	r2, r3, #1
 8011c08:	4b8d      	ldr	r3, [pc, #564]	; (8011e40 <_tx_queue_receive+0x384>)
 8011c0a:	601a      	str	r2, [r3, #0]
 8011c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c10:	6a3b      	ldr	r3, [r7, #32]
 8011c12:	f383 8810 	msr	PRIMASK, r3
}
 8011c16:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8011c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	f001 f8a2 	bl	8012d64 <_tx_thread_system_resume>
 8011c20:	e109      	b.n	8011e36 <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6a1b      	ldr	r3, [r3, #32]
 8011c26:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011c32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c34:	1d13      	adds	r3, r2, #4
 8011c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c3a:	1d19      	adds	r1, r3, #4
 8011c3c:	64b9      	str	r1, [r7, #72]	; 0x48
 8011c3e:	6812      	ldr	r2, [r2, #0]
 8011c40:	601a      	str	r2, [r3, #0]
 8011c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d90e      	bls.n	8011c66 <_tx_queue_receive+0x1aa>
 8011c48:	e007      	b.n	8011c5a <_tx_queue_receive+0x19e>
 8011c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c4c:	1d13      	adds	r3, r2, #4
 8011c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c52:	1d19      	adds	r1, r3, #4
 8011c54:	64b9      	str	r1, [r7, #72]	; 0x48
 8011c56:	6812      	ldr	r2, [r2, #0]
 8011c58:	601a      	str	r2, [r3, #0]
 8011c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8011c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1f1      	bne.n	8011c4a <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	69db      	ldr	r3, [r3, #28]
 8011c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d102      	bne.n	8011c76 <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	699b      	ldr	r3, [r3, #24]
 8011c74:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c7a:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8011c7c:	4b70      	ldr	r3, [pc, #448]	; (8011e40 <_tx_queue_receive+0x384>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	1c5a      	adds	r2, r3, #1
 8011c82:	4b6f      	ldr	r3, [pc, #444]	; (8011e40 <_tx_queue_receive+0x384>)
 8011c84:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8011c86:	4b6e      	ldr	r3, [pc, #440]	; (8011e40 <_tx_queue_receive+0x384>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	1e5a      	subs	r2, r3, #1
 8011c8c:	4b6c      	ldr	r3, [pc, #432]	; (8011e40 <_tx_queue_receive+0x384>)
 8011c8e:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c94:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9a:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ca4:	1d13      	adds	r3, r2, #4
 8011ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011caa:	1d19      	adds	r1, r3, #4
 8011cac:	64b9      	str	r1, [r7, #72]	; 0x48
 8011cae:	6812      	ldr	r2, [r2, #0]
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d90e      	bls.n	8011cd6 <_tx_queue_receive+0x21a>
 8011cb8:	e007      	b.n	8011cca <_tx_queue_receive+0x20e>
 8011cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cbc:	1d13      	adds	r3, r2, #4
 8011cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cc2:	1d19      	adds	r1, r3, #4
 8011cc4:	64b9      	str	r1, [r7, #72]	; 0x48
 8011cc6:	6812      	ldr	r2, [r2, #0]
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	647b      	str	r3, [r7, #68]	; 0x44
 8011cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1f1      	bne.n	8011cba <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	69db      	ldr	r3, [r3, #28]
 8011cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d102      	bne.n	8011ce6 <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	699b      	ldr	r3, [r3, #24]
 8011ce4:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cea:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d103      	bne.n	8011d06 <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2200      	movs	r2, #0
 8011d02:	629a      	str	r2, [r3, #40]	; 0x28
 8011d04:	e00e      	b.n	8011d24 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d0a:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d10:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d16:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d1c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8011d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d22:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d28:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d32:	2284      	movs	r2, #132	; 0x84
 8011d34:	2100      	movs	r1, #0
 8011d36:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011d38:	4b41      	ldr	r3, [pc, #260]	; (8011e40 <_tx_queue_receive+0x384>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	1c5a      	adds	r2, r3, #1
 8011d3e:	4b40      	ldr	r3, [pc, #256]	; (8011e40 <_tx_queue_receive+0x384>)
 8011d40:	601a      	str	r2, [r3, #0]
 8011d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	f383 8810 	msr	PRIMASK, r3
}
 8011d4c:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8011d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d50:	0018      	movs	r0, r3
 8011d52:	f001 f807 	bl	8012d64 <_tx_thread_system_resume>
 8011d56:	e06e      	b.n	8011e36 <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d063      	beq.n	8011e26 <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011d5e:	4b38      	ldr	r3, [pc, #224]	; (8011e40 <_tx_queue_receive+0x384>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d008      	beq.n	8011d78 <_tx_queue_receive+0x2bc>
 8011d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	f383 8810 	msr	PRIMASK, r3
}
 8011d70:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8011d72:	230a      	movs	r3, #10
 8011d74:	643b      	str	r3, [r7, #64]	; 0x40
 8011d76:	e05e      	b.n	8011e36 <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011d78:	4b32      	ldr	r3, [pc, #200]	; (8011e44 <_tx_queue_receive+0x388>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d80:	4a31      	ldr	r2, [pc, #196]	; (8011e48 <_tx_queue_receive+0x38c>)
 8011d82:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8011d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d86:	68fa      	ldr	r2, [r7, #12]
 8011d88:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8011d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d8c:	68ba      	ldr	r2, [r7, #8]
 8011d8e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d92:	2280      	movs	r2, #128	; 0x80
 8011d94:	2100      	movs	r1, #0
 8011d96:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d9a:	22ac      	movs	r2, #172	; 0xac
 8011d9c:	589b      	ldr	r3, [r3, r2]
 8011d9e:	1c5a      	adds	r2, r3, #1
 8011da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011da2:	21ac      	movs	r1, #172	; 0xac
 8011da4:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d109      	bne.n	8011dc0 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011db0:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011db6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dbc:	675a      	str	r2, [r3, #116]	; 0x74
 8011dbe:	e011      	b.n	8011de4 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc4:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dca:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dd6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ddc:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011de2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8011de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de6:	1c5a      	adds	r2, r3, #1
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8011dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dee:	2205      	movs	r2, #5
 8011df0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df4:	2201      	movs	r2, #1
 8011df6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011dfe:	4b10      	ldr	r3, [pc, #64]	; (8011e40 <_tx_queue_receive+0x384>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	1c5a      	adds	r2, r3, #1
 8011e04:	4b0e      	ldr	r3, [pc, #56]	; (8011e40 <_tx_queue_receive+0x384>)
 8011e06:	601a      	str	r2, [r3, #0]
 8011e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e0a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	f383 8810 	msr	PRIMASK, r3
}
 8011e12:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e16:	0018      	movs	r0, r3
 8011e18:	f001 f8a4 	bl	8012f64 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1e:	2284      	movs	r2, #132	; 0x84
 8011e20:	589b      	ldr	r3, [r3, r2]
 8011e22:	643b      	str	r3, [r7, #64]	; 0x40
 8011e24:	e007      	b.n	8011e36 <_tx_queue_receive+0x37a>
 8011e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e28:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	f383 8810 	msr	PRIMASK, r3
}
 8011e30:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8011e32:	230a      	movs	r3, #10
 8011e34:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8011e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8011e38:	0018      	movs	r0, r3
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	b014      	add	sp, #80	; 0x50
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	2001072c 	.word	0x2001072c
 8011e44:	20010694 	.word	0x20010694
 8011e48:	080118a9 	.word	0x080118a9

08011e4c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b094      	sub	sp, #80	; 0x50
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8011e60:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011e62:	b672      	cpsid	i
    return(primask_value);
 8011e64:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8011e66:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e6c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d100      	bne.n	8011e78 <_tx_queue_send+0x2c>
 8011e76:	e09b      	b.n	8011fb0 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d13c      	bne.n	8011ef8 <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	695b      	ldr	r3, [r3, #20]
 8011e82:	1e5a      	subs	r2, r3, #1
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	691b      	ldr	r3, [r3, #16]
 8011e8c:	1c5a      	adds	r2, r3, #1
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e9a:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	689b      	ldr	r3, [r3, #8]
 8011ea0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ea4:	1d13      	adds	r3, r2, #4
 8011ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011eaa:	1d19      	adds	r1, r3, #4
 8011eac:	64b9      	str	r1, [r7, #72]	; 0x48
 8011eae:	6812      	ldr	r2, [r2, #0]
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d90e      	bls.n	8011ed6 <_tx_queue_send+0x8a>
 8011eb8:	e007      	b.n	8011eca <_tx_queue_send+0x7e>
 8011eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ebc:	1d13      	adds	r3, r2, #4
 8011ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ec2:	1d19      	adds	r1, r3, #4
 8011ec4:	64b9      	str	r1, [r7, #72]	; 0x48
 8011ec6:	6812      	ldr	r2, [r2, #0]
 8011ec8:	601a      	str	r2, [r3, #0]
 8011eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ecc:	3b01      	subs	r3, #1
 8011ece:	647b      	str	r3, [r7, #68]	; 0x44
 8011ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1f1      	bne.n	8011eba <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	69db      	ldr	r3, [r3, #28]
 8011eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d102      	bne.n	8011ee6 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	699b      	ldr	r3, [r3, #24]
 8011ee4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011eea:	625a      	str	r2, [r3, #36]	; 0x24
 8011eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	f383 8810 	msr	PRIMASK, r3
}
 8011ef6:	e0ca      	b.n	801208e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011efc:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	3b01      	subs	r3, #1
 8011f02:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d103      	bne.n	8011f12 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8011f10:	e012      	b.n	8011f38 <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8011f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f1e:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f24:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f30:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8011f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f36:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f3c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f40:	2200      	movs	r2, #0
 8011f42:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f4c:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	689b      	ldr	r3, [r3, #8]
 8011f52:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f56:	1d13      	adds	r3, r2, #4
 8011f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f5c:	1d19      	adds	r1, r3, #4
 8011f5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8011f60:	6812      	ldr	r2, [r2, #0]
 8011f62:	601a      	str	r2, [r3, #0]
 8011f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d90e      	bls.n	8011f88 <_tx_queue_send+0x13c>
 8011f6a:	e007      	b.n	8011f7c <_tx_queue_send+0x130>
 8011f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f6e:	1d13      	adds	r3, r2, #4
 8011f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f74:	1d19      	adds	r1, r3, #4
 8011f76:	64b9      	str	r1, [r7, #72]	; 0x48
 8011f78:	6812      	ldr	r2, [r2, #0]
 8011f7a:	601a      	str	r2, [r3, #0]
 8011f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	647b      	str	r3, [r7, #68]	; 0x44
 8011f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1f1      	bne.n	8011f6c <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8a:	2284      	movs	r2, #132	; 0x84
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011f90:	4b41      	ldr	r3, [pc, #260]	; (8012098 <_tx_queue_send+0x24c>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	1c5a      	adds	r2, r3, #1
 8011f96:	4b40      	ldr	r3, [pc, #256]	; (8012098 <_tx_queue_send+0x24c>)
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f9c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011f9e:	6a3b      	ldr	r3, [r7, #32]
 8011fa0:	f383 8810 	msr	PRIMASK, r3
}
 8011fa4:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8011fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa8:	0018      	movs	r0, r3
 8011faa:	f000 fedb 	bl	8012d64 <_tx_thread_system_resume>
 8011fae:	e06e      	b.n	801208e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d063      	beq.n	801207e <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011fb6:	4b38      	ldr	r3, [pc, #224]	; (8012098 <_tx_queue_send+0x24c>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d008      	beq.n	8011fd0 <_tx_queue_send+0x184>
 8011fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fc0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	f383 8810 	msr	PRIMASK, r3
}
 8011fc8:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8011fca:	230b      	movs	r3, #11
 8011fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8011fce:	e05e      	b.n	801208e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011fd0:	4b32      	ldr	r3, [pc, #200]	; (801209c <_tx_queue_send+0x250>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd8:	4a31      	ldr	r2, [pc, #196]	; (80120a0 <_tx_queue_send+0x254>)
 8011fda:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8011fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8011fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fea:	2280      	movs	r2, #128	; 0x80
 8011fec:	2100      	movs	r1, #0
 8011fee:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ff2:	22ac      	movs	r2, #172	; 0xac
 8011ff4:	589b      	ldr	r3, [r3, r2]
 8011ff6:	1c5a      	adds	r2, r3, #1
 8011ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ffa:	21ac      	movs	r1, #172	; 0xac
 8011ffc:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012000:	2b00      	cmp	r3, #0
 8012002:	d109      	bne.n	8012018 <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012008:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801200c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801200e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012014:	675a      	str	r2, [r3, #116]	; 0x74
 8012016:	e011      	b.n	801203c <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801201c:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012022:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012028:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801202e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012034:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801203a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 801203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203e:	1c5a      	adds	r2, r3, #1
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8012044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012046:	2205      	movs	r2, #5
 8012048:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204c:	2201      	movs	r2, #1
 801204e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012056:	4b10      	ldr	r3, [pc, #64]	; (8012098 <_tx_queue_send+0x24c>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	4b0e      	ldr	r3, [pc, #56]	; (8012098 <_tx_queue_send+0x24c>)
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012062:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	f383 8810 	msr	PRIMASK, r3
}
 801206a:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801206e:	0018      	movs	r0, r3
 8012070:	f000 ff78 	bl	8012f64 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012076:	2284      	movs	r2, #132	; 0x84
 8012078:	589b      	ldr	r3, [r3, r2]
 801207a:	643b      	str	r3, [r7, #64]	; 0x40
 801207c:	e007      	b.n	801208e <_tx_queue_send+0x242>
 801207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012080:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	f383 8810 	msr	PRIMASK, r3
}
 8012088:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 801208a:	230b      	movs	r3, #11
 801208c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 801208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8012090:	0018      	movs	r0, r3
 8012092:	46bd      	mov	sp, r7
 8012094:	b014      	add	sp, #80	; 0x50
 8012096:	bd80      	pop	{r7, pc}
 8012098:	2001072c 	.word	0x2001072c
 801209c:	20010694 	.word	0x20010694
 80120a0:	080118a9 	.word	0x080118a9

080120a4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b08c      	sub	sp, #48	; 0x30
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80120ae:	f3ef 8310 	mrs	r3, PRIMASK
 80120b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80120b4:	b672      	cpsid	i
    return(primask_value);
 80120b6:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80120b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80120be:	4b32      	ldr	r3, [pc, #200]	; (8012188 <_tx_semaphore_cleanup+0xe4>)
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d157      	bne.n	8012174 <_tx_semaphore_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	22ac      	movs	r2, #172	; 0xac
 80120c8:	589b      	ldr	r3, [r3, r2]
 80120ca:	683a      	ldr	r2, [r7, #0]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d151      	bne.n	8012174 <_tx_semaphore_cleanup+0xd0>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120d4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80120d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d04b      	beq.n	8012174 <_tx_semaphore_cleanup+0xd0>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	4a2a      	ldr	r2, [pc, #168]	; (801218c <_tx_semaphore_cleanup+0xe8>)
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d146      	bne.n	8012174 <_tx_semaphore_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80120e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e8:	691b      	ldr	r3, [r3, #16]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d042      	beq.n	8012174 <_tx_semaphore_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80120f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f6:	691b      	ldr	r3, [r3, #16]
 80120f8:	1e5a      	subs	r2, r3, #1
 80120fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fc:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80120fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012100:	691b      	ldr	r3, [r3, #16]
 8012102:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210c:	2200      	movs	r2, #0
 801210e:	60da      	str	r2, [r3, #12]
 8012110:	e013      	b.n	801213a <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012116:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801211c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	69fa      	ldr	r2, [r7, #28]
 8012122:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	6a3a      	ldr	r2, [r7, #32]
 8012128:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	429a      	cmp	r2, r3
 8012132:	d102      	bne.n	801213a <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8012134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012136:	6a3a      	ldr	r2, [r7, #32]
 8012138:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801213e:	2b06      	cmp	r3, #6
 8012140:	d118      	bne.n	8012174 <_tx_semaphore_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2284      	movs	r2, #132	; 0x84
 8012146:	210d      	movs	r1, #13
 8012148:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801214a:	4b11      	ldr	r3, [pc, #68]	; (8012190 <_tx_semaphore_cleanup+0xec>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	1c5a      	adds	r2, r3, #1
 8012150:	4b0f      	ldr	r3, [pc, #60]	; (8012190 <_tx_semaphore_cleanup+0xec>)
 8012152:	601a      	str	r2, [r3, #0]
 8012154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012156:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	f383 8810 	msr	PRIMASK, r3
}
 801215e:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	0018      	movs	r0, r3
 8012164:	f000 fdfe 	bl	8012d64 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012168:	f3ef 8310 	mrs	r3, PRIMASK
 801216c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801216e:	b672      	cpsid	i
    return(primask_value);
 8012170:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012176:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f383 8810 	msr	PRIMASK, r3
}
 801217e:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012180:	46c0      	nop			; (mov r8, r8)
 8012182:	46bd      	mov	sp, r7
 8012184:	b00c      	add	sp, #48	; 0x30
 8012186:	bd80      	pop	{r7, pc}
 8012188:	080120a5 	.word	0x080120a5
 801218c:	53454d41 	.word	0x53454d41
 8012190:	2001072c 	.word	0x2001072c

08012194 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b08e      	sub	sp, #56	; 0x38
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	637b      	str	r3, [r7, #52]	; 0x34
 80121a4:	232f      	movs	r3, #47	; 0x2f
 80121a6:	18fb      	adds	r3, r7, r3
 80121a8:	2200      	movs	r2, #0
 80121aa:	701a      	strb	r2, [r3, #0]
 80121ac:	231c      	movs	r3, #28
 80121ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80121b0:	2300      	movs	r3, #0
 80121b2:	633b      	str	r3, [r7, #48]	; 0x30
 80121b4:	e009      	b.n	80121ca <_tx_semaphore_create+0x36>
 80121b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b8:	1c5a      	adds	r2, r3, #1
 80121ba:	637a      	str	r2, [r7, #52]	; 0x34
 80121bc:	222f      	movs	r2, #47	; 0x2f
 80121be:	18ba      	adds	r2, r7, r2
 80121c0:	7812      	ldrb	r2, [r2, #0]
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c6:	3301      	adds	r3, #1
 80121c8:	633b      	str	r3, [r7, #48]	; 0x30
 80121ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d3f1      	bcc.n	80121b6 <_tx_semaphore_create+0x22>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	68ba      	ldr	r2, [r7, #8]
 80121d6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80121de:	f3ef 8310 	mrs	r3, PRIMASK
 80121e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80121e4:	b672      	cpsid	i
    return(primask_value);
 80121e6:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80121e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	4a18      	ldr	r2, [pc, #96]	; (8012250 <_tx_semaphore_create+0xbc>)
 80121ee:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80121f0:	4b18      	ldr	r3, [pc, #96]	; (8012254 <_tx_semaphore_create+0xc0>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d109      	bne.n	801220c <_tx_semaphore_create+0x78>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80121f8:	4b17      	ldr	r3, [pc, #92]	; (8012258 <_tx_semaphore_create+0xc4>)
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	601a      	str	r2, [r3, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	68fa      	ldr	r2, [r7, #12]
 8012202:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	619a      	str	r2, [r3, #24]
 801220a:	e011      	b.n	8012230 <_tx_semaphore_create+0x9c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 801220c:	4b12      	ldr	r3, [pc, #72]	; (8012258 <_tx_semaphore_create+0xc4>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8012212:	6a3b      	ldr	r3, [r7, #32]
 8012214:	699b      	ldr	r3, [r3, #24]
 8012216:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8012218:	6a3b      	ldr	r3, [r7, #32]
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	69fa      	ldr	r2, [r7, #28]
 8012228:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	6a3a      	ldr	r2, [r7, #32]
 801222e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8012230:	4b08      	ldr	r3, [pc, #32]	; (8012254 <_tx_semaphore_create+0xc0>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	1c5a      	adds	r2, r3, #1
 8012236:	4b07      	ldr	r3, [pc, #28]	; (8012254 <_tx_semaphore_create+0xc0>)
 8012238:	601a      	str	r2, [r3, #0]
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	f383 8810 	msr	PRIMASK, r3
}
 8012244:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012246:	2300      	movs	r3, #0
}
 8012248:	0018      	movs	r0, r3
 801224a:	46bd      	mov	sp, r7
 801224c:	b00e      	add	sp, #56	; 0x38
 801224e:	bd80      	pop	{r7, pc}
 8012250:	53454d41 	.word	0x53454d41
 8012254:	20010660 	.word	0x20010660
 8012258:	2001065c 	.word	0x2001065c

0801225c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b08e      	sub	sp, #56	; 0x38
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012264:	f3ef 8310 	mrs	r3, PRIMASK
 8012268:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801226a:	b672      	cpsid	i
    return(primask_value);
 801226c:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801226e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2200      	movs	r2, #0
 8012274:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8012276:	4b3c      	ldr	r3, [pc, #240]	; (8012368 <_tx_semaphore_delete+0x10c>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	1e5a      	subs	r2, r3, #1
 801227c:	4b3a      	ldr	r3, [pc, #232]	; (8012368 <_tx_semaphore_delete+0x10c>)
 801227e:	601a      	str	r2, [r3, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8012280:	4b39      	ldr	r3, [pc, #228]	; (8012368 <_tx_semaphore_delete+0x10c>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d103      	bne.n	8012290 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8012288:	4b38      	ldr	r3, [pc, #224]	; (801236c <_tx_semaphore_delete+0x110>)
 801228a:	2200      	movs	r2, #0
 801228c:	601a      	str	r2, [r3, #0]
 801228e:	e013      	b.n	80122b8 <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	695b      	ldr	r3, [r3, #20]
 8012294:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	699b      	ldr	r3, [r3, #24]
 801229a:	627b      	str	r3, [r7, #36]	; 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 801229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122a0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80122a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122a6:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80122a8:	4b30      	ldr	r3, [pc, #192]	; (801236c <_tx_semaphore_delete+0x110>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d102      	bne.n	80122b8 <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80122b2:	4b2e      	ldr	r3, [pc, #184]	; (801236c <_tx_semaphore_delete+0x110>)
 80122b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122b6:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80122b8:	4b2d      	ldr	r3, [pc, #180]	; (8012370 <_tx_semaphore_delete+0x114>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	4b2c      	ldr	r3, [pc, #176]	; (8012370 <_tx_semaphore_delete+0x114>)
 80122c0:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	637b      	str	r3, [r7, #52]	; 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	691b      	ldr	r3, [r3, #16]
 80122d2:	633b      	str	r3, [r7, #48]	; 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	611a      	str	r2, [r3, #16]
 80122da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	f383 8810 	msr	PRIMASK, r3
}
 80122e4:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80122e6:	e023      	b.n	8012330 <_tx_semaphore_delete+0xd4>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80122e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ea:	3b01      	subs	r3, #1
 80122ec:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80122ee:	f3ef 8310 	mrs	r3, PRIMASK
 80122f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80122f4:	b672      	cpsid	i
    return(primask_value);
 80122f6:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 80122f8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80122fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fc:	2200      	movs	r2, #0
 80122fe:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8012300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012302:	2284      	movs	r2, #132	; 0x84
 8012304:	2101      	movs	r1, #1
 8012306:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8012308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801230c:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801230e:	4b18      	ldr	r3, [pc, #96]	; (8012370 <_tx_semaphore_delete+0x114>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	1c5a      	adds	r2, r3, #1
 8012314:	4b16      	ldr	r3, [pc, #88]	; (8012370 <_tx_semaphore_delete+0x114>)
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	f383 8810 	msr	PRIMASK, r3
}
 8012322:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012326:	0018      	movs	r0, r3
 8012328:	f000 fd1c 	bl	8012d64 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801232c:	6a3b      	ldr	r3, [r7, #32]
 801232e:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8012330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012332:	2b00      	cmp	r3, #0
 8012334:	d1d8      	bne.n	80122e8 <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012336:	f3ef 8310 	mrs	r3, PRIMASK
 801233a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801233c:	b672      	cpsid	i
    return(primask_value);
 801233e:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8012340:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8012342:	4b0b      	ldr	r3, [pc, #44]	; (8012370 <_tx_semaphore_delete+0x114>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	1e5a      	subs	r2, r3, #1
 8012348:	4b09      	ldr	r3, [pc, #36]	; (8012370 <_tx_semaphore_delete+0x114>)
 801234a:	601a      	str	r2, [r3, #0]
 801234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f383 8810 	msr	PRIMASK, r3
}
 8012356:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8012358:	f000 fccc 	bl	8012cf4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801235c:	2300      	movs	r3, #0
}
 801235e:	0018      	movs	r0, r3
 8012360:	46bd      	mov	sp, r7
 8012362:	b00e      	add	sp, #56	; 0x38
 8012364:	bd80      	pop	{r7, pc}
 8012366:	46c0      	nop			; (mov r8, r8)
 8012368:	20010660 	.word	0x20010660
 801236c:	2001065c 	.word	0x2001065c
 8012370:	2001072c 	.word	0x2001072c

08012374 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b08c      	sub	sp, #48	; 0x30
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801237e:	2300      	movs	r3, #0
 8012380:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012382:	f3ef 8310 	mrs	r3, PRIMASK
 8012386:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012388:	b672      	cpsid	i
    return(primask_value);
 801238a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801238c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00a      	beq.n	80123ac <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	689b      	ldr	r3, [r3, #8]
 801239a:	1e5a      	subs	r2, r3, #1
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	609a      	str	r2, [r3, #8]
 80123a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	f383 8810 	msr	PRIMASK, r3
}
 80123aa:	e069      	b.n	8012480 <_tx_semaphore_get+0x10c>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d05e      	beq.n	8012470 <_tx_semaphore_get+0xfc>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80123b2:	4b36      	ldr	r3, [pc, #216]	; (801248c <_tx_semaphore_get+0x118>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d008      	beq.n	80123cc <_tx_semaphore_get+0x58>
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	f383 8810 	msr	PRIMASK, r3
}
 80123c4:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80123c6:	230d      	movs	r3, #13
 80123c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123ca:	e059      	b.n	8012480 <_tx_semaphore_get+0x10c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80123cc:	4b30      	ldr	r3, [pc, #192]	; (8012490 <_tx_semaphore_get+0x11c>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80123d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d4:	4a2f      	ldr	r2, [pc, #188]	; (8012494 <_tx_semaphore_get+0x120>)
 80123d6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80123d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80123de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e0:	22ac      	movs	r2, #172	; 0xac
 80123e2:	589b      	ldr	r3, [r3, r2]
 80123e4:	1c5a      	adds	r2, r3, #1
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	21ac      	movs	r1, #172	; 0xac
 80123ea:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	691b      	ldr	r3, [r3, #16]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d109      	bne.n	8012408 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123f8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123fe:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8012400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012404:	675a      	str	r2, [r3, #116]	; 0x74
 8012406:	e011      	b.n	801242c <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	6a3a      	ldr	r2, [r7, #32]
 8012412:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012414:	6a3b      	ldr	r3, [r7, #32]
 8012416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012418:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241c:	69fa      	ldr	r2, [r7, #28]
 801241e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012424:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012426:	6a3b      	ldr	r3, [r7, #32]
 8012428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801242a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	691b      	ldr	r3, [r3, #16]
 8012430:	1c5a      	adds	r2, r3, #1
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012438:	2206      	movs	r2, #6
 801243a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	2201      	movs	r2, #1
 8012440:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	683a      	ldr	r2, [r7, #0]
 8012446:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012448:	4b10      	ldr	r3, [pc, #64]	; (801248c <_tx_semaphore_get+0x118>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	4b0f      	ldr	r3, [pc, #60]	; (801248c <_tx_semaphore_get+0x118>)
 8012450:	601a      	str	r2, [r3, #0]
 8012452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012454:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f383 8810 	msr	PRIMASK, r3
}
 801245c:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	0018      	movs	r0, r3
 8012462:	f000 fd7f 	bl	8012f64 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	2284      	movs	r2, #132	; 0x84
 801246a:	589b      	ldr	r3, [r3, r2]
 801246c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801246e:	e007      	b.n	8012480 <_tx_semaphore_get+0x10c>
 8012470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012472:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	f383 8810 	msr	PRIMASK, r3
}
 801247a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801247c:	230d      	movs	r3, #13
 801247e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 8012480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012482:	0018      	movs	r0, r3
 8012484:	46bd      	mov	sp, r7
 8012486:	b00c      	add	sp, #48	; 0x30
 8012488:	bd80      	pop	{r7, pc}
 801248a:	46c0      	nop			; (mov r8, r8)
 801248c:	2001072c 	.word	0x2001072c
 8012490:	20010694 	.word	0x20010694
 8012494:	080120a5 	.word	0x080120a5

08012498 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08a      	sub	sp, #40	; 0x28
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80124a0:	f3ef 8310 	mrs	r3, PRIMASK
 80124a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80124a6:	b672      	cpsid	i
    return(primask_value);
 80124a8:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d10a      	bne.n	80124ce <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	1c5a      	adds	r2, r3, #1
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	609a      	str	r2, [r3, #8]
 80124c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f383 8810 	msr	PRIMASK, r3
}
 80124cc:	e034      	b.n	8012538 <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	68db      	ldr	r3, [r3, #12]
 80124d2:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80124d4:	6a3b      	ldr	r3, [r7, #32]
 80124d6:	3b01      	subs	r3, #1
 80124d8:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 80124da:	6a3b      	ldr	r3, [r7, #32]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d103      	bne.n	80124e8 <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	60da      	str	r2, [r3, #12]
 80124e6:	e00e      	b.n	8012506 <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ec:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	69ba      	ldr	r2, [r7, #24]
 80124f2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124f8:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	69ba      	ldr	r2, [r7, #24]
 8012504:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6a3a      	ldr	r2, [r7, #32]
 801250a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	2200      	movs	r2, #0
 8012510:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	2284      	movs	r2, #132	; 0x84
 8012516:	2100      	movs	r1, #0
 8012518:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801251a:	4b0a      	ldr	r3, [pc, #40]	; (8012544 <_tx_semaphore_put+0xac>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	4b08      	ldr	r3, [pc, #32]	; (8012544 <_tx_semaphore_put+0xac>)
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012526:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	f383 8810 	msr	PRIMASK, r3
}
 801252e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	0018      	movs	r0, r3
 8012534:	f000 fc16 	bl	8012d64 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8012538:	2300      	movs	r3, #0
}
 801253a:	0018      	movs	r0, r3
 801253c:	46bd      	mov	sp, r7
 801253e:	b00a      	add	sp, #40	; 0x28
 8012540:	bd80      	pop	{r7, pc}
 8012542:	46c0      	nop			; (mov r8, r8)
 8012544:	2001072c 	.word	0x2001072c

08012548 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b098      	sub	sp, #96	; 0x60
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
 8012554:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8012556:	2300      	movs	r3, #0
 8012558:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801255a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801255c:	657b      	str	r3, [r7, #84]	; 0x54
 801255e:	2347      	movs	r3, #71	; 0x47
 8012560:	18fb      	adds	r3, r7, r3
 8012562:	22ef      	movs	r2, #239	; 0xef
 8012564:	701a      	strb	r2, [r3, #0]
 8012566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012568:	643b      	str	r3, [r7, #64]	; 0x40
 801256a:	2300      	movs	r3, #0
 801256c:	653b      	str	r3, [r7, #80]	; 0x50
 801256e:	e009      	b.n	8012584 <_tx_thread_create+0x3c>
 8012570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012572:	1c5a      	adds	r2, r3, #1
 8012574:	657a      	str	r2, [r7, #84]	; 0x54
 8012576:	2247      	movs	r2, #71	; 0x47
 8012578:	18ba      	adds	r2, r7, r2
 801257a:	7812      	ldrb	r2, [r2, #0]
 801257c:	701a      	strb	r2, [r3, #0]
 801257e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012580:	3301      	adds	r3, #1
 8012582:	653b      	str	r3, [r7, #80]	; 0x50
 8012584:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012588:	429a      	cmp	r2, r3
 801258a:	d3f1      	bcc.n	8012570 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012590:	233f      	movs	r3, #63	; 0x3f
 8012592:	18fb      	adds	r3, r7, r3
 8012594:	2200      	movs	r2, #0
 8012596:	701a      	strb	r2, [r3, #0]
 8012598:	23b0      	movs	r3, #176	; 0xb0
 801259a:	63bb      	str	r3, [r7, #56]	; 0x38
 801259c:	2300      	movs	r3, #0
 801259e:	64bb      	str	r3, [r7, #72]	; 0x48
 80125a0:	e009      	b.n	80125b6 <_tx_thread_create+0x6e>
 80125a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125a4:	1c5a      	adds	r2, r3, #1
 80125a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80125a8:	223f      	movs	r2, #63	; 0x3f
 80125aa:	18ba      	adds	r2, r7, r2
 80125ac:	7812      	ldrb	r2, [r2, #0]
 80125ae:	701a      	strb	r2, [r3, #0]
 80125b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125b2:	3301      	adds	r3, #1
 80125b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80125b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d3f1      	bcc.n	80125a2 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	68ba      	ldr	r2, [r7, #8]
 80125c2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	683a      	ldr	r2, [r7, #0]
 80125ce:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125d4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80125da:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80125e0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2194      	movs	r1, #148	; 0x94
 80125e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80125e8:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80125ee:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80125f4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	229c      	movs	r2, #156	; 0x9c
 80125fa:	2120      	movs	r1, #32
 80125fc:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80125fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012600:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8012602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012604:	3b01      	subs	r3, #1
 8012606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012608:	18d3      	adds	r3, r2, r3
 801260a:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012610:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8012612:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012616:	429a      	cmp	r2, r3
 8012618:	d007      	beq.n	801262a <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2200      	movs	r2, #0
 801261e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	2298      	movs	r2, #152	; 0x98
 8012624:	2100      	movs	r1, #0
 8012626:	5099      	str	r1, [r3, r2]
 8012628:	e006      	b.n	8012638 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801262e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2198      	movs	r1, #152	; 0x98
 8012634:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012636:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2203      	movs	r2, #3
 801263c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	4a48      	ldr	r2, [pc, #288]	; (8012764 <_tx_thread_create+0x21c>)
 8012642:	655a      	str	r2, [r3, #84]	; 0x54
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801264a:	4a47      	ldr	r2, [pc, #284]	; (8012768 <_tx_thread_create+0x220>)
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	0011      	movs	r1, r2
 8012650:	0018      	movs	r0, r3
 8012652:	f7ed fe05 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012656:	f3ef 8310 	mrs	r3, PRIMASK
 801265a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 801265c:	b672      	cpsid	i
    return(primask_value);
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8012660:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	4a41      	ldr	r2, [pc, #260]	; (801276c <_tx_thread_create+0x224>)
 8012666:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8012668:	4b41      	ldr	r3, [pc, #260]	; (8012770 <_tx_thread_create+0x228>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10b      	bne.n	8012688 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8012670:	4b40      	ldr	r3, [pc, #256]	; (8012774 <_tx_thread_create+0x22c>)
 8012672:	68fa      	ldr	r2, [r7, #12]
 8012674:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2188      	movs	r1, #136	; 0x88
 801267a:	68fa      	ldr	r2, [r7, #12]
 801267c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	218c      	movs	r1, #140	; 0x8c
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	505a      	str	r2, [r3, r1]
 8012686:	e016      	b.n	80126b6 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8012688:	4b3a      	ldr	r3, [pc, #232]	; (8012774 <_tx_thread_create+0x22c>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 801268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012690:	228c      	movs	r2, #140	; 0x8c
 8012692:	589b      	ldr	r3, [r3, r2]
 8012694:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8012696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012698:	218c      	movs	r1, #140	; 0x8c
 801269a:	68fa      	ldr	r2, [r7, #12]
 801269c:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a0:	2188      	movs	r1, #136	; 0x88
 80126a2:	68fa      	ldr	r2, [r7, #12]
 80126a4:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	218c      	movs	r1, #140	; 0x8c
 80126aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126ac:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2188      	movs	r1, #136	; 0x88
 80126b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126b4:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80126b6:	4b2e      	ldr	r3, [pc, #184]	; (8012770 <_tx_thread_create+0x228>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	1c5a      	adds	r2, r3, #1
 80126bc:	4b2c      	ldr	r3, [pc, #176]	; (8012770 <_tx_thread_create+0x228>)
 80126be:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80126c0:	4b2d      	ldr	r3, [pc, #180]	; (8012778 <_tx_thread_create+0x230>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	1c5a      	adds	r2, r3, #1
 80126c6:	4b2c      	ldr	r3, [pc, #176]	; (8012778 <_tx_thread_create+0x230>)
 80126c8:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80126ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d12a      	bne.n	8012726 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80126d0:	f3ef 8305 	mrs	r3, IPSR
 80126d4:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 80126d6:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80126d8:	4b28      	ldr	r3, [pc, #160]	; (801277c <_tx_thread_create+0x234>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	4313      	orrs	r3, r2
 80126de:	4a28      	ldr	r2, [pc, #160]	; (8012780 <_tx_thread_create+0x238>)
 80126e0:	4293      	cmp	r3, r2
 80126e2:	d90d      	bls.n	8012700 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80126e4:	4b27      	ldr	r3, [pc, #156]	; (8012784 <_tx_thread_create+0x23c>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80126ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d009      	beq.n	8012704 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80126f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126f4:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80126f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80126fe:	e001      	b.n	8012704 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8012700:	2300      	movs	r3, #0
 8012702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012706:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	f383 8810 	msr	PRIMASK, r3
}
 801270e:	46c0      	nop			; (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	0018      	movs	r0, r3
 8012714:	f000 fb26 	bl	8012d64 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801271a:	2b00      	cmp	r3, #0
 801271c:	d01c      	beq.n	8012758 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801271e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012722:	63da      	str	r2, [r3, #60]	; 0x3c
 8012724:	e018      	b.n	8012758 <_tx_thread_create+0x210>
 8012726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012728:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	f383 8810 	msr	PRIMASK, r3
}
 8012730:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012732:	f3ef 8310 	mrs	r3, PRIMASK
 8012736:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012738:	b672      	cpsid	i
    return(primask_value);
 801273a:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801273c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801273e:	4b0e      	ldr	r3, [pc, #56]	; (8012778 <_tx_thread_create+0x230>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	1e5a      	subs	r2, r3, #1
 8012744:	4b0c      	ldr	r3, [pc, #48]	; (8012778 <_tx_thread_create+0x230>)
 8012746:	601a      	str	r2, [r3, #0]
 8012748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801274c:	69bb      	ldr	r3, [r7, #24]
 801274e:	f383 8810 	msr	PRIMASK, r3
}
 8012752:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012754:	f000 face 	bl	8012cf4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8012758:	2300      	movs	r3, #0
}
 801275a:	0018      	movs	r0, r3
 801275c:	46bd      	mov	sp, r7
 801275e:	b018      	add	sp, #96	; 0x60
 8012760:	bd80      	pop	{r7, pc}
 8012762:	46c0      	nop			; (mov r8, r8)
 8012764:	08013469 	.word	0x08013469
 8012768:	08012aa1 	.word	0x08012aa1
 801276c:	54485244 	.word	0x54485244
 8012770:	200106a0 	.word	0x200106a0
 8012774:	2001069c 	.word	0x2001069c
 8012778:	2001072c 	.word	0x2001072c
 801277c:	20000010 	.word	0x20000010
 8012780:	f0f0f0ef 	.word	0xf0f0f0ef
 8012784:	20010698 	.word	0x20010698

08012788 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08a      	sub	sp, #40	; 0x28
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012790:	2300      	movs	r3, #0
 8012792:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012794:	f3ef 8310 	mrs	r3, PRIMASK
 8012798:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801279a:	b672      	cpsid	i
    return(primask_value);
 801279c:	697b      	ldr	r3, [r7, #20]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 801279e:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d00b      	beq.n	80127c0 <_tx_thread_delete+0x38>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	d007      	beq.n	80127c0 <_tx_thread_delete+0x38>
 80127b0:	6a3b      	ldr	r3, [r7, #32]
 80127b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	f383 8810 	msr	PRIMASK, r3
}
 80127ba:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 80127bc:	2311      	movs	r3, #17
 80127be:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d12d      	bne.n	8012822 <_tx_thread_delete+0x9a>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 80127cc:	4b17      	ldr	r3, [pc, #92]	; (801282c <_tx_thread_delete+0xa4>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	1e5a      	subs	r2, r3, #1
 80127d2:	4b16      	ldr	r3, [pc, #88]	; (801282c <_tx_thread_delete+0xa4>)
 80127d4:	601a      	str	r2, [r3, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 80127d6:	4b15      	ldr	r3, [pc, #84]	; (801282c <_tx_thread_delete+0xa4>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d103      	bne.n	80127e6 <_tx_thread_delete+0x5e>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 80127de:	4b14      	ldr	r3, [pc, #80]	; (8012830 <_tx_thread_delete+0xa8>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	601a      	str	r2, [r3, #0]
 80127e4:	e017      	b.n	8012816 <_tx_thread_delete+0x8e>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2288      	movs	r2, #136	; 0x88
 80127ea:	589b      	ldr	r3, [r3, r2]
 80127ec:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	228c      	movs	r2, #140	; 0x8c
 80127f2:	589b      	ldr	r3, [r3, r2]
 80127f4:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	218c      	movs	r1, #140	; 0x8c
 80127fa:	69ba      	ldr	r2, [r7, #24]
 80127fc:	505a      	str	r2, [r3, r1]
            previous_thread -> tx_thread_created_next =  next_thread;
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	2188      	movs	r1, #136	; 0x88
 8012802:	69fa      	ldr	r2, [r7, #28]
 8012804:	505a      	str	r2, [r3, r1]

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8012806:	4b0a      	ldr	r3, [pc, #40]	; (8012830 <_tx_thread_delete+0xa8>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	429a      	cmp	r2, r3
 801280e:	d102      	bne.n	8012816 <_tx_thread_delete+0x8e>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8012810:	4b07      	ldr	r3, [pc, #28]	; (8012830 <_tx_thread_delete+0xa8>)
 8012812:	69fa      	ldr	r2, [r7, #28]
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	6a3b      	ldr	r3, [r7, #32]
 8012818:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	f383 8810 	msr	PRIMASK, r3
}
 8012820:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8012822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012824:	0018      	movs	r0, r3
 8012826:	46bd      	mov	sp, r7
 8012828:	b00a      	add	sp, #40	; 0x28
 801282a:	bd80      	pop	{r7, pc}
 801282c:	200106a0 	.word	0x200106a0
 8012830:	2001069c 	.word	0x2001069c

08012834 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801283a:	f3ef 8310 	mrs	r3, PRIMASK
 801283e:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012840:	b672      	cpsid	i
    return(primask_value);
 8012842:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8012844:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012846:	4b07      	ldr	r3, [pc, #28]	; (8012864 <_tx_thread_identify+0x30>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	60bb      	str	r3, [r7, #8]
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f383 8810 	msr	PRIMASK, r3
}
 8012856:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8012858:	68bb      	ldr	r3, [r7, #8]
}
 801285a:	0018      	movs	r0, r3
 801285c:	46bd      	mov	sp, r7
 801285e:	b004      	add	sp, #16
 8012860:	bd80      	pop	{r7, pc}
 8012862:	46c0      	nop			; (mov r8, r8)
 8012864:	20010694 	.word	0x20010694

08012868 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b088      	sub	sp, #32
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	607a      	str	r2, [r7, #4]
 8012874:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012876:	f3ef 8310 	mrs	r3, PRIMASK
 801287a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801287c:	b672      	cpsid	i
    return(primask_value);
 801287e:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8012880:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d003      	beq.n	8012890 <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d003      	beq.n	801289e <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d003      	beq.n	80128ac <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	685a      	ldr	r2, [r3, #4]
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 80128ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d004      	beq.n	80128bc <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2294      	movs	r2, #148	; 0x94
 80128b6:	589a      	ldr	r2, [r3, r2]
 80128b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ba:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d004      	beq.n	80128cc <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2298      	movs	r2, #152	; 0x98
 80128c6:	589a      	ldr	r2, [r3, r2]
 80128c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ca:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 80128cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d003      	beq.n	80128da <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	699a      	ldr	r2, [r3, #24]
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 80128da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d004      	beq.n	80128ea <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2288      	movs	r2, #136	; 0x88
 80128e4:	589a      	ldr	r2, [r3, r2]
 80128e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128e8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 80128ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d003      	beq.n	80128f8 <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80128f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f6:	601a      	str	r2, [r3, #0]
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	f383 8810 	msr	PRIMASK, r3
}
 8012902:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8012904:	2300      	movs	r3, #0
}
 8012906:	0018      	movs	r0, r3
 8012908:	46bd      	mov	sp, r7
 801290a:	b008      	add	sp, #32
 801290c:	bd80      	pop	{r7, pc}
	...

08012910 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b088      	sub	sp, #32
 8012914:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8012916:	4b28      	ldr	r3, [pc, #160]	; (80129b8 <_tx_thread_initialize+0xa8>)
 8012918:	2200      	movs	r2, #0
 801291a:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801291c:	4b27      	ldr	r3, [pc, #156]	; (80129bc <_tx_thread_initialize+0xac>)
 801291e:	2200      	movs	r2, #0
 8012920:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8012922:	4b27      	ldr	r3, [pc, #156]	; (80129c0 <_tx_thread_initialize+0xb0>)
 8012924:	61fb      	str	r3, [r7, #28]
 8012926:	230f      	movs	r3, #15
 8012928:	18fb      	adds	r3, r7, r3
 801292a:	2200      	movs	r2, #0
 801292c:	701a      	strb	r2, [r3, #0]
 801292e:	2304      	movs	r3, #4
 8012930:	60bb      	str	r3, [r7, #8]
 8012932:	2300      	movs	r3, #0
 8012934:	61bb      	str	r3, [r7, #24]
 8012936:	e009      	b.n	801294c <_tx_thread_initialize+0x3c>
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	1c5a      	adds	r2, r3, #1
 801293c:	61fa      	str	r2, [r7, #28]
 801293e:	220f      	movs	r2, #15
 8012940:	18ba      	adds	r2, r7, r2
 8012942:	7812      	ldrb	r2, [r2, #0]
 8012944:	701a      	strb	r2, [r3, #0]
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	3301      	adds	r3, #1
 801294a:	61bb      	str	r3, [r7, #24]
 801294c:	69ba      	ldr	r2, [r7, #24]
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	429a      	cmp	r2, r3
 8012952:	d3f1      	bcc.n	8012938 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012954:	4b1b      	ldr	r3, [pc, #108]	; (80129c4 <_tx_thread_initialize+0xb4>)
 8012956:	2220      	movs	r2, #32
 8012958:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801295a:	4b1b      	ldr	r3, [pc, #108]	; (80129c8 <_tx_thread_initialize+0xb8>)
 801295c:	617b      	str	r3, [r7, #20]
 801295e:	1dfb      	adds	r3, r7, #7
 8012960:	2200      	movs	r2, #0
 8012962:	701a      	strb	r2, [r3, #0]
 8012964:	2380      	movs	r3, #128	; 0x80
 8012966:	603b      	str	r3, [r7, #0]
 8012968:	2300      	movs	r3, #0
 801296a:	613b      	str	r3, [r7, #16]
 801296c:	e008      	b.n	8012980 <_tx_thread_initialize+0x70>
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	1c5a      	adds	r2, r3, #1
 8012972:	617a      	str	r2, [r7, #20]
 8012974:	1dfa      	adds	r2, r7, #7
 8012976:	7812      	ldrb	r2, [r2, #0]
 8012978:	701a      	strb	r2, [r3, #0]
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	3301      	adds	r3, #1
 801297e:	613b      	str	r3, [r7, #16]
 8012980:	693a      	ldr	r2, [r7, #16]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	429a      	cmp	r2, r3
 8012986:	d3f2      	bcc.n	801296e <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8012988:	4b10      	ldr	r3, [pc, #64]	; (80129cc <_tx_thread_initialize+0xbc>)
 801298a:	2200      	movs	r2, #0
 801298c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801298e:	4b10      	ldr	r3, [pc, #64]	; (80129d0 <_tx_thread_initialize+0xc0>)
 8012990:	2200      	movs	r2, #0
 8012992:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8012994:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <_tx_thread_initialize+0xc4>)
 8012996:	2200      	movs	r2, #0
 8012998:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801299a:	4b0f      	ldr	r3, [pc, #60]	; (80129d8 <_tx_thread_initialize+0xc8>)
 801299c:	2200      	movs	r2, #0
 801299e:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80129a0:	4b0e      	ldr	r3, [pc, #56]	; (80129dc <_tx_thread_initialize+0xcc>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2285      	movs	r2, #133	; 0x85
 80129a6:	0452      	lsls	r2, r2, #17
 80129a8:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 80129aa:	4b0c      	ldr	r3, [pc, #48]	; (80129dc <_tx_thread_initialize+0xcc>)
 80129ac:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80129ae:	46c0      	nop			; (mov r8, r8)
 80129b0:	46bd      	mov	sp, r7
 80129b2:	b008      	add	sp, #32
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	46c0      	nop			; (mov r8, r8)
 80129b8:	20010694 	.word	0x20010694
 80129bc:	20010698 	.word	0x20010698
 80129c0:	200106a4 	.word	0x200106a4
 80129c4:	200106a8 	.word	0x200106a8
 80129c8:	200106ac 	.word	0x200106ac
 80129cc:	2001069c 	.word	0x2001069c
 80129d0:	200106a0 	.word	0x200106a0
 80129d4:	2001072c 	.word	0x2001072c
 80129d8:	20010730 	.word	0x20010730
 80129dc:	20010734 	.word	0x20010734

080129e0 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b08a      	sub	sp, #40	; 0x28
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80129e8:	2300      	movs	r3, #0
 80129ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80129ec:	f3ef 8310 	mrs	r3, PRIMASK
 80129f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80129f2:	b672      	cpsid	i
    return(primask_value);
 80129f4:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80129f6:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fc:	2b03      	cmp	r3, #3
 80129fe:	d130      	bne.n	8012a62 <_tx_thread_resume+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a00:	f3ef 8305 	mrs	r3, IPSR
 8012a04:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012a06:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8012a08:	4b21      	ldr	r3, [pc, #132]	; (8012a90 <_tx_thread_resume+0xb0>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	4a21      	ldr	r2, [pc, #132]	; (8012a94 <_tx_thread_resume+0xb4>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d90d      	bls.n	8012a30 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012a14:	4b20      	ldr	r3, [pc, #128]	; (8012a98 <_tx_thread_resume+0xb8>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8012a1a:	6a3b      	ldr	r3, [r7, #32]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d009      	beq.n	8012a34 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8012a20:	6a3b      	ldr	r3, [r7, #32]
 8012a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a24:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012a26:	6a3b      	ldr	r3, [r7, #32]
 8012a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a2a:	6a3b      	ldr	r3, [r7, #32]
 8012a2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8012a2e:	e001      	b.n	8012a34 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8012a30:	2300      	movs	r3, #0
 8012a32:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8012a34:	4b19      	ldr	r3, [pc, #100]	; (8012a9c <_tx_thread_resume+0xbc>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	1c5a      	adds	r2, r3, #1
 8012a3a:	4b18      	ldr	r3, [pc, #96]	; (8012a9c <_tx_thread_resume+0xbc>)
 8012a3c:	601a      	str	r2, [r3, #0]
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f383 8810 	msr	PRIMASK, r3
}
 8012a48:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	f000 f989 	bl	8012d64 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012a52:	6a3b      	ldr	r3, [r7, #32]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <_tx_thread_resume+0x7e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8012a58:	6a3b      	ldr	r3, [r7, #32]
 8012a5a:	69fa      	ldr	r2, [r7, #28]
 8012a5c:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8012a5e:	2300      	movs	r3, #0
 8012a60:	e012      	b.n	8012a88 <_tx_thread_resume+0xa8>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d105      	bne.n	8012a76 <_tx_thread_resume+0x96>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8012a70:	2319      	movs	r3, #25
 8012a72:	627b      	str	r3, [r7, #36]	; 0x24
 8012a74:	e001      	b.n	8012a7a <_tx_thread_resume+0x9a>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8012a76:	2312      	movs	r3, #18
 8012a78:	627b      	str	r3, [r7, #36]	; 0x24
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	f383 8810 	msr	PRIMASK, r3
}
 8012a84:	46c0      	nop			; (mov r8, r8)
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8012a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012a88:	0018      	movs	r0, r3
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	b00a      	add	sp, #40	; 0x28
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	20000010 	.word	0x20000010
 8012a94:	f0f0f0ef 	.word	0xf0f0f0ef
 8012a98:	20010698 	.word	0x20010698
 8012a9c:	2001072c 	.word	0x2001072c

08012aa0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b084      	sub	sp, #16
 8012aa4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012aa6:	4b1a      	ldr	r3, [pc, #104]	; (8012b10 <_tx_thread_shell_entry+0x70>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ab4:	0018      	movs	r0, r3
 8012ab6:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8012ab8:	4b16      	ldr	r3, [pc, #88]	; (8012b14 <_tx_thread_shell_entry+0x74>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d004      	beq.n	8012aca <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8012ac0:	4b14      	ldr	r3, [pc, #80]	; (8012b14 <_tx_thread_shell_entry+0x74>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	68fa      	ldr	r2, [r7, #12]
 8012ac6:	0010      	movs	r0, r2
 8012ac8:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012aca:	f3ef 8310 	mrs	r3, PRIMASK
 8012ace:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012ad0:	b672      	cpsid	i
    return(primask_value);
 8012ad2:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8012ad4:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2201      	movs	r2, #1
 8012ada:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2201      	movs	r2, #1
 8012ae0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012ae8:	4b0b      	ldr	r3, [pc, #44]	; (8012b18 <_tx_thread_shell_entry+0x78>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	4b0a      	ldr	r3, [pc, #40]	; (8012b18 <_tx_thread_shell_entry+0x78>)
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f383 8810 	msr	PRIMASK, r3
}
 8012afc:	46c0      	nop			; (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	0018      	movs	r0, r3
 8012b02:	f000 fa2f 	bl	8012f64 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8012b06:	46c0      	nop			; (mov r8, r8)
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	b004      	add	sp, #16
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	46c0      	nop			; (mov r8, r8)
 8012b10:	20010694 	.word	0x20010694
 8012b14:	20010730 	.word	0x20010730
 8012b18:	2001072c 	.word	0x2001072c

08012b1c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08e      	sub	sp, #56	; 0x38
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012b24:	f3ef 8310 	mrs	r3, PRIMASK
 8012b28:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012b2a:	b672      	cpsid	i
    return(primask_value);
 8012b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012b2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012b30:	4b35      	ldr	r3, [pc, #212]	; (8012c08 <_tx_thread_sleep+0xec>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8012b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d108      	bne.n	8012b4e <_tx_thread_sleep+0x32>
 8012b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b42:	f383 8810 	msr	PRIMASK, r3
}
 8012b46:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012b48:	2313      	movs	r3, #19
 8012b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8012b4c:	e056      	b.n	8012bfc <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b4e:	f3ef 8305 	mrs	r3, IPSR
 8012b52:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8012b54:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012b56:	4b2d      	ldr	r3, [pc, #180]	; (8012c0c <_tx_thread_sleep+0xf0>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	d008      	beq.n	8012b70 <_tx_thread_sleep+0x54>
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b60:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b62:	69fb      	ldr	r3, [r7, #28]
 8012b64:	f383 8810 	msr	PRIMASK, r3
}
 8012b68:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012b6a:	2313      	movs	r3, #19
 8012b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8012b6e:	e045      	b.n	8012bfc <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8012b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b72:	4b27      	ldr	r3, [pc, #156]	; (8012c10 <_tx_thread_sleep+0xf4>)
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d108      	bne.n	8012b8a <_tx_thread_sleep+0x6e>
 8012b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	f383 8810 	msr	PRIMASK, r3
}
 8012b82:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012b84:	2313      	movs	r3, #19
 8012b86:	637b      	str	r3, [r7, #52]	; 0x34
 8012b88:	e038      	b.n	8012bfc <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d108      	bne.n	8012ba2 <_tx_thread_sleep+0x86>
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	f383 8810 	msr	PRIMASK, r3
}
 8012b9a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8012ba0:	e02c      	b.n	8012bfc <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012ba2:	4b1c      	ldr	r3, [pc, #112]	; (8012c14 <_tx_thread_sleep+0xf8>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d008      	beq.n	8012bbc <_tx_thread_sleep+0xa0>
 8012baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bac:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	f383 8810 	msr	PRIMASK, r3
}
 8012bb4:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8012bb6:	2313      	movs	r3, #19
 8012bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8012bba:	e01f      	b.n	8012bfc <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8012bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbe:	2204      	movs	r2, #4
 8012bc0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bca:	2284      	movs	r2, #132	; 0x84
 8012bcc:	2100      	movs	r1, #0
 8012bce:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8012bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012bd6:	4b0f      	ldr	r3, [pc, #60]	; (8012c14 <_tx_thread_sleep+0xf8>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	1c5a      	adds	r2, r3, #1
 8012bdc:	4b0d      	ldr	r3, [pc, #52]	; (8012c14 <_tx_thread_sleep+0xf8>)
 8012bde:	601a      	str	r2, [r3, #0]
 8012be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f383 8810 	msr	PRIMASK, r3
}
 8012bea:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	0018      	movs	r0, r3
 8012bf0:	f000 f9b8 	bl	8012f64 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf6:	2284      	movs	r2, #132	; 0x84
 8012bf8:	589b      	ldr	r3, [r3, r2]
 8012bfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8012bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012bfe:	0018      	movs	r0, r3
 8012c00:	46bd      	mov	sp, r7
 8012c02:	b00e      	add	sp, #56	; 0x38
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	46c0      	nop			; (mov r8, r8)
 8012c08:	20010694 	.word	0x20010694
 8012c0c:	20000010 	.word	0x20000010
 8012c10:	200107dc 	.word	0x200107dc
 8012c14:	2001072c 	.word	0x2001072c

08012c18 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b08a      	sub	sp, #40	; 0x28
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c20:	f3ef 8310 	mrs	r3, PRIMASK
 8012c24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c26:	b672      	cpsid	i
    return(primask_value);
 8012c28:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012c2a:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012c2c:	4b2e      	ldr	r3, [pc, #184]	; (8012ce8 <_tx_thread_suspend+0xd0>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d130      	bne.n	8012c9c <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c3e:	f3ef 8305 	mrs	r3, IPSR
 8012c42:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012c44:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8012c46:	4b29      	ldr	r3, [pc, #164]	; (8012cec <_tx_thread_suspend+0xd4>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	d109      	bne.n	8012c62 <_tx_thread_suspend+0x4a>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8012c4e:	69fa      	ldr	r2, [r7, #28]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d105      	bne.n	8012c62 <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8012c56:	4b26      	ldr	r3, [pc, #152]	; (8012cf0 <_tx_thread_suspend+0xd8>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d001      	beq.n	8012c62 <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8012c5e:	2314      	movs	r3, #20
 8012c60:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d133      	bne.n	8012cd0 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2203      	movs	r2, #3
 8012c6c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2201      	movs	r2, #1
 8012c72:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2200      	movs	r2, #0
 8012c78:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012c7a:	4b1d      	ldr	r3, [pc, #116]	; (8012cf0 <_tx_thread_suspend+0xd8>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	1c5a      	adds	r2, r3, #1
 8012c80:	4b1b      	ldr	r3, [pc, #108]	; (8012cf0 <_tx_thread_suspend+0xd8>)
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	6a3b      	ldr	r3, [r7, #32]
 8012c86:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	f383 8810 	msr	PRIMASK, r3
}
 8012c8e:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	0018      	movs	r0, r3
 8012c94:	f000 f966 	bl	8012f64 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8012c98:	2300      	movs	r3, #0
 8012c9a:	e020      	b.n	8012cde <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca0:	2b02      	cmp	r3, #2
 8012ca2:	d102      	bne.n	8012caa <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8012ca4:	2314      	movs	r3, #20
 8012ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8012ca8:	e012      	b.n	8012cd0 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d102      	bne.n	8012cb8 <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8012cb2:	2314      	movs	r3, #20
 8012cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8012cb6:	e00b      	b.n	8012cd0 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cbc:	2b03      	cmp	r3, #3
 8012cbe:	d102      	bne.n	8012cc6 <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8012cc4:	e004      	b.n	8012cd0 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	627b      	str	r3, [r7, #36]	; 0x24
 8012cd0:	6a3b      	ldr	r3, [r7, #32]
 8012cd2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f383 8810 	msr	PRIMASK, r3
}
 8012cda:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8012cde:	0018      	movs	r0, r3
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	b00a      	add	sp, #40	; 0x28
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	46c0      	nop			; (mov r8, r8)
 8012ce8:	20010694 	.word	0x20010694
 8012cec:	20000010 	.word	0x20000010
 8012cf0:	2001072c 	.word	0x2001072c

08012cf4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b088      	sub	sp, #32
 8012cf8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012cfa:	4b16      	ldr	r3, [pc, #88]	; (8012d54 <_tx_thread_system_preempt_check+0x60>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d121      	bne.n	8012d4a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012d06:	4b14      	ldr	r3, [pc, #80]	; (8012d58 <_tx_thread_system_preempt_check+0x64>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8012d0c:	4b13      	ldr	r3, [pc, #76]	; (8012d5c <_tx_thread_system_preempt_check+0x68>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8012d12:	69ba      	ldr	r2, [r7, #24]
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d017      	beq.n	8012d4a <_tx_thread_system_preempt_check+0x56>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012d1a:	4b11      	ldr	r3, [pc, #68]	; (8012d60 <_tx_thread_system_preempt_check+0x6c>)
 8012d1c:	2280      	movs	r2, #128	; 0x80
 8012d1e:	0552      	lsls	r2, r2, #21
 8012d20:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012d22:	f3ef 8305 	mrs	r3, IPSR
 8012d26:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012d28:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d10c      	bne.n	8012d48 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8012d32:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8012d34:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 8012d36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012d38:	b662      	cpsie	i
}
 8012d3a:	46c0      	nop			; (mov r8, r8)
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f383 8810 	msr	PRIMASK, r3
}
 8012d46:	46c0      	nop			; (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 8012d48:	46c0      	nop			; (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8012d4a:	46c0      	nop			; (mov r8, r8)
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	b008      	add	sp, #32
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	46c0      	nop			; (mov r8, r8)
 8012d54:	2001072c 	.word	0x2001072c
 8012d58:	20010694 	.word	0x20010694
 8012d5c:	20010698 	.word	0x20010698
 8012d60:	e000ed04 	.word	0xe000ed04

08012d64 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b096      	sub	sp, #88	; 0x58
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8012d70:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012d72:	b672      	cpsid	i
    return(primask_value);
 8012d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012d76:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d005      	beq.n	8012d8c <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	334c      	adds	r3, #76	; 0x4c
 8012d84:	0018      	movs	r0, r3
 8012d86:	f000 fccb 	bl	8013720 <_tx_timer_system_deactivate>
 8012d8a:	e002      	b.n	8012d92 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012d92:	4b6d      	ldr	r3, [pc, #436]	; (8012f48 <_tx_thread_system_resume+0x1e4>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	1e5a      	subs	r2, r3, #1
 8012d98:	4b6b      	ldr	r3, [pc, #428]	; (8012f48 <_tx_thread_system_resume+0x1e4>)
 8012d9a:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d000      	beq.n	8012da6 <_tx_thread_system_resume+0x42>
 8012da4:	e084      	b.n	8012eb0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d100      	bne.n	8012db0 <_tx_thread_system_resume+0x4c>
 8012dae:	e098      	b.n	8012ee2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d000      	beq.n	8012dba <_tx_thread_system_resume+0x56>
 8012db8:	e073      	b.n	8012ea2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc4:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8012dc6:	4b61      	ldr	r3, [pc, #388]	; (8012f4c <_tx_thread_system_resume+0x1e8>)
 8012dc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012dca:	0092      	lsls	r2, r2, #2
 8012dcc:	58d3      	ldr	r3, [r2, r3]
 8012dce:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8012dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d155      	bne.n	8012e82 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8012dd6:	4b5d      	ldr	r3, [pc, #372]	; (8012f4c <_tx_thread_system_resume+0x1e8>)
 8012dd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012dda:	0092      	lsls	r2, r2, #2
 8012ddc:	6879      	ldr	r1, [r7, #4]
 8012dde:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8012dec:	2201      	movs	r2, #1
 8012dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df0:	409a      	lsls	r2, r3
 8012df2:	0013      	movs	r3, r2
 8012df4:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8012df6:	4b56      	ldr	r3, [pc, #344]	; (8012f50 <_tx_thread_system_resume+0x1ec>)
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dfc:	431a      	orrs	r2, r3
 8012dfe:	4b54      	ldr	r3, [pc, #336]	; (8012f50 <_tx_thread_system_resume+0x1ec>)
 8012e00:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8012e02:	4b54      	ldr	r3, [pc, #336]	; (8012f54 <_tx_thread_system_resume+0x1f0>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d26a      	bcs.n	8012ee2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8012e0c:	4b51      	ldr	r3, [pc, #324]	; (8012f54 <_tx_thread_system_resume+0x1f0>)
 8012e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e10:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8012e12:	4b51      	ldr	r3, [pc, #324]	; (8012f58 <_tx_thread_system_resume+0x1f4>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8012e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d103      	bne.n	8012e26 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012e1e:	4b4e      	ldr	r3, [pc, #312]	; (8012f58 <_tx_thread_system_resume+0x1f4>)
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	601a      	str	r2, [r3, #0]
 8012e24:	e05d      	b.n	8012ee2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8012e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d258      	bcs.n	8012ee2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8012e30:	4b49      	ldr	r3, [pc, #292]	; (8012f58 <_tx_thread_system_resume+0x1f4>)
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	601a      	str	r2, [r3, #0]
 8012e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e38:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	f383 8810 	msr	PRIMASK, r3
}
 8012e40:	46c0      	nop			; (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012e42:	4b41      	ldr	r3, [pc, #260]	; (8012f48 <_tx_thread_system_resume+0x1e4>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8012e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d000      	beq.n	8012e50 <_tx_thread_system_resume+0xec>
 8012e4e:	e074      	b.n	8012f3a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012e50:	4b42      	ldr	r3, [pc, #264]	; (8012f5c <_tx_thread_system_resume+0x1f8>)
 8012e52:	2280      	movs	r2, #128	; 0x80
 8012e54:	0552      	lsls	r2, r2, #21
 8012e56:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e58:	f3ef 8305 	mrs	r3, IPSR
 8012e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8012e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d10c      	bne.n	8012e7e <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012e64:	f3ef 8310 	mrs	r3, PRIMASK
 8012e68:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 8012e6c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012e6e:	b662      	cpsie	i
}
 8012e70:	46c0      	nop			; (mov r8, r8)
 8012e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e74:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012e76:	6a3b      	ldr	r3, [r7, #32]
 8012e78:	f383 8810 	msr	PRIMASK, r3
}
 8012e7c:	46c0      	nop			; (mov r8, r8)
}
 8012e7e:	46c0      	nop			; (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8012e80:	e05b      	b.n	8012f3a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8012e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e86:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8012e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e98:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e9e:	621a      	str	r2, [r3, #32]
 8012ea0:	e01f      	b.n	8012ee2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2203      	movs	r2, #3
 8012eac:	631a      	str	r2, [r3, #48]	; 0x30
 8012eae:	e018      	b.n	8012ee2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d014      	beq.n	8012ee2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d010      	beq.n	8012ee2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8012ed4:	e005      	b.n	8012ee2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2203      	movs	r2, #3
 8012ee0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012ee2:	4b1f      	ldr	r3, [pc, #124]	; (8012f60 <_tx_thread_system_resume+0x1fc>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012eea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	f383 8810 	msr	PRIMASK, r3
}
 8012ef2:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012ef4:	4b18      	ldr	r3, [pc, #96]	; (8012f58 <_tx_thread_system_resume+0x1f4>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d020      	beq.n	8012f40 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012efe:	4b12      	ldr	r3, [pc, #72]	; (8012f48 <_tx_thread_system_resume+0x1e4>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8012f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d11a      	bne.n	8012f40 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012f0a:	4b14      	ldr	r3, [pc, #80]	; (8012f5c <_tx_thread_system_resume+0x1f8>)
 8012f0c:	2280      	movs	r2, #128	; 0x80
 8012f0e:	0552      	lsls	r2, r2, #21
 8012f10:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012f12:	f3ef 8305 	mrs	r3, IPSR
 8012f16:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012f18:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d10f      	bne.n	8012f3e <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f22:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8012f24:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8012f26:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012f28:	b662      	cpsie	i
}
 8012f2a:	46c0      	nop			; (mov r8, r8)
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	f383 8810 	msr	PRIMASK, r3
}
 8012f36:	46c0      	nop			; (mov r8, r8)
}
 8012f38:	e001      	b.n	8012f3e <_tx_thread_system_resume+0x1da>
                                return;
 8012f3a:	46c0      	nop			; (mov r8, r8)
 8012f3c:	e000      	b.n	8012f40 <_tx_thread_system_resume+0x1dc>
 8012f3e:	46c0      	nop			; (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012f40:	46bd      	mov	sp, r7
 8012f42:	b016      	add	sp, #88	; 0x58
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	46c0      	nop			; (mov r8, r8)
 8012f48:	2001072c 	.word	0x2001072c
 8012f4c:	200106ac 	.word	0x200106ac
 8012f50:	200106a4 	.word	0x200106a4
 8012f54:	200106a8 	.word	0x200106a8
 8012f58:	20010698 	.word	0x20010698
 8012f5c:	e000ed04 	.word	0xe000ed04
 8012f60:	20010694 	.word	0x20010694

08012f64 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b09c      	sub	sp, #112	; 0x70
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012f6c:	4bb9      	ldr	r3, [pc, #740]	; (8013254 <_tx_thread_system_suspend+0x2f0>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012f72:	f3ef 8310 	mrs	r3, PRIMASK
 8012f76:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012f78:	b672      	cpsid	i
    return(primask_value);
 8012f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012f7c:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d111      	bne.n	8012faa <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f8a:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8012f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d007      	beq.n	8012fa2 <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8012f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f94:	3301      	adds	r3, #1
 8012f96:	d004      	beq.n	8012fa2 <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	334c      	adds	r3, #76	; 0x4c
 8012f9c:	0018      	movs	r0, r3
 8012f9e:	f000 fb61 	bl	8013664 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	69da      	ldr	r2, [r3, #28]
 8012fa6:	4bac      	ldr	r3, [pc, #688]	; (8013258 <_tx_thread_system_suspend+0x2f4>)
 8012fa8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012faa:	4bac      	ldr	r3, [pc, #688]	; (801325c <_tx_thread_system_suspend+0x2f8>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	1e5a      	subs	r2, r3, #1
 8012fb0:	4baa      	ldr	r3, [pc, #680]	; (801325c <_tx_thread_system_suspend+0x2f8>)
 8012fb2:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d000      	beq.n	8012fbe <_tx_thread_system_suspend+0x5a>
 8012fbc:	e118      	b.n	80131f0 <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc8:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6a1b      	ldr	r3, [r3, #32]
 8012fce:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8012fd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d016      	beq.n	8013006 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fdc:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fe2:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8012fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012fe8:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8012fea:	4b9d      	ldr	r3, [pc, #628]	; (8013260 <_tx_thread_system_suspend+0x2fc>)
 8012fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fee:	0092      	lsls	r2, r2, #2
 8012ff0:	58d3      	ldr	r3, [r2, r3]
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d000      	beq.n	8012ffa <_tx_thread_system_suspend+0x96>
 8012ff8:	e0c9      	b.n	801318e <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8012ffa:	4b99      	ldr	r3, [pc, #612]	; (8013260 <_tx_thread_system_suspend+0x2fc>)
 8012ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ffe:	0092      	lsls	r2, r2, #2
 8013000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013002:	50d1      	str	r1, [r2, r3]
 8013004:	e0c3      	b.n	801318e <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8013006:	4b96      	ldr	r3, [pc, #600]	; (8013260 <_tx_thread_system_suspend+0x2fc>)
 8013008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801300a:	0092      	lsls	r2, r2, #2
 801300c:	2100      	movs	r1, #0
 801300e:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8013010:	2201      	movs	r2, #1
 8013012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013014:	409a      	lsls	r2, r3
 8013016:	0013      	movs	r3, r2
 8013018:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801301a:	4b92      	ldr	r3, [pc, #584]	; (8013264 <_tx_thread_system_suspend+0x300>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013020:	43d2      	mvns	r2, r2
 8013022:	401a      	ands	r2, r3
 8013024:	4b8f      	ldr	r3, [pc, #572]	; (8013264 <_tx_thread_system_suspend+0x300>)
 8013026:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013028:	2300      	movs	r3, #0
 801302a:	653b      	str	r3, [r7, #80]	; 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801302c:	4b8d      	ldr	r3, [pc, #564]	; (8013264 <_tx_thread_system_suspend+0x300>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8013032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013034:	2b00      	cmp	r3, #0
 8013036:	d12b      	bne.n	8013090 <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013038:	4b8b      	ldr	r3, [pc, #556]	; (8013268 <_tx_thread_system_suspend+0x304>)
 801303a:	2220      	movs	r2, #32
 801303c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801303e:	4b8b      	ldr	r3, [pc, #556]	; (801326c <_tx_thread_system_suspend+0x308>)
 8013040:	2200      	movs	r2, #0
 8013042:	601a      	str	r2, [r3, #0]
 8013044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013046:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801304a:	f383 8810 	msr	PRIMASK, r3
}
 801304e:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013050:	4b82      	ldr	r3, [pc, #520]	; (801325c <_tx_thread_system_suspend+0x2f8>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (combined_flags == ((ULONG) 0))
 8013056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013058:	2b00      	cmp	r3, #0
 801305a:	d000      	beq.n	801305e <_tx_thread_system_suspend+0xfa>
 801305c:	e0f2      	b.n	8013244 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801305e:	4b84      	ldr	r3, [pc, #528]	; (8013270 <_tx_thread_system_suspend+0x30c>)
 8013060:	2280      	movs	r2, #128	; 0x80
 8013062:	0552      	lsls	r2, r2, #21
 8013064:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013066:	f3ef 8305 	mrs	r3, IPSR
 801306a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(ipsr_value);
 801306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (__get_ipsr_value() == 0)
 801306e:	2b00      	cmp	r3, #0
 8013070:	d10c      	bne.n	801308c <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013072:	f3ef 8310 	mrs	r3, PRIMASK
 8013076:	63bb      	str	r3, [r7, #56]	; 0x38
    return(primask_value);
 8013078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        interrupt_save = __get_primask_value();
 801307a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801307c:	b662      	cpsie	i
}
 801307e:	46c0      	nop			; (mov r8, r8)
 8013080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013082:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013086:	f383 8810 	msr	PRIMASK, r3
}
 801308a:	46c0      	nop			; (mov r8, r8)
}
 801308c:	46c0      	nop			; (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801308e:	e0d9      	b.n	8013244 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8013090:	2300      	movs	r3, #0
 8013092:	66bb      	str	r3, [r7, #104]	; 0x68
 8013094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013096:	425a      	negs	r2, r3
 8013098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801309a:	4013      	ands	r3, r2
 801309c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130a0:	2b0f      	cmp	r3, #15
 80130a2:	d80e      	bhi.n	80130c2 <_tx_thread_system_suspend+0x15e>
 80130a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130a6:	2b03      	cmp	r3, #3
 80130a8:	d905      	bls.n	80130b6 <_tx_thread_system_suspend+0x152>
 80130aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130ac:	089b      	lsrs	r3, r3, #2
 80130ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80130b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130b2:	3302      	adds	r3, #2
 80130b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80130b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130b8:	085b      	lsrs	r3, r3, #1
 80130ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130bc:	18d3      	adds	r3, r2, r3
 80130be:	66bb      	str	r3, [r7, #104]	; 0x68
 80130c0:	e060      	b.n	8013184 <_tx_thread_system_suspend+0x220>
 80130c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130c4:	2bff      	cmp	r3, #255	; 0xff
 80130c6:	d814      	bhi.n	80130f2 <_tx_thread_system_suspend+0x18e>
 80130c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130ca:	091b      	lsrs	r3, r3, #4
 80130cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80130ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130d0:	3304      	adds	r3, #4
 80130d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80130d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130d6:	2b03      	cmp	r3, #3
 80130d8:	d905      	bls.n	80130e6 <_tx_thread_system_suspend+0x182>
 80130da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130dc:	089b      	lsrs	r3, r3, #2
 80130de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80130e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130e2:	3302      	adds	r3, #2
 80130e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80130e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130e8:	085b      	lsrs	r3, r3, #1
 80130ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130ec:	18d3      	adds	r3, r2, r3
 80130ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80130f0:	e048      	b.n	8013184 <_tx_thread_system_suspend+0x220>
 80130f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80130f4:	2380      	movs	r3, #128	; 0x80
 80130f6:	025b      	lsls	r3, r3, #9
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d21d      	bcs.n	8013138 <_tx_thread_system_suspend+0x1d4>
 80130fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130fe:	0a1b      	lsrs	r3, r3, #8
 8013100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013104:	3308      	adds	r3, #8
 8013106:	66bb      	str	r3, [r7, #104]	; 0x68
 8013108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801310a:	2b0f      	cmp	r3, #15
 801310c:	d905      	bls.n	801311a <_tx_thread_system_suspend+0x1b6>
 801310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013110:	091b      	lsrs	r3, r3, #4
 8013112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013116:	3304      	adds	r3, #4
 8013118:	66bb      	str	r3, [r7, #104]	; 0x68
 801311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801311c:	2b03      	cmp	r3, #3
 801311e:	d905      	bls.n	801312c <_tx_thread_system_suspend+0x1c8>
 8013120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013122:	089b      	lsrs	r3, r3, #2
 8013124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013128:	3302      	adds	r3, #2
 801312a:	66bb      	str	r3, [r7, #104]	; 0x68
 801312c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801312e:	085b      	lsrs	r3, r3, #1
 8013130:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013132:	18d3      	adds	r3, r2, r3
 8013134:	66bb      	str	r3, [r7, #104]	; 0x68
 8013136:	e025      	b.n	8013184 <_tx_thread_system_suspend+0x220>
 8013138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801313a:	0c1b      	lsrs	r3, r3, #16
 801313c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801313e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013140:	3310      	adds	r3, #16
 8013142:	66bb      	str	r3, [r7, #104]	; 0x68
 8013144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013146:	2bff      	cmp	r3, #255	; 0xff
 8013148:	d905      	bls.n	8013156 <_tx_thread_system_suspend+0x1f2>
 801314a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801314c:	0a1b      	lsrs	r3, r3, #8
 801314e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013152:	3308      	adds	r3, #8
 8013154:	66bb      	str	r3, [r7, #104]	; 0x68
 8013156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013158:	2b0f      	cmp	r3, #15
 801315a:	d905      	bls.n	8013168 <_tx_thread_system_suspend+0x204>
 801315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801315e:	091b      	lsrs	r3, r3, #4
 8013160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013164:	3304      	adds	r3, #4
 8013166:	66bb      	str	r3, [r7, #104]	; 0x68
 8013168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801316a:	2b03      	cmp	r3, #3
 801316c:	d905      	bls.n	801317a <_tx_thread_system_suspend+0x216>
 801316e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013170:	089b      	lsrs	r3, r3, #2
 8013172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013176:	3302      	adds	r3, #2
 8013178:	66bb      	str	r3, [r7, #104]	; 0x68
 801317a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801317c:	085b      	lsrs	r3, r3, #1
 801317e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013180:	18d3      	adds	r3, r2, r3
 8013182:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8013184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013188:	18d2      	adds	r2, r2, r3
 801318a:	4b37      	ldr	r3, [pc, #220]	; (8013268 <_tx_thread_system_suspend+0x304>)
 801318c:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801318e:	4b37      	ldr	r3, [pc, #220]	; (801326c <_tx_thread_system_suspend+0x308>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	429a      	cmp	r2, r3
 8013196:	d12b      	bne.n	80131f0 <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013198:	4b33      	ldr	r3, [pc, #204]	; (8013268 <_tx_thread_system_suspend+0x304>)
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	4b30      	ldr	r3, [pc, #192]	; (8013260 <_tx_thread_system_suspend+0x2fc>)
 801319e:	0092      	lsls	r2, r2, #2
 80131a0:	58d2      	ldr	r2, [r2, r3]
 80131a2:	4b32      	ldr	r3, [pc, #200]	; (801326c <_tx_thread_system_suspend+0x308>)
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80131aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ac:	f383 8810 	msr	PRIMASK, r3
}
 80131b0:	46c0      	nop			; (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80131b2:	4b2a      	ldr	r3, [pc, #168]	; (801325c <_tx_thread_system_suspend+0x2f8>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (combined_flags == ((ULONG) 0))
 80131b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d144      	bne.n	8013248 <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80131be:	4b2c      	ldr	r3, [pc, #176]	; (8013270 <_tx_thread_system_suspend+0x30c>)
 80131c0:	2280      	movs	r2, #128	; 0x80
 80131c2:	0552      	lsls	r2, r2, #21
 80131c4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131c6:	f3ef 8305 	mrs	r3, IPSR
 80131ca:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80131cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d10c      	bne.n	80131ec <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80131d2:	f3ef 8310 	mrs	r3, PRIMASK
 80131d6:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 80131d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 80131da:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80131dc:	b662      	cpsie	i
}
 80131de:	46c0      	nop			; (mov r8, r8)
 80131e0:	6a3b      	ldr	r3, [r7, #32]
 80131e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	f383 8810 	msr	PRIMASK, r3
}
 80131ea:	46c0      	nop			; (mov r8, r8)
}
 80131ec:	46c0      	nop			; (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80131ee:	e02b      	b.n	8013248 <_tx_thread_system_suspend+0x2e4>
 80131f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	f383 8810 	msr	PRIMASK, r3
}
 80131fa:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80131fc:	4b1b      	ldr	r3, [pc, #108]	; (801326c <_tx_thread_system_suspend+0x308>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013202:	429a      	cmp	r2, r3
 8013204:	d022      	beq.n	801324c <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013206:	4b15      	ldr	r3, [pc, #84]	; (801325c <_tx_thread_system_suspend+0x2f8>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (combined_flags == ((ULONG) 0))
 801320c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801320e:	2b00      	cmp	r3, #0
 8013210:	d11c      	bne.n	801324c <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013212:	4b17      	ldr	r3, [pc, #92]	; (8013270 <_tx_thread_system_suspend+0x30c>)
 8013214:	2280      	movs	r2, #128	; 0x80
 8013216:	0552      	lsls	r2, r2, #21
 8013218:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801321a:	f3ef 8305 	mrs	r3, IPSR
 801321e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013220:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8013222:	2b00      	cmp	r3, #0
 8013224:	d10c      	bne.n	8013240 <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013226:	f3ef 8310 	mrs	r3, PRIMASK
 801322a:	613b      	str	r3, [r7, #16]
    return(primask_value);
 801322c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 801322e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8013230:	b662      	cpsie	i
}
 8013232:	46c0      	nop			; (mov r8, r8)
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	f383 8810 	msr	PRIMASK, r3
}
 801323e:	46c0      	nop			; (mov r8, r8)
}
 8013240:	46c0      	nop			; (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8013242:	e003      	b.n	801324c <_tx_thread_system_suspend+0x2e8>
                return;
 8013244:	46c0      	nop			; (mov r8, r8)
 8013246:	e002      	b.n	801324e <_tx_thread_system_suspend+0x2ea>
            return;
 8013248:	46c0      	nop			; (mov r8, r8)
 801324a:	e000      	b.n	801324e <_tx_thread_system_suspend+0x2ea>
    return;
 801324c:	46c0      	nop			; (mov r8, r8)
}
 801324e:	46bd      	mov	sp, r7
 8013250:	b01c      	add	sp, #112	; 0x70
 8013252:	bd80      	pop	{r7, pc}
 8013254:	20010694 	.word	0x20010694
 8013258:	20010c98 	.word	0x20010c98
 801325c:	2001072c 	.word	0x2001072c
 8013260:	200106ac 	.word	0x200106ac
 8013264:	200106a4 	.word	0x200106a4
 8013268:	200106a8 	.word	0x200106a8
 801326c:	20010698 	.word	0x20010698
 8013270:	e000ed04 	.word	0xe000ed04

08013274 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b092      	sub	sp, #72	; 0x48
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 801327c:	2300      	movs	r3, #0
 801327e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013280:	f3ef 8310 	mrs	r3, PRIMASK
 8013284:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013286:	b672      	cpsid	i
    return(primask_value);
 8013288:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 801328a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	334c      	adds	r3, #76	; 0x4c
 8013290:	0018      	movs	r0, r3
 8013292:	f000 fa45 	bl	8013720 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801329a:	2b02      	cmp	r3, #2
 801329c:	d108      	bne.n	80132b0 <_tx_thread_terminate+0x3c>
 801329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132a0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a4:	f383 8810 	msr	PRIMASK, r3
}
 80132a8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 80132aa:	2300      	movs	r3, #0
 80132ac:	643b      	str	r3, [r7, #64]	; 0x40
 80132ae:	e082      	b.n	80133b6 <_tx_thread_terminate+0x142>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d100      	bne.n	80132ba <_tx_thread_terminate+0x46>
 80132b8:	e077      	b.n	80133aa <_tx_thread_terminate+0x136>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80132ba:	4b42      	ldr	r3, [pc, #264]	; (80133c4 <_tx_thread_terminate+0x150>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	1c5a      	adds	r2, r3, #1
 80132c0:	4b40      	ldr	r3, [pc, #256]	; (80133c4 <_tx_thread_terminate+0x150>)
 80132c2:	601a      	str	r2, [r3, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d11e      	bne.n	801330a <_tx_thread_terminate+0x96>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2202      	movs	r2, #2
 80132d0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2201      	movs	r2, #1
 80132d6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 80132de:	4b39      	ldr	r3, [pc, #228]	; (80133c4 <_tx_thread_terminate+0x150>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	1c5a      	adds	r2, r3, #1
 80132e4:	4b37      	ldr	r3, [pc, #220]	; (80133c4 <_tx_thread_terminate+0x150>)
 80132e6:	601a      	str	r2, [r3, #0]
 80132e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ee:	f383 8810 	msr	PRIMASK, r3
}
 80132f2:	46c0      	nop			; (mov r8, r8)
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	0018      	movs	r0, r3
 80132f8:	f7ff fe34 	bl	8012f64 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80132fc:	f3ef 8310 	mrs	r3, PRIMASK
 8013300:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013302:	b672      	cpsid	i
    return(primask_value);
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Disable interrupts.  */
            TX_DISABLE
 8013306:	647b      	str	r3, [r7, #68]	; 0x44
 8013308:	e02f      	b.n	801336a <_tx_thread_terminate+0xf6>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2202      	movs	r2, #2
 801330e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2201      	movs	r2, #1
 8013314:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801331a:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	22ac      	movs	r2, #172	; 0xac
 8013320:	589b      	ldr	r3, [r3, r2]
 8013322:	63bb      	str	r3, [r7, #56]	; 0x38
 8013324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013326:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332a:	f383 8810 	msr	PRIMASK, r3
}
 801332e:	46c0      	nop			; (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 8013330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013332:	2b00      	cmp	r3, #0
 8013334:	d004      	beq.n	8013340 <_tx_thread_terminate+0xcc>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 8013336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801333c:	0010      	movs	r0, r2
 801333e:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013340:	f3ef 8310 	mrs	r3, PRIMASK
 8013344:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013346:	b672      	cpsid	i
    return(primask_value);
 8013348:	69bb      	ldr	r3, [r7, #24]
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 801334a:	647b      	str	r3, [r7, #68]	; 0x44
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2200      	movs	r2, #0
 8013350:	639a      	str	r2, [r3, #56]	; 0x38
 8013352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013354:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	f383 8810 	msr	PRIMASK, r3
}
 801335c:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801335e:	f3ef 8310 	mrs	r3, PRIMASK
 8013362:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013364:	b672      	cpsid	i
    return(primask_value);
 8013366:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8013368:	647b      	str	r3, [r7, #68]	; 0x44
 801336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801336c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	f383 8810 	msr	PRIMASK, r3
}
 8013374:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 8013376:	4b14      	ldr	r3, [pc, #80]	; (80133c8 <_tx_thread_terminate+0x154>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d004      	beq.n	8013388 <_tx_thread_terminate+0x114>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 801337e:	4b12      	ldr	r3, [pc, #72]	; (80133c8 <_tx_thread_terminate+0x154>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	0010      	movs	r0, r2
 8013386:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013388:	f3ef 8310 	mrs	r3, PRIMASK
 801338c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801338e:	b672      	cpsid	i
    return(primask_value);
 8013390:	68fb      	ldr	r3, [r7, #12]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8013392:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8013394:	4b0b      	ldr	r3, [pc, #44]	; (80133c4 <_tx_thread_terminate+0x150>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	1e5a      	subs	r2, r3, #1
 801339a:	4b0a      	ldr	r3, [pc, #40]	; (80133c4 <_tx_thread_terminate+0x150>)
 801339c:	601a      	str	r2, [r3, #0]
 801339e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	f383 8810 	msr	PRIMASK, r3
}
 80133a8:	e005      	b.n	80133b6 <_tx_thread_terminate+0x142>
 80133aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	f383 8810 	msr	PRIMASK, r3
}
 80133b4:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80133b6:	f7ff fc9d 	bl	8012cf4 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 80133ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80133bc:	0018      	movs	r0, r3
 80133be:	46bd      	mov	sp, r7
 80133c0:	b012      	add	sp, #72	; 0x48
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	2001072c 	.word	0x2001072c
 80133c8:	20010730 	.word	0x20010730

080133cc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80133d2:	4b1f      	ldr	r3, [pc, #124]	; (8013450 <_tx_thread_time_slice+0x84>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80133d8:	f3ef 8310 	mrs	r3, PRIMASK
 80133dc:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80133de:	b672      	cpsid	i
    return(primask_value);
 80133e0:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80133e2:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80133e4:	4b1b      	ldr	r3, [pc, #108]	; (8013454 <_tx_thread_time_slice+0x88>)
 80133e6:	2200      	movs	r2, #0
 80133e8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d024      	beq.n	801343a <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d120      	bne.n	801343a <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	69da      	ldr	r2, [r3, #28]
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	699a      	ldr	r2, [r3, #24]
 8013404:	4b14      	ldr	r3, [pc, #80]	; (8013458 <_tx_thread_time_slice+0x8c>)
 8013406:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	6a1b      	ldr	r3, [r3, #32]
 801340c:	68fa      	ldr	r2, [r7, #12]
 801340e:	429a      	cmp	r2, r3
 8013410:	d013      	beq.n	801343a <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801341a:	429a      	cmp	r2, r3
 801341c:	d10d      	bne.n	801343a <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	6a19      	ldr	r1, [r3, #32]
 8013426:	4b0d      	ldr	r3, [pc, #52]	; (801345c <_tx_thread_time_slice+0x90>)
 8013428:	0092      	lsls	r2, r2, #2
 801342a:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801342c:	4b0c      	ldr	r3, [pc, #48]	; (8013460 <_tx_thread_time_slice+0x94>)
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	4b0a      	ldr	r3, [pc, #40]	; (801345c <_tx_thread_time_slice+0x90>)
 8013432:	0092      	lsls	r2, r2, #2
 8013434:	58d2      	ldr	r2, [r2, r3]
 8013436:	4b0b      	ldr	r3, [pc, #44]	; (8013464 <_tx_thread_time_slice+0x98>)
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	f383 8810 	msr	PRIMASK, r3
}
 8013444:	46c0      	nop			; (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8013446:	46c0      	nop			; (mov r8, r8)
 8013448:	46bd      	mov	sp, r7
 801344a:	b004      	add	sp, #16
 801344c:	bd80      	pop	{r7, pc}
 801344e:	46c0      	nop			; (mov r8, r8)
 8013450:	20010694 	.word	0x20010694
 8013454:	2001073c 	.word	0x2001073c
 8013458:	20010c98 	.word	0x20010c98
 801345c:	200106ac 	.word	0x200106ac
 8013460:	200106a8 	.word	0x200106a8
 8013464:	20010698 	.word	0x20010698

08013468 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08a      	sub	sp, #40	; 0x28
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013474:	f3ef 8310 	mrs	r3, PRIMASK
 8013478:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801347a:	b672      	cpsid	i
    return(primask_value);
 801347c:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 801347e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013484:	2b04      	cmp	r3, #4
 8013486:	d10f      	bne.n	80134a8 <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8013488:	4b14      	ldr	r3, [pc, #80]	; (80134dc <_tx_thread_timeout+0x74>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	1c5a      	adds	r2, r3, #1
 801348e:	4b13      	ldr	r3, [pc, #76]	; (80134dc <_tx_thread_timeout+0x74>)
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	6a3b      	ldr	r3, [r7, #32]
 8013494:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	f383 8810 	msr	PRIMASK, r3
}
 801349c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	0018      	movs	r0, r3
 80134a2:	f7ff fc5f 	bl	8012d64 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80134a6:	e014      	b.n	80134d2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80134a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134ac:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80134ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b0:	22ac      	movs	r2, #172	; 0xac
 80134b2:	589b      	ldr	r3, [r3, r2]
 80134b4:	61bb      	str	r3, [r7, #24]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f383 8810 	msr	PRIMASK, r3
}
 80134c0:	46c0      	nop			; (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d004      	beq.n	80134d2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80134c8:	69b9      	ldr	r1, [r7, #24]
 80134ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	0010      	movs	r0, r2
 80134d0:	4798      	blx	r3
}
 80134d2:	46c0      	nop			; (mov r8, r8)
 80134d4:	46bd      	mov	sp, r7
 80134d6:	b00a      	add	sp, #40	; 0x28
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	46c0      	nop			; (mov r8, r8)
 80134dc:	2001072c 	.word	0x2001072c

080134e0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80134e6:	f3ef 8310 	mrs	r3, PRIMASK
 80134ea:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80134ec:	b672      	cpsid	i
    return(primask_value);
 80134ee:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80134f0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80134f2:	4b09      	ldr	r3, [pc, #36]	; (8013518 <_tx_timer_expiration_process+0x38>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	1c5a      	adds	r2, r3, #1
 80134f8:	4b07      	ldr	r3, [pc, #28]	; (8013518 <_tx_timer_expiration_process+0x38>)
 80134fa:	601a      	str	r2, [r3, #0]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	f383 8810 	msr	PRIMASK, r3
}
 8013506:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8013508:	4b04      	ldr	r3, [pc, #16]	; (801351c <_tx_timer_expiration_process+0x3c>)
 801350a:	0018      	movs	r0, r3
 801350c:	f7ff fc2a 	bl	8012d64 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013510:	46c0      	nop			; (mov r8, r8)
 8013512:	46bd      	mov	sp, r7
 8013514:	b004      	add	sp, #16
 8013516:	bd80      	pop	{r7, pc}
 8013518:	2001072c 	.word	0x2001072c
 801351c:	200107dc 	.word	0x200107dc

08013520 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8013520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013522:	46ce      	mov	lr, r9
 8013524:	4647      	mov	r7, r8
 8013526:	b580      	push	{r7, lr}
 8013528:	b08d      	sub	sp, #52	; 0x34
 801352a:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801352c:	4b39      	ldr	r3, [pc, #228]	; (8013614 <_tx_timer_initialize+0xf4>)
 801352e:	2200      	movs	r2, #0
 8013530:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8013532:	4b39      	ldr	r3, [pc, #228]	; (8013618 <_tx_timer_initialize+0xf8>)
 8013534:	2200      	movs	r2, #0
 8013536:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013538:	4b38      	ldr	r3, [pc, #224]	; (801361c <_tx_timer_initialize+0xfc>)
 801353a:	2200      	movs	r2, #0
 801353c:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801353e:	4b38      	ldr	r3, [pc, #224]	; (8013620 <_tx_timer_initialize+0x100>)
 8013540:	2200      	movs	r2, #0
 8013542:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8013544:	4b37      	ldr	r3, [pc, #220]	; (8013624 <_tx_timer_initialize+0x104>)
 8013546:	2200      	movs	r2, #0
 8013548:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801354a:	4b37      	ldr	r3, [pc, #220]	; (8013628 <_tx_timer_initialize+0x108>)
 801354c:	617b      	str	r3, [r7, #20]
 801354e:	230f      	movs	r3, #15
 8013550:	18fb      	adds	r3, r7, r3
 8013552:	2200      	movs	r2, #0
 8013554:	701a      	strb	r2, [r3, #0]
 8013556:	2380      	movs	r3, #128	; 0x80
 8013558:	60bb      	str	r3, [r7, #8]
 801355a:	2300      	movs	r3, #0
 801355c:	613b      	str	r3, [r7, #16]
 801355e:	e009      	b.n	8013574 <_tx_timer_initialize+0x54>
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	1c5a      	adds	r2, r3, #1
 8013564:	617a      	str	r2, [r7, #20]
 8013566:	220f      	movs	r2, #15
 8013568:	18ba      	adds	r2, r7, r2
 801356a:	7812      	ldrb	r2, [r2, #0]
 801356c:	701a      	strb	r2, [r3, #0]
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	3301      	adds	r3, #1
 8013572:	613b      	str	r3, [r7, #16]
 8013574:	693a      	ldr	r2, [r7, #16]
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	429a      	cmp	r2, r3
 801357a:	d3f1      	bcc.n	8013560 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801357c:	4b2b      	ldr	r3, [pc, #172]	; (801362c <_tx_timer_initialize+0x10c>)
 801357e:	4a2a      	ldr	r2, [pc, #168]	; (8013628 <_tx_timer_initialize+0x108>)
 8013580:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8013582:	4b2b      	ldr	r3, [pc, #172]	; (8013630 <_tx_timer_initialize+0x110>)
 8013584:	4a28      	ldr	r2, [pc, #160]	; (8013628 <_tx_timer_initialize+0x108>)
 8013586:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8013588:	4b2a      	ldr	r3, [pc, #168]	; (8013634 <_tx_timer_initialize+0x114>)
 801358a:	4a2b      	ldr	r2, [pc, #172]	; (8013638 <_tx_timer_initialize+0x118>)
 801358c:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801358e:	4b29      	ldr	r3, [pc, #164]	; (8013634 <_tx_timer_initialize+0x114>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	1d1a      	adds	r2, r3, #4
 8013594:	4b27      	ldr	r3, [pc, #156]	; (8013634 <_tx_timer_initialize+0x114>)
 8013596:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8013598:	4b28      	ldr	r3, [pc, #160]	; (801363c <_tx_timer_initialize+0x11c>)
 801359a:	4a29      	ldr	r2, [pc, #164]	; (8013640 <_tx_timer_initialize+0x120>)
 801359c:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801359e:	4b29      	ldr	r3, [pc, #164]	; (8013644 <_tx_timer_initialize+0x124>)
 80135a0:	2280      	movs	r2, #128	; 0x80
 80135a2:	00d2      	lsls	r2, r2, #3
 80135a4:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80135a6:	4b28      	ldr	r3, [pc, #160]	; (8013648 <_tx_timer_initialize+0x128>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80135ac:	4b23      	ldr	r3, [pc, #140]	; (801363c <_tx_timer_initialize+0x11c>)
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	4b24      	ldr	r3, [pc, #144]	; (8013644 <_tx_timer_initialize+0x124>)
 80135b2:	6819      	ldr	r1, [r3, #0]
 80135b4:	4b24      	ldr	r3, [pc, #144]	; (8013648 <_tx_timer_initialize+0x128>)
 80135b6:	6818      	ldr	r0, [r3, #0]
 80135b8:	4b23      	ldr	r3, [pc, #140]	; (8013648 <_tx_timer_initialize+0x128>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4699      	mov	r9, r3
 80135be:	4c23      	ldr	r4, [pc, #140]	; (801364c <_tx_timer_initialize+0x12c>)
 80135c0:	46a0      	mov	r8, r4
 80135c2:	4e23      	ldr	r6, [pc, #140]	; (8013650 <_tx_timer_initialize+0x130>)
 80135c4:	4d23      	ldr	r5, [pc, #140]	; (8013654 <_tx_timer_initialize+0x134>)
 80135c6:	4c24      	ldr	r4, [pc, #144]	; (8013658 <_tx_timer_initialize+0x138>)
 80135c8:	2300      	movs	r3, #0
 80135ca:	469c      	mov	ip, r3
 80135cc:	4663      	mov	r3, ip
 80135ce:	9305      	str	r3, [sp, #20]
 80135d0:	2300      	movs	r3, #0
 80135d2:	469c      	mov	ip, r3
 80135d4:	4663      	mov	r3, ip
 80135d6:	9304      	str	r3, [sp, #16]
 80135d8:	464b      	mov	r3, r9
 80135da:	9303      	str	r3, [sp, #12]
 80135dc:	9002      	str	r0, [sp, #8]
 80135de:	9101      	str	r1, [sp, #4]
 80135e0:	9200      	str	r2, [sp, #0]
 80135e2:	4643      	mov	r3, r8
 80135e4:	0032      	movs	r2, r6
 80135e6:	0029      	movs	r1, r5
 80135e8:	0020      	movs	r0, r4
 80135ea:	f7fe ffad 	bl	8012548 <_tx_thread_create>
 80135ee:	0003      	movs	r3, r0
 80135f0:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d1d9      	bne.n	80135ac <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80135f8:	4b18      	ldr	r3, [pc, #96]	; (801365c <_tx_timer_initialize+0x13c>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80135fe:	4b18      	ldr	r3, [pc, #96]	; (8013660 <_tx_timer_initialize+0x140>)
 8013600:	2200      	movs	r2, #0
 8013602:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8013604:	46c0      	nop			; (mov r8, r8)
 8013606:	46bd      	mov	sp, r7
 8013608:	b007      	add	sp, #28
 801360a:	bcc0      	pop	{r6, r7}
 801360c:	46b9      	mov	r9, r7
 801360e:	46b0      	mov	r8, r6
 8013610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013612:	46c0      	nop			; (mov r8, r8)
 8013614:	20010738 	.word	0x20010738
 8013618:	20010c98 	.word	0x20010c98
 801361c:	2001073c 	.word	0x2001073c
 8013620:	200107cc 	.word	0x200107cc
 8013624:	200107d8 	.word	0x200107d8
 8013628:	20010740 	.word	0x20010740
 801362c:	200107c0 	.word	0x200107c0
 8013630:	200107c8 	.word	0x200107c8
 8013634:	200107c4 	.word	0x200107c4
 8013638:	200107bc 	.word	0x200107bc
 801363c:	2001088c 	.word	0x2001088c
 8013640:	20010898 	.word	0x20010898
 8013644:	20010890 	.word	0x20010890
 8013648:	20010894 	.word	0x20010894
 801364c:	4154494d 	.word	0x4154494d
 8013650:	0801378d 	.word	0x0801378d
 8013654:	0801a1b4 	.word	0x0801a1b4
 8013658:	200107dc 	.word	0x200107dc
 801365c:	200107d0 	.word	0x200107d0
 8013660:	200107d4 	.word	0x200107d4

08013664 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b088      	sub	sp, #32
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d049      	beq.n	801370c <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	3301      	adds	r3, #1
 801367c:	d046      	beq.n	801370c <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	699b      	ldr	r3, [r3, #24]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d142      	bne.n	801370c <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	2b20      	cmp	r3, #32
 801368a:	d902      	bls.n	8013692 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801368c:	231f      	movs	r3, #31
 801368e:	61bb      	str	r3, [r7, #24]
 8013690:	e002      	b.n	8013698 <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	3b01      	subs	r3, #1
 8013696:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8013698:	4b1e      	ldr	r3, [pc, #120]	; (8013714 <_tx_timer_system_activate+0xb0>)
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	18d3      	adds	r3, r2, r3
 80136a2:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80136a4:	4b1c      	ldr	r3, [pc, #112]	; (8013718 <_tx_timer_system_activate+0xb4>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	69fa      	ldr	r2, [r7, #28]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d30b      	bcc.n	80136c6 <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80136ae:	4b1a      	ldr	r3, [pc, #104]	; (8013718 <_tx_timer_system_activate+0xb4>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	69fa      	ldr	r2, [r7, #28]
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	109b      	asrs	r3, r3, #2
 80136b8:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80136ba:	4b18      	ldr	r3, [pc, #96]	; (801371c <_tx_timer_system_activate+0xb8>)
 80136bc:	681a      	ldr	r2, [r3, #0]
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	18d3      	adds	r3, r2, r3
 80136c4:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d109      	bne.n	80136e2 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	687a      	ldr	r2, [r7, #4]
 80136d8:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	601a      	str	r2, [r3, #0]
 80136e0:	e011      	b.n	8013706 <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	695b      	ldr	r3, [r3, #20]
 80136ec:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	68fa      	ldr	r2, [r7, #12]
 80136fe:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	68ba      	ldr	r2, [r7, #8]
 8013704:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	69fa      	ldr	r2, [r7, #28]
 801370a:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801370c:	46c0      	nop			; (mov r8, r8)
 801370e:	46bd      	mov	sp, r7
 8013710:	b008      	add	sp, #32
 8013712:	bd80      	pop	{r7, pc}
 8013714:	200107c8 	.word	0x200107c8
 8013718:	200107c4 	.word	0x200107c4
 801371c:	200107c0 	.word	0x200107c0

08013720 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b086      	sub	sp, #24
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	699b      	ldr	r3, [r3, #24]
 801372c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d026      	beq.n	8013782 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	691b      	ldr	r3, [r3, #16]
 8013738:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801373a:	687a      	ldr	r2, [r7, #4]
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	429a      	cmp	r2, r3
 8013740:	d108      	bne.n	8013754 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	429a      	cmp	r2, r3
 801374a:	d117      	bne.n	801377c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	2200      	movs	r2, #0
 8013750:	601a      	str	r2, [r3, #0]
 8013752:	e013      	b.n	801377c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	695b      	ldr	r3, [r3, #20]
 8013758:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	68fa      	ldr	r2, [r7, #12]
 801375e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	693a      	ldr	r2, [r7, #16]
 8013764:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	429a      	cmp	r2, r3
 801376e:	d105      	bne.n	801377c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	697a      	ldr	r2, [r7, #20]
 8013774:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	693a      	ldr	r2, [r7, #16]
 801377a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	619a      	str	r2, [r3, #24]
    }
}
 8013782:	46c0      	nop			; (mov r8, r8)
 8013784:	46bd      	mov	sp, r7
 8013786:	b006      	add	sp, #24
 8013788:	bd80      	pop	{r7, pc}
	...

0801378c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b094      	sub	sp, #80	; 0x50
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8013794:	2300      	movs	r3, #0
 8013796:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	4a70      	ldr	r2, [pc, #448]	; (801395c <_tx_timer_thread_entry+0x1d0>)
 801379c:	4293      	cmp	r3, r2
 801379e:	d000      	beq.n	80137a2 <_tx_timer_thread_entry+0x16>
 80137a0:	e0d8      	b.n	8013954 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80137a2:	f3ef 8310 	mrs	r3, PRIMASK
 80137a6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 80137a8:	b672      	cpsid	i
    return(primask_value);
 80137aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80137ac:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80137ae:	4b6c      	ldr	r3, [pc, #432]	; (8013960 <_tx_timer_thread_entry+0x1d4>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d003      	beq.n	80137c4 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	220c      	movs	r2, #12
 80137c0:	18ba      	adds	r2, r7, r2
 80137c2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80137c4:	4b66      	ldr	r3, [pc, #408]	; (8013960 <_tx_timer_thread_entry+0x1d4>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2200      	movs	r2, #0
 80137ca:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80137cc:	4b64      	ldr	r3, [pc, #400]	; (8013960 <_tx_timer_thread_entry+0x1d4>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	1d1a      	adds	r2, r3, #4
 80137d2:	4b63      	ldr	r3, [pc, #396]	; (8013960 <_tx_timer_thread_entry+0x1d4>)
 80137d4:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80137d6:	4b62      	ldr	r3, [pc, #392]	; (8013960 <_tx_timer_thread_entry+0x1d4>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	4b62      	ldr	r3, [pc, #392]	; (8013964 <_tx_timer_thread_entry+0x1d8>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d103      	bne.n	80137ea <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80137e2:	4b61      	ldr	r3, [pc, #388]	; (8013968 <_tx_timer_thread_entry+0x1dc>)
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	4b5e      	ldr	r3, [pc, #376]	; (8013960 <_tx_timer_thread_entry+0x1d4>)
 80137e8:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80137ea:	4b60      	ldr	r3, [pc, #384]	; (801396c <_tx_timer_thread_entry+0x1e0>)
 80137ec:	2200      	movs	r2, #0
 80137ee:	601a      	str	r2, [r3, #0]
 80137f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137f2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80137f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f6:	f383 8810 	msr	PRIMASK, r3
}
 80137fa:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80137fc:	f3ef 8310 	mrs	r3, PRIMASK
 8013800:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013802:	b672      	cpsid	i
    return(primask_value);
 8013804:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8013806:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8013808:	e07d      	b.n	8013906 <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	691b      	ldr	r3, [r3, #16]
 8013812:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8013814:	2300      	movs	r3, #0
 8013816:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8013818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381c:	429a      	cmp	r2, r3
 801381e:	d102      	bne.n	8013826 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8013820:	2300      	movs	r3, #0
 8013822:	60fb      	str	r3, [r7, #12]
 8013824:	e00e      	b.n	8013844 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8013826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013828:	695b      	ldr	r3, [r3, #20]
 801382a:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013830:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013836:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8013838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383a:	220c      	movs	r2, #12
 801383c:	18ba      	adds	r2, r7, r2
 801383e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8013844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b20      	cmp	r3, #32
 801384a:	d911      	bls.n	8013870 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	3b20      	subs	r3, #32
 8013852:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8013854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013856:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8013858:	2300      	movs	r3, #0
 801385a:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801385e:	2208      	movs	r2, #8
 8013860:	18ba      	adds	r2, r7, r2
 8013862:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8013864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013868:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801386a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801386c:	60bb      	str	r3, [r7, #8]
 801386e:	e01a      	b.n	80138a6 <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8013870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013872:	689b      	ldr	r3, [r3, #8]
 8013874:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8013876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801387c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801387e:	685a      	ldr	r2, [r3, #4]
 8013880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013882:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8013884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d009      	beq.n	80138a0 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801388c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801388e:	2208      	movs	r2, #8
 8013890:	18ba      	adds	r2, r7, r2
 8013892:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8013894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013898:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801389a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801389c:	60bb      	str	r3, [r7, #8]
 801389e:	e002      	b.n	80138a6 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80138a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138a2:	2200      	movs	r2, #0
 80138a4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80138a6:	4b32      	ldr	r3, [pc, #200]	; (8013970 <_tx_timer_thread_entry+0x1e4>)
 80138a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80138aa:	601a      	str	r2, [r3, #0]
 80138ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80138b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b2:	f383 8810 	msr	PRIMASK, r3
}
 80138b6:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80138b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d003      	beq.n	80138c6 <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 80138be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138c2:	0010      	movs	r0, r2
 80138c4:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80138c6:	f3ef 8310 	mrs	r3, PRIMASK
 80138ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80138cc:	b672      	cpsid	i
    return(primask_value);
 80138ce:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80138d0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80138d2:	4b27      	ldr	r3, [pc, #156]	; (8013970 <_tx_timer_thread_entry+0x1e4>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80138dc:	429a      	cmp	r2, r3
 80138de:	d106      	bne.n	80138ee <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80138e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138e2:	2200      	movs	r2, #0
 80138e4:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80138e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138e8:	0018      	movs	r0, r3
 80138ea:	f7ff febb 	bl	8013664 <_tx_timer_system_activate>
 80138ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	f383 8810 	msr	PRIMASK, r3
}
 80138f8:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80138fa:	f3ef 8310 	mrs	r3, PRIMASK
 80138fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013900:	b672      	cpsid	i
    return(primask_value);
 8013902:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8013904:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d000      	beq.n	801390e <_tx_timer_thread_entry+0x182>
 801390c:	e77d      	b.n	801380a <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801390e:	4b17      	ldr	r3, [pc, #92]	; (801396c <_tx_timer_thread_entry+0x1e0>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d117      	bne.n	8013946 <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8013916:	4b17      	ldr	r3, [pc, #92]	; (8013974 <_tx_timer_thread_entry+0x1e8>)
 8013918:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801391c:	2203      	movs	r2, #3
 801391e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013922:	2201      	movs	r2, #1
 8013924:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8013926:	4b14      	ldr	r3, [pc, #80]	; (8013978 <_tx_timer_thread_entry+0x1ec>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	1c5a      	adds	r2, r3, #1
 801392c:	4b12      	ldr	r3, [pc, #72]	; (8013978 <_tx_timer_thread_entry+0x1ec>)
 801392e:	601a      	str	r2, [r3, #0]
 8013930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013932:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	f383 8810 	msr	PRIMASK, r3
}
 801393a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801393c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801393e:	0018      	movs	r0, r3
 8013940:	f7ff fb10 	bl	8012f64 <_tx_thread_system_suspend>
 8013944:	e72d      	b.n	80137a2 <_tx_timer_thread_entry+0x16>
 8013946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013948:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	f383 8810 	msr	PRIMASK, r3
}
 8013950:	46c0      	nop			; (mov r8, r8)
            TX_DISABLE
 8013952:	e726      	b.n	80137a2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8013954:	46c0      	nop			; (mov r8, r8)
 8013956:	46bd      	mov	sp, r7
 8013958:	b014      	add	sp, #80	; 0x50
 801395a:	bd80      	pop	{r7, pc}
 801395c:	4154494d 	.word	0x4154494d
 8013960:	200107c8 	.word	0x200107c8
 8013964:	200107c4 	.word	0x200107c4
 8013968:	200107c0 	.word	0x200107c0
 801396c:	200107cc 	.word	0x200107cc
 8013970:	200107d8 	.word	0x200107d8
 8013974:	200107dc 	.word	0x200107dc
 8013978:	2001072c 	.word	0x2001072c

0801397c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b08a      	sub	sp, #40	; 0x28
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
 8013988:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801398a:	2300      	movs	r3, #0
 801398c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d102      	bne.n	801399a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013994:	2302      	movs	r3, #2
 8013996:	627b      	str	r3, [r7, #36]	; 0x24
 8013998:	e028      	b.n	80139ec <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4a2d      	ldr	r2, [pc, #180]	; (8013a54 <_txe_byte_allocate+0xd8>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d002      	beq.n	80139aa <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80139a4:	2302      	movs	r3, #2
 80139a6:	627b      	str	r3, [r7, #36]	; 0x24
 80139a8:	e020      	b.n	80139ec <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d102      	bne.n	80139b6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80139b0:	2303      	movs	r3, #3
 80139b2:	627b      	str	r3, [r7, #36]	; 0x24
 80139b4:	e01a      	b.n	80139ec <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d102      	bne.n	80139c2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80139bc:	2305      	movs	r3, #5
 80139be:	627b      	str	r3, [r7, #36]	; 0x24
 80139c0:	e014      	b.n	80139ec <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	69db      	ldr	r3, [r3, #28]
 80139c6:	687a      	ldr	r2, [r7, #4]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d902      	bls.n	80139d2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80139cc:	2305      	movs	r3, #5
 80139ce:	627b      	str	r3, [r7, #36]	; 0x24
 80139d0:	e00c      	b.n	80139ec <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d009      	beq.n	80139ec <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139d8:	f3ef 8305 	mrs	r3, IPSR
 80139dc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80139de:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80139e0:	4b1d      	ldr	r3, [pc, #116]	; (8013a58 <_txe_byte_allocate+0xdc>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4313      	orrs	r3, r2
 80139e6:	d001      	beq.n	80139ec <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80139e8:	2304      	movs	r3, #4
 80139ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80139ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d108      	bne.n	8013a04 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80139f2:	4b1a      	ldr	r3, [pc, #104]	; (8013a5c <_txe_byte_allocate+0xe0>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80139f8:	6a3a      	ldr	r2, [r7, #32]
 80139fa:	4b19      	ldr	r3, [pc, #100]	; (8013a60 <_txe_byte_allocate+0xe4>)
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d101      	bne.n	8013a04 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013a00:	2313      	movs	r3, #19
 8013a02:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8013a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d113      	bne.n	8013a32 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a0a:	f3ef 8305 	mrs	r3, IPSR
 8013a0e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013a10:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013a12:	4b11      	ldr	r3, [pc, #68]	; (8013a58 <_txe_byte_allocate+0xdc>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	4313      	orrs	r3, r2
 8013a18:	d00b      	beq.n	8013a32 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a1a:	f3ef 8305 	mrs	r3, IPSR
 8013a1e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013a20:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013a22:	4b0d      	ldr	r3, [pc, #52]	; (8013a58 <_txe_byte_allocate+0xdc>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4313      	orrs	r3, r2
 8013a28:	4a0e      	ldr	r2, [pc, #56]	; (8013a64 <_txe_byte_allocate+0xe8>)
 8013a2a:	4293      	cmp	r3, r2
 8013a2c:	d801      	bhi.n	8013a32 <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013a2e:	2313      	movs	r3, #19
 8013a30:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d107      	bne.n	8013a48 <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	68b9      	ldr	r1, [r7, #8]
 8013a3e:	68f8      	ldr	r0, [r7, #12]
 8013a40:	f7fc f9f8 	bl	800fe34 <_tx_byte_allocate>
 8013a44:	0003      	movs	r3, r0
 8013a46:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8013a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a4a:	0018      	movs	r0, r3
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	b00a      	add	sp, #40	; 0x28
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	46c0      	nop			; (mov r8, r8)
 8013a54:	42595445 	.word	0x42595445
 8013a58:	20000010 	.word	0x20000010
 8013a5c:	20010694 	.word	0x20010694
 8013a60:	200107dc 	.word	0x200107dc
 8013a64:	f0f0f0ef 	.word	0xf0f0f0ef

08013a68 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b090      	sub	sp, #64	; 0x40
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
 8013a74:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013a76:	2300      	movs	r3, #0
 8013a78:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d102      	bne.n	8013a86 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013a80:	2302      	movs	r3, #2
 8013a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a84:	e070      	b.n	8013b68 <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8013a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a88:	2b34      	cmp	r3, #52	; 0x34
 8013a8a:	d002      	beq.n	8013a92 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a90:	e06a      	b.n	8013b68 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013a92:	f3ef 8310 	mrs	r3, PRIMASK
 8013a96:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013a98:	b672      	cpsid	i
    return(primask_value);
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013a9c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013a9e:	4b3a      	ldr	r3, [pc, #232]	; (8013b88 <_txe_byte_pool_create+0x120>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	4b38      	ldr	r3, [pc, #224]	; (8013b88 <_txe_byte_pool_create+0x120>)
 8013aa6:	601a      	str	r2, [r3, #0]
 8013aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aae:	f383 8810 	msr	PRIMASK, r3
}
 8013ab2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8013ab4:	4b35      	ldr	r3, [pc, #212]	; (8013b8c <_txe_byte_pool_create+0x124>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013aba:	2300      	movs	r3, #0
 8013abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8013abe:	e009      	b.n	8013ad4 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8013ac0:	68fa      	ldr	r2, [r7, #12]
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d00b      	beq.n	8013ae0 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8013ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013acc:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ad4:	4b2e      	ldr	r3, [pc, #184]	; (8013b90 <_txe_byte_pool_create+0x128>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d3f0      	bcc.n	8013ac0 <_txe_byte_pool_create+0x58>
 8013ade:	e000      	b.n	8013ae2 <_txe_byte_pool_create+0x7a>
                break;
 8013ae0:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013ae8:	b672      	cpsid	i
    return(primask_value);
 8013aea:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013aec:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013aee:	4b26      	ldr	r3, [pc, #152]	; (8013b88 <_txe_byte_pool_create+0x120>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	1e5a      	subs	r2, r3, #1
 8013af4:	4b24      	ldr	r3, [pc, #144]	; (8013b88 <_txe_byte_pool_create+0x120>)
 8013af6:	601a      	str	r2, [r3, #0]
 8013af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013afa:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013afc:	6a3b      	ldr	r3, [r7, #32]
 8013afe:	f383 8810 	msr	PRIMASK, r3
}
 8013b02:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013b04:	f7ff f8f6 	bl	8012cf4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8013b08:	68fa      	ldr	r2, [r7, #12]
 8013b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d102      	bne.n	8013b16 <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013b10:	2302      	movs	r3, #2
 8013b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b14:	e028      	b.n	8013b68 <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b20:	e022      	b.n	8013b68 <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	2b63      	cmp	r3, #99	; 0x63
 8013b26:	d802      	bhi.n	8013b2e <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8013b28:	2305      	movs	r3, #5
 8013b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b2c:	e01c      	b.n	8013b68 <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013b2e:	4b19      	ldr	r3, [pc, #100]	; (8013b94 <_txe_byte_pool_create+0x12c>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b36:	4b18      	ldr	r3, [pc, #96]	; (8013b98 <_txe_byte_pool_create+0x130>)
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d101      	bne.n	8013b40 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013b3c:	2313      	movs	r3, #19
 8013b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b40:	f3ef 8305 	mrs	r3, IPSR
 8013b44:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013b46:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013b48:	4b14      	ldr	r3, [pc, #80]	; (8013b9c <_txe_byte_pool_create+0x134>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	d00b      	beq.n	8013b68 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b50:	f3ef 8305 	mrs	r3, IPSR
 8013b54:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013b56:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013b58:	4b10      	ldr	r3, [pc, #64]	; (8013b9c <_txe_byte_pool_create+0x134>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	4a10      	ldr	r2, [pc, #64]	; (8013ba0 <_txe_byte_pool_create+0x138>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d801      	bhi.n	8013b68 <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013b64:	2313      	movs	r3, #19
 8013b66:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d107      	bne.n	8013b7e <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	68b9      	ldr	r1, [r7, #8]
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f7fc fa9b 	bl	80100b0 <_tx_byte_pool_create>
 8013b7a:	0003      	movs	r3, r0
 8013b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b80:	0018      	movs	r0, r3
 8013b82:	46bd      	mov	sp, r7
 8013b84:	b010      	add	sp, #64	; 0x40
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	2001072c 	.word	0x2001072c
 8013b8c:	20010684 	.word	0x20010684
 8013b90:	20010688 	.word	0x20010688
 8013b94:	20010694 	.word	0x20010694
 8013b98:	200107dc 	.word	0x200107dc
 8013b9c:	20000010 	.word	0x20000010
 8013ba0:	f0f0f0ef 	.word	0xf0f0f0ef

08013ba4 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b090      	sub	sp, #64	; 0x40
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d102      	bne.n	8013bc0 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013bba:	2306      	movs	r3, #6
 8013bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bbe:	e064      	b.n	8013c8a <_txe_event_flags_create+0xe6>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b24      	cmp	r3, #36	; 0x24
 8013bc4:	d002      	beq.n	8013bcc <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013bc6:	2306      	movs	r3, #6
 8013bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bca:	e05e      	b.n	8013c8a <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8013bd0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013bd2:	b672      	cpsid	i
    return(primask_value);
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013bd6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013bd8:	4b34      	ldr	r3, [pc, #208]	; (8013cac <_txe_event_flags_create+0x108>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	1c5a      	adds	r2, r3, #1
 8013bde:	4b33      	ldr	r3, [pc, #204]	; (8013cac <_txe_event_flags_create+0x108>)
 8013be0:	601a      	str	r2, [r3, #0]
 8013be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be8:	f383 8810 	msr	PRIMASK, r3
}
 8013bec:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8013bee:	4b30      	ldr	r3, [pc, #192]	; (8013cb0 <_txe_event_flags_create+0x10c>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8013bf8:	e009      	b.n	8013c0e <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d00b      	beq.n	8013c1a <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8013c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c04:	699b      	ldr	r3, [r3, #24]
 8013c06:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8013c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8013c0e:	4b29      	ldr	r3, [pc, #164]	; (8013cb4 <_txe_event_flags_create+0x110>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d3f0      	bcc.n	8013bfa <_txe_event_flags_create+0x56>
 8013c18:	e000      	b.n	8013c1c <_txe_event_flags_create+0x78>
                break;
 8013c1a:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8013c20:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013c22:	b672      	cpsid	i
    return(primask_value);
 8013c24:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013c26:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013c28:	4b20      	ldr	r3, [pc, #128]	; (8013cac <_txe_event_flags_create+0x108>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	1e5a      	subs	r2, r3, #1
 8013c2e:	4b1f      	ldr	r3, [pc, #124]	; (8013cac <_txe_event_flags_create+0x108>)
 8013c30:	601a      	str	r2, [r3, #0]
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	f383 8810 	msr	PRIMASK, r3
}
 8013c3c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013c3e:	f7ff f859 	bl	8012cf4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d102      	bne.n	8013c50 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8013c4a:	2306      	movs	r3, #6
 8013c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c4e:	e01c      	b.n	8013c8a <_txe_event_flags_create+0xe6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013c50:	4b19      	ldr	r3, [pc, #100]	; (8013cb8 <_txe_event_flags_create+0x114>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c58:	4b18      	ldr	r3, [pc, #96]	; (8013cbc <_txe_event_flags_create+0x118>)
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d101      	bne.n	8013c62 <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013c5e:	2313      	movs	r3, #19
 8013c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c62:	f3ef 8305 	mrs	r3, IPSR
 8013c66:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013c68:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013c6a:	4b15      	ldr	r3, [pc, #84]	; (8013cc0 <_txe_event_flags_create+0x11c>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	d00b      	beq.n	8013c8a <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c72:	f3ef 8305 	mrs	r3, IPSR
 8013c76:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013c78:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013c7a:	4b11      	ldr	r3, [pc, #68]	; (8013cc0 <_txe_event_flags_create+0x11c>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	4a10      	ldr	r2, [pc, #64]	; (8013cc4 <_txe_event_flags_create+0x120>)
 8013c82:	4293      	cmp	r3, r2
 8013c84:	d801      	bhi.n	8013c8a <_txe_event_flags_create+0xe6>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013c86:	2313      	movs	r3, #19
 8013c88:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d107      	bne.n	8013ca0 <_txe_event_flags_create+0xfc>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8013c90:	68ba      	ldr	r2, [r7, #8]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	0011      	movs	r1, r2
 8013c96:	0018      	movs	r0, r3
 8013c98:	f7fc fc3c 	bl	8010514 <_tx_event_flags_create>
 8013c9c:	0003      	movs	r3, r0
 8013c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013ca2:	0018      	movs	r0, r3
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	b010      	add	sp, #64	; 0x40
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	46c0      	nop			; (mov r8, r8)
 8013cac:	2001072c 	.word	0x2001072c
 8013cb0:	2001066c 	.word	0x2001066c
 8013cb4:	20010670 	.word	0x20010670
 8013cb8:	20010694 	.word	0x20010694
 8013cbc:	200107dc 	.word	0x200107dc
 8013cc0:	20000010 	.word	0x20000010
 8013cc4:	f0f0f0ef 	.word	0xf0f0f0ef

08013cc8 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d102      	bne.n	8013ce0 <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013cda:	2306      	movs	r3, #6
 8013cdc:	617b      	str	r3, [r7, #20]
 8013cde:	e024      	b.n	8013d2a <_txe_event_flags_delete+0x62>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4a13      	ldr	r2, [pc, #76]	; (8013d34 <_txe_event_flags_delete+0x6c>)
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	d002      	beq.n	8013cf0 <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013cea:	2306      	movs	r3, #6
 8013cec:	617b      	str	r3, [r7, #20]
 8013cee:	e01c      	b.n	8013d2a <_txe_event_flags_delete+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cf0:	f3ef 8305 	mrs	r3, IPSR
 8013cf4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013cf6:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013cf8:	4b0f      	ldr	r3, [pc, #60]	; (8013d38 <_txe_event_flags_delete+0x70>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	d002      	beq.n	8013d06 <_txe_event_flags_delete+0x3e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013d00:	2313      	movs	r3, #19
 8013d02:	617b      	str	r3, [r7, #20]
 8013d04:	e011      	b.n	8013d2a <_txe_event_flags_delete+0x62>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013d06:	4b0d      	ldr	r3, [pc, #52]	; (8013d3c <_txe_event_flags_delete+0x74>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	4b0c      	ldr	r3, [pc, #48]	; (8013d40 <_txe_event_flags_delete+0x78>)
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d101      	bne.n	8013d18 <_txe_event_flags_delete+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013d14:	2313      	movs	r3, #19
 8013d16:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d105      	bne.n	8013d2a <_txe_event_flags_delete+0x62>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	0018      	movs	r0, r3
 8013d22:	f7fc fc57 	bl	80105d4 <_tx_event_flags_delete>
 8013d26:	0003      	movs	r3, r0
 8013d28:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8013d2a:	697b      	ldr	r3, [r7, #20]
}
 8013d2c:	0018      	movs	r0, r3
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	b006      	add	sp, #24
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	4456444e 	.word	0x4456444e
 8013d38:	20000010 	.word	0x20000010
 8013d3c:	20010694 	.word	0x20010694
 8013d40:	200107dc 	.word	0x200107dc

08013d44 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8013d44:	b590      	push	{r4, r7, lr}
 8013d46:	b08b      	sub	sp, #44	; 0x2c
 8013d48:	af02      	add	r7, sp, #8
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
 8013d50:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013d52:	2300      	movs	r3, #0
 8013d54:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013d5c:	2306      	movs	r3, #6
 8013d5e:	61fb      	str	r3, [r7, #28]
 8013d60:	e024      	b.n	8013dac <_txe_event_flags_get+0x68>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	4a1f      	ldr	r2, [pc, #124]	; (8013de4 <_txe_event_flags_get+0xa0>)
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d002      	beq.n	8013d72 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013d6c:	2306      	movs	r3, #6
 8013d6e:	61fb      	str	r3, [r7, #28]
 8013d70:	e01c      	b.n	8013dac <_txe_event_flags_get+0x68>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d102      	bne.n	8013d7e <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013d78:	2303      	movs	r3, #3
 8013d7a:	61fb      	str	r3, [r7, #28]
 8013d7c:	e016      	b.n	8013dac <_txe_event_flags_get+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d013      	beq.n	8013dac <_txe_event_flags_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d84:	f3ef 8305 	mrs	r3, IPSR
 8013d88:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013d8a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013d8c:	4b16      	ldr	r3, [pc, #88]	; (8013de8 <_txe_event_flags_get+0xa4>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4313      	orrs	r3, r2
 8013d92:	d002      	beq.n	8013d9a <_txe_event_flags_get+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013d94:	2304      	movs	r3, #4
 8013d96:	61fb      	str	r3, [r7, #28]
 8013d98:	e008      	b.n	8013dac <_txe_event_flags_get+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013d9a:	4b14      	ldr	r3, [pc, #80]	; (8013dec <_txe_event_flags_get+0xa8>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013da0:	69ba      	ldr	r2, [r7, #24]
 8013da2:	4b13      	ldr	r3, [pc, #76]	; (8013df0 <_txe_event_flags_get+0xac>)
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d101      	bne.n	8013dac <_txe_event_flags_get+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013da8:	2304      	movs	r3, #4
 8013daa:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8013dac:	69fb      	ldr	r3, [r7, #28]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d104      	bne.n	8013dbc <_txe_event_flags_get+0x78>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b03      	cmp	r3, #3
 8013db6:	d901      	bls.n	8013dbc <_txe_event_flags_get+0x78>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8013db8:	2308      	movs	r3, #8
 8013dba:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013dbc:	69fb      	ldr	r3, [r7, #28]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10a      	bne.n	8013dd8 <_txe_event_flags_get+0x94>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8013dc2:	683c      	ldr	r4, [r7, #0]
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	68b9      	ldr	r1, [r7, #8]
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	0023      	movs	r3, r4
 8013dd0:	f7fc fc8c 	bl	80106ec <_tx_event_flags_get>
 8013dd4:	0003      	movs	r3, r0
 8013dd6:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013dd8:	69fb      	ldr	r3, [r7, #28]
}
 8013dda:	0018      	movs	r0, r3
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	b009      	add	sp, #36	; 0x24
 8013de0:	bd90      	pop	{r4, r7, pc}
 8013de2:	46c0      	nop			; (mov r8, r8)
 8013de4:	4456444e 	.word	0x4456444e
 8013de8:	20000010 	.word	0x20000010
 8013dec:	20010694 	.word	0x20010694
 8013df0:	200107dc 	.word	0x200107dc

08013df4 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013e00:	2300      	movs	r3, #0
 8013e02:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d102      	bne.n	8013e10 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013e0a:	2306      	movs	r3, #6
 8013e0c:	617b      	str	r3, [r7, #20]
 8013e0e:	e00f      	b.n	8013e30 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4a0e      	ldr	r2, [pc, #56]	; (8013e50 <_txe_event_flags_set+0x5c>)
 8013e16:	4293      	cmp	r3, r2
 8013e18:	d002      	beq.n	8013e20 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013e1a:	2306      	movs	r3, #6
 8013e1c:	617b      	str	r3, [r7, #20]
 8013e1e:	e007      	b.n	8013e30 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b02      	cmp	r3, #2
 8013e24:	d004      	beq.n	8013e30 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d001      	beq.n	8013e30 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8013e2c:	2308      	movs	r3, #8
 8013e2e:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d107      	bne.n	8013e46 <_txe_event_flags_set+0x52>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	68b9      	ldr	r1, [r7, #8]
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	0018      	movs	r0, r3
 8013e3e:	f7fc fd35 	bl	80108ac <_tx_event_flags_set>
 8013e42:	0003      	movs	r3, r0
 8013e44:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013e46:	697b      	ldr	r3, [r7, #20]
}
 8013e48:	0018      	movs	r0, r3
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	b006      	add	sp, #24
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	4456444e 	.word	0x4456444e

08013e54 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b090      	sub	sp, #64	; 0x40
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	60f8      	str	r0, [r7, #12]
 8013e5c:	60b9      	str	r1, [r7, #8]
 8013e5e:	607a      	str	r2, [r7, #4]
 8013e60:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013e62:	2300      	movs	r3, #0
 8013e64:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d102      	bne.n	8013e72 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013e6c:	231c      	movs	r3, #28
 8013e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e70:	e04f      	b.n	8013f12 <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	2b34      	cmp	r3, #52	; 0x34
 8013e76:	d002      	beq.n	8013e7e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013e78:	231c      	movs	r3, #28
 8013e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e7c:	e049      	b.n	8013f12 <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e82:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013e84:	b672      	cpsid	i
    return(primask_value);
 8013e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013e88:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013e8a:	4b3a      	ldr	r3, [pc, #232]	; (8013f74 <_txe_mutex_create+0x120>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	1c5a      	adds	r2, r3, #1
 8013e90:	4b38      	ldr	r3, [pc, #224]	; (8013f74 <_txe_mutex_create+0x120>)
 8013e92:	601a      	str	r2, [r3, #0]
 8013e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e96:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9a:	f383 8810 	msr	PRIMASK, r3
}
 8013e9e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8013ea0:	4b35      	ldr	r3, [pc, #212]	; (8013f78 <_txe_mutex_create+0x124>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8013eaa:	e009      	b.n	8013ec0 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8013eac:	68fa      	ldr	r2, [r7, #12]
 8013eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d00b      	beq.n	8013ecc <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8013eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb6:	6a1b      	ldr	r3, [r3, #32]
 8013eb8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ec0:	4b2e      	ldr	r3, [pc, #184]	; (8013f7c <_txe_mutex_create+0x128>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	d3f0      	bcc.n	8013eac <_txe_mutex_create+0x58>
 8013eca:	e000      	b.n	8013ece <_txe_mutex_create+0x7a>
                break;
 8013ecc:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013ece:	f3ef 8310 	mrs	r3, PRIMASK
 8013ed2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013ed4:	b672      	cpsid	i
    return(primask_value);
 8013ed6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013ed8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013eda:	4b26      	ldr	r3, [pc, #152]	; (8013f74 <_txe_mutex_create+0x120>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	1e5a      	subs	r2, r3, #1
 8013ee0:	4b24      	ldr	r3, [pc, #144]	; (8013f74 <_txe_mutex_create+0x120>)
 8013ee2:	601a      	str	r2, [r3, #0]
 8013ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013ee8:	6a3b      	ldr	r3, [r7, #32]
 8013eea:	f383 8810 	msr	PRIMASK, r3
}
 8013eee:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013ef0:	f7fe ff00 	bl	8012cf4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8013ef4:	68fa      	ldr	r2, [r7, #12]
 8013ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d102      	bne.n	8013f02 <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8013efc:	231c      	movs	r3, #28
 8013efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f00:	e007      	b.n	8013f12 <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d004      	beq.n	8013f12 <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d001      	beq.n	8013f12 <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8013f0e:	231f      	movs	r3, #31
 8013f10:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d11c      	bne.n	8013f52 <_txe_mutex_create+0xfe>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013f18:	4b19      	ldr	r3, [pc, #100]	; (8013f80 <_txe_mutex_create+0x12c>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f20:	4b18      	ldr	r3, [pc, #96]	; (8013f84 <_txe_mutex_create+0x130>)
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d101      	bne.n	8013f2a <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013f26:	2313      	movs	r3, #19
 8013f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013f2a:	f3ef 8305 	mrs	r3, IPSR
 8013f2e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013f30:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013f32:	4b15      	ldr	r3, [pc, #84]	; (8013f88 <_txe_mutex_create+0x134>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	4313      	orrs	r3, r2
 8013f38:	d00b      	beq.n	8013f52 <_txe_mutex_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013f3a:	f3ef 8305 	mrs	r3, IPSR
 8013f3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013f40:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013f42:	4b11      	ldr	r3, [pc, #68]	; (8013f88 <_txe_mutex_create+0x134>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	4313      	orrs	r3, r2
 8013f48:	4a10      	ldr	r2, [pc, #64]	; (8013f8c <_txe_mutex_create+0x138>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d801      	bhi.n	8013f52 <_txe_mutex_create+0xfe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013f4e:	2313      	movs	r3, #19
 8013f50:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d107      	bne.n	8013f68 <_txe_mutex_create+0x114>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	68b9      	ldr	r1, [r7, #8]
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	0018      	movs	r0, r3
 8013f60:	f7fc ffe0 	bl	8010f24 <_tx_mutex_create>
 8013f64:	0003      	movs	r3, r0
 8013f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013f6a:	0018      	movs	r0, r3
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	b010      	add	sp, #64	; 0x40
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	46c0      	nop			; (mov r8, r8)
 8013f74:	2001072c 	.word	0x2001072c
 8013f78:	20010674 	.word	0x20010674
 8013f7c:	20010678 	.word	0x20010678
 8013f80:	20010694 	.word	0x20010694
 8013f84:	200107dc 	.word	0x200107dc
 8013f88:	20000010 	.word	0x20000010
 8013f8c:	f0f0f0ef 	.word	0xf0f0f0ef

08013f90 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b088      	sub	sp, #32
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d102      	bne.n	8013faa <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013fa4:	231c      	movs	r3, #28
 8013fa6:	61fb      	str	r3, [r7, #28]
 8013fa8:	e01e      	b.n	8013fe8 <_txe_mutex_get+0x58>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	4a22      	ldr	r2, [pc, #136]	; (8014038 <_txe_mutex_get+0xa8>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d002      	beq.n	8013fba <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013fb4:	231c      	movs	r3, #28
 8013fb6:	61fb      	str	r3, [r7, #28]
 8013fb8:	e016      	b.n	8013fe8 <_txe_mutex_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d013      	beq.n	8013fe8 <_txe_mutex_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013fc0:	f3ef 8305 	mrs	r3, IPSR
 8013fc4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013fc6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013fc8:	4b1c      	ldr	r3, [pc, #112]	; (801403c <_txe_mutex_get+0xac>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4313      	orrs	r3, r2
 8013fce:	d002      	beq.n	8013fd6 <_txe_mutex_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013fd0:	2304      	movs	r3, #4
 8013fd2:	61fb      	str	r3, [r7, #28]
 8013fd4:	e008      	b.n	8013fe8 <_txe_mutex_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013fd6:	4b1a      	ldr	r3, [pc, #104]	; (8014040 <_txe_mutex_get+0xb0>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013fdc:	69ba      	ldr	r2, [r7, #24]
 8013fde:	4b19      	ldr	r3, [pc, #100]	; (8014044 <_txe_mutex_get+0xb4>)
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d101      	bne.n	8013fe8 <_txe_mutex_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013fe4:	2304      	movs	r3, #4
 8013fe6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d113      	bne.n	8014016 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013fee:	f3ef 8305 	mrs	r3, IPSR
 8013ff2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013ff4:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013ff6:	4b11      	ldr	r3, [pc, #68]	; (801403c <_txe_mutex_get+0xac>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4313      	orrs	r3, r2
 8013ffc:	d00b      	beq.n	8014016 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ffe:	f3ef 8305 	mrs	r3, IPSR
 8014002:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014004:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014006:	4b0d      	ldr	r3, [pc, #52]	; (801403c <_txe_mutex_get+0xac>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4313      	orrs	r3, r2
 801400c:	4a0e      	ldr	r2, [pc, #56]	; (8014048 <_txe_mutex_get+0xb8>)
 801400e:	4293      	cmp	r3, r2
 8014010:	d801      	bhi.n	8014016 <_txe_mutex_get+0x86>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014012:	2313      	movs	r3, #19
 8014014:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014016:	69fb      	ldr	r3, [r7, #28]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d107      	bne.n	801402c <_txe_mutex_get+0x9c>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 801401c:	683a      	ldr	r2, [r7, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	0011      	movs	r1, r2
 8014022:	0018      	movs	r0, r3
 8014024:	f7fc ffea 	bl	8010ffc <_tx_mutex_get>
 8014028:	0003      	movs	r3, r0
 801402a:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801402c:	69fb      	ldr	r3, [r7, #28]
}
 801402e:	0018      	movs	r0, r3
 8014030:	46bd      	mov	sp, r7
 8014032:	b008      	add	sp, #32
 8014034:	bd80      	pop	{r7, pc}
 8014036:	46c0      	nop			; (mov r8, r8)
 8014038:	4d555445 	.word	0x4d555445
 801403c:	20000010 	.word	0x20000010
 8014040:	20010694 	.word	0x20010694
 8014044:	200107dc 	.word	0x200107dc
 8014048:	f0f0f0ef 	.word	0xf0f0f0ef

0801404c <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b086      	sub	sp, #24
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014054:	2300      	movs	r3, #0
 8014056:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d102      	bne.n	8014064 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801405e:	231c      	movs	r3, #28
 8014060:	617b      	str	r3, [r7, #20]
 8014062:	e01b      	b.n	801409c <_txe_mutex_put+0x50>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4a13      	ldr	r2, [pc, #76]	; (80140b8 <_txe_mutex_put+0x6c>)
 801406a:	4293      	cmp	r3, r2
 801406c:	d002      	beq.n	8014074 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801406e:	231c      	movs	r3, #28
 8014070:	617b      	str	r3, [r7, #20]
 8014072:	e013      	b.n	801409c <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014074:	f3ef 8305 	mrs	r3, IPSR
 8014078:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801407a:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801407c:	4b0f      	ldr	r3, [pc, #60]	; (80140bc <_txe_mutex_put+0x70>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	4313      	orrs	r3, r2
 8014082:	d00b      	beq.n	801409c <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014084:	f3ef 8305 	mrs	r3, IPSR
 8014088:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801408a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801408c:	4b0b      	ldr	r3, [pc, #44]	; (80140bc <_txe_mutex_put+0x70>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4313      	orrs	r3, r2
 8014092:	4a0b      	ldr	r2, [pc, #44]	; (80140c0 <_txe_mutex_put+0x74>)
 8014094:	4293      	cmp	r3, r2
 8014096:	d801      	bhi.n	801409c <_txe_mutex_put+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014098:	2313      	movs	r3, #19
 801409a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d105      	bne.n	80140ae <_txe_mutex_put+0x62>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	0018      	movs	r0, r3
 80140a6:	f7fd fa19 	bl	80114dc <_tx_mutex_put>
 80140aa:	0003      	movs	r3, r0
 80140ac:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80140ae:	697b      	ldr	r3, [r7, #20]
}
 80140b0:	0018      	movs	r0, r3
 80140b2:	46bd      	mov	sp, r7
 80140b4:	b006      	add	sp, #24
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	4d555445 	.word	0x4d555445
 80140bc:	20000010 	.word	0x20000010
 80140c0:	f0f0f0ef 	.word	0xf0f0f0ef

080140c4 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80140c4:	b590      	push	{r4, r7, lr}
 80140c6:	b093      	sub	sp, #76	; 0x4c
 80140c8:	af02      	add	r7, sp, #8
 80140ca:	60f8      	str	r0, [r7, #12]
 80140cc:	60b9      	str	r1, [r7, #8]
 80140ce:	607a      	str	r2, [r7, #4]
 80140d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80140d2:	2300      	movs	r3, #0
 80140d4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d102      	bne.n	80140e2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80140dc:	2309      	movs	r3, #9
 80140de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140e0:	e07e      	b.n	80141e0 <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80140e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140e4:	2b38      	cmp	r3, #56	; 0x38
 80140e6:	d002      	beq.n	80140ee <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80140e8:	2309      	movs	r3, #9
 80140ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140ec:	e078      	b.n	80141e0 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80140ee:	f3ef 8310 	mrs	r3, PRIMASK
 80140f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80140f4:	b672      	cpsid	i
    return(primask_value);
 80140f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80140f8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80140fa:	4b43      	ldr	r3, [pc, #268]	; (8014208 <_txe_queue_create+0x144>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	1c5a      	adds	r2, r3, #1
 8014100:	4b41      	ldr	r3, [pc, #260]	; (8014208 <_txe_queue_create+0x144>)
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014106:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410a:	f383 8810 	msr	PRIMASK, r3
}
 801410e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8014110:	4b3e      	ldr	r3, [pc, #248]	; (801420c <_txe_queue_create+0x148>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014116:	2300      	movs	r3, #0
 8014118:	63bb      	str	r3, [r7, #56]	; 0x38
 801411a:	e009      	b.n	8014130 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 801411c:	68fa      	ldr	r2, [r7, #12]
 801411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014120:	429a      	cmp	r2, r3
 8014122:	d00b      	beq.n	801413c <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8014124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014128:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 801412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412c:	3301      	adds	r3, #1
 801412e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014130:	4b37      	ldr	r3, [pc, #220]	; (8014210 <_txe_queue_create+0x14c>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014136:	429a      	cmp	r2, r3
 8014138:	d3f0      	bcc.n	801411c <_txe_queue_create+0x58>
 801413a:	e000      	b.n	801413e <_txe_queue_create+0x7a>
                break;
 801413c:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801413e:	f3ef 8310 	mrs	r3, PRIMASK
 8014142:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014144:	b672      	cpsid	i
    return(primask_value);
 8014146:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014148:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801414a:	4b2f      	ldr	r3, [pc, #188]	; (8014208 <_txe_queue_create+0x144>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	1e5a      	subs	r2, r3, #1
 8014150:	4b2d      	ldr	r3, [pc, #180]	; (8014208 <_txe_queue_create+0x144>)
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014156:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014158:	6a3b      	ldr	r3, [r7, #32]
 801415a:	f383 8810 	msr	PRIMASK, r3
}
 801415e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014160:	f7fe fdc8 	bl	8012cf4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014168:	429a      	cmp	r2, r3
 801416a:	d102      	bne.n	8014172 <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 801416c:	2309      	movs	r3, #9
 801416e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014170:	e036      	b.n	80141e0 <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d102      	bne.n	801417e <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8014178:	2303      	movs	r3, #3
 801417a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801417c:	e030      	b.n	80141e0 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d102      	bne.n	801418a <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8014184:	2305      	movs	r3, #5
 8014186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014188:	e02a      	b.n	80141e0 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b10      	cmp	r3, #16
 801418e:	d902      	bls.n	8014196 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8014190:	2305      	movs	r3, #5
 8014192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014194:	e024      	b.n	80141e0 <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8014196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014198:	089b      	lsrs	r3, r3, #2
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	429a      	cmp	r2, r3
 801419e:	d902      	bls.n	80141a6 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80141a0:	2305      	movs	r3, #5
 80141a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80141a4:	e01c      	b.n	80141e0 <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80141a6:	4b1b      	ldr	r3, [pc, #108]	; (8014214 <_txe_queue_create+0x150>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80141ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141ae:	4b1a      	ldr	r3, [pc, #104]	; (8014218 <_txe_queue_create+0x154>)
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d101      	bne.n	80141b8 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80141b4:	2313      	movs	r3, #19
 80141b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80141b8:	f3ef 8305 	mrs	r3, IPSR
 80141bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80141be:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80141c0:	4b16      	ldr	r3, [pc, #88]	; (801421c <_txe_queue_create+0x158>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	4313      	orrs	r3, r2
 80141c6:	d00b      	beq.n	80141e0 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80141c8:	f3ef 8305 	mrs	r3, IPSR
 80141cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80141ce:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80141d0:	4b12      	ldr	r3, [pc, #72]	; (801421c <_txe_queue_create+0x158>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4313      	orrs	r3, r2
 80141d6:	4a12      	ldr	r2, [pc, #72]	; (8014220 <_txe_queue_create+0x15c>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d801      	bhi.n	80141e0 <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80141dc:	2313      	movs	r3, #19
 80141de:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80141e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d10a      	bne.n	80141fc <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80141e6:	683c      	ldr	r4, [r7, #0]
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	68b9      	ldr	r1, [r7, #8]
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141f0:	9300      	str	r3, [sp, #0]
 80141f2:	0023      	movs	r3, r4
 80141f4:	f7fd fbda 	bl	80119ac <_tx_queue_create>
 80141f8:	0003      	movs	r3, r0
 80141fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 80141fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80141fe:	0018      	movs	r0, r3
 8014200:	46bd      	mov	sp, r7
 8014202:	b011      	add	sp, #68	; 0x44
 8014204:	bd90      	pop	{r4, r7, pc}
 8014206:	46c0      	nop			; (mov r8, r8)
 8014208:	2001072c 	.word	0x2001072c
 801420c:	20010664 	.word	0x20010664
 8014210:	20010668 	.word	0x20010668
 8014214:	20010694 	.word	0x20010694
 8014218:	200107dc 	.word	0x200107dc
 801421c:	20000010 	.word	0x20000010
 8014220:	f0f0f0ef 	.word	0xf0f0f0ef

08014224 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b088      	sub	sp, #32
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014230:	2300      	movs	r3, #0
 8014232:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d102      	bne.n	8014240 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801423a:	2309      	movs	r3, #9
 801423c:	61fb      	str	r3, [r7, #28]
 801423e:	e024      	b.n	801428a <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4a19      	ldr	r2, [pc, #100]	; (80142ac <_txe_queue_receive+0x88>)
 8014246:	4293      	cmp	r3, r2
 8014248:	d002      	beq.n	8014250 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801424a:	2309      	movs	r3, #9
 801424c:	61fb      	str	r3, [r7, #28]
 801424e:	e01c      	b.n	801428a <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d102      	bne.n	801425c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014256:	2303      	movs	r3, #3
 8014258:	61fb      	str	r3, [r7, #28]
 801425a:	e016      	b.n	801428a <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d013      	beq.n	801428a <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014262:	f3ef 8305 	mrs	r3, IPSR
 8014266:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014268:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801426a:	4b11      	ldr	r3, [pc, #68]	; (80142b0 <_txe_queue_receive+0x8c>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4313      	orrs	r3, r2
 8014270:	d002      	beq.n	8014278 <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014272:	2304      	movs	r3, #4
 8014274:	61fb      	str	r3, [r7, #28]
 8014276:	e008      	b.n	801428a <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014278:	4b0e      	ldr	r3, [pc, #56]	; (80142b4 <_txe_queue_receive+0x90>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801427e:	69ba      	ldr	r2, [r7, #24]
 8014280:	4b0d      	ldr	r3, [pc, #52]	; (80142b8 <_txe_queue_receive+0x94>)
 8014282:	429a      	cmp	r2, r3
 8014284:	d101      	bne.n	801428a <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014286:	2304      	movs	r3, #4
 8014288:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d107      	bne.n	80142a0 <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	68b9      	ldr	r1, [r7, #8]
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	0018      	movs	r0, r3
 8014298:	f7fd fc10 	bl	8011abc <_tx_queue_receive>
 801429c:	0003      	movs	r3, r0
 801429e:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80142a0:	69fb      	ldr	r3, [r7, #28]
}
 80142a2:	0018      	movs	r0, r3
 80142a4:	46bd      	mov	sp, r7
 80142a6:	b008      	add	sp, #32
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	46c0      	nop			; (mov r8, r8)
 80142ac:	51554555 	.word	0x51554555
 80142b0:	20000010 	.word	0x20000010
 80142b4:	20010694 	.word	0x20010694
 80142b8:	200107dc 	.word	0x200107dc

080142bc <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b088      	sub	sp, #32
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	60f8      	str	r0, [r7, #12]
 80142c4:	60b9      	str	r1, [r7, #8]
 80142c6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80142c8:	2300      	movs	r3, #0
 80142ca:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d102      	bne.n	80142d8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80142d2:	2309      	movs	r3, #9
 80142d4:	61fb      	str	r3, [r7, #28]
 80142d6:	e024      	b.n	8014322 <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	4a19      	ldr	r2, [pc, #100]	; (8014344 <_txe_queue_send+0x88>)
 80142de:	4293      	cmp	r3, r2
 80142e0:	d002      	beq.n	80142e8 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80142e2:	2309      	movs	r3, #9
 80142e4:	61fb      	str	r3, [r7, #28]
 80142e6:	e01c      	b.n	8014322 <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d102      	bne.n	80142f4 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80142ee:	2303      	movs	r3, #3
 80142f0:	61fb      	str	r3, [r7, #28]
 80142f2:	e016      	b.n	8014322 <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d013      	beq.n	8014322 <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80142fa:	f3ef 8305 	mrs	r3, IPSR
 80142fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014300:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014302:	4b11      	ldr	r3, [pc, #68]	; (8014348 <_txe_queue_send+0x8c>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	4313      	orrs	r3, r2
 8014308:	d002      	beq.n	8014310 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801430a:	2304      	movs	r3, #4
 801430c:	61fb      	str	r3, [r7, #28]
 801430e:	e008      	b.n	8014322 <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014310:	4b0e      	ldr	r3, [pc, #56]	; (801434c <_txe_queue_send+0x90>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014316:	69ba      	ldr	r2, [r7, #24]
 8014318:	4b0d      	ldr	r3, [pc, #52]	; (8014350 <_txe_queue_send+0x94>)
 801431a:	429a      	cmp	r2, r3
 801431c:	d101      	bne.n	8014322 <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801431e:	2304      	movs	r3, #4
 8014320:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d107      	bne.n	8014338 <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	68b9      	ldr	r1, [r7, #8]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	0018      	movs	r0, r3
 8014330:	f7fd fd8c 	bl	8011e4c <_tx_queue_send>
 8014334:	0003      	movs	r3, r0
 8014336:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8014338:	69fb      	ldr	r3, [r7, #28]
}
 801433a:	0018      	movs	r0, r3
 801433c:	46bd      	mov	sp, r7
 801433e:	b008      	add	sp, #32
 8014340:	bd80      	pop	{r7, pc}
 8014342:	46c0      	nop			; (mov r8, r8)
 8014344:	51554555 	.word	0x51554555
 8014348:	20000010 	.word	0x20000010
 801434c:	20010694 	.word	0x20010694
 8014350:	200107dc 	.word	0x200107dc

08014354 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b090      	sub	sp, #64	; 0x40
 8014358:	af00      	add	r7, sp, #0
 801435a:	60f8      	str	r0, [r7, #12]
 801435c:	60b9      	str	r1, [r7, #8]
 801435e:	607a      	str	r2, [r7, #4]
 8014360:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014362:	2300      	movs	r3, #0
 8014364:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d102      	bne.n	8014372 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801436c:	230c      	movs	r3, #12
 801436e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014370:	e050      	b.n	8014414 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	2b1c      	cmp	r3, #28
 8014376:	d002      	beq.n	801437e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014378:	230c      	movs	r3, #12
 801437a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801437c:	e04a      	b.n	8014414 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801437e:	f3ef 8310 	mrs	r3, PRIMASK
 8014382:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014384:	b672      	cpsid	i
    return(primask_value);
 8014386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014388:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801438a:	4b36      	ldr	r3, [pc, #216]	; (8014464 <_txe_semaphore_create+0x110>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	1c5a      	adds	r2, r3, #1
 8014390:	4b34      	ldr	r3, [pc, #208]	; (8014464 <_txe_semaphore_create+0x110>)
 8014392:	601a      	str	r2, [r3, #0]
 8014394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014396:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801439a:	f383 8810 	msr	PRIMASK, r3
}
 801439e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80143a0:	4b31      	ldr	r3, [pc, #196]	; (8014468 <_txe_semaphore_create+0x114>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80143a6:	2300      	movs	r3, #0
 80143a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80143aa:	e009      	b.n	80143c0 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80143ac:	68fa      	ldr	r2, [r7, #12]
 80143ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d00b      	beq.n	80143cc <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80143b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b6:	695b      	ldr	r3, [r3, #20]
 80143b8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80143ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143bc:	3301      	adds	r3, #1
 80143be:	63bb      	str	r3, [r7, #56]	; 0x38
 80143c0:	4b2a      	ldr	r3, [pc, #168]	; (801446c <_txe_semaphore_create+0x118>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d3f0      	bcc.n	80143ac <_txe_semaphore_create+0x58>
 80143ca:	e000      	b.n	80143ce <_txe_semaphore_create+0x7a>
                break;
 80143cc:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80143ce:	f3ef 8310 	mrs	r3, PRIMASK
 80143d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80143d4:	b672      	cpsid	i
    return(primask_value);
 80143d6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80143d8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80143da:	4b22      	ldr	r3, [pc, #136]	; (8014464 <_txe_semaphore_create+0x110>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	1e5a      	subs	r2, r3, #1
 80143e0:	4b20      	ldr	r3, [pc, #128]	; (8014464 <_txe_semaphore_create+0x110>)
 80143e2:	601a      	str	r2, [r3, #0]
 80143e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80143e8:	6a3b      	ldr	r3, [r7, #32]
 80143ea:	f383 8810 	msr	PRIMASK, r3
}
 80143ee:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80143f0:	f7fe fc80 	bl	8012cf4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80143f4:	68fa      	ldr	r2, [r7, #12]
 80143f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d102      	bne.n	8014402 <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80143fc:	230c      	movs	r3, #12
 80143fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014400:	e008      	b.n	8014414 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014402:	4b1b      	ldr	r3, [pc, #108]	; (8014470 <_txe_semaphore_create+0x11c>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801440a:	4b1a      	ldr	r3, [pc, #104]	; (8014474 <_txe_semaphore_create+0x120>)
 801440c:	429a      	cmp	r2, r3
 801440e:	d101      	bne.n	8014414 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014410:	2313      	movs	r3, #19
 8014412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014416:	2b00      	cmp	r3, #0
 8014418:	d113      	bne.n	8014442 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801441a:	f3ef 8305 	mrs	r3, IPSR
 801441e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014420:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014422:	4b15      	ldr	r3, [pc, #84]	; (8014478 <_txe_semaphore_create+0x124>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4313      	orrs	r3, r2
 8014428:	d00b      	beq.n	8014442 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801442a:	f3ef 8305 	mrs	r3, IPSR
 801442e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014430:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014432:	4b11      	ldr	r3, [pc, #68]	; (8014478 <_txe_semaphore_create+0x124>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	4313      	orrs	r3, r2
 8014438:	4a10      	ldr	r2, [pc, #64]	; (801447c <_txe_semaphore_create+0x128>)
 801443a:	4293      	cmp	r3, r2
 801443c:	d801      	bhi.n	8014442 <_txe_semaphore_create+0xee>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801443e:	2313      	movs	r3, #19
 8014440:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014444:	2b00      	cmp	r3, #0
 8014446:	d107      	bne.n	8014458 <_txe_semaphore_create+0x104>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	68b9      	ldr	r1, [r7, #8]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	0018      	movs	r0, r3
 8014450:	f7fd fea0 	bl	8012194 <_tx_semaphore_create>
 8014454:	0003      	movs	r3, r0
 8014456:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8014458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801445a:	0018      	movs	r0, r3
 801445c:	46bd      	mov	sp, r7
 801445e:	b010      	add	sp, #64	; 0x40
 8014460:	bd80      	pop	{r7, pc}
 8014462:	46c0      	nop			; (mov r8, r8)
 8014464:	2001072c 	.word	0x2001072c
 8014468:	2001065c 	.word	0x2001065c
 801446c:	20010660 	.word	0x20010660
 8014470:	20010694 	.word	0x20010694
 8014474:	200107dc 	.word	0x200107dc
 8014478:	20000010 	.word	0x20000010
 801447c:	f0f0f0ef 	.word	0xf0f0f0ef

08014480 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014488:	2300      	movs	r3, #0
 801448a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d102      	bne.n	8014498 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014492:	230c      	movs	r3, #12
 8014494:	617b      	str	r3, [r7, #20]
 8014496:	e01b      	b.n	80144d0 <_txe_semaphore_delete+0x50>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4a13      	ldr	r2, [pc, #76]	; (80144ec <_txe_semaphore_delete+0x6c>)
 801449e:	4293      	cmp	r3, r2
 80144a0:	d002      	beq.n	80144a8 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80144a2:	230c      	movs	r3, #12
 80144a4:	617b      	str	r3, [r7, #20]
 80144a6:	e013      	b.n	80144d0 <_txe_semaphore_delete+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144a8:	f3ef 8305 	mrs	r3, IPSR
 80144ac:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80144ae:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80144b0:	4b0f      	ldr	r3, [pc, #60]	; (80144f0 <_txe_semaphore_delete+0x70>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	4313      	orrs	r3, r2
 80144b6:	d002      	beq.n	80144be <_txe_semaphore_delete+0x3e>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80144b8:	2313      	movs	r3, #19
 80144ba:	617b      	str	r3, [r7, #20]
 80144bc:	e008      	b.n	80144d0 <_txe_semaphore_delete+0x50>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80144be:	4b0d      	ldr	r3, [pc, #52]	; (80144f4 <_txe_semaphore_delete+0x74>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80144c4:	693a      	ldr	r2, [r7, #16]
 80144c6:	4b0c      	ldr	r3, [pc, #48]	; (80144f8 <_txe_semaphore_delete+0x78>)
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d101      	bne.n	80144d0 <_txe_semaphore_delete+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80144cc:	2313      	movs	r3, #19
 80144ce:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d105      	bne.n	80144e2 <_txe_semaphore_delete+0x62>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	0018      	movs	r0, r3
 80144da:	f7fd febf 	bl	801225c <_tx_semaphore_delete>
 80144de:	0003      	movs	r3, r0
 80144e0:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80144e2:	697b      	ldr	r3, [r7, #20]
}
 80144e4:	0018      	movs	r0, r3
 80144e6:	46bd      	mov	sp, r7
 80144e8:	b006      	add	sp, #24
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	53454d41 	.word	0x53454d41
 80144f0:	20000010 	.word	0x20000010
 80144f4:	20010694 	.word	0x20010694
 80144f8:	200107dc 	.word	0x200107dc

080144fc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014506:	2300      	movs	r3, #0
 8014508:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d102      	bne.n	8014516 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014510:	230c      	movs	r3, #12
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	e01e      	b.n	8014554 <_txe_semaphore_get+0x58>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4a16      	ldr	r2, [pc, #88]	; (8014574 <_txe_semaphore_get+0x78>)
 801451c:	4293      	cmp	r3, r2
 801451e:	d002      	beq.n	8014526 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014520:	230c      	movs	r3, #12
 8014522:	617b      	str	r3, [r7, #20]
 8014524:	e016      	b.n	8014554 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d013      	beq.n	8014554 <_txe_semaphore_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801452c:	f3ef 8305 	mrs	r3, IPSR
 8014530:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014532:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014534:	4b10      	ldr	r3, [pc, #64]	; (8014578 <_txe_semaphore_get+0x7c>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	4313      	orrs	r3, r2
 801453a:	d002      	beq.n	8014542 <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801453c:	2304      	movs	r3, #4
 801453e:	617b      	str	r3, [r7, #20]
 8014540:	e008      	b.n	8014554 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014542:	4b0e      	ldr	r3, [pc, #56]	; (801457c <_txe_semaphore_get+0x80>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014548:	693a      	ldr	r2, [r7, #16]
 801454a:	4b0d      	ldr	r3, [pc, #52]	; (8014580 <_txe_semaphore_get+0x84>)
 801454c:	429a      	cmp	r2, r3
 801454e:	d101      	bne.n	8014554 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014550:	2304      	movs	r3, #4
 8014552:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d107      	bne.n	801456a <_txe_semaphore_get+0x6e>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 801455a:	683a      	ldr	r2, [r7, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	0011      	movs	r1, r2
 8014560:	0018      	movs	r0, r3
 8014562:	f7fd ff07 	bl	8012374 <_tx_semaphore_get>
 8014566:	0003      	movs	r3, r0
 8014568:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801456a:	697b      	ldr	r3, [r7, #20]
}
 801456c:	0018      	movs	r0, r3
 801456e:	46bd      	mov	sp, r7
 8014570:	b006      	add	sp, #24
 8014572:	bd80      	pop	{r7, pc}
 8014574:	53454d41 	.word	0x53454d41
 8014578:	20000010 	.word	0x20000010
 801457c:	20010694 	.word	0x20010694
 8014580:	200107dc 	.word	0x200107dc

08014584 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d102      	bne.n	8014598 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014592:	230c      	movs	r3, #12
 8014594:	60fb      	str	r3, [r7, #12]
 8014596:	e00d      	b.n	80145b4 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	4a08      	ldr	r2, [pc, #32]	; (80145c0 <_txe_semaphore_put+0x3c>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d002      	beq.n	80145a8 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80145a2:	230c      	movs	r3, #12
 80145a4:	60fb      	str	r3, [r7, #12]
 80145a6:	e005      	b.n	80145b4 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	0018      	movs	r0, r3
 80145ac:	f7fd ff74 	bl	8012498 <_tx_semaphore_put>
 80145b0:	0003      	movs	r3, r0
 80145b2:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80145b4:	68fb      	ldr	r3, [r7, #12]
}
 80145b6:	0018      	movs	r0, r3
 80145b8:	46bd      	mov	sp, r7
 80145ba:	b004      	add	sp, #16
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	46c0      	nop			; (mov r8, r8)
 80145c0:	53454d41 	.word	0x53454d41

080145c4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80145c4:	b590      	push	{r4, r7, lr}
 80145c6:	b099      	sub	sp, #100	; 0x64
 80145c8:	af06      	add	r7, sp, #24
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
 80145d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80145d2:	2300      	movs	r3, #0
 80145d4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d102      	bne.n	80145e2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80145dc:	230e      	movs	r3, #14
 80145de:	647b      	str	r3, [r7, #68]	; 0x44
 80145e0:	e0b6      	b.n	8014750 <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80145e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145e4:	2bb0      	cmp	r3, #176	; 0xb0
 80145e6:	d002      	beq.n	80145ee <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80145e8:	230e      	movs	r3, #14
 80145ea:	647b      	str	r3, [r7, #68]	; 0x44
 80145ec:	e0b0      	b.n	8014750 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80145ee:	f3ef 8310 	mrs	r3, PRIMASK
 80145f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80145f4:	b672      	cpsid	i
    return(primask_value);
 80145f6:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80145f8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80145fa:	4b64      	ldr	r3, [pc, #400]	; (801478c <_txe_thread_create+0x1c8>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	1c5a      	adds	r2, r3, #1
 8014600:	4b62      	ldr	r3, [pc, #392]	; (801478c <_txe_thread_create+0x1c8>)
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014606:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460a:	f383 8810 	msr	PRIMASK, r3
}
 801460e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8014610:	2300      	movs	r3, #0
 8014612:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 8014614:	4b5e      	ldr	r3, [pc, #376]	; (8014790 <_txe_thread_create+0x1cc>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801461a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801461c:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014620:	3b01      	subs	r3, #1
 8014622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014624:	18d3      	adds	r3, r2, r3
 8014626:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8014628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801462c:	2300      	movs	r3, #0
 801462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014630:	e02b      	b.n	801468a <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8014632:	68fa      	ldr	r2, [r7, #12]
 8014634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014636:	429a      	cmp	r2, r3
 8014638:	d101      	bne.n	801463e <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801463a:	2301      	movs	r3, #1
 801463c:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014640:	2b01      	cmp	r3, #1
 8014642:	d028      	beq.n	8014696 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8014644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801464a:	429a      	cmp	r2, r3
 801464c:	d308      	bcc.n	8014660 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014650:	691b      	ldr	r3, [r3, #16]
 8014652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014654:	429a      	cmp	r2, r3
 8014656:	d203      	bcs.n	8014660 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014658:	2300      	movs	r3, #0
 801465a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801465c:	2301      	movs	r3, #1
 801465e:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014666:	429a      	cmp	r2, r3
 8014668:	d308      	bcc.n	801467c <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014670:	429a      	cmp	r2, r3
 8014672:	d203      	bcs.n	801467c <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014674:	2300      	movs	r3, #0
 8014676:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014678:	2301      	movs	r3, #1
 801467a:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467e:	2288      	movs	r2, #136	; 0x88
 8014680:	589b      	ldr	r3, [r3, r2]
 8014682:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014686:	3301      	adds	r3, #1
 8014688:	63fb      	str	r3, [r7, #60]	; 0x3c
 801468a:	4b42      	ldr	r3, [pc, #264]	; (8014794 <_txe_thread_create+0x1d0>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014690:	429a      	cmp	r2, r3
 8014692:	d3ce      	bcc.n	8014632 <_txe_thread_create+0x6e>
 8014694:	e000      	b.n	8014698 <_txe_thread_create+0xd4>
                break;
 8014696:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014698:	f3ef 8310 	mrs	r3, PRIMASK
 801469c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801469e:	b672      	cpsid	i
    return(primask_value);
 80146a0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80146a2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80146a4:	4b39      	ldr	r3, [pc, #228]	; (801478c <_txe_thread_create+0x1c8>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	1e5a      	subs	r2, r3, #1
 80146aa:	4b38      	ldr	r3, [pc, #224]	; (801478c <_txe_thread_create+0x1c8>)
 80146ac:	601a      	str	r2, [r3, #0]
 80146ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80146b2:	69fb      	ldr	r3, [r7, #28]
 80146b4:	f383 8810 	msr	PRIMASK, r3
}
 80146b8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80146ba:	f7fe fb1b 	bl	8012cf4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d102      	bne.n	80146cc <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80146c6:	230e      	movs	r3, #14
 80146c8:	647b      	str	r3, [r7, #68]	; 0x44
 80146ca:	e041      	b.n	8014750 <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80146cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d102      	bne.n	80146d8 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80146d2:	2303      	movs	r3, #3
 80146d4:	647b      	str	r3, [r7, #68]	; 0x44
 80146d6:	e03b      	b.n	8014750 <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d102      	bne.n	80146e4 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80146de:	2303      	movs	r3, #3
 80146e0:	647b      	str	r3, [r7, #68]	; 0x44
 80146e2:	e035      	b.n	8014750 <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80146e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146e6:	2bc7      	cmp	r3, #199	; 0xc7
 80146e8:	d802      	bhi.n	80146f0 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80146ea:	2305      	movs	r3, #5
 80146ec:	647b      	str	r3, [r7, #68]	; 0x44
 80146ee:	e02f      	b.n	8014750 <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80146f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146f2:	2b1f      	cmp	r3, #31
 80146f4:	d902      	bls.n	80146fc <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80146f6:	230f      	movs	r3, #15
 80146f8:	647b      	str	r3, [r7, #68]	; 0x44
 80146fa:	e029      	b.n	8014750 <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80146fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80146fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014700:	429a      	cmp	r2, r3
 8014702:	d902      	bls.n	801470a <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8014704:	2318      	movs	r3, #24
 8014706:	647b      	str	r3, [r7, #68]	; 0x44
 8014708:	e022      	b.n	8014750 <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801470c:	2b01      	cmp	r3, #1
 801470e:	d902      	bls.n	8014716 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8014710:	2310      	movs	r3, #16
 8014712:	647b      	str	r3, [r7, #68]	; 0x44
 8014714:	e01c      	b.n	8014750 <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8014716:	4b20      	ldr	r3, [pc, #128]	; (8014798 <_txe_thread_create+0x1d4>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801471c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801471e:	4b1f      	ldr	r3, [pc, #124]	; (801479c <_txe_thread_create+0x1d8>)
 8014720:	429a      	cmp	r2, r3
 8014722:	d101      	bne.n	8014728 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014724:	2313      	movs	r3, #19
 8014726:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014728:	f3ef 8305 	mrs	r3, IPSR
 801472c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801472e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014730:	4b1b      	ldr	r3, [pc, #108]	; (80147a0 <_txe_thread_create+0x1dc>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	4313      	orrs	r3, r2
 8014736:	d00b      	beq.n	8014750 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014738:	f3ef 8305 	mrs	r3, IPSR
 801473c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801473e:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014740:	4b17      	ldr	r3, [pc, #92]	; (80147a0 <_txe_thread_create+0x1dc>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4313      	orrs	r3, r2
 8014746:	4a17      	ldr	r2, [pc, #92]	; (80147a4 <_txe_thread_create+0x1e0>)
 8014748:	4293      	cmp	r3, r2
 801474a:	d801      	bhi.n	8014750 <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801474c:	2313      	movs	r3, #19
 801474e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014752:	2b00      	cmp	r3, #0
 8014754:	d114      	bne.n	8014780 <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014756:	683c      	ldr	r4, [r7, #0]
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	68b9      	ldr	r1, [r7, #8]
 801475c:	68f8      	ldr	r0, [r7, #12]
 801475e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014760:	9305      	str	r3, [sp, #20]
 8014762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014764:	9304      	str	r3, [sp, #16]
 8014766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014768:	9303      	str	r3, [sp, #12]
 801476a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801476c:	9302      	str	r3, [sp, #8]
 801476e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014770:	9301      	str	r3, [sp, #4]
 8014772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014774:	9300      	str	r3, [sp, #0]
 8014776:	0023      	movs	r3, r4
 8014778:	f7fd fee6 	bl	8012548 <_tx_thread_create>
 801477c:	0003      	movs	r3, r0
 801477e:	647b      	str	r3, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014782:	0018      	movs	r0, r3
 8014784:	46bd      	mov	sp, r7
 8014786:	b013      	add	sp, #76	; 0x4c
 8014788:	bd90      	pop	{r4, r7, pc}
 801478a:	46c0      	nop			; (mov r8, r8)
 801478c:	2001072c 	.word	0x2001072c
 8014790:	2001069c 	.word	0x2001069c
 8014794:	200106a0 	.word	0x200106a0
 8014798:	20010694 	.word	0x20010694
 801479c:	200107dc 	.word	0x200107dc
 80147a0:	20000010 	.word	0x20000010
 80147a4:	f0f0f0ef 	.word	0xf0f0f0ef

080147a8 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80147b0:	f3ef 8305 	mrs	r3, IPSR
 80147b4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80147b6:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80147b8:	4b0f      	ldr	r3, [pc, #60]	; (80147f8 <_txe_thread_delete+0x50>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	4313      	orrs	r3, r2
 80147be:	d002      	beq.n	80147c6 <_txe_thread_delete+0x1e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80147c0:	2313      	movs	r3, #19
 80147c2:	60fb      	str	r3, [r7, #12]
 80147c4:	e013      	b.n	80147ee <_txe_thread_delete+0x46>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d102      	bne.n	80147d2 <_txe_thread_delete+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80147cc:	230e      	movs	r3, #14
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	e00d      	b.n	80147ee <_txe_thread_delete+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a09      	ldr	r2, [pc, #36]	; (80147fc <_txe_thread_delete+0x54>)
 80147d8:	4293      	cmp	r3, r2
 80147da:	d002      	beq.n	80147e2 <_txe_thread_delete+0x3a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80147dc:	230e      	movs	r3, #14
 80147de:	60fb      	str	r3, [r7, #12]
 80147e0:	e005      	b.n	80147ee <_txe_thread_delete+0x46>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	0018      	movs	r0, r3
 80147e6:	f7fd ffcf 	bl	8012788 <_tx_thread_delete>
 80147ea:	0003      	movs	r3, r0
 80147ec:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80147ee:	68fb      	ldr	r3, [r7, #12]
}
 80147f0:	0018      	movs	r0, r3
 80147f2:	46bd      	mov	sp, r7
 80147f4:	b004      	add	sp, #16
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	20000010 	.word	0x20000010
 80147fc:	54485244 	.word	0x54485244

08014800 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8014800:	b590      	push	{r4, r7, lr}
 8014802:	b08d      	sub	sp, #52	; 0x34
 8014804:	af06      	add	r7, sp, #24
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
 801480c:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d102      	bne.n	801481a <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014814:	230e      	movs	r3, #14
 8014816:	617b      	str	r3, [r7, #20]
 8014818:	e01a      	b.n	8014850 <_txe_thread_info_get+0x50>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	4a0f      	ldr	r2, [pc, #60]	; (801485c <_txe_thread_info_get+0x5c>)
 8014820:	4293      	cmp	r3, r2
 8014822:	d002      	beq.n	801482a <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014824:	230e      	movs	r3, #14
 8014826:	617b      	str	r3, [r7, #20]
 8014828:	e012      	b.n	8014850 <_txe_thread_info_get+0x50>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 801482a:	683c      	ldr	r4, [r7, #0]
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	68b9      	ldr	r1, [r7, #8]
 8014830:	68f8      	ldr	r0, [r7, #12]
 8014832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014834:	9304      	str	r3, [sp, #16]
 8014836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014838:	9303      	str	r3, [sp, #12]
 801483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483c:	9302      	str	r3, [sp, #8]
 801483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014840:	9301      	str	r3, [sp, #4]
 8014842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014844:	9300      	str	r3, [sp, #0]
 8014846:	0023      	movs	r3, r4
 8014848:	f7fe f80e 	bl	8012868 <_tx_thread_info_get>
 801484c:	0003      	movs	r3, r0
 801484e:	617b      	str	r3, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 8014850:	697b      	ldr	r3, [r7, #20]
}
 8014852:	0018      	movs	r0, r3
 8014854:	46bd      	mov	sp, r7
 8014856:	b007      	add	sp, #28
 8014858:	bd90      	pop	{r4, r7, pc}
 801485a:	46c0      	nop			; (mov r8, r8)
 801485c:	54485244 	.word	0x54485244

08014860 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d102      	bne.n	8014874 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801486e:	230e      	movs	r3, #14
 8014870:	60fb      	str	r3, [r7, #12]
 8014872:	e00d      	b.n	8014890 <_txe_thread_resume+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4a08      	ldr	r2, [pc, #32]	; (801489c <_txe_thread_resume+0x3c>)
 801487a:	4293      	cmp	r3, r2
 801487c:	d002      	beq.n	8014884 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801487e:	230e      	movs	r3, #14
 8014880:	60fb      	str	r3, [r7, #12]
 8014882:	e005      	b.n	8014890 <_txe_thread_resume+0x30>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	0018      	movs	r0, r3
 8014888:	f7fe f8aa 	bl	80129e0 <_tx_thread_resume>
 801488c:	0003      	movs	r3, r0
 801488e:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014890:	68fb      	ldr	r3, [r7, #12]
}
 8014892:	0018      	movs	r0, r3
 8014894:	46bd      	mov	sp, r7
 8014896:	b004      	add	sp, #16
 8014898:	bd80      	pop	{r7, pc}
 801489a:	46c0      	nop			; (mov r8, r8)
 801489c:	54485244 	.word	0x54485244

080148a0 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d102      	bne.n	80148b4 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80148ae:	230e      	movs	r3, #14
 80148b0:	60fb      	str	r3, [r7, #12]
 80148b2:	e00d      	b.n	80148d0 <_txe_thread_suspend+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	4a08      	ldr	r2, [pc, #32]	; (80148dc <_txe_thread_suspend+0x3c>)
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d002      	beq.n	80148c4 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80148be:	230e      	movs	r3, #14
 80148c0:	60fb      	str	r3, [r7, #12]
 80148c2:	e005      	b.n	80148d0 <_txe_thread_suspend+0x30>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	0018      	movs	r0, r3
 80148c8:	f7fe f9a6 	bl	8012c18 <_tx_thread_suspend>
 80148cc:	0003      	movs	r3, r0
 80148ce:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80148d0:	68fb      	ldr	r3, [r7, #12]
}
 80148d2:	0018      	movs	r0, r3
 80148d4:	46bd      	mov	sp, r7
 80148d6:	b004      	add	sp, #16
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	46c0      	nop			; (mov r8, r8)
 80148dc:	54485244 	.word	0x54485244

080148e0 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d102      	bne.n	80148f4 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80148ee:	230e      	movs	r3, #14
 80148f0:	60fb      	str	r3, [r7, #12]
 80148f2:	e018      	b.n	8014926 <_txe_thread_terminate+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4a0d      	ldr	r2, [pc, #52]	; (8014930 <_txe_thread_terminate+0x50>)
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d002      	beq.n	8014904 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80148fe:	230e      	movs	r3, #14
 8014900:	60fb      	str	r3, [r7, #12]
 8014902:	e010      	b.n	8014926 <_txe_thread_terminate+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014904:	f3ef 8305 	mrs	r3, IPSR
 8014908:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801490a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801490c:	4b09      	ldr	r3, [pc, #36]	; (8014934 <_txe_thread_terminate+0x54>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4313      	orrs	r3, r2
 8014912:	d002      	beq.n	801491a <_txe_thread_terminate+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8014914:	2313      	movs	r3, #19
 8014916:	60fb      	str	r3, [r7, #12]
 8014918:	e005      	b.n	8014926 <_txe_thread_terminate+0x46>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	0018      	movs	r0, r3
 801491e:	f7fe fca9 	bl	8013274 <_tx_thread_terminate>
 8014922:	0003      	movs	r3, r0
 8014924:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014926:	68fb      	ldr	r3, [r7, #12]
}
 8014928:	0018      	movs	r0, r3
 801492a:	46bd      	mov	sp, r7
 801492c:	b004      	add	sp, #16
 801492e:	bd80      	pop	{r7, pc}
 8014930:	54485244 	.word	0x54485244
 8014934:	20000010 	.word	0x20000010

08014938 <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b088      	sub	sp, #32
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014940:	4b1c      	ldr	r3, [pc, #112]	; (80149b4 <_ux_device_stack_alternate_setting_get+0x7c>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	3320      	adds	r3, #32
 8014946:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8014948:	69bb      	ldr	r3, [r7, #24]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2b03      	cmp	r3, #3
 801494e:	d12b      	bne.n	80149a8 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	22f0      	movs	r2, #240	; 0xf0
 8014954:	589b      	ldr	r3, [r3, r2]
 8014956:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 8014958:	e023      	b.n	80149a2 <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	695b      	ldr	r3, [r3, #20]
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	429a      	cmp	r2, r3
 8014962:	d11b      	bne.n	801499c <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	333c      	adds	r3, #60	; 0x3c
 8014968:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	3330      	adds	r3, #48	; 0x30
 801496e:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8014978:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801497a:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	2201      	movs	r2, #1
 8014980:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	2203      	movs	r2, #3
 8014986:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	2201      	movs	r2, #1
 801498c:	2101      	movs	r1, #1
 801498e:	0018      	movs	r0, r3
 8014990:	f001 feaa 	bl	80166e8 <_ux_device_stack_transfer_request>
 8014994:	0003      	movs	r3, r0
 8014996:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	e006      	b.n	80149aa <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a0:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d1d8      	bne.n	801495a <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 80149a8:	23ff      	movs	r3, #255	; 0xff
}
 80149aa:	0018      	movs	r0, r3
 80149ac:	46bd      	mov	sp, r7
 80149ae:	b008      	add	sp, #32
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	46c0      	nop			; (mov r8, r8)
 80149b4:	20010c9c 	.word	0x20010c9c

080149b8 <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 80149b8:	b590      	push	{r4, r7, lr}
 80149ba:	b0af      	sub	sp, #188	; 0xbc
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80149c2:	4bdd      	ldr	r3, [pc, #884]	; (8014d38 <_ux_device_stack_alternate_setting_set+0x380>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	3320      	adds	r3, #32
 80149c8:	2298      	movs	r2, #152	; 0x98
 80149ca:	18b9      	adds	r1, r7, r2
 80149cc:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80149ce:	18bb      	adds	r3, r7, r2
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2b03      	cmp	r3, #3
 80149d6:	d001      	beq.n	80149dc <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 80149d8:	2354      	movs	r3, #84	; 0x54
 80149da:	e26e      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 80149dc:	2398      	movs	r3, #152	; 0x98
 80149de:	18fb      	adds	r3, r7, r3
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	22f0      	movs	r2, #240	; 0xf0
 80149e4:	589b      	ldr	r3, [r3, r2]
 80149e6:	22b4      	movs	r2, #180	; 0xb4
 80149e8:	18ba      	adds	r2, r7, r2
 80149ea:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 80149ec:	e00b      	b.n	8014a06 <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 80149ee:	21b4      	movs	r1, #180	; 0xb4
 80149f0:	187b      	adds	r3, r7, r1
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	695b      	ldr	r3, [r3, #20]
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d00a      	beq.n	8014a12 <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 80149fc:	187b      	adds	r3, r7, r1
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a02:	187a      	adds	r2, r7, r1
 8014a04:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 8014a06:	23b4      	movs	r3, #180	; 0xb4
 8014a08:	18fb      	adds	r3, r7, r3
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d1ee      	bne.n	80149ee <_ux_device_stack_alternate_setting_set+0x36>
 8014a10:	e000      	b.n	8014a14 <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 8014a12:	46c0      	nop			; (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 8014a14:	23b4      	movs	r3, #180	; 0xb4
 8014a16:	18fb      	adds	r3, r7, r3
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d106      	bne.n	8014a2c <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8014a1e:	2252      	movs	r2, #82	; 0x52
 8014a20:	2107      	movs	r1, #7
 8014a22:	2002      	movs	r0, #2
 8014a24:	f001 fee6 	bl	80167f4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8014a28:	2352      	movs	r3, #82	; 0x52
 8014a2a:	e246      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8014a2c:	23b4      	movs	r3, #180	; 0xb4
 8014a2e:	18fb      	adds	r3, r7, r3
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	699b      	ldr	r3, [r3, #24]
 8014a34:	683a      	ldr	r2, [r7, #0]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d101      	bne.n	8014a3e <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	e23d      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8014a3e:	4bbe      	ldr	r3, [pc, #760]	; (8014d38 <_ux_device_stack_alternate_setting_set+0x380>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2294      	movs	r2, #148	; 0x94
 8014a44:	18ba      	adds	r2, r7, r2
 8014a46:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8014a48:	4bbb      	ldr	r3, [pc, #748]	; (8014d38 <_ux_device_stack_alternate_setting_set+0x380>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	2394      	movs	r3, #148	; 0x94
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	58d3      	ldr	r3, [r2, r3]
 8014a52:	22b0      	movs	r2, #176	; 0xb0
 8014a54:	18ba      	adds	r2, r7, r2
 8014a56:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8014a58:	4bb7      	ldr	r3, [pc, #732]	; (8014d38 <_ux_device_stack_alternate_setting_set+0x380>)
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	2396      	movs	r3, #150	; 0x96
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	58d3      	ldr	r3, [r2, r3]
 8014a62:	22ac      	movs	r2, #172	; 0xac
 8014a64:	18ba      	adds	r2, r7, r2
 8014a66:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8014a68:	e220      	b.n	8014eac <_ux_device_stack_alternate_setting_set+0x4f4>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8014a6a:	20b0      	movs	r0, #176	; 0xb0
 8014a6c:	183b      	adds	r3, r7, r0
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	2290      	movs	r2, #144	; 0x90
 8014a74:	18ba      	adds	r2, r7, r2
 8014a76:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 8014a78:	218f      	movs	r1, #143	; 0x8f
 8014a7a:	187b      	adds	r3, r7, r1
 8014a7c:	183a      	adds	r2, r7, r0
 8014a7e:	6812      	ldr	r2, [r2, #0]
 8014a80:	7852      	ldrb	r2, [r2, #1]
 8014a82:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8014a84:	187b      	adds	r3, r7, r1
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	2b02      	cmp	r3, #2
 8014a8a:	d000      	beq.n	8014a8e <_ux_device_stack_alternate_setting_set+0xd6>
 8014a8c:	e1fd      	b.n	8014e8a <_ux_device_stack_alternate_setting_set+0x4d2>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 8014a8e:	2458      	movs	r4, #88	; 0x58
 8014a90:	193b      	adds	r3, r7, r4
 8014a92:	49aa      	ldr	r1, [pc, #680]	; (8014d3c <_ux_device_stack_alternate_setting_set+0x384>)
 8014a94:	183a      	adds	r2, r7, r0
 8014a96:	6810      	ldr	r0, [r2, #0]
 8014a98:	2208      	movs	r2, #8
 8014a9a:	f001 ff9f 	bl	80169dc <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 8014a9e:	0020      	movs	r0, r4
 8014aa0:	183b      	adds	r3, r7, r0
 8014aa2:	691a      	ldr	r2, [r3, #16]
 8014aa4:	2398      	movs	r3, #152	; 0x98
 8014aa6:	18fb      	adds	r3, r7, r3
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	21cc      	movs	r1, #204	; 0xcc
 8014aac:	585b      	ldr	r3, [r3, r1]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d000      	beq.n	8014ab4 <_ux_device_stack_alternate_setting_set+0xfc>
 8014ab2:	e1ea      	b.n	8014e8a <_ux_device_stack_alternate_setting_set+0x4d2>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 8014ab4:	183b      	adds	r3, r7, r0
 8014ab6:	689b      	ldr	r3, [r3, #8]
 8014ab8:	22ac      	movs	r2, #172	; 0xac
 8014aba:	18ba      	adds	r2, r7, r2
 8014abc:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 8014abe:	e1dd      	b.n	8014e7c <_ux_device_stack_alternate_setting_set+0x4c4>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 8014ac0:	20b0      	movs	r0, #176	; 0xb0
 8014ac2:	183b      	adds	r3, r7, r0
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	2290      	movs	r2, #144	; 0x90
 8014aca:	18ba      	adds	r2, r7, r2
 8014acc:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 8014ace:	218f      	movs	r1, #143	; 0x8f
 8014ad0:	187b      	adds	r3, r7, r1
 8014ad2:	183a      	adds	r2, r7, r0
 8014ad4:	6812      	ldr	r2, [r2, #0]
 8014ad6:	7852      	ldrb	r2, [r2, #1]
 8014ad8:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8014ada:	187b      	adds	r3, r7, r1
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	2b04      	cmp	r3, #4
 8014ae0:	d000      	beq.n	8014ae4 <_ux_device_stack_alternate_setting_set+0x12c>
 8014ae2:	e1ba      	b.n	8014e5a <_ux_device_stack_alternate_setting_set+0x4a2>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 8014ae4:	2434      	movs	r4, #52	; 0x34
 8014ae6:	193b      	adds	r3, r7, r4
 8014ae8:	4995      	ldr	r1, [pc, #596]	; (8014d40 <_ux_device_stack_alternate_setting_set+0x388>)
 8014aea:	183a      	adds	r2, r7, r0
 8014aec:	6810      	ldr	r0, [r2, #0]
 8014aee:	2209      	movs	r2, #9
 8014af0:	f001 ff74 	bl	80169dc <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8014af4:	193b      	adds	r3, r7, r4
 8014af6:	689b      	ldr	r3, [r3, #8]
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d000      	beq.n	8014b00 <_ux_device_stack_alternate_setting_set+0x148>
 8014afe:	e1ac      	b.n	8014e5a <_ux_device_stack_alternate_setting_set+0x4a2>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8014b00:	193b      	adds	r3, r7, r4
 8014b02:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8014b04:	683a      	ldr	r2, [r7, #0]
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d000      	beq.n	8014b0c <_ux_device_stack_alternate_setting_set+0x154>
 8014b0a:	e1a6      	b.n	8014e5a <_ux_device_stack_alternate_setting_set+0x4a2>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8014b0c:	23b4      	movs	r3, #180	; 0xb4
 8014b0e:	18fb      	adds	r3, r7, r3
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b14:	22a8      	movs	r2, #168	; 0xa8
 8014b16:	18ba      	adds	r2, r7, r2
 8014b18:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 8014b1a:	e02c      	b.n	8014b76 <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8014b1c:	24a8      	movs	r4, #168	; 0xa8
 8014b1e:	193b      	adds	r3, r7, r4
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2126      	movs	r1, #38	; 0x26
 8014b24:	0018      	movs	r0, r3
 8014b26:	f001 fdcb 	bl	80166c0 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8014b2a:	2194      	movs	r1, #148	; 0x94
 8014b2c:	187b      	adds	r3, r7, r1
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	699b      	ldr	r3, [r3, #24]
 8014b32:	193a      	adds	r2, r7, r4
 8014b34:	6812      	ldr	r2, [r2, #0]
 8014b36:	1879      	adds	r1, r7, r1
 8014b38:	6808      	ldr	r0, [r1, #0]
 8014b3a:	210f      	movs	r1, #15
 8014b3c:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014b3e:	193b      	adds	r3, r7, r4
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b44:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8014b46:	0021      	movs	r1, r4
 8014b48:	187b      	adds	r3, r7, r1
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 8014b50:	187b      	adds	r3, r7, r1
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2200      	movs	r2, #0
 8014b56:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8014b58:	187b      	adds	r3, r7, r1
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8014b60:	187b      	adds	r3, r7, r1
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	2200      	movs	r2, #0
 8014b66:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8014b68:	187b      	adds	r3, r7, r1
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 8014b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014b72:	187a      	adds	r2, r7, r1
 8014b74:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 8014b76:	23a8      	movs	r3, #168	; 0xa8
 8014b78:	18fb      	adds	r3, r7, r3
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d1cd      	bne.n	8014b1c <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 8014b80:	23b4      	movs	r3, #180	; 0xb4
 8014b82:	18fb      	adds	r3, r7, r3
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2200      	movs	r2, #0
 8014b88:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 8014b8a:	21b0      	movs	r1, #176	; 0xb0
 8014b8c:	187b      	adds	r3, r7, r1
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	001a      	movs	r2, r3
 8014b94:	20ac      	movs	r0, #172	; 0xac
 8014b96:	183b      	adds	r3, r7, r0
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	1a9b      	subs	r3, r3, r2
 8014b9c:	183a      	adds	r2, r7, r0
 8014b9e:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 8014ba0:	187b      	adds	r3, r7, r1
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	001a      	movs	r2, r3
 8014ba8:	187b      	adds	r3, r7, r1
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	189b      	adds	r3, r3, r2
 8014bae:	187a      	adds	r2, r7, r1
 8014bb0:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 8014bb2:	e10a      	b.n	8014dca <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 8014bb4:	22b0      	movs	r2, #176	; 0xb0
 8014bb6:	18bb      	adds	r3, r7, r2
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	2190      	movs	r1, #144	; 0x90
 8014bbe:	1879      	adds	r1, r7, r1
 8014bc0:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 8014bc2:	218f      	movs	r1, #143	; 0x8f
 8014bc4:	187b      	adds	r3, r7, r1
 8014bc6:	18ba      	adds	r2, r7, r2
 8014bc8:	6812      	ldr	r2, [r2, #0]
 8014bca:	7852      	ldrb	r2, [r2, #1]
 8014bcc:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 8014bce:	187b      	adds	r3, r7, r1
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	2b05      	cmp	r3, #5
 8014bd4:	d008      	beq.n	8014be8 <_ux_device_stack_alternate_setting_set+0x230>
 8014bd6:	dd00      	ble.n	8014bda <_ux_device_stack_alternate_setting_set+0x222>
 8014bd8:	e0e5      	b.n	8014da6 <_ux_device_stack_alternate_setting_set+0x3ee>
 8014bda:	2b02      	cmp	r3, #2
 8014bdc:	d100      	bne.n	8014be0 <_ux_device_stack_alternate_setting_set+0x228>
 8014bde:	e0db      	b.n	8014d98 <_ux_device_stack_alternate_setting_set+0x3e0>
 8014be0:	2b04      	cmp	r3, #4
 8014be2:	d100      	bne.n	8014be6 <_ux_device_stack_alternate_setting_set+0x22e>
 8014be4:	e0d8      	b.n	8014d98 <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 8014be6:	e0de      	b.n	8014da6 <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 8014be8:	2198      	movs	r1, #152	; 0x98
 8014bea:	187b      	adds	r3, r7, r1
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	22fc      	movs	r2, #252	; 0xfc
 8014bf0:	589b      	ldr	r3, [r3, r2]
 8014bf2:	22a8      	movs	r2, #168	; 0xa8
 8014bf4:	18ba      	adds	r2, r7, r2
 8014bf6:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8014bf8:	187b      	adds	r3, r7, r1
 8014bfa:	681a      	ldr	r2, [r3, #0]
 8014bfc:	2380      	movs	r3, #128	; 0x80
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	58d3      	ldr	r3, [r2, r3]
 8014c02:	22a0      	movs	r2, #160	; 0xa0
 8014c04:	18ba      	adds	r2, r7, r2
 8014c06:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8014c08:	e016      	b.n	8014c38 <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8014c0a:	22a8      	movs	r2, #168	; 0xa8
 8014c0c:	18bb      	adds	r3, r7, r2
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d104      	bne.n	8014c20 <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 8014c16:	18bb      	adds	r3, r7, r2
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	601a      	str	r2, [r3, #0]
                                            break;
 8014c1e:	e010      	b.n	8014c42 <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 8014c20:	22a8      	movs	r2, #168	; 0xa8
 8014c22:	18bb      	adds	r3, r7, r2
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	3390      	adds	r3, #144	; 0x90
 8014c28:	18ba      	adds	r2, r7, r2
 8014c2a:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 8014c2c:	22a0      	movs	r2, #160	; 0xa0
 8014c2e:	18bb      	adds	r3, r7, r2
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	3b01      	subs	r3, #1
 8014c34:	18ba      	adds	r2, r7, r2
 8014c36:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8014c38:	23a0      	movs	r3, #160	; 0xa0
 8014c3a:	18fb      	adds	r3, r7, r3
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1e3      	bne.n	8014c0a <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 8014c42:	23a0      	movs	r3, #160	; 0xa0
 8014c44:	18fb      	adds	r3, r7, r3
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d101      	bne.n	8014c50 <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 8014c4c:	2312      	movs	r3, #18
 8014c4e:	e134      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8014c50:	24a8      	movs	r4, #168	; 0xa8
 8014c52:	193b      	adds	r3, r7, r4
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 8014c58:	493a      	ldr	r1, [pc, #232]	; (8014d44 <_ux_device_stack_alternate_setting_set+0x38c>)
 8014c5a:	22b0      	movs	r2, #176	; 0xb0
 8014c5c:	18ba      	adds	r2, r7, r2
 8014c5e:	6810      	ldr	r0, [r2, #0]
 8014c60:	2206      	movs	r2, #6
 8014c62:	f001 febb 	bl	80169dc <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014c66:	0021      	movs	r1, r4
 8014c68:	187b      	adds	r3, r7, r1
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	3330      	adds	r3, #48	; 0x30
 8014c6e:	2280      	movs	r2, #128	; 0x80
 8014c70:	18ba      	adds	r2, r7, r2
 8014c72:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8014c74:	187b      	adds	r3, r7, r1
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 8014c7a:	055b      	lsls	r3, r3, #21
 8014c7c:	0d5b      	lsrs	r3, r3, #21
 8014c7e:	209c      	movs	r0, #156	; 0x9c
 8014c80:	183a      	adds	r2, r7, r0
 8014c82:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8014c84:	4b2c      	ldr	r3, [pc, #176]	; (8014d38 <_ux_device_stack_alternate_setting_set+0x380>)
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	23d0      	movs	r3, #208	; 0xd0
 8014c8a:	005b      	lsls	r3, r3, #1
 8014c8c:	58d3      	ldr	r3, [r2, r3]
 8014c8e:	2b02      	cmp	r3, #2
 8014c90:	d11b      	bne.n	8014cca <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8014c92:	187b      	adds	r3, r7, r1
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	699b      	ldr	r3, [r3, #24]
 8014c98:	2201      	movs	r2, #1
 8014c9a:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8014c9c:	d015      	beq.n	8014cca <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8014c9e:	187b      	adds	r3, r7, r1
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	69da      	ldr	r2, [r3, #28]
 8014ca4:	23c0      	movs	r3, #192	; 0xc0
 8014ca6:	015b      	lsls	r3, r3, #5
 8014ca8:	4013      	ands	r3, r2
 8014caa:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 8014cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d00b      	beq.n	8014cca <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8014cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014cb4:	0adb      	lsrs	r3, r3, #11
 8014cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 8014cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014cba:	3301      	adds	r3, #1
 8014cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 8014cbe:	183b      	adds	r3, r7, r0
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014cc4:	4353      	muls	r3, r2
 8014cc6:	183a      	adds	r2, r7, r0
 8014cc8:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8014cca:	2180      	movs	r1, #128	; 0x80
 8014ccc:	187b      	adds	r3, r7, r1
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	229c      	movs	r2, #156	; 0x9c
 8014cd2:	18ba      	adds	r2, r7, r2
 8014cd4:	6812      	ldr	r2, [r2, #0]
 8014cd6:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8014cd8:	187b      	adds	r3, r7, r1
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	24a8      	movs	r4, #168	; 0xa8
 8014cde:	193a      	adds	r2, r7, r4
 8014ce0:	6812      	ldr	r2, [r2, #0]
 8014ce2:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8014ce4:	187b      	adds	r3, r7, r1
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2201      	movs	r2, #1
 8014cea:	4252      	negs	r2, r2
 8014cec:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 8014cee:	193b      	adds	r3, r7, r4
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	22b4      	movs	r2, #180	; 0xb4
 8014cf4:	18ba      	adds	r2, r7, r2
 8014cf6:	6812      	ldr	r2, [r2, #0]
 8014cf8:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 8014cfa:	193b      	adds	r3, r7, r4
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2298      	movs	r2, #152	; 0x98
 8014d00:	18ba      	adds	r2, r7, r2
 8014d02:	6812      	ldr	r2, [r2, #0]
 8014d04:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8014d06:	2194      	movs	r1, #148	; 0x94
 8014d08:	187b      	adds	r3, r7, r1
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	699b      	ldr	r3, [r3, #24]
 8014d0e:	193a      	adds	r2, r7, r4
 8014d10:	6812      	ldr	r2, [r2, #0]
 8014d12:	1879      	adds	r1, r7, r1
 8014d14:	6808      	ldr	r0, [r1, #0]
 8014d16:	210e      	movs	r1, #14
 8014d18:	4798      	blx	r3
 8014d1a:	0003      	movs	r3, r0
 8014d1c:	2184      	movs	r1, #132	; 0x84
 8014d1e:	187a      	adds	r2, r7, r1
 8014d20:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 8014d22:	187b      	adds	r3, r7, r1
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d00e      	beq.n	8014d48 <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8014d2a:	193b      	adds	r3, r7, r4
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	601a      	str	r2, [r3, #0]
                                        return(status);
 8014d32:	187b      	adds	r3, r7, r1
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	e0c0      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>
 8014d38:	20010c9c 	.word	0x20010c9c
 8014d3c:	20000040 	.word	0x20000040
 8014d40:	20000048 	.word	0x20000048
 8014d44:	20000028 	.word	0x20000028
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8014d48:	22b4      	movs	r2, #180	; 0xb4
 8014d4a:	18bb      	adds	r3, r7, r2
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d106      	bne.n	8014d62 <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 8014d54:	18bb      	adds	r3, r7, r2
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	22a8      	movs	r2, #168	; 0xa8
 8014d5a:	18ba      	adds	r2, r7, r2
 8014d5c:	6812      	ldr	r2, [r2, #0]
 8014d5e:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8014d60:	e022      	b.n	8014da8 <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 8014d62:	23b4      	movs	r3, #180	; 0xb4
 8014d64:	18fb      	adds	r3, r7, r3
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d6a:	22a4      	movs	r2, #164	; 0xa4
 8014d6c:	18ba      	adds	r2, r7, r2
 8014d6e:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8014d70:	e005      	b.n	8014d7e <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8014d72:	22a4      	movs	r2, #164	; 0xa4
 8014d74:	18bb      	adds	r3, r7, r2
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7a:	18ba      	adds	r2, r7, r2
 8014d7c:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8014d7e:	22a4      	movs	r2, #164	; 0xa4
 8014d80:	18bb      	adds	r3, r7, r2
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d1f3      	bne.n	8014d72 <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8014d8a:	18bb      	adds	r3, r7, r2
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	22a8      	movs	r2, #168	; 0xa8
 8014d90:	18ba      	adds	r2, r7, r2
 8014d92:	6812      	ldr	r2, [r2, #0]
 8014d94:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 8014d96:	e007      	b.n	8014da8 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 8014d98:	2390      	movs	r3, #144	; 0x90
 8014d9a:	18fb      	adds	r3, r7, r3
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	22ac      	movs	r2, #172	; 0xac
 8014da0:	18ba      	adds	r2, r7, r2
 8014da2:	6013      	str	r3, [r2, #0]
                                    break;
 8014da4:	e000      	b.n	8014da8 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 8014da6:	46c0      	nop			; (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 8014da8:	21ac      	movs	r1, #172	; 0xac
 8014daa:	187b      	adds	r3, r7, r1
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	2090      	movs	r0, #144	; 0x90
 8014db0:	183b      	adds	r3, r7, r0
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	1ad3      	subs	r3, r2, r3
 8014db6:	187a      	adds	r2, r7, r1
 8014db8:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 8014dba:	21b0      	movs	r1, #176	; 0xb0
 8014dbc:	187b      	adds	r3, r7, r1
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	183b      	adds	r3, r7, r0
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	18d3      	adds	r3, r2, r3
 8014dc6:	187a      	adds	r2, r7, r1
 8014dc8:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 8014dca:	23ac      	movs	r3, #172	; 0xac
 8014dcc:	18fb      	adds	r3, r7, r3
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d000      	beq.n	8014dd6 <_ux_device_stack_alternate_setting_set+0x41e>
 8014dd4:	e6ee      	b.n	8014bb4 <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8014dd6:	24b4      	movs	r4, #180	; 0xb4
 8014dd8:	193b      	adds	r3, r7, r4
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	330c      	adds	r3, #12
 8014dde:	2234      	movs	r2, #52	; 0x34
 8014de0:	18b9      	adds	r1, r7, r2
 8014de2:	2224      	movs	r2, #36	; 0x24
 8014de4:	0018      	movs	r0, r3
 8014de6:	f001 fff5 	bl	8016dd4 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 8014dea:	4b36      	ldr	r3, [pc, #216]	; (8014ec4 <_ux_device_stack_alternate_setting_set+0x50c>)
 8014dec:	681a      	ldr	r2, [r3, #0]
 8014dee:	193b      	adds	r3, r7, r4
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	695b      	ldr	r3, [r3, #20]
 8014df4:	3358      	adds	r3, #88	; 0x58
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	589b      	ldr	r3, [r3, r2]
 8014dfa:	2288      	movs	r2, #136	; 0x88
 8014dfc:	18b9      	adds	r1, r7, r2
 8014dfe:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 8014e00:	18bb      	adds	r3, r7, r2
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d004      	beq.n	8014e12 <_ux_device_stack_alternate_setting_set+0x45a>
 8014e08:	18bb      	adds	r3, r7, r2
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <_ux_device_stack_alternate_setting_set+0x45e>
                            {

                                return (UX_NO_CLASS_MATCH);
 8014e12:	2357      	movs	r3, #87	; 0x57
 8014e14:	e051      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8014e16:	2008      	movs	r0, #8
 8014e18:	183b      	adds	r3, r7, r0
 8014e1a:	2206      	movs	r2, #6
 8014e1c:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 8014e1e:	183b      	adds	r3, r7, r0
 8014e20:	21b4      	movs	r1, #180	; 0xb4
 8014e22:	187a      	adds	r2, r7, r1
 8014e24:	6812      	ldr	r2, [r2, #0]
 8014e26:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 8014e28:	183b      	adds	r3, r7, r0
 8014e2a:	2488      	movs	r4, #136	; 0x88
 8014e2c:	193a      	adds	r2, r7, r4
 8014e2e:	6812      	ldr	r2, [r2, #0]
 8014e30:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 8014e32:	193b      	adds	r3, r7, r4
 8014e34:	681a      	ldr	r2, [r3, #0]
 8014e36:	2388      	movs	r3, #136	; 0x88
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	1879      	adds	r1, r7, r1
 8014e3c:	6809      	ldr	r1, [r1, #0]
 8014e3e:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 8014e40:	193b      	adds	r3, r7, r4
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e46:	183a      	adds	r2, r7, r0
 8014e48:	0010      	movs	r0, r2
 8014e4a:	4798      	blx	r3
 8014e4c:	0003      	movs	r3, r0
 8014e4e:	2284      	movs	r2, #132	; 0x84
 8014e50:	18b9      	adds	r1, r7, r2
 8014e52:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 8014e54:	18bb      	adds	r3, r7, r2
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	e02f      	b.n	8014eba <_ux_device_stack_alternate_setting_set+0x502>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 8014e5a:	21ac      	movs	r1, #172	; 0xac
 8014e5c:	187b      	adds	r3, r7, r1
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	2090      	movs	r0, #144	; 0x90
 8014e62:	183b      	adds	r3, r7, r0
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	1ad3      	subs	r3, r2, r3
 8014e68:	187a      	adds	r2, r7, r1
 8014e6a:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 8014e6c:	21b0      	movs	r1, #176	; 0xb0
 8014e6e:	187b      	adds	r3, r7, r1
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	183b      	adds	r3, r7, r0
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	18d3      	adds	r3, r2, r3
 8014e78:	187a      	adds	r2, r7, r1
 8014e7a:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 8014e7c:	23ac      	movs	r3, #172	; 0xac
 8014e7e:	18fb      	adds	r3, r7, r3
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d000      	beq.n	8014e88 <_ux_device_stack_alternate_setting_set+0x4d0>
 8014e86:	e61b      	b.n	8014ac0 <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 8014e88:	e016      	b.n	8014eb8 <_ux_device_stack_alternate_setting_set+0x500>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8014e8a:	21ac      	movs	r1, #172	; 0xac
 8014e8c:	187b      	adds	r3, r7, r1
 8014e8e:	681a      	ldr	r2, [r3, #0]
 8014e90:	2090      	movs	r0, #144	; 0x90
 8014e92:	183b      	adds	r3, r7, r0
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	187a      	adds	r2, r7, r1
 8014e9a:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8014e9c:	21b0      	movs	r1, #176	; 0xb0
 8014e9e:	187b      	adds	r3, r7, r1
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	183b      	adds	r3, r7, r0
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	18d3      	adds	r3, r2, r3
 8014ea8:	187a      	adds	r2, r7, r1
 8014eaa:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 8014eac:	23ac      	movs	r3, #172	; 0xac
 8014eae:	18fb      	adds	r3, r7, r3
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d000      	beq.n	8014eb8 <_ux_device_stack_alternate_setting_set+0x500>
 8014eb6:	e5d8      	b.n	8014a6a <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 8014eb8:	23ff      	movs	r3, #255	; 0xff
#endif
}
 8014eba:	0018      	movs	r0, r3
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	b02f      	add	sp, #188	; 0xbc
 8014ec0:	bd90      	pop	{r4, r7, pc}
 8014ec2:	46c0      	nop			; (mov r8, r8)
 8014ec4:	20010c9c 	.word	0x20010c9c

08014ec8 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b094      	sub	sp, #80	; 0x50
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	607a      	str	r2, [r7, #4]
 8014ed4:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	617b      	str	r3, [r7, #20]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8014eda:	2314      	movs	r3, #20
 8014edc:	18f9      	adds	r1, r7, r3
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	223f      	movs	r2, #63	; 0x3f
 8014ee2:	0018      	movs	r0, r3
 8014ee4:	f002 f95e 	bl	80171a4 <_ux_utility_string_length_check>
 8014ee8:	0003      	movs	r3, r0
 8014eea:	647b      	str	r3, [r7, #68]	; 0x44
    if (status)
 8014eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <_ux_device_stack_class_register+0x2e>
        return(status);
 8014ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ef4:	e04f      	b.n	8014f96 <_ux_device_stack_class_register+0xce>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8014ef6:	4b2a      	ldr	r3, [pc, #168]	; (8014fa0 <_ux_device_stack_class_register+0xd8>)
 8014ef8:	681a      	ldr	r2, [r3, #0]
 8014efa:	23ae      	movs	r3, #174	; 0xae
 8014efc:	005b      	lsls	r3, r3, #1
 8014efe:	58d3      	ldr	r3, [r2, r3]
 8014f00:	64fb      	str	r3, [r7, #76]	; 0x4c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8014f02:	2300      	movs	r3, #0
 8014f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f06:	e03d      	b.n	8014f84 <_ux_device_stack_class_register+0xbc>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8014f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d132      	bne.n	8014f76 <_ux_device_stack_class_register+0xae>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8014f10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014f12:	697b      	ldr	r3, [r7, #20]
 8014f14:	1c5a      	adds	r2, r3, #1
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	0019      	movs	r1, r3
 8014f1a:	f001 ff5b 	bl	8016dd4 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8014f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f20:	68ba      	ldr	r2, [r7, #8]
 8014f22:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8014f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f26:	2382      	movs	r3, #130	; 0x82
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f2c:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8014f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f30:	2386      	movs	r3, #134	; 0x86
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	6879      	ldr	r1, [r7, #4]
 8014f36:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8014f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f3a:	2384      	movs	r3, #132	; 0x84
 8014f3c:	005b      	lsls	r3, r3, #1
 8014f3e:	6839      	ldr	r1, [r7, #0]
 8014f40:	50d1      	str	r1, [r2, r3]
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 8014f42:	2118      	movs	r1, #24
 8014f44:	187b      	adds	r3, r7, r1
 8014f46:	2205      	movs	r2, #5
 8014f48:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 8014f4a:	187b      	adds	r3, r7, r1
 8014f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014f4e:	625a      	str	r2, [r3, #36]	; 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8014f50:	187b      	adds	r3, r7, r1
 8014f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f54:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 8014f56:	187a      	adds	r2, r7, r1
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	0010      	movs	r0, r2
 8014f5c:	4798      	blx	r3
 8014f5e:	0003      	movs	r3, r0
 8014f60:	647b      	str	r3, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 8014f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d001      	beq.n	8014f6c <_ux_device_stack_class_register+0xa4>
                return(status);
 8014f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f6a:	e014      	b.n	8014f96 <_ux_device_stack_class_register+0xce>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 8014f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f6e:	2201      	movs	r2, #1
 8014f70:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 8014f72:	2300      	movs	r3, #0
 8014f74:	e00f      	b.n	8014f96 <_ux_device_stack_class_register+0xce>
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 8014f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f78:	3315      	adds	r3, #21
 8014f7a:	33ff      	adds	r3, #255	; 0xff
 8014f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8014f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f80:	3301      	adds	r3, #1
 8014f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f84:	4b06      	ldr	r3, [pc, #24]	; (8014fa0 <_ux_device_stack_class_register+0xd8>)
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	23ac      	movs	r3, #172	; 0xac
 8014f8a:	005b      	lsls	r3, r3, #1
 8014f8c:	58d3      	ldr	r3, [r2, r3]
 8014f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d3b9      	bcc.n	8014f08 <_ux_device_stack_class_register+0x40>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 8014f94:	2312      	movs	r3, #18
}
 8014f96:	0018      	movs	r0, r3
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	b014      	add	sp, #80	; 0x50
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	46c0      	nop			; (mov r8, r8)
 8014fa0:	20010c9c 	.word	0x20010c9c

08014fa4 <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b08a      	sub	sp, #40	; 0x28
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014fb0:	4b2b      	ldr	r3, [pc, #172]	; (8015060 <_ux_device_stack_clear_feature+0xbc>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014fb6:	4b2a      	ldr	r3, [pc, #168]	; (8015060 <_ux_device_stack_clear_feature+0xbc>)
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	3320      	adds	r3, #32
 8014fbc:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	333c      	adds	r3, #60	; 0x3c
 8014fc2:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2203      	movs	r2, #3
 8014fc8:	4013      	ands	r3, r2
 8014fca:	d002      	beq.n	8014fd2 <_ux_device_stack_clear_feature+0x2e>
 8014fcc:	2b02      	cmp	r3, #2
 8014fce:	d013      	beq.n	8014ff8 <_ux_device_stack_clear_feature+0x54>
 8014fd0:	e037      	b.n	8015042 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8014fd2:	68bb      	ldr	r3, [r7, #8]
 8014fd4:	2b01      	cmp	r3, #1
 8014fd6:	d13c      	bne.n	8015052 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8014fd8:	4b21      	ldr	r3, [pc, #132]	; (8015060 <_ux_device_stack_clear_feature+0xbc>)
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	23d4      	movs	r3, #212	; 0xd4
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	58d3      	ldr	r3, [r2, r3]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d006      	beq.n	8014ff4 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8014fe6:	4b1e      	ldr	r3, [pc, #120]	; (8015060 <_ux_device_stack_clear_feature+0xbc>)
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	23d6      	movs	r3, #214	; 0xd6
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	2100      	movs	r1, #0
 8014ff0:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 8014ff2:	e02e      	b.n	8015052 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8014ff4:	2354      	movs	r3, #84	; 0x54
 8014ff6:	e02e      	b.n	8015056 <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	22f0      	movs	r2, #240	; 0xf0
 8014ffc:	589b      	ldr	r3, [r3, r2]
 8014ffe:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 8015000:	e01c      	b.n	801503c <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8015002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015006:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8015008:	e012      	b.n	8015030 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 801500a:	6a3b      	ldr	r3, [r7, #32]
 801500c:	695b      	ldr	r3, [r3, #20]
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	429a      	cmp	r2, r3
 8015012:	d10a      	bne.n	801502a <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8015014:	69fb      	ldr	r3, [r7, #28]
 8015016:	699b      	ldr	r3, [r3, #24]
 8015018:	6a3a      	ldr	r2, [r7, #32]
 801501a:	69f8      	ldr	r0, [r7, #28]
 801501c:	2110      	movs	r1, #16
 801501e:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8015020:	6a3b      	ldr	r3, [r7, #32]
 8015022:	2200      	movs	r2, #0
 8015024:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8015026:	2300      	movs	r3, #0
 8015028:	e015      	b.n	8015056 <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801502a:	6a3b      	ldr	r3, [r7, #32]
 801502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801502e:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8015030:	6a3b      	ldr	r3, [r7, #32]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1e9      	bne.n	801500a <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8015036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801503a:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 801503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503e:	2b00      	cmp	r3, #0
 8015040:	d1df      	bne.n	8015002 <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	699b      	ldr	r3, [r3, #24]
 8015046:	697a      	ldr	r2, [r7, #20]
 8015048:	69f8      	ldr	r0, [r7, #28]
 801504a:	2114      	movs	r1, #20
 801504c:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801504e:	2300      	movs	r3, #0
 8015050:	e001      	b.n	8015056 <_ux_device_stack_clear_feature+0xb2>
        break;
 8015052:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8015054:	2300      	movs	r3, #0
}
 8015056:	0018      	movs	r0, r3
 8015058:	46bd      	mov	sp, r7
 801505a:	b00a      	add	sp, #40	; 0x28
 801505c:	bd80      	pop	{r7, pc}
 801505e:	46c0      	nop			; (mov r8, r8)
 8015060:	20010c9c 	.word	0x20010c9c

08015064 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801506a:	4b10      	ldr	r3, [pc, #64]	; (80150ac <_ux_device_stack_configuration_get+0x48>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	3320      	adds	r3, #32
 8015070:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	333c      	adds	r3, #60	; 0x3c
 8015076:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	3330      	adds	r3, #48	; 0x30
 801507c:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	22cc      	movs	r2, #204	; 0xcc
 8015082:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8015088:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801508a:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2203      	movs	r2, #3
 8015090:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2201      	movs	r2, #1
 8015096:	2101      	movs	r1, #1
 8015098:	0018      	movs	r0, r3
 801509a:	f001 fb25 	bl	80166e8 <_ux_device_stack_transfer_request>
 801509e:	0003      	movs	r3, r0
 80150a0:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 80150a2:	683b      	ldr	r3, [r7, #0]
}
 80150a4:	0018      	movs	r0, r3
 80150a6:	46bd      	mov	sp, r7
 80150a8:	b004      	add	sp, #16
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	20010c9c 	.word	0x20010c9c

080150b0 <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 80150b0:	b590      	push	{r4, r7, lr}
 80150b2:	b0ad      	sub	sp, #180	; 0xb4
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 80150b8:	2358      	movs	r3, #88	; 0x58
 80150ba:	18fb      	adds	r3, r7, r3
 80150bc:	0018      	movs	r0, r3
 80150be:	2320      	movs	r3, #32
 80150c0:	001a      	movs	r2, r3
 80150c2:	2100      	movs	r1, #0
 80150c4:	f004 ffec 	bl	801a0a0 <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 80150c8:	2300      	movs	r3, #0
 80150ca:	229c      	movs	r2, #156	; 0x9c
 80150cc:	18ba      	adds	r2, r7, r2
 80150ce:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 80150d0:	2300      	movs	r3, #0
 80150d2:	2294      	movs	r2, #148	; 0x94
 80150d4:	18ba      	adds	r2, r7, r2
 80150d6:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 80150d8:	2300      	movs	r3, #0
 80150da:	2290      	movs	r2, #144	; 0x90
 80150dc:	18ba      	adds	r2, r7, r2
 80150de:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80150e0:	4bd4      	ldr	r3, [pc, #848]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2288      	movs	r2, #136	; 0x88
 80150e6:	18ba      	adds	r2, r7, r2
 80150e8:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80150ea:	4bd2      	ldr	r3, [pc, #840]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	3320      	adds	r3, #32
 80150f0:	2284      	movs	r2, #132	; 0x84
 80150f2:	18b9      	adds	r1, r7, r2
 80150f4:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 80150f6:	2300      	movs	r3, #0
 80150f8:	2198      	movs	r1, #152	; 0x98
 80150fa:	1879      	adds	r1, r7, r1
 80150fc:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 80150fe:	18bb      	adds	r3, r7, r2
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	22cc      	movs	r2, #204	; 0xcc
 8015104:	589b      	ldr	r3, [r3, r2]
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	429a      	cmp	r2, r3
 801510a:	d101      	bne.n	8015110 <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 801510c:	2300      	movs	r3, #0
 801510e:	e202      	b.n	8015516 <_ux_device_stack_configuration_set+0x466>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8015110:	4bc8      	ldr	r3, [pc, #800]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	2394      	movs	r3, #148	; 0x94
 8015116:	005b      	lsls	r3, r3, #1
 8015118:	58d3      	ldr	r3, [r2, r3]
 801511a:	22ac      	movs	r2, #172	; 0xac
 801511c:	18ba      	adds	r2, r7, r2
 801511e:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015120:	4bc4      	ldr	r3, [pc, #784]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	2396      	movs	r3, #150	; 0x96
 8015126:	005b      	lsls	r3, r3, #1
 8015128:	58d3      	ldr	r3, [r2, r3]
 801512a:	22a8      	movs	r2, #168	; 0xa8
 801512c:	18ba      	adds	r2, r7, r2
 801512e:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8015130:	e02e      	b.n	8015190 <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8015132:	20ac      	movs	r0, #172	; 0xac
 8015134:	183b      	adds	r3, r7, r0
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	2280      	movs	r2, #128	; 0x80
 801513c:	18ba      	adds	r2, r7, r2
 801513e:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8015140:	217f      	movs	r1, #127	; 0x7f
 8015142:	187b      	adds	r3, r7, r1
 8015144:	183a      	adds	r2, r7, r0
 8015146:	6812      	ldr	r2, [r2, #0]
 8015148:	7852      	ldrb	r2, [r2, #1]
 801514a:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801514c:	187b      	adds	r3, r7, r1
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	2b02      	cmp	r3, #2
 8015152:	d10c      	bne.n	801516e <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8015154:	2458      	movs	r4, #88	; 0x58
 8015156:	193b      	adds	r3, r7, r4
 8015158:	49b7      	ldr	r1, [pc, #732]	; (8015438 <_ux_device_stack_configuration_set+0x388>)
 801515a:	183a      	adds	r2, r7, r0
 801515c:	6810      	ldr	r0, [r2, #0]
 801515e:	2208      	movs	r2, #8
 8015160:	f001 fc3c 	bl	80169dc <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8015164:	193b      	adds	r3, r7, r4
 8015166:	691b      	ldr	r3, [r3, #16]
 8015168:	687a      	ldr	r2, [r7, #4]
 801516a:	429a      	cmp	r2, r3
 801516c:	d016      	beq.n	801519c <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 801516e:	21a8      	movs	r1, #168	; 0xa8
 8015170:	187b      	adds	r3, r7, r1
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	2080      	movs	r0, #128	; 0x80
 8015176:	183b      	adds	r3, r7, r0
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	1ad3      	subs	r3, r2, r3
 801517c:	187a      	adds	r2, r7, r1
 801517e:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 8015180:	21ac      	movs	r1, #172	; 0xac
 8015182:	187b      	adds	r3, r7, r1
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	183b      	adds	r3, r7, r0
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	18d3      	adds	r3, r2, r3
 801518c:	187a      	adds	r2, r7, r1
 801518e:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 8015190:	23a8      	movs	r3, #168	; 0xa8
 8015192:	18fb      	adds	r3, r7, r3
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d1cb      	bne.n	8015132 <_ux_device_stack_configuration_set+0x82>
 801519a:	e000      	b.n	801519e <_ux_device_stack_configuration_set+0xee>
                break;
 801519c:	46c0      	nop			; (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 801519e:	23a8      	movs	r3, #168	; 0xa8
 80151a0:	18fb      	adds	r3, r7, r3
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d104      	bne.n	80151b2 <_ux_device_stack_configuration_set+0x102>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d001      	beq.n	80151b2 <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 80151ae:	23ff      	movs	r3, #255	; 0xff
 80151b0:	e1b1      	b.n	8015516 <_ux_device_stack_configuration_set+0x466>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 80151b2:	2184      	movs	r1, #132	; 0x84
 80151b4:	187b      	adds	r3, r7, r1
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	22cc      	movs	r2, #204	; 0xcc
 80151ba:	589b      	ldr	r3, [r3, r2]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d038      	beq.n	8015232 <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 80151c0:	187b      	adds	r3, r7, r1
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	22f0      	movs	r2, #240	; 0xf0
 80151c6:	589b      	ldr	r3, [r3, r2]
 80151c8:	22a4      	movs	r2, #164	; 0xa4
 80151ca:	18ba      	adds	r2, r7, r2
 80151cc:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 80151ce:	e02b      	b.n	8015228 <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80151d0:	2108      	movs	r1, #8
 80151d2:	187b      	adds	r3, r7, r1
 80151d4:	2203      	movs	r2, #3
 80151d6:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 80151d8:	187b      	adds	r3, r7, r1
 80151da:	20a4      	movs	r0, #164	; 0xa4
 80151dc:	183a      	adds	r2, r7, r0
 80151de:	6812      	ldr	r2, [r2, #0]
 80151e0:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 80151e2:	183b      	adds	r3, r7, r0
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	22a0      	movs	r2, #160	; 0xa0
 80151ea:	18b8      	adds	r0, r7, r2
 80151ec:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 80151ee:	187b      	adds	r3, r7, r1
 80151f0:	0010      	movs	r0, r2
 80151f2:	18ba      	adds	r2, r7, r2
 80151f4:	6812      	ldr	r2, [r2, #0]
 80151f6:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 80151f8:	0002      	movs	r2, r0
 80151fa:	18bb      	adds	r3, r7, r2
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d005      	beq.n	801520e <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8015202:	18bb      	adds	r3, r7, r2
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015208:	187a      	adds	r2, r7, r1
 801520a:	0010      	movs	r0, r2
 801520c:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801520e:	24a4      	movs	r4, #164	; 0xa4
 8015210:	193b      	adds	r3, r7, r4
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015216:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8015218:	193b      	adds	r3, r7, r4
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	0018      	movs	r0, r3
 801521e:	f000 fffd 	bl	801621c <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 8015222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015224:	193a      	adds	r2, r7, r4
 8015226:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 8015228:	23a4      	movs	r3, #164	; 0xa4
 801522a:	18fb      	adds	r3, r7, r3
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d1ce      	bne.n	80151d0 <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8015232:	2084      	movs	r0, #132	; 0x84
 8015234:	183b      	adds	r3, r7, r0
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	22cc      	movs	r2, #204	; 0xcc
 801523a:	2100      	movs	r1, #0
 801523c:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801523e:	183b      	adds	r3, r7, r0
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2201      	movs	r2, #1
 8015244:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8015246:	2288      	movs	r2, #136	; 0x88
 8015248:	18bb      	adds	r3, r7, r2
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	699b      	ldr	r3, [r3, #24]
 801524e:	18ba      	adds	r2, r7, r2
 8015250:	6810      	ldr	r0, [r2, #0]
 8015252:	2201      	movs	r2, #1
 8015254:	2113      	movs	r1, #19
 8015256:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d101      	bne.n	8015262 <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 801525e:	2300      	movs	r3, #0
 8015260:	e159      	b.n	8015516 <_ux_device_stack_configuration_set+0x466>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8015262:	2084      	movs	r0, #132	; 0x84
 8015264:	183b      	adds	r3, r7, r0
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	21cc      	movs	r1, #204	; 0xcc
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 801526e:	183b      	adds	r3, r7, r0
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 8015274:	4970      	ldr	r1, [pc, #448]	; (8015438 <_ux_device_stack_configuration_set+0x388>)
 8015276:	22ac      	movs	r2, #172	; 0xac
 8015278:	18ba      	adds	r2, r7, r2
 801527a:	6810      	ldr	r0, [r2, #0]
 801527c:	2208      	movs	r2, #8
 801527e:	f001 fbad 	bl	80169dc <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8015282:	2358      	movs	r3, #88	; 0x58
 8015284:	18fb      	adds	r3, r7, r3
 8015286:	699b      	ldr	r3, [r3, #24]
 8015288:	2240      	movs	r2, #64	; 0x40
 801528a:	4013      	ands	r3, r2
 801528c:	d001      	beq.n	8015292 <_ux_device_stack_configuration_set+0x1e2>
 801528e:	2202      	movs	r2, #2
 8015290:	e000      	b.n	8015294 <_ux_device_stack_configuration_set+0x1e4>
 8015292:	2201      	movs	r2, #1
 8015294:	4b67      	ldr	r3, [pc, #412]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 8015296:	6819      	ldr	r1, [r3, #0]
 8015298:	23d2      	movs	r3, #210	; 0xd2
 801529a:	005b      	lsls	r3, r3, #1
 801529c:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 801529e:	2058      	movs	r0, #88	; 0x58
 80152a0:	183b      	adds	r3, r7, r0
 80152a2:	699b      	ldr	r3, [r3, #24]
 80152a4:	0959      	lsrs	r1, r3, #5
 80152a6:	4b63      	ldr	r3, [pc, #396]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	2301      	movs	r3, #1
 80152ac:	4019      	ands	r1, r3
 80152ae:	23d4      	movs	r3, #212	; 0xd4
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 80152b4:	183b      	adds	r3, r7, r0
 80152b6:	689b      	ldr	r3, [r3, #8]
 80152b8:	22a8      	movs	r2, #168	; 0xa8
 80152ba:	18ba      	adds	r2, r7, r2
 80152bc:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 80152be:	e115      	b.n	80154ec <_ux_device_stack_configuration_set+0x43c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 80152c0:	21ac      	movs	r1, #172	; 0xac
 80152c2:	187b      	adds	r3, r7, r1
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	781b      	ldrb	r3, [r3, #0]
 80152c8:	2280      	movs	r2, #128	; 0x80
 80152ca:	18ba      	adds	r2, r7, r2
 80152cc:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 80152ce:	207f      	movs	r0, #127	; 0x7f
 80152d0:	183b      	adds	r3, r7, r0
 80152d2:	187a      	adds	r2, r7, r1
 80152d4:	6812      	ldr	r2, [r2, #0]
 80152d6:	7852      	ldrb	r2, [r2, #1]
 80152d8:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 80152da:	183b      	adds	r3, r7, r0
 80152dc:	781b      	ldrb	r3, [r3, #0]
 80152de:	2b0b      	cmp	r3, #11
 80152e0:	d111      	bne.n	8015306 <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 80152e2:	2301      	movs	r3, #1
 80152e4:	2298      	movs	r2, #152	; 0x98
 80152e6:	18ba      	adds	r2, r7, r2
 80152e8:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 80152ea:	187b      	adds	r3, r7, r1
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	3302      	adds	r3, #2
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	2294      	movs	r2, #148	; 0x94
 80152f4:	18ba      	adds	r2, r7, r2
 80152f6:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 80152f8:	187b      	adds	r3, r7, r1
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	3303      	adds	r3, #3
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	2290      	movs	r2, #144	; 0x90
 8015302:	18ba      	adds	r2, r7, r2
 8015304:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015306:	237f      	movs	r3, #127	; 0x7f
 8015308:	18fb      	adds	r3, r7, r3
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	2b04      	cmp	r3, #4
 801530e:	d000      	beq.n	8015312 <_ux_device_stack_configuration_set+0x262>
 8015310:	e0db      	b.n	80154ca <_ux_device_stack_configuration_set+0x41a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8015312:	2434      	movs	r4, #52	; 0x34
 8015314:	193b      	adds	r3, r7, r4
 8015316:	4949      	ldr	r1, [pc, #292]	; (801543c <_ux_device_stack_configuration_set+0x38c>)
 8015318:	22ac      	movs	r2, #172	; 0xac
 801531a:	18ba      	adds	r2, r7, r2
 801531c:	6810      	ldr	r0, [r2, #0]
 801531e:	2209      	movs	r2, #9
 8015320:	f001 fb5c 	bl	80169dc <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 8015324:	0022      	movs	r2, r4
 8015326:	18bb      	adds	r3, r7, r2
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d000      	beq.n	8015330 <_ux_device_stack_configuration_set+0x280>
 801532e:	e0cc      	b.n	80154ca <_ux_device_stack_configuration_set+0x41a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 8015330:	2398      	movs	r3, #152	; 0x98
 8015332:	18fb      	adds	r3, r7, r3
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b01      	cmp	r3, #1
 8015338:	d16f      	bne.n	801541a <_ux_device_stack_configuration_set+0x36a>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 801533a:	18bb      	adds	r3, r7, r2
 801533c:	689b      	ldr	r3, [r3, #8]
 801533e:	2294      	movs	r2, #148	; 0x94
 8015340:	18ba      	adds	r2, r7, r2
 8015342:	6812      	ldr	r2, [r2, #0]
 8015344:	429a      	cmp	r2, r3
 8015346:	d14e      	bne.n	80153e6 <_ux_device_stack_configuration_set+0x336>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015348:	4b3a      	ldr	r3, [pc, #232]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	23ae      	movs	r3, #174	; 0xae
 801534e:	005b      	lsls	r3, r3, #1
 8015350:	58d3      	ldr	r3, [r2, r3]
 8015352:	22a0      	movs	r2, #160	; 0xa0
 8015354:	18ba      	adds	r2, r7, r2
 8015356:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015358:	2300      	movs	r3, #0
 801535a:	228c      	movs	r2, #140	; 0x8c
 801535c:	18ba      	adds	r2, r7, r2
 801535e:	6013      	str	r3, [r2, #0]
 8015360:	e036      	b.n	80153d0 <_ux_device_stack_configuration_set+0x320>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8015362:	21a0      	movs	r1, #160	; 0xa0
 8015364:	187b      	adds	r3, r7, r1
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801536a:	2b01      	cmp	r3, #1
 801536c:	d123      	bne.n	80153b6 <_ux_device_stack_configuration_set+0x306>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801536e:	2434      	movs	r4, #52	; 0x34
 8015370:	193b      	adds	r3, r7, r4
 8015372:	689a      	ldr	r2, [r3, #8]
 8015374:	0008      	movs	r0, r1
 8015376:	187b      	adds	r3, r7, r1
 8015378:	6819      	ldr	r1, [r3, #0]
 801537a:	2384      	movs	r3, #132	; 0x84
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	58cb      	ldr	r3, [r1, r3]
 8015380:	429a      	cmp	r2, r3
 8015382:	d118      	bne.n	80153b6 <_ux_device_stack_configuration_set+0x306>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8015384:	0001      	movs	r1, r0
 8015386:	187b      	adds	r3, r7, r1
 8015388:	681a      	ldr	r2, [r3, #0]
 801538a:	2386      	movs	r3, #134	; 0x86
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8015390:	687a      	ldr	r2, [r7, #4]
 8015392:	429a      	cmp	r2, r3
 8015394:	d10f      	bne.n	80153b6 <_ux_device_stack_configuration_set+0x306>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8015396:	4b27      	ldr	r3, [pc, #156]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 8015398:	681a      	ldr	r2, [r3, #0]
 801539a:	193b      	adds	r3, r7, r4
 801539c:	689b      	ldr	r3, [r3, #8]
 801539e:	3358      	adds	r3, #88	; 0x58
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	0008      	movs	r0, r1
 80153a4:	1879      	adds	r1, r7, r1
 80153a6:	6809      	ldr	r1, [r1, #0]
 80153a8:	5099      	str	r1, [r3, r2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 80153aa:	183b      	adds	r3, r7, r0
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	229c      	movs	r2, #156	; 0x9c
 80153b0:	18ba      	adds	r2, r7, r2
 80153b2:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 80153b4:	e022      	b.n	80153fc <_ux_device_stack_configuration_set+0x34c>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 80153b6:	22a0      	movs	r2, #160	; 0xa0
 80153b8:	18bb      	adds	r3, r7, r2
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	3315      	adds	r3, #21
 80153be:	33ff      	adds	r3, #255	; 0xff
 80153c0:	18ba      	adds	r2, r7, r2
 80153c2:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 80153c4:	228c      	movs	r2, #140	; 0x8c
 80153c6:	18bb      	adds	r3, r7, r2
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	3301      	adds	r3, #1
 80153cc:	18ba      	adds	r2, r7, r2
 80153ce:	6013      	str	r3, [r2, #0]
 80153d0:	4b18      	ldr	r3, [pc, #96]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	23ac      	movs	r3, #172	; 0xac
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	58d3      	ldr	r3, [r2, r3]
 80153da:	228c      	movs	r2, #140	; 0x8c
 80153dc:	18ba      	adds	r2, r7, r2
 80153de:	6812      	ldr	r2, [r2, #0]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d3be      	bcc.n	8015362 <_ux_device_stack_configuration_set+0x2b2>
 80153e4:	e00a      	b.n	80153fc <_ux_device_stack_configuration_set+0x34c>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 80153e6:	4b13      	ldr	r3, [pc, #76]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 80153e8:	681a      	ldr	r2, [r3, #0]
 80153ea:	2334      	movs	r3, #52	; 0x34
 80153ec:	18fb      	adds	r3, r7, r3
 80153ee:	689b      	ldr	r3, [r3, #8]
 80153f0:	3358      	adds	r3, #88	; 0x58
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	219c      	movs	r1, #156	; 0x9c
 80153f6:	1879      	adds	r1, r7, r1
 80153f8:	6809      	ldr	r1, [r1, #0]
 80153fa:	5099      	str	r1, [r3, r2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 80153fc:	2290      	movs	r2, #144	; 0x90
 80153fe:	18bb      	adds	r3, r7, r2
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	3b01      	subs	r3, #1
 8015404:	18b9      	adds	r1, r7, r2
 8015406:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 8015408:	18bb      	adds	r3, r7, r2
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d152      	bne.n	80154b6 <_ux_device_stack_configuration_set+0x406>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8015410:	2300      	movs	r3, #0
 8015412:	2298      	movs	r2, #152	; 0x98
 8015414:	18ba      	adds	r2, r7, r2
 8015416:	6013      	str	r3, [r2, #0]
 8015418:	e04d      	b.n	80154b6 <_ux_device_stack_configuration_set+0x406>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801541a:	4b06      	ldr	r3, [pc, #24]	; (8015434 <_ux_device_stack_configuration_set+0x384>)
 801541c:	681a      	ldr	r2, [r3, #0]
 801541e:	23ae      	movs	r3, #174	; 0xae
 8015420:	005b      	lsls	r3, r3, #1
 8015422:	58d3      	ldr	r3, [r2, r3]
 8015424:	22a0      	movs	r2, #160	; 0xa0
 8015426:	18ba      	adds	r2, r7, r2
 8015428:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801542a:	2300      	movs	r3, #0
 801542c:	228c      	movs	r2, #140	; 0x8c
 801542e:	18ba      	adds	r2, r7, r2
 8015430:	6013      	str	r3, [r2, #0]
 8015432:	e036      	b.n	80154a2 <_ux_device_stack_configuration_set+0x3f2>
 8015434:	20010c9c 	.word	0x20010c9c
 8015438:	20000040 	.word	0x20000040
 801543c:	20000048 	.word	0x20000048
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8015440:	21a0      	movs	r1, #160	; 0xa0
 8015442:	187b      	adds	r3, r7, r1
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015448:	2b01      	cmp	r3, #1
 801544a:	d11d      	bne.n	8015488 <_ux_device_stack_configuration_set+0x3d8>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801544c:	2434      	movs	r4, #52	; 0x34
 801544e:	193b      	adds	r3, r7, r4
 8015450:	689a      	ldr	r2, [r3, #8]
 8015452:	0008      	movs	r0, r1
 8015454:	187b      	adds	r3, r7, r1
 8015456:	6819      	ldr	r1, [r3, #0]
 8015458:	2384      	movs	r3, #132	; 0x84
 801545a:	005b      	lsls	r3, r3, #1
 801545c:	58cb      	ldr	r3, [r1, r3]
 801545e:	429a      	cmp	r2, r3
 8015460:	d112      	bne.n	8015488 <_ux_device_stack_configuration_set+0x3d8>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8015462:	0001      	movs	r1, r0
 8015464:	187b      	adds	r3, r7, r1
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	2386      	movs	r3, #134	; 0x86
 801546a:	005b      	lsls	r3, r3, #1
 801546c:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	429a      	cmp	r2, r3
 8015472:	d109      	bne.n	8015488 <_ux_device_stack_configuration_set+0x3d8>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8015474:	4b2a      	ldr	r3, [pc, #168]	; (8015520 <_ux_device_stack_configuration_set+0x470>)
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	193b      	adds	r3, r7, r4
 801547a:	689b      	ldr	r3, [r3, #8]
 801547c:	3358      	adds	r3, #88	; 0x58
 801547e:	009b      	lsls	r3, r3, #2
 8015480:	1879      	adds	r1, r7, r1
 8015482:	6809      	ldr	r1, [r1, #0]
 8015484:	5099      	str	r1, [r3, r2]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 8015486:	e016      	b.n	80154b6 <_ux_device_stack_configuration_set+0x406>
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 8015488:	22a0      	movs	r2, #160	; 0xa0
 801548a:	18bb      	adds	r3, r7, r2
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	3315      	adds	r3, #21
 8015490:	33ff      	adds	r3, #255	; 0xff
 8015492:	18ba      	adds	r2, r7, r2
 8015494:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015496:	228c      	movs	r2, #140	; 0x8c
 8015498:	18bb      	adds	r3, r7, r2
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	3301      	adds	r3, #1
 801549e:	18ba      	adds	r2, r7, r2
 80154a0:	6013      	str	r3, [r2, #0]
 80154a2:	4b1f      	ldr	r3, [pc, #124]	; (8015520 <_ux_device_stack_configuration_set+0x470>)
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	23ac      	movs	r3, #172	; 0xac
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	58d3      	ldr	r3, [r2, r3]
 80154ac:	228c      	movs	r2, #140	; 0x8c
 80154ae:	18ba      	adds	r2, r7, r2
 80154b0:	6812      	ldr	r2, [r2, #0]
 80154b2:	429a      	cmp	r2, r3
 80154b4:	d3c4      	bcc.n	8015440 <_ux_device_stack_configuration_set+0x390>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 80154b6:	23a8      	movs	r3, #168	; 0xa8
 80154b8:	18fb      	adds	r3, r7, r3
 80154ba:	6819      	ldr	r1, [r3, #0]
 80154bc:	23ac      	movs	r3, #172	; 0xac
 80154be:	18fb      	adds	r3, r7, r3
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	2200      	movs	r2, #0
 80154c4:	0018      	movs	r0, r3
 80154c6:	f000 fef1 	bl	80162ac <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80154ca:	21a8      	movs	r1, #168	; 0xa8
 80154cc:	187b      	adds	r3, r7, r1
 80154ce:	681a      	ldr	r2, [r3, #0]
 80154d0:	2080      	movs	r0, #128	; 0x80
 80154d2:	183b      	adds	r3, r7, r0
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	1ad3      	subs	r3, r2, r3
 80154d8:	187a      	adds	r2, r7, r1
 80154da:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80154dc:	21ac      	movs	r1, #172	; 0xac
 80154de:	187b      	adds	r3, r7, r1
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	183b      	adds	r3, r7, r0
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	18d3      	adds	r3, r2, r3
 80154e8:	187a      	adds	r2, r7, r1
 80154ea:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 80154ec:	23a8      	movs	r3, #168	; 0xa8
 80154ee:	18fb      	adds	r3, r7, r3
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d000      	beq.n	80154f8 <_ux_device_stack_configuration_set+0x448>
 80154f6:	e6e3      	b.n	80152c0 <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 80154f8:	2384      	movs	r3, #132	; 0x84
 80154fa:	18fb      	adds	r3, r7, r3
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2203      	movs	r2, #3
 8015500:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8015502:	2288      	movs	r2, #136	; 0x88
 8015504:	18bb      	adds	r3, r7, r2
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	699b      	ldr	r3, [r3, #24]
 801550a:	18ba      	adds	r2, r7, r2
 801550c:	6810      	ldr	r0, [r2, #0]
 801550e:	2203      	movs	r2, #3
 8015510:	2113      	movs	r1, #19
 8015512:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 8015514:	2300      	movs	r3, #0
}
 8015516:	0018      	movs	r0, r3
 8015518:	46bd      	mov	sp, r7
 801551a:	b02d      	add	sp, #180	; 0xb4
 801551c:	bd90      	pop	{r4, r7, pc}
 801551e:	46c0      	nop			; (mov r8, r8)
 8015520:	20010c9c 	.word	0x20010c9c

08015524 <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8015524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015526:	b09d      	sub	sp, #116	; 0x74
 8015528:	af02      	add	r7, sp, #8
 801552a:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 801552c:	23ff      	movs	r3, #255	; 0xff
 801552e:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015530:	4ba1      	ldr	r3, [pc, #644]	; (80157b8 <_ux_device_stack_control_request_process+0x294>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015536:	4ba0      	ldr	r3, [pc, #640]	; (80157b8 <_ux_device_stack_control_request_process+0x294>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	3320      	adds	r3, #32
 801553c:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015542:	2b00      	cmp	r3, #0
 8015544:	d000      	beq.n	8015548 <_ux_device_stack_control_request_process+0x24>
 8015546:	e132      	b.n	80157ae <_ux_device_stack_control_request_process+0x28a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2254      	movs	r2, #84	; 0x54
 801554c:	5c9b      	ldrb	r3, [r3, r2]
 801554e:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2255      	movs	r2, #85	; 0x55
 8015554:	5c9b      	ldrb	r3, [r3, r2]
 8015556:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	3354      	adds	r3, #84	; 0x54
 801555c:	3302      	adds	r3, #2
 801555e:	0018      	movs	r0, r3
 8015560:	f001 fe05 	bl	801716e <_ux_utility_short_get>
 8015564:	0003      	movs	r3, r0
 8015566:	64fb      	str	r3, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	3354      	adds	r3, #84	; 0x54
 801556c:	3304      	adds	r3, #4
 801556e:	0018      	movs	r0, r3
 8015570:	f001 fdfd 	bl	801716e <_ux_utility_short_get>
 8015574:	0003      	movs	r3, r0
 8015576:	64bb      	str	r3, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	3354      	adds	r3, #84	; 0x54
 801557c:	3306      	adds	r3, #6
 801557e:	0018      	movs	r0, r3
 8015580:	f001 fdf5 	bl	801716e <_ux_utility_short_get>
 8015584:	0003      	movs	r3, r0
 8015586:	647b      	str	r3, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8015588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801558a:	2b06      	cmp	r3, #6
 801558c:	d002      	beq.n	8015594 <_ux_device_stack_control_request_process+0x70>
 801558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015590:	2b07      	cmp	r3, #7
 8015592:	d10c      	bne.n	80155ae <_ux_device_stack_control_request_process+0x8a>
 8015594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015596:	0a1b      	lsrs	r3, r3, #8
 8015598:	2260      	movs	r2, #96	; 0x60
 801559a:	4013      	ands	r3, r2
 801559c:	d007      	beq.n	80155ae <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 801559e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80155a0:	2260      	movs	r2, #96	; 0x60
 80155a2:	4393      	bics	r3, r2
 80155a4:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 80155a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80155a8:	2220      	movs	r2, #32
 80155aa:	4313      	orrs	r3, r2
 80155ac:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 80155ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80155b0:	2260      	movs	r2, #96	; 0x60
 80155b2:	4013      	ands	r3, r2
 80155b4:	2b40      	cmp	r3, #64	; 0x40
 80155b6:	d139      	bne.n	801562c <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 80155b8:	4b7f      	ldr	r3, [pc, #508]	; (80157b8 <_ux_device_stack_control_request_process+0x294>)
 80155ba:	681a      	ldr	r2, [r3, #0]
 80155bc:	23e4      	movs	r3, #228	; 0xe4
 80155be:	005b      	lsls	r3, r3, #1
 80155c0:	58d3      	ldr	r3, [r2, r3]
 80155c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d131      	bne.n	801562c <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 80155c8:	2380      	movs	r3, #128	; 0x80
 80155ca:	005b      	lsls	r3, r3, #1
 80155cc:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 80155ce:	4b7a      	ldr	r3, [pc, #488]	; (80157b8 <_ux_device_stack_control_request_process+0x294>)
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	23e6      	movs	r3, #230	; 0xe6
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	58d4      	ldr	r4, [r2, r3]
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 80155de:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80155e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80155e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80155e4:	220c      	movs	r2, #12
 80155e6:	18ba      	adds	r2, r7, r2
 80155e8:	9201      	str	r2, [sp, #4]
 80155ea:	9300      	str	r3, [sp, #0]
 80155ec:	0033      	movs	r3, r6
 80155ee:	002a      	movs	r2, r5
 80155f0:	47a0      	blx	r4
 80155f2:	0003      	movs	r3, r0
 80155f4:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 80155f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d110      	bne.n	801561e <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 80155fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155fe:	333c      	adds	r3, #60	; 0x3c
 8015600:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015604:	3330      	adds	r3, #48	; 0x30
 8015606:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2203      	movs	r2, #3
 801560c:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 801560e:	68f9      	ldr	r1, [r7, #12]
 8015610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	0018      	movs	r0, r3
 8015616:	f001 f867 	bl	80166e8 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 801561a:	2300      	movs	r3, #0
 801561c:	e0c8      	b.n	80157b0 <_ux_device_stack_control_request_process+0x28c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801561e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015620:	333c      	adds	r3, #60	; 0x3c
 8015622:	0018      	movs	r0, r3
 8015624:	f000 fb76 	bl	8015d14 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8015628:	2300      	movs	r3, #0
 801562a:	e0c1      	b.n	80157b0 <_ux_device_stack_control_request_process+0x28c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 801562c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801562e:	2260      	movs	r2, #96	; 0x60
 8015630:	4013      	ands	r3, r2
 8015632:	2b20      	cmp	r3, #32
 8015634:	d004      	beq.n	8015640 <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8015636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015638:	2260      	movs	r2, #96	; 0x60
 801563a:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 801563c:	2b40      	cmp	r3, #64	; 0x40
 801563e:	d150      	bne.n	80156e2 <_ux_device_stack_control_request_process+0x1be>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8015640:	2310      	movs	r3, #16
 8015642:	18fb      	adds	r3, r7, r3
 8015644:	2204      	movs	r2, #4
 8015646:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8015648:	2300      	movs	r3, #0
 801564a:	663b      	str	r3, [r7, #96]	; 0x60
 801564c:	e03a      	b.n	80156c4 <_ux_device_stack_control_request_process+0x1a0>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 801564e:	4b5a      	ldr	r3, [pc, #360]	; (80157b8 <_ux_device_stack_control_request_process+0x294>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015654:	3258      	adds	r2, #88	; 0x58
 8015656:	0092      	lsls	r2, r2, #2
 8015658:	58d3      	ldr	r3, [r2, r3]
 801565a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 801565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801565e:	2b00      	cmp	r3, #0
 8015660:	d02a      	beq.n	80156b8 <_ux_device_stack_control_request_process+0x194>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8015662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015664:	2203      	movs	r2, #3
 8015666:	4013      	ands	r3, r2
 8015668:	2b01      	cmp	r3, #1
 801566a:	d116      	bne.n	801569a <_ux_device_stack_control_request_process+0x176>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 801566c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801566e:	22ff      	movs	r2, #255	; 0xff
 8015670:	4013      	ands	r3, r2
 8015672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015674:	429a      	cmp	r2, r3
 8015676:	d121      	bne.n	80156bc <_ux_device_stack_control_request_process+0x198>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8015678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801567a:	2388      	movs	r3, #136	; 0x88
 801567c:	005b      	lsls	r3, r3, #1
 801567e:	58d3      	ldr	r3, [r2, r3]
 8015680:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 8015682:	2b07      	cmp	r3, #7
 8015684:	d109      	bne.n	801569a <_ux_device_stack_control_request_process+0x176>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8015686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015688:	2b00      	cmp	r3, #0
 801568a:	d106      	bne.n	801569a <_ux_device_stack_control_request_process+0x176>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2259      	movs	r2, #89	; 0x59
 8015690:	5c9b      	ldrb	r3, [r3, r2]
 8015692:	001a      	movs	r2, r3
                         (request == 0x00) &&
 8015694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015696:	4293      	cmp	r3, r2
 8015698:	d110      	bne.n	80156bc <_ux_device_stack_control_request_process+0x198>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 801569a:	2110      	movs	r1, #16
 801569c:	187b      	adds	r3, r7, r1
 801569e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156a0:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 80156a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156a6:	187a      	adds	r2, r7, r1
 80156a8:	0010      	movs	r0, r2
 80156aa:	4798      	blx	r3
 80156ac:	0003      	movs	r3, r0
 80156ae:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 80156b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d00a      	beq.n	80156cc <_ux_device_stack_control_request_process+0x1a8>
 80156b6:	e002      	b.n	80156be <_ux_device_stack_control_request_process+0x19a>
                    continue;
 80156b8:	46c0      	nop			; (mov r8, r8)
 80156ba:	e000      	b.n	80156be <_ux_device_stack_control_request_process+0x19a>
                        continue;
 80156bc:	46c0      	nop			; (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 80156be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156c0:	3301      	adds	r3, #1
 80156c2:	663b      	str	r3, [r7, #96]	; 0x60
 80156c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156c6:	2b0f      	cmp	r3, #15
 80156c8:	d9c1      	bls.n	801564e <_ux_device_stack_control_request_process+0x12a>
 80156ca:	e000      	b.n	80156ce <_ux_device_stack_control_request_process+0x1aa>

                    /* We are done, break the loop!  */
                    break;
 80156cc:	46c0      	nop			; (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 80156ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d004      	beq.n	80156de <_ux_device_stack_control_request_process+0x1ba>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80156d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156d6:	333c      	adds	r3, #60	; 0x3c
 80156d8:	0018      	movs	r0, r3
 80156da:	f000 fb1b 	bl	8015d14 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 80156de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156e0:	e066      	b.n	80157b0 <_ux_device_stack_control_request_process+0x28c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 80156e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156e4:	2b0c      	cmp	r3, #12
 80156e6:	d857      	bhi.n	8015798 <_ux_device_stack_control_request_process+0x274>
 80156e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156ea:	009a      	lsls	r2, r3, #2
 80156ec:	4b33      	ldr	r3, [pc, #204]	; (80157bc <_ux_device_stack_control_request_process+0x298>)
 80156ee:	18d3      	adds	r3, r2, r3
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 80156f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80156f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80156f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156fa:	0018      	movs	r0, r3
 80156fc:	f000 fb40 	bl	8015d80 <_ux_device_stack_get_status>
 8015700:	0003      	movs	r3, r0
 8015702:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015704:	e04b      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8015706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015708:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801570a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801570c:	0018      	movs	r0, r3
 801570e:	f7ff fc49 	bl	8014fa4 <_ux_device_stack_clear_feature>
 8015712:	0003      	movs	r3, r0
 8015714:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015716:	e042      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8015718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801571a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801571c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801571e:	0018      	movs	r0, r3
 8015720:	f000 ff3a 	bl	8016598 <_ux_device_stack_set_feature>
 8015724:	0003      	movs	r3, r0
 8015726:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015728:	e039      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 801572a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801572c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801572e:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8015730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015732:	699b      	ldr	r3, [r3, #24]
 8015734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015736:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015738:	2111      	movs	r1, #17
 801573a:	4798      	blx	r3
 801573c:	0003      	movs	r3, r0
 801573e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015740:	e02d      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8015742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015744:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015748:	0018      	movs	r0, r3
 801574a:	f000 f839 	bl	80157c0 <_ux_device_stack_descriptor_send>
 801574e:	0003      	movs	r3, r0
 8015750:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015752:	e024      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8015754:	2354      	movs	r3, #84	; 0x54
 8015756:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015758:	e021      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 801575a:	f7ff fc83 	bl	8015064 <_ux_device_stack_configuration_get>
 801575e:	0003      	movs	r3, r0
 8015760:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015762:	e01c      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8015764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015766:	0018      	movs	r0, r3
 8015768:	f7ff fca2 	bl	80150b0 <_ux_device_stack_configuration_set>
 801576c:	0003      	movs	r3, r0
 801576e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015770:	e015      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8015772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015774:	0018      	movs	r0, r3
 8015776:	f7ff f8df 	bl	8014938 <_ux_device_stack_alternate_setting_get>
 801577a:	0003      	movs	r3, r0
 801577c:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 801577e:	e00e      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8015780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015784:	0011      	movs	r1, r2
 8015786:	0018      	movs	r0, r3
 8015788:	f7ff f916 	bl	80149b8 <_ux_device_stack_alternate_setting_set>
 801578c:	0003      	movs	r3, r0
 801578e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015790:	e005      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8015792:	2300      	movs	r3, #0
 8015794:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8015796:	e002      	b.n	801579e <_ux_device_stack_control_request_process+0x27a>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8015798:	2354      	movs	r3, #84	; 0x54
 801579a:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 801579c:	46c0      	nop			; (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 801579e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d004      	beq.n	80157ae <_ux_device_stack_control_request_process+0x28a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80157a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157a6:	333c      	adds	r3, #60	; 0x3c
 80157a8:	0018      	movs	r0, r3
 80157aa:	f000 fab3 	bl	8015d14 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 80157ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80157b0:	0018      	movs	r0, r3
 80157b2:	46bd      	mov	sp, r7
 80157b4:	b01b      	add	sp, #108	; 0x6c
 80157b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157b8:	20010c9c 	.word	0x20010c9c
 80157bc:	0801a3b4 	.word	0x0801a3b4

080157c0 <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 80157c0:	b590      	push	{r4, r7, lr}
 80157c2:	b0a3      	sub	sp, #140	; 0x8c
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 80157cc:	23ff      	movs	r3, #255	; 0xff
 80157ce:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80157d0:	4bde      	ldr	r3, [pc, #888]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80157d6:	4bdd      	ldr	r3, [pc, #884]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	3320      	adds	r3, #32
 80157dc:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80157de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157e0:	333c      	adds	r3, #60	; 0x3c
 80157e2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80157e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157e6:	3330      	adds	r3, #48	; 0x30
 80157e8:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80157ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157ec:	2203      	movs	r2, #3
 80157ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	22ff      	movs	r2, #255	; 0xff
 80157f4:	4013      	ands	r3, r2
 80157f6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 80157f8:	2300      	movs	r3, #0
 80157fa:	2284      	movs	r2, #132	; 0x84
 80157fc:	18ba      	adds	r2, r7, r2
 80157fe:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	0a1b      	lsrs	r3, r3, #8
 8015804:	b2db      	uxtb	r3, r3
 8015806:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	2b0f      	cmp	r3, #15
 8015810:	d900      	bls.n	8015814 <_ux_device_stack_descriptor_send+0x54>
 8015812:	e20c      	b.n	8015c2e <_ux_device_stack_descriptor_send+0x46e>
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	009a      	lsls	r2, r3, #2
 8015818:	4bcd      	ldr	r3, [pc, #820]	; (8015b50 <_ux_device_stack_descriptor_send+0x390>)
 801581a:	18d3      	adds	r3, r2, r3
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2b12      	cmp	r3, #18
 8015824:	d901      	bls.n	801582a <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 8015826:	2312      	movs	r3, #18
 8015828:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	2b06      	cmp	r3, #6
 801582e:	d104      	bne.n	801583a <_ux_device_stack_descriptor_send+0x7a>
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2b0a      	cmp	r3, #10
 8015834:	d901      	bls.n	801583a <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 8015836:	230a      	movs	r3, #10
 8015838:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	2b09      	cmp	r3, #9
 801583e:	d104      	bne.n	801584a <_ux_device_stack_descriptor_send+0x8a>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2b05      	cmp	r3, #5
 8015844:	d901      	bls.n	801584a <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8015846:	2305      	movs	r3, #5
 8015848:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801584a:	4bc0      	ldr	r3, [pc, #768]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	2394      	movs	r3, #148	; 0x94
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	58d3      	ldr	r3, [r2, r3]
 8015854:	2180      	movs	r1, #128	; 0x80
 8015856:	187a      	adds	r2, r7, r1
 8015858:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801585a:	4bbc      	ldr	r3, [pc, #752]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 801585c:	681a      	ldr	r2, [r3, #0]
 801585e:	2396      	movs	r3, #150	; 0x96
 8015860:	005b      	lsls	r3, r3, #1
 8015862:	58d3      	ldr	r3, [r2, r3]
 8015864:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 8015866:	187b      	adds	r3, r7, r1
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801586c:	18d3      	adds	r3, r2, r3
 801586e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8015870:	e029      	b.n	80158c6 <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8015872:	2180      	movs	r1, #128	; 0x80
 8015874:	187b      	adds	r3, r7, r1
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 801587c:	187b      	adds	r3, r7, r1
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	3301      	adds	r3, #1
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	001a      	movs	r2, r3
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	4293      	cmp	r3, r2
 801588a:	d111      	bne.n	80158b0 <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801588e:	68db      	ldr	r3, [r3, #12]
 8015890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015892:	1879      	adds	r1, r7, r1
 8015894:	6809      	ldr	r1, [r1, #0]
 8015896:	0018      	movs	r0, r3
 8015898:	f001 fa9c 	bl	8016dd4 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80158a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158a2:	0018      	movs	r0, r3
 80158a4:	f000 ff20 	bl	80166e8 <_ux_device_stack_transfer_request>
 80158a8:	0003      	movs	r3, r0
 80158aa:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 80158ac:	46c0      	nop			; (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 80158ae:	e1c9      	b.n	8015c44 <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 80158b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80158b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158b4:	1ad3      	subs	r3, r2, r3
 80158b6:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 80158b8:	2180      	movs	r1, #128	; 0x80
 80158ba:	187b      	adds	r3, r7, r1
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158c0:	18d3      	adds	r3, r2, r3
 80158c2:	187a      	adds	r2, r7, r1
 80158c4:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 80158c6:	2380      	movs	r3, #128	; 0x80
 80158c8:	18fb      	adds	r3, r7, r3
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d3cf      	bcc.n	8015872 <_ux_device_stack_descriptor_send+0xb2>
        break;
 80158d2:	e1b7      	b.n	8015c44 <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	2b07      	cmp	r3, #7
 80158d8:	d113      	bne.n	8015902 <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80158da:	4b9c      	ldr	r3, [pc, #624]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	2398      	movs	r3, #152	; 0x98
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	58d3      	ldr	r3, [r2, r3]
 80158e4:	2180      	movs	r1, #128	; 0x80
 80158e6:	187a      	adds	r2, r7, r1
 80158e8:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80158ea:	4b98      	ldr	r3, [pc, #608]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	239a      	movs	r3, #154	; 0x9a
 80158f0:	005b      	lsls	r3, r3, #1
 80158f2:	58d3      	ldr	r3, [r2, r3]
 80158f4:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 80158f6:	187b      	adds	r3, r7, r1
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80158fc:	18d3      	adds	r3, r2, r3
 80158fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015900:	e05b      	b.n	80159ba <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015902:	4b92      	ldr	r3, [pc, #584]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	2394      	movs	r3, #148	; 0x94
 8015908:	005b      	lsls	r3, r3, #1
 801590a:	58d3      	ldr	r3, [r2, r3]
 801590c:	2180      	movs	r1, #128	; 0x80
 801590e:	187a      	adds	r2, r7, r1
 8015910:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015912:	4b8e      	ldr	r3, [pc, #568]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015914:	681a      	ldr	r2, [r3, #0]
 8015916:	2396      	movs	r3, #150	; 0x96
 8015918:	005b      	lsls	r3, r3, #1
 801591a:	58d3      	ldr	r3, [r2, r3]
 801591c:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 801591e:	187b      	adds	r3, r7, r1
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015924:	18d3      	adds	r3, r2, r3
 8015926:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 8015928:	e047      	b.n	80159ba <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 801592a:	2280      	movs	r2, #128	; 0x80
 801592c:	18bb      	adds	r3, r7, r2
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2b0f      	cmp	r3, #15
 8015938:	d113      	bne.n	8015962 <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 801593a:	18bb      	adds	r3, r7, r2
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	3301      	adds	r3, #1
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	2b0f      	cmp	r3, #15
 8015944:	d12e      	bne.n	80159a4 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 8015946:	2414      	movs	r4, #20
 8015948:	193b      	adds	r3, r7, r4
 801594a:	4982      	ldr	r1, [pc, #520]	; (8015b54 <_ux_device_stack_descriptor_send+0x394>)
 801594c:	18ba      	adds	r2, r7, r2
 801594e:	6810      	ldr	r0, [r2, #0]
 8015950:	2204      	movs	r2, #4
 8015952:	f001 f843 	bl	80169dc <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8015956:	193b      	adds	r3, r7, r4
 8015958:	689b      	ldr	r3, [r3, #8]
 801595a:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 801595c:	2300      	movs	r3, #0
 801595e:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 8015960:	e031      	b.n	80159c6 <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8015962:	2080      	movs	r0, #128	; 0x80
 8015964:	183b      	adds	r3, r7, r0
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3301      	adds	r3, #1
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b02      	cmp	r3, #2
 801596e:	d119      	bne.n	80159a4 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8015970:	2384      	movs	r3, #132	; 0x84
 8015972:	18fb      	adds	r3, r7, r3
 8015974:	681a      	ldr	r2, [r3, #0]
 8015976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015978:	429a      	cmp	r2, r3
 801597a:	d10d      	bne.n	8015998 <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 801597c:	2424      	movs	r4, #36	; 0x24
 801597e:	193b      	adds	r3, r7, r4
 8015980:	4975      	ldr	r1, [pc, #468]	; (8015b58 <_ux_device_stack_descriptor_send+0x398>)
 8015982:	183a      	adds	r2, r7, r0
 8015984:	6810      	ldr	r0, [r2, #0]
 8015986:	2208      	movs	r2, #8
 8015988:	f001 f828 	bl	80169dc <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 801598c:	193b      	adds	r3, r7, r4
 801598e:	689b      	ldr	r3, [r3, #8]
 8015990:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8015992:	2300      	movs	r3, #0
 8015994:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8015996:	e016      	b.n	80159c6 <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 8015998:	2284      	movs	r2, #132	; 0x84
 801599a:	18bb      	adds	r3, r7, r2
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	3301      	adds	r3, #1
 80159a0:	18ba      	adds	r2, r7, r2
 80159a2:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 80159a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80159a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159a8:	1ad3      	subs	r3, r2, r3
 80159aa:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 80159ac:	2180      	movs	r1, #128	; 0x80
 80159ae:	187b      	adds	r3, r7, r1
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159b4:	18d3      	adds	r3, r2, r3
 80159b6:	187a      	adds	r2, r7, r1
 80159b8:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 80159ba:	2380      	movs	r3, #128	; 0x80
 80159bc:	18fb      	adds	r3, r7, r3
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d3b1      	bcc.n	801592a <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 80159c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d000      	beq.n	80159ce <_ux_device_stack_descriptor_send+0x20e>
 80159cc:	e137      	b.n	8015c3e <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 80159ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d202      	bcs.n	80159dc <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 80159d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80159da:	e001      	b.n	80159e0 <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80159e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80159e2:	2380      	movs	r3, #128	; 0x80
 80159e4:	005b      	lsls	r3, r3, #1
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d90d      	bls.n	8015a06 <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80159ea:	2212      	movs	r2, #18
 80159ec:	2109      	movs	r1, #9
 80159ee:	2002      	movs	r0, #2
 80159f0:	f000 ff00 	bl	80167f4 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80159f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80159f6:	699b      	ldr	r3, [r3, #24]
 80159f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80159fa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80159fc:	2114      	movs	r1, #20
 80159fe:	4798      	blx	r3
 8015a00:	0003      	movs	r3, r0
 8015a02:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8015a04:	e11e      	b.n	8015c44 <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8015a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a0c:	2180      	movs	r1, #128	; 0x80
 8015a0e:	1879      	adds	r1, r7, r1
 8015a10:	6809      	ldr	r1, [r1, #0]
 8015a12:	0018      	movs	r0, r3
 8015a14:	f001 f9de 	bl	8016dd4 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8015a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	68fa      	ldr	r2, [r7, #12]
 8015a20:	b2d2      	uxtb	r2, r2
 8015a22:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a2a:	0018      	movs	r0, r3
 8015a2c:	f000 fe5c 	bl	80166e8 <_ux_device_stack_transfer_request>
 8015a30:	0003      	movs	r3, r0
 8015a32:	673b      	str	r3, [r7, #112]	; 0x70
        }
        break;
 8015a34:	e103      	b.n	8015c3e <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 8015a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d153      	bne.n	8015ae4 <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015a3c:	4b43      	ldr	r3, [pc, #268]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	23a6      	movs	r3, #166	; 0xa6
 8015a42:	005b      	lsls	r3, r3, #1
 8015a44:	58d3      	ldr	r3, [r2, r3]
 8015a46:	1c9a      	adds	r2, r3, #2
 8015a48:	2380      	movs	r3, #128	; 0x80
 8015a4a:	005b      	lsls	r3, r3, #1
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d90d      	bls.n	8015a6c <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8015a50:	2212      	movs	r2, #18
 8015a52:	2109      	movs	r1, #9
 8015a54:	2002      	movs	r0, #2
 8015a56:	f000 fecd 	bl	80167f4 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a5c:	699b      	ldr	r3, [r3, #24]
 8015a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015a60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015a62:	2114      	movs	r1, #20
 8015a64:	4798      	blx	r3
 8015a66:	0003      	movs	r3, r0
 8015a68:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8015a6a:	e0eb      	b.n	8015c44 <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8015a72:	4b36      	ldr	r3, [pc, #216]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	23a6      	movs	r3, #166	; 0xa6
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	58d3      	ldr	r3, [r2, r3]
 8015a7c:	b2db      	uxtb	r3, r3
 8015a7e:	3302      	adds	r3, #2
 8015a80:	b2da      	uxtb	r2, r3
 8015a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a84:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8015a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a88:	3301      	adds	r3, #1
 8015a8a:	2203      	movs	r2, #3
 8015a8c:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8015a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a90:	1c98      	adds	r0, r3, #2
 8015a92:	4b2e      	ldr	r3, [pc, #184]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	23a4      	movs	r3, #164	; 0xa4
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8015a9c:	4b2b      	ldr	r3, [pc, #172]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015a9e:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8015aa0:	23a6      	movs	r3, #166	; 0xa6
 8015aa2:	005b      	lsls	r3, r3, #1
 8015aa4:	58d3      	ldr	r3, [r2, r3]
 8015aa6:	001a      	movs	r2, r3
 8015aa8:	f001 f994 	bl	8016dd4 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8015aac:	4b27      	ldr	r3, [pc, #156]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	23a6      	movs	r3, #166	; 0xa6
 8015ab2:	005b      	lsls	r3, r3, #1
 8015ab4:	58d3      	ldr	r3, [r2, r3]
 8015ab6:	3302      	adds	r3, #2
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d907      	bls.n	8015ace <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 8015abe:	4b23      	ldr	r3, [pc, #140]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	23a6      	movs	r3, #166	; 0xa6
 8015ac4:	005b      	lsls	r3, r3, #1
 8015ac6:	58d3      	ldr	r3, [r2, r3]
 8015ac8:	3302      	adds	r3, #2
 8015aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015acc:	e001      	b.n	8015ad2 <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ad8:	0018      	movs	r0, r3
 8015ada:	f000 fe05 	bl	80166e8 <_ux_device_stack_transfer_request>
 8015ade:	0003      	movs	r3, r0
 8015ae0:	673b      	str	r3, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 8015ae2:	e0ae      	b.n	8015c42 <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8015ae4:	4b19      	ldr	r3, [pc, #100]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015ae6:	681a      	ldr	r2, [r3, #0]
 8015ae8:	23a0      	movs	r3, #160	; 0xa0
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	58d3      	ldr	r3, [r2, r3]
 8015aee:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8015af0:	4b16      	ldr	r3, [pc, #88]	; (8015b4c <_ux_device_stack_descriptor_send+0x38c>)
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	23a2      	movs	r3, #162	; 0xa2
 8015af6:	005b      	lsls	r3, r3, #1
 8015af8:	58d3      	ldr	r3, [r2, r3]
 8015afa:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 8015afc:	e088      	b.n	8015c10 <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 8015afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b00:	0018      	movs	r0, r3
 8015b02:	f001 fb34 	bl	801716e <_ux_utility_short_get>
 8015b06:	0002      	movs	r2, r0
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d000      	beq.n	8015b10 <_ux_device_stack_descriptor_send+0x350>
 8015b0e:	e070      	b.n	8015bf2 <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 8015b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b12:	3302      	adds	r3, #2
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	001a      	movs	r2, r3
 8015b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b1a:	4293      	cmp	r3, r2
 8015b1c:	d169      	bne.n	8015bf2 <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b20:	3303      	adds	r3, #3
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	3301      	adds	r3, #1
 8015b26:	005a      	lsls	r2, r3, #1
 8015b28:	2380      	movs	r3, #128	; 0x80
 8015b2a:	005b      	lsls	r3, r3, #1
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	dd15      	ble.n	8015b5c <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8015b30:	2212      	movs	r2, #18
 8015b32:	2109      	movs	r1, #9
 8015b34:	2002      	movs	r0, #2
 8015b36:	f000 fe5d 	bl	80167f4 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b3c:	699b      	ldr	r3, [r3, #24]
 8015b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b40:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015b42:	2114      	movs	r1, #20
 8015b44:	4798      	blx	r3
 8015b46:	0003      	movs	r3, r0
 8015b48:	673b      	str	r3, [r7, #112]	; 0x70
                            break;
 8015b4a:	e065      	b.n	8015c18 <_ux_device_stack_descriptor_send+0x458>
 8015b4c:	20010c9c 	.word	0x20010c9c
 8015b50:	0801a3e8 	.word	0x0801a3e8
 8015b54:	20000054 	.word	0x20000054
 8015b58:	20000040 	.word	0x20000040
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8015b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b64:	3303      	adds	r3, #3
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	b2db      	uxtb	r3, r3
 8015b6c:	18db      	adds	r3, r3, r3
 8015b6e:	b2da      	uxtb	r2, r3
 8015b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b72:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8015b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b76:	3301      	adds	r3, #1
 8015b78:	2203      	movs	r2, #3
 8015b7a:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8015b80:	e015      	b.n	8015bae <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8015b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b84:	3304      	adds	r3, #4
 8015b86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015b88:	18d2      	adds	r2, r2, r3
 8015b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	005b      	lsls	r3, r3, #1
 8015b90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015b92:	18cb      	adds	r3, r1, r3
 8015b94:	7812      	ldrb	r2, [r2, #0]
 8015b96:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8015b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	005b      	lsls	r3, r3, #1
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ba2:	18d3      	adds	r3, r2, r3
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8015ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015baa:	3301      	adds	r3, #1
 8015bac:	663b      	str	r3, [r7, #96]	; 0x60
 8015bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bb0:	3303      	adds	r3, #3
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	001a      	movs	r2, r3
 8015bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015bb8:	4293      	cmp	r3, r2
 8015bba:	d3e2      	bcc.n	8015b82 <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8015bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bbe:	3303      	adds	r3, #3
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	005b      	lsls	r3, r3, #1
 8015bc6:	001a      	movs	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	d906      	bls.n	8015bdc <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 8015bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bd0:	3303      	adds	r3, #3
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015bda:	e001      	b.n	8015be0 <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015be6:	0018      	movs	r0, r3
 8015be8:	f000 fd7e 	bl	80166e8 <_ux_device_stack_transfer_request>
 8015bec:	0003      	movs	r3, r0
 8015bee:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8015bf0:	e012      	b.n	8015c18 <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8015bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bf4:	3303      	adds	r3, #3
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	001a      	movs	r2, r3
 8015bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015bfc:	1a9b      	subs	r3, r3, r2
 8015bfe:	3b04      	subs	r3, #4
 8015c00:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 8015c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c04:	3303      	adds	r3, #3
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	3304      	adds	r3, #4
 8015c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015c0c:	18d3      	adds	r3, r2, r3
 8015c0e:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 8015c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d000      	beq.n	8015c18 <_ux_device_stack_descriptor_send+0x458>
 8015c16:	e772      	b.n	8015afe <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 8015c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d111      	bne.n	8015c42 <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c20:	699b      	ldr	r3, [r3, #24]
 8015c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015c26:	2114      	movs	r1, #20
 8015c28:	4798      	blx	r3
                return(UX_ERROR);
 8015c2a:	23ff      	movs	r3, #255	; 0xff
 8015c2c:	e00b      	b.n	8015c46 <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c30:	699b      	ldr	r3, [r3, #24]
 8015c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015c36:	2114      	movs	r1, #20
 8015c38:	4798      	blx	r3
        return(UX_ERROR);
 8015c3a:	23ff      	movs	r3, #255	; 0xff
 8015c3c:	e003      	b.n	8015c46 <_ux_device_stack_descriptor_send+0x486>
        break;
 8015c3e:	46c0      	nop			; (mov r8, r8)
 8015c40:	e000      	b.n	8015c44 <_ux_device_stack_descriptor_send+0x484>
        break;
 8015c42:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 8015c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8015c46:	0018      	movs	r0, r3
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	b023      	add	sp, #140	; 0x8c
 8015c4c:	bd90      	pop	{r4, r7, pc}
 8015c4e:	46c0      	nop			; (mov r8, r8)

08015c50 <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b092      	sub	sp, #72	; 0x48
 8015c54:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 8015c56:	23ff      	movs	r3, #255	; 0xff
 8015c58:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015c5a:	4b2d      	ldr	r3, [pc, #180]	; (8015d10 <_ux_device_stack_disconnect+0xc0>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015c60:	4b2b      	ldr	r3, [pc, #172]	; (8015d10 <_ux_device_stack_disconnect+0xc0>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	3320      	adds	r3, #32
 8015c66:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b03      	cmp	r3, #3
 8015c6e:	d127      	bne.n	8015cc0 <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 8015c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c72:	22f0      	movs	r2, #240	; 0xf0
 8015c74:	589b      	ldr	r3, [r3, r2]
 8015c76:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 8015c78:	e01c      	b.n	8015cb4 <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8015c7a:	1d3b      	adds	r3, r7, #4
 8015c7c:	2203      	movs	r2, #3
 8015c7e:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8015c80:	1d3b      	adds	r3, r7, #4
 8015c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c84:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 8015c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 8015c8c:	1d3b      	adds	r3, r7, #4
 8015c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c90:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 8015c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d004      	beq.n	8015ca2 <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 8015c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c9c:	1d3a      	adds	r2, r7, #4
 8015c9e:	0010      	movs	r0, r2
 8015ca0:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 8015ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ca6:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8015ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015caa:	0018      	movs	r0, r3
 8015cac:	f000 fab6 	bl	801621c <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 8015cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb2:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface != UX_NULL)
 8015cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d1df      	bne.n	8015c7a <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8015cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbc:	2201      	movs	r2, #1
 8015cbe:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8015cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	2b01      	cmp	r3, #1
 8015cc6:	d108      	bne.n	8015cda <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8015cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cca:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 8015ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cce:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8015cd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cd2:	210f      	movs	r1, #15
 8015cd4:	4798      	blx	r3
 8015cd6:	0003      	movs	r3, r0
 8015cd8:	643b      	str	r3, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8015cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cdc:	22cc      	movs	r2, #204	; 0xcc
 8015cde:	2100      	movs	r1, #0
 8015ce0:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8015ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015ce8:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <_ux_device_stack_disconnect+0xc0>)
 8015cea:	681a      	ldr	r2, [r3, #0]
 8015cec:	23e2      	movs	r3, #226	; 0xe2
 8015cee:	005b      	lsls	r3, r3, #1
 8015cf0:	58d3      	ldr	r3, [r2, r3]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d006      	beq.n	8015d04 <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8015cf6:	4b06      	ldr	r3, [pc, #24]	; (8015d10 <_ux_device_stack_disconnect+0xc0>)
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	23e2      	movs	r3, #226	; 0xe2
 8015cfc:	005b      	lsls	r3, r3, #1
 8015cfe:	58d3      	ldr	r3, [r2, r3]
 8015d00:	200a      	movs	r0, #10
 8015d02:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 8015d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8015d06:	0018      	movs	r0, r3
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	b012      	add	sp, #72	; 0x48
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	46c0      	nop			; (mov r8, r8)
 8015d10:	20010c9c 	.word	0x20010c9c

08015d14 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b088      	sub	sp, #32
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d1c:	4b17      	ldr	r3, [pc, #92]	; (8015d7c <_ux_device_stack_endpoint_stall+0x68>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 8015d22:	23ff      	movs	r3, #255	; 0xff
 8015d24:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8015d26:	f3ef 8310 	mrs	r3, PRIMASK
 8015d2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8015d2c:	b672      	cpsid	i
    return(primask_value);
 8015d2e:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8015d30:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8015d32:	4b12      	ldr	r3, [pc, #72]	; (8015d7c <_ux_device_stack_endpoint_stall+0x68>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	6a1b      	ldr	r3, [r3, #32]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d013      	beq.n	8015d64 <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8015d40:	2b02      	cmp	r3, #2
 8015d42:	d00f      	beq.n	8015d64 <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	699b      	ldr	r3, [r3, #24]
 8015d48:	687a      	ldr	r2, [r7, #4]
 8015d4a:	69b8      	ldr	r0, [r7, #24]
 8015d4c:	2114      	movs	r1, #20
 8015d4e:	4798      	blx	r3
 8015d50:	0003      	movs	r3, r0
 8015d52:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	699b      	ldr	r3, [r3, #24]
 8015d58:	2203      	movs	r2, #3
 8015d5a:	4013      	ands	r3, r2
 8015d5c:	d002      	beq.n	8015d64 <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2202      	movs	r2, #2
 8015d62:	605a      	str	r2, [r3, #4]
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f383 8810 	msr	PRIMASK, r3
}
 8015d6e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 8015d70:	69fb      	ldr	r3, [r7, #28]
}
 8015d72:	0018      	movs	r0, r3
 8015d74:	46bd      	mov	sp, r7
 8015d76:	b008      	add	sp, #32
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	46c0      	nop			; (mov r8, r8)
 8015d7c:	20010c9c 	.word	0x20010c9c

08015d80 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b08a      	sub	sp, #40	; 0x28
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d8c:	4b3c      	ldr	r3, [pc, #240]	; (8015e80 <_ux_device_stack_get_status+0x100>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015d92:	4b3b      	ldr	r3, [pc, #236]	; (8015e80 <_ux_device_stack_get_status+0x100>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	3320      	adds	r3, #32
 8015d98:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	333c      	adds	r3, #60	; 0x3c
 8015d9e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015da0:	69bb      	ldr	r3, [r7, #24]
 8015da2:	3330      	adds	r3, #48	; 0x30
 8015da4:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8015da6:	697b      	ldr	r3, [r7, #20]
 8015da8:	68db      	ldr	r3, [r3, #12]
 8015daa:	2200      	movs	r2, #0
 8015dac:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	68db      	ldr	r3, [r3, #12]
 8015db2:	3301      	adds	r3, #1
 8015db4:	2200      	movs	r2, #0
 8015db6:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 8015db8:	2302      	movs	r3, #2
 8015dba:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2203      	movs	r2, #3
 8015dc0:	4013      	ands	r3, r2
 8015dc2:	d002      	beq.n	8015dca <_ux_device_stack_get_status+0x4a>
 8015dc4:	2b02      	cmp	r3, #2
 8015dc6:	d024      	beq.n	8015e12 <_ux_device_stack_get_status+0x92>
 8015dc8:	e03e      	b.n	8015e48 <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8015dca:	68ba      	ldr	r2, [r7, #8]
 8015dcc:	23f0      	movs	r3, #240	; 0xf0
 8015dce:	021b      	lsls	r3, r3, #8
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d102      	bne.n	8015dda <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 8015dd8:	e03e      	b.n	8015e58 <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8015dda:	4b29      	ldr	r3, [pc, #164]	; (8015e80 <_ux_device_stack_get_status+0x100>)
 8015ddc:	681a      	ldr	r2, [r3, #0]
 8015dde:	23d2      	movs	r3, #210	; 0xd2
 8015de0:	005b      	lsls	r3, r3, #1
 8015de2:	58d3      	ldr	r3, [r2, r3]
 8015de4:	2b02      	cmp	r3, #2
 8015de6:	d103      	bne.n	8015df0 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	2201      	movs	r2, #1
 8015dee:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8015df0:	4b23      	ldr	r3, [pc, #140]	; (8015e80 <_ux_device_stack_get_status+0x100>)
 8015df2:	681a      	ldr	r2, [r3, #0]
 8015df4:	23d6      	movs	r3, #214	; 0xd6
 8015df6:	005b      	lsls	r3, r3, #1
 8015df8:	58d3      	ldr	r3, [r2, r3]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d02c      	beq.n	8015e58 <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	781a      	ldrb	r2, [r3, #0]
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	68db      	ldr	r3, [r3, #12]
 8015e08:	2102      	movs	r1, #2
 8015e0a:	430a      	orrs	r2, r1
 8015e0c:	b2d2      	uxtb	r2, r2
 8015e0e:	701a      	strb	r2, [r3, #0]
        break;
 8015e10:	e022      	b.n	8015e58 <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 8015e12:	6a3b      	ldr	r3, [r7, #32]
 8015e14:	699b      	ldr	r3, [r3, #24]
 8015e16:	68ba      	ldr	r2, [r7, #8]
 8015e18:	6a38      	ldr	r0, [r7, #32]
 8015e1a:	2115      	movs	r1, #21
 8015e1c:	4798      	blx	r3
 8015e1e:	0003      	movs	r3, r0
 8015e20:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	2bff      	cmp	r3, #255	; 0xff
 8015e26:	d007      	beq.n	8015e38 <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d116      	bne.n	8015e5c <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	68db      	ldr	r3, [r3, #12]
 8015e32:	2201      	movs	r2, #1
 8015e34:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 8015e36:	e011      	b.n	8015e5c <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015e38:	6a3b      	ldr	r3, [r7, #32]
 8015e3a:	699b      	ldr	r3, [r3, #24]
 8015e3c:	69ba      	ldr	r2, [r7, #24]
 8015e3e:	6a38      	ldr	r0, [r7, #32]
 8015e40:	2114      	movs	r1, #20
 8015e42:	4798      	blx	r3
            return(UX_SUCCESS);            
 8015e44:	2300      	movs	r3, #0
 8015e46:	e016      	b.n	8015e76 <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015e48:	6a3b      	ldr	r3, [r7, #32]
 8015e4a:	699b      	ldr	r3, [r3, #24]
 8015e4c:	69ba      	ldr	r2, [r7, #24]
 8015e4e:	6a38      	ldr	r0, [r7, #32]
 8015e50:	2114      	movs	r1, #20
 8015e52:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8015e54:	2300      	movs	r3, #0
 8015e56:	e00e      	b.n	8015e76 <_ux_device_stack_get_status+0xf6>
        break;
 8015e58:	46c0      	nop			; (mov r8, r8)
 8015e5a:	e000      	b.n	8015e5e <_ux_device_stack_get_status+0xde>
        break;
 8015e5c:	46c0      	nop			; (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	2203      	movs	r2, #3
 8015e62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8015e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	0018      	movs	r0, r3
 8015e6c:	f000 fc3c 	bl	80166e8 <_ux_device_stack_transfer_request>
 8015e70:	0003      	movs	r3, r0
 8015e72:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 8015e74:	693b      	ldr	r3, [r7, #16]
}
 8015e76:	0018      	movs	r0, r3
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	b00a      	add	sp, #40	; 0x28
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	46c0      	nop			; (mov r8, r8)
 8015e80:	20010c9c 	.word	0x20010c9c

08015e84 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b094      	sub	sp, #80	; 0x50
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015e92:	4bbe      	ldr	r3, [pc, #760]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	3320      	adds	r3, #32
 8015e98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 8015e9a:	4bbc      	ldr	r3, [pc, #752]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015e9c:	681a      	ldr	r2, [r3, #0]
 8015e9e:	239c      	movs	r3, #156	; 0x9c
 8015ea0:	005b      	lsls	r3, r3, #1
 8015ea2:	68f9      	ldr	r1, [r7, #12]
 8015ea4:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8015ea6:	4bb9      	ldr	r3, [pc, #740]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	239e      	movs	r3, #158	; 0x9e
 8015eac:	005b      	lsls	r3, r3, #1
 8015eae:	68b9      	ldr	r1, [r7, #8]
 8015eb0:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 8015eb2:	4bb6      	ldr	r3, [pc, #728]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	2398      	movs	r3, #152	; 0x98
 8015eb8:	005b      	lsls	r3, r3, #1
 8015eba:	6879      	ldr	r1, [r7, #4]
 8015ebc:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 8015ebe:	4bb3      	ldr	r3, [pc, #716]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	239a      	movs	r3, #154	; 0x9a
 8015ec4:	005b      	lsls	r3, r3, #1
 8015ec6:	6839      	ldr	r1, [r7, #0]
 8015ec8:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8015eca:	4bb0      	ldr	r3, [pc, #704]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	23a0      	movs	r3, #160	; 0xa0
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ed4:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8015ed6:	4bad      	ldr	r3, [pc, #692]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015ed8:	681a      	ldr	r2, [r3, #0]
 8015eda:	23a2      	movs	r3, #162	; 0xa2
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8015ee0:	50d1      	str	r1, [r2, r3]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 8015ee2:	4baa      	ldr	r3, [pc, #680]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015ee4:	681a      	ldr	r2, [r3, #0]
 8015ee6:	23a4      	movs	r3, #164	; 0xa4
 8015ee8:	005b      	lsls	r3, r3, #1
 8015eea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015eec:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8015eee:	4ba7      	ldr	r3, [pc, #668]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	23a6      	movs	r3, #166	; 0xa6
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015ef8:	50d1      	str	r1, [r2, r3]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 8015efa:	4ba4      	ldr	r3, [pc, #656]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015efc:	681a      	ldr	r2, [r3, #0]
 8015efe:	23ac      	movs	r3, #172	; 0xac
 8015f00:	005b      	lsls	r3, r3, #1
 8015f02:	2102      	movs	r1, #2
 8015f04:	50d1      	str	r1, [r2, r3]
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8015f06:	4ba1      	ldr	r3, [pc, #644]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015f08:	681a      	ldr	r2, [r3, #0]
 8015f0a:	23e2      	movs	r3, #226	; 0xe2
 8015f0c:	005b      	lsls	r3, r3, #1
 8015f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015f10:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 8015f12:	238a      	movs	r3, #138	; 0x8a
 8015f14:	009b      	lsls	r3, r3, #2
 8015f16:	001a      	movs	r2, r3
 8015f18:	2100      	movs	r1, #0
 8015f1a:	2000      	movs	r0, #0
 8015f1c:	f000 fe14 	bl	8016b48 <_ux_utility_memory_allocate>
 8015f20:	0003      	movs	r3, r0
 8015f22:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 8015f24:	6a3b      	ldr	r3, [r7, #32]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d101      	bne.n	8015f2e <_ux_device_stack_initialize+0xaa>
        return(UX_MEMORY_INSUFFICIENT);
 8015f2a:	2312      	movs	r3, #18
 8015f2c:	e170      	b.n	8016210 <_ux_device_stack_initialize+0x38c>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8015f2e:	4b97      	ldr	r3, [pc, #604]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015f30:	681a      	ldr	r2, [r3, #0]
 8015f32:	23ae      	movs	r3, #174	; 0xae
 8015f34:	005b      	lsls	r3, r3, #1
 8015f36:	6a39      	ldr	r1, [r7, #32]
 8015f38:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3c:	336c      	adds	r3, #108	; 0x6c
 8015f3e:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8015f40:	2380      	movs	r3, #128	; 0x80
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	001a      	movs	r2, r3
 8015f46:	2101      	movs	r1, #1
 8015f48:	2000      	movs	r0, #0
 8015f4a:	f000 fdfd 	bl	8016b48 <_ux_utility_memory_allocate>
 8015f4e:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 8015f50:	69fb      	ldr	r3, [r7, #28]
 8015f52:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 8015f54:	69fb      	ldr	r3, [r7, #28]
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d102      	bne.n	8015f62 <_ux_device_stack_initialize+0xde>
        status = UX_MEMORY_INSUFFICIENT;
 8015f5c:	2312      	movs	r3, #18
 8015f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f60:	e001      	b.n	8015f66 <_ux_device_stack_initialize+0xe2>
    else
        status = UX_SUCCESS;
 8015f62:	2300      	movs	r3, #0
 8015f64:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 8015f66:	2300      	movs	r3, #0
 8015f68:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 8015f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d000      	beq.n	8015f7a <_ux_device_stack_initialize+0xf6>
 8015f78:	e094      	b.n	80160a4 <_ux_device_stack_initialize+0x220>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8015f7a:	4b84      	ldr	r3, [pc, #528]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	2398      	movs	r3, #152	; 0x98
 8015f80:	005b      	lsls	r3, r3, #1
 8015f82:	58d3      	ldr	r3, [r2, r3]
 8015f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8015f86:	4b81      	ldr	r3, [pc, #516]	; (801618c <_ux_device_stack_initialize+0x308>)
 8015f88:	681a      	ldr	r2, [r3, #0]
 8015f8a:	239a      	movs	r3, #154	; 0x9a
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	58d3      	ldr	r3, [r2, r3]
 8015f90:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 8015f92:	2300      	movs	r3, #0
 8015f94:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 8015f96:	2300      	movs	r3, #0
 8015f98:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 8015f9e:	e057      	b.n	8016050 <_ux_device_stack_initialize+0x1cc>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 8015fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa2:	781b      	ldrb	r3, [r3, #0]
 8015fa4:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 8015fa6:	2117      	movs	r1, #23
 8015fa8:	187b      	adds	r3, r7, r1
 8015faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fac:	7852      	ldrb	r2, [r2, #1]
 8015fae:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 8015fb0:	187b      	adds	r3, r7, r1
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2b02      	cmp	r3, #2
 8015fb6:	d029      	beq.n	801600c <_ux_device_stack_initialize+0x188>
 8015fb8:	2b04      	cmp	r3, #4
 8015fba:	d13e      	bne.n	801603a <_ux_device_stack_initialize+0x1b6>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 8015fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fbe:	3303      	adds	r3, #3
 8015fc0:	781b      	ldrb	r3, [r3, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d10b      	bne.n	8015fde <_ux_device_stack_initialize+0x15a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 8015fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fca:	18d3      	adds	r3, r2, r3
 8015fcc:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8015fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd0:	3304      	adds	r3, #4
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 8015fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd8:	3301      	adds	r3, #1
 8015fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fdc:	e00a      	b.n	8015ff4 <_ux_device_stack_initialize+0x170>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 8015fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe0:	3304      	adds	r3, #4
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	001a      	movs	r2, r3
 8015fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	d203      	bcs.n	8015ff4 <_ux_device_stack_initialize+0x170>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8015fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fee:	3304      	adds	r3, #4
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 8015ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff6:	3302      	adds	r3, #2
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	001a      	movs	r2, r3
 8015ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d21d      	bcs.n	801603e <_ux_device_stack_initialize+0x1ba>
                    max_interface_number = *(device_framework + 2);
 8016002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016004:	3302      	adds	r3, #2
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 801600a:	e018      	b.n	801603e <_ux_device_stack_initialize+0x1ba>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 801600c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801600e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016010:	429a      	cmp	r2, r3
 8016012:	d901      	bls.n	8016018 <_ux_device_stack_initialize+0x194>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 8016014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016016:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 8016018:	2300      	movs	r3, #0
 801601a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 801601c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016020:	18d3      	adds	r3, r2, r3
 8016022:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 8016024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016028:	429a      	cmp	r2, r3
 801602a:	d901      	bls.n	8016030 <_ux_device_stack_initialize+0x1ac>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 801602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801602e:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 8016030:	2300      	movs	r3, #0
 8016032:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 8016034:	2300      	movs	r3, #0
 8016036:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 8016038:	e002      	b.n	8016040 <_ux_device_stack_initialize+0x1bc>

            default:
                break;
 801603a:	46c0      	nop			; (mov r8, r8)
 801603c:	e000      	b.n	8016040 <_ux_device_stack_initialize+0x1bc>
                break;
 801603e:	46c0      	nop			; (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8016040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016042:	69bb      	ldr	r3, [r7, #24]
 8016044:	1ad3      	subs	r3, r2, r3
 8016046:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8016048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	18d3      	adds	r3, r2, r3
 801604e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 8016050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016052:	2b00      	cmp	r3, #0
 8016054:	d1a4      	bne.n	8015fa0 <_ux_device_stack_initialize+0x11c>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 8016056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605a:	18d3      	adds	r3, r2, r3
 801605c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 801605e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016062:	429a      	cmp	r2, r3
 8016064:	d901      	bls.n	801606a <_ux_device_stack_initialize+0x1e6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 8016066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016068:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 801606a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801606c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801606e:	429a      	cmp	r2, r3
 8016070:	d901      	bls.n	8016076 <_ux_device_stack_initialize+0x1f2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 8016072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016074:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 8016076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016078:	2b00      	cmp	r3, #0
 801607a:	d106      	bne.n	801608a <_ux_device_stack_initialize+0x206>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 801607c:	2242      	movs	r2, #66	; 0x42
 801607e:	2103      	movs	r1, #3
 8016080:	2002      	movs	r0, #2
 8016082:	f000 fbb7 	bl	80167f4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 8016086:	2342      	movs	r3, #66	; 0x42
 8016088:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 801608a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801608c:	2b00      	cmp	r3, #0
 801608e:	d109      	bne.n	80160a4 <_ux_device_stack_initialize+0x220>
 8016090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016092:	2b0f      	cmp	r3, #15
 8016094:	d906      	bls.n	80160a4 <_ux_device_stack_initialize+0x220>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 8016096:	2212      	movs	r2, #18
 8016098:	2103      	movs	r1, #3
 801609a:	2002      	movs	r0, #2
 801609c:	f000 fbaa 	bl	80167f4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 80160a0:	2312      	movs	r3, #18
 80160a2:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 80160a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d11a      	bne.n	80160e0 <_ux_device_stack_initialize+0x25c>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 80160aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ac:	21f8      	movs	r1, #248	; 0xf8
 80160ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80160b0:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 80160b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160b4:	2380      	movs	r3, #128	; 0x80
 80160b6:	005b      	lsls	r3, r3, #1
 80160b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80160ba:	50d1      	str	r1, [r2, r3]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 80160bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80160be:	2338      	movs	r3, #56	; 0x38
 80160c0:	2100      	movs	r1, #0
 80160c2:	2000      	movs	r0, #0
 80160c4:	f000 fe48 	bl	8016d58 <_ux_utility_memory_allocate_mulc_safe>
 80160c8:	0003      	movs	r3, r0
 80160ca:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d102      	bne.n	80160d8 <_ux_device_stack_initialize+0x254>
            status = UX_MEMORY_INSUFFICIENT;
 80160d2:	2312      	movs	r3, #18
 80160d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80160d6:	e003      	b.n	80160e0 <_ux_device_stack_initialize+0x25c>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 80160d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160da:	21f4      	movs	r1, #244	; 0xf4
 80160dc:	693a      	ldr	r2, [r7, #16]
 80160de:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 80160e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d046      	beq.n	8016174 <_ux_device_stack_initialize+0x2f0>
 80160e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d143      	bne.n	8016174 <_ux_device_stack_initialize+0x2f0>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 80160ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80160ee:	2390      	movs	r3, #144	; 0x90
 80160f0:	2100      	movs	r1, #0
 80160f2:	2000      	movs	r0, #0
 80160f4:	f000 fe30 	bl	8016d58 <_ux_utility_memory_allocate_mulc_safe>
 80160f8:	0003      	movs	r3, r0
 80160fa:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 80160fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d102      	bne.n	8016108 <_ux_device_stack_initialize+0x284>
            status = UX_MEMORY_INSUFFICIENT;
 8016102:	2312      	movs	r3, #18
 8016104:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 8016106:	e037      	b.n	8016178 <_ux_device_stack_initialize+0x2f4>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 8016108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610a:	21fc      	movs	r1, #252	; 0xfc
 801610c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801610e:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8016110:	e022      	b.n	8016158 <_ux_device_stack_initialize+0x2d4>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 8016112:	2380      	movs	r3, #128	; 0x80
 8016114:	011b      	lsls	r3, r3, #4
 8016116:	001a      	movs	r2, r3
 8016118:	2101      	movs	r1, #1
 801611a:	2000      	movs	r0, #0
 801611c:	f000 fd14 	bl	8016b48 <_ux_utility_memory_allocate>
 8016120:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 8016122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016124:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 8016126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801612a:	2b00      	cmp	r3, #0
 801612c:	d102      	bne.n	8016134 <_ux_device_stack_initialize+0x2b0>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 801612e:	2312      	movs	r3, #18
 8016130:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8016132:	e01e      	b.n	8016172 <_ux_device_stack_initialize+0x2ee>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 8016134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016136:	3360      	adds	r3, #96	; 0x60
 8016138:	4915      	ldr	r1, [pc, #84]	; (8016190 <_ux_device_stack_initialize+0x30c>)
 801613a:	2200      	movs	r2, #0
 801613c:	0018      	movs	r0, r3
 801613e:	f000 ff9f 	bl	8017080 <_ux_utility_semaphore_create>
 8016142:	0003      	movs	r3, r0
 8016144:	64bb      	str	r3, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 8016146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016148:	2b00      	cmp	r3, #0
 801614a:	d002      	beq.n	8016152 <_ux_device_stack_initialize+0x2ce>
                {
                    status = UX_SEMAPHORE_ERROR;
 801614c:	2315      	movs	r3, #21
 801614e:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8016150:	e00f      	b.n	8016172 <_ux_device_stack_initialize+0x2ee>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8016152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016154:	3390      	adds	r3, #144	; 0x90
 8016156:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8016158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801615a:	22fc      	movs	r2, #252	; 0xfc
 801615c:	5899      	ldr	r1, [r3, r2]
 801615e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016160:	0013      	movs	r3, r2
 8016162:	00db      	lsls	r3, r3, #3
 8016164:	189b      	adds	r3, r3, r2
 8016166:	011b      	lsls	r3, r3, #4
 8016168:	18cb      	adds	r3, r1, r3
 801616a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801616c:	429a      	cmp	r2, r3
 801616e:	d3d0      	bcc.n	8016112 <_ux_device_stack_initialize+0x28e>
        if (endpoints_pool == UX_NULL)
 8016170:	e002      	b.n	8016178 <_ux_device_stack_initialize+0x2f4>
 8016172:	e001      	b.n	8016178 <_ux_device_stack_initialize+0x2f4>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 8016174:	2300      	movs	r3, #0
 8016176:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 8016178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801617a:	2b00      	cmp	r3, #0
 801617c:	d101      	bne.n	8016182 <_ux_device_stack_initialize+0x2fe>
        return(UX_SUCCESS);
 801617e:	2300      	movs	r3, #0
 8016180:	e046      	b.n	8016210 <_ux_device_stack_initialize+0x38c>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 8016182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016184:	2b00      	cmp	r3, #0
 8016186:	d026      	beq.n	80161d6 <_ux_device_stack_initialize+0x352>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8016188:	e019      	b.n	80161be <_ux_device_stack_initialize+0x33a>
 801618a:	46c0      	nop			; (mov r8, r8)
 801618c:	20010c9c 	.word	0x20010c9c
 8016190:	0801a1c8 	.word	0x0801a1c8
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 8016194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016198:	2b00      	cmp	r3, #0
 801619a:	d004      	beq.n	80161a6 <_ux_device_stack_initialize+0x322>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801619c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801619e:	3360      	adds	r3, #96	; 0x60
 80161a0:	0018      	movs	r0, r3
 80161a2:	f000 ff89 	bl	80170b8 <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80161a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d004      	beq.n	80161b8 <_ux_device_stack_initialize+0x334>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80161ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161b2:	0018      	movs	r0, r3
 80161b4:	f000 fe2a 	bl	8016e0c <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 80161b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161ba:	3b90      	subs	r3, #144	; 0x90
 80161bc:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 80161be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c0:	22fc      	movs	r2, #252	; 0xfc
 80161c2:	589b      	ldr	r3, [r3, r2]
 80161c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d2e4      	bcs.n	8016194 <_ux_device_stack_initialize+0x310>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 80161ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161cc:	22fc      	movs	r2, #252	; 0xfc
 80161ce:	589b      	ldr	r3, [r3, r2]
 80161d0:	0018      	movs	r0, r3
 80161d2:	f000 fe1b 	bl	8016e0c <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 80161d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d8:	22f4      	movs	r2, #244	; 0xf4
 80161da:	589b      	ldr	r3, [r3, r2]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d005      	beq.n	80161ec <_ux_device_stack_initialize+0x368>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 80161e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e2:	22f4      	movs	r2, #244	; 0xf4
 80161e4:	589b      	ldr	r3, [r3, r2]
 80161e6:	0018      	movs	r0, r3
 80161e8:	f000 fe10 	bl	8016e0c <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80161ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d004      	beq.n	80161fe <_ux_device_stack_initialize+0x37a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80161f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161f8:	0018      	movs	r0, r3
 80161fa:	f000 fe07 	bl	8016e0c <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 80161fe:	4b06      	ldr	r3, [pc, #24]	; (8016218 <_ux_device_stack_initialize+0x394>)
 8016200:	681a      	ldr	r2, [r3, #0]
 8016202:	23ae      	movs	r3, #174	; 0xae
 8016204:	005b      	lsls	r3, r3, #1
 8016206:	58d3      	ldr	r3, [r2, r3]
 8016208:	0018      	movs	r0, r3
 801620a:	f000 fdff 	bl	8016e0c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 801620e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8016210:	0018      	movs	r0, r3
 8016212:	46bd      	mov	sp, r7
 8016214:	b014      	add	sp, #80	; 0x50
 8016216:	bd80      	pop	{r7, pc}
 8016218:	20010c9c 	.word	0x20010c9c

0801621c <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b086      	sub	sp, #24
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016224:	4b20      	ldr	r3, [pc, #128]	; (80162a8 <_ux_device_stack_interface_delete+0x8c>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	3320      	adds	r3, #32
 801622a:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016230:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8016232:	e01c      	b.n	801626e <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801623c:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 801623e:	4b1a      	ldr	r3, [pc, #104]	; (80162a8 <_ux_device_stack_interface_delete+0x8c>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	699b      	ldr	r3, [r3, #24]
 8016248:	68fa      	ldr	r2, [r7, #12]
 801624a:	68b8      	ldr	r0, [r7, #8]
 801624c:	210f      	movs	r1, #15
 801624e:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2200      	movs	r2, #0
 8016254:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2200      	movs	r2, #0
 801625a:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2200      	movs	r2, #0
 8016260:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	2200      	movs	r2, #0
 8016266:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2200      	movs	r2, #0
 801626c:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d1df      	bne.n	8016234 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016278:	693b      	ldr	r3, [r7, #16]
 801627a:	21f0      	movs	r1, #240	; 0xf0
 801627c:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2200      	movs	r2, #0
 8016282:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2200      	movs	r2, #0
 801628e:	631a      	str	r2, [r3, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2200      	movs	r2, #0
 8016294:	635a      	str	r2, [r3, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 801629c:	2300      	movs	r3, #0
}
 801629e:	0018      	movs	r0, r3
 80162a0:	46bd      	mov	sp, r7
 80162a2:	b006      	add	sp, #24
 80162a4:	bd80      	pop	{r7, pc}
 80162a6:	46c0      	nop			; (mov r8, r8)
 80162a8:	20010c9c 	.word	0x20010c9c

080162ac <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b092      	sub	sp, #72	; 0x48
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80162b8:	4b86      	ldr	r3, [pc, #536]	; (80164d4 <_ux_device_stack_interface_set+0x228>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80162be:	4b85      	ldr	r3, [pc, #532]	; (80164d4 <_ux_device_stack_interface_set+0x228>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	3320      	adds	r3, #32
 80162c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 80162c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c8:	22f4      	movs	r2, #244	; 0xf4
 80162ca:	589b      	ldr	r3, [r3, r2]
 80162cc:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 80162ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d0:	22f8      	movs	r2, #248	; 0xf8
 80162d2:	589b      	ldr	r3, [r3, r2]
 80162d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 80162d6:	e009      	b.n	80162ec <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 80162d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d009      	beq.n	80162f4 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 80162e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162e2:	3338      	adds	r3, #56	; 0x38
 80162e4:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 80162e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162e8:	3b01      	subs	r3, #1
 80162ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 80162ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d1f2      	bne.n	80162d8 <_ux_device_stack_interface_set+0x2c>
 80162f2:	e000      	b.n	80162f6 <_ux_device_stack_interface_set+0x4a>
            break;
 80162f4:	46c0      	nop			; (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 80162f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d101      	bne.n	8016300 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 80162fc:	2312      	movs	r3, #18
 80162fe:	e0e5      	b.n	80164cc <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 8016300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016302:	2201      	movs	r2, #1
 8016304:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 8016306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016308:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 801630a:	4973      	ldr	r1, [pc, #460]	; (80164d8 <_ux_device_stack_interface_set+0x22c>)
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	2209      	movs	r2, #9
 8016310:	f000 fb64 	bl	80169dc <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8016314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016316:	22f0      	movs	r2, #240	; 0xf0
 8016318:	589b      	ldr	r3, [r3, r2]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d104      	bne.n	8016328 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 801631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016320:	21f0      	movs	r1, #240	; 0xf0
 8016322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016324:	505a      	str	r2, [r3, r1]
 8016326:	e00e      	b.n	8016346 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 8016328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632a:	22f0      	movs	r2, #240	; 0xf0
 801632c:	589b      	ldr	r3, [r3, r2]
 801632e:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8016330:	e002      	b.n	8016338 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 8016332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016336:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8016338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801633c:	2b00      	cmp	r3, #0
 801633e:	d1f8      	bne.n	8016332 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 8016340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016344:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	001a      	movs	r2, r3
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	1a9b      	subs	r3, r3, r2
 8016350:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	001a      	movs	r2, r3
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	189b      	adds	r3, r3, r2
 801635c:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 801635e:	e0aa      	b.n	80164b6 <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8016366:	211b      	movs	r1, #27
 8016368:	187b      	adds	r3, r7, r1
 801636a:	68fa      	ldr	r2, [r7, #12]
 801636c:	7852      	ldrb	r2, [r2, #1]
 801636e:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8016370:	187b      	adds	r3, r7, r1
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	2b05      	cmp	r3, #5
 8016376:	d008      	beq.n	801638a <_ux_device_stack_interface_set+0xde>
 8016378:	dd00      	ble.n	801637c <_ux_device_stack_interface_set+0xd0>
 801637a:	e093      	b.n	80164a4 <_ux_device_stack_interface_set+0x1f8>
 801637c:	2b02      	cmp	r3, #2
 801637e:	d100      	bne.n	8016382 <_ux_device_stack_interface_set+0xd6>
 8016380:	e088      	b.n	8016494 <_ux_device_stack_interface_set+0x1e8>
 8016382:	2b04      	cmp	r3, #4
 8016384:	d100      	bne.n	8016388 <_ux_device_stack_interface_set+0xdc>
 8016386:	e085      	b.n	8016494 <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 8016388:	e08c      	b.n	80164a4 <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 801638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638c:	22fc      	movs	r2, #252	; 0xfc
 801638e:	589b      	ldr	r3, [r3, r2]
 8016390:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8016392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016394:	2380      	movs	r3, #128	; 0x80
 8016396:	005b      	lsls	r3, r3, #1
 8016398:	58d3      	ldr	r3, [r2, r3]
 801639a:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 801639c:	e00d      	b.n	80163ba <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d103      	bne.n	80163ae <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 80163a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a8:	2201      	movs	r2, #1
 80163aa:	601a      	str	r2, [r3, #0]
                    break;
 80163ac:	e008      	b.n	80163c0 <_ux_device_stack_interface_set+0x114>
                endpoint++;
 80163ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b0:	3390      	adds	r3, #144	; 0x90
 80163b2:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 80163b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b6:	3b01      	subs	r3, #1
 80163b8:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 80163ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d1ee      	bne.n	801639e <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 80163c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d101      	bne.n	80163ca <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 80163c6:	2312      	movs	r3, #18
 80163c8:	e080      	b.n	80164cc <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80163ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163cc:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 80163ce:	4943      	ldr	r1, [pc, #268]	; (80164dc <_ux_device_stack_interface_set+0x230>)
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	2206      	movs	r2, #6
 80163d4:	f000 fb02 	bl	80169dc <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80163d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163da:	3330      	adds	r3, #48	; 0x30
 80163dc:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80163de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e0:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 80163e2:	055b      	lsls	r3, r3, #21
 80163e4:	0d5b      	lsrs	r3, r3, #21
 80163e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80163e8:	4b3a      	ldr	r3, [pc, #232]	; (80164d4 <_ux_device_stack_interface_set+0x228>)
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	23d0      	movs	r3, #208	; 0xd0
 80163ee:	005b      	lsls	r3, r3, #1
 80163f0:	58d3      	ldr	r3, [r2, r3]
 80163f2:	2b02      	cmp	r3, #2
 80163f4:	d117      	bne.n	8016426 <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 80163f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f8:	699b      	ldr	r3, [r3, #24]
 80163fa:	2201      	movs	r2, #1
 80163fc:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80163fe:	d012      	beq.n	8016426 <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8016400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016402:	69da      	ldr	r2, [r3, #28]
 8016404:	23c0      	movs	r3, #192	; 0xc0
 8016406:	015b      	lsls	r3, r3, #5
 8016408:	4013      	ands	r3, r2
 801640a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d009      	beq.n	8016426 <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8016412:	693b      	ldr	r3, [r7, #16]
 8016414:	0adb      	lsrs	r3, r3, #11
 8016416:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	3301      	adds	r3, #1
 801641c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 801641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016420:	693a      	ldr	r2, [r7, #16]
 8016422:	4353      	muls	r3, r2
 8016424:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801642a:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016430:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	2201      	movs	r2, #1
 8016436:	4252      	negs	r2, r2
 8016438:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 801643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801643e:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 8016440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016444:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8016446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016448:	699b      	ldr	r3, [r3, #24]
 801644a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801644c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801644e:	210e      	movs	r1, #14
 8016450:	4798      	blx	r3
 8016452:	0003      	movs	r3, r0
 8016454:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 8016456:	6a3b      	ldr	r3, [r7, #32]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d004      	beq.n	8016466 <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645e:	2200      	movs	r2, #0
 8016460:	601a      	str	r2, [r3, #0]
                return(status);
 8016462:	6a3b      	ldr	r3, [r7, #32]
 8016464:	e032      	b.n	80164cc <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8016466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801646a:	2b00      	cmp	r3, #0
 801646c:	d103      	bne.n	8016476 <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 801646e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016472:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8016474:	e017      	b.n	80164a6 <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 8016476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801647a:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801647c:	e002      	b.n	8016484 <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016482:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8016484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016488:	2b00      	cmp	r3, #0
 801648a:	d1f8      	bne.n	801647e <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801648e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016490:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8016492:	e008      	b.n	80164a6 <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 8016494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016496:	0018      	movs	r0, r3
 8016498:	f000 f822 	bl	80164e0 <_ux_device_stack_interface_start>
 801649c:	0003      	movs	r3, r0
 801649e:	623b      	str	r3, [r7, #32]
            return(status);
 80164a0:	6a3b      	ldr	r3, [r7, #32]
 80164a2:	e013      	b.n	80164cc <_ux_device_stack_interface_set+0x220>
            break;
 80164a4:	46c0      	nop			; (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80164a6:	68ba      	ldr	r2, [r7, #8]
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	1ad3      	subs	r3, r2, r3
 80164ac:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80164ae:	68fa      	ldr	r2, [r7, #12]
 80164b0:	69fb      	ldr	r3, [r7, #28]
 80164b2:	18d3      	adds	r3, r2, r3
 80164b4:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d000      	beq.n	80164be <_ux_device_stack_interface_set+0x212>
 80164bc:	e750      	b.n	8016360 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 80164be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164c0:	0018      	movs	r0, r3
 80164c2:	f000 f80d 	bl	80164e0 <_ux_device_stack_interface_start>
 80164c6:	0003      	movs	r3, r0
 80164c8:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 80164ca:	6a3b      	ldr	r3, [r7, #32]
}
 80164cc:	0018      	movs	r0, r3
 80164ce:	46bd      	mov	sp, r7
 80164d0:	b012      	add	sp, #72	; 0x48
 80164d2:	bd80      	pop	{r7, pc}
 80164d4:	20010c9c 	.word	0x20010c9c
 80164d8:	20000048 	.word	0x20000048
 80164dc:	20000028 	.word	0x20000028

080164e0 <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 80164e0:	b590      	push	{r4, r7, lr}
 80164e2:	b091      	sub	sp, #68	; 0x44
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 80164e8:	4b2a      	ldr	r3, [pc, #168]	; (8016594 <_ux_device_stack_interface_start+0xb4>)
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	695b      	ldr	r3, [r3, #20]
 80164f0:	3358      	adds	r3, #88	; 0x58
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	589b      	ldr	r3, [r3, r2]
 80164f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 80164f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d101      	bne.n	8016502 <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 80164fe:	2357      	movs	r3, #87	; 0x57
 8016500:	e044      	b.n	801658c <_ux_device_stack_interface_start+0xac>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016502:	4b24      	ldr	r3, [pc, #144]	; (8016594 <_ux_device_stack_interface_start+0xb4>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	3320      	adds	r3, #32
 8016508:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 801650a:	2008      	movs	r0, #8
 801650c:	183b      	adds	r3, r7, r0
 801650e:	2201      	movs	r2, #1
 8016510:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 8016512:	183b      	adds	r3, r7, r0
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6a1a      	ldr	r2, [r3, #32]
 801651c:	183b      	adds	r3, r7, r0
 801651e:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016524:	183b      	adds	r3, r7, r0
 8016526:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801652c:	183b      	adds	r3, r7, r0
 801652e:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8016530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016532:	6a1a      	ldr	r2, [r3, #32]
 8016534:	183b      	adds	r3, r7, r0
 8016536:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8016538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801653a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801653c:	183b      	adds	r3, r7, r0
 801653e:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 8016540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016542:	2388      	movs	r3, #136	; 0x88
 8016544:	005b      	lsls	r3, r3, #1
 8016546:	6879      	ldr	r1, [r7, #4]
 8016548:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 801654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801654e:	0004      	movs	r4, r0
 8016550:	183a      	adds	r2, r7, r0
 8016552:	0010      	movs	r0, r2
 8016554:	4798      	blx	r3
 8016556:	0003      	movs	r3, r0
 8016558:	637b      	str	r3, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 801655a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801655c:	2b00      	cmp	r3, #0
 801655e:	d114      	bne.n	801658a <_ux_device_stack_interface_start+0xaa>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 8016560:	193b      	adds	r3, r7, r4
 8016562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016564:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016566:	193b      	adds	r3, r7, r4
 8016568:	2202      	movs	r2, #2
 801656a:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 801656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016570:	193a      	adds	r2, r7, r4
 8016572:	0010      	movs	r0, r2
 8016574:	4798      	blx	r3
 8016576:	0003      	movs	r3, r0
 8016578:	637b      	str	r3, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 801657a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801657c:	2b00      	cmp	r3, #0
 801657e:	d102      	bne.n	8016586 <_ux_device_stack_interface_start+0xa6>
            interface -> ux_slave_interface_class =  class;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016584:	605a      	str	r2, [r3, #4]

        return(status); 
 8016586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016588:	e000      	b.n	801658c <_ux_device_stack_interface_start+0xac>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 801658a:	2357      	movs	r3, #87	; 0x57
}
 801658c:	0018      	movs	r0, r3
 801658e:	46bd      	mov	sp, r7
 8016590:	b011      	add	sp, #68	; 0x44
 8016592:	bd90      	pop	{r4, r7, pc}
 8016594:	20010c9c 	.word	0x20010c9c

08016598 <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b08a      	sub	sp, #40	; 0x28
 801659c:	af00      	add	r7, sp, #0
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80165a4:	4b29      	ldr	r3, [pc, #164]	; (801664c <_ux_device_stack_set_feature+0xb4>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80165aa:	4b28      	ldr	r3, [pc, #160]	; (801664c <_ux_device_stack_set_feature+0xb4>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	3320      	adds	r3, #32
 80165b0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	333c      	adds	r3, #60	; 0x3c
 80165b6:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2203      	movs	r2, #3
 80165bc:	4013      	ands	r3, r2
 80165be:	d002      	beq.n	80165c6 <_ux_device_stack_set_feature+0x2e>
 80165c0:	2b02      	cmp	r3, #2
 80165c2:	d016      	beq.n	80165f2 <_ux_device_stack_set_feature+0x5a>
 80165c4:	e037      	b.n	8016636 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	2b01      	cmp	r3, #1
 80165ca:	d110      	bne.n	80165ee <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 80165cc:	4b1f      	ldr	r3, [pc, #124]	; (801664c <_ux_device_stack_set_feature+0xb4>)
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	23d4      	movs	r3, #212	; 0xd4
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	58d3      	ldr	r3, [r2, r3]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d007      	beq.n	80165ea <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 80165da:	4b1c      	ldr	r3, [pc, #112]	; (801664c <_ux_device_stack_set_feature+0xb4>)
 80165dc:	681a      	ldr	r2, [r3, #0]
 80165de:	23d6      	movs	r3, #214	; 0xd6
 80165e0:	005b      	lsls	r3, r3, #1
 80165e2:	2101      	movs	r1, #1
 80165e4:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 80165e6:	2300      	movs	r3, #0
 80165e8:	e02c      	b.n	8016644 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 80165ea:	2354      	movs	r3, #84	; 0x54
 80165ec:	e02a      	b.n	8016644 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80165ee:	2354      	movs	r3, #84	; 0x54
 80165f0:	e028      	b.n	8016644 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 80165f2:	69bb      	ldr	r3, [r7, #24]
 80165f4:	22f0      	movs	r2, #240	; 0xf0
 80165f6:	589b      	ldr	r3, [r3, r2]
 80165f8:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 80165fa:	e019      	b.n	8016630 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 80165fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016600:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8016602:	e00f      	b.n	8016624 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8016604:	6a3b      	ldr	r3, [r7, #32]
 8016606:	695b      	ldr	r3, [r3, #20]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	429a      	cmp	r2, r3
 801660c:	d107      	bne.n	801661e <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	699b      	ldr	r3, [r3, #24]
 8016612:	6a3a      	ldr	r2, [r7, #32]
 8016614:	69f8      	ldr	r0, [r7, #28]
 8016616:	2114      	movs	r1, #20
 8016618:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 801661a:	2300      	movs	r3, #0
 801661c:	e012      	b.n	8016644 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801661e:	6a3b      	ldr	r3, [r7, #32]
 8016620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016622:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8016624:	6a3b      	ldr	r3, [r7, #32]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d1ec      	bne.n	8016604 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801662e:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 8016630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016632:	2b00      	cmp	r3, #0
 8016634:	d1e2      	bne.n	80165fc <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	699b      	ldr	r3, [r3, #24]
 801663a:	697a      	ldr	r2, [r7, #20]
 801663c:	69f8      	ldr	r0, [r7, #28]
 801663e:	2114      	movs	r1, #20
 8016640:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8016642:	2300      	movs	r3, #0
    }
}
 8016644:	0018      	movs	r0, r3
 8016646:	46bd      	mov	sp, r7
 8016648:	b00a      	add	sp, #40	; 0x28
 801664a:	bd80      	pop	{r7, pc}
 801664c:	20010c9c 	.word	0x20010c9c

08016650 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b088      	sub	sp, #32
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
 8016658:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801665a:	4b18      	ldr	r3, [pc, #96]	; (80166bc <_ux_device_stack_transfer_abort+0x6c>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	683a      	ldr	r2, [r7, #0]
 8016664:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8016666:	f3ef 8310 	mrs	r3, PRIMASK
 801666a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801666c:	b672      	cpsid	i
    return(primask_value);
 801666e:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8016670:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	2b01      	cmp	r3, #1
 8016678:	d114      	bne.n	80166a4 <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 801667a:	69fb      	ldr	r3, [r7, #28]
 801667c:	699b      	ldr	r3, [r3, #24]
 801667e:	687a      	ldr	r2, [r7, #4]
 8016680:	69f8      	ldr	r0, [r7, #28]
 8016682:	210d      	movs	r1, #13
 8016684:	4798      	blx	r3
 8016686:	69bb      	ldr	r3, [r7, #24]
 8016688:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801668a:	693b      	ldr	r3, [r7, #16]
 801668c:	f383 8810 	msr	PRIMASK, r3
}
 8016690:	46c0      	nop			; (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2204      	movs	r2, #4
 8016696:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	3330      	adds	r3, #48	; 0x30
 801669c:	0018      	movs	r0, r3
 801669e:	f000 fd57 	bl	8017150 <_ux_utility_semaphore_put>
 80166a2:	e005      	b.n	80166b0 <_ux_device_stack_transfer_abort+0x60>
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	f383 8810 	msr	PRIMASK, r3
}
 80166ae:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 80166b0:	2300      	movs	r3, #0
}
 80166b2:	0018      	movs	r0, r3
 80166b4:	46bd      	mov	sp, r7
 80166b6:	b008      	add	sp, #32
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	46c0      	nop			; (mov r8, r8)
 80166bc:	20010c9c 	.word	0x20010c9c

080166c0 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	3330      	adds	r3, #48	; 0x30
 80166ce:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 80166d0:	683a      	ldr	r2, [r7, #0]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	0011      	movs	r1, r2
 80166d6:	0018      	movs	r0, r3
 80166d8:	f7ff ffba 	bl	8016650 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80166dc:	2300      	movs	r3, #0
}
 80166de:	0018      	movs	r0, r3
 80166e0:	46bd      	mov	sp, r7
 80166e2:	b004      	add	sp, #16
 80166e4:	bd80      	pop	{r7, pc}
	...

080166e8 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b08c      	sub	sp, #48	; 0x30
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	60f8      	str	r0, [r7, #12]
 80166f0:	60b9      	str	r1, [r7, #8]
 80166f2:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166f8:	2b01      	cmp	r3, #1
 80166fa:	d101      	bne.n	8016700 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 80166fc:	2300      	movs	r3, #0
 80166fe:	e073      	b.n	80167e8 <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8016700:	f3ef 8310 	mrs	r3, PRIMASK
 8016704:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8016706:	b672      	cpsid	i
    return(primask_value);
 8016708:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 801670a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 801670c:	4b38      	ldr	r3, [pc, #224]	; (80167f0 <_ux_device_stack_transfer_request+0x108>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	6a1b      	ldr	r3, [r3, #32]
 8016712:	62bb      	str	r3, [r7, #40]	; 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8016714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016716:	2b01      	cmp	r3, #1
 8016718:	d005      	beq.n	8016726 <_ux_device_stack_transfer_request+0x3e>
 801671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671c:	2b02      	cmp	r3, #2
 801671e:	d002      	beq.n	8016726 <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 8016720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016722:	2b03      	cmp	r3, #3
 8016724:	d114      	bne.n	8016750 <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2201      	movs	r2, #1
 801672a:	601a      	str	r2, [r3, #0]
 801672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801672e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8016730:	697b      	ldr	r3, [r7, #20]
 8016732:	f383 8810 	msr	PRIMASK, r3
}
 8016736:	46c0      	nop			; (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016738:	4b2d      	ldr	r3, [pc, #180]	; (80167f0 <_ux_device_stack_transfer_request+0x108>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	689b      	ldr	r3, [r3, #8]
 8016742:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8016744:	6a3b      	ldr	r3, [r7, #32]
 8016746:	699b      	ldr	r3, [r3, #24]
 8016748:	2203      	movs	r2, #3
 801674a:	4013      	ands	r3, r2
 801674c:	d10b      	bne.n	8016766 <_ux_device_stack_transfer_request+0x7e>
 801674e:	e01a      	b.n	8016786 <_ux_device_stack_transfer_request+0x9e>
 8016750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016752:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	f383 8810 	msr	PRIMASK, r3
}
 801675a:	46c0      	nop			; (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 801675c:	2325      	movs	r3, #37	; 0x25
 801675e:	e043      	b.n	80167e8 <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8016760:	2064      	movs	r0, #100	; 0x64
 8016762:	f000 f91d 	bl	80169a0 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8016766:	6a3b      	ldr	r3, [r7, #32]
 8016768:	685b      	ldr	r3, [r3, #4]
 801676a:	2b02      	cmp	r3, #2
 801676c:	d0f8      	beq.n	8016760 <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 801676e:	6a3b      	ldr	r3, [r7, #32]
 8016770:	695b      	ldr	r3, [r3, #20]
 8016772:	2280      	movs	r2, #128	; 0x80
 8016774:	4013      	ands	r3, r2
 8016776:	d003      	beq.n	8016780 <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	2203      	movs	r2, #3
 801677c:	629a      	str	r2, [r3, #40]	; 0x28
 801677e:	e002      	b.n	8016786 <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2202      	movs	r2, #2
 8016784:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801678a:	2b03      	cmp	r3, #3
 801678c:	d113      	bne.n	80167b6 <_ux_device_stack_transfer_request+0xce>
 801678e:	68bb      	ldr	r3, [r7, #8]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d010      	beq.n	80167b6 <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	429a      	cmp	r2, r3
 801679a:	d00c      	beq.n	80167b6 <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 801679c:	6a3b      	ldr	r3, [r7, #32]
 801679e:	69da      	ldr	r2, [r3, #28]
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	0011      	movs	r1, r2
 80167a4:	0018      	movs	r0, r3
 80167a6:	f7ef ff8d 	bl	80066c4 <__aeabi_uidivmod>
 80167aa:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 80167ac:	d103      	bne.n	80167b6 <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	2201      	movs	r2, #1
 80167b2:	651a      	str	r2, [r3, #80]	; 0x50
 80167b4:	e002      	b.n	80167bc <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2200      	movs	r2, #0
 80167ba:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2200      	movs	r2, #0
 80167c0:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	68ba      	ldr	r2, [r7, #8]
 80167c6:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	68ba      	ldr	r2, [r7, #8]
 80167cc:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 80167d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d8:	699b      	ldr	r3, [r3, #24]
 80167da:	68fa      	ldr	r2, [r7, #12]
 80167dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167de:	210c      	movs	r1, #12
 80167e0:	4798      	blx	r3
 80167e2:	0003      	movs	r3, r0
 80167e4:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 80167e6:	69fb      	ldr	r3, [r7, #28]

#endif
}
 80167e8:	0018      	movs	r0, r3
 80167ea:	46bd      	mov	sp, r7
 80167ec:	b00c      	add	sp, #48	; 0x30
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	20010c9c 	.word	0x20010c9c

080167f4 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8016800:	4b0c      	ldr	r3, [pc, #48]	; (8016834 <_ux_system_error_handler+0x40>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	687a      	ldr	r2, [r7, #4]
 8016806:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8016808:	4b0a      	ldr	r3, [pc, #40]	; (8016834 <_ux_system_error_handler+0x40>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801680e:	3201      	adds	r2, #1
 8016810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8016812:	4b08      	ldr	r3, [pc, #32]	; (8016834 <_ux_system_error_handler+0x40>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016818:	2b00      	cmp	r3, #0
 801681a:	d006      	beq.n	801682a <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 801681c:	4b05      	ldr	r3, [pc, #20]	; (8016834 <_ux_system_error_handler+0x40>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016822:	687a      	ldr	r2, [r7, #4]
 8016824:	68b9      	ldr	r1, [r7, #8]
 8016826:	68f8      	ldr	r0, [r7, #12]
 8016828:	4798      	blx	r3
    }
}
 801682a:	46c0      	nop			; (mov r8, r8)
 801682c:	46bd      	mov	sp, r7
 801682e:	b004      	add	sp, #16
 8016830:	bd80      	pop	{r7, pc}
 8016832:	46c0      	nop			; (mov r8, r8)
 8016834:	20010ca0 	.word	0x20010ca0

08016838 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b08a      	sub	sp, #40	; 0x28
 801683c:	af00      	add	r7, sp, #0
 801683e:	60f8      	str	r0, [r7, #12]
 8016840:	60b9      	str	r1, [r7, #8]
 8016842:	607a      	str	r2, [r7, #4]
 8016844:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8016846:	68ba      	ldr	r2, [r7, #8]
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	2100      	movs	r1, #0
 801684c:	0018      	movs	r0, r3
 801684e:	f000 fbb9 	bl	8016fc4 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8016852:	4b50      	ldr	r3, [pc, #320]	; (8016994 <_ux_system_initialize+0x15c>)
 8016854:	68fa      	ldr	r2, [r7, #12]
 8016856:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8016858:	235c      	movs	r3, #92	; 0x5c
 801685a:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801685c:	68fa      	ldr	r2, [r7, #12]
 801685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016860:	18d2      	adds	r2, r2, r3
 8016862:	4b4d      	ldr	r3, [pc, #308]	; (8016998 <_ux_system_initialize+0x160>)
 8016864:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8016866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016868:	33d1      	adds	r3, #209	; 0xd1
 801686a:	33ff      	adds	r3, #255	; 0xff
 801686c:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 801686e:	4b49      	ldr	r3, [pc, #292]	; (8016994 <_ux_system_initialize+0x15c>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	68f9      	ldr	r1, [r7, #12]
 8016874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016876:	188a      	adds	r2, r1, r2
 8016878:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 801687a:	4b46      	ldr	r3, [pc, #280]	; (8016994 <_ux_system_initialize+0x15c>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 8016882:	6a3b      	ldr	r3, [r7, #32]
 8016884:	330f      	adds	r3, #15
 8016886:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016888:	6a3b      	ldr	r3, [r7, #32]
 801688a:	220f      	movs	r2, #15
 801688c:	4393      	bics	r3, r2
 801688e:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8016890:	68fa      	ldr	r2, [r7, #12]
 8016892:	68bb      	ldr	r3, [r7, #8]
 8016894:	18d3      	adds	r3, r2, r3
 8016896:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	6a3a      	ldr	r2, [r7, #32]
 801689c:	429a      	cmp	r2, r3
 801689e:	d301      	bcc.n	80168a4 <_ux_system_initialize+0x6c>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 80168a0:	2312      	movs	r3, #18
 80168a2:	e073      	b.n	801698c <_ux_system_initialize+0x154>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 80168a4:	69f9      	ldr	r1, [r7, #28]
 80168a6:	4b3b      	ldr	r3, [pc, #236]	; (8016994 <_ux_system_initialize+0x15c>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	6a3a      	ldr	r2, [r7, #32]
 80168ac:	1a8a      	subs	r2, r1, r2
 80168ae:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 80168b0:	4b38      	ldr	r3, [pc, #224]	; (8016994 <_ux_system_initialize+0x15c>)
 80168b2:	681a      	ldr	r2, [r3, #0]
 80168b4:	4b37      	ldr	r3, [pc, #220]	; (8016994 <_ux_system_initialize+0x15c>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	6852      	ldr	r2, [r2, #4]
 80168ba:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 80168bc:	4b35      	ldr	r3, [pc, #212]	; (8016994 <_ux_system_initialize+0x15c>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	6a3a      	ldr	r2, [r7, #32]
 80168c2:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 80168c4:	4b33      	ldr	r3, [pc, #204]	; (8016994 <_ux_system_initialize+0x15c>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80168cc:	4b31      	ldr	r3, [pc, #196]	; (8016994 <_ux_system_initialize+0x15c>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	685b      	ldr	r3, [r3, #4]
 80168d2:	3b10      	subs	r3, #16
 80168d4:	001a      	movs	r2, r3
 80168d6:	69bb      	ldr	r3, [r7, #24]
 80168d8:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	2200      	movs	r2, #0
 80168de:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d112      	bne.n	801690c <_ux_system_initialize+0xd4>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 80168e6:	4b2b      	ldr	r3, [pc, #172]	; (8016994 <_ux_system_initialize+0x15c>)
 80168e8:	681a      	ldr	r2, [r3, #0]
 80168ea:	4b2a      	ldr	r3, [pc, #168]	; (8016994 <_ux_system_initialize+0x15c>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	6852      	ldr	r2, [r2, #4]
 80168f0:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 80168f2:	4b28      	ldr	r3, [pc, #160]	; (8016994 <_ux_system_initialize+0x15c>)
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	4b27      	ldr	r3, [pc, #156]	; (8016994 <_ux_system_initialize+0x15c>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	6892      	ldr	r2, [r2, #8]
 80168fc:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 80168fe:	4b25      	ldr	r3, [pc, #148]	; (8016994 <_ux_system_initialize+0x15c>)
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	4b24      	ldr	r3, [pc, #144]	; (8016994 <_ux_system_initialize+0x15c>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	6812      	ldr	r2, [r2, #0]
 8016908:	60da      	str	r2, [r3, #12]
 801690a:	e02f      	b.n	801696c <_ux_system_initialize+0x134>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8016910:	6a3b      	ldr	r3, [r7, #32]
 8016912:	330f      	adds	r3, #15
 8016914:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016916:	6a3b      	ldr	r3, [r7, #32]
 8016918:	220f      	movs	r2, #15
 801691a:	4393      	bics	r3, r2
 801691c:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 801691e:	4b1d      	ldr	r3, [pc, #116]	; (8016994 <_ux_system_initialize+0x15c>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	683a      	ldr	r2, [r7, #0]
 8016924:	3a0f      	subs	r2, #15
 8016926:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 8016928:	4b1a      	ldr	r3, [pc, #104]	; (8016994 <_ux_system_initialize+0x15c>)
 801692a:	681a      	ldr	r2, [r3, #0]
 801692c:	4b19      	ldr	r3, [pc, #100]	; (8016994 <_ux_system_initialize+0x15c>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	6912      	ldr	r2, [r2, #16]
 8016932:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8016934:	4b17      	ldr	r3, [pc, #92]	; (8016994 <_ux_system_initialize+0x15c>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	6a3a      	ldr	r2, [r7, #32]
 801693a:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 801693c:	4b15      	ldr	r3, [pc, #84]	; (8016994 <_ux_system_initialize+0x15c>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	68d8      	ldr	r0, [r3, #12]
 8016942:	4b14      	ldr	r3, [pc, #80]	; (8016994 <_ux_system_initialize+0x15c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	691b      	ldr	r3, [r3, #16]
 8016948:	001a      	movs	r2, r3
 801694a:	2100      	movs	r1, #0
 801694c:	f000 fb3a 	bl	8016fc4 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 8016950:	4b10      	ldr	r3, [pc, #64]	; (8016994 <_ux_system_initialize+0x15c>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016958:	4b0e      	ldr	r3, [pc, #56]	; (8016994 <_ux_system_initialize+0x15c>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	691b      	ldr	r3, [r3, #16]
 801695e:	3b10      	subs	r3, #16
 8016960:	001a      	movs	r2, r3
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	2200      	movs	r2, #0
 801696a:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 801696c:	4b09      	ldr	r3, [pc, #36]	; (8016994 <_ux_system_initialize+0x15c>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	331c      	adds	r3, #28
 8016972:	4a0a      	ldr	r2, [pc, #40]	; (801699c <_ux_system_initialize+0x164>)
 8016974:	0011      	movs	r1, r2
 8016976:	0018      	movs	r0, r3
 8016978:	f000 fb40 	bl	8016ffc <_ux_utility_mutex_create>
 801697c:	0003      	movs	r3, r0
 801697e:	617b      	str	r3, [r7, #20]
    if(status != UX_SUCCESS)
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d001      	beq.n	801698a <_ux_system_initialize+0x152>
        return(UX_MUTEX_ERROR);
 8016986:	2317      	movs	r3, #23
 8016988:	e000      	b.n	801698c <_ux_system_initialize+0x154>
#endif

    return(UX_SUCCESS);
 801698a:	2300      	movs	r3, #0
}
 801698c:	0018      	movs	r0, r3
 801698e:	46bd      	mov	sp, r7
 8016990:	b00a      	add	sp, #40	; 0x28
 8016992:	bd80      	pop	{r7, pc}
 8016994:	20010ca0 	.word	0x20010ca0
 8016998:	20010c9c 	.word	0x20010c9c
 801699c:	0801a1e8 	.word	0x0801a1e8

080169a0 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 80169a8:	687a      	ldr	r2, [r7, #4]
 80169aa:	0013      	movs	r3, r2
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	189b      	adds	r3, r3, r2
 80169b0:	01da      	lsls	r2, r3, #7
 80169b2:	1ad2      	subs	r2, r2, r3
 80169b4:	00d3      	lsls	r3, r2, #3
 80169b6:	001a      	movs	r2, r3
 80169b8:	23fa      	movs	r3, #250	; 0xfa
 80169ba:	0099      	lsls	r1, r3, #2
 80169bc:	0010      	movs	r0, r2
 80169be:	f7ef fdfb 	bl	80065b8 <__udivsi3>
 80169c2:	0003      	movs	r3, r0
 80169c4:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	3301      	adds	r3, #1
 80169ca:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	0018      	movs	r0, r3
 80169d0:	f7fc f8a4 	bl	8012b1c <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 80169d4:	46c0      	nop			; (mov r8, r8)
}
 80169d6:	46bd      	mov	sp, r7
 80169d8:	b004      	add	sp, #16
 80169da:	bd80      	pop	{r7, pc}

080169dc <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
 80169e8:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 80169ea:	e028      	b.n	8016a3e <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	1c5a      	adds	r2, r3, #1
 80169f0:	60ba      	str	r2, [r7, #8]
 80169f2:	781b      	ldrb	r3, [r3, #0]
 80169f4:	2b02      	cmp	r3, #2
 80169f6:	d00c      	beq.n	8016a12 <_ux_utility_descriptor_parse+0x36>
 80169f8:	2b04      	cmp	r3, #4
 80169fa:	d115      	bne.n	8016a28 <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	0018      	movs	r0, r3
 8016a00:	f000 f87d 	bl	8016afe <_ux_utility_long_get>
 8016a04:	0002      	movs	r2, r0
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	60fb      	str	r3, [r7, #12]
            break;                   
 8016a10:	e012      	b.n	8016a38 <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	0018      	movs	r0, r3
 8016a16:	f000 fbaa 	bl	801716e <_ux_utility_short_get>
 8016a1a:	0002      	movs	r2, r0
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	3302      	adds	r3, #2
 8016a24:	60fb      	str	r3, [r7, #12]
            break;                   
 8016a26:	e007      	b.n	8016a38 <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	001a      	movs	r2, r3
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	3301      	adds	r3, #1
 8016a36:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	1e5a      	subs	r2, r3, #1
 8016a42:	607a      	str	r2, [r7, #4]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d1d1      	bne.n	80169ec <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8016a48:	46c0      	nop			; (mov r8, r8)
}
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	b004      	add	sp, #16
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <_ux_utility_event_flags_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b084      	sub	sp, #16
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	6039      	str	r1, [r7, #0]

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 8016a5a:	6839      	ldr	r1, [r7, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2224      	movs	r2, #36	; 0x24
 8016a60:	0018      	movs	r0, r3
 8016a62:	f7fd f89f 	bl	8013ba4 <_txe_event_flags_create>
 8016a66:	0003      	movs	r3, r0
 8016a68:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d004      	beq.n	8016a7a <_ux_utility_event_flags_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 8016a70:	2218      	movs	r2, #24
 8016a72:	2108      	movs	r1, #8
 8016a74:	2002      	movs	r0, #2
 8016a76:	f7ff febd 	bl	80167f4 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8016a7a:	68fb      	ldr	r3, [r7, #12]
}
 8016a7c:	0018      	movs	r0, r3
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	b004      	add	sp, #16
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <_ux_utility_event_flags_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr)            
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b084      	sub	sp, #16
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	0018      	movs	r0, r3
 8016a90:	f7fd f91a 	bl	8013cc8 <_txe_event_flags_delete>
 8016a94:	0003      	movs	r3, r0
 8016a96:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8016a98:	68fb      	ldr	r3, [r7, #12]
}
 8016a9a:	0018      	movs	r0, r3
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	b004      	add	sp, #16
 8016aa0:	bd80      	pop	{r7, pc}

08016aa2 <_ux_utility_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8016aa2:	b590      	push	{r4, r7, lr}
 8016aa4:	b089      	sub	sp, #36	; 0x24
 8016aa6:	af02      	add	r7, sp, #8
 8016aa8:	60f8      	str	r0, [r7, #12]
 8016aaa:	60b9      	str	r1, [r7, #8]
 8016aac:	607a      	str	r2, [r7, #4]
 8016aae:	603b      	str	r3, [r7, #0]

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 8016ab0:	2310      	movs	r3, #16
 8016ab2:	18fc      	adds	r4, r7, r3
 8016ab4:	687a      	ldr	r2, [r7, #4]
 8016ab6:	68b9      	ldr	r1, [r7, #8]
 8016ab8:	68f8      	ldr	r0, [r7, #12]
 8016aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016abc:	9300      	str	r3, [sp, #0]
 8016abe:	0023      	movs	r3, r4
 8016ac0:	f7fd f940 	bl	8013d44 <_txe_event_flags_get>
 8016ac4:	0003      	movs	r3, r0
 8016ac6:	617b      	str	r3, [r7, #20]

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 8016ac8:	693a      	ldr	r2, [r7, #16]
 8016aca:	683b      	ldr	r3, [r7, #0]
 8016acc:	601a      	str	r2, [r3, #0]
    
    /* Return completion status.  */
    return(status);
 8016ace:	697b      	ldr	r3, [r7, #20]
}
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	b007      	add	sp, #28
 8016ad6:	bd90      	pop	{r4, r7, pc}

08016ad8 <_ux_utility_event_flags_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,
                                  UINT set_option)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b086      	sub	sp, #24
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	60f8      	str	r0, [r7, #12]
 8016ae0:	60b9      	str	r1, [r7, #8]
 8016ae2:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to set the event flags.  */
    status =  tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8016ae4:	687a      	ldr	r2, [r7, #4]
 8016ae6:	68b9      	ldr	r1, [r7, #8]
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	0018      	movs	r0, r3
 8016aec:	f7fd f982 	bl	8013df4 <_txe_event_flags_set>
 8016af0:	0003      	movs	r3, r0
 8016af2:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016af4:	697b      	ldr	r3, [r7, #20]
}
 8016af6:	0018      	movs	r0, r3
 8016af8:	46bd      	mov	sp, r7
 8016afa:	b006      	add	sp, #24
 8016afc:	bd80      	pop	{r7, pc}

08016afe <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b084      	sub	sp, #16
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	1c5a      	adds	r2, r3, #1
 8016b0a:	607a      	str	r2, [r7, #4]
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	1c5a      	adds	r2, r3, #1
 8016b14:	607a      	str	r2, [r7, #4]
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	021b      	lsls	r3, r3, #8
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	4313      	orrs	r3, r2
 8016b1e:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	1c5a      	adds	r2, r3, #1
 8016b24:	607a      	str	r2, [r7, #4]
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	041b      	lsls	r3, r3, #16
 8016b2a:	68fa      	ldr	r2, [r7, #12]
 8016b2c:	4313      	orrs	r3, r2
 8016b2e:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	061b      	lsls	r3, r3, #24
 8016b36:	68fa      	ldr	r2, [r7, #12]
 8016b38:	4313      	orrs	r3, r2
 8016b3a:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8016b3c:	68fb      	ldr	r3, [r7, #12]
}
 8016b3e:	0018      	movs	r0, r3
 8016b40:	46bd      	mov	sp, r7
 8016b42:	b004      	add	sp, #16
 8016b44:	bd80      	pop	{r7, pc}
	...

08016b48 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b08c      	sub	sp, #48	; 0x30
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	60f8      	str	r0, [r7, #12]
 8016b50:	60b9      	str	r1, [r7, #8]
 8016b52:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8016b54:	4b7f      	ldr	r3, [pc, #508]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	331c      	adds	r3, #28
 8016b5a:	0018      	movs	r0, r3
 8016b5c:	f000 fa75 	bl	801704a <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	3301      	adds	r3, #1
 8016b64:	d101      	bne.n	8016b6a <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
 8016b66:	2300      	movs	r3, #0
 8016b68:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	2b0e      	cmp	r3, #14
 8016b6e:	d801      	bhi.n	8016b74 <_ux_utility_memory_allocate+0x2c>
        memory_alignment =  UX_ALIGN_MIN;
 8016b70:	230f      	movs	r3, #15
 8016b72:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	330f      	adds	r3, #15
 8016b82:	220f      	movs	r2, #15
 8016b84:	4393      	bics	r3, r2
 8016b86:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8c:	18d3      	adds	r3, r2, r3
 8016b8e:	3310      	adds	r3, #16
 8016b90:	001a      	movs	r2, r3
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	0011      	movs	r1, r2
 8016b96:	0018      	movs	r0, r3
 8016b98:	f000 f9d4 	bl	8016f44 <_ux_utility_memory_free_block_best_get>
 8016b9c:	0003      	movs	r3, r0
 8016b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8016ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d10c      	bne.n	8016bc0 <_ux_utility_memory_allocate+0x78>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8016ba6:	4b6b      	ldr	r3, [pc, #428]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	331c      	adds	r3, #28
 8016bac:	0018      	movs	r0, r3
 8016bae:	f000 fa40 	bl	8017032 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8016bb2:	2212      	movs	r2, #18
 8016bb4:	2108      	movs	r1, #8
 8016bb6:	2002      	movs	r0, #2
 8016bb8:	f7ff fe1c 	bl	80167f4 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	e0c5      	b.n	8016d4c <_ux_utility_memory_allocate+0x204>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8016bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc2:	3310      	adds	r3, #16
 8016bc4:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	3b01      	subs	r3, #1
 8016bca:	6a3a      	ldr	r2, [r7, #32]
 8016bcc:	4013      	ands	r3, r2
 8016bce:	d127      	bne.n	8016c20 <_ux_utility_memory_allocate+0xd8>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	3310      	adds	r3, #16
 8016bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bd6:	18d3      	adds	r3, r2, r3
 8016bd8:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8016bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bdc:	689a      	ldr	r2, [r3, #8]
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016be6:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bea:	681a      	ldr	r2, [r3, #0]
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	1ad3      	subs	r3, r2, r3
 8016bf0:	3b10      	subs	r3, #16
 8016bf2:	001a      	movs	r2, r3
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8016bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8016c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c06:	69fa      	ldr	r2, [r7, #28]
 8016c08:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	2280      	movs	r2, #128	; 0x80
 8016c0e:	0612      	lsls	r2, r2, #24
 8016c10:	431a      	orrs	r2, r3
 8016c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c14:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	3310      	adds	r3, #16
 8016c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c1e:	e05f      	b.n	8016ce0 <_ux_utility_memory_allocate+0x198>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016c20:	6a3b      	ldr	r3, [r7, #32]
 8016c22:	3310      	adds	r3, #16
 8016c24:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 8016c26:	68fa      	ldr	r2, [r7, #12]
 8016c28:	6a3b      	ldr	r3, [r7, #32]
 8016c2a:	18d3      	adds	r3, r2, r3
 8016c2c:	3b01      	subs	r3, #1
 8016c2e:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	425a      	negs	r2, r3
 8016c34:	6a3b      	ldr	r3, [r7, #32]
 8016c36:	4013      	ands	r3, r2
 8016c38:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8016c3a:	6a3b      	ldr	r3, [r7, #32]
 8016c3c:	3b10      	subs	r3, #16
 8016c3e:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c44:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8016c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c48:	689a      	ldr	r2, [r3, #8]
 8016c4a:	69fb      	ldr	r3, [r7, #28]
 8016c4c:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8016c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	2280      	movs	r2, #128	; 0x80
 8016c5a:	0612      	lsls	r2, r2, #24
 8016c5c:	431a      	orrs	r2, r3
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8016c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c64:	3310      	adds	r3, #16
 8016c66:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8016c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c6a:	69fa      	ldr	r2, [r7, #28]
 8016c6c:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8016c6e:	69fa      	ldr	r2, [r7, #28]
 8016c70:	6a3b      	ldr	r3, [r7, #32]
 8016c72:	1ad2      	subs	r2, r2, r3
 8016c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c76:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	1ad3      	subs	r3, r2, r3
 8016c82:	3b10      	subs	r3, #16
 8016c84:	001a      	movs	r2, r3
 8016c86:	69fb      	ldr	r3, [r7, #28]
 8016c88:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8016c8a:	69fb      	ldr	r3, [r7, #28]
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	1ad3      	subs	r3, r2, r3
 8016c92:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 8016c94:	69bb      	ldr	r3, [r7, #24]
 8016c96:	2b10      	cmp	r3, #16
 8016c98:	d91c      	bls.n	8016cd4 <_ux_utility_memory_allocate+0x18c>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8016c9a:	69fa      	ldr	r2, [r7, #28]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	18d3      	adds	r3, r2, r3
 8016ca0:	3310      	adds	r3, #16
 8016ca2:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8016ca4:	69fb      	ldr	r3, [r7, #28]
 8016ca6:	689a      	ldr	r2, [r3, #8]
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	69fa      	ldr	r2, [r7, #28]
 8016cb0:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016cb2:	69bb      	ldr	r3, [r7, #24]
 8016cb4:	3b10      	subs	r3, #16
 8016cb6:	001a      	movs	r2, r3
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8016cc2:	69fb      	ldr	r3, [r7, #28]
 8016cc4:	697a      	ldr	r2, [r7, #20]
 8016cc6:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8016cc8:	69fb      	ldr	r3, [r7, #28]
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	69bb      	ldr	r3, [r7, #24]
 8016cce:	1ad2      	subs	r2, r2, r3
 8016cd0:	69fb      	ldr	r3, [r7, #28]
 8016cd2:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016cd4:	69fb      	ldr	r3, [r7, #28]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	3310      	adds	r3, #16
 8016cda:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 8016cdc:	69fb      	ldr	r3, [r7, #28]
 8016cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8016ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce2:	3310      	adds	r3, #16
 8016ce4:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 8016ce6:	687a      	ldr	r2, [r7, #4]
 8016ce8:	693b      	ldr	r3, [r7, #16]
 8016cea:	2100      	movs	r1, #0
 8016cec:	0018      	movs	r0, r3
 8016cee:	f000 f969 	bl	8016fc4 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8016cf2:	4b18      	ldr	r3, [pc, #96]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	68da      	ldr	r2, [r3, #12]
 8016cf8:	4b16      	ldr	r3, [pc, #88]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d108      	bne.n	8016d14 <_ux_utility_memory_allocate+0x1cc>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8016d02:	4b14      	ldr	r3, [pc, #80]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	6899      	ldr	r1, [r3, #8]
 8016d08:	4b12      	ldr	r3, [pc, #72]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d0e:	1a8a      	subs	r2, r1, r2
 8016d10:	609a      	str	r2, [r3, #8]
 8016d12:	e014      	b.n	8016d3e <_ux_utility_memory_allocate+0x1f6>
    }
    else
    {

       switch (memory_cache_flag)
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	2b01      	cmp	r3, #1
 8016d18:	d108      	bne.n	8016d2c <_ux_utility_memory_allocate+0x1e4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8016d1a:	4b0e      	ldr	r3, [pc, #56]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	6959      	ldr	r1, [r3, #20]
 8016d20:	4b0c      	ldr	r3, [pc, #48]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d26:	1a8a      	subs	r2, r1, r2
 8016d28:	615a      	str	r2, [r3, #20]

            break;
 8016d2a:	e008      	b.n	8016d3e <_ux_utility_memory_allocate+0x1f6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8016d2c:	4b09      	ldr	r3, [pc, #36]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	6899      	ldr	r1, [r3, #8]
 8016d32:	4b08      	ldr	r3, [pc, #32]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d38:	1a8a      	subs	r2, r1, r2
 8016d3a:	609a      	str	r2, [r3, #8]
            break;
 8016d3c:	46c0      	nop			; (mov r8, r8)
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8016d3e:	4b05      	ldr	r3, [pc, #20]	; (8016d54 <_ux_utility_memory_allocate+0x20c>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	331c      	adds	r3, #28
 8016d44:	0018      	movs	r0, r3
 8016d46:	f000 f974 	bl	8017032 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 8016d4a:	693b      	ldr	r3, [r7, #16]
}                                
 8016d4c:	0018      	movs	r0, r3
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	b00c      	add	sp, #48	; 0x30
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	20010ca0 	.word	0x20010ca0

08016d58 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8016d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d5a:	b085      	sub	sp, #20
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	607a      	str	r2, [r7, #4]
 8016d64:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8016d66:	683b      	ldr	r3, [r7, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d024      	beq.n	8016db6 <_ux_utility_memory_allocate_mulc_safe+0x5e>
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	0c19      	lsrs	r1, r3, #16
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	1c1e      	adds	r6, r3, #0
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	0c1b      	lsrs	r3, r3, #16
 8016d7a:	683a      	ldr	r2, [r7, #0]
 8016d7c:	1c15      	adds	r5, r2, #0
 8016d7e:	b28a      	uxth	r2, r1
 8016d80:	2a00      	cmp	r2, #0
 8016d82:	d105      	bne.n	8016d90 <_ux_utility_memory_allocate_mulc_safe+0x38>
 8016d84:	b29a      	uxth	r2, r3
 8016d86:	2a00      	cmp	r2, #0
 8016d88:	d013      	beq.n	8016db2 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8016d8a:	1c19      	adds	r1, r3, #0
 8016d8c:	1c34      	adds	r4, r6, #0
 8016d8e:	e003      	b.n	8016d98 <_ux_utility_memory_allocate_mulc_safe+0x40>
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d10c      	bne.n	8016db0 <_ux_utility_memory_allocate_mulc_safe+0x58>
 8016d96:	1c2c      	adds	r4, r5, #0
 8016d98:	b2b3      	uxth	r3, r6
 8016d9a:	b2aa      	uxth	r2, r5
 8016d9c:	435a      	muls	r2, r3
 8016d9e:	b2a3      	uxth	r3, r4
 8016da0:	b289      	uxth	r1, r1
 8016da2:	434b      	muls	r3, r1
 8016da4:	0c12      	lsrs	r2, r2, #16
 8016da6:	189b      	adds	r3, r3, r2
 8016da8:	141b      	asrs	r3, r3, #16
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d000      	beq.n	8016db2 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8016db0:	2001      	movs	r0, #1
 8016db2:	1e03      	subs	r3, r0, #0
 8016db4:	d109      	bne.n	8016dca <_ux_utility_memory_allocate_mulc_safe+0x72>
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	683a      	ldr	r2, [r7, #0]
 8016dba:	435a      	muls	r2, r3
 8016dbc:	68b9      	ldr	r1, [r7, #8]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	0018      	movs	r0, r3
 8016dc2:	f7ff fec1 	bl	8016b48 <_ux_utility_memory_allocate>
 8016dc6:	0003      	movs	r3, r0
 8016dc8:	e000      	b.n	8016dcc <_ux_utility_memory_allocate_mulc_safe+0x74>
 8016dca:	2300      	movs	r3, #0
}
 8016dcc:	0018      	movs	r0, r3
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	b005      	add	sp, #20
 8016dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016dd4 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b086      	sub	sp, #24
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 8016de8:	e007      	b.n	8016dfa <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 8016dea:	697a      	ldr	r2, [r7, #20]
 8016dec:	1c53      	adds	r3, r2, #1
 8016dee:	617b      	str	r3, [r7, #20]
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	1c59      	adds	r1, r3, #1
 8016df4:	6139      	str	r1, [r7, #16]
 8016df6:	7812      	ldrb	r2, [r2, #0]
 8016df8:	701a      	strb	r2, [r3, #0]
    while(length--)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	1e5a      	subs	r2, r3, #1
 8016dfe:	607a      	str	r2, [r7, #4]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d1f2      	bne.n	8016dea <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8016e04:	46c0      	nop			; (mov r8, r8)
}
 8016e06:	46bd      	mov	sp, r7
 8016e08:	b006      	add	sp, #24
 8016e0a:	bd80      	pop	{r7, pc}

08016e0c <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b086      	sub	sp, #24
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8016e14:	4b49      	ldr	r3, [pc, #292]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	331c      	adds	r3, #28
 8016e1a:	0018      	movs	r0, r3
 8016e1c:	f000 f915 	bl	801704a <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	3b10      	subs	r3, #16
 8016e24:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	3310      	adds	r3, #16
 8016e2c:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	685a      	ldr	r2, [r3, #4]
 8016e32:	2380      	movs	r3, #128	; 0x80
 8016e34:	061b      	lsls	r3, r3, #24
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d010      	beq.n	8016e5c <_ux_utility_memory_free+0x50>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8016e3e:	4a40      	ldr	r2, [pc, #256]	; (8016f40 <_ux_utility_memory_free+0x134>)
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d00b      	beq.n	8016e5c <_ux_utility_memory_free+0x50>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8016e44:	4b3d      	ldr	r3, [pc, #244]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	331c      	adds	r3, #28
 8016e4a:	0018      	movs	r0, r3
 8016e4c:	f000 f8f1 	bl	8017032 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 8016e50:	2219      	movs	r2, #25
 8016e52:	2108      	movs	r1, #8
 8016e54:	2002      	movs	r0, #2
 8016e56:	f7ff fccd 	bl	80167f4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 8016e5a:	e06c      	b.n	8016f36 <_ux_utility_memory_free+0x12a>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	2200      	movs	r2, #0
 8016e60:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8016e62:	e007      	b.n	8016e74 <_ux_utility_memory_free+0x68>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d107      	bne.n	8016e7e <_ux_utility_memory_free+0x72>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	68db      	ldr	r3, [r3, #12]
 8016e72:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8016e74:	697b      	ldr	r3, [r7, #20]
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d1f3      	bne.n	8016e64 <_ux_utility_memory_free+0x58>
 8016e7c:	e000      	b.n	8016e80 <_ux_utility_memory_free+0x74>

        else

            /* The previous memory block is not free.  */
            break;
 8016e7e:	46c0      	nop			; (mov r8, r8)
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 8016e80:	697b      	ldr	r3, [r7, #20]
 8016e82:	689b      	ldr	r3, [r3, #8]
 8016e84:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8016e86:	e01a      	b.n	8016ebe <_ux_utility_memory_free+0xb2>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 8016e88:	693b      	ldr	r3, [r7, #16]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d006      	beq.n	8016e9e <_ux_utility_memory_free+0x92>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 8016e90:	697b      	ldr	r3, [r7, #20]
 8016e92:	693a      	ldr	r2, [r7, #16]
 8016e94:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	697a      	ldr	r2, [r7, #20]
 8016e9a:	60da      	str	r2, [r3, #12]
            break;
 8016e9c:	e012      	b.n	8016ec4 <_ux_utility_memory_free+0xb8>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	689a      	ldr	r2, [r3, #8]
 8016ea2:	697b      	ldr	r3, [r7, #20]
 8016ea4:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	681a      	ldr	r2, [r3, #0]
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	18d3      	adds	r3, r2, r3
 8016eb0:	3310      	adds	r3, #16
 8016eb2:	001a      	movs	r2, r3
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8016eb8:	693b      	ldr	r3, [r7, #16]
 8016eba:	689b      	ldr	r3, [r3, #8]
 8016ebc:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d1e1      	bne.n	8016e88 <_ux_utility_memory_free+0x7c>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8016ec4:	4b1d      	ldr	r3, [pc, #116]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	68da      	ldr	r2, [r3, #12]
 8016eca:	4b1c      	ldr	r3, [pc, #112]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d108      	bne.n	8016ee6 <_ux_utility_memory_free+0xda>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8016ed4:	4b19      	ldr	r3, [pc, #100]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	6899      	ldr	r1, [r3, #8]
 8016eda:	4b18      	ldr	r3, [pc, #96]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	68fa      	ldr	r2, [r7, #12]
 8016ee0:	188a      	adds	r2, r1, r2
 8016ee2:	609a      	str	r2, [r3, #8]
 8016ee4:	e020      	b.n	8016f28 <_ux_utility_memory_free+0x11c>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 8016ee6:	4b15      	ldr	r3, [pc, #84]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8016eee:	697a      	ldr	r2, [r7, #20]
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	d310      	bcc.n	8016f18 <_ux_utility_memory_free+0x10c>
 8016ef6:	4b11      	ldr	r3, [pc, #68]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	68ba      	ldr	r2, [r7, #8]
 8016efe:	18d3      	adds	r3, r2, r3
 8016f00:	697a      	ldr	r2, [r7, #20]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d208      	bcs.n	8016f18 <_ux_utility_memory_free+0x10c>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8016f06:	4b0d      	ldr	r3, [pc, #52]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	6899      	ldr	r1, [r3, #8]
 8016f0c:	4b0b      	ldr	r3, [pc, #44]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	68fa      	ldr	r2, [r7, #12]
 8016f12:	188a      	adds	r2, r1, r2
 8016f14:	609a      	str	r2, [r3, #8]
 8016f16:	e007      	b.n	8016f28 <_ux_utility_memory_free+0x11c>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8016f18:	4b08      	ldr	r3, [pc, #32]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	6959      	ldr	r1, [r3, #20]
 8016f1e:	4b07      	ldr	r3, [pc, #28]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	68fa      	ldr	r2, [r7, #12]
 8016f24:	188a      	adds	r2, r1, r2
 8016f26:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8016f28:	4b04      	ldr	r3, [pc, #16]	; (8016f3c <_ux_utility_memory_free+0x130>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	331c      	adds	r3, #28
 8016f2e:	0018      	movs	r0, r3
 8016f30:	f000 f87f 	bl	8017032 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 8016f34:	46c0      	nop			; (mov r8, r8)
}
 8016f36:	46bd      	mov	sp, r7
 8016f38:	b006      	add	sp, #24
 8016f3a:	bd80      	pop	{r7, pc}
 8016f3c:	20010ca0 	.word	0x20010ca0
 8016f40:	80000001 	.word	0x80000001

08016f44 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b084      	sub	sp, #16
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
 8016f4c:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d003      	beq.n	8016f60 <_ux_utility_memory_free_block_best_get+0x1c>
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2b01      	cmp	r3, #1
 8016f5c:	d005      	beq.n	8016f6a <_ux_utility_memory_free_block_best_get+0x26>
 8016f5e:	e009      	b.n	8016f74 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8016f60:	4b17      	ldr	r3, [pc, #92]	; (8016fc0 <_ux_utility_memory_free_block_best_get+0x7c>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	60fb      	str	r3, [r7, #12]
            break;
 8016f68:	e006      	b.n	8016f78 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8016f6a:	4b15      	ldr	r3, [pc, #84]	; (8016fc0 <_ux_utility_memory_free_block_best_get+0x7c>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	68db      	ldr	r3, [r3, #12]
 8016f70:	60fb      	str	r3, [r7, #12]
            break;
 8016f72:	e001      	b.n	8016f78 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8016f74:	2300      	movs	r3, #0
 8016f76:	e01e      	b.n	8016fb6 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 8016f78:	e019      	b.n	8016fae <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d112      	bne.n	8016fa8 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	683a      	ldr	r2, [r7, #0]
 8016f88:	429a      	cmp	r2, r3
 8016f8a:	d20d      	bcs.n	8016fa8 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d102      	bne.n	8016f98 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	60bb      	str	r3, [r7, #8]
 8016f96:	e007      	b.n	8016fa8 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	681a      	ldr	r2, [r3, #0]
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d201      	bcs.n	8016fa8 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	689b      	ldr	r3, [r3, #8]
 8016fac:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d1e2      	bne.n	8016f7a <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 8016fb4:	68bb      	ldr	r3, [r7, #8]
}                                
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	b004      	add	sp, #16
 8016fbc:	bd80      	pop	{r7, pc}
 8016fbe:	46c0      	nop			; (mov r8, r8)
 8016fc0:	20010ca0 	.word	0x20010ca0

08016fc4 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b086      	sub	sp, #24
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	607a      	str	r2, [r7, #4]
 8016fce:	230b      	movs	r3, #11
 8016fd0:	18fb      	adds	r3, r7, r3
 8016fd2:	1c0a      	adds	r2, r1, #0
 8016fd4:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 8016fda:	e006      	b.n	8016fea <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	1c5a      	adds	r2, r3, #1
 8016fe0:	617a      	str	r2, [r7, #20]
 8016fe2:	220b      	movs	r2, #11
 8016fe4:	18ba      	adds	r2, r7, r2
 8016fe6:	7812      	ldrb	r2, [r2, #0]
 8016fe8:	701a      	strb	r2, [r3, #0]
    while(length--)
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	1e5a      	subs	r2, r3, #1
 8016fee:	607a      	str	r2, [r7, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d1f3      	bne.n	8016fdc <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 8016ff4:	46c0      	nop			; (mov r8, r8)
}
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	b006      	add	sp, #24
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <_ux_utility_mutex_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 8017006:	6839      	ldr	r1, [r7, #0]
 8017008:	6878      	ldr	r0, [r7, #4]
 801700a:	2334      	movs	r3, #52	; 0x34
 801700c:	2200      	movs	r2, #0
 801700e:	f7fc ff21 	bl	8013e54 <_txe_mutex_create>
 8017012:	0003      	movs	r3, r0
 8017014:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d005      	beq.n	8017028 <_ux_utility_mutex_create+0x2c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	001a      	movs	r2, r3
 8017020:	2108      	movs	r1, #8
 8017022:	2002      	movs	r0, #2
 8017024:	f7ff fbe6 	bl	80167f4 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8017028:	68fb      	ldr	r3, [r7, #12]
}
 801702a:	0018      	movs	r0, r3
 801702c:	46bd      	mov	sp, r7
 801702e:	b004      	add	sp, #16
 8017030:	bd80      	pop	{r7, pc}

08017032 <_ux_utility_mutex_off>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 8017032:	b580      	push	{r7, lr}
 8017034:	b082      	sub	sp, #8
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	0018      	movs	r0, r3
 801703e:	f7fd f805 	bl	801404c <_txe_mutex_put>

    /* Return to caller.  */
    return;
 8017042:	46c0      	nop			; (mov r8, r8)
}
 8017044:	46bd      	mov	sp, r7
 8017046:	b002      	add	sp, #8
 8017048:	bd80      	pop	{r7, pc}

0801704a <_ux_utility_mutex_on>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 801704a:	b580      	push	{r7, lr}
 801704c:	b084      	sub	sp, #16
 801704e:	af00      	add	r7, sp, #0
 8017050:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 8017052:	2301      	movs	r3, #1
 8017054:	425a      	negs	r2, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	0011      	movs	r1, r2
 801705a:	0018      	movs	r0, r3
 801705c:	f7fc ff98 	bl	8013f90 <_txe_mutex_get>
 8017060:	0003      	movs	r3, r0
 8017062:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d006      	beq.n	8017078 <_ux_utility_mutex_on+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	001a      	movs	r2, r3
 801706e:	2108      	movs	r1, #8
 8017070:	2002      	movs	r0, #2
 8017072:	f7ff fbbf 	bl	80167f4 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 8017076:	46c0      	nop			; (mov r8, r8)
 8017078:	46c0      	nop			; (mov r8, r8)
}
 801707a:	46bd      	mov	sp, r7
 801707c:	b004      	add	sp, #16
 801707e:	bd80      	pop	{r7, pc}

08017080 <_ux_utility_semaphore_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b086      	sub	sp, #24
 8017084:	af00      	add	r7, sp, #0
 8017086:	60f8      	str	r0, [r7, #12]
 8017088:	60b9      	str	r1, [r7, #8]
 801708a:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	68b9      	ldr	r1, [r7, #8]
 8017090:	68f8      	ldr	r0, [r7, #12]
 8017092:	231c      	movs	r3, #28
 8017094:	f7fd f95e 	bl	8014354 <_txe_semaphore_create>
 8017098:	0003      	movs	r3, r0
 801709a:	617b      	str	r3, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d005      	beq.n	80170ae <_ux_utility_semaphore_create+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	001a      	movs	r2, r3
 80170a6:	2108      	movs	r1, #8
 80170a8:	2002      	movs	r0, #2
 80170aa:	f7ff fba3 	bl	80167f4 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 80170ae:	697b      	ldr	r3, [r7, #20]
}
 80170b0:	0018      	movs	r0, r3
 80170b2:	46bd      	mov	sp, r7
 80170b4:	b006      	add	sp, #24
 80170b6:	bd80      	pop	{r7, pc}

080170b8 <_ux_utility_semaphore_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b084      	sub	sp, #16
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	0018      	movs	r0, r3
 80170c4:	f7fd f9dc 	bl	8014480 <_txe_semaphore_delete>
 80170c8:	0003      	movs	r3, r0
 80170ca:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 80170cc:	68fb      	ldr	r3, [r7, #12]
}
 80170ce:	0018      	movs	r0, r3
 80170d0:	46bd      	mov	sp, r7
 80170d2:	b004      	add	sp, #16
 80170d4:	bd80      	pop	{r7, pc}
	...

080170d8 <_ux_utility_semaphore_get>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 80170d8:	b590      	push	{r4, r7, lr}
 80170da:	b093      	sub	sp, #76	; 0x4c
 80170dc:	af06      	add	r7, sp, #24
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 80170e2:	f7fb fba7 	bl	8012834 <_tx_thread_identify>
 80170e6:	0003      	movs	r3, r0
 80170e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 80170ea:	231c      	movs	r3, #28
 80170ec:	18fc      	adds	r4, r7, r3
 80170ee:	2320      	movs	r3, #32
 80170f0:	18fa      	adds	r2, r7, r3
 80170f2:	2324      	movs	r3, #36	; 0x24
 80170f4:	18f9      	adds	r1, r7, r3
 80170f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170f8:	2308      	movs	r3, #8
 80170fa:	18fb      	adds	r3, r7, r3
 80170fc:	9304      	str	r3, [sp, #16]
 80170fe:	230c      	movs	r3, #12
 8017100:	18fb      	adds	r3, r7, r3
 8017102:	9303      	str	r3, [sp, #12]
 8017104:	2310      	movs	r3, #16
 8017106:	18fb      	adds	r3, r7, r3
 8017108:	9302      	str	r3, [sp, #8]
 801710a:	2314      	movs	r3, #20
 801710c:	18fb      	adds	r3, r7, r3
 801710e:	9301      	str	r3, [sp, #4]
 8017110:	2318      	movs	r3, #24
 8017112:	18fb      	adds	r3, r7, r3
 8017114:	9300      	str	r3, [sp, #0]
 8017116:	0023      	movs	r3, r4
 8017118:	f7fd fb72 	bl	8014800 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 801711c:	4b0b      	ldr	r3, [pc, #44]	; (801714c <_ux_utility_semaphore_get+0x74>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	699a      	ldr	r2, [r3, #24]
 8017122:	69bb      	ldr	r3, [r7, #24]
 8017124:	429a      	cmp	r2, r3
 8017126:	d203      	bcs.n	8017130 <_ux_utility_semaphore_get+0x58>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 8017128:	4b08      	ldr	r3, [pc, #32]	; (801714c <_ux_utility_semaphore_get+0x74>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	69ba      	ldr	r2, [r7, #24]
 801712e:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 8017130:	683a      	ldr	r2, [r7, #0]
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	0011      	movs	r1, r2
 8017136:	0018      	movs	r0, r3
 8017138:	f7fd f9e0 	bl	80144fc <_txe_semaphore_get>
 801713c:	0003      	movs	r3, r0
 801713e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 8017140:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8017142:	0018      	movs	r0, r3
 8017144:	46bd      	mov	sp, r7
 8017146:	b00d      	add	sp, #52	; 0x34
 8017148:	bd90      	pop	{r4, r7, pc}
 801714a:	46c0      	nop			; (mov r8, r8)
 801714c:	20010ca0 	.word	0x20010ca0

08017150 <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	0018      	movs	r0, r3
 801715c:	f7fd fa12 	bl	8014584 <_txe_semaphore_put>
 8017160:	0003      	movs	r3, r0
 8017162:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017164:	68fb      	ldr	r3, [r7, #12]
}
 8017166:	0018      	movs	r0, r3
 8017168:	46bd      	mov	sp, r7
 801716a:	b004      	add	sp, #16
 801716c:	bd80      	pop	{r7, pc}

0801716e <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 801716e:	b580      	push	{r7, lr}
 8017170:	b084      	sub	sp, #16
 8017172:	af00      	add	r7, sp, #0
 8017174:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	1c5a      	adds	r2, r3, #1
 801717a:	607a      	str	r2, [r7, #4]
 801717c:	781a      	ldrb	r2, [r3, #0]
 801717e:	200e      	movs	r0, #14
 8017180:	183b      	adds	r3, r7, r0
 8017182:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	b29b      	uxth	r3, r3
 801718a:	021b      	lsls	r3, r3, #8
 801718c:	b299      	uxth	r1, r3
 801718e:	183b      	adds	r3, r7, r0
 8017190:	183a      	adds	r2, r7, r0
 8017192:	8812      	ldrh	r2, [r2, #0]
 8017194:	430a      	orrs	r2, r1
 8017196:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 8017198:	183b      	adds	r3, r7, r0
 801719a:	881b      	ldrh	r3, [r3, #0]
}
 801719c:	0018      	movs	r0, r3
 801719e:	46bd      	mov	sp, r7
 80171a0:	b004      	add	sp, #16
 80171a2:	bd80      	pop	{r7, pc}

080171a4 <_ux_utility_string_length_check>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b086      	sub	sp, #24
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	60f8      	str	r0, [r7, #12]
 80171ac:	60b9      	str	r1, [r7, #8]
 80171ae:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d101      	bne.n	80171ba <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 80171b6:	23ff      	movs	r3, #255	; 0xff
 80171b8:	e01d      	b.n	80171f6 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 80171ba:	2300      	movs	r3, #0
 80171bc:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	697b      	ldr	r3, [r7, #20]
 80171c2:	18d3      	adds	r3, r2, r3
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d00d      	beq.n	80171e6 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	3301      	adds	r3, #1
 80171ce:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 80171d0:	697a      	ldr	r2, [r7, #20]
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d9f2      	bls.n	80171be <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 80171d8:	22ff      	movs	r2, #255	; 0xff
 80171da:	2108      	movs	r1, #8
 80171dc:	2002      	movs	r0, #2
 80171de:	f7ff fb09 	bl	80167f4 <_ux_system_error_handler>

            return(UX_ERROR);
 80171e2:	23ff      	movs	r3, #255	; 0xff
 80171e4:	e007      	b.n	80171f6 <_ux_utility_string_length_check+0x52>
            break;
 80171e6:	46c0      	nop			; (mov r8, r8)
        }
    }

    if (string_length_ptr)
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d002      	beq.n	80171f4 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	697a      	ldr	r2, [r7, #20]
 80171f2:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 80171f4:	2300      	movs	r3, #0
}
 80171f6:	0018      	movs	r0, r3
 80171f8:	46bd      	mov	sp, r7
 80171fa:	b006      	add	sp, #24
 80171fc:	bd80      	pop	{r7, pc}

080171fe <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 80171fe:	b590      	push	{r4, r7, lr}
 8017200:	b08f      	sub	sp, #60	; 0x3c
 8017202:	af08      	add	r7, sp, #32
 8017204:	60f8      	str	r0, [r7, #12]
 8017206:	60b9      	str	r1, [r7, #8]
 8017208:	607a      	str	r2, [r7, #4]
 801720a:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 801720c:	683c      	ldr	r4, [r7, #0]
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	68b9      	ldr	r1, [r7, #8]
 8017212:	68f8      	ldr	r0, [r7, #12]
 8017214:	23b0      	movs	r3, #176	; 0xb0
 8017216:	9306      	str	r3, [sp, #24]
 8017218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801721a:	9305      	str	r3, [sp, #20]
 801721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801721e:	9304      	str	r3, [sp, #16]
 8017220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017222:	9303      	str	r3, [sp, #12]
 8017224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017226:	9302      	str	r3, [sp, #8]
 8017228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722a:	9301      	str	r3, [sp, #4]
 801722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	0023      	movs	r3, r4
 8017232:	f7fd f9c7 	bl	80145c4 <_txe_thread_create>
 8017236:	0003      	movs	r3, r0
 8017238:	617b      	str	r3, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d005      	beq.n	801724c <_ux_utility_thread_create+0x4e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	001a      	movs	r2, r3
 8017244:	2108      	movs	r1, #8
 8017246:	2002      	movs	r0, #2
 8017248:	f7ff fad4 	bl	80167f4 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 801724c:	697b      	ldr	r3, [r7, #20]
}
 801724e:	0018      	movs	r0, r3
 8017250:	46bd      	mov	sp, r7
 8017252:	b007      	add	sp, #28
 8017254:	bd90      	pop	{r4, r7, pc}

08017256 <_ux_utility_thread_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 8017256:	b580      	push	{r7, lr}
 8017258:	b084      	sub	sp, #16
 801725a:	af00      	add	r7, sp, #0
 801725c:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	0018      	movs	r0, r3
 8017262:	f7fd fb3d 	bl	80148e0 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	0018      	movs	r0, r3
 801726a:	f7fd fa9d 	bl	80147a8 <_txe_thread_delete>
 801726e:	0003      	movs	r3, r0
 8017270:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017272:	68fb      	ldr	r3, [r7, #12]
}
 8017274:	0018      	movs	r0, r3
 8017276:	46bd      	mov	sp, r7
 8017278:	b004      	add	sp, #16
 801727a:	bd80      	pop	{r7, pc}

0801727c <_ux_utility_thread_resume>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(UX_THREAD *thread_ptr)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b084      	sub	sp, #16
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	0018      	movs	r0, r3
 8017288:	f7fd faea 	bl	8014860 <_txe_thread_resume>
 801728c:	0003      	movs	r3, r0
 801728e:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017290:	68fb      	ldr	r3, [r7, #12]
}
 8017292:	0018      	movs	r0, r3
 8017294:	46bd      	mov	sp, r7
 8017296:	b004      	add	sp, #16
 8017298:	bd80      	pop	{r7, pc}

0801729a <_ux_utility_thread_suspend>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(UX_THREAD *thread_ptr)
{
 801729a:	b580      	push	{r7, lr}
 801729c:	b084      	sub	sp, #16
 801729e:	af00      	add	r7, sp, #0
 80172a0:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	0018      	movs	r0, r3
 80172a6:	f7fd fafb 	bl	80148a0 <_txe_thread_suspend>
 80172aa:	0003      	movs	r3, r0
 80172ac:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 80172ae:	68fb      	ldr	r3, [r7, #12]
}
 80172b0:	0018      	movs	r0, r3
 80172b2:	46bd      	mov	sp, r7
 80172b4:	b004      	add	sp, #16
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <_ux_device_class_hid_activate>:
/*                                            added packet size assert,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b088      	sub	sp, #32
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_inst;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 80172c0:	2300      	movs	r3, #0
 80172c2:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
#endif

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	6a1b      	ldr	r3, [r3, #32]
 80172c8:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_inst -> ux_slave_class_instance;
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80172ce:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	689b      	ldr	r3, [r3, #8]
 80172d4:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)hid;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	693a      	ldr	r2, [r7, #16]
 80172da:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface;
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface -> ux_slave_interface_first_endpoint;
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80172e6:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 80172e8:	e010      	b.n	801730c <_ux_device_class_hid_activate+0x54>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 80172ea:	69fb      	ldr	r3, [r7, #28]
 80172ec:	699b      	ldr	r3, [r3, #24]
 80172ee:	2203      	movs	r2, #3
 80172f0:	4013      	ands	r3, r2
 80172f2:	2b03      	cmp	r3, #3
 80172f4:	d107      	bne.n	8017306 <_ux_device_class_hid_activate+0x4e>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 80172f6:	69fb      	ldr	r3, [r7, #28]
 80172f8:	695b      	ldr	r3, [r3, #20]
 80172fa:	2280      	movs	r2, #128	; 0x80
 80172fc:	4013      	ands	r3, r2
 80172fe:	d002      	beq.n	8017306 <_ux_device_class_hid_activate+0x4e>
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 8017300:	69fb      	ldr	r3, [r7, #28]
 8017302:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 8017304:	e005      	b.n	8017312 <_ux_device_class_hid_activate+0x5a>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801730a:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 801730c:	69fb      	ldr	r3, [r7, #28]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d1eb      	bne.n	80172ea <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 8017312:	69bb      	ldr	r3, [r7, #24]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d101      	bne.n	801731c <_ux_device_class_hid_activate+0x64>
        return (UX_ERROR);
 8017318:	23ff      	movs	r3, #255	; 0xff
 801731a:	e014      	b.n	8017346 <_ux_device_class_hid_activate+0x8e>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 801731c:	693b      	ldr	r3, [r7, #16]
 801731e:	2201      	movs	r2, #1
 8017320:	655a      	str	r2, [r3, #84]	; 0x54

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 8017322:	693b      	ldr	r3, [r7, #16]
 8017324:	69ba      	ldr	r2, [r7, #24]
 8017326:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_inst -> ux_slave_class_thread);
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	3350      	adds	r3, #80	; 0x50
 801732c:	0018      	movs	r0, r3
 801732e:	f7ff ffa5 	bl	801727c <_ux_utility_thread_resume>
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	695b      	ldr	r3, [r3, #20]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d004      	beq.n	8017344 <_ux_device_class_hid_activate+0x8c>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 801733a:	693b      	ldr	r3, [r7, #16]
 801733c:	695b      	ldr	r3, [r3, #20]
 801733e:	693a      	ldr	r2, [r7, #16]
 8017340:	0010      	movs	r0, r2
 8017342:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8017344:	2300      	movs	r3, #0
}
 8017346:	0018      	movs	r0, r3
 8017348:	46bd      	mov	sp, r7
 801734a:	b008      	add	sp, #32
 801734c:	bd80      	pop	{r7, pc}
	...

08017350 <_ux_device_class_hid_control_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b08c      	sub	sp, #48	; 0x30
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017358:	4b5a      	ldr	r3, [pc, #360]	; (80174c4 <_ux_device_class_hid_control_request+0x174>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	3320      	adds	r3, #32
 801735e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8017360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017362:	336c      	adds	r3, #108	; 0x6c
 8017364:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017368:	2255      	movs	r2, #85	; 0x55
 801736a:	5c9b      	ldrb	r3, [r3, r2]
 801736c:	627b      	str	r3, [r7, #36]	; 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017370:	3354      	adds	r3, #84	; 0x54
 8017372:	3302      	adds	r3, #2
 8017374:	0018      	movs	r0, r3
 8017376:	f7ff fefa 	bl	801716e <_ux_utility_short_get>
 801737a:	0003      	movs	r3, r0
 801737c:	623b      	str	r3, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 801737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017380:	3354      	adds	r3, #84	; 0x54
 8017382:	3304      	adds	r3, #4
 8017384:	0018      	movs	r0, r3
 8017386:	f7ff fef2 	bl	801716e <_ux_utility_short_get>
 801738a:	0003      	movs	r3, r0
 801738c:	61fb      	str	r3, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017390:	3354      	adds	r3, #84	; 0x54
 8017392:	3306      	adds	r3, #6
 8017394:	0018      	movs	r0, r3
 8017396:	f7ff feea 	bl	801716e <_ux_utility_short_get>
 801739a:	0003      	movs	r3, r0
 801739c:	61bb      	str	r3, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 801739e:	2317      	movs	r3, #23
 80173a0:	18fb      	adds	r3, r7, r3
 80173a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173a4:	2157      	movs	r1, #87	; 0x57
 80173a6:	5c52      	ldrb	r2, [r2, r1]
 80173a8:	701a      	strb	r2, [r3, #0]
    
     /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6a1b      	ldr	r3, [r3, #32]
 80173ae:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 80173b0:	693b      	ldr	r3, [r7, #16]
 80173b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173b4:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80173b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b8:	2b0b      	cmp	r3, #11
 80173ba:	d900      	bls.n	80173be <_ux_device_class_hid_control_request+0x6e>
 80173bc:	e079      	b.n	80174b2 <_ux_device_class_hid_control_request+0x162>
 80173be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c0:	009a      	lsls	r2, r3, #2
 80173c2:	4b41      	ldr	r3, [pc, #260]	; (80174c8 <_ux_device_class_hid_control_request+0x178>)
 80173c4:	18d3      	adds	r3, r2, r3
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	469f      	mov	pc, r3
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	69fa      	ldr	r2, [r7, #28]
 80173ce:	6a39      	ldr	r1, [r7, #32]
 80173d0:	68f8      	ldr	r0, [r7, #12]
 80173d2:	f000 fbbf 	bl	8017b54 <_ux_device_class_hid_report_get>
            break;
 80173d6:	e06f      	b.n	80174b8 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 80173d8:	6a3b      	ldr	r3, [r7, #32]
 80173da:	0a1b      	lsrs	r3, r3, #8
 80173dc:	22ff      	movs	r2, #255	; 0xff
 80173de:	4013      	ands	r3, r2
 80173e0:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 80173e2:	69bb      	ldr	r3, [r7, #24]
 80173e4:	69fa      	ldr	r2, [r7, #28]
 80173e6:	68b9      	ldr	r1, [r7, #8]
 80173e8:	68f8      	ldr	r0, [r7, #12]
 80173ea:	f000 fc49 	bl	8017c80 <_ux_device_class_hid_report_set>
            break;
 80173ee:	e063      	b.n	80174b8 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 80173f0:	69bb      	ldr	r3, [r7, #24]
 80173f2:	69fa      	ldr	r2, [r7, #28]
 80173f4:	6a39      	ldr	r1, [r7, #32]
 80173f6:	68f8      	ldr	r0, [r7, #12]
 80173f8:	f000 f886 	bl	8017508 <_ux_device_class_hid_descriptor_send>
            break;            
 80173fc:	e05c      	b.n	80174b8 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 80173fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017400:	2b02      	cmp	r3, #2
 8017402:	d10c      	bne.n	801741e <_ux_device_class_hid_control_request+0xce>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740a:	68db      	ldr	r3, [r3, #12]
 801740c:	b2d2      	uxtb	r2, r2
 801740e:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8017410:	69ba      	ldr	r2, [r7, #24]
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	2101      	movs	r1, #1
 8017416:	0018      	movs	r0, r3
 8017418:	f7ff f966 	bl	80166e8 <_ux_device_stack_transfer_request>
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 801741c:	e04b      	b.n	80174b6 <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017422:	b2db      	uxtb	r3, r3
 8017424:	2117      	movs	r1, #23
 8017426:	187a      	adds	r2, r7, r1
 8017428:	7812      	ldrb	r2, [r2, #0]
 801742a:	429a      	cmp	r2, r3
 801742c:	d043      	beq.n	80174b6 <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 801742e:	187b      	adds	r3, r7, r1
 8017430:	781a      	ldrb	r2, [r3, #0]
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	64da      	str	r2, [r3, #76]	; 0x4c
                    if (duration == 0)
 8017436:	187b      	adds	r3, r7, r1
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d104      	bne.n	8017448 <_ux_device_class_hid_control_request+0xf8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	2201      	movs	r2, #1
 8017442:	4252      	negs	r2, r2
 8017444:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 8017446:	e036      	b.n	80174b6 <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8017448:	2317      	movs	r3, #23
 801744a:	18fb      	adds	r3, r7, r3
 801744c:	781a      	ldrb	r2, [r3, #0]
 801744e:	0013      	movs	r3, r2
 8017450:	005b      	lsls	r3, r3, #1
 8017452:	189b      	adds	r3, r3, r2
 8017454:	01da      	lsls	r2, r3, #7
 8017456:	1ad2      	subs	r2, r2, r3
 8017458:	0153      	lsls	r3, r2, #5
 801745a:	001a      	movs	r2, r3
 801745c:	23fa      	movs	r3, #250	; 0xfa
 801745e:	0099      	lsls	r1, r3, #2
 8017460:	0010      	movs	r0, r2
 8017462:	f7ef f8a9 	bl	80065b8 <__udivsi3>
 8017466:	0003      	movs	r3, r0
 8017468:	001a      	movs	r2, r3
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	651a      	str	r2, [r3, #80]	; 0x50
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017472:	2b00      	cmp	r3, #0
 8017474:	d104      	bne.n	8017480 <_ux_device_class_hid_control_request+0x130>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801747a:	1c5a      	adds	r2, r3, #1
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	651a      	str	r2, [r3, #80]	; 0x50
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	3328      	adds	r3, #40	; 0x28
 8017484:	2200      	movs	r2, #0
 8017486:	2102      	movs	r1, #2
 8017488:	0018      	movs	r0, r3
 801748a:	f7ff fb25 	bl	8016ad8 <_ux_utility_event_flags_set>
            break;
 801748e:	e012      	b.n	80174b6 <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017496:	68db      	ldr	r3, [r3, #12]
 8017498:	b2d2      	uxtb	r2, r2
 801749a:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 801749c:	69ba      	ldr	r2, [r7, #24]
 801749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a0:	2101      	movs	r1, #1
 80174a2:	0018      	movs	r0, r3
 80174a4:	f7ff f920 	bl	80166e8 <_ux_device_stack_transfer_request>
            break;
 80174a8:	e006      	b.n	80174b8 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	6a3a      	ldr	r2, [r7, #32]
 80174ae:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 80174b0:	e002      	b.n	80174b8 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80174b2:	23ff      	movs	r3, #255	; 0xff
 80174b4:	e001      	b.n	80174ba <_ux_device_class_hid_control_request+0x16a>
            break;
 80174b6:	46c0      	nop			; (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80174b8:	2300      	movs	r3, #0
}
 80174ba:	0018      	movs	r0, r3
 80174bc:	46bd      	mov	sp, r7
 80174be:	b00c      	add	sp, #48	; 0x30
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	46c0      	nop			; (mov r8, r8)
 80174c4:	20010c9c 	.word	0x20010c9c
 80174c8:	0801a428 	.word	0x0801a428

080174cc <_ux_device_class_hid_deactivate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b084      	sub	sp, #16
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6a1b      	ldr	r3, [r3, #32]
 80174d8:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174de:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	2126      	movs	r1, #38	; 0x26
 80174e6:	0018      	movs	r0, r3
 80174e8:	f7ff f8ea 	bl	80166c0 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	699b      	ldr	r3, [r3, #24]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d004      	beq.n	80174fe <_ux_device_class_hid_deactivate+0x32>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	699b      	ldr	r3, [r3, #24]
 80174f8:	68ba      	ldr	r2, [r7, #8]
 80174fa:	0010      	movs	r0, r2
 80174fc:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80174fe:	2300      	movs	r3, #0
}
 8017500:	0018      	movs	r0, r3
 8017502:	46bd      	mov	sp, r7
 8017504:	b004      	add	sp, #16
 8017506:	bd80      	pop	{r7, pc}

08017508 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b08e      	sub	sp, #56	; 0x38
 801750c:	af00      	add	r7, sp, #0
 801750e:	60f8      	str	r0, [r7, #12]
 8017510:	60b9      	str	r1, [r7, #8]
 8017512:	607a      	str	r2, [r7, #4]
 8017514:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 8017516:	23ff      	movs	r3, #255	; 0xff
 8017518:	633b      	str	r3, [r7, #48]	; 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 801751a:	232b      	movs	r3, #43	; 0x2b
 801751c:	18fb      	adds	r3, r7, r3
 801751e:	22ff      	movs	r2, #255	; 0xff
 8017520:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017522:	4b61      	ldr	r3, [pc, #388]	; (80176a8 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017528:	4b5f      	ldr	r3, [pc, #380]	; (80176a8 <_ux_device_class_hid_descriptor_send+0x1a0>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	3320      	adds	r3, #32
 801752e:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017530:	6a3b      	ldr	r3, [r7, #32]
 8017532:	333c      	adds	r3, #60	; 0x3c
 8017534:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017536:	69fb      	ldr	r3, [r7, #28]
 8017538:	3330      	adds	r3, #48	; 0x30
 801753a:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	2203      	movs	r2, #3
 8017540:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	0a1b      	lsrs	r3, r3, #8
 8017546:	b2db      	uxtb	r3, r3
 8017548:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	2b21      	cmp	r3, #33	; 0x21
 801754e:	d003      	beq.n	8017558 <_ux_device_class_hid_descriptor_send+0x50>
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	2b22      	cmp	r3, #34	; 0x22
 8017554:	d069      	beq.n	801762a <_ux_device_class_hid_descriptor_send+0x122>
 8017556:	e098      	b.n	801768a <_ux_device_class_hid_descriptor_send+0x182>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8017558:	4b53      	ldr	r3, [pc, #332]	; (80176a8 <_ux_device_class_hid_descriptor_send+0x1a0>)
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	2394      	movs	r3, #148	; 0x94
 801755e:	005b      	lsls	r3, r3, #1
 8017560:	58d3      	ldr	r3, [r2, r3]
 8017562:	637b      	str	r3, [r7, #52]	; 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8017564:	4b50      	ldr	r3, [pc, #320]	; (80176a8 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	2396      	movs	r3, #150	; 0x96
 801756a:	005b      	lsls	r3, r3, #1
 801756c:	58d3      	ldr	r3, [r2, r3]
 801756e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017570:	18d3      	adds	r3, r2, r3
 8017572:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8017574:	e048      	b.n	8017608 <_ux_device_class_hid_descriptor_send+0x100>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 8017576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017578:	3301      	adds	r3, #1
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 801757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017580:	781b      	ldrb	r3, [r3, #0]
 8017582:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	2b04      	cmp	r3, #4
 8017588:	d104      	bne.n	8017594 <_ux_device_class_hid_descriptor_send+0x8c>
                interface_number = *(device_framework + 2);
 801758a:	232b      	movs	r3, #43	; 0x2b
 801758c:	18fb      	adds	r3, r7, r3
 801758e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017590:	7892      	ldrb	r2, [r2, #2]
 8017592:	701a      	strb	r2, [r3, #0]

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	2b21      	cmp	r3, #33	; 0x21
 8017598:	d132      	bne.n	8017600 <_ux_device_class_hid_descriptor_send+0xf8>
                (interface_number == (UCHAR)request_index))
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 801759e:	222b      	movs	r2, #43	; 0x2b
 80175a0:	18ba      	adds	r2, r7, r2
 80175a2:	7812      	ldrb	r2, [r2, #0]
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d12b      	bne.n	8017600 <_ux_device_class_hid_descriptor_send+0xf8>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 80175a8:	697a      	ldr	r2, [r7, #20]
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d202      	bcs.n	80175b6 <_ux_device_class_hid_descriptor_send+0xae>
                    length =  descriptor_length;
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175b4:	e001      	b.n	80175ba <_ux_device_class_hid_descriptor_send+0xb2>
                else                            
                    length =  host_length;                
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80175ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175bc:	2380      	movs	r3, #128	; 0x80
 80175be:	005b      	lsls	r3, r3, #1
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d90d      	bls.n	80175e0 <_ux_device_class_hid_descriptor_send+0xd8>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 80175c4:	2212      	movs	r2, #18
 80175c6:	2107      	movs	r1, #7
 80175c8:	2002      	movs	r0, #2
 80175ca:	f7ff f913 	bl	80167f4 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80175ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d0:	699b      	ldr	r3, [r3, #24]
 80175d2:	69fa      	ldr	r2, [r7, #28]
 80175d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175d6:	2114      	movs	r1, #20
 80175d8:	4798      	blx	r3
 80175da:	0003      	movs	r3, r0
 80175dc:	633b      	str	r3, [r7, #48]	; 0x30
                    break;
 80175de:	e017      	b.n	8017610 <_ux_device_class_hid_descriptor_send+0x108>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 80175e0:	69bb      	ldr	r3, [r7, #24]
 80175e2:	68db      	ldr	r3, [r3, #12]
 80175e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175e8:	0018      	movs	r0, r3
 80175ea:	f7ff fbf3 	bl	8016dd4 <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80175ee:	683a      	ldr	r2, [r7, #0]
 80175f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	0018      	movs	r0, r3
 80175f6:	f7ff f877 	bl	80166e8 <_ux_device_stack_transfer_request>
 80175fa:	0003      	movs	r3, r0
 80175fc:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 80175fe:	e007      	b.n	8017610 <_ux_device_class_hid_descriptor_send+0x108>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8017600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017602:	697b      	ldr	r3, [r7, #20]
 8017604:	18d3      	adds	r3, r2, r3
 8017606:	637b      	str	r3, [r7, #52]	; 0x34
        while (device_framework < device_framework_end)
 8017608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801760a:	693b      	ldr	r3, [r7, #16]
 801760c:	429a      	cmp	r2, r3
 801760e:	d3b2      	bcc.n	8017576 <_ux_device_class_hid_descriptor_send+0x6e>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 8017610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017612:	693b      	ldr	r3, [r7, #16]
 8017614:	429a      	cmp	r2, r3
 8017616:	d340      	bcc.n	801769a <_ux_device_class_hid_descriptor_send+0x192>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761a:	699b      	ldr	r3, [r3, #24]
 801761c:	69fa      	ldr	r2, [r7, #28]
 801761e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017620:	2114      	movs	r1, #20
 8017622:	4798      	blx	r3
 8017624:	0003      	movs	r3, r0
 8017626:	633b      	str	r3, [r7, #48]	; 0x30

        break;
 8017628:	e037      	b.n	801769a <_ux_device_class_hid_descriptor_send+0x192>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801762e:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8017630:	697a      	ldr	r2, [r7, #20]
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	429a      	cmp	r2, r3
 8017636:	d202      	bcs.n	801763e <_ux_device_class_hid_descriptor_send+0x136>
            length =  descriptor_length;
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801763c:	e001      	b.n	8017642 <_ux_device_class_hid_descriptor_send+0x13a>
        else                            
            length =  host_length;                
 801763e:	683b      	ldr	r3, [r7, #0]
 8017640:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017644:	2380      	movs	r3, #128	; 0x80
 8017646:	005b      	lsls	r3, r3, #1
 8017648:	429a      	cmp	r2, r3
 801764a:	d90d      	bls.n	8017668 <_ux_device_class_hid_descriptor_send+0x160>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 801764c:	2212      	movs	r2, #18
 801764e:	2107      	movs	r1, #7
 8017650:	2002      	movs	r0, #2
 8017652:	f7ff f8cf 	bl	80167f4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017658:	699b      	ldr	r3, [r3, #24]
 801765a:	69fa      	ldr	r2, [r7, #28]
 801765c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801765e:	2114      	movs	r1, #20
 8017660:	4798      	blx	r3
 8017662:	0003      	movs	r3, r0
 8017664:	633b      	str	r3, [r7, #48]	; 0x30
            break;
 8017666:	e019      	b.n	801769c <_ux_device_class_hid_descriptor_send+0x194>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8017668:	69bb      	ldr	r3, [r7, #24]
 801766a:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8017670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017672:	0019      	movs	r1, r3
 8017674:	f7ff fbae 	bl	8016dd4 <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8017678:	683a      	ldr	r2, [r7, #0]
 801767a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801767c:	69bb      	ldr	r3, [r7, #24]
 801767e:	0018      	movs	r0, r3
 8017680:	f7ff f832 	bl	80166e8 <_ux_device_stack_transfer_request>
 8017684:	0003      	movs	r3, r0
 8017686:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8017688:	e008      	b.n	801769c <_ux_device_class_hid_descriptor_send+0x194>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801768c:	699b      	ldr	r3, [r3, #24]
 801768e:	69fa      	ldr	r2, [r7, #28]
 8017690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017692:	2114      	movs	r1, #20
 8017694:	4798      	blx	r3
        return(UX_ERROR);
 8017696:	23ff      	movs	r3, #255	; 0xff
 8017698:	e001      	b.n	801769e <_ux_device_class_hid_descriptor_send+0x196>
        break;
 801769a:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 801769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801769e:	0018      	movs	r0, r3
 80176a0:	46bd      	mov	sp, r7
 80176a2:	b00e      	add	sp, #56	; 0x38
 80176a4:	bd80      	pop	{r7, pc}
 80176a6:	46c0      	nop			; (mov r8, r8)
 80176a8:	20010c9c 	.word	0x20010c9c

080176ac <_ux_device_class_hid_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2b07      	cmp	r3, #7
 80176ba:	d834      	bhi.n	8017726 <_ux_device_class_hid_entry+0x7a>
 80176bc:	009a      	lsls	r2, r3, #2
 80176be:	4b1c      	ldr	r3, [pc, #112]	; (8017730 <_ux_device_class_hid_entry+0x84>)
 80176c0:	18d3      	adds	r3, r2, r3
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_initialize(command);
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	0018      	movs	r0, r3
 80176ca:	f000 f8e7 	bl	801789c <_ux_device_class_hid_initialize>
 80176ce:	0003      	movs	r3, r0
 80176d0:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	e028      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	0018      	movs	r0, r3
 80176da:	f000 fb25 	bl	8017d28 <_ux_device_class_hid_uninitialize>
 80176de:	0003      	movs	r3, r0
 80176e0:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	e020      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	695b      	ldr	r3, [r3, #20]
 80176ea:	2b03      	cmp	r3, #3
 80176ec:	d101      	bne.n	80176f2 <_ux_device_class_hid_entry+0x46>
            return(UX_SUCCESS);
 80176ee:	2300      	movs	r3, #0
 80176f0:	e01a      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 80176f2:	2357      	movs	r3, #87	; 0x57
 80176f4:	e018      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	0018      	movs	r0, r3
 80176fa:	f7ff fddd 	bl	80172b8 <_ux_device_class_hid_activate>
 80176fe:	0003      	movs	r3, r0
 8017700:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	e010      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	0018      	movs	r0, r3
 801770a:	f7ff fedf 	bl	80174cc <_ux_device_class_hid_deactivate>
 801770e:	0003      	movs	r3, r0
 8017710:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	e008      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	0018      	movs	r0, r3
 801771a:	f7ff fe19 	bl	8017350 <_ux_device_class_hid_control_request>
 801771e:	0003      	movs	r3, r0
 8017720:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	e000      	b.n	8017728 <_ux_device_class_hid_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8017726:	2354      	movs	r3, #84	; 0x54
    }   
}
 8017728:	0018      	movs	r0, r3
 801772a:	46bd      	mov	sp, r7
 801772c:	b004      	add	sp, #16
 801772e:	bd80      	pop	{r7, pc}
 8017730:	0801a458 	.word	0x0801a458

08017734 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b084      	sub	sp, #16
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */                   
    device =  &_ux_system_slave -> ux_system_slave_device;
 801773e:	4b21      	ldr	r3, [pc, #132]	; (80177c4 <_ux_device_class_hid_event_get+0x90>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	3320      	adds	r3, #32
 8017744:	60fb      	str	r3, [r7, #12]
    
    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2b03      	cmp	r3, #3
 801774c:	d001      	beq.n	8017752 <_ux_device_class_hid_event_get+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 801774e:	2350      	movs	r3, #80	; 0x50
 8017750:	e033      	b.n	80177ba <_ux_device_class_hid_event_get+0x86>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head == 
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hid -> ux_device_class_hid_event_array_tail)
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    if (hid -> ux_device_class_hid_event_array_head == 
 801775a:	429a      	cmp	r2, r3
 801775c:	d101      	bne.n	8017762 <_ux_device_class_hid_event_get+0x2e>

        /* No event to report.  */
        return(UX_ERROR);        
 801775e:	23ff      	movs	r3, #255	; 0xff
 8017760:	e02b      	b.n	80177ba <_ux_device_class_hid_event_get+0x86>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017766:	60bb      	str	r3, [r7, #8]

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801776c:	2b20      	cmp	r3, #32
 801776e:	d902      	bls.n	8017776 <_ux_device_class_hid_event_get+0x42>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	2220      	movs	r2, #32
 8017774:	629a      	str	r2, [r3, #40]	; 0x28

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	629a      	str	r2, [r3, #40]	; 0x28
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer, current_hid_event -> ux_device_class_hid_event_buffer,
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	3308      	adds	r3, #8
 8017782:	0018      	movs	r0, r3
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	3308      	adds	r3, #8
 8017788:	0019      	movs	r1, r3
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801778e:	001a      	movs	r2, r3
 8017790:	f7ff fb20 	bl	8016dd4 <_ux_utility_memory_copy>
                                current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Adjust the tail pointer.  Check if we are at the end.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	332c      	adds	r3, #44	; 0x2c
 8017798:	001a      	movs	r2, r3
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801779e:	429a      	cmp	r2, r3
 80177a0:	d104      	bne.n	80177ac <_ux_device_class_hid_event_get+0x78>

        /* We are at the end, go back to the beginning.  */
        hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	661a      	str	r2, [r3, #96]	; 0x60
 80177aa:	e005      	b.n	80177b8 <_ux_device_class_hid_event_get+0x84>
        
    else        
        /* We are not at the end, increment the tail position.  */
        hid -> ux_device_class_hid_event_array_tail++;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177b0:	332c      	adds	r3, #44	; 0x2c
 80177b2:	001a      	movs	r2, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 80177b8:	2300      	movs	r3, #0
}
 80177ba:	0018      	movs	r0, r3
 80177bc:	46bd      	mov	sp, r7
 80177be:	b004      	add	sp, #16
 80177c0:	bd80      	pop	{r7, pc}
 80177c2:	46c0      	nop			; (mov r8, r8)
 80177c4:	20010c9c 	.word	0x20010c9c

080177c8 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b084      	sub	sp, #16
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
 80177d0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80177d6:	60bb      	str	r3, [r7, #8]
    
    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d101      	bne.n	80177e2 <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 80177de:	23ff      	movs	r3, #255	; 0xff
 80177e0:	e057      	b.n	8017892 <_ux_device_class_hid_event_set+0xca>
    
    /* Calculate the next position.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	332c      	adds	r3, #44	; 0x2c
 80177e6:	001a      	movs	r2, r3
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d103      	bne.n	80177f8 <_ux_device_class_hid_event_set+0x30>

        /* We are at the end, go back to the beginning.  */
        next_hid_event =  hid -> ux_device_class_hid_event_array;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177f4:	60fb      	str	r3, [r7, #12]
 80177f6:	e002      	b.n	80177fe <_ux_device_class_hid_event_set+0x36>
        
    else        

        /* We are not at the end, increment the head position.  */
        next_hid_event = current_hid_event + 1;
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	332c      	adds	r3, #44	; 0x2c
 80177fc:	60fb      	str	r3, [r7, #12]
    

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017802:	68fa      	ldr	r2, [r7, #12]
 8017804:	429a      	cmp	r2, r3
 8017806:	d101      	bne.n	801780c <_ux_device_class_hid_event_set+0x44>
        return (UX_ERROR);
 8017808:	23ff      	movs	r3, #255	; 0xff
 801780a:	e042      	b.n	8017892 <_ux_device_class_hid_event_set+0xca>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017810:	60bb      	str	r3, [r7, #8]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	68fa      	ldr	r2, [r7, #12]
 8017816:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	6a1b      	ldr	r3, [r3, #32]
 801781c:	2b01      	cmp	r3, #1
 801781e:	d121      	bne.n	8017864 <_ux_device_class_hid_event_set+0x9c>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017824:	3301      	adds	r3, #1
 8017826:	2b20      	cmp	r3, #32
 8017828:	d906      	bls.n	8017838 <_ux_device_class_hid_event_set+0x70>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 801782a:	2212      	movs	r2, #18
 801782c:	2107      	movs	r1, #7
 801782e:	2002      	movs	r0, #2
 8017830:	f7fe ffe0 	bl	80167f4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 8017834:	2312      	movs	r3, #18
 8017836:	e02c      	b.n	8017892 <_ux_device_class_hid_event_set+0xca>
        }

        /* Store the report ID.  */
        *current_hid_event -> ux_device_class_hid_event_buffer =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);  
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	b2da      	uxtb	r2, r3
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	721a      	strb	r2, [r3, #8]
                
        /* Store the data itself.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer + 1, hid_event -> ux_device_class_hid_event_buffer,
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	3308      	adds	r3, #8
 8017846:	1c58      	adds	r0, r3, #1
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	3308      	adds	r3, #8
 801784c:	0019      	movs	r1, r3
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017852:	001a      	movs	r2, r3
 8017854:	f7ff fabe 	bl	8016dd4 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801785c:	1c5a      	adds	r2, r3, #1
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	629a      	str	r2, [r3, #40]	; 0x28
 8017862:	e00e      	b.n	8017882 <_ux_device_class_hid_event_set+0xba>
    }
    else
    {
    
        /* No report ID to consider.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer, hid_event -> ux_device_class_hid_event_buffer,
 8017864:	68bb      	ldr	r3, [r7, #8]
 8017866:	3308      	adds	r3, #8
 8017868:	0018      	movs	r0, r3
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	3308      	adds	r3, #8
 801786e:	0019      	movs	r1, r3
 8017870:	683b      	ldr	r3, [r7, #0]
 8017872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017874:	001a      	movs	r2, r3
 8017876:	f7ff faad 	bl	8016dd4 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801787e:	68bb      	ldr	r3, [r7, #8]
 8017880:	629a      	str	r2, [r3, #40]	; 0x28
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#else

    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	3328      	adds	r3, #40	; 0x28
 8017886:	2200      	movs	r2, #0
 8017888:	2101      	movs	r1, #1
 801788a:	0018      	movs	r0, r3
 801788c:	f7ff f924 	bl	8016ad8 <_ux_utility_event_flags_set>
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8017890:	2300      	movs	r3, #0
}
 8017892:	0018      	movs	r0, r3
 8017894:	46bd      	mov	sp, r7
 8017896:	b004      	add	sp, #16
 8017898:	bd80      	pop	{r7, pc}
	...

0801789c <_ux_device_class_hid_initialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801789c:	b5b0      	push	{r4, r5, r7, lr}
 801789e:	b08c      	sub	sp, #48	; 0x30
 80178a0:	af06      	add	r7, sp, #24
 80178a2:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class;
UINT                                    status = UX_SUCCESS;
 80178a4:	2300      	movs	r3, #0
 80178a6:	617b      	str	r3, [r7, #20]


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6a1b      	ldr	r3, [r3, #32]
 80178ac:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 80178ae:	2268      	movs	r2, #104	; 0x68
 80178b0:	2100      	movs	r1, #0
 80178b2:	2000      	movs	r0, #0
 80178b4:	f7ff f948 	bl	8016b48 <_ux_utility_memory_allocate>
 80178b8:	0003      	movs	r3, r0
 80178ba:	60fb      	str	r3, [r7, #12]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d101      	bne.n	80178c6 <_ux_device_class_hid_initialize+0x2a>
        return(UX_MEMORY_INSUFFICIENT);
 80178c2:	2312      	movs	r3, #18
 80178c4:	e0ac      	b.n	8017a20 <_ux_device_class_hid_initialize+0x184>

    /* Save the address of the HID instance inside the HID container.  */
    class -> ux_slave_class_instance = (VOID *) hid;
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	68fa      	ldr	r2, [r7, #12]
 80178ca:	649a      	str	r2, [r3, #72]	; 0x48

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class -> ux_slave_class_thread_stack =  
            _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE);
 80178cc:	2380      	movs	r3, #128	; 0x80
 80178ce:	015b      	lsls	r3, r3, #5
 80178d0:	001a      	movs	r2, r3
 80178d2:	2100      	movs	r1, #0
 80178d4:	2000      	movs	r0, #0
 80178d6:	f7ff f937 	bl	8016b48 <_ux_utility_memory_allocate>
 80178da:	0001      	movs	r1, r0
    class -> ux_slave_class_thread_stack =  
 80178dc:	693a      	ldr	r2, [r7, #16]
 80178de:	2380      	movs	r3, #128	; 0x80
 80178e0:	005b      	lsls	r3, r3, #1
 80178e2:	50d1      	str	r1, [r2, r3]
    
    /* Check for successful allocation.  */
    if (class -> ux_slave_class_thread_stack == UX_NULL)
 80178e4:	693a      	ldr	r2, [r7, #16]
 80178e6:	2380      	movs	r3, #128	; 0x80
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	58d3      	ldr	r3, [r2, r3]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d101      	bne.n	80178f4 <_ux_device_class_hid_initialize+0x58>
        status = UX_MEMORY_INSUFFICIENT;
 80178f0:	2312      	movs	r3, #18
 80178f2:	617b      	str	r3, [r7, #20]

    /* This instance needs to be running in a different thread. So start
       a new thread. We pass a pointer to the class to the new thread.  This thread
       does not start until we have a instance of the class. */
    if (status == UX_SUCCESS)
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d11b      	bne.n	8017932 <_ux_device_class_hid_initialize+0x96>
        status =  _ux_device_thread_create(&class -> ux_slave_class_thread, "ux_slave_hid_thread", 
 80178fa:	693b      	ldr	r3, [r7, #16]
 80178fc:	3350      	adds	r3, #80	; 0x50
 80178fe:	0018      	movs	r0, r3
 8017900:	693d      	ldr	r5, [r7, #16]
 8017902:	693a      	ldr	r2, [r7, #16]
 8017904:	2380      	movs	r3, #128	; 0x80
 8017906:	005b      	lsls	r3, r3, #1
 8017908:	58d3      	ldr	r3, [r2, r3]
 801790a:	4c47      	ldr	r4, [pc, #284]	; (8017a28 <_ux_device_class_hid_initialize+0x18c>)
 801790c:	4947      	ldr	r1, [pc, #284]	; (8017a2c <_ux_device_class_hid_initialize+0x190>)
 801790e:	2200      	movs	r2, #0
 8017910:	9205      	str	r2, [sp, #20]
 8017912:	2200      	movs	r2, #0
 8017914:	9204      	str	r2, [sp, #16]
 8017916:	2214      	movs	r2, #20
 8017918:	9203      	str	r2, [sp, #12]
 801791a:	2214      	movs	r2, #20
 801791c:	9202      	str	r2, [sp, #8]
 801791e:	2280      	movs	r2, #128	; 0x80
 8017920:	0152      	lsls	r2, r2, #5
 8017922:	9201      	str	r2, [sp, #4]
 8017924:	9300      	str	r3, [sp, #0]
 8017926:	002b      	movs	r3, r5
 8017928:	0022      	movs	r2, r4
 801792a:	f7ff fc68 	bl	80171fe <_ux_utility_thread_create>
 801792e:	0003      	movs	r3, r0
 8017930:	617b      	str	r3, [r7, #20]
    /* Set task function.  */
    class -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8017932:	697b      	ldr	r3, [r7, #20]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d15c      	bne.n	80179f2 <_ux_device_class_hid_initialize+0x156>
#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&(class -> ux_slave_class_thread), class)
#endif

        /* Get the pointer to the application parameters for the hid class.  */
        hid_parameter =  command -> ux_slave_class_command_parameter;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801793c:	60bb      	str	r3, [r7, #8]

        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	689a      	ldr	r2, [r3, #8]
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8017946:	68bb      	ldr	r3, [r7, #8]
 8017948:	691a      	ldr	r2, [r3, #16]
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	625a      	str	r2, [r3, #36]	; 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	68da      	ldr	r2, [r3, #12]
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	695a      	ldr	r2, [r3, #20]
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	699a      	ldr	r2, [r3, #24]
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID_EVENT), UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE);
 8017966:	2310      	movs	r3, #16
 8017968:	222c      	movs	r2, #44	; 0x2c
 801796a:	2100      	movs	r1, #0
 801796c:	2000      	movs	r0, #0
 801796e:	f7ff f9f3 	bl	8016d58 <_ux_utility_memory_allocate_mulc_safe>
 8017972:	0002      	movs	r2, r0
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	659a      	str	r2, [r3, #88]	; 0x58

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801797c:	2b00      	cmp	r3, #0
 801797e:	d030      	beq.n	80179e2 <_ux_device_class_hid_initialize+0x146>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	65da      	str	r2, [r3, #92]	; 0x5c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	661a      	str	r2, [r3, #96]	; 0x60
            hid -> ux_device_class_hid_event_array_end  =  hid -> ux_device_class_hid_event_array + UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017994:	22b0      	movs	r2, #176	; 0xb0
 8017996:	0092      	lsls	r2, r2, #2
 8017998:	189a      	adds	r2, r3, r2
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	665a      	str	r2, [r3, #100]	; 0x64

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	681a      	ldr	r2, [r3, #0]
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 80179a6:	68bb      	ldr	r3, [r7, #8]
 80179a8:	685a      	ldr	r2, [r3, #4]
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	2201      	movs	r2, #1
 80179b2:	4252      	negs	r2, r2
 80179b4:	651a      	str	r2, [r3, #80]	; 0x50

            return(UX_SUCCESS);
#else

            /* Create a event flag group for the hid class to synchronize with the event interrupt thread.  */
            status =  _ux_utility_event_flags_create(&hid -> ux_device_class_hid_event_flags_group, "ux_device_class_hid_event_flag");
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	3328      	adds	r3, #40	; 0x28
 80179ba:	4a1d      	ldr	r2, [pc, #116]	; (8017a30 <_ux_device_class_hid_initialize+0x194>)
 80179bc:	0011      	movs	r1, r2
 80179be:	0018      	movs	r0, r3
 80179c0:	f7ff f846 	bl	8016a50 <_ux_utility_event_flags_create>
 80179c4:	0003      	movs	r3, r0
 80179c6:	617b      	str	r3, [r7, #20]

            /* Check status.  */
            if (status == UX_SUCCESS)
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d101      	bne.n	80179d2 <_ux_device_class_hid_initialize+0x136>

                /* There is error, delete event flags.  */
                _ux_utility_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif
#else
                return(status);
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	e026      	b.n	8017a20 <_ux_device_class_hid_initialize+0x184>

            }
            else

                /* It's event error. */
                status =  UX_EVENT_ERROR;
 80179d2:	2318      	movs	r3, #24
 80179d4:	617b      	str	r3, [r7, #20]

            /* Free allocated event array memory.  */
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179da:	0018      	movs	r0, r3
 80179dc:	f7ff fa16 	bl	8016e0c <_ux_utility_memory_free>
 80179e0:	e001      	b.n	80179e6 <_ux_device_class_hid_initialize+0x14a>
#endif
        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 80179e2:	2312      	movs	r3, #18
 80179e4:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete thread.  */
        _ux_device_thread_delete(&class -> ux_slave_class_thread);
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	3350      	adds	r3, #80	; 0x50
 80179ea:	0018      	movs	r0, r3
 80179ec:	f7ff fc33 	bl	8017256 <_ux_utility_thread_delete>
 80179f0:	e001      	b.n	80179f6 <_ux_device_class_hid_initialize+0x15a>
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 80179f2:	2316      	movs	r3, #22
 80179f4:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Free stack. */
    if (class -> ux_slave_class_thread_stack)
 80179f6:	693a      	ldr	r2, [r7, #16]
 80179f8:	2380      	movs	r3, #128	; 0x80
 80179fa:	005b      	lsls	r3, r3, #1
 80179fc:	58d3      	ldr	r3, [r2, r3]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d006      	beq.n	8017a10 <_ux_device_class_hid_initialize+0x174>
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8017a02:	693a      	ldr	r2, [r7, #16]
 8017a04:	2380      	movs	r3, #128	; 0x80
 8017a06:	005b      	lsls	r3, r3, #1
 8017a08:	58d3      	ldr	r3, [r2, r3]
 8017a0a:	0018      	movs	r0, r3
 8017a0c:	f7ff f9fe 	bl	8016e0c <_ux_utility_memory_free>
#endif

    /* Unmount instance. */
    class -> ux_slave_class_instance =  UX_NULL;
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	2200      	movs	r2, #0
 8017a14:	649a      	str	r2, [r3, #72]	; 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	0018      	movs	r0, r3
 8017a1a:	f7ff f9f7 	bl	8016e0c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8017a1e:	697b      	ldr	r3, [r7, #20]
}
 8017a20:	0018      	movs	r0, r3
 8017a22:	46bd      	mov	sp, r7
 8017a24:	b006      	add	sp, #24
 8017a26:	bdb0      	pop	{r4, r5, r7, pc}
 8017a28:	08017a35 	.word	0x08017a35
 8017a2c:	0801a1f8 	.word	0x0801a1f8
 8017a30:	0801a20c 	.word	0x0801a20c

08017a34 <_ux_device_class_hid_interrupt_thread>:
/*                                            off for standalone compile, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)
{
 8017a34:	b590      	push	{r4, r7, lr}
 8017a36:	b097      	sub	sp, #92	; 0x5c
 8017a38:	af02      	add	r7, sp, #8
 8017a3a:	6078      	str	r0, [r7, #4]
UCHAR                       *buffer;
ULONG                       actual_flags;


    /* Cast properly the hid instance.  */
    UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, hid_class)
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the hid instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8017a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a44:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017a46:	4b42      	ldr	r3, [pc, #264]	; (8017b50 <_ux_device_class_hid_interrupt_thread+0x11c>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	3320      	adds	r3, #32
 8017a4c:	647b      	str	r3, [r7, #68]	; 0x44
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* All HID events are on the interrupt endpoint IN, from the host.  */
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8017a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	3330      	adds	r3, #48	; 0x30
 8017a54:	643b      	str	r3, [r7, #64]	; 0x40

        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8017a56:	e06e      	b.n	8017b36 <_ux_device_class_hid_interrupt_thread+0x102>
        { 

            /* Wait until we have a event sent by the application
               or a change in the idle state to send last or empty report.  */
            status =  _ux_utility_event_flags_get(&hid -> ux_device_class_hid_event_flags_group,
 8017a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a5a:	3328      	adds	r3, #40	; 0x28
 8017a5c:	0018      	movs	r0, r3
 8017a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a62:	2208      	movs	r2, #8
 8017a64:	18ba      	adds	r2, r7, r2
 8017a66:	9300      	str	r3, [sp, #0]
 8017a68:	0013      	movs	r3, r2
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	2103      	movs	r1, #3
 8017a6e:	f7ff f818 	bl	8016aa2 <_ux_utility_event_flags_get>
 8017a72:	0003      	movs	r3, r0
 8017a74:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                    UX_DEVICE_CLASS_HID_EVENTS_MASK, UX_OR_CLEAR, &actual_flags,
                                                    hid -> ux_device_class_hid_event_wait_timeout);

            /* If there is no event, check if we have timeout defined.  */
            if (status == UX_NO_EVENTS)
 8017a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a78:	2b07      	cmp	r3, #7
 8017a7a:	d126      	bne.n	8017aca <_ux_device_class_hid_interrupt_thread+0x96>
            {

                /* There is no event exists on timeout, insert last.  */

                /* Check if no request been ready.  */
                if (transfer_request_in -> ux_slave_transfer_request_requested_length == 0)
 8017a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a7e:	695b      	ldr	r3, [r3, #20]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d10b      	bne.n	8017a9c <_ux_device_class_hid_interrupt_thread+0x68>
                {

                    /* Assume the request use whole interrupt transfer payload.  */
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
                            transfer_request_in -> ux_slave_transfer_request_transfer_length;
 8017a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a86:	6a1a      	ldr	r2, [r3, #32]
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
 8017a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a8a:	615a      	str	r2, [r3, #20]

                    /* Set the data to zeros.  */
                    _ux_utility_memory_set(
                        transfer_request_in -> ux_slave_transfer_request_data_pointer, 0,
 8017a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a8e:	68d8      	ldr	r0, [r3, #12]
                    _ux_utility_memory_set(
 8017a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a92:	695b      	ldr	r3, [r3, #20]
 8017a94:	001a      	movs	r2, r3
 8017a96:	2100      	movs	r1, #0
 8017a98:	f7ff fa94 	bl	8016fc4 <_ux_utility_memory_set>
                        transfer_request_in -> ux_slave_transfer_request_requested_length); /* Use case of memset is verified. */
                }

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, 
 8017a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a9e:	6959      	ldr	r1, [r3, #20]
 8017aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aa2:	695a      	ldr	r2, [r3, #20]
 8017aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aa6:	0018      	movs	r0, r3
 8017aa8:	f7fe fe1e 	bl	80166e8 <_ux_device_stack_transfer_request>
 8017aac:	0003      	movs	r3, r0
 8017aae:	63fb      	str	r3, [r7, #60]	; 0x3c
                                transfer_request_in -> ux_slave_transfer_request_requested_length,
                                transfer_request_in -> ux_slave_transfer_request_requested_length);

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 8017ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d03f      	beq.n	8017b36 <_ux_device_class_hid_interrupt_thread+0x102>
 8017ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ab8:	2b26      	cmp	r3, #38	; 0x26
 8017aba:	d03c      	beq.n	8017b36 <_ux_device_class_hid_interrupt_thread+0x102>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8017abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017abe:	001a      	movs	r2, r3
 8017ac0:	2107      	movs	r1, #7
 8017ac2:	2002      	movs	r0, #2
 8017ac4:	f7fe fe96 	bl	80167f4 <_ux_system_error_handler>

                /* Next: check events.  */
                continue;
 8017ac8:	e035      	b.n	8017b36 <_ux_device_class_hid_interrupt_thread+0x102>
            }

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8017aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d029      	beq.n	8017b24 <_ux_device_class_hid_interrupt_thread+0xf0>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8017ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ad2:	001a      	movs	r2, r3
 8017ad4:	2107      	movs	r1, #7
 8017ad6:	2002      	movs	r0, #2
 8017ad8:	f7fe fe8c 	bl	80167f4 <_ux_system_error_handler>

                /* Do not proceed.  */
                return;
 8017adc:	e035      	b.n	8017b4a <_ux_device_class_hid_interrupt_thread+0x116>
            /* Check if we have an event to report.  */
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
            {

                /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
                buffer =  transfer_request_in -> ux_slave_transfer_request_data_pointer;
 8017ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Copy the event buffer into the target buffer.  */
                _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 8017ae4:	240c      	movs	r4, #12
 8017ae6:	193b      	adds	r3, r7, r4
 8017ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017aea:	193b      	adds	r3, r7, r4
 8017aec:	3308      	adds	r3, #8
 8017aee:	0019      	movs	r1, r3
 8017af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017af2:	0018      	movs	r0, r3
 8017af4:	f7ff f96e 	bl	8016dd4 <_ux_utility_memory_copy>
            
                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event.ux_device_class_hid_event_length, 
 8017af8:	193b      	adds	r3, r7, r4
 8017afa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8017afc:	193b      	adds	r3, r7, r4
 8017afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b02:	0018      	movs	r0, r3
 8017b04:	f7fe fdf0 	bl	80166e8 <_ux_device_stack_transfer_request>
 8017b08:	0003      	movs	r3, r0
 8017b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                                hid_event.ux_device_class_hid_event_length);
                
                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 8017b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d008      	beq.n	8017b24 <_ux_device_class_hid_interrupt_thread+0xf0>
 8017b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b14:	2b26      	cmp	r3, #38	; 0x26
 8017b16:	d005      	beq.n	8017b24 <_ux_device_class_hid_interrupt_thread+0xf0>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8017b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b1a:	001a      	movs	r2, r3
 8017b1c:	2107      	movs	r1, #7
 8017b1e:	2002      	movs	r0, #2
 8017b20:	f7fe fe68 	bl	80167f4 <_ux_system_error_handler>
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
 8017b24:	230c      	movs	r3, #12
 8017b26:	18fa      	adds	r2, r7, r3
 8017b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b2a:	0011      	movs	r1, r2
 8017b2c:	0018      	movs	r0, r3
 8017b2e:	f7ff fe01 	bl	8017734 <_ux_device_class_hid_event_get>
 8017b32:	1e03      	subs	r3, r0, #0
 8017b34:	d0d3      	beq.n	8017ade <_ux_device_class_hid_interrupt_thread+0xaa>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8017b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b03      	cmp	r3, #3
 8017b3c:	d08c      	beq.n	8017a58 <_ux_device_class_hid_interrupt_thread+0x24>
            }                
        }
             
        /* We need to suspend ourselves. We will be resumed by the device enumeration module.  */
        _ux_device_thread_suspend(&class -> ux_slave_class_thread);
 8017b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b40:	3350      	adds	r3, #80	; 0x50
 8017b42:	0018      	movs	r0, r3
 8017b44:	f7ff fba9 	bl	801729a <_ux_utility_thread_suspend>
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8017b48:	e781      	b.n	8017a4e <_ux_device_class_hid_interrupt_thread+0x1a>
    }
}
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	b015      	add	sp, #84	; 0x54
 8017b4e:	bd90      	pop	{r4, r7, pc}
 8017b50:	20010c9c 	.word	0x20010c9c

08017b54 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8017b54:	b590      	push	{r4, r7, lr}
 8017b56:	b097      	sub	sp, #92	; 0x5c
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	60f8      	str	r0, [r7, #12]
 8017b5c:	60b9      	str	r1, [r7, #8]
 8017b5e:	607a      	str	r2, [r7, #4]
 8017b60:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 8017b62:	23ff      	movs	r3, #255	; 0xff
 8017b64:	653b      	str	r3, [r7, #80]	; 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017b66:	4b45      	ldr	r3, [pc, #276]	; (8017c7c <_ux_device_class_hid_report_get+0x128>)
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	3320      	adds	r3, #32
 8017b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b70:	333c      	adds	r3, #60	; 0x3c
 8017b72:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b76:	3330      	adds	r3, #48	; 0x30
 8017b78:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8017b7a:	2443      	movs	r4, #67	; 0x43
 8017b7c:	193b      	adds	r3, r7, r4
 8017b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b80:	2156      	movs	r1, #86	; 0x56
 8017b82:	5c52      	ldrb	r2, [r2, r1]
 8017b84:	701a      	strb	r2, [r3, #0]
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8017b86:	2042      	movs	r0, #66	; 0x42
 8017b88:	183b      	adds	r3, r7, r0
 8017b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b8c:	2157      	movs	r1, #87	; 0x57
 8017b8e:	5c52      	ldrb	r2, [r2, r1]
 8017b90:	701a      	strb	r2, [r3, #0]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b94:	2203      	movs	r2, #3
 8017b96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8017b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b9a:	68db      	ldr	r3, [r3, #12]
 8017b9c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 8017b9e:	193b      	adds	r3, r7, r4
 8017ba0:	781a      	ldrb	r2, [r3, #0]
 8017ba2:	2110      	movs	r1, #16
 8017ba4:	187b      	adds	r3, r7, r1
 8017ba6:	601a      	str	r2, [r3, #0]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 8017ba8:	183b      	adds	r3, r7, r0
 8017baa:	781a      	ldrb	r2, [r3, #0]
 8017bac:	187b      	adds	r3, r7, r1
 8017bae:	605a      	str	r2, [r3, #4]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017bb0:	187b      	adds	r3, r7, r1
 8017bb2:	2220      	movs	r2, #32
 8017bb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8017bb6:	183b      	adds	r3, r7, r0
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	2b01      	cmp	r3, #1
 8017bbc:	d10c      	bne.n	8017bd8 <_ux_device_class_hid_report_get+0x84>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8017bc2:	2b01      	cmp	r3, #1
 8017bc4:	d008      	beq.n	8017bd8 <_ux_device_class_hid_report_get+0x84>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 8017bc6:	187a      	adds	r2, r7, r1
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	0011      	movs	r1, r2
 8017bcc:	0018      	movs	r0, r3
 8017bce:	f7ff fdb1 	bl	8017734 <_ux_device_class_hid_event_get>
 8017bd2:	0003      	movs	r3, r0
 8017bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8017bd6:	e00c      	b.n	8017bf2 <_ux_device_class_hid_report_get+0x9e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	691b      	ldr	r3, [r3, #16]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d008      	beq.n	8017bf2 <_ux_device_class_hid_report_get+0x9e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	691b      	ldr	r3, [r3, #16]
 8017be4:	2210      	movs	r2, #16
 8017be6:	18b9      	adds	r1, r7, r2
 8017be8:	68fa      	ldr	r2, [r7, #12]
 8017bea:	0010      	movs	r0, r2
 8017bec:	4798      	blx	r3
 8017bee:	0003      	movs	r3, r0
 8017bf0:	653b      	str	r3, [r7, #80]	; 0x50
    }

    if (status == UX_SUCCESS)
 8017bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d124      	bne.n	8017c42 <_ux_device_class_hid_report_get+0xee>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 8017bf8:	2310      	movs	r3, #16
 8017bfa:	18fb      	adds	r3, r7, r3
 8017bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bfe:	683a      	ldr	r2, [r7, #0]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d202      	bcs.n	8017c0a <_ux_device_class_hid_report_get+0xb6>
            hid_event_length =  host_length;
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	657b      	str	r3, [r7, #84]	; 0x54
 8017c08:	e003      	b.n	8017c12 <_ux_device_class_hid_report_get+0xbe>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 8017c0a:	2310      	movs	r3, #16
 8017c0c:	18fb      	adds	r3, r7, r3
 8017c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c10:	657b      	str	r3, [r7, #84]	; 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017c12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c14:	2380      	movs	r3, #128	; 0x80
 8017c16:	005b      	lsls	r3, r3, #1
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d902      	bls.n	8017c22 <_ux_device_class_hid_report_get+0xce>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8017c1c:	2380      	movs	r3, #128	; 0x80
 8017c1e:	005b      	lsls	r3, r3, #1
 8017c20:	657b      	str	r3, [r7, #84]	; 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8017c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c26:	2100      	movs	r1, #0
 8017c28:	0018      	movs	r0, r3
 8017c2a:	f7ff f9cb 	bl	8016fc4 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8017c2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c30:	2310      	movs	r3, #16
 8017c32:	18fb      	adds	r3, r7, r3
 8017c34:	3308      	adds	r3, #8
 8017c36:	0019      	movs	r1, r3
 8017c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c3a:	0018      	movs	r0, r3
 8017c3c:	f7ff f8ca 	bl	8016dd4 <_ux_utility_memory_copy>
 8017c40:	e00e      	b.n	8017c60 <_ux_device_class_hid_report_get+0x10c>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	2bff      	cmp	r3, #255	; 0xff
 8017c46:	d802      	bhi.n	8017c4e <_ux_device_class_hid_report_get+0xfa>
            hid_event_length =  host_length;
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8017c4c:	e002      	b.n	8017c54 <_ux_device_class_hid_report_get+0x100>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8017c4e:	2380      	movs	r3, #128	; 0x80
 8017c50:	005b      	lsls	r3, r3, #1
 8017c52:	657b      	str	r3, [r7, #84]	; 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8017c54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c58:	2100      	movs	r1, #0
 8017c5a:	0018      	movs	r0, r3
 8017c5c:	f7ff f9b2 	bl	8016fc4 <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 8017c60:	683a      	ldr	r2, [r7, #0]
 8017c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c66:	0018      	movs	r0, r3
 8017c68:	f7fe fd3e 	bl	80166e8 <_ux_device_stack_transfer_request>
 8017c6c:	0003      	movs	r3, r0
 8017c6e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Return the status to the caller.  */
    return(status);
 8017c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8017c72:	0018      	movs	r0, r3
 8017c74:	46bd      	mov	sp, r7
 8017c76:	b017      	add	sp, #92	; 0x5c
 8017c78:	bd90      	pop	{r4, r7, pc}
 8017c7a:	46c0      	nop			; (mov r8, r8)
 8017c7c:	20010c9c 	.word	0x20010c9c

08017c80 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8017c80:	b590      	push	{r4, r7, lr}
 8017c82:	b095      	sub	sp, #84	; 0x54
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	60f8      	str	r0, [r7, #12]
 8017c88:	60b9      	str	r1, [r7, #8]
 8017c8a:	607a      	str	r2, [r7, #4]
 8017c8c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017c8e:	4b25      	ldr	r3, [pc, #148]	; (8017d24 <_ux_device_class_hid_report_set+0xa4>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	3320      	adds	r3, #32
 8017c94:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c98:	333c      	adds	r3, #60	; 0x3c
 8017c9a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c9e:	3330      	adds	r3, #48	; 0x30
 8017ca0:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 8017ca2:	2114      	movs	r1, #20
 8017ca4:	187b      	adds	r3, r7, r1
 8017ca6:	68ba      	ldr	r2, [r7, #8]
 8017ca8:	605a      	str	r2, [r3, #4]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cac:	68db      	ldr	r3, [r3, #12]
 8017cae:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	6a1b      	ldr	r3, [r3, #32]
 8017cb4:	2b01      	cmp	r3, #1
 8017cb6:	d10d      	bne.n	8017cd4 <_ux_device_class_hid_report_set+0x54>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8017cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	001a      	movs	r2, r3
 8017cbe:	187b      	adds	r3, r7, r1
 8017cc0:	601a      	str	r2, [r3, #0]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8017cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cc4:	699b      	ldr	r3, [r3, #24]
 8017cc6:	1e5a      	subs	r2, r3, #1
 8017cc8:	187b      	adds	r3, r7, r1
 8017cca:	629a      	str	r2, [r3, #40]	; 0x28
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 8017ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cce:	3301      	adds	r3, #1
 8017cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017cd2:	e007      	b.n	8017ce4 <_ux_device_class_hid_report_set+0x64>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 8017cd4:	2114      	movs	r1, #20
 8017cd6:	187b      	adds	r3, r7, r1
 8017cd8:	2200      	movs	r2, #0
 8017cda:	601a      	str	r2, [r3, #0]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 8017cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cde:	699a      	ldr	r2, [r3, #24]
 8017ce0:	187b      	adds	r3, r7, r1
 8017ce2:	629a      	str	r2, [r3, #40]	; 0x28
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8017ce4:	2214      	movs	r2, #20
 8017ce6:	18bb      	adds	r3, r7, r2
 8017ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cea:	2b20      	cmp	r3, #32
 8017cec:	d902      	bls.n	8017cf4 <_ux_device_class_hid_report_set+0x74>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 8017cee:	18bb      	adds	r3, r7, r2
 8017cf0:	2220      	movs	r2, #32
 8017cf2:	629a      	str	r2, [r3, #40]	; 0x28
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 8017cf4:	2414      	movs	r4, #20
 8017cf6:	193b      	adds	r3, r7, r4
 8017cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cfa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017cfc:	193b      	adds	r3, r7, r4
 8017cfe:	3308      	adds	r3, #8
 8017d00:	0018      	movs	r0, r3
 8017d02:	f7ff f867 	bl	8016dd4 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	68db      	ldr	r3, [r3, #12]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d005      	beq.n	8017d1a <_ux_device_class_hid_report_set+0x9a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	68db      	ldr	r3, [r3, #12]
 8017d12:	1939      	adds	r1, r7, r4
 8017d14:	68fa      	ldr	r2, [r7, #12]
 8017d16:	0010      	movs	r0, r2
 8017d18:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 8017d1a:	2300      	movs	r3, #0
}
 8017d1c:	0018      	movs	r0, r3
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	b015      	add	sp, #84	; 0x54
 8017d22:	bd90      	pop	{r4, r7, pc}
 8017d24:	20010c9c 	.word	0x20010c9c

08017d28 <_ux_device_class_hid_uninitialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b084      	sub	sp, #16
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class;


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6a1b      	ldr	r3, [r3, #32]
 8017d34:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017d3a:	60bb      	str	r3, [r7, #8]

#if !defined(UX_DEVICE_STANDALONE)

    /* Remove HID thread.  */
    _ux_device_thread_delete(&class -> ux_slave_class_thread);
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	3350      	adds	r3, #80	; 0x50
 8017d40:	0018      	movs	r0, r3
 8017d42:	f7ff fa88 	bl	8017256 <_ux_utility_thread_delete>

    /* Remove the thread used by HID.  */
    _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8017d46:	68fa      	ldr	r2, [r7, #12]
 8017d48:	2380      	movs	r3, #128	; 0x80
 8017d4a:	005b      	lsls	r3, r3, #1
 8017d4c:	58d3      	ldr	r3, [r2, r3]
 8017d4e:	0018      	movs	r0, r3
 8017d50:	f7ff f85c 	bl	8016e0c <_ux_utility_memory_free>

    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	3328      	adds	r3, #40	; 0x28
 8017d58:	0018      	movs	r0, r3
 8017d5a:	f7fe fe93 	bl	8016a84 <_ux_utility_event_flags_delete>
#endif

    /* Free memory for the array. */
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8017d5e:	68bb      	ldr	r3, [r7, #8]
 8017d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d62:	0018      	movs	r0, r3
 8017d64:	f7ff f852 	bl	8016e0c <_ux_utility_memory_free>
        hid -> ux_device_class_hid_receiver ->
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	0018      	movs	r0, r3
 8017d6c:	f7ff f84e 	bl	8016e0c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 8017d70:	2300      	movs	r3, #0
}
 8017d72:	0018      	movs	r0, r3
 8017d74:	46bd      	mov	sp, r7
 8017d76:	b004      	add	sp, #16
 8017d78:	bd80      	pop	{r7, pc}

08017d7a <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8017d7a:	b580      	push	{r7, lr}
 8017d7c:	b082      	sub	sp, #8
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	6078      	str	r0, [r7, #4]
 8017d82:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	2280      	movs	r2, #128	; 0x80
 8017d88:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2201      	movs	r2, #1
 8017d8e:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	0018      	movs	r0, r3
 8017d94:	f7fd fbc6 	bl	8015524 <_ux_device_stack_control_request_process>
}
 8017d98:	46c0      	nop			; (mov r8, r8)
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	b002      	add	sp, #8
 8017d9e:	bd80      	pop	{r7, pc}

08017da0 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b084      	sub	sp, #16
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	2200      	movs	r2, #0
 8017db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	2280      	movs	r2, #128	; 0x80
 8017db6:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	0018      	movs	r0, r3
 8017dbc:	f7fd fbb2 	bl	8015524 <_ux_device_stack_control_request_process>
 8017dc0:	1e03      	subs	r3, r0, #0
 8017dc2:	d108      	bne.n	8017dd6 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	2203      	movs	r2, #3
 8017dc8:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	2300      	movs	r3, #0
 8017dce:	2200      	movs	r2, #0
 8017dd0:	2100      	movs	r1, #0
 8017dd2:	f7f0 fa3f 	bl	8008254 <HAL_PCD_EP_Transmit>
    }
}
 8017dd6:	46c0      	nop			; (mov r8, r8)
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	b004      	add	sp, #16
 8017ddc:	bd80      	pop	{r7, pc}

08017dde <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8017dde:	b580      	push	{r7, lr}
 8017de0:	b084      	sub	sp, #16
 8017de2:	af00      	add	r7, sp, #0
 8017de4:	60f8      	str	r0, [r7, #12]
 8017de6:	60b9      	str	r1, [r7, #8]
 8017de8:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	2280      	movs	r2, #128	; 0x80
 8017dee:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	0018      	movs	r0, r3
 8017df4:	f7fd fb96 	bl	8015524 <_ux_device_stack_control_request_process>
 8017df8:	1e03      	subs	r3, r0, #0
 8017dfa:	d108      	bne.n	8017e0e <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	2204      	movs	r2, #4
 8017e00:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	2300      	movs	r3, #0
 8017e06:	2200      	movs	r2, #0
 8017e08:	2100      	movs	r1, #0
 8017e0a:	f7f0 fa23 	bl	8008254 <HAL_PCD_EP_Transmit>
    }
}
 8017e0e:	46c0      	nop			; (mov r8, r8)
 8017e10:	46bd      	mov	sp, r7
 8017e12:	b004      	add	sp, #16
 8017e14:	bd80      	pop	{r7, pc}
	...

08017e18 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b088      	sub	sp, #32
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017e20:	4b3e      	ldr	r3, [pc, #248]	; (8017f1c <HAL_PCD_SetupStageCallback+0x104>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	69db      	ldr	r3, [r3, #28]
 8017e2a:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8017e2c:	69bb      	ldr	r3, [r7, #24]
 8017e2e:	3304      	adds	r3, #4
 8017e30:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8017e32:	697b      	ldr	r3, [r7, #20]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	3330      	adds	r3, #48	; 0x30
 8017e38:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	3354      	adds	r3, #84	; 0x54
 8017e3e:	0018      	movs	r0, r3
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	22b1      	movs	r2, #177	; 0xb1
 8017e44:	0092      	lsls	r2, r2, #2
 8017e46:	4694      	mov	ip, r2
 8017e48:	4463      	add	r3, ip
 8017e4a:	2208      	movs	r2, #8
 8017e4c:	0019      	movs	r1, r3
 8017e4e:	f7fe ffc1 	bl	8016dd4 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	2200      	movs	r2, #0
 8017e56:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8017e58:	693b      	ldr	r3, [r7, #16]
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8017e5e:	693b      	ldr	r3, [r7, #16]
 8017e60:	2200      	movs	r2, #0
 8017e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	685b      	ldr	r3, [r3, #4]
 8017e68:	220e      	movs	r2, #14
 8017e6a:	4393      	bics	r3, r2
 8017e6c:	001a      	movs	r2, r3
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	2254      	movs	r2, #84	; 0x54
 8017e76:	5c9b      	ldrb	r3, [r3, r2]
 8017e78:	b25b      	sxtb	r3, r3
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	da06      	bge.n	8017e8c <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8017e7e:	693a      	ldr	r2, [r7, #16]
 8017e80:	697b      	ldr	r3, [r7, #20]
 8017e82:	0011      	movs	r1, r2
 8017e84:	0018      	movs	r0, r3
 8017e86:	f7ff ff78 	bl	8017d7a <_ux_dcd_stm32_setup_in>
 8017e8a:	e043      	b.n	8017f14 <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	225a      	movs	r2, #90	; 0x5a
 8017e96:	5c9b      	ldrb	r3, [r3, r2]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d10b      	bne.n	8017eb4 <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	225b      	movs	r2, #91	; 0x5b
 8017ea0:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d106      	bne.n	8017eb4 <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8017ea6:	687a      	ldr	r2, [r7, #4]
 8017ea8:	6939      	ldr	r1, [r7, #16]
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	0018      	movs	r0, r3
 8017eae:	f7ff ff96 	bl	8017dde <_ux_dcd_stm32_setup_status>
 8017eb2:	e02f      	b.n	8017f14 <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	689b      	ldr	r3, [r3, #8]
 8017eb8:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8017eba:	693b      	ldr	r3, [r7, #16]
 8017ebc:	3354      	adds	r3, #84	; 0x54
 8017ebe:	3306      	adds	r3, #6
 8017ec0:	0018      	movs	r0, r3
 8017ec2:	f7ff f954 	bl	801716e <_ux_utility_short_get>
 8017ec6:	0002      	movs	r2, r0
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	695a      	ldr	r2, [r3, #20]
 8017ed0:	2380      	movs	r3, #128	; 0x80
 8017ed2:	005b      	lsls	r3, r3, #1
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d909      	bls.n	8017eec <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8017ed8:	68fa      	ldr	r2, [r7, #12]
 8017eda:	69bb      	ldr	r3, [r7, #24]
 8017edc:	0011      	movs	r1, r2
 8017ede:	0018      	movs	r0, r3
 8017ee0:	f000 fa58 	bl	8018394 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 8017eea:	e013      	b.n	8017f14 <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	2200      	movs	r2, #0
 8017ef0:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	68da      	ldr	r2, [r3, #12]
 8017ef6:	693b      	ldr	r3, [r7, #16]
 8017ef8:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 8017efe:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8017f00:	693b      	ldr	r3, [r7, #16]
 8017f02:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8017f04:	693b      	ldr	r3, [r7, #16]
 8017f06:	695b      	ldr	r3, [r3, #20]
 8017f08:	6878      	ldr	r0, [r7, #4]
 8017f0a:	f7f0 f945 	bl	8008198 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	2202      	movs	r2, #2
 8017f12:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8017f14:	46bd      	mov	sp, r7
 8017f16:	b008      	add	sp, #32
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	46c0      	nop			; (mov r8, r8)
 8017f1c:	20010c9c 	.word	0x20010c9c

08017f20 <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b088      	sub	sp, #32
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	000a      	movs	r2, r1
 8017f2a:	1cfb      	adds	r3, r7, #3
 8017f2c:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017f2e:	4b4f      	ldr	r3, [pc, #316]	; (801806c <HAL_PCD_DataInStageCallback+0x14c>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8017f34:	697b      	ldr	r3, [r7, #20]
 8017f36:	69db      	ldr	r3, [r3, #28]
 8017f38:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8017f3a:	1cfb      	adds	r3, r7, #3
 8017f3c:	781b      	ldrb	r3, [r3, #0]
 8017f3e:	220f      	movs	r2, #15
 8017f40:	4013      	ands	r3, r2
 8017f42:	d00d      	beq.n	8017f60 <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8017f44:	1cfb      	adds	r3, r7, #3
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	220f      	movs	r2, #15
 8017f4a:	401a      	ands	r2, r3
 8017f4c:	0013      	movs	r3, r2
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	189b      	adds	r3, r3, r2
 8017f52:	009b      	lsls	r3, r3, #2
 8017f54:	3360      	adds	r3, #96	; 0x60
 8017f56:	693a      	ldr	r2, [r7, #16]
 8017f58:	18d3      	adds	r3, r2, r3
 8017f5a:	3304      	adds	r3, #4
 8017f5c:	61fb      	str	r3, [r7, #28]
 8017f5e:	e00b      	b.n	8017f78 <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8017f60:	1cfb      	adds	r3, r7, #3
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	220f      	movs	r2, #15
 8017f66:	401a      	ands	r2, r3
 8017f68:	0013      	movs	r3, r2
 8017f6a:	005b      	lsls	r3, r3, #1
 8017f6c:	189b      	adds	r3, r3, r2
 8017f6e:	009b      	lsls	r3, r3, #2
 8017f70:	693a      	ldr	r2, [r7, #16]
 8017f72:	18d3      	adds	r3, r2, r3
 8017f74:	3304      	adds	r3, #4
 8017f76:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	3330      	adds	r3, #48	; 0x30
 8017f7e:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8017f80:	1cfb      	adds	r3, r7, #3
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d15e      	bne.n	8018046 <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	689b      	ldr	r3, [r3, #8]
 8017f8c:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	7a1b      	ldrb	r3, [r3, #8]
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d166      	bne.n	8018064 <HAL_PCD_DataInStageCallback+0x144>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8017f96:	6878      	ldr	r0, [r7, #4]
 8017f98:	2300      	movs	r3, #0
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	f7f0 f8fb 	bl	8008198 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d826      	bhi.n	8017ffc <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fb2:	2b01      	cmp	r3, #1
 8017fb4:	d10b      	bne.n	8017fce <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 8017fba:	b2d9      	uxtb	r1, r3
 8017fbc:	6878      	ldr	r0, [r7, #4]
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	f7f0 f947 	bl	8008254 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	651a      	str	r2, [r3, #80]	; 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 8017fcc:	e04a      	b.n	8018064 <HAL_PCD_DataInStageCallback+0x144>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	2202      	movs	r2, #2
 8017fd8:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d004      	beq.n	8017ff4 <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fee:	68fa      	ldr	r2, [r7, #12]
 8017ff0:	0010      	movs	r0, r2
 8017ff2:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8017ff4:	69fb      	ldr	r3, [r7, #28]
 8017ff6:	2204      	movs	r2, #4
 8017ff8:	721a      	strb	r2, [r3, #8]
}
 8017ffa:	e033      	b.n	8018064 <HAL_PCD_DataInStageCallback+0x144>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	69da      	ldr	r2, [r3, #28]
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	69db      	ldr	r3, [r3, #28]
 8018004:	1ad3      	subs	r3, r2, r3
 8018006:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	69db      	ldr	r3, [r3, #28]
 801800c:	69ba      	ldr	r2, [r7, #24]
 801800e:	429a      	cmp	r2, r3
 8018010:	d902      	bls.n	8018018 <HAL_PCD_DataInStageCallback+0xf8>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	69db      	ldr	r3, [r3, #28]
 8018016:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	691a      	ldr	r2, [r3, #16]
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	69db      	ldr	r3, [r3, #28]
 8018020:	18d2      	adds	r2, r2, r3
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	69da      	ldr	r2, [r3, #28]
 801802a:	69bb      	ldr	r3, [r7, #24]
 801802c:	1ad2      	subs	r2, r2, r3
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8018032:	68bb      	ldr	r3, [r7, #8]
 8018034:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 8018036:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 801803c:	69bb      	ldr	r3, [r7, #24]
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f7f0 f908 	bl	8008254 <HAL_PCD_EP_Transmit>
}
 8018044:	e00e      	b.n	8018064 <HAL_PCD_DataInStageCallback+0x144>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	2200      	movs	r2, #0
 801804a:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	2202      	movs	r2, #2
 8018050:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	3330      	adds	r3, #48	; 0x30
 801805e:	0018      	movs	r0, r3
 8018060:	f7ff f876 	bl	8017150 <_ux_utility_semaphore_put>
}
 8018064:	46c0      	nop			; (mov r8, r8)
 8018066:	46bd      	mov	sp, r7
 8018068:	b008      	add	sp, #32
 801806a:	bd80      	pop	{r7, pc}
 801806c:	20010c9c 	.word	0x20010c9c

08018070 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b088      	sub	sp, #32
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
 8018078:	000a      	movs	r2, r1
 801807a:	1cfb      	adds	r3, r7, #3
 801807c:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 801807e:	4b40      	ldr	r3, [pc, #256]	; (8018180 <HAL_PCD_DataOutStageCallback+0x110>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018084:	69fb      	ldr	r3, [r7, #28]
 8018086:	69db      	ldr	r3, [r3, #28]
 8018088:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801808a:	1cfb      	adds	r3, r7, #3
 801808c:	781b      	ldrb	r3, [r3, #0]
 801808e:	220f      	movs	r2, #15
 8018090:	401a      	ands	r2, r3
 8018092:	0013      	movs	r3, r2
 8018094:	005b      	lsls	r3, r3, #1
 8018096:	189b      	adds	r3, r3, r2
 8018098:	009b      	lsls	r3, r3, #2
 801809a:	69ba      	ldr	r2, [r7, #24]
 801809c:	18d3      	adds	r3, r2, r3
 801809e:	3304      	adds	r3, #4
 80180a0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	3330      	adds	r3, #48	; 0x30
 80180a8:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 80180aa:	1cfb      	adds	r3, r7, #3
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d14c      	bne.n	801814c <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	7a1b      	ldrb	r3, [r3, #8]
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	d15d      	bne.n	8018176 <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 80180ba:	693b      	ldr	r3, [r7, #16]
 80180bc:	689b      	ldr	r3, [r3, #8]
 80180be:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 80180c0:	1cfb      	adds	r3, r7, #3
 80180c2:	781a      	ldrb	r2, [r3, #0]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	0011      	movs	r1, r2
 80180c8:	0018      	movs	r0, r3
 80180ca:	f7f0 f8aa 	bl	8008222 <HAL_PCD_EP_GetRxCount>
 80180ce:	0003      	movs	r3, r0
 80180d0:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	699a      	ldr	r2, [r3, #24]
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	18d2      	adds	r2, r2, r3
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80180de:	693b      	ldr	r3, [r7, #16]
 80180e0:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80180e6:	429a      	cmp	r2, r3
 80180e8:	d823      	bhi.n	8018132 <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80180ee:	693b      	ldr	r3, [r7, #16]
 80180f0:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d004      	beq.n	8018100 <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80180fa:	68ba      	ldr	r2, [r7, #8]
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d006      	beq.n	801810e <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 8018100:	687a      	ldr	r2, [r7, #4]
 8018102:	6939      	ldr	r1, [r7, #16]
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	0018      	movs	r0, r3
 8018108:	f7ff fe4a 	bl	8017da0 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 801810c:	e033      	b.n	8018176 <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801810e:	693b      	ldr	r3, [r7, #16]
 8018110:	691a      	ldr	r2, [r3, #16]
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	69db      	ldr	r3, [r3, #28]
 8018116:	18d2      	adds	r2, r2, r3
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 8018120:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	69db      	ldr	r3, [r3, #28]
 801812a:	6878      	ldr	r0, [r7, #4]
 801812c:	f7f0 f834 	bl	8008198 <HAL_PCD_EP_Receive>
}
 8018130:	e021      	b.n	8018176 <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	2227      	movs	r2, #39	; 0x27
 8018136:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801813c:	2b00      	cmp	r3, #0
 801813e:	d01a      	beq.n	8018176 <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8018140:	693b      	ldr	r3, [r7, #16]
 8018142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018144:	693a      	ldr	r2, [r7, #16]
 8018146:	0010      	movs	r0, r2
 8018148:	4798      	blx	r3
}
 801814a:	e014      	b.n	8018176 <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801814c:	1cfb      	adds	r3, r7, #3
 801814e:	781a      	ldrb	r2, [r3, #0]
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	0011      	movs	r1, r2
 8018154:	0018      	movs	r0, r3
 8018156:	f7f0 f864 	bl	8008222 <HAL_PCD_EP_GetRxCount>
 801815a:	0002      	movs	r2, r0
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	2200      	movs	r2, #0
 8018164:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8018166:	693b      	ldr	r3, [r7, #16]
 8018168:	2202      	movs	r2, #2
 801816a:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801816c:	693b      	ldr	r3, [r7, #16]
 801816e:	3330      	adds	r3, #48	; 0x30
 8018170:	0018      	movs	r0, r3
 8018172:	f7fe ffed 	bl	8017150 <_ux_utility_semaphore_put>
}
 8018176:	46c0      	nop			; (mov r8, r8)
 8018178:	46bd      	mov	sp, r7
 801817a:	b008      	add	sp, #32
 801817c:	bd80      	pop	{r7, pc}
 801817e:	46c0      	nop			; (mov r8, r8)
 8018180:	20010c9c 	.word	0x20010c9c

08018184 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b082      	sub	sp, #8
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 801818c:	4b11      	ldr	r3, [pc, #68]	; (80181d4 <HAL_PCD_ResetCallback+0x50>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	6a1b      	ldr	r3, [r3, #32]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d001      	beq.n	801819a <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8018196:	f7fd fd5b 	bl	8015c50 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	2b02      	cmp	r3, #2
 80181a0:	d106      	bne.n	80181b0 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80181a2:	4b0c      	ldr	r3, [pc, #48]	; (80181d4 <HAL_PCD_ResetCallback+0x50>)
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	23d0      	movs	r3, #208	; 0xd0
 80181a8:	005b      	lsls	r3, r3, #1
 80181aa:	2101      	movs	r1, #1
 80181ac:	50d1      	str	r1, [r2, r3]
        break;
 80181ae:	e006      	b.n	80181be <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80181b0:	4b08      	ldr	r3, [pc, #32]	; (80181d4 <HAL_PCD_ResetCallback+0x50>)
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	23d0      	movs	r3, #208	; 0xd0
 80181b6:	005b      	lsls	r3, r3, #1
 80181b8:	2101      	movs	r1, #1
 80181ba:	50d1      	str	r1, [r2, r3]
        break;
 80181bc:	46c0      	nop			; (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 80181be:	f000 fa25 	bl	801860c <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80181c2:	4b04      	ldr	r3, [pc, #16]	; (80181d4 <HAL_PCD_ResetCallback+0x50>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	2201      	movs	r2, #1
 80181c8:	621a      	str	r2, [r3, #32]
}
 80181ca:	46c0      	nop			; (mov r8, r8)
 80181cc:	46bd      	mov	sp, r7
 80181ce:	b002      	add	sp, #8
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	46c0      	nop			; (mov r8, r8)
 80181d4:	20010c9c 	.word	0x20010c9c

080181d8 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b084      	sub	sp, #16
 80181dc:	af00      	add	r7, sp, #0
 80181de:	6078      	str	r0, [r7, #4]
 80181e0:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	2280      	movs	r2, #128	; 0x80
 80181e6:	4013      	ands	r3, r2
 80181e8:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 80181ea:	683b      	ldr	r3, [r7, #0]
 80181ec:	227f      	movs	r2, #127	; 0x7f
 80181ee:	4013      	ands	r3, r2
 80181f0:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80181f2:	68bb      	ldr	r3, [r7, #8]
 80181f4:	2b07      	cmp	r3, #7
 80181f6:	d806      	bhi.n	8018206 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	22c4      	movs	r2, #196	; 0xc4
 80181fc:	589b      	ldr	r3, [r3, r2]
 80181fe:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018200:	68ba      	ldr	r2, [r7, #8]
 8018202:	429a      	cmp	r2, r3
 8018204:	d301      	bcc.n	801820a <_stm32_ed_get+0x32>
        return(UX_NULL);
 8018206:	2300      	movs	r3, #0
 8018208:	e014      	b.n	8018234 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d009      	beq.n	8018224 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8018210:	68ba      	ldr	r2, [r7, #8]
 8018212:	0013      	movs	r3, r2
 8018214:	005b      	lsls	r3, r3, #1
 8018216:	189b      	adds	r3, r3, r2
 8018218:	009b      	lsls	r3, r3, #2
 801821a:	3360      	adds	r3, #96	; 0x60
 801821c:	687a      	ldr	r2, [r7, #4]
 801821e:	18d3      	adds	r3, r2, r3
 8018220:	3304      	adds	r3, #4
 8018222:	e007      	b.n	8018234 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8018224:	68ba      	ldr	r2, [r7, #8]
 8018226:	0013      	movs	r3, r2
 8018228:	005b      	lsls	r3, r3, #1
 801822a:	189b      	adds	r3, r3, r2
 801822c:	009b      	lsls	r3, r3, #2
 801822e:	687a      	ldr	r2, [r7, #4]
 8018230:	18d3      	adds	r3, r2, r3
 8018232:	3304      	adds	r3, #4
}
 8018234:	0018      	movs	r0, r3
 8018236:	46bd      	mov	sp, r7
 8018238:	b004      	add	sp, #16
 801823a:	bd80      	pop	{r7, pc}

0801823c <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801823c:	b590      	push	{r4, r7, lr}
 801823e:	b085      	sub	sp, #20
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
 8018244:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	695b      	ldr	r3, [r3, #20]
 801824a:	2280      	movs	r2, #128	; 0x80
 801824c:	4393      	bics	r3, r2
 801824e:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	695a      	ldr	r2, [r3, #20]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	0011      	movs	r1, r2
 8018258:	0018      	movs	r0, r3
 801825a:	f7ff ffbd 	bl	80181d8 <_stm32_ed_get>
 801825e:	0003      	movs	r3, r0
 8018260:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 8018262:	68bb      	ldr	r3, [r7, #8]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d101      	bne.n	801826c <_ux_dcd_stm32_endpoint_create+0x30>
        return(UX_NO_ED_AVAILABLE);
 8018268:	2314      	movs	r3, #20
 801826a:	e033      	b.n	80182d4 <_ux_dcd_stm32_endpoint_create+0x98>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	2201      	movs	r2, #1
 8018272:	4013      	ands	r3, r2
 8018274:	d12d      	bne.n	80182d2 <_ux_dcd_stm32_endpoint_create+0x96>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	2201      	movs	r2, #1
 801827c:	431a      	orrs	r2, r3
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	68ba      	ldr	r2, [r7, #8]
 8018286:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	683a      	ldr	r2, [r7, #0]
 801828c:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	b2da      	uxtb	r2, r3
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	695b      	ldr	r3, [r3, #20]
 801829a:	b2db      	uxtb	r3, r3
 801829c:	227f      	movs	r2, #127	; 0x7f
 801829e:	4393      	bics	r3, r2
 80182a0:	b2da      	uxtb	r2, r3
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d010      	beq.n	80182ce <_ux_dcd_stm32_endpoint_create+0x92>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	22c4      	movs	r2, #196	; 0xc4
 80182b0:	5898      	ldr	r0, [r3, r2]
 80182b2:	683b      	ldr	r3, [r7, #0]
 80182b4:	695b      	ldr	r3, [r3, #20]
 80182b6:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80182bc:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80182c2:	b2db      	uxtb	r3, r3
 80182c4:	2403      	movs	r4, #3
 80182c6:	4023      	ands	r3, r4
 80182c8:	b2db      	uxtb	r3, r3
 80182ca:	f7ef fe98 	bl	8007ffe <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 80182ce:	2300      	movs	r3, #0
 80182d0:	e000      	b.n	80182d4 <_ux_dcd_stm32_endpoint_create+0x98>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 80182d2:	2314      	movs	r3, #20
}
 80182d4:	0018      	movs	r0, r3
 80182d6:	46bd      	mov	sp, r7
 80182d8:	b005      	add	sp, #20
 80182da:	bd90      	pop	{r4, r7, pc}

080182dc <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	689b      	ldr	r3, [r3, #8]
 80182ea:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	2200      	movs	r2, #0
 80182f0:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	22c4      	movs	r2, #196	; 0xc4
 80182f6:	589a      	ldr	r2, [r3, r2]
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	695b      	ldr	r3, [r3, #20]
 80182fc:	b2db      	uxtb	r3, r3
 80182fe:	0019      	movs	r1, r3
 8018300:	0010      	movs	r0, r2
 8018302:	f7ef fef6 	bl	80080f2 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8018306:	2300      	movs	r3, #0
}
 8018308:	0018      	movs	r0, r3
 801830a:	46bd      	mov	sp, r7
 801830c:	b004      	add	sp, #16
 801830e:	bd80      	pop	{r7, pc}

08018310 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b086      	sub	sp, #24
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	689b      	ldr	r3, [r3, #8]
 801831e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8018320:	f3ef 8310 	mrs	r3, PRIMASK
 8018324:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8018326:	b672      	cpsid	i
    return(primask_value);
 8018328:	68fb      	ldr	r3, [r7, #12]

    UX_DISABLE
 801832a:	613b      	str	r3, [r7, #16]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	4a17      	ldr	r2, [pc, #92]	; (8018390 <_ux_dcd_stm32_endpoint_reset+0x80>)
 8018332:	401a      	ands	r2, r3
 8018334:	697b      	ldr	r3, [r7, #20]
 8018336:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	2200      	movs	r2, #0
 801833c:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	22c4      	movs	r2, #196	; 0xc4
 8018342:	589a      	ldr	r2, [r3, r2]
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	695b      	ldr	r3, [r3, #20]
 8018348:	b2db      	uxtb	r3, r3
 801834a:	0019      	movs	r1, r3
 801834c:	0010      	movs	r0, r2
 801834e:	f7f0 f829 	bl	80083a4 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	22c4      	movs	r2, #196	; 0xc4
 8018356:	589a      	ldr	r2, [r3, r2]
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	695b      	ldr	r3, [r3, #20]
 801835c:	b2db      	uxtb	r3, r3
 801835e:	0019      	movs	r1, r3
 8018360:	0010      	movs	r0, r2
 8018362:	f7f0 f8b8 	bl	80084d6 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 8018366:	683b      	ldr	r3, [r7, #0]
 8018368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801836a:	2b00      	cmp	r3, #0
 801836c:	d004      	beq.n	8018378 <_ux_dcd_stm32_endpoint_reset+0x68>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	3360      	adds	r3, #96	; 0x60
 8018372:	0018      	movs	r0, r3
 8018374:	f7fe feec 	bl	8017150 <_ux_utility_semaphore_put>
 8018378:	693b      	ldr	r3, [r7, #16]
 801837a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	f383 8810 	msr	PRIMASK, r3
}
 8018382:	46c0      	nop			; (mov r8, r8)
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 8018384:	2300      	movs	r3, #0
}
 8018386:	0018      	movs	r0, r3
 8018388:	46bd      	mov	sp, r7
 801838a:	b006      	add	sp, #24
 801838c:	bd80      	pop	{r7, pc}
 801838e:	46c0      	nop			; (mov r8, r8)
 8018390:	fffffcf3 	.word	0xfffffcf3

08018394 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b084      	sub	sp, #16
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	689b      	ldr	r3, [r3, #8]
 80183a2:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	2204      	movs	r2, #4
 80183aa:	431a      	orrs	r2, r3
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	22c4      	movs	r2, #196	; 0xc4
 80183b4:	5898      	ldr	r0, [r3, r2]
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	695b      	ldr	r3, [r3, #20]
 80183ba:	b2da      	uxtb	r2, r3
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	7a9b      	ldrb	r3, [r3, #10]
 80183c0:	4313      	orrs	r3, r2
 80183c2:	b2db      	uxtb	r3, r3
 80183c4:	0019      	movs	r1, r3
 80183c6:	f7ef ff8f 	bl	80082e8 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80183ca:	2300      	movs	r3, #0
}
 80183cc:	0018      	movs	r0, r3
 80183ce:	46bd      	mov	sp, r7
 80183d0:	b004      	add	sp, #16
 80183d2:	bd80      	pop	{r7, pc}

080183d4 <_stm32_ed_get>:
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b084      	sub	sp, #16
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	2280      	movs	r2, #128	; 0x80
 80183e2:	4013      	ands	r3, r2
 80183e4:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	227f      	movs	r2, #127	; 0x7f
 80183ea:	4013      	ands	r3, r2
 80183ec:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	2b07      	cmp	r3, #7
 80183f2:	d806      	bhi.n	8018402 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	22c4      	movs	r2, #196	; 0xc4
 80183f8:	589b      	ldr	r3, [r3, r2]
 80183fa:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80183fc:	68ba      	ldr	r2, [r7, #8]
 80183fe:	429a      	cmp	r2, r3
 8018400:	d301      	bcc.n	8018406 <_stm32_ed_get+0x32>
        return(UX_NULL);
 8018402:	2300      	movs	r3, #0
 8018404:	e014      	b.n	8018430 <_stm32_ed_get+0x5c>
    if (ep_dir)
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d009      	beq.n	8018420 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 801840c:	68ba      	ldr	r2, [r7, #8]
 801840e:	0013      	movs	r3, r2
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	189b      	adds	r3, r3, r2
 8018414:	009b      	lsls	r3, r3, #2
 8018416:	3360      	adds	r3, #96	; 0x60
 8018418:	687a      	ldr	r2, [r7, #4]
 801841a:	18d3      	adds	r3, r2, r3
 801841c:	3304      	adds	r3, #4
 801841e:	e007      	b.n	8018430 <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8018420:	68ba      	ldr	r2, [r7, #8]
 8018422:	0013      	movs	r3, r2
 8018424:	005b      	lsls	r3, r3, #1
 8018426:	189b      	adds	r3, r3, r2
 8018428:	009b      	lsls	r3, r3, #2
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	18d3      	adds	r3, r2, r3
 801842e:	3304      	adds	r3, #4
}
 8018430:	0018      	movs	r0, r3
 8018432:	46bd      	mov	sp, r7
 8018434:	b004      	add	sp, #16
 8018436:	bd80      	pop	{r7, pc}

08018438 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 8018442:	683a      	ldr	r2, [r7, #0]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	0011      	movs	r1, r2
 8018448:	0018      	movs	r0, r3
 801844a:	f7ff ffc3 	bl	80183d4 <_stm32_ed_get>
 801844e:	0003      	movs	r3, r0
 8018450:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	685b      	ldr	r3, [r3, #4]
 8018456:	2201      	movs	r2, #1
 8018458:	4013      	ands	r3, r2
 801845a:	d101      	bne.n	8018460 <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 801845c:	23ff      	movs	r3, #255	; 0xff
 801845e:	e007      	b.n	8018470 <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	2204      	movs	r2, #4
 8018466:	4013      	ands	r3, r2
 8018468:	d101      	bne.n	801846e <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 801846a:	2300      	movs	r3, #0
 801846c:	e000      	b.n	8018470 <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 801846e:	2301      	movs	r3, #1
}
 8018470:	0018      	movs	r0, r3
 8018472:	46bd      	mov	sp, r7
 8018474:	b004      	add	sp, #16
 8018476:	bd80      	pop	{r7, pc}

08018478 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 8018482:	2300      	movs	r3, #0
}
 8018484:	0018      	movs	r0, r3
 8018486:	46bd      	mov	sp, r7
 8018488:	b002      	add	sp, #8
 801848a:	bd80      	pop	{r7, pc}

0801848c <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b086      	sub	sp, #24
 8018490:	af00      	add	r7, sp, #0
 8018492:	60f8      	str	r0, [r7, #12]
 8018494:	60b9      	str	r1, [r7, #8]
 8018496:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d106      	bne.n	80184ae <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 80184a0:	2255      	movs	r2, #85	; 0x55
 80184a2:	2102      	movs	r1, #2
 80184a4:	2002      	movs	r0, #2
 80184a6:	f7fe f9a5 	bl	80167f4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 80184aa:	2355      	movs	r3, #85	; 0x55
 80184ac:	e077      	b.n	801859e <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	69db      	ldr	r3, [r3, #28]
 80184b2:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	3b0a      	subs	r3, #10
 80184b8:	2b0b      	cmp	r3, #11
 80184ba:	d867      	bhi.n	801858c <_ux_dcd_stm32_function+0x100>
 80184bc:	009a      	lsls	r2, r3, #2
 80184be:	4b3a      	ldr	r3, [pc, #232]	; (80185a8 <_ux_dcd_stm32_function+0x11c>)
 80184c0:	18d3      	adds	r3, r2, r3
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	693b      	ldr	r3, [r7, #16]
 80184ca:	0011      	movs	r1, r2
 80184cc:	0018      	movs	r0, r3
 80184ce:	f7ff ffd3 	bl	8018478 <_ux_dcd_stm32_frame_number_get>
 80184d2:	0003      	movs	r3, r0
 80184d4:	617b      	str	r3, [r7, #20]
        break;
 80184d6:	e061      	b.n	801859c <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 80184d8:	687a      	ldr	r2, [r7, #4]
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	0011      	movs	r1, r2
 80184de:	0018      	movs	r0, r3
 80184e0:	f000 f993 	bl	801880a <_ux_dcd_stm32_transfer_request>
 80184e4:	0003      	movs	r3, r0
 80184e6:	617b      	str	r3, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 80184e8:	e058      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 80184ea:	687a      	ldr	r2, [r7, #4]
 80184ec:	693b      	ldr	r3, [r7, #16]
 80184ee:	0011      	movs	r1, r2
 80184f0:	0018      	movs	r0, r3
 80184f2:	f000 f969 	bl	80187c8 <_ux_dcd_stm32_transfer_abort>
 80184f6:	0003      	movs	r3, r0
 80184f8:	617b      	str	r3, [r7, #20]
        break;
 80184fa:	e04f      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	693b      	ldr	r3, [r7, #16]
 8018500:	0011      	movs	r1, r2
 8018502:	0018      	movs	r0, r3
 8018504:	f7ff fe9a 	bl	801823c <_ux_dcd_stm32_endpoint_create>
 8018508:	0003      	movs	r3, r0
 801850a:	617b      	str	r3, [r7, #20]
        break;
 801850c:	e046      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	693b      	ldr	r3, [r7, #16]
 8018512:	0011      	movs	r1, r2
 8018514:	0018      	movs	r0, r3
 8018516:	f7ff fee1 	bl	80182dc <_ux_dcd_stm32_endpoint_destroy>
 801851a:	0003      	movs	r3, r0
 801851c:	617b      	str	r3, [r7, #20]
        break;
 801851e:	e03d      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8018520:	687a      	ldr	r2, [r7, #4]
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	0011      	movs	r1, r2
 8018526:	0018      	movs	r0, r3
 8018528:	f7ff fef2 	bl	8018310 <_ux_dcd_stm32_endpoint_reset>
 801852c:	0003      	movs	r3, r0
 801852e:	617b      	str	r3, [r7, #20]
        break;
 8018530:	e034      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8018532:	687a      	ldr	r2, [r7, #4]
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	0011      	movs	r1, r2
 8018538:	0018      	movs	r0, r3
 801853a:	f7ff ff2b 	bl	8018394 <_ux_dcd_stm32_endpoint_stall>
 801853e:	0003      	movs	r3, r0
 8018540:	617b      	str	r3, [r7, #20]
        break;
 8018542:	e02b      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8018544:	693b      	ldr	r3, [r7, #16]
 8018546:	22c4      	movs	r2, #196	; 0xc4
 8018548:	589b      	ldr	r3, [r3, r2]
 801854a:	687a      	ldr	r2, [r7, #4]
 801854c:	b2d2      	uxtb	r2, r2
 801854e:	0011      	movs	r1, r2
 8018550:	0018      	movs	r0, r3
 8018552:	f7ef fd29 	bl	8007fa8 <HAL_PCD_SetAddress>
 8018556:	0003      	movs	r3, r0
 8018558:	617b      	str	r3, [r7, #20]
        break;
 801855a:	e01f      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	2b0b      	cmp	r3, #11
 8018560:	d108      	bne.n	8018574 <_ux_dcd_stm32_function+0xe8>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	22c4      	movs	r2, #196	; 0xc4
 8018566:	589b      	ldr	r3, [r3, r2]
 8018568:	0018      	movs	r0, r3
 801856a:	f7ef fbca 	bl	8007d02 <HAL_PCD_Stop>
 801856e:	0003      	movs	r3, r0
 8018570:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 8018572:	e013      	b.n	801859c <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 8018574:	2300      	movs	r3, #0
 8018576:	617b      	str	r3, [r7, #20]
        break;
 8018578:	e010      	b.n	801859c <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 801857a:	687a      	ldr	r2, [r7, #4]
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	0011      	movs	r1, r2
 8018580:	0018      	movs	r0, r3
 8018582:	f7ff ff59 	bl	8018438 <_ux_dcd_stm32_endpoint_status>
 8018586:	0003      	movs	r3, r0
 8018588:	617b      	str	r3, [r7, #20]
        break;
 801858a:	e007      	b.n	801859c <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 801858c:	2254      	movs	r2, #84	; 0x54
 801858e:	2102      	movs	r1, #2
 8018590:	2002      	movs	r0, #2
 8018592:	f7fe f92f 	bl	80167f4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 8018596:	2354      	movs	r3, #84	; 0x54
 8018598:	617b      	str	r3, [r7, #20]
        break;
 801859a:	46c0      	nop			; (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 801859c:	697b      	ldr	r3, [r7, #20]
}
 801859e:	0018      	movs	r0, r3
 80185a0:	46bd      	mov	sp, r7
 80185a2:	b006      	add	sp, #24
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	46c0      	nop			; (mov r8, r8)
 80185a8:	0801a478 	.word	0x0801a478

080185ac <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b084      	sub	sp, #16
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80185b6:	4b13      	ldr	r3, [pc, #76]	; (8018604 <_ux_dcd_stm32_initialize+0x58>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	2280      	movs	r2, #128	; 0x80
 80185c0:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 80185c2:	22c8      	movs	r2, #200	; 0xc8
 80185c4:	2100      	movs	r1, #0
 80185c6:	2000      	movs	r0, #0
 80185c8:	f7fe fabe 	bl	8016b48 <_ux_utility_memory_allocate>
 80185cc:	0003      	movs	r3, r0
 80185ce:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d101      	bne.n	80185da <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 80185d6:	2312      	movs	r3, #18
 80185d8:	e010      	b.n	80185fc <_ux_dcd_stm32_initialize+0x50>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	68ba      	ldr	r2, [r7, #8]
 80185de:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 80185e0:	68bb      	ldr	r3, [r7, #8]
 80185e2:	68fa      	ldr	r2, [r7, #12]
 80185e4:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	4a07      	ldr	r2, [pc, #28]	; (8018608 <_ux_dcd_stm32_initialize+0x5c>)
 80185ea:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 80185ec:	683a      	ldr	r2, [r7, #0]
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	21c4      	movs	r1, #196	; 0xc4
 80185f2:	505a      	str	r2, [r3, r1]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2201      	movs	r2, #1
 80185f8:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80185fa:	2300      	movs	r3, #0
}
 80185fc:	0018      	movs	r0, r3
 80185fe:	46bd      	mov	sp, r7
 8018600:	b004      	add	sp, #16
 8018602:	bd80      	pop	{r7, pc}
 8018604:	20010c9c 	.word	0x20010c9c
 8018608:	0801848d 	.word	0x0801848d

0801860c <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b086      	sub	sp, #24
 8018610:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018612:	4b6a      	ldr	r3, [pc, #424]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	69db      	ldr	r3, [r3, #28]
 801861c:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801861e:	4b67      	ldr	r3, [pc, #412]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	3320      	adds	r3, #32
 8018624:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018626:	4b65      	ldr	r3, [pc, #404]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018628:	681a      	ldr	r2, [r3, #0]
 801862a:	23de      	movs	r3, #222	; 0xde
 801862c:	005b      	lsls	r3, r3, #1
 801862e:	58d3      	ldr	r3, [r2, r3]
 8018630:	2b01      	cmp	r3, #1
 8018632:	d114      	bne.n	801865e <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8018634:	4b61      	ldr	r3, [pc, #388]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018636:	6819      	ldr	r1, [r3, #0]
 8018638:	4b60      	ldr	r3, [pc, #384]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801863a:	681a      	ldr	r2, [r3, #0]
 801863c:	23a8      	movs	r3, #168	; 0xa8
 801863e:	005b      	lsls	r3, r3, #1
 8018640:	58c9      	ldr	r1, [r1, r3]
 8018642:	2394      	movs	r3, #148	; 0x94
 8018644:	005b      	lsls	r3, r3, #1
 8018646:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8018648:	4b5c      	ldr	r3, [pc, #368]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801864a:	6819      	ldr	r1, [r3, #0]
 801864c:	4b5b      	ldr	r3, [pc, #364]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801864e:	681a      	ldr	r2, [r3, #0]
 8018650:	23aa      	movs	r3, #170	; 0xaa
 8018652:	005b      	lsls	r3, r3, #1
 8018654:	58c9      	ldr	r1, [r1, r3]
 8018656:	2396      	movs	r3, #150	; 0x96
 8018658:	005b      	lsls	r3, r3, #1
 801865a:	50d1      	str	r1, [r2, r3]
 801865c:	e035      	b.n	80186ca <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 801865e:	4b57      	ldr	r3, [pc, #348]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	23de      	movs	r3, #222	; 0xde
 8018664:	005b      	lsls	r3, r3, #1
 8018666:	2100      	movs	r1, #0
 8018668:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801866a:	4b54      	ldr	r3, [pc, #336]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	23d0      	movs	r3, #208	; 0xd0
 8018670:	005b      	lsls	r3, r3, #1
 8018672:	58d3      	ldr	r3, [r2, r3]
 8018674:	2b01      	cmp	r3, #1
 8018676:	d114      	bne.n	80186a2 <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8018678:	4b50      	ldr	r3, [pc, #320]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801867a:	6819      	ldr	r1, [r3, #0]
 801867c:	4b4f      	ldr	r3, [pc, #316]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801867e:	681a      	ldr	r2, [r3, #0]
 8018680:	2398      	movs	r3, #152	; 0x98
 8018682:	005b      	lsls	r3, r3, #1
 8018684:	58c9      	ldr	r1, [r1, r3]
 8018686:	2394      	movs	r3, #148	; 0x94
 8018688:	005b      	lsls	r3, r3, #1
 801868a:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801868c:	4b4b      	ldr	r3, [pc, #300]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801868e:	6819      	ldr	r1, [r3, #0]
 8018690:	4b4a      	ldr	r3, [pc, #296]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018692:	681a      	ldr	r2, [r3, #0]
 8018694:	239a      	movs	r3, #154	; 0x9a
 8018696:	005b      	lsls	r3, r3, #1
 8018698:	58c9      	ldr	r1, [r1, r3]
 801869a:	2396      	movs	r3, #150	; 0x96
 801869c:	005b      	lsls	r3, r3, #1
 801869e:	50d1      	str	r1, [r2, r3]
 80186a0:	e013      	b.n	80186ca <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 80186a2:	4b46      	ldr	r3, [pc, #280]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80186a4:	6819      	ldr	r1, [r3, #0]
 80186a6:	4b45      	ldr	r3, [pc, #276]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80186a8:	681a      	ldr	r2, [r3, #0]
 80186aa:	239c      	movs	r3, #156	; 0x9c
 80186ac:	005b      	lsls	r3, r3, #1
 80186ae:	58c9      	ldr	r1, [r1, r3]
 80186b0:	2394      	movs	r3, #148	; 0x94
 80186b2:	005b      	lsls	r3, r3, #1
 80186b4:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 80186b6:	4b41      	ldr	r3, [pc, #260]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80186b8:	6819      	ldr	r1, [r3, #0]
 80186ba:	4b40      	ldr	r3, [pc, #256]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80186bc:	681a      	ldr	r2, [r3, #0]
 80186be:	239e      	movs	r3, #158	; 0x9e
 80186c0:	005b      	lsls	r3, r3, #1
 80186c2:	58c9      	ldr	r1, [r1, r3]
 80186c4:	2396      	movs	r3, #150	; 0x96
 80186c6:	005b      	lsls	r3, r3, #1
 80186c8:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80186ca:	4b3c      	ldr	r3, [pc, #240]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	2394      	movs	r3, #148	; 0x94
 80186d0:	005b      	lsls	r3, r3, #1
 80186d2:	58d3      	ldr	r3, [r2, r3]
 80186d4:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 80186da:	4939      	ldr	r1, [pc, #228]	; (80187c0 <_ux_dcd_stm32_initialize_complete+0x1b4>)
 80186dc:	68b8      	ldr	r0, [r7, #8]
 80186de:	220e      	movs	r2, #14
 80186e0:	f7fe f97c 	bl	80169dc <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	336c      	adds	r3, #108	; 0x6c
 80186e8:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	4a35      	ldr	r2, [pc, #212]	; (80187c4 <_ux_dcd_stm32_initialize_complete+0x1b8>)
 80186ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	333c      	adds	r3, #60	; 0x3c
 80186fc:	001a      	movs	r2, r3
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018706:	68fa      	ldr	r2, [r7, #12]
 8018708:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 801870a:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	333c      	adds	r3, #60	; 0x3c
 8018718:	001a      	movs	r2, r3
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801871e:	697b      	ldr	r3, [r7, #20]
 8018720:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 8018722:	68fa      	ldr	r2, [r7, #12]
 8018724:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8018726:	6978      	ldr	r0, [r7, #20]
 8018728:	210e      	movs	r1, #14
 801872a:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	22c4      	movs	r2, #196	; 0xc4
 8018730:	589b      	ldr	r3, [r3, r2]
 8018732:	2100      	movs	r1, #0
 8018734:	0018      	movs	r0, r3
 8018736:	f7ef fece 	bl	80084d6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801873a:	693b      	ldr	r3, [r7, #16]
 801873c:	22c4      	movs	r2, #196	; 0xc4
 801873e:	5898      	ldr	r0, [r3, r2]
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	69db      	ldr	r3, [r3, #28]
 8018744:	b29a      	uxth	r2, r3
 8018746:	2300      	movs	r3, #0
 8018748:	2100      	movs	r1, #0
 801874a:	f7ef fc58 	bl	8007ffe <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	22c4      	movs	r2, #196	; 0xc4
 8018752:	589b      	ldr	r3, [r3, r2]
 8018754:	2180      	movs	r1, #128	; 0x80
 8018756:	0018      	movs	r0, r3
 8018758:	f7ef febd 	bl	80084d6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	22c4      	movs	r2, #196	; 0xc4
 8018760:	5898      	ldr	r0, [r3, r2]
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	69db      	ldr	r3, [r3, #28]
 8018766:	b29a      	uxth	r2, r3
 8018768:	2300      	movs	r3, #0
 801876a:	2180      	movs	r1, #128	; 0x80
 801876c:	f7ef fc47 	bl	8007ffe <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	2200      	movs	r2, #0
 8018774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2201      	movs	r2, #1
 801877a:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2201      	movs	r2, #1
 8018780:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2208      	movs	r2, #8
 8018786:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	2208      	movs	r2, #8
 801878c:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2200      	movs	r2, #0
 8018792:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018794:	4b09      	ldr	r3, [pc, #36]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8018796:	681a      	ldr	r2, [r3, #0]
 8018798:	23e2      	movs	r3, #226	; 0xe2
 801879a:	005b      	lsls	r3, r3, #1
 801879c:	58d3      	ldr	r3, [r2, r3]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d006      	beq.n	80187b0 <_ux_dcd_stm32_initialize_complete+0x1a4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 80187a2:	4b06      	ldr	r3, [pc, #24]	; (80187bc <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80187a4:	681a      	ldr	r2, [r3, #0]
 80187a6:	23e2      	movs	r3, #226	; 0xe2
 80187a8:	005b      	lsls	r3, r3, #1
 80187aa:	58d3      	ldr	r3, [r2, r3]
 80187ac:	2001      	movs	r0, #1
 80187ae:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 80187b0:	2300      	movs	r3, #0
}
 80187b2:	0018      	movs	r0, r3
 80187b4:	46bd      	mov	sp, r7
 80187b6:	b006      	add	sp, #24
 80187b8:	bd80      	pop	{r7, pc}
 80187ba:	46c0      	nop			; (mov r8, r8)
 80187bc:	20010c9c 	.word	0x20010c9c
 80187c0:	20000030 	.word	0x20000030
 80187c4:	00007710 	.word	0x00007710

080187c8 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b084      	sub	sp, #16
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
 80187d0:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80187d2:	683b      	ldr	r3, [r7, #0]
 80187d4:	689b      	ldr	r3, [r3, #8]
 80187d6:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	22c4      	movs	r2, #196	; 0xc4
 80187dc:	589a      	ldr	r2, [r3, r2]
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	695b      	ldr	r3, [r3, #20]
 80187e2:	b2db      	uxtb	r3, r3
 80187e4:	0019      	movs	r1, r3
 80187e6:	0010      	movs	r0, r2
 80187e8:	f7ef fe3c 	bl	8008464 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	22c4      	movs	r2, #196	; 0xc4
 80187f0:	589a      	ldr	r2, [r3, r2]
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	695b      	ldr	r3, [r3, #20]
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	0019      	movs	r1, r3
 80187fa:	0010      	movs	r0, r2
 80187fc:	f7ef fe6b 	bl	80084d6 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8018800:	2300      	movs	r3, #0
}
 8018802:	0018      	movs	r0, r3
 8018804:	46bd      	mov	sp, r7
 8018806:	b004      	add	sp, #16
 8018808:	bd80      	pop	{r7, pc}

0801880a <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801880a:	b580      	push	{r7, lr}
 801880c:	b084      	sub	sp, #16
 801880e:	af00      	add	r7, sp, #0
 8018810:	6078      	str	r0, [r7, #4]
 8018812:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	689b      	ldr	r3, [r3, #8]
 8018818:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801881e:	2b03      	cmp	r3, #3
 8018820:	d12d      	bne.n	801887e <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	22c4      	movs	r2, #196	; 0xc4
 8018826:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801882c:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	695b      	ldr	r3, [r3, #20]
 8018836:	f7ef fd0d 	bl	8008254 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	695b      	ldr	r3, [r3, #20]
 801883e:	2280      	movs	r2, #128	; 0x80
 8018840:	4393      	bics	r3, r2
 8018842:	d046      	beq.n	80188d2 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	3330      	adds	r3, #48	; 0x30
 8018848:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801884e:	0019      	movs	r1, r3
 8018850:	0010      	movs	r0, r2
 8018852:	f7fe fc41 	bl	80170d8 <_ux_utility_semaphore_get>
 8018856:	0003      	movs	r3, r0
 8018858:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d001      	beq.n	8018864 <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	e037      	b.n	80188d4 <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	695a      	ldr	r2, [r3, #20]
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018870:	2b00      	cmp	r3, #0
 8018872:	d002      	beq.n	801887a <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018878:	e02c      	b.n	80188d4 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801887a:	2300      	movs	r3, #0
 801887c:	e02a      	b.n	80188d4 <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	22c4      	movs	r2, #196	; 0xc4
 8018882:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8018888:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801888a:	683b      	ldr	r3, [r7, #0]
 801888c:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	695b      	ldr	r3, [r3, #20]
 8018892:	f7ef fc81 	bl	8008198 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	695b      	ldr	r3, [r3, #20]
 801889a:	2280      	movs	r2, #128	; 0x80
 801889c:	4393      	bics	r3, r2
 801889e:	d018      	beq.n	80188d2 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	3330      	adds	r3, #48	; 0x30
 80188a4:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 80188a6:	683b      	ldr	r3, [r7, #0]
 80188a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80188aa:	0019      	movs	r1, r3
 80188ac:	0010      	movs	r0, r2
 80188ae:	f7fe fc13 	bl	80170d8 <_ux_utility_semaphore_get>
 80188b2:	0003      	movs	r3, r0
 80188b4:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 80188b6:	68bb      	ldr	r3, [r7, #8]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d001      	beq.n	80188c0 <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 80188bc:	68bb      	ldr	r3, [r7, #8]
 80188be:	e009      	b.n	80188d4 <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d002      	beq.n	80188ce <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188cc:	e002      	b.n	80188d4 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 80188ce:	2300      	movs	r3, #0
 80188d0:	e000      	b.n	80188d4 <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 80188d2:	2300      	movs	r3, #0
}
 80188d4:	0018      	movs	r0, r3
 80188d6:	46bd      	mov	sp, r7
 80188d8:	b004      	add	sp, #16
 80188da:	bd80      	pop	{r7, pc}

080188dc <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	af00      	add	r7, sp, #0
  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80188e0:	f7f6 f970 	bl	800ebc4 <USBPD_HW_IF_GlobalHwInit>
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80188e4:	f000 f808 	bl	80188f8 <USBPD_DPM_InitCore>
 80188e8:	1e03      	subs	r3, r0, #0
 80188ea:	d001      	beq.n	80188f0 <USBPD_PreInitOs+0x14>
  {
    return USBPD_ERROR;
 80188ec:	2302      	movs	r3, #2
 80188ee:	e000      	b.n	80188f2 <USBPD_PreInitOs+0x16>
  }

  return USBPD_OK;
 80188f0:	2300      	movs	r3, #0
}
 80188f2:	0018      	movs	r0, r3
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 80188f8:	b5b0      	push	{r4, r5, r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 80188fe:	1dfb      	adds	r3, r7, #7
 8018900:	2200      	movs	r2, #0
 8018902:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8018904:	4b62      	ldr	r3, [pc, #392]	; (8018a90 <USBPD_DPM_InitCore+0x198>)
 8018906:	0018      	movs	r0, r3
 8018908:	f7e8 ff70 	bl	80017ec <USBPD_PE_CheckLIB>
 801890c:	0003      	movs	r3, r0
 801890e:	2b01      	cmp	r3, #1
 8018910:	d003      	beq.n	801891a <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 8018912:	1dfb      	adds	r3, r7, #7
 8018914:	2202      	movs	r2, #2
 8018916:	701a      	strb	r2, [r3, #0]
    goto error;
 8018918:	e0b4      	b.n	8018a84 <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801891a:	f7e8 ff75 	bl	8001808 <USBPD_PE_GetMemoryConsumption>
 801891e:	0003      	movs	r3, r0
 8018920:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8018922:	1dbb      	adds	r3, r7, #6
 8018924:	2200      	movs	r2, #0
 8018926:	701a      	strb	r2, [r3, #0]
 8018928:	e0a6      	b.n	8018a78 <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801892a:	1dbb      	adds	r3, r7, #6
 801892c:	781b      	ldrb	r3, [r3, #0]
 801892e:	4a59      	ldr	r2, [pc, #356]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 8018930:	009b      	lsls	r3, r3, #2
 8018932:	18d3      	adds	r3, r2, r3
 8018934:	785a      	ldrb	r2, [r3, #1]
 8018936:	2108      	movs	r1, #8
 8018938:	438a      	bics	r2, r1
 801893a:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801893c:	1dbb      	adds	r3, r7, #6
 801893e:	781a      	ldrb	r2, [r3, #0]
 8018940:	1dbb      	adds	r3, r7, #6
 8018942:	7818      	ldrb	r0, [r3, #0]
 8018944:	4954      	ldr	r1, [pc, #336]	; (8018a98 <USBPD_DPM_InitCore+0x1a0>)
 8018946:	0013      	movs	r3, r2
 8018948:	005b      	lsls	r3, r3, #1
 801894a:	189b      	adds	r3, r3, r2
 801894c:	009b      	lsls	r3, r3, #2
 801894e:	18cb      	adds	r3, r1, r3
 8018950:	791b      	ldrb	r3, [r3, #4]
 8018952:	079b      	lsls	r3, r3, #30
 8018954:	0f9b      	lsrs	r3, r3, #30
 8018956:	b2d9      	uxtb	r1, r3
 8018958:	4b4e      	ldr	r3, [pc, #312]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 801895a:	0082      	lsls	r2, r0, #2
 801895c:	2003      	movs	r0, #3
 801895e:	4001      	ands	r1, r0
 8018960:	000c      	movs	r4, r1
 8018962:	5cd1      	ldrb	r1, [r2, r3]
 8018964:	2003      	movs	r0, #3
 8018966:	4381      	bics	r1, r0
 8018968:	1c08      	adds	r0, r1, #0
 801896a:	1c21      	adds	r1, r4, #0
 801896c:	4301      	orrs	r1, r0
 801896e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8018970:	1dbb      	adds	r3, r7, #6
 8018972:	781a      	ldrb	r2, [r3, #0]
 8018974:	1dbb      	adds	r3, r7, #6
 8018976:	7818      	ldrb	r0, [r3, #0]
 8018978:	4947      	ldr	r1, [pc, #284]	; (8018a98 <USBPD_DPM_InitCore+0x1a0>)
 801897a:	0013      	movs	r3, r2
 801897c:	005b      	lsls	r3, r3, #1
 801897e:	189b      	adds	r3, r3, r2
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	18cb      	adds	r3, r1, r3
 8018984:	791b      	ldrb	r3, [r3, #4]
 8018986:	075b      	lsls	r3, r3, #29
 8018988:	0fdb      	lsrs	r3, r3, #31
 801898a:	b2d9      	uxtb	r1, r3
 801898c:	4b41      	ldr	r3, [pc, #260]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 801898e:	0082      	lsls	r2, r0, #2
 8018990:	2001      	movs	r0, #1
 8018992:	4001      	ands	r1, r0
 8018994:	008c      	lsls	r4, r1, #2
 8018996:	5cd1      	ldrb	r1, [r2, r3]
 8018998:	2004      	movs	r0, #4
 801899a:	4381      	bics	r1, r0
 801899c:	1c08      	adds	r0, r1, #0
 801899e:	1c21      	adds	r1, r4, #0
 80189a0:	4301      	orrs	r1, r0
 80189a2:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 80189a4:	1dbb      	adds	r3, r7, #6
 80189a6:	781a      	ldrb	r2, [r3, #0]
 80189a8:	4b3a      	ldr	r3, [pc, #232]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 80189aa:	0092      	lsls	r2, r2, #2
 80189ac:	5cd1      	ldrb	r1, [r2, r3]
 80189ae:	2010      	movs	r0, #16
 80189b0:	4381      	bics	r1, r0
 80189b2:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 80189b4:	1dbb      	adds	r3, r7, #6
 80189b6:	781a      	ldrb	r2, [r3, #0]
 80189b8:	4b36      	ldr	r3, [pc, #216]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 80189ba:	0092      	lsls	r2, r2, #2
 80189bc:	5cd1      	ldrb	r1, [r2, r3]
 80189be:	203f      	movs	r0, #63	; 0x3f
 80189c0:	4001      	ands	r1, r0
 80189c2:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 80189c4:	1dbb      	adds	r3, r7, #6
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	4a32      	ldr	r2, [pc, #200]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 80189ca:	009b      	lsls	r3, r3, #2
 80189cc:	18d3      	adds	r3, r2, r3
 80189ce:	785a      	ldrb	r2, [r3, #1]
 80189d0:	2160      	movs	r1, #96	; 0x60
 80189d2:	438a      	bics	r2, r1
 80189d4:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 80189d6:	1dbb      	adds	r3, r7, #6
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	4a2e      	ldr	r2, [pc, #184]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 80189dc:	009b      	lsls	r3, r3, #2
 80189de:	18d3      	adds	r3, r2, r3
 80189e0:	785a      	ldrb	r2, [r3, #1]
 80189e2:	217f      	movs	r1, #127	; 0x7f
 80189e4:	400a      	ands	r2, r1
 80189e6:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 80189e8:	1dbb      	adds	r3, r7, #6
 80189ea:	781a      	ldrb	r2, [r3, #0]
 80189ec:	0013      	movs	r3, r2
 80189ee:	005b      	lsls	r3, r3, #1
 80189f0:	189b      	adds	r3, r3, r2
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	4a28      	ldr	r2, [pc, #160]	; (8018a98 <USBPD_DPM_InitCore+0x1a0>)
 80189f6:	189c      	adds	r4, r3, r2
 80189f8:	1dbb      	adds	r3, r7, #6
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	009a      	lsls	r2, r3, #2
 80189fe:	4b25      	ldr	r3, [pc, #148]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 8018a00:	18d2      	adds	r2, r2, r3
 8018a02:	4926      	ldr	r1, [pc, #152]	; (8018a9c <USBPD_DPM_InitCore+0x1a4>)
 8018a04:	1dbb      	adds	r3, r7, #6
 8018a06:	7818      	ldrb	r0, [r3, #0]
 8018a08:	0013      	movs	r3, r2
 8018a0a:	0022      	movs	r2, r4
 8018a0c:	f7e7 fcb0 	bl	8000370 <USBPD_CAD_Init>
 8018a10:	1e03      	subs	r3, r0, #0
 8018a12:	d003      	beq.n	8018a1c <USBPD_DPM_InitCore+0x124>
 8018a14:	1dfb      	adds	r3, r7, #7
 8018a16:	2202      	movs	r2, #2
 8018a18:	701a      	strb	r2, [r3, #0]
 8018a1a:	e033      	b.n	8018a84 <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8018a1c:	1dbb      	adds	r3, r7, #6
 8018a1e:	781a      	ldrb	r2, [r3, #0]
 8018a20:	0013      	movs	r3, r2
 8018a22:	005b      	lsls	r3, r3, #1
 8018a24:	189b      	adds	r3, r3, r2
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	4a1b      	ldr	r2, [pc, #108]	; (8018a98 <USBPD_DPM_InitCore+0x1a0>)
 8018a2a:	1899      	adds	r1, r3, r2
 8018a2c:	1dbb      	adds	r3, r7, #6
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	009a      	lsls	r2, r3, #2
 8018a32:	4b18      	ldr	r3, [pc, #96]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 8018a34:	18d2      	adds	r2, r2, r3
 8018a36:	1dfc      	adds	r4, r7, #7
 8018a38:	4d19      	ldr	r5, [pc, #100]	; (8018aa0 <USBPD_DPM_InitCore+0x1a8>)
 8018a3a:	1dbb      	adds	r3, r7, #6
 8018a3c:	7818      	ldrb	r0, [r3, #0]
 8018a3e:	002b      	movs	r3, r5
 8018a40:	f7e7 fdc8 	bl	80005d4 <USBPD_PE_Init>
 8018a44:	0003      	movs	r3, r0
 8018a46:	7023      	strb	r3, [r4, #0]
 8018a48:	1dfb      	adds	r3, r7, #7
 8018a4a:	781b      	ldrb	r3, [r3, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d119      	bne.n	8018a84 <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8018a50:	1dbb      	adds	r3, r7, #6
 8018a52:	781b      	ldrb	r3, [r3, #0]
 8018a54:	4a0f      	ldr	r2, [pc, #60]	; (8018a94 <USBPD_DPM_InitCore+0x19c>)
 8018a56:	009b      	lsls	r3, r3, #2
 8018a58:	18d3      	adds	r3, r2, r3
 8018a5a:	785a      	ldrb	r2, [r3, #1]
 8018a5c:	2108      	movs	r1, #8
 8018a5e:	430a      	orrs	r2, r1
 8018a60:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8018a62:	1dbb      	adds	r3, r7, #6
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	2101      	movs	r1, #1
 8018a68:	0018      	movs	r0, r3
 8018a6a:	f7e7 fce9 	bl	8000440 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8018a6e:	1dbb      	adds	r3, r7, #6
 8018a70:	1dba      	adds	r2, r7, #6
 8018a72:	7812      	ldrb	r2, [r2, #0]
 8018a74:	3201      	adds	r2, #1
 8018a76:	701a      	strb	r2, [r3, #0]
 8018a78:	1dbb      	adds	r3, r7, #6
 8018a7a:	781b      	ldrb	r3, [r3, #0]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d100      	bne.n	8018a82 <USBPD_DPM_InitCore+0x18a>
 8018a80:	e753      	b.n	801892a <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 8018a82:	46c0      	nop			; (mov r8, r8)
  return _retr;
 8018a84:	1dfb      	adds	r3, r7, #7
 8018a86:	781b      	ldrb	r3, [r3, #0]
}
 8018a88:	0018      	movs	r0, r3
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	b002      	add	sp, #8
 8018a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8018a90:	30410000 	.word	0x30410000
 8018a94:	20010dc4 	.word	0x20010dc4
 8018a98:	20000058 	.word	0x20000058
 8018a9c:	0801a4a8 	.word	0x0801a4a8
 8018aa0:	0801a4b0 	.word	0x0801a4b0

08018aa4 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b084      	sub	sp, #16
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	0002      	movs	r2, r0
 8018aac:	1dfb      	adds	r3, r7, #7
 8018aae:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 8018ab0:	4b09      	ldr	r3, [pc, #36]	; (8018ad8 <USBPD_PE_TaskWakeUp+0x34>)
 8018ab2:	60fb      	str	r3, [r7, #12]
 8018ab4:	1dfb      	adds	r3, r7, #7
 8018ab6:	781a      	ldrb	r2, [r3, #0]
 8018ab8:	0013      	movs	r3, r2
 8018aba:	00db      	lsls	r3, r3, #3
 8018abc:	1a9b      	subs	r3, r3, r2
 8018abe:	00db      	lsls	r3, r3, #3
 8018ac0:	4a06      	ldr	r2, [pc, #24]	; (8018adc <USBPD_PE_TaskWakeUp+0x38>)
 8018ac2:	189b      	adds	r3, r3, r2
 8018ac4:	220c      	movs	r2, #12
 8018ac6:	18b9      	adds	r1, r7, r2
 8018ac8:	2200      	movs	r2, #0
 8018aca:	0018      	movs	r0, r3
 8018acc:	f7fb fbf6 	bl	80142bc <_txe_queue_send>
}
 8018ad0:	46c0      	nop			; (mov r8, r8)
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	b004      	add	sp, #16
 8018ad6:	bd80      	pop	{r7, pc}
 8018ad8:	0000ffff 	.word	0x0000ffff
 8018adc:	20010d8c 	.word	0x20010d8c

08018ae0 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b082      	sub	sp, #8
 8018ae4:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8018ae6:	4b06      	ldr	r3, [pc, #24]	; (8018b00 <USBPD_DPM_CADTaskWakeUp+0x20>)
 8018ae8:	607b      	str	r3, [r7, #4]
 8018aea:	1d39      	adds	r1, r7, #4
 8018aec:	4b05      	ldr	r3, [pc, #20]	; (8018b04 <USBPD_DPM_CADTaskWakeUp+0x24>)
 8018aee:	2200      	movs	r2, #0
 8018af0:	0018      	movs	r0, r3
 8018af2:	f7fb fbe3 	bl	80142bc <_txe_queue_send>
}
 8018af6:	46c0      	nop			; (mov r8, r8)
 8018af8:	46bd      	mov	sp, r7
 8018afa:	b002      	add	sp, #8
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	46c0      	nop			; (mov r8, r8)
 8018b00:	0000ffff 	.word	0x0000ffff
 8018b04:	20010d54 	.word	0x20010d54

08018b08 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b084      	sub	sp, #16
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	603a      	str	r2, [r7, #0]
 8018b10:	1dfb      	adds	r3, r7, #7
 8018b12:	1c02      	adds	r2, r0, #0
 8018b14:	701a      	strb	r2, [r3, #0]
 8018b16:	1dbb      	adds	r3, r7, #6
 8018b18:	1c0a      	adds	r2, r1, #0
 8018b1a:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8018b1c:	1dbb      	adds	r3, r7, #6
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	2b04      	cmp	r3, #4
 8018b22:	d009      	beq.n	8018b38 <USBPD_DPM_CADCallback+0x30>
 8018b24:	dd00      	ble.n	8018b28 <USBPD_DPM_CADCallback+0x20>
 8018b26:	e06f      	b.n	8018c08 <USBPD_DPM_CADCallback+0x100>
 8018b28:	2b03      	cmp	r3, #3
 8018b2a:	d01d      	beq.n	8018b68 <USBPD_DPM_CADCallback+0x60>
 8018b2c:	dc6c      	bgt.n	8018c08 <USBPD_DPM_CADCallback+0x100>
 8018b2e:	2b01      	cmp	r3, #1
 8018b30:	d01a      	beq.n	8018b68 <USBPD_DPM_CADCallback+0x60>
 8018b32:	2b02      	cmp	r3, #2
 8018b34:	d00c      	beq.n	8018b50 <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8018b36:	e067      	b.n	8018c08 <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8018b38:	1dfb      	adds	r3, r7, #7
 8018b3a:	781b      	ldrb	r3, [r3, #0]
 8018b3c:	2104      	movs	r1, #4
 8018b3e:	0018      	movs	r0, r3
 8018b40:	f000 f922 	bl	8018d88 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8018b44:	1dfb      	adds	r3, r7, #7
 8018b46:	781b      	ldrb	r3, [r3, #0]
 8018b48:	0018      	movs	r0, r3
 8018b4a:	f000 f867 	bl	8018c1c <DPM_StartPETask>
      break;
 8018b4e:	e05c      	b.n	8018c0a <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 8018b50:	1dfb      	adds	r3, r7, #7
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	2102      	movs	r1, #2
 8018b56:	0018      	movs	r0, r3
 8018b58:	f000 f916 	bl	8018d88 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8018b5c:	1dfb      	adds	r3, r7, #7
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	0018      	movs	r0, r3
 8018b62:	f000 f85b 	bl	8018c1c <DPM_StartPETask>
      break;
 8018b66:	e050      	b.n	8018c0a <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 8018b68:	230f      	movs	r3, #15
 8018b6a:	18fb      	adds	r3, r7, r3
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 8018b70:	1dfb      	adds	r3, r7, #7
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	0018      	movs	r0, r3
 8018b76:	f7ff ff95 	bl	8018aa4 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8018b7a:	e016      	b.n	8018baa <USBPD_DPM_CADCallback+0xa2>
        (void)OS_DELAY(1);
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	f7f9 ffcd 	bl	8012b1c <_tx_thread_sleep>
        _timeout++;
 8018b82:	210f      	movs	r1, #15
 8018b84:	187b      	adds	r3, r7, r1
 8018b86:	781a      	ldrb	r2, [r3, #0]
 8018b88:	187b      	adds	r3, r7, r1
 8018b8a:	3201      	adds	r2, #1
 8018b8c:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 8018b8e:	187b      	adds	r3, r7, r1
 8018b90:	781b      	ldrb	r3, [r3, #0]
 8018b92:	2b1e      	cmp	r3, #30
 8018b94:	d909      	bls.n	8018baa <USBPD_DPM_CADCallback+0xa2>
          (void)OS_TASK_SUSPEND(&DPM_PEThreadId_Table[PortNum]);
 8018b96:	1dfb      	adds	r3, r7, #7
 8018b98:	781b      	ldrb	r3, [r3, #0]
 8018b9a:	22b0      	movs	r2, #176	; 0xb0
 8018b9c:	435a      	muls	r2, r3
 8018b9e:	4b1d      	ldr	r3, [pc, #116]	; (8018c14 <USBPD_DPM_CADCallback+0x10c>)
 8018ba0:	18d3      	adds	r3, r2, r3
 8018ba2:	0018      	movs	r0, r3
 8018ba4:	f7fb fe7c 	bl	80148a0 <_txe_thread_suspend>
          break;
 8018ba8:	e009      	b.n	8018bbe <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8018baa:	1dfb      	adds	r3, r7, #7
 8018bac:	781b      	ldrb	r3, [r3, #0]
 8018bae:	4a19      	ldr	r2, [pc, #100]	; (8018c14 <USBPD_DPM_CADCallback+0x10c>)
 8018bb0:	21b0      	movs	r1, #176	; 0xb0
 8018bb2:	434b      	muls	r3, r1
 8018bb4:	18d3      	adds	r3, r2, r3
 8018bb6:	3330      	adds	r3, #48	; 0x30
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	2b03      	cmp	r3, #3
 8018bbc:	d1de      	bne.n	8018b7c <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 8018bbe:	1dfb      	adds	r3, r7, #7
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	0018      	movs	r0, r3
 8018bc4:	f7e7 fdd1 	bl	800076a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8018bc8:	1dfb      	adds	r3, r7, #7
 8018bca:	781a      	ldrb	r2, [r3, #0]
 8018bcc:	4b12      	ldr	r3, [pc, #72]	; (8018c18 <USBPD_DPM_CADCallback+0x110>)
 8018bce:	0092      	lsls	r2, r2, #2
 8018bd0:	5cd1      	ldrb	r1, [r2, r3]
 8018bd2:	2010      	movs	r0, #16
 8018bd4:	4381      	bics	r1, r0
 8018bd6:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8018bd8:	1dfb      	adds	r3, r7, #7
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	4a0e      	ldr	r2, [pc, #56]	; (8018c18 <USBPD_DPM_CADCallback+0x110>)
 8018bde:	009b      	lsls	r3, r3, #2
 8018be0:	18d3      	adds	r3, r2, r3
 8018be2:	785a      	ldrb	r2, [r3, #1]
 8018be4:	2107      	movs	r1, #7
 8018be6:	438a      	bics	r2, r1
 8018be8:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8018bea:	1dbb      	adds	r3, r7, #6
 8018bec:	781a      	ldrb	r2, [r3, #0]
 8018bee:	1dfb      	adds	r3, r7, #7
 8018bf0:	781b      	ldrb	r3, [r3, #0]
 8018bf2:	0011      	movs	r1, r2
 8018bf4:	0018      	movs	r0, r3
 8018bf6:	f000 f8c7 	bl	8018d88 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8018bfa:	1dfb      	adds	r3, r7, #7
 8018bfc:	781b      	ldrb	r3, [r3, #0]
 8018bfe:	2169      	movs	r1, #105	; 0x69
 8018c00:	0018      	movs	r0, r3
 8018c02:	f000 f8ce 	bl	8018da2 <USBPD_DPM_Notification>
      break;
 8018c06:	e000      	b.n	8018c0a <USBPD_DPM_CADCallback+0x102>
      break;
 8018c08:	46c0      	nop			; (mov r8, r8)
  }
}
 8018c0a:	46c0      	nop			; (mov r8, r8)
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	b004      	add	sp, #16
 8018c10:	bd80      	pop	{r7, pc}
 8018c12:	46c0      	nop			; (mov r8, r8)
 8018c14:	20010ca4 	.word	0x20010ca4
 8018c18:	20010dc4 	.word	0x20010dc4

08018c1c <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	0002      	movs	r2, r0
 8018c24:	1dfb      	adds	r3, r7, #7
 8018c26:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8018c28:	1dfb      	adds	r3, r7, #7
 8018c2a:	781b      	ldrb	r3, [r3, #0]
 8018c2c:	0018      	movs	r0, r3
 8018c2e:	f7e7 fd96 	bl	800075e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 8018c32:	1dfb      	adds	r3, r7, #7
 8018c34:	781b      	ldrb	r3, [r3, #0]
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	d809      	bhi.n	8018c4e <DPM_StartPETask+0x32>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 8018c3a:	1dfb      	adds	r3, r7, #7
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	22b0      	movs	r2, #176	; 0xb0
 8018c40:	435a      	muls	r2, r3
 8018c42:	4b09      	ldr	r3, [pc, #36]	; (8018c68 <DPM_StartPETask+0x4c>)
 8018c44:	18d3      	adds	r3, r2, r3
 8018c46:	0018      	movs	r0, r3
 8018c48:	f7fb fe0a 	bl	8014860 <_txe_thread_resume>
      break;
 8018c4c:	e002      	b.n	8018c54 <DPM_StartPETask+0x38>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 8018c4e:	f000 f80d 	bl	8018c6c <USBPD_DPM_ErrorHandler>
      break;
 8018c52:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8018c54:	1dfb      	adds	r3, r7, #7
 8018c56:	781b      	ldrb	r3, [r3, #0]
 8018c58:	2168      	movs	r1, #104	; 0x68
 8018c5a:	0018      	movs	r0, r3
 8018c5c:	f000 f8a1 	bl	8018da2 <USBPD_DPM_Notification>
}
 8018c60:	46c0      	nop			; (mov r8, r8)
 8018c62:	46bd      	mov	sp, r7
 8018c64:	b002      	add	sp, #8
 8018c66:	bd80      	pop	{r7, pc}
 8018c68:	20010ca4 	.word	0x20010ca4

08018c6c <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 8018c70:	e7fe      	b.n	8018c70 <USBPD_DPM_ErrorHandler+0x4>
	...

08018c74 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	0002      	movs	r2, r0
 8018c7c:	1dfb      	adds	r3, r7, #7
 8018c7e:	701a      	strb	r2, [r3, #0]
 8018c80:	1dbb      	adds	r3, r7, #6
 8018c82:	1c0a      	adds	r2, r1, #0
 8018c84:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8018c86:	230f      	movs	r3, #15
 8018c88:	18fb      	adds	r3, r7, r3
 8018c8a:	2202      	movs	r2, #2
 8018c8c:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8018c8e:	1dfb      	adds	r3, r7, #7
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d001      	beq.n	8018c9a <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8018c96:	2302      	movs	r3, #2
 8018c98:	e024      	b.n	8018ce4 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8018c9a:	1dfb      	adds	r3, r7, #7
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	2208      	movs	r2, #8
 8018ca0:	18ba      	adds	r2, r7, r2
 8018ca2:	0011      	movs	r1, r2
 8018ca4:	0018      	movs	r0, r3
 8018ca6:	f000 f9ae 	bl	8019006 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8018caa:	1dbb      	adds	r3, r7, #6
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d10a      	bne.n	8018cc8 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8018cb2:	68bb      	ldr	r3, [r7, #8]
 8018cb4:	4a0d      	ldr	r2, [pc, #52]	; (8018cec <USBPD_PWR_IF_SupplyReady+0x78>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d801      	bhi.n	8018cbe <USBPD_PWR_IF_SupplyReady+0x4a>
 8018cba:	2200      	movs	r2, #0
 8018cbc:	e000      	b.n	8018cc0 <USBPD_PWR_IF_SupplyReady+0x4c>
 8018cbe:	2202      	movs	r2, #2
 8018cc0:	230f      	movs	r3, #15
 8018cc2:	18fb      	adds	r3, r7, r3
 8018cc4:	701a      	strb	r2, [r3, #0]
 8018cc6:	e00a      	b.n	8018cde <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8018cc8:	68ba      	ldr	r2, [r7, #8]
 8018cca:	23af      	movs	r3, #175	; 0xaf
 8018ccc:	011b      	lsls	r3, r3, #4
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	d901      	bls.n	8018cd6 <USBPD_PWR_IF_SupplyReady+0x62>
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	e000      	b.n	8018cd8 <USBPD_PWR_IF_SupplyReady+0x64>
 8018cd6:	2202      	movs	r2, #2
 8018cd8:	230f      	movs	r3, #15
 8018cda:	18fb      	adds	r3, r7, r3
 8018cdc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8018cde:	230f      	movs	r3, #15
 8018ce0:	18fb      	adds	r3, r7, r3
 8018ce2:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8018ce4:	0018      	movs	r0, r3
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	b004      	add	sp, #16
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	000002ed 	.word	0x000002ed

08018cf0 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b084      	sub	sp, #16
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	0002      	movs	r2, r0
 8018cf8:	1dfb      	adds	r3, r7, #7
 8018cfa:	701a      	strb	r2, [r3, #0]
 8018cfc:	1dbb      	adds	r3, r7, #6
 8018cfe:	1c0a      	adds	r2, r1, #0
 8018d00:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8018d02:	230f      	movs	r3, #15
 8018d04:	18fb      	adds	r3, r7, r3
 8018d06:	2200      	movs	r2, #0
 8018d08:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8018d0a:	1dfb      	adds	r3, r7, #7
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	0018      	movs	r0, r3
 8018d10:	f7f6 fd54 	bl	800f7bc <HW_IF_PWR_GetVoltage>
 8018d14:	0003      	movs	r3, r0
 8018d16:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8018d18:	1dbb      	adds	r3, r7, #6
 8018d1a:	781b      	ldrb	r3, [r3, #0]
 8018d1c:	2b02      	cmp	r3, #2
 8018d1e:	d018      	beq.n	8018d52 <USBPD_PWR_IF_GetVBUSStatus+0x62>
 8018d20:	dc21      	bgt.n	8018d66 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d002      	beq.n	8018d2c <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 8018d26:	2b01      	cmp	r3, #1
 8018d28:	d009      	beq.n	8018d3e <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8018d2a:	e01c      	b.n	8018d66 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	4a15      	ldr	r2, [pc, #84]	; (8018d84 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 8018d30:	4293      	cmp	r3, r2
 8018d32:	d81a      	bhi.n	8018d6a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8018d34:	230f      	movs	r3, #15
 8018d36:	18fb      	adds	r3, r7, r3
 8018d38:	2201      	movs	r2, #1
 8018d3a:	701a      	strb	r2, [r3, #0]
    break;
 8018d3c:	e015      	b.n	8018d6a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8018d3e:	68ba      	ldr	r2, [r7, #8]
 8018d40:	23af      	movs	r3, #175	; 0xaf
 8018d42:	011b      	lsls	r3, r3, #4
 8018d44:	429a      	cmp	r2, r3
 8018d46:	d312      	bcc.n	8018d6e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8018d48:	230f      	movs	r3, #15
 8018d4a:	18fb      	adds	r3, r7, r3
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	701a      	strb	r2, [r3, #0]
    break;
 8018d50:	e00d      	b.n	8018d6e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8018d52:	68ba      	ldr	r2, [r7, #8]
 8018d54:	23af      	movs	r3, #175	; 0xaf
 8018d56:	011b      	lsls	r3, r3, #4
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d20a      	bcs.n	8018d72 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8018d5c:	230f      	movs	r3, #15
 8018d5e:	18fb      	adds	r3, r7, r3
 8018d60:	2201      	movs	r2, #1
 8018d62:	701a      	strb	r2, [r3, #0]
    break;
 8018d64:	e005      	b.n	8018d72 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8018d66:	46c0      	nop			; (mov r8, r8)
 8018d68:	e004      	b.n	8018d74 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8018d6a:	46c0      	nop			; (mov r8, r8)
 8018d6c:	e002      	b.n	8018d74 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8018d6e:	46c0      	nop			; (mov r8, r8)
 8018d70:	e000      	b.n	8018d74 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8018d72:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 8018d74:	230f      	movs	r3, #15
 8018d76:	18fb      	adds	r3, r7, r3
 8018d78:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8018d7a:	0018      	movs	r0, r3
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	b004      	add	sp, #16
 8018d80:	bd80      	pop	{r7, pc}
 8018d82:	46c0      	nop			; (mov r8, r8)
 8018d84:	000002ed 	.word	0x000002ed

08018d88 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b082      	sub	sp, #8
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	0002      	movs	r2, r0
 8018d90:	1dfb      	adds	r3, r7, #7
 8018d92:	701a      	strb	r2, [r3, #0]
 8018d94:	1dbb      	adds	r3, r7, #6
 8018d96:	1c0a      	adds	r2, r1, #0
 8018d98:	701a      	strb	r2, [r3, #0]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8018d9a:	46c0      	nop			; (mov r8, r8)
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	b002      	add	sp, #8
 8018da0:	bd80      	pop	{r7, pc}

08018da2 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8018da2:	b580      	push	{r7, lr}
 8018da4:	b082      	sub	sp, #8
 8018da6:	af00      	add	r7, sp, #0
 8018da8:	0002      	movs	r2, r0
 8018daa:	1dfb      	adds	r3, r7, #7
 8018dac:	701a      	strb	r2, [r3, #0]
 8018dae:	1dbb      	adds	r3, r7, #6
 8018db0:	1c0a      	adds	r2, r1, #0
 8018db2:	701a      	strb	r2, [r3, #0]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8018db4:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8018db6:	46c0      	nop			; (mov r8, r8)
 8018db8:	46bd      	mov	sp, r7
 8018dba:	b002      	add	sp, #8
 8018dbc:	bd80      	pop	{r7, pc}

08018dbe <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8018dbe:	b580      	push	{r7, lr}
 8018dc0:	b082      	sub	sp, #8
 8018dc2:	af00      	add	r7, sp, #0
 8018dc4:	6039      	str	r1, [r7, #0]
 8018dc6:	0011      	movs	r1, r2
 8018dc8:	1dfb      	adds	r3, r7, #7
 8018dca:	1c02      	adds	r2, r0, #0
 8018dcc:	701a      	strb	r2, [r3, #0]
 8018dce:	1dbb      	adds	r3, r7, #6
 8018dd0:	1c0a      	adds	r2, r1, #0
 8018dd2:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8018dd4:	46c0      	nop			; (mov r8, r8)
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	b002      	add	sp, #8
 8018dda:	bd80      	pop	{r7, pc}

08018ddc <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b084      	sub	sp, #16
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60ba      	str	r2, [r7, #8]
 8018de4:	607b      	str	r3, [r7, #4]
 8018de6:	230f      	movs	r3, #15
 8018de8:	18fb      	adds	r3, r7, r3
 8018dea:	1c02      	adds	r2, r0, #0
 8018dec:	701a      	strb	r2, [r3, #0]
 8018dee:	230e      	movs	r3, #14
 8018df0:	18fb      	adds	r3, r7, r3
 8018df2:	1c0a      	adds	r2, r1, #0
 8018df4:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8018df6:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8018df8:	46c0      	nop			; (mov r8, r8)
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	b004      	add	sp, #16
 8018dfe:	bd80      	pop	{r7, pc}

08018e00 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b084      	sub	sp, #16
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	60ba      	str	r2, [r7, #8]
 8018e08:	607b      	str	r3, [r7, #4]
 8018e0a:	230f      	movs	r3, #15
 8018e0c:	18fb      	adds	r3, r7, r3
 8018e0e:	1c02      	adds	r2, r0, #0
 8018e10:	701a      	strb	r2, [r3, #0]
 8018e12:	230e      	movs	r3, #14
 8018e14:	18fb      	adds	r3, r7, r3
 8018e16:	1c0a      	adds	r2, r1, #0
 8018e18:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8018e1a:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8018e1c:	46c0      	nop			; (mov r8, r8)
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	b004      	add	sp, #16
 8018e22:	bd80      	pop	{r7, pc}

08018e24 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b084      	sub	sp, #16
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	60b9      	str	r1, [r7, #8]
 8018e2c:	607a      	str	r2, [r7, #4]
 8018e2e:	230f      	movs	r3, #15
 8018e30:	18fb      	adds	r3, r7, r3
 8018e32:	1c02      	adds	r2, r0, #0
 8018e34:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8018e36:	46c0      	nop			; (mov r8, r8)
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	b004      	add	sp, #16
 8018e3c:	bd80      	pop	{r7, pc}

08018e3e <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8018e3e:	b590      	push	{r4, r7, lr}
 8018e40:	b083      	sub	sp, #12
 8018e42:	af00      	add	r7, sp, #0
 8018e44:	0004      	movs	r4, r0
 8018e46:	0008      	movs	r0, r1
 8018e48:	603a      	str	r2, [r7, #0]
 8018e4a:	0019      	movs	r1, r3
 8018e4c:	1dfb      	adds	r3, r7, #7
 8018e4e:	1c22      	adds	r2, r4, #0
 8018e50:	701a      	strb	r2, [r3, #0]
 8018e52:	1dbb      	adds	r3, r7, #6
 8018e54:	1c02      	adds	r2, r0, #0
 8018e56:	701a      	strb	r2, [r3, #0]
 8018e58:	1d3b      	adds	r3, r7, #4
 8018e5a:	1c0a      	adds	r2, r1, #0
 8018e5c:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8018e5e:	46c0      	nop			; (mov r8, r8)
 8018e60:	46bd      	mov	sp, r7
 8018e62:	b003      	add	sp, #12
 8018e64:	bd90      	pop	{r4, r7, pc}

08018e66 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8018e66:	b580      	push	{r7, lr}
 8018e68:	b082      	sub	sp, #8
 8018e6a:	af00      	add	r7, sp, #0
 8018e6c:	0002      	movs	r2, r0
 8018e6e:	1dfb      	adds	r3, r7, #7
 8018e70:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8018e72:	1dfb      	adds	r3, r7, #7
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	0018      	movs	r0, r3
 8018e78:	f7e7 fb98 	bl	80005ac <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8018e7c:	46c0      	nop			; (mov r8, r8)
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	b002      	add	sp, #8
 8018e82:	bd80      	pop	{r7, pc}

08018e84 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b084      	sub	sp, #16
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	0002      	movs	r2, r0
 8018e8c:	1dfb      	adds	r3, r7, #7
 8018e8e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8018e90:	230f      	movs	r3, #15
 8018e92:	18fb      	adds	r3, r7, r3
 8018e94:	220c      	movs	r2, #12
 8018e96:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8018e98:	1dfb      	adds	r3, r7, #7
 8018e9a:	781a      	ldrb	r2, [r3, #0]
 8018e9c:	4931      	ldr	r1, [pc, #196]	; (8018f64 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8018e9e:	0013      	movs	r3, r2
 8018ea0:	00db      	lsls	r3, r3, #3
 8018ea2:	1a9b      	subs	r3, r3, r2
 8018ea4:	00db      	lsls	r3, r3, #3
 8018ea6:	5c5b      	ldrb	r3, [r3, r1]
 8018ea8:	07db      	lsls	r3, r3, #31
 8018eaa:	0fdb      	lsrs	r3, r3, #31
 8018eac:	b2db      	uxtb	r3, r3
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d019      	beq.n	8018ee6 <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8018eb2:	1dfb      	adds	r3, r7, #7
 8018eb4:	781a      	ldrb	r2, [r3, #0]
 8018eb6:	492b      	ldr	r1, [pc, #172]	; (8018f64 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8018eb8:	0013      	movs	r3, r2
 8018eba:	00db      	lsls	r3, r3, #3
 8018ebc:	1a9b      	subs	r3, r3, r2
 8018ebe:	00db      	lsls	r3, r3, #3
 8018ec0:	5c5b      	ldrb	r3, [r3, r1]
 8018ec2:	075b      	lsls	r3, r3, #29
 8018ec4:	0fdb      	lsrs	r3, r3, #31
 8018ec6:	b2db      	uxtb	r3, r3
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d111      	bne.n	8018ef0 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 8018ecc:	1dfb      	adds	r3, r7, #7
 8018ece:	781a      	ldrb	r2, [r3, #0]
 8018ed0:	4924      	ldr	r1, [pc, #144]	; (8018f64 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8018ed2:	0013      	movs	r3, r2
 8018ed4:	00db      	lsls	r3, r3, #3
 8018ed6:	1a9b      	subs	r3, r3, r2
 8018ed8:	00db      	lsls	r3, r3, #3
 8018eda:	5c5b      	ldrb	r3, [r3, r1]
 8018edc:	071b      	lsls	r3, r3, #28
 8018ede:	0fdb      	lsrs	r3, r3, #31
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d104      	bne.n	8018ef0 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
  {
    status = USBPD_NOTSUPPORTED;
 8018ee6:	230f      	movs	r3, #15
 8018ee8:	18fb      	adds	r3, r7, r3
 8018eea:	2201      	movs	r2, #1
 8018eec:	701a      	strb	r2, [r3, #0]
 8018eee:	e031      	b.n	8018f54 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8018ef0:	1dfb      	adds	r3, r7, #7
 8018ef2:	781a      	ldrb	r2, [r3, #0]
 8018ef4:	491b      	ldr	r1, [pc, #108]	; (8018f64 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8018ef6:	0013      	movs	r3, r2
 8018ef8:	00db      	lsls	r3, r3, #3
 8018efa:	1a9b      	subs	r3, r3, r2
 8018efc:	00db      	lsls	r3, r3, #3
 8018efe:	5c5b      	ldrb	r3, [r3, r1]
 8018f00:	075b      	lsls	r3, r3, #29
 8018f02:	0fdb      	lsrs	r3, r3, #31
 8018f04:	b2db      	uxtb	r3, r3
 8018f06:	2b01      	cmp	r3, #1
 8018f08:	d109      	bne.n	8018f1e <USBPD_DPM_EvaluateDataRoleSwap+0x9a>
 8018f0a:	1dfb      	adds	r3, r7, #7
 8018f0c:	781a      	ldrb	r2, [r3, #0]
 8018f0e:	4b16      	ldr	r3, [pc, #88]	; (8018f68 <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 8018f10:	0092      	lsls	r2, r2, #2
 8018f12:	5cd3      	ldrb	r3, [r2, r3]
 8018f14:	071b      	lsls	r3, r3, #28
 8018f16:	0fdb      	lsrs	r3, r3, #31
 8018f18:	b2db      	uxtb	r3, r3
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d016      	beq.n	8018f4c <USBPD_DPM_EvaluateDataRoleSwap+0xc8>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8018f1e:	1dfb      	adds	r3, r7, #7
 8018f20:	781a      	ldrb	r2, [r3, #0]
 8018f22:	4910      	ldr	r1, [pc, #64]	; (8018f64 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8018f24:	0013      	movs	r3, r2
 8018f26:	00db      	lsls	r3, r3, #3
 8018f28:	1a9b      	subs	r3, r3, r2
 8018f2a:	00db      	lsls	r3, r3, #3
 8018f2c:	5c5b      	ldrb	r3, [r3, r1]
 8018f2e:	071b      	lsls	r3, r3, #28
 8018f30:	0fdb      	lsrs	r3, r3, #31
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	2b01      	cmp	r3, #1
 8018f36:	d10d      	bne.n	8018f54 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
 8018f38:	1dfb      	adds	r3, r7, #7
 8018f3a:	781a      	ldrb	r2, [r3, #0]
 8018f3c:	4b0a      	ldr	r3, [pc, #40]	; (8018f68 <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 8018f3e:	0092      	lsls	r2, r2, #2
 8018f40:	5cd3      	ldrb	r3, [r2, r3]
 8018f42:	071b      	lsls	r3, r3, #28
 8018f44:	0fdb      	lsrs	r3, r3, #31
 8018f46:	b2db      	uxtb	r3, r3
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	d103      	bne.n	8018f54 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
    {
      status = USBPD_ACCEPT;
 8018f4c:	230f      	movs	r3, #15
 8018f4e:	18fb      	adds	r3, r7, r3
 8018f50:	220a      	movs	r2, #10
 8018f52:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8018f54:	230f      	movs	r3, #15
 8018f56:	18fb      	adds	r3, r7, r3
 8018f58:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8018f5a:	0018      	movs	r0, r3
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	b004      	add	sp, #16
 8018f60:	bd80      	pop	{r7, pc}
 8018f62:	46c0      	nop			; (mov r8, r8)
 8018f64:	20000064 	.word	0x20000064
 8018f68:	20010dc4 	.word	0x20010dc4

08018f6c <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	0002      	movs	r2, r0
 8018f74:	1dfb      	adds	r3, r7, #7
 8018f76:	701a      	strb	r2, [r3, #0]
 8018f78:	1dbb      	adds	r3, r7, #6
 8018f7a:	1c0a      	adds	r2, r1, #0
 8018f7c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8018f7e:	1dbb      	adds	r3, r7, #6
 8018f80:	781a      	ldrb	r2, [r3, #0]
 8018f82:	1dfb      	adds	r3, r7, #7
 8018f84:	781b      	ldrb	r3, [r3, #0]
 8018f86:	0011      	movs	r1, r2
 8018f88:	0018      	movs	r0, r3
 8018f8a:	f7ff fe73 	bl	8018c74 <USBPD_PWR_IF_SupplyReady>
 8018f8e:	0003      	movs	r3, r0
 8018f90:	425a      	negs	r2, r3
 8018f92:	4153      	adcs	r3, r2
 8018f94:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8018f96:	0018      	movs	r0, r3
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	b002      	add	sp, #8
 8018f9c:	bd80      	pop	{r7, pc}

08018f9e <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8018f9e:	b580      	push	{r7, lr}
 8018fa0:	b084      	sub	sp, #16
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2b01      	cmp	r3, #1
 8018fae:	d902      	bls.n	8018fb6 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8018fb0:	2302      	movs	r3, #2
 8018fb2:	425b      	negs	r3, r3
 8018fb4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8018fb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8018fb8:	0018      	movs	r0, r3
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	b004      	add	sp, #16
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b084      	sub	sp, #16
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8018fc8:	2300      	movs	r3, #0
 8018fca:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	2b01      	cmp	r3, #1
 8018fd0:	d902      	bls.n	8018fd8 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8018fd2:	2302      	movs	r3, #2
 8018fd4:	425b      	negs	r3, r3
 8018fd6:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8018fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8018fda:	0018      	movs	r0, r3
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	b004      	add	sp, #16
 8018fe0:	bd80      	pop	{r7, pc}

08018fe2 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8018fe2:	b580      	push	{r7, lr}
 8018fe4:	b084      	sub	sp, #16
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8018fea:	230b      	movs	r3, #11
 8018fec:	425b      	negs	r3, r3
 8018fee:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	2b01      	cmp	r3, #1
 8018ff4:	d902      	bls.n	8018ffc <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8018ff6:	2302      	movs	r3, #2
 8018ff8:	425b      	negs	r3, r3
 8018ffa:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 8018ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8018ffe:	0018      	movs	r0, r3
 8019000:	46bd      	mov	sp, r7
 8019002:	b004      	add	sp, #16
 8019004:	bd80      	pop	{r7, pc}

08019006 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8019006:	b580      	push	{r7, lr}
 8019008:	b084      	sub	sp, #16
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
 801900e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8019010:	2300      	movs	r3, #0
 8019012:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2b01      	cmp	r3, #1
 8019018:	d802      	bhi.n	8019020 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d102      	bne.n	8019026 <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8019020:	2302      	movs	r3, #2
 8019022:	425b      	negs	r3, r3
 8019024:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	2200      	movs	r2, #0
 801902a:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 801902c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801902e:	0018      	movs	r0, r3
 8019030:	46bd      	mov	sp, r7
 8019032:	b004      	add	sp, #16
 8019034:	bd80      	pop	{r7, pc}
	...

08019038 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8019038:	b590      	push	{r4, r7, lr}
 801903a:	b095      	sub	sp, #84	; 0x54
 801903c:	af08      	add	r7, sp, #32
 801903e:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8019040:	2300      	movs	r3, #0
 8019042:	62fb      	str	r3, [r7, #44]	; 0x2c
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	62bb      	str	r3, [r7, #40]	; 0x28
  UCHAR *string_framework;
  /* Language_Id_Framework*/
  UCHAR *language_id_framework;

  /* Allocate the stack for thread 0.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8019048:	2380      	movs	r3, #128	; 0x80
 801904a:	015a      	lsls	r2, r3, #5
 801904c:	2318      	movs	r3, #24
 801904e:	18f9      	adds	r1, r7, r3
 8019050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019052:	2300      	movs	r3, #0
 8019054:	f7fa fc92 	bl	801397c <_txe_byte_allocate>
 8019058:	1e03      	subs	r3, r0, #0
 801905a:	d001      	beq.n	8019060 <MX_USBX_Device_Init+0x28>
                       USBX_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 801905c:	2302      	movs	r3, #2
 801905e:	e0b6      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_MEMORY_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8019060:	69b8      	ldr	r0, [r7, #24]
 8019062:	2380      	movs	r3, #128	; 0x80
 8019064:	0159      	lsls	r1, r3, #5
 8019066:	2300      	movs	r3, #0
 8019068:	2200      	movs	r2, #0
 801906a:	f7fd fbe5 	bl	8016838 <_ux_system_initialize>
 801906e:	1e03      	subs	r3, r0, #0
 8019070:	d001      	beq.n	8019076 <MX_USBX_Device_Init+0x3e>
  {
    return UX_ERROR;
 8019072:	23ff      	movs	r3, #255	; 0xff
 8019074:	e0ab      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Get_Device_Framework_Full_Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8019076:	2314      	movs	r3, #20
 8019078:	18fb      	adds	r3, r7, r3
 801907a:	0019      	movs	r1, r3
 801907c:	2000      	movs	r0, #0
 801907e:	f000 f913 	bl	80192a8 <USBD_Get_Device_Framework_Speed>
 8019082:	0003      	movs	r3, r0
 8019084:	627b      	str	r3, [r7, #36]	; 0x24
                                &device_framework_fs_length);

  /* Get_String_Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8019086:	2310      	movs	r3, #16
 8019088:	18fb      	adds	r3, r7, r3
 801908a:	0018      	movs	r0, r3
 801908c:	f000 f956 	bl	801933c <USBD_Get_String_Framework>
 8019090:	0003      	movs	r3, r0
 8019092:	623b      	str	r3, [r7, #32]

  /* Get_Language_Id_Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&languge_id_framework_length);
 8019094:	230c      	movs	r3, #12
 8019096:	18fb      	adds	r3, r7, r3
 8019098:	0018      	movs	r0, r3
 801909a:	f000 f9f1 	bl	8019480 <USBD_Get_Language_Id_Framework>
 801909e:	0003      	movs	r3, r0
 80190a0:	61fb      	str	r3, [r7, #28]

  /* The code below is required for installing the device portion of USBX.
     In this application */
  if (ux_device_stack_initialize(NULL,
 80190a2:	6978      	ldr	r0, [r7, #20]
 80190a4:	693b      	ldr	r3, [r7, #16]
 80190a6:	68fa      	ldr	r2, [r7, #12]
 80190a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80190aa:	2400      	movs	r4, #0
 80190ac:	9404      	str	r4, [sp, #16]
 80190ae:	9203      	str	r2, [sp, #12]
 80190b0:	69fa      	ldr	r2, [r7, #28]
 80190b2:	9202      	str	r2, [sp, #8]
 80190b4:	9301      	str	r3, [sp, #4]
 80190b6:	6a3b      	ldr	r3, [r7, #32]
 80190b8:	9300      	str	r3, [sp, #0]
 80190ba:	0003      	movs	r3, r0
 80190bc:	000a      	movs	r2, r1
 80190be:	2100      	movs	r1, #0
 80190c0:	2000      	movs	r0, #0
 80190c2:	f7fc fedf 	bl	8015e84 <_ux_device_stack_initialize>
 80190c6:	1e03      	subs	r3, r0, #0
 80190c8:	d001      	beq.n	80190ce <MX_USBX_Device_Init+0x96>
                                 string_framework_length,
                                 language_id_framework,
                                 languge_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    return UX_ERROR;
 80190ca:	23ff      	movs	r3, #255	; 0xff
 80190cc:	e07f      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Initialize the hid class parameters for the device. */
  hid_parameter.ux_device_class_hid_parameter_report_address = USBD_Get_Device_HID_MOUSE_ReportDesc();
 80190ce:	f000 f9ff 	bl	80194d0 <USBD_Get_Device_HID_MOUSE_ReportDesc>
 80190d2:	0002      	movs	r2, r0
 80190d4:	4b40      	ldr	r3, [pc, #256]	; (80191d8 <MX_USBX_Device_Init+0x1a0>)
 80190d6:	609a      	str	r2, [r3, #8]

  hid_parameter.ux_device_class_hid_parameter_report_length = USBD_HID_MOUSE_REPORT_DESC_SIZE;
 80190d8:	4b3f      	ldr	r3, [pc, #252]	; (80191d8 <MX_USBX_Device_Init+0x1a0>)
 80190da:	224a      	movs	r2, #74	; 0x4a
 80190dc:	611a      	str	r2, [r3, #16]

  hid_parameter.ux_device_class_hid_parameter_report_id = UX_TRUE;
 80190de:	4b3e      	ldr	r3, [pc, #248]	; (80191d8 <MX_USBX_Device_Init+0x1a0>)
 80190e0:	2201      	movs	r2, #1
 80190e2:	60da      	str	r2, [r3, #12]

  hid_parameter.ux_device_class_hid_parameter_callback = app_usbx_device_thread_hid_callback;
 80190e4:	4b3c      	ldr	r3, [pc, #240]	; (80191d8 <MX_USBX_Device_Init+0x1a0>)
 80190e6:	4a3d      	ldr	r2, [pc, #244]	; (80191dc <MX_USBX_Device_Init+0x1a4>)
 80190e8:	615a      	str	r2, [r3, #20]

  /* Initialize the device hid class. The class is connected with interface 0 */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 80190ea:	493d      	ldr	r1, [pc, #244]	; (80191e0 <MX_USBX_Device_Init+0x1a8>)
 80190ec:	483d      	ldr	r0, [pc, #244]	; (80191e4 <MX_USBX_Device_Init+0x1ac>)
 80190ee:	4b3a      	ldr	r3, [pc, #232]	; (80191d8 <MX_USBX_Device_Init+0x1a0>)
 80190f0:	9300      	str	r3, [sp, #0]
 80190f2:	2300      	movs	r3, #0
 80190f4:	2201      	movs	r2, #1
 80190f6:	f7fb fee7 	bl	8014ec8 <_ux_device_stack_class_register>
 80190fa:	1e03      	subs	r3, r0, #0
 80190fc:	d001      	beq.n	8019102 <MX_USBX_Device_Init+0xca>
                                     ux_device_class_hid_entry, 1, 0,
                                     (VOID *)&hid_parameter) != UX_SUCCESS)
  {
    return UX_ERROR;
 80190fe:	23ff      	movs	r3, #255	; 0xff
 8019100:	e065      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Allocate the stack for main_usbx_app_thread_entry. */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8019102:	2380      	movs	r3, #128	; 0x80
 8019104:	00da      	lsls	r2, r3, #3
 8019106:	2318      	movs	r3, #24
 8019108:	18f9      	adds	r1, r7, r3
 801910a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801910c:	2300      	movs	r3, #0
 801910e:	f7fa fc35 	bl	801397c <_txe_byte_allocate>
 8019112:	1e03      	subs	r3, r0, #0
 8019114:	d001      	beq.n	801911a <MX_USBX_Device_Init+0xe2>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8019116:	2302      	movs	r3, #2
 8019118:	e059      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Create the main thread. */
  if (tx_thread_create(&ux_app_thread, "main_usbx_app_thread_entry",
 801911a:	69bb      	ldr	r3, [r7, #24]
 801911c:	4c32      	ldr	r4, [pc, #200]	; (80191e8 <MX_USBX_Device_Init+0x1b0>)
 801911e:	4933      	ldr	r1, [pc, #204]	; (80191ec <MX_USBX_Device_Init+0x1b4>)
 8019120:	4833      	ldr	r0, [pc, #204]	; (80191f0 <MX_USBX_Device_Init+0x1b8>)
 8019122:	22b0      	movs	r2, #176	; 0xb0
 8019124:	9206      	str	r2, [sp, #24]
 8019126:	2201      	movs	r2, #1
 8019128:	9205      	str	r2, [sp, #20]
 801912a:	2201      	movs	r2, #1
 801912c:	9204      	str	r2, [sp, #16]
 801912e:	2214      	movs	r2, #20
 8019130:	9203      	str	r2, [sp, #12]
 8019132:	2214      	movs	r2, #20
 8019134:	9202      	str	r2, [sp, #8]
 8019136:	2280      	movs	r2, #128	; 0x80
 8019138:	00d2      	lsls	r2, r2, #3
 801913a:	9201      	str	r2, [sp, #4]
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	2300      	movs	r3, #0
 8019140:	0022      	movs	r2, r4
 8019142:	f7fb fa3f 	bl	80145c4 <_txe_thread_create>
 8019146:	1e03      	subs	r3, r0, #0
 8019148:	d001      	beq.n	801914e <MX_USBX_Device_Init+0x116>
                       usbx_app_thread_entry, 0, pointer, USBX_APP_STACK_SIZE,
                       20, 20, 1, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 801914a:	230e      	movs	r3, #14
 801914c:	e03f      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Allocate the stack for usbx_hid_thread_entry.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 801914e:	2380      	movs	r3, #128	; 0x80
 8019150:	00da      	lsls	r2, r3, #3
 8019152:	2318      	movs	r3, #24
 8019154:	18f9      	adds	r1, r7, r3
 8019156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019158:	2300      	movs	r3, #0
 801915a:	f7fa fc0f 	bl	801397c <_txe_byte_allocate>
 801915e:	1e03      	subs	r3, r0, #0
 8019160:	d001      	beq.n	8019166 <MX_USBX_Device_Init+0x12e>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8019162:	2302      	movs	r3, #2
 8019164:	e033      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Create the usbx_hid_thread_entry thread. */
  if (tx_thread_create(&ux_hid_thread, "hid_usbx_app_thread_entry",
 8019166:	69bb      	ldr	r3, [r7, #24]
 8019168:	4c22      	ldr	r4, [pc, #136]	; (80191f4 <MX_USBX_Device_Init+0x1bc>)
 801916a:	4923      	ldr	r1, [pc, #140]	; (80191f8 <MX_USBX_Device_Init+0x1c0>)
 801916c:	4823      	ldr	r0, [pc, #140]	; (80191fc <MX_USBX_Device_Init+0x1c4>)
 801916e:	22b0      	movs	r2, #176	; 0xb0
 8019170:	9206      	str	r2, [sp, #24]
 8019172:	2201      	movs	r2, #1
 8019174:	9205      	str	r2, [sp, #20]
 8019176:	2201      	movs	r2, #1
 8019178:	9204      	str	r2, [sp, #16]
 801917a:	2214      	movs	r2, #20
 801917c:	9203      	str	r2, [sp, #12]
 801917e:	2214      	movs	r2, #20
 8019180:	9202      	str	r2, [sp, #8]
 8019182:	2280      	movs	r2, #128	; 0x80
 8019184:	00d2      	lsls	r2, r2, #3
 8019186:	9201      	str	r2, [sp, #4]
 8019188:	9300      	str	r3, [sp, #0]
 801918a:	2300      	movs	r3, #0
 801918c:	0022      	movs	r2, r4
 801918e:	f7fb fa19 	bl	80145c4 <_txe_thread_create>
 8019192:	1e03      	subs	r3, r0, #0
 8019194:	d001      	beq.n	801919a <MX_USBX_Device_Init+0x162>
                       usbx_hid_thread_entry, 0,
                       pointer, USBX_APP_STACK_SIZE, 20, 20,
                       1, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8019196:	230e      	movs	r3, #14
 8019198:	e019      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Allocate Memory for the Queue */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 801919a:	2318      	movs	r3, #24
 801919c:	18f9      	adds	r1, r7, r3
 801919e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191a0:	2300      	movs	r3, #0
 80191a2:	2204      	movs	r2, #4
 80191a4:	f7fa fbea 	bl	801397c <_txe_byte_allocate>
 80191a8:	1e03      	subs	r3, r0, #0
 80191aa:	d001      	beq.n	80191b0 <MX_USBX_Device_Init+0x178>
                       sizeof(APP_QUEUE_SIZE*sizeof(ULONG)),
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80191ac:	2302      	movs	r3, #2
 80191ae:	e00e      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }

  /* Create the MsgQueue */
  if (tx_queue_create(&ux_app_MsgQueue, "Message Queue app",
 80191b0:	69bb      	ldr	r3, [r7, #24]
 80191b2:	4913      	ldr	r1, [pc, #76]	; (8019200 <MX_USBX_Device_Init+0x1c8>)
 80191b4:	4813      	ldr	r0, [pc, #76]	; (8019204 <MX_USBX_Device_Init+0x1cc>)
 80191b6:	2238      	movs	r2, #56	; 0x38
 80191b8:	9201      	str	r2, [sp, #4]
 80191ba:	2214      	movs	r2, #20
 80191bc:	9200      	str	r2, [sp, #0]
 80191be:	2201      	movs	r2, #1
 80191c0:	f7fa ff80 	bl	80140c4 <_txe_queue_create>
 80191c4:	1e03      	subs	r3, r0, #0
 80191c6:	d001      	beq.n	80191cc <MX_USBX_Device_Init+0x194>
                      TX_1_ULONG, pointer,
                      APP_QUEUE_SIZE*sizeof(ULONG)) != TX_SUCCESS)
  {
    return TX_QUEUE_ERROR;
 80191c8:	2309      	movs	r3, #9
 80191ca:	e000      	b.n	80191ce <MX_USBX_Device_Init+0x196>
  }
  /* USER CODE END MX_USBX_Device_Init */

  return ret;
 80191cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80191ce:	0018      	movs	r0, r3
 80191d0:	46bd      	mov	sp, r7
 80191d2:	b00d      	add	sp, #52	; 0x34
 80191d4:	bd90      	pop	{r4, r7, pc}
 80191d6:	46c0      	nop			; (mov r8, r8)
 80191d8:	20010f28 	.word	0x20010f28
 80191dc:	08019dc9 	.word	0x08019dc9
 80191e0:	080176ad 	.word	0x080176ad
 80191e4:	20000014 	.word	0x20000014
 80191e8:	08019209 	.word	0x08019209
 80191ec:	0801a22c 	.word	0x0801a22c
 80191f0:	20010dc8 	.word	0x20010dc8
 80191f4:	08019ddd 	.word	0x08019ddd
 80191f8:	0801a248 	.word	0x0801a248
 80191fc:	20010e78 	.word	0x20010e78
 8019200:	0801a264 	.word	0x0801a264
 8019204:	20010f44 	.word	0x20010f44

08019208 <usbx_app_thread_entry>:
  * @brief  Function implementing usbx_app_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_app_thread_entry(ULONG arg)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b082      	sub	sp, #8
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
  /* Initialization of USB device */
  MX_USB_Device_Init();
 8019210:	f000 f826 	bl	8019260 <MX_USB_Device_Init>

  /* Wait for message queue to start/stop the device */
  while(1)
  {
    /* Wait for a device to be connected */
    if (tx_queue_receive(&ux_app_MsgQueue, &Event_Msg,
 8019214:	2301      	movs	r3, #1
 8019216:	425a      	negs	r2, r3
 8019218:	490e      	ldr	r1, [pc, #56]	; (8019254 <usbx_app_thread_entry+0x4c>)
 801921a:	4b0f      	ldr	r3, [pc, #60]	; (8019258 <usbx_app_thread_entry+0x50>)
 801921c:	0018      	movs	r0, r3
 801921e:	f7fb f801 	bl	8014224 <_txe_queue_receive>
 8019222:	1e03      	subs	r3, r0, #0
 8019224:	d001      	beq.n	801922a <usbx_app_thread_entry+0x22>
                         TX_WAIT_FOREVER)!= TX_SUCCESS)
    {
     /*Error*/
     Error_Handler();
 8019226:	f7ed fcb5 	bl	8006b94 <Error_Handler>
    }
    /* Check if received message equal to USB_PCD_START */
    if (Event_Msg == START_USB_DEVICE)
 801922a:	4b0a      	ldr	r3, [pc, #40]	; (8019254 <usbx_app_thread_entry+0x4c>)
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	2b02      	cmp	r3, #2
 8019230:	d104      	bne.n	801923c <usbx_app_thread_entry+0x34>
    {
      /* Start device USB */
      HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8019232:	4b0a      	ldr	r3, [pc, #40]	; (801925c <usbx_app_thread_entry+0x54>)
 8019234:	0018      	movs	r0, r3
 8019236:	f7ee fd3f 	bl	8007cb8 <HAL_PCD_Start>
 801923a:	e7eb      	b.n	8019214 <usbx_app_thread_entry+0xc>
    }
    /* Check if received message equal to USB_PCD_STOP */
    else if (Event_Msg == STOP_USB_DEVICE)
 801923c:	4b05      	ldr	r3, [pc, #20]	; (8019254 <usbx_app_thread_entry+0x4c>)
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	2b01      	cmp	r3, #1
 8019242:	d104      	bne.n	801924e <usbx_app_thread_entry+0x46>
    {
      /* Stop device USB */
      HAL_PCD_Stop(&hpcd_USB_DRD_FS);
 8019244:	4b05      	ldr	r3, [pc, #20]	; (801925c <usbx_app_thread_entry+0x54>)
 8019246:	0018      	movs	r0, r3
 8019248:	f7ee fd5b 	bl	8007d02 <HAL_PCD_Stop>
 801924c:	e7e2      	b.n	8019214 <usbx_app_thread_entry+0xc>
    }
    /* Else Error */
    else
    {
      /*Error*/
      Error_Handler();
 801924e:	f7ed fca1 	bl	8006b94 <Error_Handler>
    if (tx_queue_receive(&ux_app_MsgQueue, &Event_Msg,
 8019252:	e7df      	b.n	8019214 <usbx_app_thread_entry+0xc>
 8019254:	20010f7c 	.word	0x20010f7c
 8019258:	20010f44 	.word	0x20010f44
 801925c:	200102fc 	.word	0x200102fc

08019260 <MX_USB_Device_Init>:
  *        Initialization of USB device.
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment_0 */
  /* USER CODE END USB_Device_Init_PreTreatment_0 */

  MX_USB_DRD_FS_PCD_Init();
 8019264:	f7ee f836 	bl	80072d4 <MX_USB_DRD_FS_PCD_Init>

  /* USER CODE BEGIN USB_Device_Init_PreTreatment_1 */
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x0C);
 8019268:	480d      	ldr	r0, [pc, #52]	; (80192a0 <MX_USB_Device_Init+0x40>)
 801926a:	230c      	movs	r3, #12
 801926c:	2200      	movs	r2, #0
 801926e:	2100      	movs	r1, #0
 8019270:	f7f0 f9fe 	bl	8009670 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x4C);
 8019274:	480a      	ldr	r0, [pc, #40]	; (80192a0 <MX_USB_Device_Init+0x40>)
 8019276:	234c      	movs	r3, #76	; 0x4c
 8019278:	2200      	movs	r2, #0
 801927a:	2180      	movs	r1, #128	; 0x80
 801927c:	f7f0 f9f8 	bl	8009670 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x8C);
 8019280:	4807      	ldr	r0, [pc, #28]	; (80192a0 <MX_USB_Device_Init+0x40>)
 8019282:	238c      	movs	r3, #140	; 0x8c
 8019284:	2200      	movs	r2, #0
 8019286:	2181      	movs	r1, #129	; 0x81
 8019288:	f7f0 f9f2 	bl	8009670 <HAL_PCDEx_PMAConfig>
  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* initialize the device controller driver*/
  _ux_dcd_stm32_initialize((ULONG)USB_DRD_FS, (ULONG)&hpcd_USB_DRD_FS);
 801928c:	4b04      	ldr	r3, [pc, #16]	; (80192a0 <MX_USB_Device_Init+0x40>)
 801928e:	4a05      	ldr	r2, [pc, #20]	; (80192a4 <MX_USB_Device_Init+0x44>)
 8019290:	0019      	movs	r1, r3
 8019292:	0010      	movs	r0, r2
 8019294:	f7ff f98a 	bl	80185ac <_ux_dcd_stm32_initialize>

  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8019298:	46c0      	nop			; (mov r8, r8)
 801929a:	46bd      	mov	sp, r7
 801929c:	bd80      	pop	{r7, pc}
 801929e:	46c0      	nop			; (mov r8, r8)
 80192a0:	200102fc 	.word	0x200102fc
 80192a4:	40005c00 	.word	0x40005c00

080192a8 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b084      	sub	sp, #16
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	0002      	movs	r2, r0
 80192b0:	6039      	str	r1, [r7, #0]
 80192b2:	1dfb      	adds	r3, r7, #7
 80192b4:	701a      	strb	r2, [r3, #0]
  uint8_t *pFrameWork = NULL;
 80192b6:	2300      	movs	r3, #0
 80192b8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 80192ba:	1dfb      	adds	r3, r7, #7
 80192bc:	781b      	ldrb	r3, [r3, #0]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d116      	bne.n	80192f0 <USBD_Get_Device_Framework_Speed+0x48>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 80192c2:	4b19      	ldr	r3, [pc, #100]	; (8019328 <USBD_Get_Device_Framework_Speed+0x80>)
 80192c4:	6819      	ldr	r1, [r3, #0]
 80192c6:	1dfb      	adds	r3, r7, #7
 80192c8:	781b      	ldrb	r3, [r3, #0]
 80192ca:	4a18      	ldr	r2, [pc, #96]	; (801932c <USBD_Get_Device_Framework_Speed+0x84>)
 80192cc:	4818      	ldr	r0, [pc, #96]	; (8019330 <USBD_Get_Device_Framework_Speed+0x88>)
 80192ce:	f000 f967 	bl	80195a0 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 80192d2:	4a17      	ldr	r2, [pc, #92]	; (8019330 <USBD_Get_Device_Framework_Speed+0x88>)
 80192d4:	238a      	movs	r3, #138	; 0x8a
 80192d6:	005b      	lsls	r3, r3, #1
 80192d8:	58d2      	ldr	r2, [r2, r3]
 80192da:	4915      	ldr	r1, [pc, #84]	; (8019330 <USBD_Get_Device_Framework_Speed+0x88>)
 80192dc:	238c      	movs	r3, #140	; 0x8c
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	58cb      	ldr	r3, [r1, r3]
 80192e2:	18d2      	adds	r2, r2, r3
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 80192e8:	4b0f      	ldr	r3, [pc, #60]	; (8019328 <USBD_Get_Device_Framework_Speed+0x80>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	60fb      	str	r3, [r7, #12]
 80192ee:	e015      	b.n	801931c <USBD_Get_Device_Framework_Speed+0x74>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 80192f0:	4b10      	ldr	r3, [pc, #64]	; (8019334 <USBD_Get_Device_Framework_Speed+0x8c>)
 80192f2:	6819      	ldr	r1, [r3, #0]
 80192f4:	1dfb      	adds	r3, r7, #7
 80192f6:	781b      	ldrb	r3, [r3, #0]
 80192f8:	4a0c      	ldr	r2, [pc, #48]	; (801932c <USBD_Get_Device_Framework_Speed+0x84>)
 80192fa:	480f      	ldr	r0, [pc, #60]	; (8019338 <USBD_Get_Device_Framework_Speed+0x90>)
 80192fc:	f000 f950 	bl	80195a0 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8019300:	4a0d      	ldr	r2, [pc, #52]	; (8019338 <USBD_Get_Device_Framework_Speed+0x90>)
 8019302:	238a      	movs	r3, #138	; 0x8a
 8019304:	005b      	lsls	r3, r3, #1
 8019306:	58d2      	ldr	r2, [r2, r3]
 8019308:	490b      	ldr	r1, [pc, #44]	; (8019338 <USBD_Get_Device_Framework_Speed+0x90>)
 801930a:	238c      	movs	r3, #140	; 0x8c
 801930c:	005b      	lsls	r3, r3, #1
 801930e:	58cb      	ldr	r3, [r1, r3]
 8019310:	18d2      	adds	r2, r2, r3
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8019316:	4b07      	ldr	r3, [pc, #28]	; (8019334 <USBD_Get_Device_Framework_Speed+0x8c>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 801931c:	68fb      	ldr	r3, [r7, #12]
}
 801931e:	0018      	movs	r0, r3
 8019320:	46bd      	mov	sp, r7
 8019322:	b004      	add	sp, #16
 8019324:	bd80      	pop	{r7, pc}
 8019326:	46c0      	nop			; (mov r8, r8)
 8019328:	200000a8 	.word	0x200000a8
 801932c:	2000009c 	.word	0x2000009c
 8019330:	20010f80 	.word	0x20010f80
 8019334:	200000ac 	.word	0x200000ac
 8019338:	2001109c 	.word	0x2001109c

0801933c <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 801933c:	b5b0      	push	{r4, r5, r7, lr}
 801933e:	b084      	sub	sp, #16
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8019344:	250c      	movs	r5, #12
 8019346:	197b      	adds	r3, r7, r5
 8019348:	2200      	movs	r2, #0
 801934a:	801a      	strh	r2, [r3, #0]
  uint8_t count = 0U;
 801934c:	240f      	movs	r4, #15
 801934e:	193b      	adds	r3, r7, r4
 8019350:	2200      	movs	r2, #0
 8019352:	701a      	strb	r2, [r3, #0]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019354:	193b      	adds	r3, r7, r4
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	193a      	adds	r2, r7, r4
 801935a:	1c59      	adds	r1, r3, #1
 801935c:	7011      	strb	r1, [r2, #0]
 801935e:	001a      	movs	r2, r3
 8019360:	4b43      	ldr	r3, [pc, #268]	; (8019470 <USBD_Get_String_Framework+0x134>)
 8019362:	2109      	movs	r1, #9
 8019364:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8019366:	193b      	adds	r3, r7, r4
 8019368:	781b      	ldrb	r3, [r3, #0]
 801936a:	193a      	adds	r2, r7, r4
 801936c:	1c59      	adds	r1, r3, #1
 801936e:	7011      	strb	r1, [r2, #0]
 8019370:	001a      	movs	r2, r3
 8019372:	4b3f      	ldr	r3, [pc, #252]	; (8019470 <USBD_Get_String_Framework+0x134>)
 8019374:	2104      	movs	r1, #4
 8019376:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8019378:	193b      	adds	r3, r7, r4
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	193a      	adds	r2, r7, r4
 801937e:	1c59      	adds	r1, r3, #1
 8019380:	7011      	strb	r1, [r2, #0]
 8019382:	001a      	movs	r2, r3
 8019384:	4b3a      	ldr	r3, [pc, #232]	; (8019470 <USBD_Get_String_Framework+0x134>)
 8019386:	2101      	movs	r1, #1
 8019388:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 801938a:	193b      	adds	r3, r7, r4
 801938c:	781a      	ldrb	r2, [r3, #0]
 801938e:	4b38      	ldr	r3, [pc, #224]	; (8019470 <USBD_Get_String_Framework+0x134>)
 8019390:	18d1      	adds	r1, r2, r3
 8019392:	197a      	adds	r2, r7, r5
 8019394:	4b37      	ldr	r3, [pc, #220]	; (8019474 <USBD_Get_String_Framework+0x138>)
 8019396:	0018      	movs	r0, r3
 8019398:	f000 f8a8 	bl	80194ec <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 801939c:	197b      	adds	r3, r7, r5
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	b2da      	uxtb	r2, r3
 80193a2:	193b      	adds	r3, r7, r4
 80193a4:	781b      	ldrb	r3, [r3, #0]
 80193a6:	18d3      	adds	r3, r2, r3
 80193a8:	b2da      	uxtb	r2, r3
 80193aa:	193b      	adds	r3, r7, r4
 80193ac:	3201      	adds	r2, #1
 80193ae:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80193b0:	193b      	adds	r3, r7, r4
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	193a      	adds	r2, r7, r4
 80193b6:	1c59      	adds	r1, r3, #1
 80193b8:	7011      	strb	r1, [r2, #0]
 80193ba:	001a      	movs	r2, r3
 80193bc:	4b2c      	ldr	r3, [pc, #176]	; (8019470 <USBD_Get_String_Framework+0x134>)
 80193be:	2109      	movs	r1, #9
 80193c0:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80193c2:	193b      	adds	r3, r7, r4
 80193c4:	781b      	ldrb	r3, [r3, #0]
 80193c6:	193a      	adds	r2, r7, r4
 80193c8:	1c59      	adds	r1, r3, #1
 80193ca:	7011      	strb	r1, [r2, #0]
 80193cc:	001a      	movs	r2, r3
 80193ce:	4b28      	ldr	r3, [pc, #160]	; (8019470 <USBD_Get_String_Framework+0x134>)
 80193d0:	2104      	movs	r1, #4
 80193d2:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80193d4:	193b      	adds	r3, r7, r4
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	193a      	adds	r2, r7, r4
 80193da:	1c59      	adds	r1, r3, #1
 80193dc:	7011      	strb	r1, [r2, #0]
 80193de:	001a      	movs	r2, r3
 80193e0:	4b23      	ldr	r3, [pc, #140]	; (8019470 <USBD_Get_String_Framework+0x134>)
 80193e2:	2102      	movs	r1, #2
 80193e4:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 80193e6:	193b      	adds	r3, r7, r4
 80193e8:	781a      	ldrb	r2, [r3, #0]
 80193ea:	4b21      	ldr	r3, [pc, #132]	; (8019470 <USBD_Get_String_Framework+0x134>)
 80193ec:	18d1      	adds	r1, r2, r3
 80193ee:	197a      	adds	r2, r7, r5
 80193f0:	4b21      	ldr	r3, [pc, #132]	; (8019478 <USBD_Get_String_Framework+0x13c>)
 80193f2:	0018      	movs	r0, r3
 80193f4:	f000 f87a 	bl	80194ec <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 80193f8:	197b      	adds	r3, r7, r5
 80193fa:	881b      	ldrh	r3, [r3, #0]
 80193fc:	b2da      	uxtb	r2, r3
 80193fe:	193b      	adds	r3, r7, r4
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	18d3      	adds	r3, r2, r3
 8019404:	b2da      	uxtb	r2, r3
 8019406:	193b      	adds	r3, r7, r4
 8019408:	3201      	adds	r2, #1
 801940a:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801940c:	193b      	adds	r3, r7, r4
 801940e:	781b      	ldrb	r3, [r3, #0]
 8019410:	0020      	movs	r0, r4
 8019412:	193a      	adds	r2, r7, r4
 8019414:	1c59      	adds	r1, r3, #1
 8019416:	7011      	strb	r1, [r2, #0]
 8019418:	001a      	movs	r2, r3
 801941a:	4b15      	ldr	r3, [pc, #84]	; (8019470 <USBD_Get_String_Framework+0x134>)
 801941c:	2109      	movs	r1, #9
 801941e:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8019420:	183b      	adds	r3, r7, r0
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	183a      	adds	r2, r7, r0
 8019426:	1c59      	adds	r1, r3, #1
 8019428:	7011      	strb	r1, [r2, #0]
 801942a:	001a      	movs	r2, r3
 801942c:	4b10      	ldr	r3, [pc, #64]	; (8019470 <USBD_Get_String_Framework+0x134>)
 801942e:	2104      	movs	r1, #4
 8019430:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8019432:	183b      	adds	r3, r7, r0
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	183a      	adds	r2, r7, r0
 8019438:	1c59      	adds	r1, r3, #1
 801943a:	7011      	strb	r1, [r2, #0]
 801943c:	001a      	movs	r2, r3
 801943e:	4b0c      	ldr	r3, [pc, #48]	; (8019470 <USBD_Get_String_Framework+0x134>)
 8019440:	2103      	movs	r1, #3
 8019442:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8019444:	183b      	adds	r3, r7, r0
 8019446:	781a      	ldrb	r2, [r3, #0]
 8019448:	4b09      	ldr	r3, [pc, #36]	; (8019470 <USBD_Get_String_Framework+0x134>)
 801944a:	18d1      	adds	r1, r2, r3
 801944c:	197a      	adds	r2, r7, r5
 801944e:	4b0b      	ldr	r3, [pc, #44]	; (801947c <USBD_Get_String_Framework+0x140>)
 8019450:	0018      	movs	r0, r3
 8019452:	f000 f84b 	bl	80194ec <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8019456:	4b06      	ldr	r3, [pc, #24]	; (8019470 <USBD_Get_String_Framework+0x134>)
 8019458:	0018      	movs	r0, r3
 801945a:	f7ed f8a5 	bl	80065a8 <strlen>
 801945e:	0002      	movs	r2, r0
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8019464:	4b02      	ldr	r3, [pc, #8]	; (8019470 <USBD_Get_String_Framework+0x134>)
}
 8019466:	0018      	movs	r0, r3
 8019468:	46bd      	mov	sp, r7
 801946a:	b004      	add	sp, #16
 801946c:	bdb0      	pop	{r4, r5, r7, pc}
 801946e:	46c0      	nop			; (mov r8, r8)
 8019470:	20011348 	.word	0x20011348
 8019474:	0801a278 	.word	0x0801a278
 8019478:	0801a28c 	.word	0x0801a28c
 801947c:	0801a2a0 	.word	0x0801a2a0

08019480 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b084      	sub	sp, #16
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8019488:	200f      	movs	r0, #15
 801948a:	183b      	adds	r3, r7, r0
 801948c:	2200      	movs	r2, #0
 801948e:	701a      	strb	r2, [r3, #0]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019490:	183b      	adds	r3, r7, r0
 8019492:	781b      	ldrb	r3, [r3, #0]
 8019494:	183a      	adds	r2, r7, r0
 8019496:	1c59      	adds	r1, r3, #1
 8019498:	7011      	strb	r1, [r2, #0]
 801949a:	001a      	movs	r2, r3
 801949c:	4b0b      	ldr	r3, [pc, #44]	; (80194cc <USBD_Get_Language_Id_Framework+0x4c>)
 801949e:	2109      	movs	r1, #9
 80194a0:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 80194a2:	183b      	adds	r3, r7, r0
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	183a      	adds	r2, r7, r0
 80194a8:	1c59      	adds	r1, r3, #1
 80194aa:	7011      	strb	r1, [r2, #0]
 80194ac:	001a      	movs	r2, r3
 80194ae:	4b07      	ldr	r3, [pc, #28]	; (80194cc <USBD_Get_Language_Id_Framework+0x4c>)
 80194b0:	2104      	movs	r1, #4
 80194b2:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 80194b4:	4b05      	ldr	r3, [pc, #20]	; (80194cc <USBD_Get_Language_Id_Framework+0x4c>)
 80194b6:	0018      	movs	r0, r3
 80194b8:	f7ed f876 	bl	80065a8 <strlen>
 80194bc:	0002      	movs	r2, r0
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 80194c2:	4b02      	ldr	r3, [pc, #8]	; (80194cc <USBD_Get_Language_Id_Framework+0x4c>)
}
 80194c4:	0018      	movs	r0, r3
 80194c6:	46bd      	mov	sp, r7
 80194c8:	b004      	add	sp, #16
 80194ca:	bd80      	pop	{r7, pc}
 80194cc:	20011448 	.word	0x20011448

080194d0 <USBD_Get_Device_HID_MOUSE_ReportDesc>:
  * @brief  USBD_Get_Device_HID_MOUSE_ReportDesc
  *         Return the device HID_MOUSE_Report descriptor
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_HID_MOUSE_ReportDesc(void)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b082      	sub	sp, #8
 80194d4:	af00      	add	r7, sp, #0
  uint8_t *pHidReportDesc = NULL;
 80194d6:	2300      	movs	r3, #0
 80194d8:	607b      	str	r3, [r7, #4]

  /* USER CODE HidReportDesc0 */

  /* USER CODE HidReportDesc0 */

  pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 80194da:	4b03      	ldr	r3, [pc, #12]	; (80194e8 <USBD_Get_Device_HID_MOUSE_ReportDesc+0x18>)
 80194dc:	607b      	str	r3, [r7, #4]

  /* USER CODE HidReportDesc1 */

  /* USER CODE HidReportDesc1 */
  return pHidReportDesc;
 80194de:	687b      	ldr	r3, [r7, #4]
}
 80194e0:	0018      	movs	r0, r3
 80194e2:	46bd      	mov	sp, r7
 80194e4:	b002      	add	sp, #8
 80194e6:	bd80      	pop	{r7, pc}
 80194e8:	200000b0 	.word	0x200000b0

080194ec <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80194ec:	b590      	push	{r4, r7, lr}
 80194ee:	b087      	sub	sp, #28
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	60f8      	str	r0, [r7, #12]
 80194f4:	60b9      	str	r1, [r7, #8]
 80194f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80194f8:	2417      	movs	r4, #23
 80194fa:	193b      	adds	r3, r7, r4
 80194fc:	2200      	movs	r2, #0
 80194fe:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d029      	beq.n	801955a <USBD_Desc_GetString+0x6e>
  {
    return;
  }

  pdesc = desc;
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801950a:	693b      	ldr	r3, [r7, #16]
 801950c:	0018      	movs	r0, r3
 801950e:	f000 f828 	bl	8019562 <USBD_Desc_GetLen>
 8019512:	0003      	movs	r3, r0
 8019514:	b29a      	uxth	r2, r3
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 801951a:	193b      	adds	r3, r7, r4
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	193a      	adds	r2, r7, r4
 8019520:	1c59      	adds	r1, r3, #1
 8019522:	7011      	strb	r1, [r2, #0]
 8019524:	001a      	movs	r2, r3
 8019526:	68bb      	ldr	r3, [r7, #8]
 8019528:	189b      	adds	r3, r3, r2
 801952a:	687a      	ldr	r2, [r7, #4]
 801952c:	7812      	ldrb	r2, [r2, #0]
 801952e:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8019530:	e00e      	b.n	8019550 <USBD_Desc_GetString+0x64>
  {
    unicode[idx++] = *pdesc;
 8019532:	2217      	movs	r2, #23
 8019534:	18bb      	adds	r3, r7, r2
 8019536:	781b      	ldrb	r3, [r3, #0]
 8019538:	18ba      	adds	r2, r7, r2
 801953a:	1c59      	adds	r1, r3, #1
 801953c:	7011      	strb	r1, [r2, #0]
 801953e:	001a      	movs	r2, r3
 8019540:	68bb      	ldr	r3, [r7, #8]
 8019542:	189b      	adds	r3, r3, r2
 8019544:	693a      	ldr	r2, [r7, #16]
 8019546:	7812      	ldrb	r2, [r2, #0]
 8019548:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801954a:	693b      	ldr	r3, [r7, #16]
 801954c:	3301      	adds	r3, #1
 801954e:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8019550:	693b      	ldr	r3, [r7, #16]
 8019552:	781b      	ldrb	r3, [r3, #0]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d1ec      	bne.n	8019532 <USBD_Desc_GetString+0x46>
 8019558:	e000      	b.n	801955c <USBD_Desc_GetString+0x70>
    return;
 801955a:	46c0      	nop			; (mov r8, r8)
  }
}
 801955c:	46bd      	mov	sp, r7
 801955e:	b007      	add	sp, #28
 8019560:	bd90      	pop	{r4, r7, pc}

08019562 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8019562:	b580      	push	{r7, lr}
 8019564:	b084      	sub	sp, #16
 8019566:	af00      	add	r7, sp, #0
 8019568:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801956a:	230f      	movs	r3, #15
 801956c:	18fb      	adds	r3, r7, r3
 801956e:	2200      	movs	r2, #0
 8019570:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019576:	e008      	b.n	801958a <USBD_Desc_GetLen+0x28>
  {
    len++;
 8019578:	210f      	movs	r1, #15
 801957a:	187b      	adds	r3, r7, r1
 801957c:	781a      	ldrb	r2, [r3, #0]
 801957e:	187b      	adds	r3, r7, r1
 8019580:	3201      	adds	r2, #1
 8019582:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	3301      	adds	r3, #1
 8019588:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801958a:	68bb      	ldr	r3, [r7, #8]
 801958c:	781b      	ldrb	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d1f2      	bne.n	8019578 <USBD_Desc_GetLen+0x16>
  }

  return len;
 8019592:	230f      	movs	r3, #15
 8019594:	18fb      	adds	r3, r7, r3
 8019596:	781b      	ldrb	r3, [r3, #0]
}
 8019598:	0018      	movs	r0, r3
 801959a:	46bd      	mov	sp, r7
 801959c:	b004      	add	sp, #16
 801959e:	bd80      	pop	{r7, pc}

080195a0 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b088      	sub	sp, #32
 80195a4:	af02      	add	r7, sp, #8
 80195a6:	60f8      	str	r0, [r7, #12]
 80195a8:	60b9      	str	r1, [r7, #8]
 80195aa:	607a      	str	r2, [r7, #4]
 80195ac:	001a      	movs	r2, r3
 80195ae:	1cfb      	adds	r3, r7, #3
 80195b0:	701a      	strb	r2, [r3, #0]
  static USBD_DeviceDescTypedef *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 80195b2:	2317      	movs	r3, #23
 80195b4:	18fb      	adds	r3, r7, r3
 80195b6:	2200      	movs	r2, #0
 80195b8:	701a      	strb	r2, [r3, #0]
  uint8_t NumberClass = 1U;
 80195ba:	2316      	movs	r3, #22
 80195bc:	18fb      	adds	r3, r7, r3
 80195be:	2201      	movs	r2, #1
 80195c0:	701a      	strb	r2, [r3, #0]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 80195c2:	68fa      	ldr	r2, [r7, #12]
 80195c4:	238c      	movs	r3, #140	; 0x8c
 80195c6:	005b      	lsls	r3, r3, #1
 80195c8:	2100      	movs	r1, #0
 80195ca:	50d1      	str	r1, [r2, r3]
  pdev->CurrDevDescSz = 0U;
 80195cc:	68fa      	ldr	r2, [r7, #12]
 80195ce:	238a      	movs	r3, #138	; 0x8a
 80195d0:	005b      	lsls	r3, r3, #1
 80195d2:	2100      	movs	r1, #0
 80195d4:	50d1      	str	r1, [r2, r3]

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 80195d6:	4b8f      	ldr	r3, [pc, #572]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80195d8:	68ba      	ldr	r2, [r7, #8]
 80195da:	601a      	str	r2, [r3, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 80195dc:	4b8d      	ldr	r3, [pc, #564]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2212      	movs	r2, #18
 80195e2:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 80195e4:	4b8b      	ldr	r3, [pc, #556]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	2201      	movs	r2, #1
 80195ea:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 80195ec:	4b89      	ldr	r3, [pc, #548]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	789a      	ldrb	r2, [r3, #2]
 80195f2:	2100      	movs	r1, #0
 80195f4:	400a      	ands	r2, r1
 80195f6:	709a      	strb	r2, [r3, #2]
 80195f8:	78da      	ldrb	r2, [r3, #3]
 80195fa:	2100      	movs	r1, #0
 80195fc:	400a      	ands	r2, r1
 80195fe:	1c11      	adds	r1, r2, #0
 8019600:	2202      	movs	r2, #2
 8019602:	430a      	orrs	r2, r1
 8019604:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 8019606:	4b83      	ldr	r3, [pc, #524]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	2200      	movs	r2, #0
 801960c:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 801960e:	4b81      	ldr	r3, [pc, #516]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2200      	movs	r2, #0
 8019614:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8019616:	4b7f      	ldr	r3, [pc, #508]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	2200      	movs	r2, #0
 801961c:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 801961e:	4b7d      	ldr	r3, [pc, #500]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	2240      	movs	r2, #64	; 0x40
 8019624:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8019626:	4b7b      	ldr	r3, [pc, #492]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	7a1a      	ldrb	r2, [r3, #8]
 801962c:	2100      	movs	r1, #0
 801962e:	400a      	ands	r2, r1
 8019630:	1c11      	adds	r1, r2, #0
 8019632:	227d      	movs	r2, #125	; 0x7d
 8019634:	4252      	negs	r2, r2
 8019636:	430a      	orrs	r2, r1
 8019638:	721a      	strb	r2, [r3, #8]
 801963a:	7a5a      	ldrb	r2, [r3, #9]
 801963c:	2100      	movs	r1, #0
 801963e:	400a      	ands	r2, r1
 8019640:	1c11      	adds	r1, r2, #0
 8019642:	2204      	movs	r2, #4
 8019644:	430a      	orrs	r2, r1
 8019646:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 8019648:	4b72      	ldr	r3, [pc, #456]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	7a9a      	ldrb	r2, [r3, #10]
 801964e:	2100      	movs	r1, #0
 8019650:	400a      	ands	r2, r1
 8019652:	1c11      	adds	r1, r2, #0
 8019654:	2210      	movs	r2, #16
 8019656:	430a      	orrs	r2, r1
 8019658:	729a      	strb	r2, [r3, #10]
 801965a:	7ada      	ldrb	r2, [r3, #11]
 801965c:	2100      	movs	r1, #0
 801965e:	400a      	ands	r2, r1
 8019660:	1c11      	adds	r1, r2, #0
 8019662:	2257      	movs	r2, #87	; 0x57
 8019664:	430a      	orrs	r2, r1
 8019666:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 8019668:	4b6a      	ldr	r3, [pc, #424]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	7b1a      	ldrb	r2, [r3, #12]
 801966e:	2100      	movs	r1, #0
 8019670:	400a      	ands	r2, r1
 8019672:	731a      	strb	r2, [r3, #12]
 8019674:	7b5a      	ldrb	r2, [r3, #13]
 8019676:	2100      	movs	r1, #0
 8019678:	400a      	ands	r2, r1
 801967a:	1c11      	adds	r1, r2, #0
 801967c:	2202      	movs	r2, #2
 801967e:	430a      	orrs	r2, r1
 8019680:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8019682:	4b64      	ldr	r3, [pc, #400]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	2201      	movs	r2, #1
 8019688:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 801968a:	4b62      	ldr	r3, [pc, #392]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	2202      	movs	r2, #2
 8019690:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8019692:	4b60      	ldr	r3, [pc, #384]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	2203      	movs	r2, #3
 8019698:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 801969a:	4b5e      	ldr	r3, [pc, #376]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	2201      	movs	r2, #1
 80196a0:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	238a      	movs	r3, #138	; 0x8a
 80196a6:	005b      	lsls	r3, r3, #1
 80196a8:	58d3      	ldr	r3, [r2, r3]
 80196aa:	3312      	adds	r3, #18
 80196ac:	0019      	movs	r1, r3
 80196ae:	68fa      	ldr	r2, [r7, #12]
 80196b0:	238a      	movs	r3, #138	; 0x8a
 80196b2:	005b      	lsls	r3, r3, #1
 80196b4:	50d1      	str	r1, [r2, r3]

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 80196b6:	1cfb      	adds	r3, r7, #3
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	d000      	beq.n	80196c0 <USBD_Device_Framework_Builder+0x120>
 80196be:	e07d      	b.n	80197bc <USBD_Device_Framework_Builder+0x21c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 80196c0:	68fa      	ldr	r2, [r7, #12]
 80196c2:	238a      	movs	r3, #138	; 0x8a
 80196c4:	005b      	lsls	r3, r3, #1
 80196c6:	58d3      	ldr	r3, [r2, r3]
 80196c8:	68ba      	ldr	r2, [r7, #8]
 80196ca:	18d2      	adds	r2, r2, r3
 80196cc:	4b52      	ldr	r3, [pc, #328]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 80196ce:	601a      	str	r2, [r3, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 80196d0:	4b51      	ldr	r3, [pc, #324]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	220a      	movs	r2, #10
 80196d6:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 80196d8:	4b4f      	ldr	r3, [pc, #316]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	2206      	movs	r2, #6
 80196de:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 80196e0:	4b4d      	ldr	r3, [pc, #308]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	789a      	ldrb	r2, [r3, #2]
 80196e6:	2100      	movs	r1, #0
 80196e8:	400a      	ands	r2, r1
 80196ea:	709a      	strb	r2, [r3, #2]
 80196ec:	78da      	ldrb	r2, [r3, #3]
 80196ee:	2100      	movs	r1, #0
 80196f0:	400a      	ands	r2, r1
 80196f2:	1c11      	adds	r1, r2, #0
 80196f4:	2202      	movs	r2, #2
 80196f6:	430a      	orrs	r2, r1
 80196f8:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 80196fa:	4b47      	ldr	r3, [pc, #284]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	2200      	movs	r2, #0
 8019700:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8019702:	4b45      	ldr	r3, [pc, #276]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	2200      	movs	r2, #0
 8019708:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 801970a:	4b43      	ldr	r3, [pc, #268]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	2200      	movs	r2, #0
 8019710:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8019712:	4b41      	ldr	r3, [pc, #260]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	2240      	movs	r2, #64	; 0x40
 8019718:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 801971a:	4b3f      	ldr	r3, [pc, #252]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	2201      	movs	r2, #1
 8019720:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8019722:	4b3d      	ldr	r3, [pc, #244]	; (8019818 <USBD_Device_Framework_Builder+0x278>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	2200      	movs	r2, #0
 8019728:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 801972a:	68fa      	ldr	r2, [r7, #12]
 801972c:	238a      	movs	r3, #138	; 0x8a
 801972e:	005b      	lsls	r3, r3, #1
 8019730:	58d3      	ldr	r3, [r2, r3]
 8019732:	330a      	adds	r3, #10
 8019734:	0019      	movs	r1, r3
 8019736:	68fa      	ldr	r2, [r7, #12]
 8019738:	238a      	movs	r3, #138	; 0x8a
 801973a:	005b      	lsls	r3, r3, #1
 801973c:	50d1      	str	r1, [r2, r3]
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801973e:	e03d      	b.n	80197bc <USBD_Device_Framework_Builder+0x21c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	685b      	ldr	r3, [r3, #4]
 8019744:	2b02      	cmp	r3, #2
 8019746:	d821      	bhi.n	801978c <USBD_Device_Framework_Builder+0x1ec>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801974c:	2b02      	cmp	r3, #2
 801974e:	d81d      	bhi.n	801978c <USBD_Device_Framework_Builder+0x1ec>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8019750:	2317      	movs	r3, #23
 8019752:	18fb      	adds	r3, r7, r3
 8019754:	781b      	ldrb	r3, [r3, #0]
 8019756:	687a      	ldr	r2, [r7, #4]
 8019758:	18d3      	adds	r3, r2, r3
      (void)USBD_FrameWork_AddClass(pdev,
 801975a:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed, (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801975c:	68fa      	ldr	r2, [r7, #12]
 801975e:	238a      	movs	r3, #138	; 0x8a
 8019760:	005b      	lsls	r3, r3, #1
 8019762:	58d3      	ldr	r3, [r2, r3]
      (void)USBD_FrameWork_AddClass(pdev,
 8019764:	68ba      	ldr	r2, [r7, #8]
 8019766:	18d3      	adds	r3, r2, r3
 8019768:	1cfa      	adds	r2, r7, #3
 801976a:	7812      	ldrb	r2, [r2, #0]
 801976c:	68f8      	ldr	r0, [r7, #12]
 801976e:	9300      	str	r3, [sp, #0]
 8019770:	0013      	movs	r3, r2
 8019772:	2200      	movs	r2, #0
 8019774:	f000 f852 	bl	801981c <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	1c5a      	adds	r2, r3, #1
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	1c5a      	adds	r2, r3, #1
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	609a      	str	r2, [r3, #8]
    }
    Idx_Instance++;
 801978c:	2117      	movs	r1, #23
 801978e:	187b      	adds	r3, r7, r1
 8019790:	781a      	ldrb	r2, [r3, #0]
 8019792:	187b      	adds	r3, r7, r1
 8019794:	3201      	adds	r2, #1
 8019796:	701a      	strb	r2, [r3, #0]

    /* Count the number of Classes different of CLASS_TYPE_NONE */
    if (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE)
 8019798:	187b      	adds	r3, r7, r1
 801979a:	781b      	ldrb	r3, [r3, #0]
 801979c:	687a      	ldr	r2, [r7, #4]
 801979e:	18d3      	adds	r3, r2, r3
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	2016      	movs	r0, #22
 80197a4:	183a      	adds	r2, r7, r0
 80197a6:	1839      	adds	r1, r7, r0
 80197a8:	7809      	ldrb	r1, [r1, #0]
 80197aa:	7011      	strb	r1, [r2, #0]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d005      	beq.n	80197bc <USBD_Device_Framework_Builder+0x21c>
    {
      NumberClass++;
 80197b0:	0001      	movs	r1, r0
 80197b2:	187b      	adds	r3, r7, r1
 80197b4:	781a      	ldrb	r2, [r3, #0]
 80197b6:	187b      	adds	r3, r7, r1
 80197b8:	3201      	adds	r2, #1
 80197ba:	701a      	strb	r2, [r3, #0]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80197bc:	2317      	movs	r3, #23
 80197be:	18fb      	adds	r3, r7, r3
 80197c0:	781b      	ldrb	r3, [r3, #0]
 80197c2:	2b02      	cmp	r3, #2
 80197c4:	d9bc      	bls.n	8019740 <USBD_Device_Framework_Builder+0x1a0>
    }
  }
  /* Check if there is a composite class and update device class */
  if (NumberClass > 1)
 80197c6:	2316      	movs	r3, #22
 80197c8:	18fb      	adds	r3, r7, r3
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	2b01      	cmp	r3, #1
 80197ce:	d90c      	bls.n	80197ea <USBD_Device_Framework_Builder+0x24a>
  {
    pDevDesc->bDeviceClass = 0xEF;
 80197d0:	4b10      	ldr	r3, [pc, #64]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	22ef      	movs	r2, #239	; 0xef
 80197d6:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 80197d8:	4b0e      	ldr	r3, [pc, #56]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2202      	movs	r2, #2
 80197de:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 80197e0:	4b0c      	ldr	r3, [pc, #48]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	2201      	movs	r2, #1
 80197e6:	719a      	strb	r2, [r3, #6]
 80197e8:	e00f      	b.n	801980a <USBD_Device_Framework_Builder+0x26a>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	781b      	ldrb	r3, [r3, #0]
 80197ee:	2b02      	cmp	r3, #2
 80197f0:	d10b      	bne.n	801980a <USBD_Device_Framework_Builder+0x26a>
    {
      pDevDesc->bDeviceClass = 0x02;
 80197f2:	4b08      	ldr	r3, [pc, #32]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	2202      	movs	r2, #2
 80197f8:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 80197fa:	4b06      	ldr	r3, [pc, #24]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	2202      	movs	r2, #2
 8019800:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8019802:	4b04      	ldr	r3, [pc, #16]	; (8019814 <USBD_Device_Framework_Builder+0x274>)
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	2200      	movs	r2, #0
 8019808:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 801980a:	68bb      	ldr	r3, [r7, #8]
}
 801980c:	0018      	movs	r0, r3
 801980e:	46bd      	mov	sp, r7
 8019810:	b006      	add	sp, #24
 8019812:	bd80      	pop	{r7, pc}
 8019814:	2001144c 	.word	0x2001144c
 8019818:	20011450 	.word	0x20011450

0801981c <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 801981c:	b590      	push	{r4, r7, lr}
 801981e:	b083      	sub	sp, #12
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	000c      	movs	r4, r1
 8019826:	0010      	movs	r0, r2
 8019828:	0019      	movs	r1, r3
 801982a:	1cfb      	adds	r3, r7, #3
 801982c:	1c22      	adds	r2, r4, #0
 801982e:	701a      	strb	r2, [r3, #0]
 8019830:	1cbb      	adds	r3, r7, #2
 8019832:	1c02      	adds	r2, r0, #0
 8019834:	701a      	strb	r2, [r3, #0]
 8019836:	1c7b      	adds	r3, r7, #1
 8019838:	1c0a      	adds	r2, r1, #0
 801983a:	701a      	strb	r2, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	685b      	ldr	r3, [r3, #4]
 8019840:	2b02      	cmp	r3, #2
 8019842:	d831      	bhi.n	80198a8 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	685b      	ldr	r3, [r3, #4]
 8019848:	687a      	ldr	r2, [r7, #4]
 801984a:	2158      	movs	r1, #88	; 0x58
 801984c:	434b      	muls	r3, r1
 801984e:	18d3      	adds	r3, r2, r3
 8019850:	3314      	adds	r3, #20
 8019852:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8019854:	2b00      	cmp	r3, #0
 8019856:	d127      	bne.n	80198a8 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	6858      	ldr	r0, [r3, #4]
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	685a      	ldr	r2, [r3, #4]
 8019860:	6879      	ldr	r1, [r7, #4]
 8019862:	2358      	movs	r3, #88	; 0x58
 8019864:	4343      	muls	r3, r0
 8019866:	18cb      	adds	r3, r1, r3
 8019868:	3310      	adds	r3, #16
 801986a:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	685b      	ldr	r3, [r3, #4]
 8019870:	687a      	ldr	r2, [r7, #4]
 8019872:	2158      	movs	r1, #88	; 0x58
 8019874:	434b      	muls	r3, r1
 8019876:	18d3      	adds	r3, r2, r3
 8019878:	3314      	adds	r3, #20
 801987a:	2201      	movs	r2, #1
 801987c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	685b      	ldr	r3, [r3, #4]
 8019882:	687a      	ldr	r2, [r7, #4]
 8019884:	2158      	movs	r1, #88	; 0x58
 8019886:	434b      	muls	r3, r1
 8019888:	18d3      	adds	r3, r2, r3
 801988a:	330c      	adds	r3, #12
 801988c:	1cfa      	adds	r2, r7, #3
 801988e:	7812      	ldrb	r2, [r2, #0]
 8019890:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8019892:	69ba      	ldr	r2, [r7, #24]
 8019894:	1c7b      	adds	r3, r7, #1
 8019896:	7819      	ldrb	r1, [r3, #0]
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	0018      	movs	r0, r3
 801989c:	f000 f809 	bl	80198b2 <USBD_FrameWork_AddToConfDesc>
 80198a0:	1e03      	subs	r3, r0, #0
 80198a2:	d001      	beq.n	80198a8 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 80198a4:	23ff      	movs	r3, #255	; 0xff
 80198a6:	e000      	b.n	80198aa <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 80198a8:	2300      	movs	r3, #0
}
 80198aa:	0018      	movs	r0, r3
 80198ac:	46bd      	mov	sp, r7
 80198ae:	b003      	add	sp, #12
 80198b0:	bd90      	pop	{r4, r7, pc}

080198b2 <USBD_FrameWork_AddToConfDesc>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 80198b2:	b5b0      	push	{r4, r5, r7, lr}
 80198b4:	b086      	sub	sp, #24
 80198b6:	af00      	add	r7, sp, #0
 80198b8:	60f8      	str	r0, [r7, #12]
 80198ba:	607a      	str	r2, [r7, #4]
 80198bc:	200b      	movs	r0, #11
 80198be:	183b      	adds	r3, r7, r0
 80198c0:	1c0a      	adds	r2, r1, #0
 80198c2:	701a      	strb	r2, [r3, #0]
  uint8_t interface = 0U;
 80198c4:	2317      	movs	r3, #23
 80198c6:	18fb      	adds	r3, r7, r3
 80198c8:	2200      	movs	r2, #0
 80198ca:	701a      	strb	r2, [r3, #0]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	183a      	adds	r2, r7, r0
 80198d0:	7812      	ldrb	r2, [r2, #0]
 80198d2:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	685b      	ldr	r3, [r3, #4]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d107      	bne.n	80198ec <USBD_FrameWork_AddToConfDesc+0x3a>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 80198dc:	687a      	ldr	r2, [r7, #4]
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	3319      	adds	r3, #25
 80198e2:	33ff      	adds	r3, #255	; 0xff
 80198e4:	0019      	movs	r1, r3
 80198e6:	0010      	movs	r0, r2
 80198e8:	f000 f87a 	bl	80199e0 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	68fa      	ldr	r2, [r7, #12]
 80198f2:	2158      	movs	r1, #88	; 0x58
 80198f4:	434b      	muls	r3, r1
 80198f6:	18d3      	adds	r3, r2, r3
 80198f8:	330c      	adds	r3, #12
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	2b01      	cmp	r3, #1
 80198fe:	d13f      	bne.n	8019980 <USBD_FrameWork_AddToConfDesc+0xce>
  {

#if USBD_HID_CLASS_ACTIVATED == 1U
    case CLASS_TYPE_HID:
      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8019900:	2517      	movs	r5, #23
 8019902:	197c      	adds	r4, r7, r5
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	0018      	movs	r0, r3
 8019908:	f000 f840 	bl	801998c <USBD_FrameWork_FindFreeIFNbr>
 801990c:	0003      	movs	r3, r0
 801990e:	7023      	strb	r3, [r4, #0]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	685b      	ldr	r3, [r3, #4]
 8019914:	68fa      	ldr	r2, [r7, #12]
 8019916:	2158      	movs	r1, #88	; 0x58
 8019918:	434b      	muls	r3, r1
 801991a:	18d3      	adds	r3, r2, r3
 801991c:	3354      	adds	r3, #84	; 0x54
 801991e:	2201      	movs	r2, #1
 8019920:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	685b      	ldr	r3, [r3, #4]
 8019926:	68fa      	ldr	r2, [r7, #12]
 8019928:	2158      	movs	r1, #88	; 0x58
 801992a:	2058      	movs	r0, #88	; 0x58
 801992c:	4343      	muls	r3, r0
 801992e:	18d3      	adds	r3, r2, r3
 8019930:	185b      	adds	r3, r3, r1
 8019932:	197a      	adds	r2, r7, r5
 8019934:	7812      	ldrb	r2, [r2, #0]
 8019936:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP1_IN */
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	685b      	ldr	r3, [r3, #4]
 801993c:	68fa      	ldr	r2, [r7, #12]
 801993e:	2158      	movs	r1, #88	; 0x58
 8019940:	434b      	muls	r3, r1
 8019942:	18d3      	adds	r3, r2, r3
 8019944:	3318      	adds	r3, #24
 8019946:	2201      	movs	r2, #1
 8019948:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoint IN */
      if (pdev->Speed == USBD_HIGH_SPEED)
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	2b01      	cmp	r3, #1
 8019950:	d106      	bne.n	8019960 <USBD_FrameWork_AddToConfDesc+0xae>
      {
        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8019952:	68f8      	ldr	r0, [r7, #12]
 8019954:	2304      	movs	r3, #4
 8019956:	2203      	movs	r2, #3
 8019958:	2181      	movs	r1, #129	; 0x81
 801995a:	f000 f870 	bl	8019a3e <USBD_FrameWork_AssignEp>
 801995e:	e005      	b.n	801996c <USBD_FrameWork_AddToConfDesc+0xba>
                                USBD_HID_EPIN_HS_MPS);
      }
      else
      {
        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8019960:	68f8      	ldr	r0, [r7, #12]
 8019962:	2304      	movs	r3, #4
 8019964:	2203      	movs	r2, #3
 8019966:	2181      	movs	r1, #129	; 0x81
 8019968:	f000 f869 	bl	8019a3e <USBD_FrameWork_AssignEp>
                                USBD_HID_EPIN_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801996c:	6879      	ldr	r1, [r7, #4]
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	3319      	adds	r3, #25
 8019972:	33ff      	adds	r3, #255	; 0xff
 8019974:	001a      	movs	r2, r3
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	0018      	movs	r0, r3
 801997a:	f000 f8d9 	bl	8019b30 <USBD_FrameWork_HID_Desc>

      break;
 801997e:	e000      	b.n	8019982 <USBD_FrameWork_AddToConfDesc+0xd0>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 8019980:	46c0      	nop			; (mov r8, r8)
  }

  return UX_SUCCESS;
 8019982:	2300      	movs	r3, #0
}
 8019984:	0018      	movs	r0, r3
 8019986:	46bd      	mov	sp, r7
 8019988:	b006      	add	sp, #24
 801998a:	bdb0      	pop	{r4, r5, r7, pc}

0801998c <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b086      	sub	sp, #24
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8019994:	2300      	movs	r3, #0
 8019996:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8019998:	2300      	movs	r3, #0
 801999a:	613b      	str	r3, [r7, #16]
 801999c:	e015      	b.n	80199ca <USBD_FrameWork_FindFreeIFNbr+0x3e>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801999e:	2300      	movs	r3, #0
 80199a0:	60fb      	str	r3, [r7, #12]
 80199a2:	e005      	b.n	80199b0 <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	3301      	adds	r3, #1
 80199a8:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	3301      	adds	r3, #1
 80199ae:	60fb      	str	r3, [r7, #12]
 80199b0:	687a      	ldr	r2, [r7, #4]
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	2158      	movs	r1, #88	; 0x58
 80199b6:	434b      	muls	r3, r1
 80199b8:	18d3      	adds	r3, r2, r3
 80199ba:	3354      	adds	r3, #84	; 0x54
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	68fa      	ldr	r2, [r7, #12]
 80199c0:	429a      	cmp	r2, r3
 80199c2:	d3ef      	bcc.n	80199a4 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80199c4:	693b      	ldr	r3, [r7, #16]
 80199c6:	3301      	adds	r3, #1
 80199c8:	613b      	str	r3, [r7, #16]
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	689b      	ldr	r3, [r3, #8]
 80199ce:	693a      	ldr	r2, [r7, #16]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d3e4      	bcc.n	801999e <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	b2db      	uxtb	r3, r3
}
 80199d8:	0018      	movs	r0, r3
 80199da:	46bd      	mov	sp, r7
 80199dc:	b006      	add	sp, #24
 80199de:	bd80      	pop	{r7, pc}

080199e0 <USBD_FrameWork_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b084      	sub	sp, #16
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
 80199e8:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	60fb      	str	r3, [r7, #12]

  ptr->bLength                = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2209      	movs	r2, #9
 80199f2:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType        = USB_DESC_TYPE_CONFIGURATION;
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	2202      	movs	r2, #2
 80199f8:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength      = 0U;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	789a      	ldrb	r2, [r3, #2]
 80199fe:	2100      	movs	r1, #0
 8019a00:	400a      	ands	r2, r1
 8019a02:	709a      	strb	r2, [r3, #2]
 8019a04:	78da      	ldrb	r2, [r3, #3]
 8019a06:	2100      	movs	r1, #0
 8019a08:	400a      	ands	r2, r1
 8019a0a:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces         = 0U;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	2200      	movs	r2, #0
 8019a10:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue    = 1U;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2201      	movs	r2, #1
 8019a16:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration         = USBD_CONFIG_STR_DESC_IDX;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes           = USBD_CONFIG_BMATTRIBUTES;
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	22c0      	movs	r2, #192	; 0xc0
 8019a22:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower              = USBD_CONFIG_MAXPOWER;
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	2219      	movs	r2, #25
 8019a28:	721a      	strb	r2, [r3, #8]
  *pSze                       += sizeof(USBD_ConfigDescTypedef);
 8019a2a:	683b      	ldr	r3, [r7, #0]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	3309      	adds	r3, #9
 8019a30:	001a      	movs	r2, r3
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	601a      	str	r2, [r3, #0]
}
 8019a36:	46c0      	nop			; (mov r8, r8)
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	b004      	add	sp, #16
 8019a3c:	bd80      	pop	{r7, pc}

08019a3e <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8019a3e:	b590      	push	{r4, r7, lr}
 8019a40:	b087      	sub	sp, #28
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	60f8      	str	r0, [r7, #12]
 8019a46:	0008      	movs	r0, r1
 8019a48:	0011      	movs	r1, r2
 8019a4a:	607b      	str	r3, [r7, #4]
 8019a4c:	230b      	movs	r3, #11
 8019a4e:	18fb      	adds	r3, r7, r3
 8019a50:	1c02      	adds	r2, r0, #0
 8019a52:	701a      	strb	r2, [r3, #0]
 8019a54:	230a      	movs	r3, #10
 8019a56:	18fb      	adds	r3, r7, r3
 8019a58:	1c0a      	adds	r2, r1, #0
 8019a5a:	701a      	strb	r2, [r3, #0]
  uint32_t idx = 0U;
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8019a60:	e002      	b.n	8019a68 <USBD_FrameWork_AssignEp+0x2a>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	3301      	adds	r3, #1
 8019a66:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	68fa      	ldr	r2, [r7, #12]
 8019a6e:	2158      	movs	r1, #88	; 0x58
 8019a70:	434b      	muls	r3, r1
 8019a72:	18d3      	adds	r3, r2, r3
 8019a74:	3318      	adds	r3, #24
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	697a      	ldr	r2, [r7, #20]
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	d210      	bcs.n	8019aa0 <USBD_FrameWork_AssignEp+0x62>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	6858      	ldr	r0, [r3, #4]
 8019a82:	68f9      	ldr	r1, [r7, #12]
 8019a84:	697a      	ldr	r2, [r7, #20]
 8019a86:	2420      	movs	r4, #32
 8019a88:	0013      	movs	r3, r2
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	189b      	adds	r3, r3, r2
 8019a8e:	005b      	lsls	r3, r3, #1
 8019a90:	2258      	movs	r2, #88	; 0x58
 8019a92:	4342      	muls	r2, r0
 8019a94:	189b      	adds	r3, r3, r2
 8019a96:	18cb      	adds	r3, r1, r3
 8019a98:	191b      	adds	r3, r3, r4
 8019a9a:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d1e0      	bne.n	8019a62 <USBD_FrameWork_AssignEp+0x24>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	6858      	ldr	r0, [r3, #4]
 8019aa4:	68f9      	ldr	r1, [r7, #12]
 8019aa6:	697a      	ldr	r2, [r7, #20]
 8019aa8:	0013      	movs	r3, r2
 8019aaa:	005b      	lsls	r3, r3, #1
 8019aac:	189b      	adds	r3, r3, r2
 8019aae:	005b      	lsls	r3, r3, #1
 8019ab0:	2258      	movs	r2, #88	; 0x58
 8019ab2:	4342      	muls	r2, r0
 8019ab4:	189b      	adds	r3, r3, r2
 8019ab6:	18cb      	adds	r3, r1, r3
 8019ab8:	331c      	adds	r3, #28
 8019aba:	220b      	movs	r2, #11
 8019abc:	18ba      	adds	r2, r7, r2
 8019abe:	7812      	ldrb	r2, [r2, #0]
 8019ac0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	6858      	ldr	r0, [r3, #4]
 8019ac6:	68f9      	ldr	r1, [r7, #12]
 8019ac8:	697a      	ldr	r2, [r7, #20]
 8019aca:	0013      	movs	r3, r2
 8019acc:	005b      	lsls	r3, r3, #1
 8019ace:	189b      	adds	r3, r3, r2
 8019ad0:	005b      	lsls	r3, r3, #1
 8019ad2:	2258      	movs	r2, #88	; 0x58
 8019ad4:	4342      	muls	r2, r0
 8019ad6:	189b      	adds	r3, r3, r2
 8019ad8:	18cb      	adds	r3, r1, r3
 8019ada:	331d      	adds	r3, #29
 8019adc:	220a      	movs	r2, #10
 8019ade:	18ba      	adds	r2, r7, r2
 8019ae0:	7812      	ldrb	r2, [r2, #0]
 8019ae2:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	6858      	ldr	r0, [r3, #4]
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	b29c      	uxth	r4, r3
 8019aec:	68f9      	ldr	r1, [r7, #12]
 8019aee:	697a      	ldr	r2, [r7, #20]
 8019af0:	0013      	movs	r3, r2
 8019af2:	005b      	lsls	r3, r3, #1
 8019af4:	189b      	adds	r3, r3, r2
 8019af6:	005b      	lsls	r3, r3, #1
 8019af8:	2258      	movs	r2, #88	; 0x58
 8019afa:	4342      	muls	r2, r0
 8019afc:	189b      	adds	r3, r3, r2
 8019afe:	18cb      	adds	r3, r1, r3
 8019b00:	331e      	adds	r3, #30
 8019b02:	1c22      	adds	r2, r4, #0
 8019b04:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	6858      	ldr	r0, [r3, #4]
 8019b0a:	68f9      	ldr	r1, [r7, #12]
 8019b0c:	697a      	ldr	r2, [r7, #20]
 8019b0e:	2420      	movs	r4, #32
 8019b10:	0013      	movs	r3, r2
 8019b12:	005b      	lsls	r3, r3, #1
 8019b14:	189b      	adds	r3, r3, r2
 8019b16:	005b      	lsls	r3, r3, #1
 8019b18:	2258      	movs	r2, #88	; 0x58
 8019b1a:	4342      	muls	r2, r0
 8019b1c:	189b      	adds	r3, r3, r2
 8019b1e:	18cb      	adds	r3, r1, r3
 8019b20:	191b      	adds	r3, r3, r4
 8019b22:	2201      	movs	r2, #1
 8019b24:	701a      	strb	r2, [r3, #0]
}
 8019b26:	46c0      	nop			; (mov r8, r8)
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	b007      	add	sp, #28
 8019b2c:	bd90      	pop	{r4, r7, pc}
	...

08019b30 <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 8019b30:	b590      	push	{r4, r7, lr}
 8019b32:	b085      	sub	sp, #20
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	60f8      	str	r0, [r7, #12]
 8019b38:	60b9      	str	r1, [r7, #8]
 8019b3a:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidMouseDesc;

  /* Append HID Interface descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681a      	ldr	r2, [r3, #0]
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	18d3      	adds	r3, r2, r3
 8019b44:	001a      	movs	r2, r3
 8019b46:	4b9d      	ldr	r3, [pc, #628]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b48:	601a      	str	r2, [r3, #0]
 8019b4a:	4b9c      	ldr	r3, [pc, #624]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	2209      	movs	r2, #9
 8019b50:	701a      	strb	r2, [r3, #0]
 8019b52:	4b9a      	ldr	r3, [pc, #616]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	2204      	movs	r2, #4
 8019b58:	705a      	strb	r2, [r3, #1]
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	685a      	ldr	r2, [r3, #4]
 8019b5e:	4b97      	ldr	r3, [pc, #604]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	68f9      	ldr	r1, [r7, #12]
 8019b64:	2058      	movs	r0, #88	; 0x58
 8019b66:	2458      	movs	r4, #88	; 0x58
 8019b68:	4362      	muls	r2, r4
 8019b6a:	188a      	adds	r2, r1, r2
 8019b6c:	1812      	adds	r2, r2, r0
 8019b6e:	7812      	ldrb	r2, [r2, #0]
 8019b70:	709a      	strb	r2, [r3, #2]
 8019b72:	4b92      	ldr	r3, [pc, #584]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	2200      	movs	r2, #0
 8019b78:	70da      	strb	r2, [r3, #3]
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	685b      	ldr	r3, [r3, #4]
 8019b7e:	68fa      	ldr	r2, [r7, #12]
 8019b80:	2158      	movs	r1, #88	; 0x58
 8019b82:	434b      	muls	r3, r1
 8019b84:	18d3      	adds	r3, r2, r3
 8019b86:	3318      	adds	r3, #24
 8019b88:	681a      	ldr	r2, [r3, #0]
 8019b8a:	4b8c      	ldr	r3, [pc, #560]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	b2d2      	uxtb	r2, r2
 8019b90:	711a      	strb	r2, [r3, #4]
 8019b92:	4b8a      	ldr	r3, [pc, #552]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	2203      	movs	r2, #3
 8019b98:	715a      	strb	r2, [r3, #5]
 8019b9a:	4b88      	ldr	r3, [pc, #544]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	2201      	movs	r2, #1
 8019ba0:	719a      	strb	r2, [r3, #6]
 8019ba2:	4b86      	ldr	r3, [pc, #536]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	2202      	movs	r2, #2
 8019ba8:	71da      	strb	r2, [r3, #7]
 8019baa:	4b84      	ldr	r3, [pc, #528]	; (8019dbc <USBD_FrameWork_HID_Desc+0x28c>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	721a      	strb	r2, [r3, #8]
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	3309      	adds	r3, #9
 8019bb8:	001a      	movs	r2, r3
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	601a      	str	r2, [r3, #0]
                          (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                          0x03U, 0x01U, 0x02U, 0U);

  /* Append HID Functional descriptor to Configuration descriptor */
  pHidMouseDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681a      	ldr	r2, [r3, #0]
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	18d3      	adds	r3, r2, r3
 8019bc6:	001a      	movs	r2, r3
 8019bc8:	4b7d      	ldr	r3, [pc, #500]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019bca:	601a      	str	r2, [r3, #0]
  pHidMouseDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 8019bcc:	4b7c      	ldr	r3, [pc, #496]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	2209      	movs	r2, #9
 8019bd2:	701a      	strb	r2, [r3, #0]
  pHidMouseDesc->bDescriptorType = HID_DESCRIPTOR_TYPE;
 8019bd4:	4b7a      	ldr	r3, [pc, #488]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	2221      	movs	r2, #33	; 0x21
 8019bda:	705a      	strb	r2, [r3, #1]
  pHidMouseDesc->bcdHID = 0x0111U;
 8019bdc:	4b78      	ldr	r3, [pc, #480]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	789a      	ldrb	r2, [r3, #2]
 8019be2:	2100      	movs	r1, #0
 8019be4:	400a      	ands	r2, r1
 8019be6:	1c11      	adds	r1, r2, #0
 8019be8:	2211      	movs	r2, #17
 8019bea:	430a      	orrs	r2, r1
 8019bec:	709a      	strb	r2, [r3, #2]
 8019bee:	78da      	ldrb	r2, [r3, #3]
 8019bf0:	2100      	movs	r1, #0
 8019bf2:	400a      	ands	r2, r1
 8019bf4:	1c11      	adds	r1, r2, #0
 8019bf6:	2201      	movs	r2, #1
 8019bf8:	430a      	orrs	r2, r1
 8019bfa:	70da      	strb	r2, [r3, #3]
  pHidMouseDesc->bCountryCode = 0x00U;
 8019bfc:	4b70      	ldr	r3, [pc, #448]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2200      	movs	r2, #0
 8019c02:	711a      	strb	r2, [r3, #4]
  pHidMouseDesc->bNumDescriptors = 0x01U;
 8019c04:	4b6e      	ldr	r3, [pc, #440]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2201      	movs	r2, #1
 8019c0a:	715a      	strb	r2, [r3, #5]
  pHidMouseDesc->bHIDDescriptorType = 0x22U;
 8019c0c:	4b6c      	ldr	r3, [pc, #432]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	2222      	movs	r2, #34	; 0x22
 8019c12:	719a      	strb	r2, [r3, #6]
  pHidMouseDesc->wItemLength = USBD_HID_MOUSE_REPORT_DESC_SIZE;
 8019c14:	4b6a      	ldr	r3, [pc, #424]	; (8019dc0 <USBD_FrameWork_HID_Desc+0x290>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	3307      	adds	r3, #7
 8019c1a:	781a      	ldrb	r2, [r3, #0]
 8019c1c:	2100      	movs	r1, #0
 8019c1e:	400a      	ands	r2, r1
 8019c20:	1c11      	adds	r1, r2, #0
 8019c22:	224a      	movs	r2, #74	; 0x4a
 8019c24:	430a      	orrs	r2, r1
 8019c26:	701a      	strb	r2, [r3, #0]
 8019c28:	785a      	ldrb	r2, [r3, #1]
 8019c2a:	2100      	movs	r1, #0
 8019c2c:	400a      	ands	r2, r1
 8019c2e:	705a      	strb	r2, [r3, #1]
  *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	3309      	adds	r3, #9
 8019c36:	001a      	movs	r2, r3
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	601a      	str	r2, [r3, #0]

  if (pdev->Speed == USBD_HIGH_SPEED)
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	2b01      	cmp	r3, #1
 8019c42:	d14d      	bne.n	8019ce0 <USBD_FrameWork_HID_Desc+0x1b0>
  {
    /* Append Endpoint descriptor to Configuration descriptor */
    __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681a      	ldr	r2, [r3, #0]
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	18d3      	adds	r3, r2, r3
 8019c4c:	001a      	movs	r2, r3
 8019c4e:	4b5d      	ldr	r3, [pc, #372]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019c50:	601a      	str	r2, [r3, #0]
 8019c52:	4b5c      	ldr	r3, [pc, #368]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	2207      	movs	r2, #7
 8019c58:	701a      	strb	r2, [r3, #0]
 8019c5a:	4b5a      	ldr	r3, [pc, #360]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	2205      	movs	r2, #5
 8019c60:	705a      	strb	r2, [r3, #1]
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	685a      	ldr	r2, [r3, #4]
 8019c66:	4b57      	ldr	r3, [pc, #348]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	68f9      	ldr	r1, [r7, #12]
 8019c6c:	2058      	movs	r0, #88	; 0x58
 8019c6e:	4342      	muls	r2, r0
 8019c70:	188a      	adds	r2, r1, r2
 8019c72:	321c      	adds	r2, #28
 8019c74:	7812      	ldrb	r2, [r2, #0]
 8019c76:	709a      	strb	r2, [r3, #2]
 8019c78:	4b52      	ldr	r3, [pc, #328]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	2203      	movs	r2, #3
 8019c7e:	70da      	strb	r2, [r3, #3]
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	685a      	ldr	r2, [r3, #4]
 8019c84:	4b4f      	ldr	r3, [pc, #316]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	68f9      	ldr	r1, [r7, #12]
 8019c8a:	2058      	movs	r0, #88	; 0x58
 8019c8c:	4342      	muls	r2, r0
 8019c8e:	188a      	adds	r2, r1, r2
 8019c90:	321e      	adds	r2, #30
 8019c92:	8812      	ldrh	r2, [r2, #0]
 8019c94:	21ff      	movs	r1, #255	; 0xff
 8019c96:	4011      	ands	r1, r2
 8019c98:	000c      	movs	r4, r1
 8019c9a:	7919      	ldrb	r1, [r3, #4]
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	4001      	ands	r1, r0
 8019ca0:	1c08      	adds	r0, r1, #0
 8019ca2:	1c21      	adds	r1, r4, #0
 8019ca4:	4301      	orrs	r1, r0
 8019ca6:	7119      	strb	r1, [r3, #4]
 8019ca8:	0a12      	lsrs	r2, r2, #8
 8019caa:	b290      	uxth	r0, r2
 8019cac:	795a      	ldrb	r2, [r3, #5]
 8019cae:	2100      	movs	r1, #0
 8019cb0:	400a      	ands	r2, r1
 8019cb2:	1c11      	adds	r1, r2, #0
 8019cb4:	1c02      	adds	r2, r0, #0
 8019cb6:	430a      	orrs	r2, r1
 8019cb8:	715a      	strb	r2, [r3, #5]
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	781b      	ldrb	r3, [r3, #0]
 8019cbe:	2b01      	cmp	r3, #1
 8019cc0:	d104      	bne.n	8019ccc <USBD_FrameWork_HID_Desc+0x19c>
 8019cc2:	4b40      	ldr	r3, [pc, #256]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	2205      	movs	r2, #5
 8019cc8:	719a      	strb	r2, [r3, #6]
 8019cca:	e003      	b.n	8019cd4 <USBD_FrameWork_HID_Desc+0x1a4>
 8019ccc:	4b3d      	ldr	r3, [pc, #244]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	2205      	movs	r2, #5
 8019cd2:	719a      	strb	r2, [r3, #6]
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	1dda      	adds	r2, r3, #7
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	601a      	str	r2, [r3, #0]
 8019cde:	e04c      	b.n	8019d7a <USBD_FrameWork_HID_Desc+0x24a>
                            USBD_HID_EPIN_HS_BINTERVAL, USBD_HID_EPIN_FS_BINTERVAL);
  }
  else
  {
    /* Append Endpoint descriptor to Configuration descriptor */
    __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	681a      	ldr	r2, [r3, #0]
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	18d3      	adds	r3, r2, r3
 8019ce8:	001a      	movs	r2, r3
 8019cea:	4b36      	ldr	r3, [pc, #216]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019cec:	601a      	str	r2, [r3, #0]
 8019cee:	4b35      	ldr	r3, [pc, #212]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	2207      	movs	r2, #7
 8019cf4:	701a      	strb	r2, [r3, #0]
 8019cf6:	4b33      	ldr	r3, [pc, #204]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	2205      	movs	r2, #5
 8019cfc:	705a      	strb	r2, [r3, #1]
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	685a      	ldr	r2, [r3, #4]
 8019d02:	4b30      	ldr	r3, [pc, #192]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	68f9      	ldr	r1, [r7, #12]
 8019d08:	2058      	movs	r0, #88	; 0x58
 8019d0a:	4342      	muls	r2, r0
 8019d0c:	188a      	adds	r2, r1, r2
 8019d0e:	321c      	adds	r2, #28
 8019d10:	7812      	ldrb	r2, [r2, #0]
 8019d12:	709a      	strb	r2, [r3, #2]
 8019d14:	4b2b      	ldr	r3, [pc, #172]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	2203      	movs	r2, #3
 8019d1a:	70da      	strb	r2, [r3, #3]
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	685a      	ldr	r2, [r3, #4]
 8019d20:	4b28      	ldr	r3, [pc, #160]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	68f9      	ldr	r1, [r7, #12]
 8019d26:	2058      	movs	r0, #88	; 0x58
 8019d28:	4342      	muls	r2, r0
 8019d2a:	188a      	adds	r2, r1, r2
 8019d2c:	321e      	adds	r2, #30
 8019d2e:	8812      	ldrh	r2, [r2, #0]
 8019d30:	21ff      	movs	r1, #255	; 0xff
 8019d32:	4011      	ands	r1, r2
 8019d34:	000c      	movs	r4, r1
 8019d36:	7919      	ldrb	r1, [r3, #4]
 8019d38:	2000      	movs	r0, #0
 8019d3a:	4001      	ands	r1, r0
 8019d3c:	1c08      	adds	r0, r1, #0
 8019d3e:	1c21      	adds	r1, r4, #0
 8019d40:	4301      	orrs	r1, r0
 8019d42:	7119      	strb	r1, [r3, #4]
 8019d44:	0a12      	lsrs	r2, r2, #8
 8019d46:	b290      	uxth	r0, r2
 8019d48:	795a      	ldrb	r2, [r3, #5]
 8019d4a:	2100      	movs	r1, #0
 8019d4c:	400a      	ands	r2, r1
 8019d4e:	1c11      	adds	r1, r2, #0
 8019d50:	1c02      	adds	r2, r0, #0
 8019d52:	430a      	orrs	r2, r1
 8019d54:	715a      	strb	r2, [r3, #5]
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d104      	bne.n	8019d68 <USBD_FrameWork_HID_Desc+0x238>
 8019d5e:	4b19      	ldr	r3, [pc, #100]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	2205      	movs	r2, #5
 8019d64:	719a      	strb	r2, [r3, #6]
 8019d66:	e003      	b.n	8019d70 <USBD_FrameWork_HID_Desc+0x240>
 8019d68:	4b16      	ldr	r3, [pc, #88]	; (8019dc4 <USBD_FrameWork_HID_Desc+0x294>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	2205      	movs	r2, #5
 8019d6e:	719a      	strb	r2, [r3, #6]
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	1dda      	adds	r2, r3, #7
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	601a      	str	r2, [r3, #0]
                            (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                            USBD_HID_EPIN_HS_BINTERVAL, USBD_HID_EPIN_FS_BINTERVAL);
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8019d7a:	68bb      	ldr	r3, [r7, #8]
 8019d7c:	791a      	ldrb	r2, [r3, #4]
 8019d7e:	68bb      	ldr	r3, [r7, #8]
 8019d80:	3201      	adds	r2, #1
 8019d82:	b2d2      	uxtb	r2, r2
 8019d84:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength  = *Sze;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681a      	ldr	r2, [r3, #0]
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	b292      	uxth	r2, r2
 8019d8e:	21ff      	movs	r1, #255	; 0xff
 8019d90:	4011      	ands	r1, r2
 8019d92:	000c      	movs	r4, r1
 8019d94:	7899      	ldrb	r1, [r3, #2]
 8019d96:	2000      	movs	r0, #0
 8019d98:	4001      	ands	r1, r0
 8019d9a:	1c08      	adds	r0, r1, #0
 8019d9c:	1c21      	adds	r1, r4, #0
 8019d9e:	4301      	orrs	r1, r0
 8019da0:	7099      	strb	r1, [r3, #2]
 8019da2:	0a12      	lsrs	r2, r2, #8
 8019da4:	b290      	uxth	r0, r2
 8019da6:	78da      	ldrb	r2, [r3, #3]
 8019da8:	2100      	movs	r1, #0
 8019daa:	400a      	ands	r2, r1
 8019dac:	1c11      	adds	r1, r2, #0
 8019dae:	1c02      	adds	r2, r0, #0
 8019db0:	430a      	orrs	r2, r1
 8019db2:	70da      	strb	r2, [r3, #3]

}
 8019db4:	46c0      	nop			; (mov r8, r8)
 8019db6:	46bd      	mov	sp, r7
 8019db8:	b005      	add	sp, #20
 8019dba:	bd90      	pop	{r4, r7, pc}
 8019dbc:	20011454 	.word	0x20011454
 8019dc0:	20011458 	.word	0x20011458
 8019dc4:	2001145c 	.word	0x2001145c

08019dc8 <app_usbx_device_thread_hid_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
UINT app_usbx_device_thread_hid_callback(UX_SLAVE_CLASS_HID *hid,
                                         UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b082      	sub	sp, #8
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	6039      	str	r1, [r7, #0]
  return 0U;
 8019dd2:	2300      	movs	r3, #0
}
 8019dd4:	0018      	movs	r0, r3
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	b002      	add	sp, #8
 8019dda:	bd80      	pop	{r7, pc}

08019ddc <usbx_hid_thread_entry>:
  * @brief  Function implementing usbx_hid_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_hid_thread_entry(ULONG arg)
{
 8019ddc:	b590      	push	{r4, r7, lr}
 8019dde:	b091      	sub	sp, #68	; 0x44
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
  UX_SLAVE_DEVICE    *device;
  UX_SLAVE_INTERFACE *interface;
  UX_SLAVE_CLASS_HID *hid;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  device = &_ux_system_slave->ux_system_slave_device;
 8019de4:	4b18      	ldr	r3, [pc, #96]	; (8019e48 <usbx_hid_thread_entry+0x6c>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	3320      	adds	r3, #32
 8019dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 8019dec:	2308      	movs	r3, #8
 8019dee:	18fb      	adds	r3, r7, r3
 8019df0:	222c      	movs	r2, #44	; 0x2c
 8019df2:	2100      	movs	r1, #0
 8019df4:	0018      	movs	r0, r3
 8019df6:	f7fd f8e5 	bl	8016fc4 <_ux_utility_memory_set>

  while (1)
  {
    /* Check if the device state already configured */
    if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8019dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	2b03      	cmp	r3, #3
 8019e00:	d11d      	bne.n	8019e3e <usbx_hid_thread_entry+0x62>
    {
      /* Get the interface */
      interface = device->ux_slave_device_first_interface;
 8019e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e04:	22f0      	movs	r2, #240	; 0xf0
 8019e06:	589b      	ldr	r3, [r3, r2]
 8019e08:	63bb      	str	r3, [r7, #56]	; 0x38

      /* Get the instance */
      hid = interface->ux_slave_interface_class_instance;
 8019e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e0c:	689b      	ldr	r3, [r3, #8]
 8019e0e:	637b      	str	r3, [r7, #52]	; 0x34

      /* sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 8019e10:	201e      	movs	r0, #30
 8019e12:	f7f8 fe83 	bl	8012b1c <_tx_thread_sleep>

      /* Check if user button is pressed */
      if (User_Button_State)
 8019e16:	4b0d      	ldr	r3, [pc, #52]	; (8019e4c <usbx_hid_thread_entry+0x70>)
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	b2db      	uxtb	r3, r3
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d0ec      	beq.n	8019dfa <usbx_hid_thread_entry+0x1e>
      {
        /* Get the new position */
        GetPointerData(&hid_event);
 8019e20:	2408      	movs	r4, #8
 8019e22:	193b      	adds	r3, r7, r4
 8019e24:	0018      	movs	r0, r3
 8019e26:	f000 f813 	bl	8019e50 <GetPointerData>

        /* Send an event to the hid */
        ux_device_class_hid_event_set(hid, &hid_event);
 8019e2a:	193a      	adds	r2, r7, r4
 8019e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e2e:	0011      	movs	r1, r2
 8019e30:	0018      	movs	r0, r3
 8019e32:	f7fd fcc9 	bl	80177c8 <_ux_device_class_hid_event_set>

        /* Reset User Button state */
        User_Button_State =0;
 8019e36:	4b05      	ldr	r3, [pc, #20]	; (8019e4c <usbx_hid_thread_entry+0x70>)
 8019e38:	2200      	movs	r2, #0
 8019e3a:	701a      	strb	r2, [r3, #0]
 8019e3c:	e7dd      	b.n	8019dfa <usbx_hid_thread_entry+0x1e>
      }
    }
    else
    {
      /* sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 8019e3e:	201e      	movs	r0, #30
 8019e40:	f7f8 fe6c 	bl	8012b1c <_tx_thread_sleep>
    if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8019e44:	e7d9      	b.n	8019dfa <usbx_hid_thread_entry+0x1e>
 8019e46:	46c0      	nop			; (mov r8, r8)
 8019e48:	20010c9c 	.word	0x20010c9c
 8019e4c:	20011460 	.word	0x20011460

08019e50 <GetPointerData>:
  * @brief  Gets Pointer Data.
  * @param  pbuf: Pointer to report
  * @retval None
  */
static void GetPointerData(UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
  static int8_t cnt = 0;
  static int8_t x = 0, y = 0;

  /* Reset counter */
  if (cnt == 16)
 8019e58:	4b2f      	ldr	r3, [pc, #188]	; (8019f18 <GetPointerData+0xc8>)
 8019e5a:	781b      	ldrb	r3, [r3, #0]
 8019e5c:	b25b      	sxtb	r3, r3
 8019e5e:	2b10      	cmp	r3, #16
 8019e60:	d102      	bne.n	8019e68 <GetPointerData+0x18>
  {
    cnt = 0;
 8019e62:	4b2d      	ldr	r3, [pc, #180]	; (8019f18 <GetPointerData+0xc8>)
 8019e64:	2200      	movs	r2, #0
 8019e66:	701a      	strb	r2, [r3, #0]
  }
  /* Update pointer position x and y */
  if ((cnt >= 0) && (cnt < 4))
 8019e68:	4b2b      	ldr	r3, [pc, #172]	; (8019f18 <GetPointerData+0xc8>)
 8019e6a:	781b      	ldrb	r3, [r3, #0]
 8019e6c:	b25b      	sxtb	r3, r3
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	db0b      	blt.n	8019e8a <GetPointerData+0x3a>
 8019e72:	4b29      	ldr	r3, [pc, #164]	; (8019f18 <GetPointerData+0xc8>)
 8019e74:	781b      	ldrb	r3, [r3, #0]
 8019e76:	b25b      	sxtb	r3, r3
 8019e78:	2b03      	cmp	r3, #3
 8019e7a:	dc06      	bgt.n	8019e8a <GetPointerData+0x3a>
  {
    y=0;
 8019e7c:	4b27      	ldr	r3, [pc, #156]	; (8019f1c <GetPointerData+0xcc>)
 8019e7e:	2200      	movs	r2, #0
 8019e80:	701a      	strb	r2, [r3, #0]
    x = CURSOR_STEP;
 8019e82:	4b27      	ldr	r3, [pc, #156]	; (8019f20 <GetPointerData+0xd0>)
 8019e84:	220a      	movs	r2, #10
 8019e86:	701a      	strb	r2, [r3, #0]
 8019e88:	e027      	b.n	8019eda <GetPointerData+0x8a>
  }
  else if ((cnt >= 4) && (cnt < 8))
 8019e8a:	4b23      	ldr	r3, [pc, #140]	; (8019f18 <GetPointerData+0xc8>)
 8019e8c:	781b      	ldrb	r3, [r3, #0]
 8019e8e:	b25b      	sxtb	r3, r3
 8019e90:	2b03      	cmp	r3, #3
 8019e92:	dd0b      	ble.n	8019eac <GetPointerData+0x5c>
 8019e94:	4b20      	ldr	r3, [pc, #128]	; (8019f18 <GetPointerData+0xc8>)
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	b25b      	sxtb	r3, r3
 8019e9a:	2b07      	cmp	r3, #7
 8019e9c:	dc06      	bgt.n	8019eac <GetPointerData+0x5c>
  {
    x =0;
 8019e9e:	4b20      	ldr	r3, [pc, #128]	; (8019f20 <GetPointerData+0xd0>)
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	701a      	strb	r2, [r3, #0]
    y = CURSOR_STEP;
 8019ea4:	4b1d      	ldr	r3, [pc, #116]	; (8019f1c <GetPointerData+0xcc>)
 8019ea6:	220a      	movs	r2, #10
 8019ea8:	701a      	strb	r2, [r3, #0]
 8019eaa:	e016      	b.n	8019eda <GetPointerData+0x8a>
  }
  else if ((cnt >= 8) && (cnt < 12))
 8019eac:	4b1a      	ldr	r3, [pc, #104]	; (8019f18 <GetPointerData+0xc8>)
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	b25b      	sxtb	r3, r3
 8019eb2:	2b07      	cmp	r3, #7
 8019eb4:	dd0b      	ble.n	8019ece <GetPointerData+0x7e>
 8019eb6:	4b18      	ldr	r3, [pc, #96]	; (8019f18 <GetPointerData+0xc8>)
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	b25b      	sxtb	r3, r3
 8019ebc:	2b0b      	cmp	r3, #11
 8019ebe:	dc06      	bgt.n	8019ece <GetPointerData+0x7e>
  {
    y=0;
 8019ec0:	4b16      	ldr	r3, [pc, #88]	; (8019f1c <GetPointerData+0xcc>)
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	701a      	strb	r2, [r3, #0]
    x = -CURSOR_STEP;
 8019ec6:	4b16      	ldr	r3, [pc, #88]	; (8019f20 <GetPointerData+0xd0>)
 8019ec8:	22f6      	movs	r2, #246	; 0xf6
 8019eca:	701a      	strb	r2, [r3, #0]
 8019ecc:	e005      	b.n	8019eda <GetPointerData+0x8a>
  }
  else
  {
    x=0;
 8019ece:	4b14      	ldr	r3, [pc, #80]	; (8019f20 <GetPointerData+0xd0>)
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	701a      	strb	r2, [r3, #0]
    y = -CURSOR_STEP;
 8019ed4:	4b11      	ldr	r3, [pc, #68]	; (8019f1c <GetPointerData+0xcc>)
 8019ed6:	22f6      	movs	r2, #246	; 0xf6
 8019ed8:	701a      	strb	r2, [r3, #0]
  }
  /* Increment counter */
  cnt++;
 8019eda:	4b0f      	ldr	r3, [pc, #60]	; (8019f18 <GetPointerData+0xc8>)
 8019edc:	781b      	ldrb	r3, [r3, #0]
 8019ede:	b25b      	sxtb	r3, r3
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	b2db      	uxtb	r3, r3
 8019ee6:	b25a      	sxtb	r2, r3
 8019ee8:	4b0b      	ldr	r3, [pc, #44]	; (8019f18 <GetPointerData+0xc8>)
 8019eea:	701a      	strb	r2, [r3, #0]

  /* Mouse event. Length is fixed to . */
  hid_event->ux_device_class_hid_event_length = 3;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	2203      	movs	r2, #3
 8019ef0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set X position. */
  hid_event->ux_device_class_hid_event_buffer[0] = x;
 8019ef2:	4b0b      	ldr	r3, [pc, #44]	; (8019f20 <GetPointerData+0xd0>)
 8019ef4:	781b      	ldrb	r3, [r3, #0]
 8019ef6:	b25b      	sxtb	r3, r3
 8019ef8:	b2da      	uxtb	r2, r3
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	721a      	strb	r2, [r3, #8]

  /* Set Y position. */
  hid_event->ux_device_class_hid_event_buffer[1] = y;
 8019efe:	4b07      	ldr	r3, [pc, #28]	; (8019f1c <GetPointerData+0xcc>)
 8019f00:	781b      	ldrb	r3, [r3, #0]
 8019f02:	b25b      	sxtb	r3, r3
 8019f04:	b2da      	uxtb	r2, r3
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	725a      	strb	r2, [r3, #9]

  hid_event->ux_device_class_hid_event_buffer[2] = 0;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	729a      	strb	r2, [r3, #10]
}
 8019f10:	46c0      	nop			; (mov r8, r8)
 8019f12:	46bd      	mov	sp, r7
 8019f14:	b002      	add	sp, #8
 8019f16:	bd80      	pop	{r7, pc}
 8019f18:	20011461 	.word	0x20011461
 8019f1c:	20011462 	.word	0x20011462
 8019f20:	20011463 	.word	0x20011463

08019f24 <malloc>:
 8019f24:	b510      	push	{r4, lr}
 8019f26:	4b03      	ldr	r3, [pc, #12]	; (8019f34 <malloc+0x10>)
 8019f28:	0001      	movs	r1, r0
 8019f2a:	6818      	ldr	r0, [r3, #0]
 8019f2c:	f000 f826 	bl	8019f7c <_malloc_r>
 8019f30:	bd10      	pop	{r4, pc}
 8019f32:	46c0      	nop			; (mov r8, r8)
 8019f34:	20000148 	.word	0x20000148

08019f38 <sbrk_aligned>:
 8019f38:	b570      	push	{r4, r5, r6, lr}
 8019f3a:	4e0f      	ldr	r6, [pc, #60]	; (8019f78 <sbrk_aligned+0x40>)
 8019f3c:	000d      	movs	r5, r1
 8019f3e:	6831      	ldr	r1, [r6, #0]
 8019f40:	0004      	movs	r4, r0
 8019f42:	2900      	cmp	r1, #0
 8019f44:	d102      	bne.n	8019f4c <sbrk_aligned+0x14>
 8019f46:	f000 f8b3 	bl	801a0b0 <_sbrk_r>
 8019f4a:	6030      	str	r0, [r6, #0]
 8019f4c:	0029      	movs	r1, r5
 8019f4e:	0020      	movs	r0, r4
 8019f50:	f000 f8ae 	bl	801a0b0 <_sbrk_r>
 8019f54:	1c43      	adds	r3, r0, #1
 8019f56:	d00a      	beq.n	8019f6e <sbrk_aligned+0x36>
 8019f58:	2303      	movs	r3, #3
 8019f5a:	1cc5      	adds	r5, r0, #3
 8019f5c:	439d      	bics	r5, r3
 8019f5e:	42a8      	cmp	r0, r5
 8019f60:	d007      	beq.n	8019f72 <sbrk_aligned+0x3a>
 8019f62:	1a29      	subs	r1, r5, r0
 8019f64:	0020      	movs	r0, r4
 8019f66:	f000 f8a3 	bl	801a0b0 <_sbrk_r>
 8019f6a:	3001      	adds	r0, #1
 8019f6c:	d101      	bne.n	8019f72 <sbrk_aligned+0x3a>
 8019f6e:	2501      	movs	r5, #1
 8019f70:	426d      	negs	r5, r5
 8019f72:	0028      	movs	r0, r5
 8019f74:	bd70      	pop	{r4, r5, r6, pc}
 8019f76:	46c0      	nop			; (mov r8, r8)
 8019f78:	20011468 	.word	0x20011468

08019f7c <_malloc_r>:
 8019f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f7e:	2203      	movs	r2, #3
 8019f80:	1ccb      	adds	r3, r1, #3
 8019f82:	4393      	bics	r3, r2
 8019f84:	3308      	adds	r3, #8
 8019f86:	0006      	movs	r6, r0
 8019f88:	001f      	movs	r7, r3
 8019f8a:	2b0c      	cmp	r3, #12
 8019f8c:	d238      	bcs.n	801a000 <_malloc_r+0x84>
 8019f8e:	270c      	movs	r7, #12
 8019f90:	42b9      	cmp	r1, r7
 8019f92:	d837      	bhi.n	801a004 <_malloc_r+0x88>
 8019f94:	0030      	movs	r0, r6
 8019f96:	f000 f873 	bl	801a080 <__malloc_lock>
 8019f9a:	4b38      	ldr	r3, [pc, #224]	; (801a07c <_malloc_r+0x100>)
 8019f9c:	9300      	str	r3, [sp, #0]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	001c      	movs	r4, r3
 8019fa2:	2c00      	cmp	r4, #0
 8019fa4:	d133      	bne.n	801a00e <_malloc_r+0x92>
 8019fa6:	0039      	movs	r1, r7
 8019fa8:	0030      	movs	r0, r6
 8019faa:	f7ff ffc5 	bl	8019f38 <sbrk_aligned>
 8019fae:	0004      	movs	r4, r0
 8019fb0:	1c43      	adds	r3, r0, #1
 8019fb2:	d15e      	bne.n	801a072 <_malloc_r+0xf6>
 8019fb4:	9b00      	ldr	r3, [sp, #0]
 8019fb6:	681c      	ldr	r4, [r3, #0]
 8019fb8:	0025      	movs	r5, r4
 8019fba:	2d00      	cmp	r5, #0
 8019fbc:	d14e      	bne.n	801a05c <_malloc_r+0xe0>
 8019fbe:	2c00      	cmp	r4, #0
 8019fc0:	d051      	beq.n	801a066 <_malloc_r+0xea>
 8019fc2:	6823      	ldr	r3, [r4, #0]
 8019fc4:	0029      	movs	r1, r5
 8019fc6:	18e3      	adds	r3, r4, r3
 8019fc8:	0030      	movs	r0, r6
 8019fca:	9301      	str	r3, [sp, #4]
 8019fcc:	f000 f870 	bl	801a0b0 <_sbrk_r>
 8019fd0:	9b01      	ldr	r3, [sp, #4]
 8019fd2:	4283      	cmp	r3, r0
 8019fd4:	d147      	bne.n	801a066 <_malloc_r+0xea>
 8019fd6:	6823      	ldr	r3, [r4, #0]
 8019fd8:	0030      	movs	r0, r6
 8019fda:	1aff      	subs	r7, r7, r3
 8019fdc:	0039      	movs	r1, r7
 8019fde:	f7ff ffab 	bl	8019f38 <sbrk_aligned>
 8019fe2:	3001      	adds	r0, #1
 8019fe4:	d03f      	beq.n	801a066 <_malloc_r+0xea>
 8019fe6:	6823      	ldr	r3, [r4, #0]
 8019fe8:	19db      	adds	r3, r3, r7
 8019fea:	6023      	str	r3, [r4, #0]
 8019fec:	9b00      	ldr	r3, [sp, #0]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d040      	beq.n	801a076 <_malloc_r+0xfa>
 8019ff4:	685a      	ldr	r2, [r3, #4]
 8019ff6:	42a2      	cmp	r2, r4
 8019ff8:	d133      	bne.n	801a062 <_malloc_r+0xe6>
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	605a      	str	r2, [r3, #4]
 8019ffe:	e014      	b.n	801a02a <_malloc_r+0xae>
 801a000:	2b00      	cmp	r3, #0
 801a002:	dac5      	bge.n	8019f90 <_malloc_r+0x14>
 801a004:	230c      	movs	r3, #12
 801a006:	2500      	movs	r5, #0
 801a008:	6033      	str	r3, [r6, #0]
 801a00a:	0028      	movs	r0, r5
 801a00c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a00e:	6821      	ldr	r1, [r4, #0]
 801a010:	1bc9      	subs	r1, r1, r7
 801a012:	d420      	bmi.n	801a056 <_malloc_r+0xda>
 801a014:	290b      	cmp	r1, #11
 801a016:	d918      	bls.n	801a04a <_malloc_r+0xce>
 801a018:	19e2      	adds	r2, r4, r7
 801a01a:	6027      	str	r7, [r4, #0]
 801a01c:	42a3      	cmp	r3, r4
 801a01e:	d112      	bne.n	801a046 <_malloc_r+0xca>
 801a020:	9b00      	ldr	r3, [sp, #0]
 801a022:	601a      	str	r2, [r3, #0]
 801a024:	6863      	ldr	r3, [r4, #4]
 801a026:	6011      	str	r1, [r2, #0]
 801a028:	6053      	str	r3, [r2, #4]
 801a02a:	0030      	movs	r0, r6
 801a02c:	0025      	movs	r5, r4
 801a02e:	f000 f82f 	bl	801a090 <__malloc_unlock>
 801a032:	2207      	movs	r2, #7
 801a034:	350b      	adds	r5, #11
 801a036:	1d23      	adds	r3, r4, #4
 801a038:	4395      	bics	r5, r2
 801a03a:	1aea      	subs	r2, r5, r3
 801a03c:	429d      	cmp	r5, r3
 801a03e:	d0e4      	beq.n	801a00a <_malloc_r+0x8e>
 801a040:	1b5b      	subs	r3, r3, r5
 801a042:	50a3      	str	r3, [r4, r2]
 801a044:	e7e1      	b.n	801a00a <_malloc_r+0x8e>
 801a046:	605a      	str	r2, [r3, #4]
 801a048:	e7ec      	b.n	801a024 <_malloc_r+0xa8>
 801a04a:	6862      	ldr	r2, [r4, #4]
 801a04c:	42a3      	cmp	r3, r4
 801a04e:	d1d5      	bne.n	8019ffc <_malloc_r+0x80>
 801a050:	9b00      	ldr	r3, [sp, #0]
 801a052:	601a      	str	r2, [r3, #0]
 801a054:	e7e9      	b.n	801a02a <_malloc_r+0xae>
 801a056:	0023      	movs	r3, r4
 801a058:	6864      	ldr	r4, [r4, #4]
 801a05a:	e7a2      	b.n	8019fa2 <_malloc_r+0x26>
 801a05c:	002c      	movs	r4, r5
 801a05e:	686d      	ldr	r5, [r5, #4]
 801a060:	e7ab      	b.n	8019fba <_malloc_r+0x3e>
 801a062:	0013      	movs	r3, r2
 801a064:	e7c4      	b.n	8019ff0 <_malloc_r+0x74>
 801a066:	230c      	movs	r3, #12
 801a068:	0030      	movs	r0, r6
 801a06a:	6033      	str	r3, [r6, #0]
 801a06c:	f000 f810 	bl	801a090 <__malloc_unlock>
 801a070:	e7cb      	b.n	801a00a <_malloc_r+0x8e>
 801a072:	6027      	str	r7, [r4, #0]
 801a074:	e7d9      	b.n	801a02a <_malloc_r+0xae>
 801a076:	605b      	str	r3, [r3, #4]
 801a078:	deff      	udf	#255	; 0xff
 801a07a:	46c0      	nop			; (mov r8, r8)
 801a07c:	20011464 	.word	0x20011464

0801a080 <__malloc_lock>:
 801a080:	b510      	push	{r4, lr}
 801a082:	4802      	ldr	r0, [pc, #8]	; (801a08c <__malloc_lock+0xc>)
 801a084:	f000 f850 	bl	801a128 <__retarget_lock_acquire_recursive>
 801a088:	bd10      	pop	{r4, pc}
 801a08a:	46c0      	nop			; (mov r8, r8)
 801a08c:	200115a8 	.word	0x200115a8

0801a090 <__malloc_unlock>:
 801a090:	b510      	push	{r4, lr}
 801a092:	4802      	ldr	r0, [pc, #8]	; (801a09c <__malloc_unlock+0xc>)
 801a094:	f000 f849 	bl	801a12a <__retarget_lock_release_recursive>
 801a098:	bd10      	pop	{r4, pc}
 801a09a:	46c0      	nop			; (mov r8, r8)
 801a09c:	200115a8 	.word	0x200115a8

0801a0a0 <memset>:
 801a0a0:	0003      	movs	r3, r0
 801a0a2:	1882      	adds	r2, r0, r2
 801a0a4:	4293      	cmp	r3, r2
 801a0a6:	d100      	bne.n	801a0aa <memset+0xa>
 801a0a8:	4770      	bx	lr
 801a0aa:	7019      	strb	r1, [r3, #0]
 801a0ac:	3301      	adds	r3, #1
 801a0ae:	e7f9      	b.n	801a0a4 <memset+0x4>

0801a0b0 <_sbrk_r>:
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	b570      	push	{r4, r5, r6, lr}
 801a0b4:	4d06      	ldr	r5, [pc, #24]	; (801a0d0 <_sbrk_r+0x20>)
 801a0b6:	0004      	movs	r4, r0
 801a0b8:	0008      	movs	r0, r1
 801a0ba:	602b      	str	r3, [r5, #0]
 801a0bc:	f7ec fe4a 	bl	8006d54 <_sbrk>
 801a0c0:	1c43      	adds	r3, r0, #1
 801a0c2:	d103      	bne.n	801a0cc <_sbrk_r+0x1c>
 801a0c4:	682b      	ldr	r3, [r5, #0]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d000      	beq.n	801a0cc <_sbrk_r+0x1c>
 801a0ca:	6023      	str	r3, [r4, #0]
 801a0cc:	bd70      	pop	{r4, r5, r6, pc}
 801a0ce:	46c0      	nop			; (mov r8, r8)
 801a0d0:	200115a4 	.word	0x200115a4

0801a0d4 <__errno>:
 801a0d4:	4b01      	ldr	r3, [pc, #4]	; (801a0dc <__errno+0x8>)
 801a0d6:	6818      	ldr	r0, [r3, #0]
 801a0d8:	4770      	bx	lr
 801a0da:	46c0      	nop			; (mov r8, r8)
 801a0dc:	20000148 	.word	0x20000148

0801a0e0 <__libc_init_array>:
 801a0e0:	b570      	push	{r4, r5, r6, lr}
 801a0e2:	2600      	movs	r6, #0
 801a0e4:	4c0c      	ldr	r4, [pc, #48]	; (801a118 <__libc_init_array+0x38>)
 801a0e6:	4d0d      	ldr	r5, [pc, #52]	; (801a11c <__libc_init_array+0x3c>)
 801a0e8:	1b64      	subs	r4, r4, r5
 801a0ea:	10a4      	asrs	r4, r4, #2
 801a0ec:	42a6      	cmp	r6, r4
 801a0ee:	d109      	bne.n	801a104 <__libc_init_array+0x24>
 801a0f0:	2600      	movs	r6, #0
 801a0f2:	f000 f835 	bl	801a160 <_init>
 801a0f6:	4c0a      	ldr	r4, [pc, #40]	; (801a120 <__libc_init_array+0x40>)
 801a0f8:	4d0a      	ldr	r5, [pc, #40]	; (801a124 <__libc_init_array+0x44>)
 801a0fa:	1b64      	subs	r4, r4, r5
 801a0fc:	10a4      	asrs	r4, r4, #2
 801a0fe:	42a6      	cmp	r6, r4
 801a100:	d105      	bne.n	801a10e <__libc_init_array+0x2e>
 801a102:	bd70      	pop	{r4, r5, r6, pc}
 801a104:	00b3      	lsls	r3, r6, #2
 801a106:	58eb      	ldr	r3, [r5, r3]
 801a108:	4798      	blx	r3
 801a10a:	3601      	adds	r6, #1
 801a10c:	e7ee      	b.n	801a0ec <__libc_init_array+0xc>
 801a10e:	00b3      	lsls	r3, r6, #2
 801a110:	58eb      	ldr	r3, [r5, r3]
 801a112:	4798      	blx	r3
 801a114:	3601      	adds	r6, #1
 801a116:	e7f2      	b.n	801a0fe <__libc_init_array+0x1e>
 801a118:	0801a4f0 	.word	0x0801a4f0
 801a11c:	0801a4f0 	.word	0x0801a4f0
 801a120:	0801a4f4 	.word	0x0801a4f4
 801a124:	0801a4f0 	.word	0x0801a4f0

0801a128 <__retarget_lock_acquire_recursive>:
 801a128:	4770      	bx	lr

0801a12a <__retarget_lock_release_recursive>:
 801a12a:	4770      	bx	lr

0801a12c <__aeabi_memcpy>:
 801a12c:	b510      	push	{r4, lr}
 801a12e:	f000 f80d 	bl	801a14c <memcpy>
 801a132:	bd10      	pop	{r4, pc}

0801a134 <__aeabi_memset>:
 801a134:	000b      	movs	r3, r1
 801a136:	b510      	push	{r4, lr}
 801a138:	0011      	movs	r1, r2
 801a13a:	001a      	movs	r2, r3
 801a13c:	f7ff ffb0 	bl	801a0a0 <memset>
 801a140:	bd10      	pop	{r4, pc}

0801a142 <__aeabi_memclr>:
 801a142:	b510      	push	{r4, lr}
 801a144:	2200      	movs	r2, #0
 801a146:	f7ff fff5 	bl	801a134 <__aeabi_memset>
 801a14a:	bd10      	pop	{r4, pc}

0801a14c <memcpy>:
 801a14c:	2300      	movs	r3, #0
 801a14e:	b510      	push	{r4, lr}
 801a150:	429a      	cmp	r2, r3
 801a152:	d100      	bne.n	801a156 <memcpy+0xa>
 801a154:	bd10      	pop	{r4, pc}
 801a156:	5ccc      	ldrb	r4, [r1, r3]
 801a158:	54c4      	strb	r4, [r0, r3]
 801a15a:	3301      	adds	r3, #1
 801a15c:	e7f8      	b.n	801a150 <memcpy+0x4>
	...

0801a160 <_init>:
 801a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a162:	46c0      	nop			; (mov r8, r8)
 801a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a166:	bc08      	pop	{r3}
 801a168:	469e      	mov	lr, r3
 801a16a:	4770      	bx	lr

0801a16c <_fini>:
 801a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a16e:	46c0      	nop			; (mov r8, r8)
 801a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a172:	bc08      	pop	{r3}
 801a174:	469e      	mov	lr, r3
 801a176:	4770      	bx	lr
