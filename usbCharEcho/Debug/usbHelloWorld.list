
usbHelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c98  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f44  08009f44  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f4c  08009f4c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f4c  08009f4c  00019f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001abc  20000100  0800a054  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bbc  0800a054  00021bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001550c  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391e  00000000  00000000  00035677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00038f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5a  00000000  00000000  00039fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f215  00000000  00000000  0003ac32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015063  00000000  00000000  00059e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bac3e  00000000  00000000  0006eeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003904  00000000  00000000  00129ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009d3c 	.word	0x08009d3c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	08009d3c 	.word	0x08009d3c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b7f      	cmp	r3, #127	; 0x7f
 800062e:	d809      	bhi.n	8000644 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	231f      	movs	r3, #31
 8000638:	401a      	ands	r2, r3
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <__NVIC_EnableIRQ+0x30>)
 800063c:	2101      	movs	r1, #1
 800063e:	4091      	lsls	r1, r2
 8000640:	000a      	movs	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	0002      	movs	r2, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b7f      	cmp	r3, #127	; 0x7f
 8000664:	d828      	bhi.n	80006b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000666:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <__NVIC_SetPriority+0xd4>)
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	33c0      	adds	r3, #192	; 0xc0
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	589b      	ldr	r3, [r3, r2]
 8000676:	1dfa      	adds	r2, r7, #7
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	0011      	movs	r1, r2
 800067c:	2203      	movs	r2, #3
 800067e:	400a      	ands	r2, r1
 8000680:	00d2      	lsls	r2, r2, #3
 8000682:	21ff      	movs	r1, #255	; 0xff
 8000684:	4091      	lsls	r1, r2
 8000686:	000a      	movs	r2, r1
 8000688:	43d2      	mvns	r2, r2
 800068a:	401a      	ands	r2, r3
 800068c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	22ff      	movs	r2, #255	; 0xff
 8000694:	401a      	ands	r2, r3
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	0018      	movs	r0, r3
 800069c:	2303      	movs	r3, #3
 800069e:	4003      	ands	r3, r0
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a4:	481f      	ldr	r0, [pc, #124]	; (8000724 <__NVIC_SetPriority+0xd4>)
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	089b      	lsrs	r3, r3, #2
 80006ae:	430a      	orrs	r2, r1
 80006b0:	33c0      	adds	r3, #192	; 0xc0
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006b6:	e031      	b.n	800071c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <__NVIC_SetPriority+0xd8>)
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	0019      	movs	r1, r3
 80006c0:	230f      	movs	r3, #15
 80006c2:	400b      	ands	r3, r1
 80006c4:	3b08      	subs	r3, #8
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	3306      	adds	r3, #6
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	18d3      	adds	r3, r2, r3
 80006ce:	3304      	adds	r3, #4
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1dfa      	adds	r2, r7, #7
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	0011      	movs	r1, r2
 80006d8:	2203      	movs	r2, #3
 80006da:	400a      	ands	r2, r1
 80006dc:	00d2      	lsls	r2, r2, #3
 80006de:	21ff      	movs	r1, #255	; 0xff
 80006e0:	4091      	lsls	r1, r2
 80006e2:	000a      	movs	r2, r1
 80006e4:	43d2      	mvns	r2, r2
 80006e6:	401a      	ands	r2, r3
 80006e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	401a      	ands	r2, r3
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0018      	movs	r0, r3
 80006f8:	2303      	movs	r3, #3
 80006fa:	4003      	ands	r3, r0
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <__NVIC_SetPriority+0xd8>)
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	001c      	movs	r4, r3
 8000708:	230f      	movs	r3, #15
 800070a:	4023      	ands	r3, r4
 800070c:	3b08      	subs	r3, #8
 800070e:	089b      	lsrs	r3, r3, #2
 8000710:	430a      	orrs	r2, r1
 8000712:	3306      	adds	r3, #6
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	18c3      	adds	r3, r0, r3
 8000718:	3304      	adds	r3, #4
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b003      	add	sp, #12
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <LL_APB1_GRP1_EnableClock+0x28>)
 8000736:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LL_APB1_GRP1_EnableClock+0x28>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	430a      	orrs	r2, r1
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <LL_APB1_GRP1_EnableClock+0x28>)
 8000742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <LL_IOP_GRP1_EnableClock+0x28>)
 8000762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <LL_IOP_GRP1_EnableClock+0x28>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	430a      	orrs	r2, r1
 800076a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <LL_IOP_GRP1_EnableClock+0x28>)
 800076e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fa43 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f819 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f905 	bl	80009a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000796:	f000 f8b5 	bl	8000904 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 800079a:	f008 fcd9 	bl	8009150 <MX_USB_Device_Init>
  MX_UCPD2_Init();
 800079e:	f000 f873 	bl	8000888 <MX_UCPD2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t HWbuffer[] = "Hello, World!\r\n";
 80007a2:	003b      	movs	r3, r7
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <main+0x3c>)
 80007a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a8:	c313      	stmia	r3!, {r0, r1, r4}
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	601a      	str	r2, [r3, #0]
  CDC_Transmit_FS(HWbuffer, sizeof(HWbuffer));
 80007ae:	003b      	movs	r3, r7
 80007b0:	2110      	movs	r1, #16
 80007b2:	0018      	movs	r0, r3
 80007b4:	f008 fd56 	bl	8009264 <CDC_Transmit_FS>
	  //HAL_Delay(1000);

    /* USER CODE BEGIN 3 */
	  //CDC_Receive_FS(Rxbuffer, sizeof(RxBuffer));
	  //CDC_Transmit_FS(RxBuffer, sizeof(RxBuffer));
	  HAL_Delay(10);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f000 fab1 	bl	8000d20 <HAL_Delay>
 80007be:	e7fb      	b.n	80007b8 <main+0x34>
 80007c0:	08009d54 	.word	0x08009d54

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b095      	sub	sp, #84	; 0x54
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	2414      	movs	r4, #20
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	233c      	movs	r3, #60	; 0x3c
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f009 fa85 	bl	8009ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0018      	movs	r0, r3
 80007de:	2310      	movs	r3, #16
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f009 fa7e 	bl	8009ce4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 fb7d 	bl	8002eec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2222      	movs	r2, #34	; 0x22
 80007f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	03d2      	lsls	r2, r2, #15
 8000806:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2202      	movs	r2, #2
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2209      	movs	r2, #9
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0292      	lsls	r2, r2, #10
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0492      	lsls	r2, r2, #18
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	05d2      	lsls	r2, r2, #23
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	187b      	adds	r3, r7, r1
 8000848:	0018      	movs	r0, r3
 800084a:	f002 fb9b 	bl	8002f84 <HAL_RCC_OscConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000852:	f000 f901 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2202      	movs	r2, #2
 8000860:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2101      	movs	r1, #1
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fee6 	bl	8003644 <HAL_RCC_ClockConfig>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800087c:	f000 f8ec 	bl	8000a58 <Error_Handler>
  }
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b015      	add	sp, #84	; 0x54
 8000886:	bd90      	pop	{r4, r7, pc}

08000888 <MX_UCPD2_Init>:
  * @brief UCPD2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	003b      	movs	r3, r7
 8000890:	0018      	movs	r0, r3
 8000892:	2318      	movs	r3, #24
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f009 fa24 	bl	8009ce4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	04db      	lsls	r3, r3, #19
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff ff43 	bl	800072c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80008a6:	2008      	movs	r0, #8
 80008a8:	f7ff ff56 	bl	8000758 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008b2:	003b      	movs	r3, r7
 80008b4:	2203      	movs	r2, #3
 80008b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b8:	003b      	movs	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008be:	003b      	movs	r3, r7
 80008c0:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <MX_UCPD2_Init+0x78>)
 80008c2:	0019      	movs	r1, r3
 80008c4:	0010      	movs	r0, r2
 80008c6:	f004 f9ec 	bl	8004ca2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2204      	movs	r2, #4
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2203      	movs	r2, #3
 80008d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d6:	003b      	movs	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	003b      	movs	r3, r7
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <MX_UCPD2_Init+0x78>)
 80008e0:	0019      	movs	r1, r3
 80008e2:	0010      	movs	r0, r2
 80008e4:	f004 f9dd 	bl	8004ca2 <LL_GPIO_Init>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2008      	movs	r0, #8
 80008ec:	f7ff feb0 	bl	8000650 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80008f0:	2008      	movs	r0, #8
 80008f2:	f7ff fe93 	bl	800061c <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b006      	add	sp, #24
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	50000c00 	.word	0x50000c00

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <MX_USART2_UART_Init+0x98>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000910:	22e1      	movs	r2, #225	; 0xe1
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fa5e 	bl	8003e10 <HAL_UART_Init>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f87e 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f004 f805 	bl	8004970 <HAL_UARTEx_SetTxFifoThreshold>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f875 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f004 f83c 	bl	80049f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f86c 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000982:	0018      	movs	r0, r3
 8000984:	f003 ffba 	bl	80048fc <HAL_UARTEx_DisableFifoMode>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f864 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	2000011c 	.word	0x2000011c
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08b      	sub	sp, #44	; 0x2c
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	2414      	movs	r4, #20
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2314      	movs	r3, #20
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f009 f997 	bl	8009ce4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009bc:	2104      	movs	r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	2204      	movs	r2, #4
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009d4:	2120      	movs	r1, #32
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	2220      	movs	r2, #32
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_GPIO_Init+0xb4>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_GPIO_Init+0xb4>)
 8000a04:	2108      	movs	r1, #8
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_GPIO_Init+0xb4>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2208      	movs	r2, #8
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fbec 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2220      	movs	r2, #32
 8000a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	187a      	adds	r2, r7, r1
 8000a40:	23a0      	movs	r3, #160	; 0xa0
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	0011      	movs	r1, r2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fa6c 	bl	8000f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00b      	add	sp, #44	; 0x2c
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40021000 	.word	0x40021000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0549      	lsls	r1, r1, #21
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	055b      	lsls	r3, r3, #21
 8000a98:	4013      	ands	r3, r2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b09d      	sub	sp, #116	; 0x74
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	235c      	movs	r3, #92	; 0x5c
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2314      	movs	r3, #20
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f009 f910 	bl	8009ce4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	2410      	movs	r4, #16
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	234c      	movs	r3, #76	; 0x4c
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f009 f908 	bl	8009ce4 <memset>
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <HAL_UART_MspInit+0xb8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d13e      	bne.n	8000b5c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 ff53 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000af6:	f7ff ffaf 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_UART_MspInit+0xbc>)
 8000afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b2e:	215c      	movs	r1, #92	; 0x5c
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2202      	movs	r2, #2
 8000b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	187a      	adds	r2, r7, r1
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f9e4 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b01d      	add	sp, #116	; 0x74
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8aa 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <USB_UCPD1_2_IRQHandler+0x14>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fcee 	bl	8001584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20001694 	.word	0x20001694

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc4:	f7ff fff6 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bee:	f009 f881 	bl	8009cf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bf2:	f7ff fdc7 	bl	8000784 <main>

08000bf6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000c04:	08009f54 	.word	0x08009f54
  ldr r2, =_sbss
 8000c08:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000c0c:	20001bbc 	.word	0x20001bbc

08000c10 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_COMP_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x3c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Init+0x3c>)
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	0049      	lsls	r1, r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f810 	bl	8000c54 <HAL_InitTick>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e001      	b.n	8000c44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff ff10 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_InitTick+0x88>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d02b      	beq.n	8000cc4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_InitTick+0x8c>)
 8000c6e:	681c      	ldr	r4, [r3, #0]
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_InitTick+0x88>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	0019      	movs	r1, r3
 8000c76:	23fa      	movs	r3, #250	; 0xfa
 8000c78:	0098      	lsls	r0, r3, #2
 8000c7a:	f7ff fa43 	bl	8000104 <__udivsi3>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	0019      	movs	r1, r3
 8000c82:	0020      	movs	r0, r4
 8000c84:	f7ff fa3e 	bl	8000104 <__udivsi3>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f93d 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d112      	bne.n	8000cba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d80a      	bhi.n	8000cb0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	425b      	negs	r3, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f90c 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_InitTick+0x90>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e00d      	b.n	8000ccc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e008      	b.n	8000ccc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e003      	b.n	8000ccc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b005      	add	sp, #20
 8000cd8:	bd90      	pop	{r4, r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	18d2      	adds	r2, r2, r3
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200001b0 	.word	0x200001b0

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	200001b0 	.word	0x200001b0

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff fff0 	bl	8000d0c <HAL_GetTick>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3301      	adds	r3, #1
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001a      	movs	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	189b      	adds	r3, r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	f7ff ffe0 	bl	8000d0c <HAL_GetTick>
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_EnableIRQ>:
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7a:	d809      	bhi.n	8000d90 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	001a      	movs	r2, r3
 8000d82:	231f      	movs	r3, #31
 8000d84:	401a      	ands	r2, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_EnableIRQ+0x30>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4091      	lsls	r1, r2
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b7f      	cmp	r3, #127	; 0x7f
 8000db0:	d828      	bhi.n	8000e04 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	33c0      	adds	r3, #192	; 0xc0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	589b      	ldr	r3, [r3, r2]
 8000dc2:	1dfa      	adds	r2, r7, #7
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	2203      	movs	r2, #3
 8000dca:	400a      	ands	r2, r1
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	401a      	ands	r2, r3
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	2303      	movs	r3, #3
 8000dea:	4003      	ands	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	501a      	str	r2, [r3, r0]
}
 8000e02:	e031      	b.n	8000e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	400b      	ands	r3, r1
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3306      	adds	r3, #6
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	0011      	movs	r1, r2
 8000e24:	2203      	movs	r2, #3
 8000e26:	400a      	ands	r2, r1
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	21ff      	movs	r1, #255	; 0xff
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	22ff      	movs	r2, #255	; 0xff
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	4003      	ands	r3, r0
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001c      	movs	r4, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	4023      	ands	r3, r4
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	3306      	adds	r3, #6
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	18c3      	adds	r3, r0, r3
 8000e64:	3304      	adds	r3, #4
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	045b      	lsls	r3, r3, #17
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d301      	bcc.n	8000e90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e010      	b.n	8000eb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <SysTick_Config+0x44>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff7c 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x44>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x44>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ff33 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ffaf 	bl	8000e78 <SysTick_Config>
 8000f1a:	0003      	movs	r3, r0
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e14d      	b.n	80011d0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	000a      	movs	r2, r1
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <HAL_GPIO_Init+0x28>
 8000f4a:	e13e      	b.n	80011ca <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d005      	beq.n	8000f64 <HAL_GPIO_Init+0x40>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d130      	bne.n	8000fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	43da      	mvns	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d017      	beq.n	8001002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2203      	movs	r2, #3
 8001008:	4013      	ands	r3, r2
 800100a:	2b02      	cmp	r3, #2
 800100c:	d123      	bne.n	8001056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	58d3      	ldr	r3, [r2, r3]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2207      	movs	r2, #7
 8001020:	4013      	ands	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	691a      	ldr	r2, [r3, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2107      	movs	r1, #7
 800103a:	400b      	ands	r3, r1
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	6939      	ldr	r1, [r7, #16]
 8001054:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	401a      	ands	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	23c0      	movs	r3, #192	; 0xc0
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_GPIO_Init+0x174>
 8001096:	e098      	b.n	80011ca <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001098:	4a53      	ldr	r2, [pc, #332]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3318      	adds	r3, #24
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	589b      	ldr	r3, [r3, r2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	220f      	movs	r2, #15
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	43da      	mvns	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x1d6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a48      	ldr	r2, [pc, #288]	; (80011ec <HAL_GPIO_Init+0x2c8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x1d2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_GPIO_Init+0x2cc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x1ce>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x1ca>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <HAL_GPIO_Init+0x2d4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x1c6>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x1d8>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x1d8>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x1d8>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x1d8>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x1d8>
 80010fa:	2300      	movs	r3, #0
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	2103      	movs	r1, #3
 8001100:	400a      	ands	r2, r1
 8001102:	00d2      	lsls	r2, r2, #3
 8001104:	4093      	lsls	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800110c:	4936      	ldr	r1, [pc, #216]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3318      	adds	r3, #24
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	035b      	lsls	r3, r3, #13
 8001132:	4013      	ands	r3, r2
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	039b      	lsls	r3, r3, #14
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 8001170:	2384      	movs	r3, #132	; 0x84
 8001172:	58d3      	ldr	r3, [r2, r3]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43da      	mvns	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001194:	4914      	ldr	r1, [pc, #80]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 8001196:	2284      	movs	r2, #132	; 0x84
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	58d3      	ldr	r3, [r2, r3]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c2:	4909      	ldr	r1, [pc, #36]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	40da      	lsrs	r2, r3
 80011d8:	1e13      	subs	r3, r2, #0
 80011da:	d000      	beq.n	80011de <HAL_GPIO_Init+0x2ba>
 80011dc:	e6aa      	b.n	8000f34 <HAL_GPIO_Init+0x10>
  }
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b006      	add	sp, #24
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021800 	.word	0x40021800
 80011ec:	50000400 	.word	0x50000400
 80011f0:	50000800 	.word	0x50000800
 80011f4:	50000c00 	.word	0x50000c00
 80011f8:	50001000 	.word	0x50001000

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	0008      	movs	r0, r1
 8001206:	0011      	movs	r1, r2
 8001208:	1cbb      	adds	r3, r7, #2
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	1c7b      	adds	r3, r7, #1
 8001210:	1c0a      	adds	r2, r1, #0
 8001212:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001214:	1c7b      	adds	r3, r7, #1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121c:	1cbb      	adds	r3, r7, #2
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	000a      	movs	r2, r1
 8001242:	1cbb      	adds	r3, r7, #2
 8001244:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8001246:	230a      	movs	r3, #10
 8001248:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800124a:	e002      	b.n	8001252 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3b01      	subs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f9      	bne.n	800124c <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4a06      	ldr	r2, [pc, #24]	; (8001278 <PCD_GET_EP_RX_CNT+0x40>)
 8001260:	4694      	mov	ip, r2
 8001262:	4463      	add	r3, ip
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	b29b      	uxth	r3, r3
 800126a:	059b      	lsls	r3, r3, #22
 800126c:	0d9b      	lsrs	r3, r3, #22
 800126e:	b29b      	uxth	r3, r3
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40009800 	.word	0x40009800

0800127c <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	000a      	movs	r2, r1
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800128a:	230a      	movs	r3, #10
 800128c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800128e:	e002      	b.n	8001296 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3b01      	subs	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f9      	bne.n	8001290 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800129c:	1cbb      	adds	r3, r7, #2
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <PCD_GET_EP_DBUF0_CNT+0x40>)
 80012a4:	4694      	mov	ip, r2
 80012a6:	4463      	add	r3, ip
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	059b      	lsls	r3, r3, #22
 80012b0:	0d9b      	lsrs	r3, r3, #22
 80012b2:	b29b      	uxth	r3, r3
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b004      	add	sp, #16
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40009800 	.word	0x40009800

080012c0 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	000a      	movs	r2, r1
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80012ce:	230a      	movs	r3, #10
 80012d0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80012d2:	e002      	b.n	80012da <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f9      	bne.n	80012d4 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <PCD_GET_EP_DBUF1_CNT+0x40>)
 80012e8:	4694      	mov	ip, r2
 80012ea:	4463      	add	r3, ip
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	059b      	lsls	r3, r3, #22
 80012f4:	0d9b      	lsrs	r3, r3, #22
 80012f6:	b29b      	uxth	r3, r3
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40009800 	.word	0x40009800

08001304 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b08f      	sub	sp, #60	; 0x3c
 8001308:	af0a      	add	r7, sp, #40	; 0x28
 800130a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e10a      	b.n	800152c <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a86      	ldr	r2, [pc, #536]	; (8001534 <HAL_PCD_Init+0x230>)
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d108      	bne.n	8001334 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	23af      	movs	r3, #175	; 0xaf
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	2100      	movs	r1, #0
 800132a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	0018      	movs	r0, r3
 8001330:	f008 f908 	bl	8009544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a7f      	ldr	r2, [pc, #508]	; (8001534 <HAL_PCD_Init+0x230>)
 8001338:	2103      	movs	r1, #3
 800133a:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	f003 fd1a 	bl	8004d80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e05b      	b.n	800140e <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001356:	240f      	movs	r4, #15
 8001358:	193b      	adds	r3, r7, r4
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	203d      	movs	r0, #61	; 0x3d
 8001360:	0013      	movs	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	189b      	adds	r3, r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	18cb      	adds	r3, r1, r3
 800136a:	181b      	adds	r3, r3, r0
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	203c      	movs	r0, #60	; 0x3c
 8001378:	0013      	movs	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	189b      	adds	r3, r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	18cb      	adds	r3, r1, r3
 8001382:	181b      	adds	r3, r3, r0
 8001384:	193a      	adds	r2, r7, r4
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800138a:	0025      	movs	r5, r4
 800138c:	193b      	adds	r3, r7, r4
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	197b      	adds	r3, r7, r5
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b29c      	uxth	r4, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	2048      	movs	r0, #72	; 0x48
 800139a:	0013      	movs	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	189b      	adds	r3, r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	18cb      	adds	r3, r1, r3
 80013a4:	181b      	adds	r3, r3, r0
 80013a6:	1c22      	adds	r2, r4, #0
 80013a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013aa:	197b      	adds	r3, r7, r5
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	203f      	movs	r0, #63	; 0x3f
 80013b2:	0013      	movs	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	18cb      	adds	r3, r1, r3
 80013bc:	181b      	adds	r3, r3, r0
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	0013      	movs	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	189b      	adds	r3, r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	18cb      	adds	r3, r1, r3
 80013d2:	334c      	adds	r3, #76	; 0x4c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d8:	197b      	adds	r3, r7, r5
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	0013      	movs	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	189b      	adds	r3, r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	18cb      	adds	r3, r1, r3
 80013e8:	3350      	adds	r3, #80	; 0x50
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	0013      	movs	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	189b      	adds	r3, r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	18cb      	adds	r3, r1, r3
 80013fe:	3354      	adds	r3, #84	; 0x54
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001404:	197b      	adds	r3, r7, r5
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	197b      	adds	r3, r7, r5
 800140a:	3201      	adds	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	210f      	movs	r1, #15
 8001410:	187b      	adds	r3, r7, r1
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d39c      	bcc.n	8001356 <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	e056      	b.n	80014d2 <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001424:	240f      	movs	r4, #15
 8001426:	193b      	adds	r3, r7, r4
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	237e      	movs	r3, #126	; 0x7e
 800142e:	33ff      	adds	r3, #255	; 0xff
 8001430:	0019      	movs	r1, r3
 8001432:	0013      	movs	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	189b      	adds	r3, r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	18c3      	adds	r3, r0, r3
 800143c:	185b      	adds	r3, r3, r1
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001442:	193b      	adds	r3, r7, r4
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	23be      	movs	r3, #190	; 0xbe
 800144a:	0059      	lsls	r1, r3, #1
 800144c:	0013      	movs	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	189b      	adds	r3, r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	18c3      	adds	r3, r0, r3
 8001456:	185b      	adds	r3, r3, r1
 8001458:	193a      	adds	r2, r7, r4
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800145e:	193b      	adds	r3, r7, r4
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	33ff      	adds	r3, #255	; 0xff
 8001468:	0019      	movs	r1, r3
 800146a:	0013      	movs	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	189b      	adds	r3, r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	18c3      	adds	r3, r0, r3
 8001474:	185b      	adds	r3, r3, r1
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	23c6      	movs	r3, #198	; 0xc6
 8001482:	0059      	lsls	r1, r3, #1
 8001484:	0013      	movs	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	189b      	adds	r3, r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	18c3      	adds	r3, r0, r3
 800148e:	185b      	adds	r3, r3, r1
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	23c8      	movs	r3, #200	; 0xc8
 800149c:	0059      	lsls	r1, r3, #1
 800149e:	0013      	movs	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	189b      	adds	r3, r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	18c3      	adds	r3, r0, r3
 80014a8:	185b      	adds	r3, r3, r1
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	23ca      	movs	r3, #202	; 0xca
 80014b6:	0059      	lsls	r1, r3, #1
 80014b8:	0013      	movs	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	18c3      	adds	r3, r0, r3
 80014c2:	185b      	adds	r3, r3, r1
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	3201      	adds	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	230f      	movs	r3, #15
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3a1      	bcc.n	8001424 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	466b      	mov	r3, sp
 80014e8:	001a      	movs	r2, r3
 80014ea:	0003      	movs	r3, r0
 80014ec:	3310      	adds	r3, #16
 80014ee:	cb62      	ldmia	r3!, {r1, r5, r6}
 80014f0:	c262      	stmia	r2!, {r1, r5, r6}
 80014f2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80014f4:	c262      	stmia	r2!, {r1, r5, r6}
 80014f6:	cb62      	ldmia	r3!, {r1, r5, r6}
 80014f8:	c262      	stmia	r2!, {r1, r5, r6}
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	6841      	ldr	r1, [r0, #4]
 8001500:	6882      	ldr	r2, [r0, #8]
 8001502:	68c3      	ldr	r3, [r0, #12]
 8001504:	0020      	movs	r0, r4
 8001506:	f003 fc6d 	bl	8004de4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2238      	movs	r2, #56	; 0x38
 800150e:	2100      	movs	r1, #0
 8001510:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_PCD_Init+0x230>)
 8001516:	2101      	movs	r1, #1
 8001518:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	2b01      	cmp	r3, #1
 8001520:	d103      	bne.n	800152a <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f001 fcb1 	bl	8002e8c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b005      	add	sp, #20
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001534:	000002bd 	.word	0x000002bd

08001538 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	23af      	movs	r3, #175	; 0xaf
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_PCD_Start+0x18>
 800154c:	2302      	movs	r3, #2
 800154e:	e014      	b.n	800157a <HAL_PCD_Start+0x42>
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	23af      	movs	r3, #175	; 0xaf
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	2101      	movs	r1, #1
 8001558:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0018      	movs	r0, r3
 8001560:	f003 fbfa 	bl	8004d58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f005 faca 	bl	8006b02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	23af      	movs	r3, #175	; 0xaf
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	2100      	movs	r1, #0
 8001576:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f005 fac6 	bl	8006b22 <USB_ReadInterrupts>
 8001596:	0003      	movs	r3, r0
 8001598:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800159a:	4a7c      	ldr	r2, [pc, #496]	; (800178c <HAL_PCD_IRQHandler+0x208>)
 800159c:	23a0      	movs	r3, #160	; 0xa0
 800159e:	58d3      	ldr	r3, [r2, r3]
 80015a0:	2204      	movs	r2, #4
 80015a2:	4013      	ands	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x24>
 80015a6:	e0ed      	b.n	8001784 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	4013      	ands	r3, r2
 80015b0:	d004      	beq.n	80015bc <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 fb59 	bl	8001c6c <PCD_EP_ISR_Handler>

    return;
 80015ba:	e0e4      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4013      	ands	r3, r2
 80015c4:	d011      	beq.n	80015ea <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	496f      	ldr	r1, [pc, #444]	; (8001790 <HAL_PCD_IRQHandler+0x20c>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0018      	movs	r0, r3
 80015da:	f008 f876 	bl	80096ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2100      	movs	r1, #0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f8e4 	bl	80017b0 <HAL_PCD_SetAddress>

    return;
 80015e8:	e0cd      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	01db      	lsls	r3, r3, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	d008      	beq.n	8001606 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4965      	ldr	r1, [pc, #404]	; (8001794 <HAL_PCD_IRQHandler+0x210>)
 8001600:	400a      	ands	r2, r1
 8001602:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001604:	e0bf      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	019b      	lsls	r3, r3, #6
 800160c:	4013      	ands	r3, r2
 800160e:	d008      	beq.n	8001622 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	495f      	ldr	r1, [pc, #380]	; (8001798 <HAL_PCD_IRQHandler+0x214>)
 800161c:	400a      	ands	r2, r1
 800161e:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001620:	e0b1      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	4013      	ands	r3, r2
 800162a:	d02c      	beq.n	8001686 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2108      	movs	r1, #8
 8001648:	438a      	bics	r2, r1
 800164a:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	23bd      	movs	r3, #189	; 0xbd
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d109      	bne.n	800166c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	23bd      	movs	r3, #189	; 0xbd
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	2100      	movs	r1, #0
 8001660:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2100      	movs	r1, #0
 8001666:	0018      	movs	r0, r3
 8001668:	f008 fab0 	bl	8009bcc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	0018      	movs	r0, r3
 8001670:	f008 f86c 	bl	800974c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4947      	ldr	r1, [pc, #284]	; (800179c <HAL_PCD_IRQHandler+0x218>)
 8001680:	400a      	ands	r2, r1
 8001682:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001684:	e07f      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d01c      	beq.n	80016ca <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2108      	movs	r1, #8
 800169c:	430a      	orrs	r2, r1
 800169e:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	493d      	ldr	r1, [pc, #244]	; (80017a0 <HAL_PCD_IRQHandler+0x21c>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2104      	movs	r1, #4
 80016bc:	430a      	orrs	r2, r1
 80016be:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f008 f826 	bl	8009714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016c8:	e05d      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	4013      	ands	r3, r2
 80016d0:	d038      	beq.n	8001744 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4931      	ldr	r1, [pc, #196]	; (80017a4 <HAL_PCD_IRQHandler+0x220>)
 80016de:	400a      	ands	r2, r1
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	23bd      	movs	r3, #189	; 0xbd
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d125      	bne.n	800173a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2104      	movs	r1, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2108      	movs	r1, #8
 800170a:	430a      	orrs	r2, r1
 800170c:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	23bd      	movs	r3, #189	; 0xbd
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	2101      	movs	r1, #1
 8001716:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	223c      	movs	r2, #60	; 0x3c
 8001722:	4013      	ands	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	23be      	movs	r3, #190	; 0xbe
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2101      	movs	r1, #1
 8001732:	0018      	movs	r0, r3
 8001734:	f008 fa4a 	bl	8009bcc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001738:	e025      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0018      	movs	r0, r3
 800173e:	f007 ffe9 	bl	8009714 <HAL_PCD_SuspendCallback>
    return;
 8001742:	e020      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d00c      	beq.n	8001768 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4913      	ldr	r1, [pc, #76]	; (80017a8 <HAL_PCD_IRQHandler+0x224>)
 800175a:	400a      	ands	r2, r1
 800175c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f007 ffa3 	bl	80096ac <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001766:	e00e      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4013      	ands	r3, r2
 8001770:	d009      	beq.n	8001786 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	490b      	ldr	r1, [pc, #44]	; (80017ac <HAL_PCD_IRQHandler+0x228>)
 800177e:	400a      	ands	r2, r1
 8001780:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001782:	e000      	b.n	8001786 <HAL_PCD_IRQHandler+0x202>
    return;
 8001784:	46c0      	nop			; (mov r8, r8)
  }
}
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010000 	.word	0x40010000
 8001790:	0000fbff 	.word	0x0000fbff
 8001794:	0000bfff 	.word	0x0000bfff
 8001798:	0000dfff 	.word	0x0000dfff
 800179c:	0000efff 	.word	0x0000efff
 80017a0:	0000f7ff 	.word	0x0000f7ff
 80017a4:	0000ff7f 	.word	0x0000ff7f
 80017a8:	0000fdff 	.word	0x0000fdff
 80017ac:	0000feff 	.word	0x0000feff

080017b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	000a      	movs	r2, r1
 80017ba:	1cfb      	adds	r3, r7, #3
 80017bc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	23af      	movs	r3, #175	; 0xaf
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_PCD_SetAddress+0x1e>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e017      	b.n	80017fe <HAL_PCD_SetAddress+0x4e>
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	23af      	movs	r3, #175	; 0xaf
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	2101      	movs	r1, #1
 80017d6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1cfa      	adds	r2, r7, #3
 80017dc:	2138      	movs	r1, #56	; 0x38
 80017de:	7812      	ldrb	r2, [r2, #0]
 80017e0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	1cfb      	adds	r3, r7, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0019      	movs	r1, r3
 80017ec:	0010      	movs	r0, r2
 80017ee:	f005 f975 	bl	8006adc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	23af      	movs	r3, #175	; 0xaf
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	2100      	movs	r1, #0
 80017fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001806:	b590      	push	{r4, r7, lr}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	000c      	movs	r4, r1
 8001810:	0010      	movs	r0, r2
 8001812:	0019      	movs	r1, r3
 8001814:	1cfb      	adds	r3, r7, #3
 8001816:	1c22      	adds	r2, r4, #0
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	003b      	movs	r3, r7
 800181c:	1c02      	adds	r2, r0, #0
 800181e:	801a      	strh	r2, [r3, #0]
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	1c0a      	adds	r2, r1, #0
 8001824:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001826:	230b      	movs	r3, #11
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b25b      	sxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	da10      	bge.n	800185a <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001838:	1cfb      	adds	r3, r7, #3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2207      	movs	r2, #7
 800183e:	401a      	ands	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	189b      	adds	r3, r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	3338      	adds	r3, #56	; 0x38
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	3304      	adds	r3, #4
 8001850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	705a      	strb	r2, [r3, #1]
 8001858:	e010      	b.n	800187c <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185a:	1cfb      	adds	r3, r7, #3
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2207      	movs	r2, #7
 8001860:	401a      	ands	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	189b      	adds	r3, r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	3379      	adds	r3, #121	; 0x79
 800186c:	33ff      	adds	r3, #255	; 0xff
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	18d3      	adds	r3, r2, r3
 8001872:	3304      	adds	r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800187c:	1cfb      	adds	r3, r7, #3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2207      	movs	r2, #7
 8001882:	4013      	ands	r3, r2
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800188a:	003b      	movs	r3, r7
 800188c:	881a      	ldrh	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1cba      	adds	r2, r7, #2
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	785b      	ldrb	r3, [r3, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ac:	1cbb      	adds	r3, r7, #2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d102      	bne.n	80018ba <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	23af      	movs	r3, #175	; 0xaf
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PCD_EP_Open+0xc4>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e013      	b.n	80018f2 <HAL_PCD_EP_Open+0xec>
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	23af      	movs	r3, #175	; 0xaf
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	2101      	movs	r1, #1
 80018d2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f003 faab 	bl	8004e38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	23af      	movs	r3, #175	; 0xaf
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	2100      	movs	r1, #0
 80018ea:	54d1      	strb	r1, [r2, r3]

  return ret;
 80018ec:	230b      	movs	r3, #11
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b005      	add	sp, #20
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	000a      	movs	r2, r1
 8001904:	1cfb      	adds	r3, r7, #3
 8001906:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001908:	1cfb      	adds	r3, r7, #3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	da10      	bge.n	8001934 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001912:	1cfb      	adds	r3, r7, #3
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2207      	movs	r2, #7
 8001918:	401a      	ands	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	189b      	adds	r3, r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	3338      	adds	r3, #56	; 0x38
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d3      	adds	r3, r2, r3
 8001928:	3304      	adds	r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
 8001932:	e010      	b.n	8001956 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001934:	1cfb      	adds	r3, r7, #3
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2207      	movs	r2, #7
 800193a:	401a      	ands	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	189b      	adds	r3, r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	3379      	adds	r3, #121	; 0x79
 8001946:	33ff      	adds	r3, #255	; 0xff
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	18d3      	adds	r3, r2, r3
 800194c:	3304      	adds	r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001956:	1cfb      	adds	r3, r7, #3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	b2da      	uxtb	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	23af      	movs	r3, #175	; 0xaf
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_PCD_EP_Close+0x7a>
 8001970:	2302      	movs	r3, #2
 8001972:	e011      	b.n	8001998 <HAL_PCD_EP_Close+0x9e>
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	23af      	movs	r3, #175	; 0xaf
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	2101      	movs	r1, #1
 800197c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f003 fd9a 	bl	80054c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	23af      	movs	r3, #175	; 0xaf
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	2100      	movs	r1, #0
 8001994:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	200b      	movs	r0, #11
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	1c0a      	adds	r2, r1, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b4:	0001      	movs	r1, r0
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2207      	movs	r2, #7
 80019bc:	401a      	ands	r2, r3
 80019be:	0013      	movs	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	189b      	adds	r3, r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	3379      	adds	r3, #121	; 0x79
 80019c8:	33ff      	adds	r3, #255	; 0xff
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	3304      	adds	r3, #4
 80019d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2200      	movs	r2, #0
 80019e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2207      	movs	r2, #7
 80019f0:	4013      	ands	r3, r2
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2207      	movs	r2, #7
 80019fe:	4013      	ands	r3, r2
 8001a00:	d107      	bne.n	8001a12 <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	0011      	movs	r1, r2
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f003 febe 	bl	800578c <USB_EPStartXfer>
 8001a10:	e006      	b.n	8001a20 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f003 feb6 	bl	800578c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b006      	add	sp, #24
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	000a      	movs	r2, r1
 8001a34:	1cfb      	adds	r3, r7, #3
 8001a36:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a38:	1cfb      	adds	r3, r7, #3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	401a      	ands	r2, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	23cc      	movs	r3, #204	; 0xcc
 8001a44:	0059      	lsls	r1, r3, #1
 8001a46:	0013      	movs	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	189b      	adds	r3, r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	18c3      	adds	r3, r0, r3
 8001a50:	185b      	adds	r3, r3, r1
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	200b      	movs	r0, #11
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	1c0a      	adds	r2, r1, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2207      	movs	r2, #7
 8001a76:	401a      	ands	r2, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	189b      	adds	r3, r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	3338      	adds	r3, #56	; 0x38
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	3304      	adds	r3, #4
 8001a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2224      	movs	r2, #36	; 0x24
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2201      	movs	r2, #1
 8001aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f003 fe5b 	bl	800578c <USB_EPStartXfer>
 8001ad6:	e006      	b.n	8001ae6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	0011      	movs	r1, r2
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f003 fe53 	bl	800578c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b006      	add	sp, #24
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	000a      	movs	r2, r1
 8001afa:	1cfb      	adds	r3, r7, #3
 8001afc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001afe:	1cfb      	adds	r3, r7, #3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2207      	movs	r2, #7
 8001b04:	401a      	ands	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d901      	bls.n	8001b12 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e048      	b.n	8001ba4 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b12:	1cfb      	adds	r3, r7, #3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da10      	bge.n	8001b3e <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1c:	1cfb      	adds	r3, r7, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2207      	movs	r2, #7
 8001b22:	401a      	ands	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	189b      	adds	r3, r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00e      	b.n	8001b5c <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b3e:	1cfb      	adds	r3, r7, #3
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	0013      	movs	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	189b      	adds	r3, r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	3379      	adds	r3, #121	; 0x79
 8001b4c:	33ff      	adds	r3, #255	; 0xff
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	3304      	adds	r3, #4
 8001b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b62:	1cfb      	adds	r3, r7, #3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2207      	movs	r2, #7
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	23af      	movs	r3, #175	; 0xaf
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_PCD_EP_SetStall+0x90>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e011      	b.n	8001ba4 <HAL_PCD_EP_SetStall+0xb4>
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	23af      	movs	r3, #175	; 0xaf
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	2101      	movs	r1, #1
 8001b88:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	0011      	movs	r1, r2
 8001b92:	0018      	movs	r0, r3
 8001b94:	f004 fece 	bl	8006934 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	23af      	movs	r3, #175	; 0xaf
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	000a      	movs	r2, r1
 8001bb6:	1cfb      	adds	r3, r7, #3
 8001bb8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bba:	1cfb      	adds	r3, r7, #3
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d901      	bls.n	8001bce <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e04a      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bce:	1cfb      	adds	r3, r7, #3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da10      	bge.n	8001bfa <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	1cfb      	adds	r3, r7, #3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2207      	movs	r2, #7
 8001bde:	401a      	ands	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	189b      	adds	r3, r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	3338      	adds	r3, #56	; 0x38
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	18d3      	adds	r3, r2, r3
 8001bee:	3304      	adds	r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e010      	b.n	8001c1c <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	1cfb      	adds	r3, r7, #3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2207      	movs	r2, #7
 8001c00:	401a      	ands	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	189b      	adds	r3, r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	3379      	adds	r3, #121	; 0x79
 8001c0c:	33ff      	adds	r3, #255	; 0xff
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	18d3      	adds	r3, r2, r3
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c22:	1cfb      	adds	r3, r7, #3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	23af      	movs	r3, #175	; 0xaf
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_PCD_EP_ClrStall+0x94>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e011      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0xb8>
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	23af      	movs	r3, #175	; 0xaf
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	2101      	movs	r1, #1
 8001c48:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	0011      	movs	r1, r2
 8001c52:	0018      	movs	r0, r3
 8001c54:	f004 feb0 	bl	80069b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	23af      	movs	r3, #175	; 0xaf
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	2100      	movs	r1, #0
 8001c60:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c74:	f000 fb90 	bl	8002398 <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c7e:	202a      	movs	r0, #42	; 0x2a
 8001c80:	183b      	adds	r3, r7, r0
 8001c82:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	2429      	movs	r4, #41	; 0x29
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	210f      	movs	r1, #15
 8001c90:	400a      	ands	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d000      	beq.n	8001c9e <PCD_EP_ISR_Handler+0x32>
 8001c9c:	e136      	b.n	8001f0c <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d143      	bne.n	8001d30 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4acb      	ldr	r2, [pc, #812]	; (8001fdc <PCD_EP_ISR_Handler+0x370>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	0209      	lsls	r1, r1, #8
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	333c      	adds	r3, #60	; 0x3c
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4ac4      	ldr	r2, [pc, #784]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001cd0:	4694      	mov	ip, r2
 8001cd2:	4463      	add	r3, ip
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	059b      	lsls	r3, r3, #22
 8001cda:	0d9a      	lsrs	r2, r3, #22
 8001cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	18d2      	adds	r2, r2, r3
 8001cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f007 fcbc 	bl	8009670 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2238      	movs	r2, #56	; 0x38
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d100      	bne.n	8001d06 <PCD_EP_ISR_Handler+0x9a>
 8001d04:	e348      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d000      	beq.n	8001d10 <PCD_EP_ISR_Handler+0xa4>
 8001d0e:	e343      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2238      	movs	r2, #56	; 0x38
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	4252      	negs	r2, r2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2238      	movs	r2, #56	; 0x38
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	5499      	strb	r1, [r3, r2]
 8001d2e:	e333      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	337d      	adds	r3, #125	; 0x7d
 8001d34:	33ff      	adds	r3, #255	; 0xff
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2126      	movs	r1, #38	; 0x26
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d02a      	beq.n	8001da6 <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	f7ff fa6b 	bl	8001238 <PCD_GET_EP_RX_CNT>
 8001d62:	0003      	movs	r3, r0
 8001d64:	001a      	movs	r2, r3
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	22b1      	movs	r2, #177	; 0xb1
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	1899      	adds	r1, r3, r2
 8001d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d78:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f004 ff52 	bl	8006c28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a96      	ldr	r2, [pc, #600]	; (8001fe4 <PCD_EP_ISR_Handler+0x378>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f007 fc30 	bl	8009604 <HAL_PCD_SetupStageCallback>
 8001da4:	e2f8      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8001da6:	2326      	movs	r3, #38	; 0x26
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	5e9b      	ldrsh	r3, [r3, r2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db00      	blt.n	8001db4 <PCD_EP_ISR_Handler+0x148>
 8001db2:	e2f1      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <PCD_EP_ISR_Handler+0x378>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	0010      	movs	r0, r2
 8001dda:	f7ff fa2d 	bl	8001238 <PCD_GET_EP_RX_CNT>
 8001dde:	0003      	movs	r3, r0
 8001de0:	001a      	movs	r2, r3
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01a      	beq.n	8001e24 <PCD_EP_ISR_Handler+0x1b8>
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	6959      	ldr	r1, [r3, #20]
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e00:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f004 ff0e 	bl	8006c28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	18d2      	adds	r2, r2, r3
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f007 fc05 	bl	800962e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2126      	movs	r1, #38	; 0x26
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d000      	beq.n	8001e3e <PCD_EP_ISR_Handler+0x1d2>
 8001e3c:	e2ac      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	401a      	ands	r2, r3
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d100      	bne.n	8001e52 <PCD_EP_ISR_Handler+0x1e6>
 8001e50:	e2a2      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e52:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001e58:	0412      	lsls	r2, r2, #16
 8001e5a:	0c12      	lsrs	r2, r2, #16
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b3e      	cmp	r3, #62	; 0x3e
 8001e64:	d916      	bls.n	8001e94 <PCD_EP_ISR_Handler+0x228>
 8001e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	221f      	movs	r2, #31
 8001e74:	4013      	ands	r3, r2
 8001e76:	d102      	bne.n	8001e7e <PCD_EP_ISR_Handler+0x212>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	069b      	lsls	r3, r3, #26
 8001e86:	431a      	orrs	r2, r3
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0609      	lsls	r1, r1, #24
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e024      	b.n	8001ede <PCD_EP_ISR_Handler+0x272>
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <PCD_EP_ISR_Handler+0x24c>
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001ea2:	4951      	ldr	r1, [pc, #324]	; (8001fe8 <PCD_EP_ISR_Handler+0x37c>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	0609      	lsls	r1, r1, #24
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	e012      	b.n	8001ede <PCD_EP_ISR_Handler+0x272>
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d002      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x264>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	069a      	lsls	r2, r3, #26
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <PCD_EP_ISR_Handler+0x374>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a41      	ldr	r2, [pc, #260]	; (8001fec <PCD_EP_ISR_Handler+0x380>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	0152      	lsls	r2, r2, #5
 8001ef0:	4053      	eors	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0192      	lsls	r2, r2, #6
 8001efa:	4053      	eors	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	493a      	ldr	r1, [pc, #232]	; (8001ff0 <PCD_EP_ISR_Handler+0x384>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e245      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	2129      	movs	r1, #41	; 0x29
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	18d3      	adds	r3, r2, r3
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2026      	movs	r0, #38	; 0x26
 8001f20:	183b      	adds	r3, r7, r0
 8001f22:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8001f24:	183b      	adds	r3, r7, r0
 8001f26:	2200      	movs	r2, #0
 8001f28:	5e9b      	ldrsh	r3, [r3, r2]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db00      	blt.n	8001f30 <PCD_EP_ISR_Handler+0x2c4>
 8001f2e:	e0e4      	b.n	80020fa <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	001a      	movs	r2, r3
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <PCD_EP_ISR_Handler+0x378>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	0008      	movs	r0, r1
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	6a3a      	ldr	r2, [r7, #32]
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f5e:	183b      	adds	r3, r7, r0
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	0013      	movs	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	3379      	adds	r3, #121	; 0x79
 8001f6c:	33ff      	adds	r3, #255	; 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	3304      	adds	r3, #4
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	7a9b      	ldrb	r3, [r3, #10]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d11d      	bne.n	8001fba <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	252c      	movs	r5, #44	; 0x2c
 8001f8a:	197c      	adds	r4, r7, r5
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	0010      	movs	r0, r2
 8001f90:	f7ff f952 	bl	8001238 <PCD_GET_EP_RX_CNT>
 8001f94:	0003      	movs	r3, r0
 8001f96:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8001f98:	002c      	movs	r4, r5
 8001f9a:	193b      	adds	r3, r7, r4
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d100      	bne.n	8001fa4 <PCD_EP_ISR_Handler+0x338>
 8001fa2:	e082      	b.n	80020aa <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001faa:	6959      	ldr	r1, [r3, #20]
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	889a      	ldrh	r2, [r3, #4]
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f004 fe38 	bl	8006c28 <USB_ReadPMA>
 8001fb8:	e077      	b.n	80020aa <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	78db      	ldrb	r3, [r3, #3]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d118      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fc2:	232c      	movs	r3, #44	; 0x2c
 8001fc4:	18fc      	adds	r4, r7, r3
 8001fc6:	2326      	movs	r3, #38	; 0x26
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	881a      	ldrh	r2, [r3, #0]
 8001fcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 f9ef 	bl	80023b4 <HAL_PCD_EP_DB_Receive>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	8023      	strh	r3, [r4, #0]
 8001fda:	e066      	b.n	80020aa <PCD_EP_ISR_Handler+0x43e>
 8001fdc:	07ff8f0f 	.word	0x07ff8f0f
 8001fe0:	40009800 	.word	0x40009800
 8001fe4:	07ff0f8f 	.word	0x07ff0f8f
 8001fe8:	83ffffff 	.word	0x83ffffff
 8001fec:	07ffbf8f 	.word	0x07ffbf8f
 8001ff0:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4adb      	ldr	r2, [pc, #876]	; (8002374 <PCD_EP_ISR_Handler+0x708>)
 8002006:	4013      	ands	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	18d3      	adds	r3, r2, r3
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	49d7      	ldr	r1, [pc, #860]	; (8002378 <PCD_EP_ISR_Handler+0x70c>)
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	001a      	movs	r2, r3
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	01db      	lsls	r3, r3, #7
 8002034:	4013      	ands	r3, r2
 8002036:	d01c      	beq.n	8002072 <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	252c      	movs	r5, #44	; 0x2c
 8002044:	197c      	adds	r4, r7, r5
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f7ff f917 	bl	800127c <PCD_GET_EP_DBUF0_CNT>
 800204e:	0003      	movs	r3, r0
 8002050:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8002052:	002c      	movs	r4, r5
 8002054:	193b      	adds	r3, r7, r4
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d026      	beq.n	80020aa <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	6959      	ldr	r1, [r3, #20]
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	88da      	ldrh	r2, [r3, #6]
 8002068:	193b      	adds	r3, r7, r4
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f004 fddc 	bl	8006c28 <USB_ReadPMA>
 8002070:	e01b      	b.n	80020aa <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	252c      	movs	r5, #44	; 0x2c
 800207e:	197c      	adds	r4, r7, r5
 8002080:	0019      	movs	r1, r3
 8002082:	0010      	movs	r0, r2
 8002084:	f7ff f91c 	bl	80012c0 <PCD_GET_EP_DBUF1_CNT>
 8002088:	0003      	movs	r3, r0
 800208a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800208c:	002c      	movs	r4, r5
 800208e:	193b      	adds	r3, r7, r4
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	6959      	ldr	r1, [r3, #20]
 800209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a0:	891a      	ldrh	r2, [r3, #8]
 80020a2:	193b      	adds	r3, r7, r4
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f004 fdbf 	bl	8006c28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	18d2      	adds	r2, r2, r3
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	18d2      	adds	r2, r2, r3
 80020c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <PCD_EP_ISR_Handler+0x470>
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	881a      	ldrh	r2, [r3, #0]
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f007 faa2 	bl	800962e <HAL_PCD_DataOutStageCallback>
 80020ea:	e006      	b.n	80020fa <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f003 fb49 	bl	800578c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80020fa:	2026      	movs	r0, #38	; 0x26
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	4013      	ands	r3, r2
 8002104:	d100      	bne.n	8002108 <PCD_EP_ISR_Handler+0x49c>
 8002106:	e147      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 8002108:	2129      	movs	r1, #41	; 0x29
 800210a:	187b      	adds	r3, r7, r1
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	0013      	movs	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	189b      	adds	r3, r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	3338      	adds	r3, #56	; 0x38
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	18d3      	adds	r3, r2, r3
 800211c:	3304      	adds	r3, #4
 800211e:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	001a      	movs	r2, r3
 8002126:	187b      	adds	r3, r7, r1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	18d3      	adds	r3, r2, r3
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a92      	ldr	r2, [pc, #584]	; (800237c <PCD_EP_ISR_Handler+0x710>)
 8002132:	4013      	ands	r3, r2
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	001a      	movs	r2, r3
 800213c:	187b      	adds	r3, r7, r1
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	18d3      	adds	r3, r2, r3
 8002144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0209      	lsls	r1, r1, #8
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	78db      	ldrb	r3, [r3, #3]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d000      	beq.n	8002158 <PCD_EP_ISR_Handler+0x4ec>
 8002156:	e0c3      	b.n	80022e0 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	7a9b      	ldrb	r3, [r3, #10]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d100      	bne.n	8002168 <PCD_EP_ISR_Handler+0x4fc>
 8002166:	e0b3      	b.n	80022d0 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002168:	183b      	adds	r3, r7, r0
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	4013      	ands	r3, r2
 8002170:	d057      	beq.n	8002222 <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d131      	bne.n	80021de <PCD_EP_ISR_Handler+0x572>
 800217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4a7f      	ldr	r2, [pc, #508]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002182:	4694      	mov	ip, r2
 8002184:	4463      	add	r3, ip
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	497c      	ldr	r1, [pc, #496]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002190:	468c      	mov	ip, r1
 8002192:	4463      	add	r3, ip
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	0c12      	lsrs	r2, r2, #16
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4a77      	ldr	r2, [pc, #476]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80021a2:	4694      	mov	ip, r2
 80021a4:	4463      	add	r3, ip
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4974      	ldr	r1, [pc, #464]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80021b0:	468c      	mov	ip, r1
 80021b2:	4463      	add	r3, ip
 80021b4:	4973      	ldr	r1, [pc, #460]	; (8002384 <PCD_EP_ISR_Handler+0x718>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4a6f      	ldr	r2, [pc, #444]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80021c2:	4694      	mov	ip, r2
 80021c4:	4463      	add	r3, ip
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	496c      	ldr	r1, [pc, #432]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80021d0:	468c      	mov	ip, r1
 80021d2:	4463      	add	r3, ip
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0609      	lsls	r1, r1, #24
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e078      	b.n	80022d0 <PCD_EP_ISR_Handler+0x664>
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d174      	bne.n	80022d0 <PCD_EP_ISR_Handler+0x664>
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4a64      	ldr	r2, [pc, #400]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80021ee:	4694      	mov	ip, r2
 80021f0:	4463      	add	r3, ip
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4961      	ldr	r1, [pc, #388]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80021fc:	468c      	mov	ip, r1
 80021fe:	4463      	add	r3, ip
 8002200:	0412      	lsls	r2, r2, #16
 8002202:	0c12      	lsrs	r2, r2, #16
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4a5c      	ldr	r2, [pc, #368]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 800220e:	189a      	adds	r2, r3, r2
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	495a      	ldr	r1, [pc, #360]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002218:	468c      	mov	ip, r1
 800221a:	4463      	add	r3, ip
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e056      	b.n	80022d0 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d131      	bne.n	800228e <PCD_EP_ISR_Handler+0x622>
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4a53      	ldr	r2, [pc, #332]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002232:	4694      	mov	ip, r2
 8002234:	4463      	add	r3, ip
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4950      	ldr	r1, [pc, #320]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002240:	468c      	mov	ip, r1
 8002242:	4463      	add	r3, ip
 8002244:	0412      	lsls	r2, r2, #16
 8002246:	0c12      	lsrs	r2, r2, #16
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002252:	4694      	mov	ip, r2
 8002254:	4463      	add	r3, ip
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4948      	ldr	r1, [pc, #288]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002260:	468c      	mov	ip, r1
 8002262:	4463      	add	r3, ip
 8002264:	4947      	ldr	r1, [pc, #284]	; (8002384 <PCD_EP_ISR_Handler+0x718>)
 8002266:	400a      	ands	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4a43      	ldr	r2, [pc, #268]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002272:	4694      	mov	ip, r2
 8002274:	4463      	add	r3, ip
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 8002280:	468c      	mov	ip, r1
 8002282:	4463      	add	r3, ip
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0609      	lsls	r1, r1, #24
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	e020      	b.n	80022d0 <PCD_EP_ISR_Handler+0x664>
 800228e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d11c      	bne.n	80022d0 <PCD_EP_ISR_Handler+0x664>
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4a38      	ldr	r2, [pc, #224]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 800229e:	4694      	mov	ip, r2
 80022a0:	4463      	add	r3, ip
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4935      	ldr	r1, [pc, #212]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80022ac:	468c      	mov	ip, r1
 80022ae:	4463      	add	r3, ip
 80022b0:	0412      	lsls	r2, r2, #16
 80022b2:	0c12      	lsrs	r2, r2, #16
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80022be:	189a      	adds	r2, r3, r2
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	492e      	ldr	r1, [pc, #184]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80022c8:	468c      	mov	ip, r1
 80022ca:	4463      	add	r3, ip
 80022cc:	6852      	ldr	r2, [r2, #4]
 80022ce:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f007 f9c9 	bl	8009670 <HAL_PCD_DataInStageCallback>
 80022de:	e05b      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80022e0:	2326      	movs	r3, #38	; 0x26
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	d14c      	bne.n	8002388 <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <PCD_EP_ISR_Handler+0x714>)
 80022f6:	4694      	mov	ip, r2
 80022f8:	4463      	add	r3, ip
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b29a      	uxth	r2, r3
 8002300:	212e      	movs	r1, #46	; 0x2e
 8002302:	187b      	adds	r3, r7, r1
 8002304:	0592      	lsls	r2, r2, #22
 8002306:	0d92      	lsrs	r2, r2, #22
 8002308:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	187b      	adds	r3, r7, r1
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d907      	bls.n	8002326 <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	187b      	adds	r3, r7, r1
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	1ad2      	subs	r2, r2, r3
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	e002      	b.n	800232c <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f007 f997 	bl	8009670 <HAL_PCD_DataInStageCallback>
 8002342:	e029      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	212e      	movs	r1, #46	; 0x2e
 800234a:	187b      	adds	r3, r7, r1
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	18d2      	adds	r2, r2, r3
 8002350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002352:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	187b      	adds	r3, r7, r1
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	18d2      	adds	r2, r2, r3
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f003 fa0e 	bl	800578c <USB_EPStartXfer>
 8002370:	e012      	b.n	8002398 <PCD_EP_ISR_Handler+0x72c>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	07ff8f8f 	.word	0x07ff8f8f
 8002378:	000080c0 	.word	0x000080c0
 800237c:	07ff8f0f 	.word	0x07ff8f0f
 8002380:	40009800 	.word	0x40009800
 8002384:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002388:	2326      	movs	r3, #38	; 0x26
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f8fa 	bl	800258c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	4013      	ands	r3, r2
 80023a4:	d000      	beq.n	80023a8 <PCD_EP_ISR_Handler+0x73c>
 80023a6:	e467      	b.n	8001c78 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b00e      	add	sp, #56	; 0x38
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)

080023b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	1dbb      	adds	r3, r7, #6
 80023c0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c2:	1dbb      	adds	r3, r7, #6
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	01db      	lsls	r3, r3, #7
 80023ca:	4013      	ands	r3, r2
 80023cc:	d068      	beq.n	80024a0 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	251e      	movs	r5, #30
 80023da:	197c      	adds	r4, r7, r5
 80023dc:	0019      	movs	r1, r3
 80023de:	0010      	movs	r0, r2
 80023e0:	f7fe ff4c 	bl	800127c <PCD_GET_EP_DBUF0_CNT>
 80023e4:	0003      	movs	r3, r0
 80023e6:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	197b      	adds	r3, r7, r5
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d307      	bcc.n	8002404 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	197b      	adds	r3, r7, r5
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	1ad2      	subs	r2, r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	619a      	str	r2, [r3, #24]
 8002402:	e002      	b.n	800240a <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11a      	bne.n	8002448 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	001a      	movs	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18d3      	adds	r3, r2, r3
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_PCD_EP_DB_Receive+0x1c8>)
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0192      	lsls	r2, r2, #6
 800242e:	4053      	eors	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	001a      	movs	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	18d3      	adds	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	494f      	ldr	r1, [pc, #316]	; (8002580 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002448:	1dbb      	adds	r3, r7, #6
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	4013      	ands	r3, r2
 8002450:	d015      	beq.n	800247e <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	001a      	movs	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	18d3      	adds	r3, r2, r3
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a48      	ldr	r2, [pc, #288]	; (8002584 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	001a      	movs	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4943      	ldr	r1, [pc, #268]	; (8002588 <HAL_PCD_EP_DB_Receive+0x1d4>)
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800247e:	241e      	movs	r4, #30
 8002480:	193b      	adds	r3, r7, r4
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d100      	bne.n	800248a <HAL_PCD_EP_DB_Receive+0xd6>
 8002488:	e071      	b.n	800256e <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6959      	ldr	r1, [r3, #20]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	88da      	ldrh	r2, [r3, #6]
 8002496:	193b      	adds	r3, r7, r4
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f004 fbc5 	bl	8006c28 <USB_ReadPMA>
 800249e:	e066      	b.n	800256e <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	251e      	movs	r5, #30
 80024ac:	197c      	adds	r4, r7, r5
 80024ae:	0019      	movs	r1, r3
 80024b0:	0010      	movs	r0, r2
 80024b2:	f7fe ff05 	bl	80012c0 <PCD_GET_EP_DBUF1_CNT>
 80024b6:	0003      	movs	r3, r0
 80024b8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	197b      	adds	r3, r7, r5
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d307      	bcc.n	80024d6 <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	197b      	adds	r3, r7, r5
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	619a      	str	r2, [r3, #24]
 80024d4:	e002      	b.n	80024dc <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11a      	bne.n	800251a <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	001a      	movs	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	18d3      	adds	r3, r2, r3
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a21      	ldr	r2, [pc, #132]	; (800257c <HAL_PCD_EP_DB_Receive+0x1c8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	0192      	lsls	r2, r2, #6
 8002500:	4053      	eors	r3, r2
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	001a      	movs	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	18d3      	adds	r3, r2, r3
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	491a      	ldr	r1, [pc, #104]	; (8002580 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800251a:	1dbb      	adds	r3, r7, #6
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	4013      	ands	r3, r2
 8002522:	d115      	bne.n	8002550 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	001a      	movs	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	18d3      	adds	r3, r2, r3
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8002536:	4013      	ands	r3, r2
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	001a      	movs	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	490f      	ldr	r1, [pc, #60]	; (8002588 <HAL_PCD_EP_DB_Receive+0x1d4>)
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8002550:	241e      	movs	r4, #30
 8002552:	193b      	adds	r3, r7, r4
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6959      	ldr	r1, [r3, #20]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	891a      	ldrh	r2, [r3, #8]
 8002566:	193b      	adds	r3, r7, r4
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	f004 fb5d 	bl	8006c28 <USB_ReadPMA>
    }
  }

  return count;
 800256e:	231e      	movs	r3, #30
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	881b      	ldrh	r3, [r3, #0]
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b00a      	add	sp, #40	; 0x28
 800257a:	bdb0      	pop	{r4, r5, r7, pc}
 800257c:	07ffbf8f 	.word	0x07ffbf8f
 8002580:	00008080 	.word	0x00008080
 8002584:	07ff8f8f 	.word	0x07ff8f8f
 8002588:	000080c0 	.word	0x000080c0

0800258c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	1dbb      	adds	r3, r7, #6
 8002598:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	4013      	ands	r3, r2
 80025a2:	d100      	bne.n	80025a6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80025a4:	e1fc      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2526      	movs	r5, #38	; 0x26
 80025b2:	197c      	adds	r4, r7, r5
 80025b4:	0019      	movs	r1, r3
 80025b6:	0010      	movs	r0, r2
 80025b8:	f7fe fe60 	bl	800127c <PCD_GET_EP_DBUF0_CNT>
 80025bc:	0003      	movs	r3, r0
 80025be:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	197b      	adds	r3, r7, r5
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d907      	bls.n	80025dc <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	197b      	adds	r3, r7, r5
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	619a      	str	r2, [r3, #24]
 80025da:	e002      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d000      	beq.n	80025ec <HAL_PCD_EP_DB_Transmit+0x60>
 80025ea:	e0d2      	b.n	8002792 <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d131      	bne.n	8002658 <HAL_PCD_EP_DB_Transmit+0xcc>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4ae5      	ldr	r2, [pc, #916]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80025fc:	4694      	mov	ip, r2
 80025fe:	4463      	add	r3, ip
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	49e1      	ldr	r1, [pc, #900]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800260a:	468c      	mov	ip, r1
 800260c:	4463      	add	r3, ip
 800260e:	0412      	lsls	r2, r2, #16
 8002610:	0c12      	lsrs	r2, r2, #16
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4add      	ldr	r2, [pc, #884]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800261c:	4694      	mov	ip, r2
 800261e:	4463      	add	r3, ip
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	49d9      	ldr	r1, [pc, #868]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800262a:	468c      	mov	ip, r1
 800262c:	4463      	add	r3, ip
 800262e:	49d9      	ldr	r1, [pc, #868]	; (8002994 <HAL_PCD_EP_DB_Transmit+0x408>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4ad5      	ldr	r2, [pc, #852]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800263c:	4694      	mov	ip, r2
 800263e:	4463      	add	r3, ip
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	49d1      	ldr	r1, [pc, #836]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800264a:	468c      	mov	ip, r1
 800264c:	4463      	add	r3, ip
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0609      	lsls	r1, r1, #24
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e020      	b.n	800269a <HAL_PCD_EP_DB_Transmit+0x10e>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d11c      	bne.n	800269a <HAL_PCD_EP_DB_Transmit+0x10e>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4aca      	ldr	r2, [pc, #808]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002668:	4694      	mov	ip, r2
 800266a:	4463      	add	r3, ip
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	49c6      	ldr	r1, [pc, #792]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002676:	468c      	mov	ip, r1
 8002678:	4463      	add	r3, ip
 800267a:	0412      	lsls	r2, r2, #16
 800267c:	0c12      	lsrs	r2, r2, #16
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4ac2      	ldr	r2, [pc, #776]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002688:	189a      	adds	r2, r3, r2
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	49bf      	ldr	r1, [pc, #764]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002692:	468c      	mov	ip, r1
 8002694:	4463      	add	r3, ip
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d131      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x17a>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4ab9      	ldr	r2, [pc, #740]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026aa:	4694      	mov	ip, r2
 80026ac:	4463      	add	r3, ip
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	49b6      	ldr	r1, [pc, #728]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026b8:	468c      	mov	ip, r1
 80026ba:	4463      	add	r3, ip
 80026bc:	0412      	lsls	r2, r2, #16
 80026be:	0c12      	lsrs	r2, r2, #16
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4ab1      	ldr	r2, [pc, #708]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026ca:	4694      	mov	ip, r2
 80026cc:	4463      	add	r3, ip
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	49ae      	ldr	r1, [pc, #696]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026d8:	468c      	mov	ip, r1
 80026da:	4463      	add	r3, ip
 80026dc:	49ad      	ldr	r1, [pc, #692]	; (8002994 <HAL_PCD_EP_DB_Transmit+0x408>)
 80026de:	400a      	ands	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4aa9      	ldr	r2, [pc, #676]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026ea:	4694      	mov	ip, r2
 80026ec:	4463      	add	r3, ip
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	49a6      	ldr	r1, [pc, #664]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026f8:	468c      	mov	ip, r1
 80026fa:	4463      	add	r3, ip
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	0609      	lsls	r1, r1, #24
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	e020      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x1bc>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d11c      	bne.n	8002748 <HAL_PCD_EP_DB_Transmit+0x1bc>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4a9e      	ldr	r2, [pc, #632]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002716:	4694      	mov	ip, r2
 8002718:	4463      	add	r3, ip
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	499b      	ldr	r1, [pc, #620]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002724:	468c      	mov	ip, r1
 8002726:	4463      	add	r3, ip
 8002728:	0412      	lsls	r2, r2, #16
 800272a:	0c12      	lsrs	r2, r2, #16
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4a96      	ldr	r2, [pc, #600]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002736:	189a      	adds	r2, r3, r2
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4994      	ldr	r1, [pc, #592]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002740:	468c      	mov	ip, r1
 8002742:	4463      	add	r3, ip
 8002744:	6852      	ldr	r2, [r2, #4]
 8002746:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f006 ff8d 	bl	8009670 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002756:	1dbb      	adds	r3, r7, #6
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	01db      	lsls	r3, r3, #7
 800275e:	4013      	ands	r3, r2
 8002760:	d100      	bne.n	8002764 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002762:	e31a      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	001a      	movs	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	18d3      	adds	r3, r2, r3
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a88      	ldr	r2, [pc, #544]	; (8002998 <HAL_PCD_EP_DB_Transmit+0x40c>)
 8002776:	4013      	ands	r3, r2
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	001a      	movs	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	18d3      	adds	r3, r2, r3
 8002788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278a:	4984      	ldr	r1, [pc, #528]	; (800299c <HAL_PCD_EP_DB_Transmit+0x410>)
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e303      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	01db      	lsls	r3, r3, #7
 800279a:	4013      	ands	r3, r2
 800279c:	d015      	beq.n	80027ca <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	001a      	movs	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7a      	ldr	r2, [pc, #488]	; (8002998 <HAL_PCD_EP_DB_Transmit+0x40c>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	001a      	movs	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	4975      	ldr	r1, [pc, #468]	; (800299c <HAL_PCD_EP_DB_Transmit+0x410>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2224      	movs	r2, #36	; 0x24
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d000      	beq.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x24a>
 80027d4:	e2e1      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	2126      	movs	r1, #38	; 0x26
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	18d2      	adds	r2, r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	18d2      	adds	r2, r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d309      	bcc.n	8002814 <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	621a      	str	r2, [r3, #32]
 8002812:	e016      	b.n	8002842 <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 800281c:	2326      	movs	r3, #38	; 0x26
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]
 800282c:	e009      	b.n	8002842 <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2224      	movs	r2, #36	; 0x24
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d172      	bne.n	8002930 <HAL_PCD_EP_DB_Transmit+0x3a4>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002852:	4694      	mov	ip, r2
 8002854:	4463      	add	r3, ip
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	494c      	ldr	r1, [pc, #304]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002860:	468c      	mov	ip, r1
 8002862:	4463      	add	r3, ip
 8002864:	0412      	lsls	r2, r2, #16
 8002866:	0c12      	lsrs	r2, r2, #16
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	2b3e      	cmp	r3, #62	; 0x3e
 800286e:	d91e      	bls.n	80028ae <HAL_PCD_EP_DB_Transmit+0x322>
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	221f      	movs	r2, #31
 800287a:	4013      	ands	r3, r2
 800287c:	d102      	bne.n	8002884 <HAL_PCD_EP_DB_Transmit+0x2f8>
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4a41      	ldr	r2, [pc, #260]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800288c:	4694      	mov	ip, r2
 800288e:	4463      	add	r3, ip
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	069b      	lsls	r3, r3, #26
 8002896:	431a      	orrs	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	493c      	ldr	r1, [pc, #240]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80028a0:	468c      	mov	ip, r1
 80028a2:	4463      	add	r3, ip
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0609      	lsls	r1, r1, #24
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e065      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x3ee>
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d121      	bne.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x36c>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4a35      	ldr	r2, [pc, #212]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4931      	ldr	r1, [pc, #196]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80028ca:	468c      	mov	ip, r1
 80028cc:	4463      	add	r3, ip
 80028ce:	4931      	ldr	r1, [pc, #196]	; (8002994 <HAL_PCD_EP_DB_Transmit+0x408>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4a2d      	ldr	r2, [pc, #180]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80028dc:	4694      	mov	ip, r2
 80028de:	4463      	add	r3, ip
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4929      	ldr	r1, [pc, #164]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 80028ea:	468c      	mov	ip, r1
 80028ec:	4463      	add	r3, ip
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	0609      	lsls	r1, r1, #24
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e040      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x3ee>
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	d002      	beq.n	800290c <HAL_PCD_EP_DB_Transmit+0x380>
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	3301      	adds	r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002914:	4694      	mov	ip, r2
 8002916:	4463      	add	r3, ip
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	069a      	lsls	r2, r3, #26
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	481a      	ldr	r0, [pc, #104]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002926:	4684      	mov	ip, r0
 8002928:	4463      	add	r3, ip
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e024      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x3ee>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d120      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x3ee>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002940:	4694      	mov	ip, r2
 8002942:	4463      	add	r3, ip
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4910      	ldr	r1, [pc, #64]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 800294e:	468c      	mov	ip, r1
 8002950:	4463      	add	r3, ip
 8002952:	0412      	lsls	r2, r2, #16
 8002954:	0c12      	lsrs	r2, r2, #16
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002960:	4694      	mov	ip, r2
 8002962:	4463      	add	r3, ip
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4807      	ldr	r0, [pc, #28]	; (8002990 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002972:	4684      	mov	ip, r0
 8002974:	4463      	add	r3, ip
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6959      	ldr	r1, [r3, #20]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	88da      	ldrh	r2, [r3, #6]
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	b29b      	uxth	r3, r3
 800298a:	f004 f8d7 	bl	8006b3c <USB_WritePMA>
 800298e:	e204      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
 8002990:	40009800 	.word	0x40009800
 8002994:	83ffffff 	.word	0x83ffffff
 8002998:	07ff8f8f 	.word	0x07ff8f8f
 800299c:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2526      	movs	r5, #38	; 0x26
 80029ac:	197c      	adds	r4, r7, r5
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f7fe fc85 	bl	80012c0 <PCD_GET_EP_DBUF1_CNT>
 80029b6:	0003      	movs	r3, r0
 80029b8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	197b      	adds	r3, r7, r5
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d307      	bcc.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	197b      	adds	r3, r7, r5
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	619a      	str	r2, [r3, #24]
 80029d4:	e002      	b.n	80029dc <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d000      	beq.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x45a>
 80029e4:	e0d2      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d131      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x4c6>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4acd      	ldr	r2, [pc, #820]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80029f6:	4694      	mov	ip, r2
 80029f8:	4463      	add	r3, ip
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	49ca      	ldr	r1, [pc, #808]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a04:	468c      	mov	ip, r1
 8002a06:	4463      	add	r3, ip
 8002a08:	0412      	lsls	r2, r2, #16
 8002a0a:	0c12      	lsrs	r2, r2, #16
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4ac5      	ldr	r2, [pc, #788]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a16:	4694      	mov	ip, r2
 8002a18:	4463      	add	r3, ip
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	49c2      	ldr	r1, [pc, #776]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a24:	468c      	mov	ip, r1
 8002a26:	4463      	add	r3, ip
 8002a28:	49c1      	ldr	r1, [pc, #772]	; (8002d30 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4abd      	ldr	r2, [pc, #756]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a36:	4694      	mov	ip, r2
 8002a38:	4463      	add	r3, ip
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	49ba      	ldr	r1, [pc, #744]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a44:	468c      	mov	ip, r1
 8002a46:	4463      	add	r3, ip
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0609      	lsls	r1, r1, #24
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e020      	b.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x508>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d11c      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x508>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4ab2      	ldr	r2, [pc, #712]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a62:	4694      	mov	ip, r2
 8002a64:	4463      	add	r3, ip
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	49af      	ldr	r1, [pc, #700]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a70:	468c      	mov	ip, r1
 8002a72:	4463      	add	r3, ip
 8002a74:	0412      	lsls	r2, r2, #16
 8002a76:	0c12      	lsrs	r2, r2, #16
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4aaa      	ldr	r2, [pc, #680]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a82:	189a      	adds	r2, r3, r2
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	49a8      	ldr	r1, [pc, #672]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	4463      	add	r3, ip
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d131      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0x574>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4aa2      	ldr	r2, [pc, #648]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002aa4:	4694      	mov	ip, r2
 8002aa6:	4463      	add	r3, ip
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	499e      	ldr	r1, [pc, #632]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ab2:	468c      	mov	ip, r1
 8002ab4:	4463      	add	r3, ip
 8002ab6:	0412      	lsls	r2, r2, #16
 8002ab8:	0c12      	lsrs	r2, r2, #16
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4a9a      	ldr	r2, [pc, #616]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ac4:	4694      	mov	ip, r2
 8002ac6:	4463      	add	r3, ip
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4996      	ldr	r1, [pc, #600]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ad2:	468c      	mov	ip, r1
 8002ad4:	4463      	add	r3, ip
 8002ad6:	4996      	ldr	r1, [pc, #600]	; (8002d30 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4a92      	ldr	r2, [pc, #584]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ae4:	4694      	mov	ip, r2
 8002ae6:	4463      	add	r3, ip
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	498e      	ldr	r1, [pc, #568]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002af2:	468c      	mov	ip, r1
 8002af4:	4463      	add	r3, ip
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0609      	lsls	r1, r1, #24
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e020      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x5b6>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d11c      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x5b6>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4a87      	ldr	r2, [pc, #540]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b10:	4694      	mov	ip, r2
 8002b12:	4463      	add	r3, ip
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4983      	ldr	r1, [pc, #524]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b1e:	468c      	mov	ip, r1
 8002b20:	4463      	add	r3, ip
 8002b22:	0412      	lsls	r2, r2, #16
 8002b24:	0c12      	lsrs	r2, r2, #16
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4a7f      	ldr	r2, [pc, #508]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b30:	189a      	adds	r2, r3, r2
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	497c      	ldr	r1, [pc, #496]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b3a:	468c      	mov	ip, r1
 8002b3c:	4463      	add	r3, ip
 8002b3e:	6852      	ldr	r2, [r2, #4]
 8002b40:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f006 fd90 	bl	8009670 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b50:	1dbb      	adds	r3, r7, #6
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	01db      	lsls	r3, r3, #7
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d000      	beq.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x5d2>
 8002b5c:	e11d      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	001a      	movs	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	18d3      	adds	r3, r2, r3
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a71      	ldr	r2, [pc, #452]	; (8002d34 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	001a      	movs	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	18d3      	adds	r3, r2, r3
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	496c      	ldr	r1, [pc, #432]	; (8002d38 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002b86:	430a      	orrs	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e106      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b8c:	1dbb      	adds	r3, r7, #6
 8002b8e:	881a      	ldrh	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	01db      	lsls	r3, r3, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	d115      	bne.n	8002bc4 <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a62      	ldr	r2, [pc, #392]	; (8002d34 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	18d3      	adds	r3, r2, r3
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	495e      	ldr	r1, [pc, #376]	; (8002d38 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d000      	beq.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x644>
 8002bce:	e0e4      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	2126      	movs	r1, #38	; 0x26
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	18d2      	adds	r2, r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	18d2      	adds	r2, r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d309      	bcc.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	621a      	str	r2, [r3, #32]
 8002c0c:	e016      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 8002c16:	2326      	movs	r3, #38	; 0x26
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2224      	movs	r2, #36	; 0x24
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]
 8002c26:	e009      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d000      	beq.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8002c44:	e07a      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x7b0>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4a37      	ldr	r2, [pc, #220]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002c4e:	4694      	mov	ip, r2
 8002c50:	4463      	add	r3, ip
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4934      	ldr	r1, [pc, #208]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002c5c:	468c      	mov	ip, r1
 8002c5e:	4463      	add	r3, ip
 8002c60:	0412      	lsls	r2, r2, #16
 8002c62:	0c12      	lsrs	r2, r2, #16
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	2b3e      	cmp	r3, #62	; 0x3e
 8002c6a:	d91e      	bls.n	8002caa <HAL_PCD_EP_DB_Transmit+0x71e>
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	221f      	movs	r2, #31
 8002c76:	4013      	ands	r3, r2
 8002c78:	d102      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002c88:	4694      	mov	ip, r2
 8002c8a:	4463      	add	r3, ip
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	069b      	lsls	r3, r3, #26
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4924      	ldr	r1, [pc, #144]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002c9c:	468c      	mov	ip, r1
 8002c9e:	4463      	add	r3, ip
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0609      	lsls	r1, r1, #24
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e06d      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d121      	bne.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x768>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002cb8:	4694      	mov	ip, r2
 8002cba:	4463      	add	r3, ip
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4919      	ldr	r1, [pc, #100]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002cc6:	468c      	mov	ip, r1
 8002cc8:	4463      	add	r3, ip
 8002cca:	4919      	ldr	r1, [pc, #100]	; (8002d30 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8002ccc:	400a      	ands	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002cd8:	4694      	mov	ip, r2
 8002cda:	4463      	add	r3, ip
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4911      	ldr	r1, [pc, #68]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ce6:	468c      	mov	ip, r1
 8002ce8:	4463      	add	r3, ip
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	0609      	lsls	r1, r1, #24
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	e048      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d002      	beq.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002d10:	4694      	mov	ip, r2
 8002d12:	4463      	add	r3, ip
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	069a      	lsls	r2, r3, #26
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002d22:	4684      	mov	ip, r0
 8002d24:	4463      	add	r3, ip
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e02c      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002d2c:	40009800 	.word	0x40009800
 8002d30:	83ffffff 	.word	0x83ffffff
 8002d34:	07ff8f8f 	.word	0x07ff8f8f
 8002d38:	0000c080 	.word	0x0000c080
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d120      	bne.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002d4c:	4694      	mov	ip, r2
 8002d4e:	4463      	add	r3, ip
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4921      	ldr	r1, [pc, #132]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002d5a:	468c      	mov	ip, r1
 8002d5c:	4463      	add	r3, ip
 8002d5e:	0412      	lsls	r2, r2, #16
 8002d60:	0c12      	lsrs	r2, r2, #16
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	4463      	add	r3, ip
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4818      	ldr	r0, [pc, #96]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002d7e:	4684      	mov	ip, r0
 8002d80:	4463      	add	r3, ip
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6959      	ldr	r1, [r3, #20]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	891a      	ldrh	r2, [r3, #8]
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f003 fed1 	bl	8006b3c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	001a      	movs	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	18d3      	adds	r3, r2, r3
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_PCD_EP_DB_Transmit+0x858>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	2210      	movs	r2, #16
 8002db4:	4053      	eors	r3, r2
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4053      	eors	r3, r2
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	18d3      	adds	r3, r2, r3
 8002dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd0:	4905      	ldr	r1, [pc, #20]	; (8002de8 <HAL_PCD_EP_DB_Transmit+0x85c>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b00e      	add	sp, #56	; 0x38
 8002dde:	bdb0      	pop	{r4, r5, r7, pc}
 8002de0:	40009800 	.word	0x40009800
 8002de4:	07ff8fbf 	.word	0x07ff8fbf
 8002de8:	00008080 	.word	0x00008080

08002dec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	0008      	movs	r0, r1
 8002df6:	0011      	movs	r1, r2
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	240a      	movs	r4, #10
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	1c02      	adds	r2, r0, #0
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	2308      	movs	r3, #8
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	1c0a      	adds	r2, r1, #0
 8002e08:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e0a:	0021      	movs	r1, r4
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	2207      	movs	r2, #7
 8002e20:	401a      	ands	r2, r3
 8002e22:	0013      	movs	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	3338      	adds	r3, #56	; 0x38
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	3304      	adds	r3, #4
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e00c      	b.n	8002e50 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e36:	230a      	movs	r3, #10
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	3379      	adds	r3, #121	; 0x79
 8002e46:	33ff      	adds	r3, #255	; 0xff
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	18d3      	adds	r3, r2, r3
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e50:	2308      	movs	r3, #8
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	809a      	strh	r2, [r3, #4]
 8002e68:	e00b      	b.n	8002e82 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b007      	add	sp, #28
 8002e8a:	bd90      	pop	{r4, r7, pc}

08002e8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	23bf      	movs	r3, #191	; 0xbf
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	23bd      	movs	r3, #189	; 0xbd
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	2100      	movs	r1, #0
 8002eac:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b004      	add	sp, #16
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_PWREx_EnableVddUSB+0x18>)
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_PWREx_EnableVddUSB+0x18>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	00c9      	lsls	r1, r1, #3
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40007000 	.word	0x40007000

08002eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d11f      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	0013      	movs	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	189b      	adds	r3, r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4912      	ldr	r1, [pc, #72]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7fd f8f0 	bl	8000104 <__udivsi3>
 8002f24:	0003      	movs	r3, r0
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f2a:	e008      	b.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e001      	b.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e009      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	401a      	ands	r2, r3
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d0ed      	beq.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b004      	add	sp, #16
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	fffff9ff 	.word	0xfffff9ff
 8002f64:	20000000 	.word	0x20000000
 8002f68:	000f4240 	.word	0x000f4240

08002f6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	23e0      	movs	r3, #224	; 0xe0
 8002f76:	01db      	lsls	r3, r3, #7
 8002f78:	4013      	ands	r3, r2
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f000 fb50 	bl	8003638 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d100      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x20>
 8002fa2:	e07c      	b.n	800309e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa4:	4bc3      	ldr	r3, [pc, #780]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2238      	movs	r2, #56	; 0x38
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fae:	4bc1      	ldr	r3, [pc, #772]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x40>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d002      	beq.n	8002fca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	4bba      	ldr	r3, [pc, #744]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d062      	beq.n	800309c <HAL_RCC_OscConfig+0x118>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d15e      	bne.n	800309c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e32a      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	025b      	lsls	r3, r3, #9
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_OscConfig+0x7a>
 8002fee:	4bb1      	ldr	r3, [pc, #708]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4bb0      	ldr	r3, [pc, #704]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	0249      	lsls	r1, r1, #9
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e020      	b.n	8003040 <HAL_RCC_OscConfig+0xbc>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	23a0      	movs	r3, #160	; 0xa0
 8003004:	02db      	lsls	r3, r3, #11
 8003006:	429a      	cmp	r2, r3
 8003008:	d10e      	bne.n	8003028 <HAL_RCC_OscConfig+0xa4>
 800300a:	4baa      	ldr	r3, [pc, #680]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4ba9      	ldr	r3, [pc, #676]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	02c9      	lsls	r1, r1, #11
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	4ba6      	ldr	r3, [pc, #664]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4ba5      	ldr	r3, [pc, #660]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	0249      	lsls	r1, r1, #9
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xbc>
 8003028:	4ba2      	ldr	r3, [pc, #648]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4ba1      	ldr	r3, [pc, #644]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800302e:	49a2      	ldr	r1, [pc, #648]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003030:	400a      	ands	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4b9f      	ldr	r3, [pc, #636]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b9e      	ldr	r3, [pc, #632]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800303a:	49a0      	ldr	r1, [pc, #640]	; (80032bc <HAL_RCC_OscConfig+0x338>)
 800303c:	400a      	ands	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d014      	beq.n	8003072 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd fe60 	bl	8000d0c <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003052:	f7fd fe5b 	bl	8000d0c <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	; 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e2e9      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003064:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	4013      	ands	r3, r2
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0xce>
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fd fe4b 	bl	8000d0c <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fd fe46 	bl	8000d0c <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e2d4      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	4013      	ands	r3, r2
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0xf8>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d100      	bne.n	80030aa <HAL_RCC_OscConfig+0x126>
 80030a8:	e099      	b.n	80031de <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b82      	ldr	r3, [pc, #520]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2238      	movs	r2, #56	; 0x38
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_OscConfig+0x146>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d135      	bne.n	800313c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d0:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4013      	ands	r3, r2
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x164>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e2a7      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a74      	ldr	r2, [pc, #464]	; (80032c0 <HAL_RCC_OscConfig+0x33c>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d112      	bne.n	800312a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003104:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x340>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003118:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0adb      	lsrs	r3, r3, #11
 800311e:	2207      	movs	r2, #7
 8003120:	4013      	ands	r3, r2
 8003122:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x344>)
 8003124:	40da      	lsrs	r2, r3
 8003126:	4b69      	ldr	r3, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x348>)
 8003128:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800312a:	4b69      	ldr	r3, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x34c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0018      	movs	r0, r3
 8003130:	f7fd fd90 	bl	8000c54 <HAL_InitTick>
 8003134:	1e03      	subs	r3, r0, #0
 8003136:	d051      	beq.n	80031dc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e27d      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d030      	beq.n	80031a6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003144:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5e      	ldr	r2, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x340>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	4b58      	ldr	r3, [pc, #352]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	0049      	lsls	r1, r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fd fdd1 	bl	8000d0c <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7fd fdcc 	bl	8000d0c <HAL_GetTick>
 8003174:	0002      	movs	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e25a      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003182:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4013      	ands	r3, r2
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_RCC_OscConfig+0x33c>)
 8003194:	4013      	ands	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	4b45      	ldr	r3, [pc, #276]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	e01b      	b.n	80031de <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b42      	ldr	r3, [pc, #264]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80031ac:	4949      	ldr	r1, [pc, #292]	; (80032d4 <HAL_RCC_OscConfig+0x350>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fd fdab 	bl	8000d0c <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031bc:	f7fd fda6 	bl	8000d0c <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e234      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4013      	ands	r3, r2
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x238>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2208      	movs	r2, #8
 80031e4:	4013      	ands	r3, r2
 80031e6:	d047      	beq.n	8003278 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2238      	movs	r2, #56	; 0x38
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b18      	cmp	r3, #24
 80031f2:	d10a      	bne.n	800320a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80031f4:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d03c      	beq.n	8003278 <HAL_RCC_OscConfig+0x2f4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d138      	bne.n	8003278 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e216      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003218:	2101      	movs	r1, #1
 800321a:	430a      	orrs	r2, r1
 800321c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd fd75 	bl	8000d0c <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7fd fd70 	bl	8000d0c <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1fe      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	2202      	movs	r2, #2
 8003240:	4013      	ands	r3, r2
 8003242:	d0f1      	beq.n	8003228 <HAL_RCC_OscConfig+0x2a4>
 8003244:	e018      	b.n	8003278 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800324c:	2101      	movs	r1, #1
 800324e:	438a      	bics	r2, r1
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fd fd5b 	bl	8000d0c <HAL_GetTick>
 8003256:	0003      	movs	r3, r0
 8003258:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd fd56 	bl	8000d0c <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1e4      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d1f1      	bne.n	800325c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2204      	movs	r2, #4
 800327e:	4013      	ands	r3, r2
 8003280:	d100      	bne.n	8003284 <HAL_RCC_OscConfig+0x300>
 8003282:	e0c7      	b.n	8003414 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003284:	231f      	movs	r3, #31
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2238      	movs	r2, #56	; 0x38
 8003292:	4013      	ands	r3, r2
 8003294:	2b20      	cmp	r3, #32
 8003296:	d11f      	bne.n	80032d8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_OscConfig+0x330>)
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d100      	bne.n	80032a4 <HAL_RCC_OscConfig+0x320>
 80032a2:	e0b7      	b.n	8003414 <HAL_RCC_OscConfig+0x490>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d000      	beq.n	80032ae <HAL_RCC_OscConfig+0x32a>
 80032ac:	e0b2      	b.n	8003414 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1c2      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40021000 	.word	0x40021000
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	fffbffff 	.word	0xfffbffff
 80032c0:	ffff80ff 	.word	0xffff80ff
 80032c4:	ffffc7ff 	.word	0xffffc7ff
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	20000000 	.word	0x20000000
 80032d0:	20000004 	.word	0x20000004
 80032d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d8:	4bb5      	ldr	r3, [pc, #724]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	055b      	lsls	r3, r3, #21
 80032e0:	4013      	ands	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_OscConfig+0x364>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x366>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4bb0      	ldr	r3, [pc, #704]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80032f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f2:	4baf      	ldr	r3, [pc, #700]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	0549      	lsls	r1, r1, #21
 80032f8:	430a      	orrs	r2, r1
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80032fc:	4bac      	ldr	r3, [pc, #688]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80032fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	055b      	lsls	r3, r3, #21
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800330a:	231f      	movs	r3, #31
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003312:	4ba8      	ldr	r3, [pc, #672]	; (80035b4 <HAL_RCC_OscConfig+0x630>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4013      	ands	r3, r2
 800331c:	d11a      	bne.n	8003354 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800331e:	4ba5      	ldr	r3, [pc, #660]	; (80035b4 <HAL_RCC_OscConfig+0x630>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4ba4      	ldr	r3, [pc, #656]	; (80035b4 <HAL_RCC_OscConfig+0x630>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0049      	lsls	r1, r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800332c:	f7fd fcee 	bl	8000d0c <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd fce9 	bl	8000d0c <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e177      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b9a      	ldr	r3, [pc, #616]	; (80035b4 <HAL_RCC_OscConfig+0x630>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x3e6>
 800335c:	4b94      	ldr	r3, [pc, #592]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800335e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003360:	4b93      	ldr	r3, [pc, #588]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003362:	2101      	movs	r1, #1
 8003364:	430a      	orrs	r2, r1
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x420>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x408>
 8003372:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003376:	4b8e      	ldr	r3, [pc, #568]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003378:	2104      	movs	r1, #4
 800337a:	430a      	orrs	r2, r1
 800337c:	65da      	str	r2, [r3, #92]	; 0x5c
 800337e:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003380:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003382:	4b8b      	ldr	r3, [pc, #556]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003384:	2101      	movs	r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	65da      	str	r2, [r3, #92]	; 0x5c
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x420>
 800338c:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800338e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003390:	4b87      	ldr	r3, [pc, #540]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003392:	2101      	movs	r1, #1
 8003394:	438a      	bics	r2, r1
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c
 8003398:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800339a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800339c:	4b84      	ldr	r3, [pc, #528]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800339e:	2104      	movs	r1, #4
 80033a0:	438a      	bics	r2, r1
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d014      	beq.n	80033d6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fd fcae 	bl	8000d0c <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b4:	e009      	b.n	80033ca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fd fca9 	bl	8000d0c <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	4a7d      	ldr	r2, [pc, #500]	; (80035b8 <HAL_RCC_OscConfig+0x634>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e136      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ca:	4b79      	ldr	r3, [pc, #484]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2202      	movs	r2, #2
 80033d0:	4013      	ands	r3, r2
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x432>
 80033d4:	e013      	b.n	80033fe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fd fc99 	bl	8000d0c <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033de:	e009      	b.n	80033f4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fd fc94 	bl	8000d0c <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	4a73      	ldr	r2, [pc, #460]	; (80035b8 <HAL_RCC_OscConfig+0x634>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e121      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f4:	4b6e      	ldr	r3, [pc, #440]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2202      	movs	r2, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033fe:	231f      	movs	r3, #31
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b69      	ldr	r3, [pc, #420]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800340e:	496b      	ldr	r1, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x638>)
 8003410:	400a      	ands	r2, r1
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2220      	movs	r2, #32
 800341a:	4013      	ands	r3, r2
 800341c:	d039      	beq.n	8003492 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01b      	beq.n	800345e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003426:	4b62      	ldr	r3, [pc, #392]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	03c9      	lsls	r1, r1, #15
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fd fc6a 	bl	8000d0c <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343e:	f7fd fc65 	bl	8000d0c <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0f3      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003450:	4b57      	ldr	r3, [pc, #348]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	4013      	ands	r3, r2
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x4ba>
 800345c:	e019      	b.n	8003492 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003464:	4956      	ldr	r1, [pc, #344]	; (80035c0 <HAL_RCC_OscConfig+0x63c>)
 8003466:	400a      	ands	r2, r1
 8003468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fd fc4f 	bl	8000d0c <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003474:	f7fd fc4a 	bl	8000d0c <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0d8      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	4013      	ands	r3, r2
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d100      	bne.n	800349c <HAL_RCC_OscConfig+0x518>
 800349a:	e0cc      	b.n	8003636 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349c:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2238      	movs	r2, #56	; 0x38
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d100      	bne.n	80034aa <HAL_RCC_OscConfig+0x526>
 80034a8:	e07b      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d156      	bne.n	8003560 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b3e      	ldr	r3, [pc, #248]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80034b8:	4942      	ldr	r1, [pc, #264]	; (80035c4 <HAL_RCC_OscConfig+0x640>)
 80034ba:	400a      	ands	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fc25 	bl	8000d0c <HAL_GetTick>
 80034c2:	0003      	movs	r3, r0
 80034c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fd fc20 	bl	8000d0c <HAL_GetTick>
 80034cc:	0002      	movs	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0ae      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034da:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	049b      	lsls	r3, r3, #18
 80034e2:	4013      	ands	r3, r2
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e6:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a37      	ldr	r2, [pc, #220]	; (80035c8 <HAL_RCC_OscConfig+0x644>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	431a      	orrs	r2, r3
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003516:	430a      	orrs	r2, r1
 8003518:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0449      	lsls	r1, r1, #17
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003528:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	0549      	lsls	r1, r1, #21
 8003532:	430a      	orrs	r2, r1
 8003534:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd fbe9 	bl	8000d0c <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fd fbe4 	bl	8000d0c <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e072      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	049b      	lsls	r3, r3, #18
 800355a:	4013      	ands	r3, r2
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x5bc>
 800355e:	e06a      	b.n	8003636 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003566:	4917      	ldr	r1, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x640>)
 8003568:	400a      	ands	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd fbce 	bl	8000d0c <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd fbc9 	bl	8000d0c <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e057      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	049b      	lsls	r3, r3, #18
 8003590:	4013      	ands	r3, r2
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800359a:	490c      	ldr	r1, [pc, #48]	; (80035cc <HAL_RCC_OscConfig+0x648>)
 800359c:	400a      	ands	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	e049      	b.n	8003636 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d112      	bne.n	80035d0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e044      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40007000 	.word	0x40007000
 80035b8:	00001388 	.word	0x00001388
 80035bc:	efffffff 	.word	0xefffffff
 80035c0:	ffbfffff 	.word	0xffbfffff
 80035c4:	feffffff 	.word	0xfeffffff
 80035c8:	11c1808c 	.word	0x11c1808c
 80035cc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x6bc>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2203      	movs	r2, #3
 80035da:	401a      	ands	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d126      	bne.n	8003632 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2270      	movs	r2, #112	; 0x70
 80035e8:	401a      	ands	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d11f      	bne.n	8003632 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	23fe      	movs	r3, #254	; 0xfe
 80035f6:	01db      	lsls	r3, r3, #7
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d116      	bne.n	8003632 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	23f8      	movs	r3, #248	; 0xf8
 8003608:	039b      	lsls	r3, r3, #14
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d10e      	bne.n	8003632 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	23e0      	movs	r3, #224	; 0xe0
 8003618:	051b      	lsls	r3, r3, #20
 800361a:	401a      	ands	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	0f5b      	lsrs	r3, r3, #29
 8003628:	075a      	lsls	r2, r3, #29
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b008      	add	sp, #32
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0e9      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b76      	ldr	r3, [pc, #472]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2207      	movs	r2, #7
 800365e:	4013      	ands	r3, r2
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d91e      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b73      	ldr	r3, [pc, #460]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2207      	movs	r2, #7
 800366c:	4393      	bics	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	4b70      	ldr	r3, [pc, #448]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003678:	f7fd fb48 	bl	8000d0c <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003680:	e009      	b.n	8003696 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003682:	f7fd fb43 	bl	8000d0c <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	4a6a      	ldr	r2, [pc, #424]	; (8003838 <HAL_RCC_ClockConfig+0x1f4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0ca      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2207      	movs	r2, #7
 800369c:	4013      	ands	r3, r2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1ee      	bne.n	8003682 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2202      	movs	r2, #2
 80036aa:	4013      	ands	r3, r2
 80036ac:	d015      	beq.n	80036da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2204      	movs	r2, #4
 80036b4:	4013      	ands	r3, r2
 80036b6:	d006      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036b8:	4b60      	ldr	r3, [pc, #384]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80036be:	21e0      	movs	r1, #224	; 0xe0
 80036c0:	01c9      	lsls	r1, r1, #7
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <HAL_RCC_ClockConfig+0x1fc>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	d057      	beq.n	8003794 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	4013      	ands	r3, r2
 80036f6:	d12b      	bne.n	8003750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e097      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d107      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003704:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	049b      	lsls	r3, r3, #18
 800370c:	4013      	ands	r3, r2
 800370e:	d11f      	bne.n	8003750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e08b      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4013      	ands	r3, r2
 8003726:	d113      	bne.n	8003750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e07f      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d106      	bne.n	8003742 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	2202      	movs	r2, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d108      	bne.n	8003750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e074      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	2202      	movs	r2, #2
 8003748:	4013      	ands	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e06d      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003750:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2207      	movs	r2, #7
 8003756:	4393      	bics	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd fad2 	bl	8000d0c <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376c:	e009      	b.n	8003782 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376e:	f7fd facd 	bl	8000d0c <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <HAL_RCC_ClockConfig+0x1f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e054      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2238      	movs	r2, #56	; 0x38
 8003788:	401a      	ands	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	429a      	cmp	r2, r3
 8003792:	d1ec      	bne.n	800376e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2207      	movs	r2, #7
 800379a:	4013      	ands	r3, r2
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d21e      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2207      	movs	r2, #7
 80037a8:	4393      	bics	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037b4:	f7fd faaa 	bl	8000d0c <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037bc:	e009      	b.n	80037d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037be:	f7fd faa5 	bl	8000d0c <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_RCC_ClockConfig+0x1f4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e02c      	b.n	800382c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2207      	movs	r2, #7
 80037d8:	4013      	ands	r3, r2
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1ee      	bne.n	80037be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2204      	movs	r2, #4
 80037e6:	4013      	ands	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_ClockConfig+0x200>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80037fe:	f000 f829 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003802:	0001      	movs	r1, r0
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_RCC_ClockConfig+0x1f8>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	220f      	movs	r2, #15
 800380c:	401a      	ands	r2, r3
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <HAL_RCC_ClockConfig+0x204>)
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	58d3      	ldr	r3, [r2, r3]
 8003814:	221f      	movs	r2, #31
 8003816:	4013      	ands	r3, r2
 8003818:	000a      	movs	r2, r1
 800381a:	40da      	lsrs	r2, r3
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_ClockConfig+0x208>)
 800381e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x20c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd fa15 	bl	8000c54 <HAL_InitTick>
 800382a:	0003      	movs	r3, r0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b004      	add	sp, #16
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40022000 	.word	0x40022000
 8003838:	00001388 	.word	0x00001388
 800383c:	40021000 	.word	0x40021000
 8003840:	fffff0ff 	.word	0xfffff0ff
 8003844:	ffff8fff 	.word	0xffff8fff
 8003848:	08009dac 	.word	0x08009dac
 800384c:	20000000 	.word	0x20000000
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385a:	4b3c      	ldr	r3, [pc, #240]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2238      	movs	r2, #56	; 0x38
 8003860:	4013      	ands	r3, r2
 8003862:	d10f      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0adb      	lsrs	r3, r3, #11
 800386a:	2207      	movs	r2, #7
 800386c:	4013      	ands	r3, r2
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	0013      	movs	r3, r2
 8003874:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	4835      	ldr	r0, [pc, #212]	; (8003950 <HAL_RCC_GetSysClockFreq+0xfc>)
 800387a:	f7fc fc43 	bl	8000104 <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e05d      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2238      	movs	r2, #56	; 0x38
 800388a:	4013      	ands	r3, r2
 800388c:	2b08      	cmp	r3, #8
 800388e:	d102      	bne.n	8003896 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_RCC_GetSysClockFreq+0x100>)
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	e054      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2238      	movs	r2, #56	; 0x38
 800389c:	4013      	ands	r3, r2
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d138      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2203      	movs	r2, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	2207      	movs	r2, #7
 80038b4:	4013      	ands	r3, r2
 80038b6:	3301      	adds	r3, #1
 80038b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d10d      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4824      	ldr	r0, [pc, #144]	; (8003954 <HAL_RCC_GetSysClockFreq+0x100>)
 80038c4:	f7fc fc1e 	bl	8000104 <__udivsi3>
 80038c8:	0003      	movs	r3, r0
 80038ca:	0019      	movs	r1, r3
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	227f      	movs	r2, #127	; 0x7f
 80038d4:	4013      	ands	r3, r2
 80038d6:	434b      	muls	r3, r1
 80038d8:	617b      	str	r3, [r7, #20]
        break;
 80038da:	e00d      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	481c      	ldr	r0, [pc, #112]	; (8003950 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038e0:	f7fc fc10 	bl	8000104 <__udivsi3>
 80038e4:	0003      	movs	r3, r0
 80038e6:	0019      	movs	r1, r3
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	227f      	movs	r2, #127	; 0x7f
 80038f0:	4013      	ands	r3, r2
 80038f2:	434b      	muls	r3, r1
 80038f4:	617b      	str	r3, [r7, #20]
        break;
 80038f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	0f5b      	lsrs	r3, r3, #29
 80038fe:	2207      	movs	r2, #7
 8003900:	4013      	ands	r3, r2
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f7fc fbfb 	bl	8000104 <__udivsi3>
 800390e:	0003      	movs	r3, r0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e015      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2238      	movs	r2, #56	; 0x38
 800391a:	4013      	ands	r3, r2
 800391c:	2b20      	cmp	r3, #32
 800391e:	d103      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e00b      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_RCC_GetSysClockFreq+0xf8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2238      	movs	r2, #56	; 0x38
 800392e:	4013      	ands	r3, r2
 8003930:	2b18      	cmp	r3, #24
 8003932:	d103      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003934:	23fa      	movs	r3, #250	; 0xfa
 8003936:	01db      	lsls	r3, r3, #7
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e001      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003940:	693b      	ldr	r3, [r7, #16]
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	b006      	add	sp, #24
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40021000 	.word	0x40021000
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <HAL_RCC_GetHCLKFreq+0x10>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000000 	.word	0x20000000

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003970:	f7ff fff2 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003974:	0004      	movs	r4, r0
 8003976:	f7ff faf9 	bl	8002f6c <LL_RCC_GetAPB1Prescaler>
 800397a:	0003      	movs	r3, r0
 800397c:	0b1a      	lsrs	r2, r3, #12
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003980:	0092      	lsls	r2, r2, #2
 8003982:	58d3      	ldr	r3, [r2, r3]
 8003984:	221f      	movs	r2, #31
 8003986:	4013      	ands	r3, r2
 8003988:	40dc      	lsrs	r4, r3
 800398a:	0023      	movs	r3, r4
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bdb0      	pop	{r4, r5, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	08009dec 	.word	0x08009dec

08003998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039a0:	2313      	movs	r3, #19
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a8:	2312      	movs	r3, #18
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	029b      	lsls	r3, r3, #10
 80039b8:	4013      	ands	r3, r2
 80039ba:	d100      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039bc:	e0ad      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039be:	2011      	movs	r0, #17
 80039c0:	183b      	adds	r3, r7, r0
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	055b      	lsls	r3, r3, #21
 80039ce:	4013      	ands	r3, r2
 80039d0:	d110      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d6:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	0549      	lsls	r1, r1, #21
 80039dc:	430a      	orrs	r2, r1
 80039de:	63da      	str	r2, [r3, #60]	; 0x3c
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	055b      	lsls	r3, r3, #21
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ee:	183b      	adds	r3, r7, r0
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f4:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	0049      	lsls	r1, r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a02:	f7fd f983 	bl	8000d0c <HAL_GetTick>
 8003a06:	0003      	movs	r3, r0
 8003a08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0c:	f7fd f97e 	bl	8000d0c <HAL_GetTick>
 8003a10:	0002      	movs	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d904      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a1a:	2313      	movs	r3, #19
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	2203      	movs	r2, #3
 8003a20:	701a      	strb	r2, [r3, #0]
        break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d0ed      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a30:	2313      	movs	r3, #19
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d15e      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a3e:	23c0      	movs	r3, #192	; 0xc0
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d019      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d014      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	4a24      	ldr	r2, [pc, #144]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	0249      	lsls	r1, r1, #9
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a74:	491e      	ldr	r1, [pc, #120]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2201      	movs	r2, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	d016      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd f940 	bl	8000d0c <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a90:	e00c      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd f93b 	bl	8000d0c <HAL_GetTick>
 8003a96:	0002      	movs	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d904      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003aa2:	2313      	movs	r3, #19
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	701a      	strb	r2, [r3, #0]
            break;
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d0ed      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003ab6:	2313      	movs	r3, #19
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ad4:	e016      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad6:	2312      	movs	r3, #18
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	2213      	movs	r2, #19
 8003adc:	18ba      	adds	r2, r7, r2
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	fffffcff 	.word	0xfffffcff
 8003af0:	fffeffff 	.word	0xfffeffff
 8003af4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	2312      	movs	r3, #18
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2213      	movs	r2, #19
 8003afe:	18ba      	adds	r2, r7, r2
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b04:	2311      	movs	r3, #17
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4bb6      	ldr	r3, [pc, #728]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b12:	4bb5      	ldr	r3, [pc, #724]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b14:	49b5      	ldr	r1, [pc, #724]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4013      	ands	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b24:	4bb0      	ldr	r3, [pc, #704]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4bad      	ldr	r3, [pc, #692]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b42:	4ba9      	ldr	r3, [pc, #676]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	220c      	movs	r2, #12
 8003b48:	4393      	bics	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	4ba5      	ldr	r3, [pc, #660]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b60:	4ba1      	ldr	r3, [pc, #644]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	2230      	movs	r2, #48	; 0x30
 8003b66:	4393      	bics	r3, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4b9e      	ldr	r3, [pc, #632]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b70:	430a      	orrs	r2, r1
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b7e:	4b9a      	ldr	r3, [pc, #616]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	4a9b      	ldr	r2, [pc, #620]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	4b96      	ldr	r3, [pc, #600]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	015b      	lsls	r3, r3, #5
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003b9e:	4b92      	ldr	r3, [pc, #584]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	4a94      	ldr	r2, [pc, #592]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	4b8e      	ldr	r3, [pc, #568]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bbe:	4b8a      	ldr	r3, [pc, #552]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	4a8d      	ldr	r2, [pc, #564]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bcc:	4b86      	ldr	r3, [pc, #536]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bde:	4b82      	ldr	r3, [pc, #520]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	4a86      	ldr	r2, [pc, #536]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfc:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	4a7f      	ldr	r2, [pc, #508]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	4b77      	ldr	r3, [pc, #476]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2240      	movs	r2, #64	; 0x40
 8003c16:	4013      	ands	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1a:	4b73      	ldr	r3, [pc, #460]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	4a79      	ldr	r2, [pc, #484]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	01db      	lsls	r3, r3, #7
 8003c36:	4013      	ands	r3, r2
 8003c38:	d015      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c3a:	4b6b      	ldr	r3, [pc, #428]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	0899      	lsrs	r1, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	05db      	lsls	r3, r3, #23
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d106      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c58:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	4b62      	ldr	r3, [pc, #392]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	0249      	lsls	r1, r1, #9
 8003c62:	430a      	orrs	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	031b      	lsls	r3, r3, #12
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c72:	4b5d      	ldr	r3, [pc, #372]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	4393      	bics	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	039b      	lsls	r3, r3, #14
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d016      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c92:	4b55      	ldr	r3, [pc, #340]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	4a5c      	ldr	r2, [pc, #368]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	03db      	lsls	r3, r3, #15
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cb2:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0449      	lsls	r1, r1, #17
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	03db      	lsls	r3, r3, #15
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d016      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	4a4e      	ldr	r2, [pc, #312]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	045b      	lsls	r3, r3, #17
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d106      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cec:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	0449      	lsls	r1, r1, #17
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	4013      	ands	r3, r2
 8003d04:	d014      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1a      	ldr	r2, [r3, #32]
 8003d14:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d106      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d22:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0249      	lsls	r1, r1, #9
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d014      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	220c      	movs	r2, #12
 8003d42:	4393      	bics	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d106      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d58:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d5e:	2180      	movs	r1, #128	; 0x80
 8003d60:	0249      	lsls	r1, r1, #9
 8003d62:	430a      	orrs	r2, r1
 8003d64:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	045b      	lsls	r3, r3, #17
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d016      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d106      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0449      	lsls	r1, r1, #17
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	049b      	lsls	r3, r3, #18
 8003da8:	4013      	ands	r3, r2
 8003daa:	d016      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0449      	lsls	r1, r1, #17
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003dda:	2312      	movs	r3, #18
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b006      	add	sp, #24
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	efffffff 	.word	0xefffffff
 8003df0:	fffff3ff 	.word	0xfffff3ff
 8003df4:	fffffcff 	.word	0xfffffcff
 8003df8:	fff3ffff 	.word	0xfff3ffff
 8003dfc:	ffcfffff 	.word	0xffcfffff
 8003e00:	ffffcfff 	.word	0xffffcfff
 8003e04:	ffff3fff 	.word	0xffff3fff
 8003e08:	ffbfffff 	.word	0xffbfffff
 8003e0c:	feffffff 	.word	0xfeffffff

08003e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e046      	b.n	8003eb0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2288      	movs	r2, #136	; 0x88
 8003e26:	589b      	ldr	r3, [r3, r2]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2284      	movs	r2, #132	; 0x84
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7fc fe38 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2288      	movs	r2, #136	; 0x88
 8003e40:	2124      	movs	r1, #36	; 0x24
 8003e42:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2101      	movs	r1, #1
 8003e50:	438a      	bics	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f000 f830 	bl	8003ebc <UART_SetConfig>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e024      	b.n	8003eb0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 fb79 	bl	8004568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	490d      	ldr	r1, [pc, #52]	; (8003eb8 <HAL_UART_Init+0xa8>)
 8003e82:	400a      	ands	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	212a      	movs	r1, #42	; 0x2a
 8003e92:	438a      	bics	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 fc11 	bl	80046d0 <UART_CheckIdleState>
 8003eae:	0003      	movs	r3, r0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	ffffb7ff 	.word	0xffffb7ff

08003ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b090      	sub	sp, #64	; 0x40
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec4:	231a      	movs	r3, #26
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4ac1      	ldr	r2, [pc, #772]	; (80041f4 <UART_SetConfig+0x338>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	430b      	orrs	r3, r1
 8003efc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4abc      	ldr	r2, [pc, #752]	; (80041f8 <UART_SetConfig+0x33c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0018      	movs	r0, r3
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	68d9      	ldr	r1, [r3, #12]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	0003      	movs	r3, r0
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4ab6      	ldr	r2, [pc, #728]	; (80041fc <UART_SetConfig+0x340>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <UART_SetConfig+0x80>
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4ab4      	ldr	r2, [pc, #720]	; (8004200 <UART_SetConfig+0x344>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4ab0      	ldr	r2, [pc, #704]	; (8004204 <UART_SetConfig+0x348>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	220f      	movs	r2, #15
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	0003      	movs	r3, r0
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4aa5      	ldr	r2, [pc, #660]	; (8004208 <UART_SetConfig+0x34c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d131      	bne.n	8003fda <UART_SetConfig+0x11e>
 8003f76:	4ba5      	ldr	r3, [pc, #660]	; (800420c <UART_SetConfig+0x350>)
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d01d      	beq.n	8003fbe <UART_SetConfig+0x102>
 8003f82:	d823      	bhi.n	8003fcc <UART_SetConfig+0x110>
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d00c      	beq.n	8003fa2 <UART_SetConfig+0xe6>
 8003f88:	d820      	bhi.n	8003fcc <UART_SetConfig+0x110>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <UART_SetConfig+0xd8>
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00e      	beq.n	8003fb0 <UART_SetConfig+0xf4>
 8003f92:	e01b      	b.n	8003fcc <UART_SetConfig+0x110>
 8003f94:	231b      	movs	r3, #27
 8003f96:	2220      	movs	r2, #32
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	19db      	adds	r3, r3, r7
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e154      	b.n	800424c <UART_SetConfig+0x390>
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	2202      	movs	r2, #2
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e14d      	b.n	800424c <UART_SetConfig+0x390>
 8003fb0:	231b      	movs	r3, #27
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	19db      	adds	r3, r3, r7
 8003fb8:	2204      	movs	r2, #4
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e146      	b.n	800424c <UART_SetConfig+0x390>
 8003fbe:	231b      	movs	r3, #27
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	19db      	adds	r3, r3, r7
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e13f      	b.n	800424c <UART_SetConfig+0x390>
 8003fcc:	231b      	movs	r3, #27
 8003fce:	2220      	movs	r2, #32
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e138      	b.n	800424c <UART_SetConfig+0x390>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a8c      	ldr	r2, [pc, #560]	; (8004210 <UART_SetConfig+0x354>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d131      	bne.n	8004048 <UART_SetConfig+0x18c>
 8003fe4:	4b89      	ldr	r3, [pc, #548]	; (800420c <UART_SetConfig+0x350>)
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	220c      	movs	r2, #12
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d01d      	beq.n	800402c <UART_SetConfig+0x170>
 8003ff0:	d823      	bhi.n	800403a <UART_SetConfig+0x17e>
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d00c      	beq.n	8004010 <UART_SetConfig+0x154>
 8003ff6:	d820      	bhi.n	800403a <UART_SetConfig+0x17e>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <UART_SetConfig+0x146>
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d00e      	beq.n	800401e <UART_SetConfig+0x162>
 8004000:	e01b      	b.n	800403a <UART_SetConfig+0x17e>
 8004002:	231b      	movs	r3, #27
 8004004:	2220      	movs	r2, #32
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e11d      	b.n	800424c <UART_SetConfig+0x390>
 8004010:	231b      	movs	r3, #27
 8004012:	2220      	movs	r2, #32
 8004014:	189b      	adds	r3, r3, r2
 8004016:	19db      	adds	r3, r3, r7
 8004018:	2202      	movs	r2, #2
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e116      	b.n	800424c <UART_SetConfig+0x390>
 800401e:	231b      	movs	r3, #27
 8004020:	2220      	movs	r2, #32
 8004022:	189b      	adds	r3, r3, r2
 8004024:	19db      	adds	r3, r3, r7
 8004026:	2204      	movs	r2, #4
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e10f      	b.n	800424c <UART_SetConfig+0x390>
 800402c:	231b      	movs	r3, #27
 800402e:	2220      	movs	r2, #32
 8004030:	189b      	adds	r3, r3, r2
 8004032:	19db      	adds	r3, r3, r7
 8004034:	2208      	movs	r2, #8
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e108      	b.n	800424c <UART_SetConfig+0x390>
 800403a:	231b      	movs	r3, #27
 800403c:	2220      	movs	r2, #32
 800403e:	189b      	adds	r3, r3, r2
 8004040:	19db      	adds	r3, r3, r7
 8004042:	2210      	movs	r2, #16
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e101      	b.n	800424c <UART_SetConfig+0x390>
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a71      	ldr	r2, [pc, #452]	; (8004214 <UART_SetConfig+0x358>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d131      	bne.n	80040b6 <UART_SetConfig+0x1fa>
 8004052:	4b6e      	ldr	r3, [pc, #440]	; (800420c <UART_SetConfig+0x350>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	2230      	movs	r2, #48	; 0x30
 8004058:	4013      	ands	r3, r2
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d01d      	beq.n	800409a <UART_SetConfig+0x1de>
 800405e:	d823      	bhi.n	80040a8 <UART_SetConfig+0x1ec>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d00c      	beq.n	800407e <UART_SetConfig+0x1c2>
 8004064:	d820      	bhi.n	80040a8 <UART_SetConfig+0x1ec>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <UART_SetConfig+0x1b4>
 800406a:	2b10      	cmp	r3, #16
 800406c:	d00e      	beq.n	800408c <UART_SetConfig+0x1d0>
 800406e:	e01b      	b.n	80040a8 <UART_SetConfig+0x1ec>
 8004070:	231b      	movs	r3, #27
 8004072:	2220      	movs	r2, #32
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19db      	adds	r3, r3, r7
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e0e6      	b.n	800424c <UART_SetConfig+0x390>
 800407e:	231b      	movs	r3, #27
 8004080:	2220      	movs	r2, #32
 8004082:	189b      	adds	r3, r3, r2
 8004084:	19db      	adds	r3, r3, r7
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e0df      	b.n	800424c <UART_SetConfig+0x390>
 800408c:	231b      	movs	r3, #27
 800408e:	2220      	movs	r2, #32
 8004090:	189b      	adds	r3, r3, r2
 8004092:	19db      	adds	r3, r3, r7
 8004094:	2204      	movs	r2, #4
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e0d8      	b.n	800424c <UART_SetConfig+0x390>
 800409a:	231b      	movs	r3, #27
 800409c:	2220      	movs	r2, #32
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	19db      	adds	r3, r3, r7
 80040a2:	2208      	movs	r2, #8
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e0d1      	b.n	800424c <UART_SetConfig+0x390>
 80040a8:	231b      	movs	r3, #27
 80040aa:	2220      	movs	r2, #32
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	2210      	movs	r2, #16
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e0ca      	b.n	800424c <UART_SetConfig+0x390>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a57      	ldr	r2, [pc, #348]	; (8004218 <UART_SetConfig+0x35c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d106      	bne.n	80040ce <UART_SetConfig+0x212>
 80040c0:	231b      	movs	r3, #27
 80040c2:	2220      	movs	r2, #32
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e0be      	b.n	800424c <UART_SetConfig+0x390>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a52      	ldr	r2, [pc, #328]	; (800421c <UART_SetConfig+0x360>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d106      	bne.n	80040e6 <UART_SetConfig+0x22a>
 80040d8:	231b      	movs	r3, #27
 80040da:	2220      	movs	r2, #32
 80040dc:	189b      	adds	r3, r3, r2
 80040de:	19db      	adds	r3, r3, r7
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	e0b2      	b.n	800424c <UART_SetConfig+0x390>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a4d      	ldr	r2, [pc, #308]	; (8004220 <UART_SetConfig+0x364>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d106      	bne.n	80040fe <UART_SetConfig+0x242>
 80040f0:	231b      	movs	r3, #27
 80040f2:	2220      	movs	r2, #32
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e0a6      	b.n	800424c <UART_SetConfig+0x390>
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a3e      	ldr	r2, [pc, #248]	; (80041fc <UART_SetConfig+0x340>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d13e      	bne.n	8004186 <UART_SetConfig+0x2ca>
 8004108:	4b40      	ldr	r3, [pc, #256]	; (800420c <UART_SetConfig+0x350>)
 800410a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800410c:	23c0      	movs	r3, #192	; 0xc0
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	4013      	ands	r3, r2
 8004112:	22c0      	movs	r2, #192	; 0xc0
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <UART_SetConfig+0x2ae>
 800411a:	22c0      	movs	r2, #192	; 0xc0
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	4293      	cmp	r3, r2
 8004120:	d82a      	bhi.n	8004178 <UART_SetConfig+0x2bc>
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	4293      	cmp	r3, r2
 8004128:	d011      	beq.n	800414e <UART_SetConfig+0x292>
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	0112      	lsls	r2, r2, #4
 800412e:	4293      	cmp	r3, r2
 8004130:	d822      	bhi.n	8004178 <UART_SetConfig+0x2bc>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <UART_SetConfig+0x284>
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	00d2      	lsls	r2, r2, #3
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <UART_SetConfig+0x2a0>
 800413e:	e01b      	b.n	8004178 <UART_SetConfig+0x2bc>
 8004140:	231b      	movs	r3, #27
 8004142:	2220      	movs	r2, #32
 8004144:	189b      	adds	r3, r3, r2
 8004146:	19db      	adds	r3, r3, r7
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e07e      	b.n	800424c <UART_SetConfig+0x390>
 800414e:	231b      	movs	r3, #27
 8004150:	2220      	movs	r2, #32
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e077      	b.n	800424c <UART_SetConfig+0x390>
 800415c:	231b      	movs	r3, #27
 800415e:	2220      	movs	r2, #32
 8004160:	189b      	adds	r3, r3, r2
 8004162:	19db      	adds	r3, r3, r7
 8004164:	2204      	movs	r2, #4
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e070      	b.n	800424c <UART_SetConfig+0x390>
 800416a:	231b      	movs	r3, #27
 800416c:	2220      	movs	r2, #32
 800416e:	189b      	adds	r3, r3, r2
 8004170:	19db      	adds	r3, r3, r7
 8004172:	2208      	movs	r2, #8
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e069      	b.n	800424c <UART_SetConfig+0x390>
 8004178:	231b      	movs	r3, #27
 800417a:	2220      	movs	r2, #32
 800417c:	189b      	adds	r3, r3, r2
 800417e:	19db      	adds	r3, r3, r7
 8004180:	2210      	movs	r2, #16
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e062      	b.n	800424c <UART_SetConfig+0x390>
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <UART_SetConfig+0x344>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d157      	bne.n	8004240 <UART_SetConfig+0x384>
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <UART_SetConfig+0x350>)
 8004192:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004194:	23c0      	movs	r3, #192	; 0xc0
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4013      	ands	r3, r2
 800419a:	22c0      	movs	r2, #192	; 0xc0
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4293      	cmp	r3, r2
 80041a0:	d040      	beq.n	8004224 <UART_SetConfig+0x368>
 80041a2:	22c0      	movs	r2, #192	; 0xc0
 80041a4:	0092      	lsls	r2, r2, #2
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d843      	bhi.n	8004232 <UART_SetConfig+0x376>
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	0092      	lsls	r2, r2, #2
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d011      	beq.n	80041d6 <UART_SetConfig+0x31a>
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	0092      	lsls	r2, r2, #2
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d83b      	bhi.n	8004232 <UART_SetConfig+0x376>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <UART_SetConfig+0x30c>
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	0052      	lsls	r2, r2, #1
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <UART_SetConfig+0x328>
 80041c6:	e034      	b.n	8004232 <UART_SetConfig+0x376>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2220      	movs	r2, #32
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e03a      	b.n	800424c <UART_SetConfig+0x390>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2220      	movs	r2, #32
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2202      	movs	r2, #2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e033      	b.n	800424c <UART_SetConfig+0x390>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2220      	movs	r2, #32
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2204      	movs	r2, #4
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e02c      	b.n	800424c <UART_SetConfig+0x390>
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	cfff69f3 	.word	0xcfff69f3
 80041f8:	ffffcfff 	.word	0xffffcfff
 80041fc:	40008000 	.word	0x40008000
 8004200:	40008400 	.word	0x40008400
 8004204:	11fff4ff 	.word	0x11fff4ff
 8004208:	40013800 	.word	0x40013800
 800420c:	40021000 	.word	0x40021000
 8004210:	40004400 	.word	0x40004400
 8004214:	40004800 	.word	0x40004800
 8004218:	40004c00 	.word	0x40004c00
 800421c:	40005000 	.word	0x40005000
 8004220:	40013c00 	.word	0x40013c00
 8004224:	231b      	movs	r3, #27
 8004226:	2220      	movs	r2, #32
 8004228:	189b      	adds	r3, r3, r2
 800422a:	19db      	adds	r3, r3, r7
 800422c:	2208      	movs	r2, #8
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e00c      	b.n	800424c <UART_SetConfig+0x390>
 8004232:	231b      	movs	r3, #27
 8004234:	2220      	movs	r2, #32
 8004236:	189b      	adds	r3, r3, r2
 8004238:	19db      	adds	r3, r3, r7
 800423a:	2210      	movs	r2, #16
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e005      	b.n	800424c <UART_SetConfig+0x390>
 8004240:	231b      	movs	r3, #27
 8004242:	2220      	movs	r2, #32
 8004244:	189b      	adds	r3, r3, r2
 8004246:	19db      	adds	r3, r3, r7
 8004248:	2210      	movs	r2, #16
 800424a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4ac1      	ldr	r2, [pc, #772]	; (8004558 <UART_SetConfig+0x69c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d005      	beq.n	8004262 <UART_SetConfig+0x3a6>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4ac0      	ldr	r2, [pc, #768]	; (800455c <UART_SetConfig+0x6a0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d000      	beq.n	8004262 <UART_SetConfig+0x3a6>
 8004260:	e093      	b.n	800438a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004262:	231b      	movs	r3, #27
 8004264:	2220      	movs	r2, #32
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d015      	beq.n	800429c <UART_SetConfig+0x3e0>
 8004270:	dc18      	bgt.n	80042a4 <UART_SetConfig+0x3e8>
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00d      	beq.n	8004292 <UART_SetConfig+0x3d6>
 8004276:	dc15      	bgt.n	80042a4 <UART_SetConfig+0x3e8>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <UART_SetConfig+0x3c6>
 800427c:	2b02      	cmp	r3, #2
 800427e:	d005      	beq.n	800428c <UART_SetConfig+0x3d0>
 8004280:	e010      	b.n	80042a4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004282:	f7ff fb73 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8004286:	0003      	movs	r3, r0
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800428a:	e014      	b.n	80042b6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428c:	4bb4      	ldr	r3, [pc, #720]	; (8004560 <UART_SetConfig+0x6a4>)
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004290:	e011      	b.n	80042b6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004292:	f7ff fadf 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004296:	0003      	movs	r3, r0
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800429a:	e00c      	b.n	80042b6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042a2:	e008      	b.n	80042b6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80042a8:	231a      	movs	r3, #26
 80042aa:	2220      	movs	r2, #32
 80042ac:	189b      	adds	r3, r3, r2
 80042ae:	19db      	adds	r3, r3, r7
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
        break;
 80042b4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d100      	bne.n	80042be <UART_SetConfig+0x402>
 80042bc:	e135      	b.n	800452a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	4ba8      	ldr	r3, [pc, #672]	; (8004564 <UART_SetConfig+0x6a8>)
 80042c4:	0052      	lsls	r2, r2, #1
 80042c6:	5ad3      	ldrh	r3, [r2, r3]
 80042c8:	0019      	movs	r1, r3
 80042ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042cc:	f7fb ff1a 	bl	8000104 <__udivsi3>
 80042d0:	0003      	movs	r3, r0
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	0013      	movs	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d305      	bcc.n	80042f0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d906      	bls.n	80042fe <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80042f0:	231a      	movs	r3, #26
 80042f2:	2220      	movs	r2, #32
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	19db      	adds	r3, r3, r7
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e044      	b.n	8004388 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430a:	4b96      	ldr	r3, [pc, #600]	; (8004564 <UART_SetConfig+0x6a8>)
 800430c:	0052      	lsls	r2, r2, #1
 800430e:	5ad3      	ldrh	r3, [r2, r3]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	69b8      	ldr	r0, [r7, #24]
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	f7fc f867 	bl	80003f0 <__aeabi_uldivmod>
 8004322:	0002      	movs	r2, r0
 8004324:	000b      	movs	r3, r1
 8004326:	0e11      	lsrs	r1, r2, #24
 8004328:	021d      	lsls	r5, r3, #8
 800432a:	430d      	orrs	r5, r1
 800432c:	0214      	lsls	r4, r2, #8
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68b8      	ldr	r0, [r7, #8]
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	1900      	adds	r0, r0, r4
 8004340:	4169      	adcs	r1, r5
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f7fc f84e 	bl	80003f0 <__aeabi_uldivmod>
 8004354:	0002      	movs	r2, r0
 8004356:	000b      	movs	r3, r1
 8004358:	0013      	movs	r3, r2
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435e:	23c0      	movs	r3, #192	; 0xc0
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	429a      	cmp	r2, r3
 8004364:	d309      	bcc.n	800437a <UART_SetConfig+0x4be>
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	035b      	lsls	r3, r3, #13
 800436c:	429a      	cmp	r2, r3
 800436e:	d204      	bcs.n	800437a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e006      	b.n	8004388 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800437a:	231a      	movs	r3, #26
 800437c:	2220      	movs	r2, #32
 800437e:	189b      	adds	r3, r3, r2
 8004380:	19db      	adds	r3, r3, r7
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004386:	e0d0      	b.n	800452a <UART_SetConfig+0x66e>
 8004388:	e0cf      	b.n	800452a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	429a      	cmp	r2, r3
 8004394:	d000      	beq.n	8004398 <UART_SetConfig+0x4dc>
 8004396:	e070      	b.n	800447a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004398:	231b      	movs	r3, #27
 800439a:	2220      	movs	r2, #32
 800439c:	189b      	adds	r3, r3, r2
 800439e:	19db      	adds	r3, r3, r7
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d015      	beq.n	80043d2 <UART_SetConfig+0x516>
 80043a6:	dc18      	bgt.n	80043da <UART_SetConfig+0x51e>
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d00d      	beq.n	80043c8 <UART_SetConfig+0x50c>
 80043ac:	dc15      	bgt.n	80043da <UART_SetConfig+0x51e>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <UART_SetConfig+0x4fc>
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d005      	beq.n	80043c2 <UART_SetConfig+0x506>
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b8:	f7ff fad8 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 80043bc:	0003      	movs	r3, r0
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043c0:	e014      	b.n	80043ec <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c2:	4b67      	ldr	r3, [pc, #412]	; (8004560 <UART_SetConfig+0x6a4>)
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043c6:	e011      	b.n	80043ec <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c8:	f7ff fa44 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80043cc:	0003      	movs	r3, r0
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043d0:	e00c      	b.n	80043ec <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043d8:	e008      	b.n	80043ec <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043de:	231a      	movs	r3, #26
 80043e0:	2220      	movs	r2, #32
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	19db      	adds	r3, r3, r7
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
        break;
 80043ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d100      	bne.n	80043f4 <UART_SetConfig+0x538>
 80043f2:	e09a      	b.n	800452a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f8:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <UART_SetConfig+0x6a8>)
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	5ad3      	ldrh	r3, [r2, r3]
 80043fe:	0019      	movs	r1, r3
 8004400:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004402:	f7fb fe7f 	bl	8000104 <__udivsi3>
 8004406:	0003      	movs	r3, r0
 8004408:	005a      	lsls	r2, r3, #1
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	18d2      	adds	r2, r2, r3
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	0019      	movs	r1, r3
 8004418:	0010      	movs	r0, r2
 800441a:	f7fb fe73 	bl	8000104 <__udivsi3>
 800441e:	0003      	movs	r3, r0
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2b0f      	cmp	r3, #15
 8004426:	d921      	bls.n	800446c <UART_SetConfig+0x5b0>
 8004428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	025b      	lsls	r3, r3, #9
 800442e:	429a      	cmp	r2, r3
 8004430:	d21c      	bcs.n	800446c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	b29a      	uxth	r2, r3
 8004436:	200e      	movs	r0, #14
 8004438:	2420      	movs	r4, #32
 800443a:	1903      	adds	r3, r0, r4
 800443c:	19db      	adds	r3, r3, r7
 800443e:	210f      	movs	r1, #15
 8004440:	438a      	bics	r2, r1
 8004442:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	2207      	movs	r2, #7
 800444c:	4013      	ands	r3, r2
 800444e:	b299      	uxth	r1, r3
 8004450:	1903      	adds	r3, r0, r4
 8004452:	19db      	adds	r3, r3, r7
 8004454:	1902      	adds	r2, r0, r4
 8004456:	19d2      	adds	r2, r2, r7
 8004458:	8812      	ldrh	r2, [r2, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1902      	adds	r2, r0, r4
 8004464:	19d2      	adds	r2, r2, r7
 8004466:	8812      	ldrh	r2, [r2, #0]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	e05e      	b.n	800452a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800446c:	231a      	movs	r3, #26
 800446e:	2220      	movs	r2, #32
 8004470:	189b      	adds	r3, r3, r2
 8004472:	19db      	adds	r3, r3, r7
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e057      	b.n	800452a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800447a:	231b      	movs	r3, #27
 800447c:	2220      	movs	r2, #32
 800447e:	189b      	adds	r3, r3, r2
 8004480:	19db      	adds	r3, r3, r7
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d015      	beq.n	80044b4 <UART_SetConfig+0x5f8>
 8004488:	dc18      	bgt.n	80044bc <UART_SetConfig+0x600>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d00d      	beq.n	80044aa <UART_SetConfig+0x5ee>
 800448e:	dc15      	bgt.n	80044bc <UART_SetConfig+0x600>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <UART_SetConfig+0x5de>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d005      	beq.n	80044a4 <UART_SetConfig+0x5e8>
 8004498:	e010      	b.n	80044bc <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449a:	f7ff fa67 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 800449e:	0003      	movs	r3, r0
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044a2:	e014      	b.n	80044ce <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <UART_SetConfig+0x6a4>)
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044a8:	e011      	b.n	80044ce <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7ff f9d3 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80044ae:	0003      	movs	r3, r0
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b2:	e00c      	b.n	80044ce <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044ba:	e008      	b.n	80044ce <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044c0:	231a      	movs	r3, #26
 80044c2:	2220      	movs	r2, #32
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
        break;
 80044cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02a      	beq.n	800452a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <UART_SetConfig+0x6a8>)
 80044da:	0052      	lsls	r2, r2, #1
 80044dc:	5ad3      	ldrh	r3, [r2, r3]
 80044de:	0019      	movs	r1, r3
 80044e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044e2:	f7fb fe0f 	bl	8000104 <__udivsi3>
 80044e6:	0003      	movs	r3, r0
 80044e8:	001a      	movs	r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	18d2      	adds	r2, r2, r3
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	0019      	movs	r1, r3
 80044f8:	0010      	movs	r0, r2
 80044fa:	f7fb fe03 	bl	8000104 <__udivsi3>
 80044fe:	0003      	movs	r3, r0
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b0f      	cmp	r3, #15
 8004506:	d90a      	bls.n	800451e <UART_SetConfig+0x662>
 8004508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	025b      	lsls	r3, r3, #9
 800450e:	429a      	cmp	r2, r3
 8004510:	d205      	bcs.n	800451e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	b29a      	uxth	r2, r3
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e005      	b.n	800452a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800451e:	231a      	movs	r3, #26
 8004520:	2220      	movs	r2, #32
 8004522:	189b      	adds	r3, r3, r2
 8004524:	19db      	adds	r3, r3, r7
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	226a      	movs	r2, #106	; 0x6a
 800452e:	2101      	movs	r1, #1
 8004530:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	2268      	movs	r2, #104	; 0x68
 8004536:	2101      	movs	r1, #1
 8004538:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2200      	movs	r2, #0
 800453e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	2200      	movs	r2, #0
 8004544:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004546:	231a      	movs	r3, #26
 8004548:	2220      	movs	r2, #32
 800454a:	189b      	adds	r3, r3, r2
 800454c:	19db      	adds	r3, r3, r7
 800454e:	781b      	ldrb	r3, [r3, #0]
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b010      	add	sp, #64	; 0x40
 8004556:	bdb0      	pop	{r4, r5, r7, pc}
 8004558:	40008000 	.word	0x40008000
 800455c:	40008400 	.word	0x40008400
 8004560:	00f42400 	.word	0x00f42400
 8004564:	08009e0c 	.word	0x08009e0c

08004568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	2201      	movs	r2, #1
 8004576:	4013      	ands	r3, r2
 8004578:	d00b      	beq.n	8004592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a4a      	ldr	r2, [pc, #296]	; (80046ac <UART_AdvFeatureConfig+0x144>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	2202      	movs	r2, #2
 8004598:	4013      	ands	r3, r2
 800459a:	d00b      	beq.n	80045b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <UART_AdvFeatureConfig+0x148>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2204      	movs	r2, #4
 80045ba:	4013      	ands	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a3b      	ldr	r2, [pc, #236]	; (80046b4 <UART_AdvFeatureConfig+0x14c>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	0019      	movs	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	2208      	movs	r2, #8
 80045dc:	4013      	ands	r3, r2
 80045de:	d00b      	beq.n	80045f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <UART_AdvFeatureConfig+0x150>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	2210      	movs	r2, #16
 80045fe:	4013      	ands	r3, r2
 8004600:	d00b      	beq.n	800461a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <UART_AdvFeatureConfig+0x154>)
 800460a:	4013      	ands	r3, r2
 800460c:	0019      	movs	r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	2220      	movs	r2, #32
 8004620:	4013      	ands	r3, r2
 8004622:	d00b      	beq.n	800463c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	4a25      	ldr	r2, [pc, #148]	; (80046c0 <UART_AdvFeatureConfig+0x158>)
 800462c:	4013      	ands	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	4013      	ands	r3, r2
 8004644:	d01d      	beq.n	8004682 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <UART_AdvFeatureConfig+0x15c>)
 800464e:	4013      	ands	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	035b      	lsls	r3, r3, #13
 8004666:	429a      	cmp	r2, r3
 8004668:	d10b      	bne.n	8004682 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <UART_AdvFeatureConfig+0x160>)
 8004672:	4013      	ands	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	4013      	ands	r3, r2
 800468a:	d00b      	beq.n	80046a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <UART_AdvFeatureConfig+0x164>)
 8004694:	4013      	ands	r3, r2
 8004696:	0019      	movs	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	fffdffff 	.word	0xfffdffff
 80046b0:	fffeffff 	.word	0xfffeffff
 80046b4:	fffbffff 	.word	0xfffbffff
 80046b8:	ffff7fff 	.word	0xffff7fff
 80046bc:	ffffefff 	.word	0xffffefff
 80046c0:	ffffdfff 	.word	0xffffdfff
 80046c4:	ffefffff 	.word	0xffefffff
 80046c8:	ff9fffff 	.word	0xff9fffff
 80046cc:	fff7ffff 	.word	0xfff7ffff

080046d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2290      	movs	r2, #144	; 0x90
 80046dc:	2100      	movs	r1, #0
 80046de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046e0:	f7fc fb14 	bl	8000d0c <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2208      	movs	r2, #8
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d10c      	bne.n	8004710 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	0391      	lsls	r1, r2, #14
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <UART_CheckIdleState+0x98>)
 8004700:	9200      	str	r2, [sp, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	f000 f832 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004708:	1e03      	subs	r3, r0, #0
 800470a:	d001      	beq.n	8004710 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e026      	b.n	800475e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2204      	movs	r2, #4
 8004718:	4013      	ands	r3, r2
 800471a:	2b04      	cmp	r3, #4
 800471c:	d10c      	bne.n	8004738 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2280      	movs	r2, #128	; 0x80
 8004722:	03d1      	lsls	r1, r2, #15
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <UART_CheckIdleState+0x98>)
 8004728:	9200      	str	r2, [sp, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	f000 f81e 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004730:	1e03      	subs	r3, r0, #0
 8004732:	d001      	beq.n	8004738 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e012      	b.n	800475e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2288      	movs	r2, #136	; 0x88
 800473c:	2120      	movs	r1, #32
 800473e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	228c      	movs	r2, #140	; 0x8c
 8004744:	2120      	movs	r1, #32
 8004746:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2284      	movs	r2, #132	; 0x84
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	01ffffff 	.word	0x01ffffff

0800476c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b094      	sub	sp, #80	; 0x50
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	1dfb      	adds	r3, r7, #7
 800477a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	e0a7      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004780:	3301      	adds	r3, #1
 8004782:	d100      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004784:	e0a3      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fc fac1 	bl	8000d0c <HAL_GetTick>
 800478a:	0002      	movs	r2, r0
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <UART_WaitOnFlagUntilTimeout+0x30>
 8004796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004798:	2b00      	cmp	r3, #0
 800479a:	d13f      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479c:	f3ef 8310 	mrs	r3, PRIMASK
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047a4:	647b      	str	r3, [r7, #68]	; 0x44
 80047a6:	2301      	movs	r3, #1
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	f383 8810 	msr	PRIMASK, r3
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	494e      	ldr	r1, [pc, #312]	; (80048f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80047be:	400a      	ands	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ce:	f3ef 8310 	mrs	r3, PRIMASK
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	643b      	str	r3, [r7, #64]	; 0x40
 80047d8:	2301      	movs	r3, #1
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	f383 8810 	msr	PRIMASK, r3
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2101      	movs	r1, #1
 80047f0:	438a      	bics	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	f383 8810 	msr	PRIMASK, r3
}
 80047fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2288      	movs	r2, #136	; 0x88
 8004804:	2120      	movs	r1, #32
 8004806:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	228c      	movs	r2, #140	; 0x8c
 800480c:	2120      	movs	r1, #32
 800480e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2284      	movs	r2, #132	; 0x84
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e069      	b.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2204      	movs	r2, #4
 8004824:	4013      	ands	r3, r2
 8004826:	d052      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	401a      	ands	r2, r3
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	429a      	cmp	r2, r3
 800483a:	d148      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004846:	f3ef 8310 	mrs	r3, PRIMASK
 800484a:	613b      	str	r3, [r7, #16]
  return(result);
 800484c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f383 8810 	msr	PRIMASK, r3
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4924      	ldr	r1, [pc, #144]	; (80048f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004868:	400a      	ands	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f383 8810 	msr	PRIMASK, r3
}
 8004876:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004878:	f3ef 8310 	mrs	r3, PRIMASK
 800487c:	61fb      	str	r3, [r7, #28]
  return(result);
 800487e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48
 8004882:	2301      	movs	r3, #1
 8004884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	438a      	bics	r2, r1
 800489c:	609a      	str	r2, [r3, #8]
 800489e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	f383 8810 	msr	PRIMASK, r3
}
 80048a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2288      	movs	r2, #136	; 0x88
 80048ae:	2120      	movs	r1, #32
 80048b0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	228c      	movs	r2, #140	; 0x8c
 80048b6:	2120      	movs	r1, #32
 80048b8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2290      	movs	r2, #144	; 0x90
 80048be:	2120      	movs	r1, #32
 80048c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2284      	movs	r2, #132	; 0x84
 80048c6:	2100      	movs	r1, #0
 80048c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e010      	b.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	425a      	negs	r2, r3
 80048de:	4153      	adcs	r3, r2
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	001a      	movs	r2, r3
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d100      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0x182>
 80048ec:	e747      	b.n	800477e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b014      	add	sp, #80	; 0x50
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fffffe5f 	.word	0xfffffe5f

080048fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2284      	movs	r2, #132	; 0x84
 8004908:	5c9b      	ldrb	r3, [r3, r2]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_UARTEx_DisableFifoMode+0x16>
 800490e:	2302      	movs	r3, #2
 8004910:	e027      	b.n	8004962 <HAL_UARTEx_DisableFifoMode+0x66>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2284      	movs	r2, #132	; 0x84
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2288      	movs	r2, #136	; 0x88
 800491e:	2124      	movs	r1, #36	; 0x24
 8004920:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2101      	movs	r1, #1
 8004936:	438a      	bics	r2, r1
 8004938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a0b      	ldr	r2, [pc, #44]	; (800496c <HAL_UARTEx_DisableFifoMode+0x70>)
 800493e:	4013      	ands	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2288      	movs	r2, #136	; 0x88
 8004954:	2120      	movs	r1, #32
 8004956:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2284      	movs	r2, #132	; 0x84
 800495c:	2100      	movs	r1, #0
 800495e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b004      	add	sp, #16
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	dfffffff 	.word	0xdfffffff

08004970 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2284      	movs	r2, #132	; 0x84
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e02e      	b.n	80049e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2284      	movs	r2, #132	; 0x84
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2288      	movs	r2, #136	; 0x88
 8004994:	2124      	movs	r1, #36	; 0x24
 8004996:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2101      	movs	r1, #1
 80049ac:	438a      	bics	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	08d9      	lsrs	r1, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 f854 	bl	8004a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2288      	movs	r2, #136	; 0x88
 80049d8:	2120      	movs	r1, #32
 80049da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2284      	movs	r2, #132	; 0x84
 80049e0:	2100      	movs	r1, #0
 80049e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b004      	add	sp, #16
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2284      	movs	r2, #132	; 0x84
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e02f      	b.n	8004a68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2288      	movs	r2, #136	; 0x88
 8004a14:	2124      	movs	r1, #36	; 0x24
 8004a16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	438a      	bics	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 f813 	bl	8004a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2288      	movs	r2, #136	; 0x88
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2284      	movs	r2, #132	; 0x84
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b004      	add	sp, #16
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	f1ffffff 	.word	0xf1ffffff

08004a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	226a      	movs	r2, #106	; 0x6a
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2268      	movs	r2, #104	; 0x68
 8004a90:	2101      	movs	r1, #1
 8004a92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a94:	e043      	b.n	8004b1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a96:	260f      	movs	r6, #15
 8004a98:	19bb      	adds	r3, r7, r6
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a9e:	200e      	movs	r0, #14
 8004aa0:	183b      	adds	r3, r7, r0
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	0e5b      	lsrs	r3, r3, #25
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	240d      	movs	r4, #13
 8004ab2:	193b      	adds	r3, r7, r4
 8004ab4:	2107      	movs	r1, #7
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	0f5b      	lsrs	r3, r3, #29
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	250c      	movs	r5, #12
 8004ac6:	197b      	adds	r3, r7, r5
 8004ac8:	2107      	movs	r1, #7
 8004aca:	400a      	ands	r2, r1
 8004acc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ace:	183b      	adds	r3, r7, r0
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	197a      	adds	r2, r7, r5
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	4914      	ldr	r1, [pc, #80]	; (8004b28 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ad8:	5c8a      	ldrb	r2, [r1, r2]
 8004ada:	435a      	muls	r2, r3
 8004adc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ade:	197b      	adds	r3, r7, r5
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <UARTEx_SetNbDataToProcess+0xb8>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	f7fb fb96 	bl	8000218 <__divsi3>
 8004aec:	0003      	movs	r3, r0
 8004aee:	b299      	uxth	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	226a      	movs	r2, #106	; 0x6a
 8004af4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004af6:	19bb      	adds	r3, r7, r6
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	193a      	adds	r2, r7, r4
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	490a      	ldr	r1, [pc, #40]	; (8004b28 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b00:	5c8a      	ldrb	r2, [r1, r2]
 8004b02:	435a      	muls	r2, r3
 8004b04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b06:	193b      	adds	r3, r7, r4
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <UARTEx_SetNbDataToProcess+0xb8>)
 8004b0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b0e:	0019      	movs	r1, r3
 8004b10:	f7fb fb82 	bl	8000218 <__divsi3>
 8004b14:	0003      	movs	r3, r0
 8004b16:	b299      	uxth	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2268      	movs	r2, #104	; 0x68
 8004b1c:	5299      	strh	r1, [r3, r2]
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b005      	add	sp, #20
 8004b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	08009e24 	.word	0x08009e24
 8004b2c:	08009e2c 	.word	0x08009e2c

08004b30 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	435b      	muls	r3, r3
 8004b44:	001a      	movs	r2, r3
 8004b46:	0013      	movs	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	400b      	ands	r3, r1
 8004b50:	001a      	movs	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	435b      	muls	r3, r3
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	434b      	muls	r3, r1
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b004      	add	sp, #16
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	43d2      	mvns	r2, r2
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	434b      	muls	r3, r1
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b004      	add	sp, #16
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6899      	ldr	r1, [r3, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	435b      	muls	r3, r3
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	0013      	movs	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	435b      	muls	r3, r3
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	434b      	muls	r3, r1
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	609a      	str	r2, [r3, #8]
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68d9      	ldr	r1, [r3, #12]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	435b      	muls	r3, r3
 8004bde:	001a      	movs	r2, r3
 8004be0:	0013      	movs	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	189b      	adds	r3, r3, r2
 8004be6:	43db      	mvns	r3, r3
 8004be8:	400b      	ands	r3, r1
 8004bea:	001a      	movs	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	435b      	muls	r3, r3
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	434b      	muls	r3, r1
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60da      	str	r2, [r3, #12]
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a19      	ldr	r1, [r3, #32]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	435b      	muls	r3, r3
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4353      	muls	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	435a      	muls	r2, r3
 8004c1e:	0013      	movs	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	43db      	mvns	r3, r3
 8004c26:	400b      	ands	r3, r1
 8004c28:	001a      	movs	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	435b      	muls	r3, r3
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	434b      	muls	r3, r1
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	434b      	muls	r3, r1
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	434b      	muls	r3, r1
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b004      	add	sp, #16
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	0a12      	lsrs	r2, r2, #8
 8004c60:	4353      	muls	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	0a12      	lsrs	r2, r2, #8
 8004c66:	4353      	muls	r3, r2
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	0a12      	lsrs	r2, r2, #8
 8004c6c:	435a      	muls	r2, r3
 8004c6e:	0013      	movs	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	43db      	mvns	r3, r3
 8004c76:	400b      	ands	r3, r1
 8004c78:	001a      	movs	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	0a09      	lsrs	r1, r1, #8
 8004c82:	434b      	muls	r3, r1
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	0a09      	lsrs	r1, r1, #8
 8004c88:	434b      	muls	r3, r1
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	0a09      	lsrs	r1, r1, #8
 8004c8e:	434b      	muls	r3, r1
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	434b      	muls	r3, r1
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004cb0:	e047      	b.n	8004d42 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4091      	lsls	r1, r2
 8004cbc:	000a      	movs	r2, r1
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d039      	beq.n	8004d3c <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d003      	beq.n	8004cd8 <LL_GPIO_Init+0x36>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d10d      	bne.n	8004cf4 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7ff ff56 	bl	8004b92 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7ff ff3a 	bl	8004b68 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7ff ff64 	bl	8004bca <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d111      	bne.n	8004d2e <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2bff      	cmp	r3, #255	; 0xff
 8004d0e:	d807      	bhi.n	8004d20 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7ff ff72 	bl	8004c02 <LL_GPIO_SetAFPin_0_7>
 8004d1e:	e006      	b.n	8004d2e <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7ff ff8d 	bl	8004c48 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff fefa 	bl	8004b30 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	40da      	lsrs	r2, r3
 8004d4a:	1e13      	subs	r3, r2, #0
 8004d4c:	d1b1      	bne.n	8004cb2 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b004      	add	sp, #16
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <USB_EnableGlobalInt+0x24>)
 8004d68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	0000bf80 	.word	0x0000bf80

08004d80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <USB_DisableGlobalInt+0x24>)
 8004d8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	43d2      	mvns	r2, r2
 8004d94:	401a      	ands	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b004      	add	sp, #16
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	0000bf80 	.word	0x0000bf80

08004da8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	000a      	movs	r2, r1
 8004db2:	1cfb      	adds	r3, r7, #3
 8004db4:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8004db6:	1cfb      	adds	r3, r7, #3
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	085a      	lsrs	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8004dca:	e006      	b.n	8004dda <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	0612      	lsls	r2, r2, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004de4:	b084      	sub	sp, #16
 8004de6:	b590      	push	{r4, r7, lr}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	2004      	movs	r0, #4
 8004df0:	2410      	movs	r4, #16
 8004df2:	1900      	adds	r0, r0, r4
 8004df4:	2408      	movs	r4, #8
 8004df6:	46a4      	mov	ip, r4
 8004df8:	44bc      	add	ip, r7
 8004dfa:	4460      	add	r0, ip
 8004dfc:	6001      	str	r1, [r0, #0]
 8004dfe:	6042      	str	r2, [r0, #4]
 8004e00:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	4393      	bics	r3, r2
 8004e10:	001a      	movs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2100      	movs	r1, #0
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7ff ffc4 	bl	8004da8 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bc90      	pop	{r4, r7}
 8004e30:	bc08      	pop	{r3}
 8004e32:	b004      	add	sp, #16
 8004e34:	4718      	bx	r3
	...

08004e38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b09e      	sub	sp, #120	; 0x78
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e42:	2377      	movs	r3, #119	; 0x77
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4ad8      	ldr	r2, [pc, #864]	; (80051b8 <USB_ActivateEndpoint+0x380>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	78db      	ldrb	r3, [r3, #3]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d00e      	beq.n	8004e82 <USB_ActivateEndpoint+0x4a>
 8004e64:	dc19      	bgt.n	8004e9a <USB_ActivateEndpoint+0x62>
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d01c      	beq.n	8004ea4 <USB_ActivateEndpoint+0x6c>
 8004e6a:	dc16      	bgt.n	8004e9a <USB_ActivateEndpoint+0x62>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <USB_ActivateEndpoint+0x3e>
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d00c      	beq.n	8004e8e <USB_ActivateEndpoint+0x56>
 8004e74:	e011      	b.n	8004e9a <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	0092      	lsls	r2, r2, #2
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004e80:	e011      	b.n	8004ea6 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e84:	22c0      	movs	r2, #192	; 0xc0
 8004e86:	00d2      	lsls	r2, r2, #3
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004e8c:	e00b      	b.n	8004ea6 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	00d2      	lsls	r2, r2, #3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004e98:	e005      	b.n	8004ea6 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8004e9a:	2377      	movs	r3, #119	; 0x77
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
      break;
 8004ea2:	e000      	b.n	8004ea6 <USB_ActivateEndpoint+0x6e>
      break;
 8004ea4:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004eb2:	49c2      	ldr	r1, [pc, #776]	; (80051bc <USB_ActivateEndpoint+0x384>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	18d3      	adds	r3, r2, r3
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4abe      	ldr	r2, [pc, #760]	; (80051c0 <USB_ActivateEndpoint+0x388>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	18d3      	adds	r3, r2, r3
 8004eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004edc:	49b7      	ldr	r1, [pc, #732]	; (80051bc <USB_ActivateEndpoint+0x384>)
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	7a9b      	ldrb	r3, [r3, #10]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d000      	beq.n	8004eec <USB_ActivateEndpoint+0xb4>
 8004eea:	e177      	b.n	80051dc <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d06e      	beq.n	8004fd2 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4ab2      	ldr	r2, [pc, #712]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004efc:	4694      	mov	ip, r2
 8004efe:	4463      	add	r3, ip
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	49ae      	ldr	r1, [pc, #696]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004f0a:	468c      	mov	ip, r1
 8004f0c:	4463      	add	r3, ip
 8004f0e:	0c12      	lsrs	r2, r2, #16
 8004f10:	0412      	lsls	r2, r2, #16
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4aaa      	ldr	r2, [pc, #680]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004f1c:	4694      	mov	ip, r2
 8004f1e:	4463      	add	r3, ip
 8004f20:	6819      	ldr	r1, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	889b      	ldrh	r3, [r3, #4]
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	009a      	lsls	r2, r3, #2
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	48a4      	ldr	r0, [pc, #656]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004f34:	4684      	mov	ip, r0
 8004f36:	4463      	add	r3, ip
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	18d3      	adds	r3, r2, r3
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2240      	movs	r2, #64	; 0x40
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d011      	beq.n	8004f76 <USB_ActivateEndpoint+0x13e>
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	18d3      	adds	r3, r2, r3
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a98      	ldr	r2, [pc, #608]	; (80051c0 <USB_ActivateEndpoint+0x388>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	18d3      	adds	r3, r2, r3
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4995      	ldr	r1, [pc, #596]	; (80051c8 <USB_ActivateEndpoint+0x390>)
 8004f72:	430a      	orrs	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	78db      	ldrb	r3, [r3, #3]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d016      	beq.n	8004fac <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	18d3      	adds	r3, r2, r3
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a90      	ldr	r2, [pc, #576]	; (80051cc <USB_ActivateEndpoint+0x394>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	4053      	eors	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	18d3      	adds	r3, r2, r3
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4985      	ldr	r1, [pc, #532]	; (80051bc <USB_ActivateEndpoint+0x384>)
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e270      	b.n	800548e <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	18d3      	adds	r3, r2, r3
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a84      	ldr	r2, [pc, #528]	; (80051cc <USB_ActivateEndpoint+0x394>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	497c      	ldr	r1, [pc, #496]	; (80051bc <USB_ActivateEndpoint+0x384>)
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e25d      	b.n	800548e <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4a7a      	ldr	r2, [pc, #488]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004fda:	4694      	mov	ip, r2
 8004fdc:	4463      	add	r3, ip
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4977      	ldr	r1, [pc, #476]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004fe8:	468c      	mov	ip, r1
 8004fea:	4463      	add	r3, ip
 8004fec:	0c12      	lsrs	r2, r2, #16
 8004fee:	0412      	lsls	r2, r2, #16
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4a72      	ldr	r2, [pc, #456]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8004ffa:	4694      	mov	ip, r2
 8004ffc:	4463      	add	r3, ip
 8004ffe:	6859      	ldr	r1, [r3, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	889b      	ldrh	r3, [r3, #4]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	b29b      	uxth	r3, r3
 8005008:	009a      	lsls	r2, r3, #2
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	486c      	ldr	r0, [pc, #432]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005012:	4684      	mov	ip, r0
 8005014:	4463      	add	r3, ip
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4a68      	ldr	r2, [pc, #416]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005022:	4694      	mov	ip, r2
 8005024:	4463      	add	r3, ip
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4965      	ldr	r1, [pc, #404]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005030:	468c      	mov	ip, r1
 8005032:	4463      	add	r3, ip
 8005034:	0412      	lsls	r2, r2, #16
 8005036:	0c12      	lsrs	r2, r2, #16
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b3e      	cmp	r3, #62	; 0x3e
 8005040:	d920      	bls.n	8005084 <USB_ActivateEndpoint+0x24c>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	221f      	movs	r2, #31
 8005050:	4013      	ands	r3, r2
 8005052:	d102      	bne.n	800505a <USB_ActivateEndpoint+0x222>
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	3b01      	subs	r3, #1
 8005058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4a58      	ldr	r2, [pc, #352]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005062:	4694      	mov	ip, r2
 8005064:	4463      	add	r3, ip
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	069b      	lsls	r3, r3, #26
 800506c:	431a      	orrs	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4953      	ldr	r1, [pc, #332]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005076:	468c      	mov	ip, r1
 8005078:	4463      	add	r3, ip
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	0609      	lsls	r1, r1, #24
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	e042      	b.n	800510a <USB_ActivateEndpoint+0x2d2>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d121      	bne.n	80050d0 <USB_ActivateEndpoint+0x298>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4a4c      	ldr	r2, [pc, #304]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005094:	4694      	mov	ip, r2
 8005096:	4463      	add	r3, ip
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4948      	ldr	r1, [pc, #288]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 80050a2:	468c      	mov	ip, r1
 80050a4:	4463      	add	r3, ip
 80050a6:	494a      	ldr	r1, [pc, #296]	; (80051d0 <USB_ActivateEndpoint+0x398>)
 80050a8:	400a      	ands	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4a44      	ldr	r2, [pc, #272]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 80050b4:	4694      	mov	ip, r2
 80050b6:	4463      	add	r3, ip
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4940      	ldr	r1, [pc, #256]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 80050c2:	468c      	mov	ip, r1
 80050c4:	4463      	add	r3, ip
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	0609      	lsls	r1, r1, #24
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	e01c      	b.n	800510a <USB_ActivateEndpoint+0x2d2>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2201      	movs	r2, #1
 80050de:	4013      	ands	r3, r2
 80050e0:	d002      	beq.n	80050e8 <USB_ActivateEndpoint+0x2b0>
 80050e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e4:	3301      	adds	r3, #1
 80050e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4a35      	ldr	r2, [pc, #212]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 80050f0:	4694      	mov	ip, r2
 80050f2:	4463      	add	r3, ip
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f8:	069a      	lsls	r2, r3, #26
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4830      	ldr	r0, [pc, #192]	; (80051c4 <USB_ActivateEndpoint+0x38c>)
 8005102:	4684      	mov	ip, r0
 8005104:	4463      	add	r3, ip
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	18d3      	adds	r3, r2, r3
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
 8005118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	01db      	lsls	r3, r3, #7
 800511e:	4013      	ands	r3, r2
 8005120:	d011      	beq.n	8005146 <USB_ActivateEndpoint+0x30e>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <USB_ActivateEndpoint+0x388>)
 8005130:	4013      	ands	r3, r2
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	4924      	ldr	r1, [pc, #144]	; (80051d4 <USB_ActivateEndpoint+0x39c>)
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11c      	bne.n	8005188 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	18d3      	adds	r3, r2, r3
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <USB_ActivateEndpoint+0x3a0>)
 800515c:	4013      	ands	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2280      	movs	r2, #128	; 0x80
 8005164:	0152      	lsls	r2, r2, #5
 8005166:	4053      	eors	r3, r2
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	0192      	lsls	r2, r2, #6
 8005170:	4053      	eors	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	18d3      	adds	r3, r2, r3
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	490e      	ldr	r1, [pc, #56]	; (80051bc <USB_ActivateEndpoint+0x384>)
 8005182:	430a      	orrs	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e182      	b.n	800548e <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	18d3      	adds	r3, r2, r3
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <USB_ActivateEndpoint+0x3a0>)
 8005196:	4013      	ands	r3, r2
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	0192      	lsls	r2, r2, #6
 80051a0:	4053      	eors	r3, r2
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	18d3      	adds	r3, r2, r3
 80051ae:	6a3a      	ldr	r2, [r7, #32]
 80051b0:	4902      	ldr	r1, [pc, #8]	; (80051bc <USB_ActivateEndpoint+0x384>)
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e16a      	b.n	800548e <USB_ActivateEndpoint+0x656>
 80051b8:	07ff898f 	.word	0x07ff898f
 80051bc:	00008080 	.word	0x00008080
 80051c0:	07ff8f8f 	.word	0x07ff8f8f
 80051c4:	40009800 	.word	0x40009800
 80051c8:	000080c0 	.word	0x000080c0
 80051cc:	07ff8fbf 	.word	0x07ff8fbf
 80051d0:	83ffffff 	.word	0x83ffffff
 80051d4:	0000c080 	.word	0x0000c080
 80051d8:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	78db      	ldrb	r3, [r3, #3]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d112      	bne.n	800520a <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4aaa      	ldr	r2, [pc, #680]	; (800549c <USB_ActivateEndpoint+0x664>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	663b      	str	r3, [r7, #96]	; 0x60
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005202:	49a7      	ldr	r1, [pc, #668]	; (80054a0 <USB_ActivateEndpoint+0x668>)
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e011      	b.n	800522e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	18d3      	adds	r3, r2, r3
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4aa3      	ldr	r2, [pc, #652]	; (80054a4 <USB_ActivateEndpoint+0x66c>)
 8005218:	4013      	ands	r3, r2
 800521a:	667b      	str	r3, [r7, #100]	; 0x64
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005228:	499f      	ldr	r1, [pc, #636]	; (80054a8 <USB_ActivateEndpoint+0x670>)
 800522a:	430a      	orrs	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4a9d      	ldr	r2, [pc, #628]	; (80054ac <USB_ActivateEndpoint+0x674>)
 8005236:	4694      	mov	ip, r2
 8005238:	4463      	add	r3, ip
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	499a      	ldr	r1, [pc, #616]	; (80054ac <USB_ActivateEndpoint+0x674>)
 8005244:	468c      	mov	ip, r1
 8005246:	4463      	add	r3, ip
 8005248:	0c12      	lsrs	r2, r2, #16
 800524a:	0412      	lsls	r2, r2, #16
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4a95      	ldr	r2, [pc, #596]	; (80054ac <USB_ActivateEndpoint+0x674>)
 8005256:	4694      	mov	ip, r2
 8005258:	4463      	add	r3, ip
 800525a:	6819      	ldr	r1, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	88db      	ldrh	r3, [r3, #6]
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	b29b      	uxth	r3, r3
 8005264:	009a      	lsls	r2, r3, #2
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	488f      	ldr	r0, [pc, #572]	; (80054ac <USB_ActivateEndpoint+0x674>)
 800526e:	4684      	mov	ip, r0
 8005270:	4463      	add	r3, ip
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4a8b      	ldr	r2, [pc, #556]	; (80054ac <USB_ActivateEndpoint+0x674>)
 800527e:	4694      	mov	ip, r2
 8005280:	4463      	add	r3, ip
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4988      	ldr	r1, [pc, #544]	; (80054ac <USB_ActivateEndpoint+0x674>)
 800528c:	468c      	mov	ip, r1
 800528e:	4463      	add	r3, ip
 8005290:	0c12      	lsrs	r2, r2, #16
 8005292:	0412      	lsls	r2, r2, #16
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4a83      	ldr	r2, [pc, #524]	; (80054ac <USB_ActivateEndpoint+0x674>)
 800529e:	4694      	mov	ip, r2
 80052a0:	4463      	add	r3, ip
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	891b      	ldrh	r3, [r3, #8]
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	487d      	ldr	r0, [pc, #500]	; (80054ac <USB_ActivateEndpoint+0x674>)
 80052b6:	4684      	mov	ip, r0
 80052b8:	4463      	add	r3, ip
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d169      	bne.n	800539a <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	18d3      	adds	r3, r2, r3
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	643b      	str	r3, [r7, #64]	; 0x40
 80052d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	4013      	ands	r3, r2
 80052dc:	d011      	beq.n	8005302 <USB_ActivateEndpoint+0x4ca>
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	18d3      	adds	r3, r2, r3
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6c      	ldr	r2, [pc, #432]	; (800549c <USB_ActivateEndpoint+0x664>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fc:	496c      	ldr	r1, [pc, #432]	; (80054b0 <USB_ActivateEndpoint+0x678>)
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	18d3      	adds	r3, r2, r3
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	2240      	movs	r2, #64	; 0x40
 8005314:	4013      	ands	r3, r2
 8005316:	d011      	beq.n	800533c <USB_ActivateEndpoint+0x504>
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5d      	ldr	r2, [pc, #372]	; (800549c <USB_ActivateEndpoint+0x664>)
 8005326:	4013      	ands	r3, r2
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	18d3      	adds	r3, r2, r3
 8005334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005336:	495f      	ldr	r1, [pc, #380]	; (80054b4 <USB_ActivateEndpoint+0x67c>)
 8005338:	430a      	orrs	r2, r1
 800533a:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	18d3      	adds	r3, r2, r3
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5b      	ldr	r2, [pc, #364]	; (80054b8 <USB_ActivateEndpoint+0x680>)
 800534a:	4013      	ands	r3, r2
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	0152      	lsls	r2, r2, #5
 8005354:	4053      	eors	r3, r2
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	0192      	lsls	r2, r2, #6
 800535e:	4053      	eors	r3, r2
 8005360:	633b      	str	r3, [r7, #48]	; 0x30
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536e:	494e      	ldr	r1, [pc, #312]	; (80054a8 <USB_ActivateEndpoint+0x670>)
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	18d3      	adds	r3, r2, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a4e      	ldr	r2, [pc, #312]	; (80054bc <USB_ActivateEndpoint+0x684>)
 8005382:	4013      	ands	r3, r2
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	18d3      	adds	r3, r2, r3
 8005390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005392:	4945      	ldr	r1, [pc, #276]	; (80054a8 <USB_ActivateEndpoint+0x670>)
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e079      	b.n	800548e <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	18d3      	adds	r3, r2, r3
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	01db      	lsls	r3, r3, #7
 80053ae:	4013      	ands	r3, r2
 80053b0:	d011      	beq.n	80053d6 <USB_ActivateEndpoint+0x59e>
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a37      	ldr	r2, [pc, #220]	; (800549c <USB_ActivateEndpoint+0x664>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	18d3      	adds	r3, r2, r3
 80053ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d0:	4937      	ldr	r1, [pc, #220]	; (80054b0 <USB_ActivateEndpoint+0x678>)
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	18d3      	adds	r3, r2, r3
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	657b      	str	r3, [r7, #84]	; 0x54
 80053e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e6:	2240      	movs	r2, #64	; 0x40
 80053e8:	4013      	ands	r3, r2
 80053ea:	d011      	beq.n	8005410 <USB_ActivateEndpoint+0x5d8>
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <USB_ActivateEndpoint+0x664>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	653b      	str	r3, [r7, #80]	; 0x50
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	18d3      	adds	r3, r2, r3
 8005408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800540a:	492a      	ldr	r1, [pc, #168]	; (80054b4 <USB_ActivateEndpoint+0x67c>)
 800540c:	430a      	orrs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	78db      	ldrb	r3, [r3, #3]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d016      	beq.n	8005446 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	18d3      	adds	r3, r2, r3
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a25      	ldr	r2, [pc, #148]	; (80054bc <USB_ActivateEndpoint+0x684>)
 8005426:	4013      	ands	r3, r2
 8005428:	64bb      	str	r3, [r7, #72]	; 0x48
 800542a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542c:	2220      	movs	r2, #32
 800542e:	4053      	eors	r3, r2
 8005430:	64bb      	str	r3, [r7, #72]	; 0x48
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800543e:	491a      	ldr	r1, [pc, #104]	; (80054a8 <USB_ActivateEndpoint+0x670>)
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e011      	b.n	800546a <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	18d3      	adds	r3, r2, r3
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <USB_ActivateEndpoint+0x684>)
 8005454:	4013      	ands	r3, r2
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	18d3      	adds	r3, r2, r3
 8005462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005464:	4910      	ldr	r1, [pc, #64]	; (80054a8 <USB_ActivateEndpoint+0x670>)
 8005466:	430a      	orrs	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	18d3      	adds	r3, r2, r3
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <USB_ActivateEndpoint+0x680>)
 8005478:	4013      	ands	r3, r2
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	18d3      	adds	r3, r2, r3
 8005486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005488:	4907      	ldr	r1, [pc, #28]	; (80054a8 <USB_ActivateEndpoint+0x670>)
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800548e:	2377      	movs	r3, #119	; 0x77
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b01e      	add	sp, #120	; 0x78
 800549a:	bd80      	pop	{r7, pc}
 800549c:	07ff8f8f 	.word	0x07ff8f8f
 80054a0:	00008180 	.word	0x00008180
 80054a4:	07ff8e8f 	.word	0x07ff8e8f
 80054a8:	00008080 	.word	0x00008080
 80054ac:	40009800 	.word	0x40009800
 80054b0:	0000c080 	.word	0x0000c080
 80054b4:	000080c0 	.word	0x000080c0
 80054b8:	07ffbf8f 	.word	0x07ffbf8f
 80054bc:	07ff8fbf 	.word	0x07ff8fbf

080054c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b096      	sub	sp, #88	; 0x58
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	7a9b      	ldrb	r3, [r3, #10]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d164      	bne.n	800559c <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d02f      	beq.n	800553a <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18d3      	adds	r3, r2, r3
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	4013      	ands	r3, r2
 80054ee:	d011      	beq.n	8005514 <USB_DeactivateEndpoint+0x54>
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a9d      	ldr	r2, [pc, #628]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 80054fe:	4013      	ands	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	499a      	ldr	r1, [pc, #616]	; (8005778 <USB_DeactivateEndpoint+0x2b8>)
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	18d3      	adds	r3, r2, r3
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a96      	ldr	r2, [pc, #600]	; (800577c <USB_DeactivateEndpoint+0x2bc>)
 8005522:	4013      	ands	r3, r2
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	18d3      	adds	r3, r2, r3
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4993      	ldr	r1, [pc, #588]	; (8005780 <USB_DeactivateEndpoint+0x2c0>)
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e117      	b.n	800576a <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	01db      	lsls	r3, r3, #7
 800554e:	4013      	ands	r3, r2
 8005550:	d011      	beq.n	8005576 <USB_DeactivateEndpoint+0xb6>
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	18d3      	adds	r3, r2, r3
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a85      	ldr	r2, [pc, #532]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 8005560:	4013      	ands	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4984      	ldr	r1, [pc, #528]	; (8005784 <USB_DeactivateEndpoint+0x2c4>)
 8005572:	430a      	orrs	r2, r1
 8005574:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a81      	ldr	r2, [pc, #516]	; (8005788 <USB_DeactivateEndpoint+0x2c8>)
 8005584:	4013      	ands	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	497a      	ldr	r1, [pc, #488]	; (8005780 <USB_DeactivateEndpoint+0x2c0>)
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e0e6      	b.n	800576a <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d171      	bne.n	8005688 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	18d3      	adds	r3, r2, r3
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	01db      	lsls	r3, r3, #7
 80055b8:	4013      	ands	r3, r2
 80055ba:	d011      	beq.n	80055e0 <USB_DeactivateEndpoint+0x120>
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	18d3      	adds	r3, r2, r3
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a6a      	ldr	r2, [pc, #424]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	18d3      	adds	r3, r2, r3
 80055d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055da:	496a      	ldr	r1, [pc, #424]	; (8005784 <USB_DeactivateEndpoint+0x2c4>)
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	18d3      	adds	r3, r2, r3
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	633b      	str	r3, [r7, #48]	; 0x30
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	4013      	ands	r3, r2
 80055f4:	d011      	beq.n	800561a <USB_DeactivateEndpoint+0x15a>
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	18d3      	adds	r3, r2, r3
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a5c      	ldr	r2, [pc, #368]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 8005604:	4013      	ands	r3, r2
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	18d3      	adds	r3, r2, r3
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	4958      	ldr	r1, [pc, #352]	; (8005778 <USB_DeactivateEndpoint+0x2b8>)
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	18d3      	adds	r3, r2, r3
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a53      	ldr	r2, [pc, #332]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 8005628:	4013      	ands	r3, r2
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	18d3      	adds	r3, r2, r3
 8005636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005638:	494f      	ldr	r1, [pc, #316]	; (8005778 <USB_DeactivateEndpoint+0x2b8>)
 800563a:	430a      	orrs	r2, r1
 800563c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a4f      	ldr	r2, [pc, #316]	; (8005788 <USB_DeactivateEndpoint+0x2c8>)
 800564c:	4013      	ands	r3, r2
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	18d3      	adds	r3, r2, r3
 800565a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565c:	4948      	ldr	r1, [pc, #288]	; (8005780 <USB_DeactivateEndpoint+0x2c0>)
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	18d3      	adds	r3, r2, r3
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a43      	ldr	r2, [pc, #268]	; (800577c <USB_DeactivateEndpoint+0x2bc>)
 8005670:	4013      	ands	r3, r2
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	18d3      	adds	r3, r2, r3
 800567e:	6a3a      	ldr	r2, [r7, #32]
 8005680:	493f      	ldr	r1, [pc, #252]	; (8005780 <USB_DeactivateEndpoint+0x2c0>)
 8005682:	430a      	orrs	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e070      	b.n	800576a <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	18d3      	adds	r3, r2, r3
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	657b      	str	r3, [r7, #84]	; 0x54
 8005696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	01db      	lsls	r3, r3, #7
 800569c:	4013      	ands	r3, r2
 800569e:	d011      	beq.n	80056c4 <USB_DeactivateEndpoint+0x204>
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	18d3      	adds	r3, r2, r3
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a31      	ldr	r2, [pc, #196]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	653b      	str	r3, [r7, #80]	; 0x50
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	18d3      	adds	r3, r2, r3
 80056bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056be:	4931      	ldr	r1, [pc, #196]	; (8005784 <USB_DeactivateEndpoint+0x2c4>)
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	18d3      	adds	r3, r2, r3
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	4013      	ands	r3, r2
 80056d8:	d011      	beq.n	80056fe <USB_DeactivateEndpoint+0x23e>
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	18d3      	adds	r3, r2, r3
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a23      	ldr	r2, [pc, #140]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	18d3      	adds	r3, r2, r3
 80056f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f8:	491f      	ldr	r1, [pc, #124]	; (8005778 <USB_DeactivateEndpoint+0x2b8>)
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	18d3      	adds	r3, r2, r3
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <USB_DeactivateEndpoint+0x2b4>)
 800570c:	4013      	ands	r3, r2
 800570e:	647b      	str	r3, [r7, #68]	; 0x44
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	18d3      	adds	r3, r2, r3
 800571a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800571c:	4919      	ldr	r1, [pc, #100]	; (8005784 <USB_DeactivateEndpoint+0x2c4>)
 800571e:	430a      	orrs	r2, r1
 8005720:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	18d3      	adds	r3, r2, r3
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a13      	ldr	r2, [pc, #76]	; (800577c <USB_DeactivateEndpoint+0x2bc>)
 8005730:	4013      	ands	r3, r2
 8005732:	643b      	str	r3, [r7, #64]	; 0x40
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	18d3      	adds	r3, r2, r3
 800573e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005740:	490f      	ldr	r1, [pc, #60]	; (8005780 <USB_DeactivateEndpoint+0x2c0>)
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	18d3      	adds	r3, r2, r3
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <USB_DeactivateEndpoint+0x2c8>)
 8005754:	4013      	ands	r3, r2
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005764:	4906      	ldr	r1, [pc, #24]	; (8005780 <USB_DeactivateEndpoint+0x2c0>)
 8005766:	430a      	orrs	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b016      	add	sp, #88	; 0x58
 8005772:	bd80      	pop	{r7, pc}
 8005774:	07ff8f8f 	.word	0x07ff8f8f
 8005778:	000080c0 	.word	0x000080c0
 800577c:	07ff8fbf 	.word	0x07ff8fbf
 8005780:	00008080 	.word	0x00008080
 8005784:	0000c080 	.word	0x0000c080
 8005788:	07ffbf8f 	.word	0x07ffbf8f

0800578c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b097      	sub	sp, #92	; 0x5c
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <USB_EPStartXfer+0x16>
 800579e:	f000 fd24 	bl	80061ea <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d903      	bls.n	80057b6 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	657b      	str	r3, [r7, #84]	; 0x54
 80057b4:	e002      	b.n	80057bc <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	7a9b      	ldrb	r3, [r3, #10]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d12b      	bne.n	800581c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	6959      	ldr	r1, [r3, #20]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	889a      	ldrh	r2, [r3, #4]
 80057cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f9b3 	bl	8006b3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4ade      	ldr	r2, [pc, #888]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80057de:	4694      	mov	ip, r2
 80057e0:	4463      	add	r3, ip
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	49db      	ldr	r1, [pc, #876]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80057ec:	468c      	mov	ip, r1
 80057ee:	4463      	add	r3, ip
 80057f0:	0412      	lsls	r2, r2, #16
 80057f2:	0c12      	lsrs	r2, r2, #16
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4ad6      	ldr	r2, [pc, #856]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80057fe:	4694      	mov	ip, r2
 8005800:	4463      	add	r3, ip
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005806:	041a      	lsls	r2, r3, #16
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	48d2      	ldr	r0, [pc, #840]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005810:	4684      	mov	ip, r0
 8005812:	4463      	add	r3, ip
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f000 fccb 	bl	80061b2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	78db      	ldrb	r3, [r3, #3]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d000      	beq.n	8005826 <USB_EPStartXfer+0x9a>
 8005824:	e35e      	b.n	8005ee4 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d800      	bhi.n	8005834 <USB_EPStartXfer+0xa8>
 8005832:	e309      	b.n	8005e48 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	18d3      	adds	r3, r2, r3
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4ac6      	ldr	r2, [pc, #792]	; (8005b5c <USB_EPStartXfer+0x3d0>)
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	18d3      	adds	r3, r2, r3
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	49c3      	ldr	r1, [pc, #780]	; (8005b60 <USB_EPStartXfer+0x3d4>)
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	18d3      	adds	r3, r2, r3
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2240      	movs	r2, #64	; 0x40
 8005872:	4013      	ands	r3, r2
 8005874:	d100      	bne.n	8005878 <USB_EPStartXfer+0xec>
 8005876:	e177      	b.n	8005b68 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d172      	bne.n	8005966 <USB_EPStartXfer+0x1da>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4ab4      	ldr	r2, [pc, #720]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005888:	4694      	mov	ip, r2
 800588a:	4463      	add	r3, ip
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	49b0      	ldr	r1, [pc, #704]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005896:	468c      	mov	ip, r1
 8005898:	4463      	add	r3, ip
 800589a:	0412      	lsls	r2, r2, #16
 800589c:	0c12      	lsrs	r2, r2, #16
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a2:	2b3e      	cmp	r3, #62	; 0x3e
 80058a4:	d91e      	bls.n	80058e4 <USB_EPStartXfer+0x158>
 80058a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	653b      	str	r3, [r7, #80]	; 0x50
 80058ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ae:	221f      	movs	r2, #31
 80058b0:	4013      	ands	r3, r2
 80058b2:	d102      	bne.n	80058ba <USB_EPStartXfer+0x12e>
 80058b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b6:	3b01      	subs	r3, #1
 80058b8:	653b      	str	r3, [r7, #80]	; 0x50
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4aa5      	ldr	r2, [pc, #660]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80058c2:	4694      	mov	ip, r2
 80058c4:	4463      	add	r3, ip
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ca:	069b      	lsls	r3, r3, #26
 80058cc:	431a      	orrs	r2, r3
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	49a0      	ldr	r1, [pc, #640]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80058d6:	468c      	mov	ip, r1
 80058d8:	4463      	add	r3, ip
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	0609      	lsls	r1, r1, #24
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e065      	b.n	80059b0 <USB_EPStartXfer+0x224>
 80058e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d121      	bne.n	800592e <USB_EPStartXfer+0x1a2>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4a99      	ldr	r2, [pc, #612]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80058f2:	4694      	mov	ip, r2
 80058f4:	4463      	add	r3, ip
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4996      	ldr	r1, [pc, #600]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005900:	468c      	mov	ip, r1
 8005902:	4463      	add	r3, ip
 8005904:	4997      	ldr	r1, [pc, #604]	; (8005b64 <USB_EPStartXfer+0x3d8>)
 8005906:	400a      	ands	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4a91      	ldr	r2, [pc, #580]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005912:	4694      	mov	ip, r2
 8005914:	4463      	add	r3, ip
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	498e      	ldr	r1, [pc, #568]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005920:	468c      	mov	ip, r1
 8005922:	4463      	add	r3, ip
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	0609      	lsls	r1, r1, #24
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	e040      	b.n	80059b0 <USB_EPStartXfer+0x224>
 800592e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	653b      	str	r3, [r7, #80]	; 0x50
 8005934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005936:	2201      	movs	r2, #1
 8005938:	4013      	ands	r3, r2
 800593a:	d002      	beq.n	8005942 <USB_EPStartXfer+0x1b6>
 800593c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593e:	3301      	adds	r3, #1
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4a83      	ldr	r2, [pc, #524]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 800594a:	4694      	mov	ip, r2
 800594c:	4463      	add	r3, ip
 800594e:	6859      	ldr	r1, [r3, #4]
 8005950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005952:	069a      	lsls	r2, r3, #26
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	487f      	ldr	r0, [pc, #508]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 800595c:	4684      	mov	ip, r0
 800595e:	4463      	add	r3, ip
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	e024      	b.n	80059b0 <USB_EPStartXfer+0x224>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d120      	bne.n	80059b0 <USB_EPStartXfer+0x224>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4a78      	ldr	r2, [pc, #480]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005976:	4694      	mov	ip, r2
 8005978:	4463      	add	r3, ip
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4975      	ldr	r1, [pc, #468]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005984:	468c      	mov	ip, r1
 8005986:	4463      	add	r3, ip
 8005988:	0412      	lsls	r2, r2, #16
 800598a:	0c12      	lsrs	r2, r2, #16
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4a70      	ldr	r2, [pc, #448]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005996:	4694      	mov	ip, r2
 8005998:	4463      	add	r3, ip
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599e:	041a      	lsls	r2, r3, #16
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	486c      	ldr	r0, [pc, #432]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 80059a8:	4684      	mov	ip, r0
 80059aa:	4463      	add	r3, ip
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80059b0:	201a      	movs	r0, #26
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	8912      	ldrh	r2, [r2, #8]
 80059b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6959      	ldr	r1, [r3, #20]
 80059be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c0:	b29c      	uxth	r4, r3
 80059c2:	183b      	adds	r3, r7, r0
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	0023      	movs	r3, r4
 80059ca:	f001 f8b7 	bl	8006b3c <USB_WritePMA>
            ep->xfer_buff += len;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d4:	18d2      	adds	r2, r2, r3
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d906      	bls.n	80059f4 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	621a      	str	r2, [r3, #32]
 80059f2:	e005      	b.n	8005a00 <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2200      	movs	r2, #0
 80059fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d172      	bne.n	8005aee <USB_EPStartXfer+0x362>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4a52      	ldr	r2, [pc, #328]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a10:	4694      	mov	ip, r2
 8005a12:	4463      	add	r3, ip
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	494e      	ldr	r1, [pc, #312]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a1e:	468c      	mov	ip, r1
 8005a20:	4463      	add	r3, ip
 8005a22:	0412      	lsls	r2, r2, #16
 8005a24:	0c12      	lsrs	r2, r2, #16
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2c:	d91e      	bls.n	8005a6c <USB_EPStartXfer+0x2e0>
 8005a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a36:	221f      	movs	r2, #31
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d102      	bne.n	8005a42 <USB_EPStartXfer+0x2b6>
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4a43      	ldr	r2, [pc, #268]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a4a:	4694      	mov	ip, r2
 8005a4c:	4463      	add	r3, ip
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a52:	069b      	lsls	r3, r3, #26
 8005a54:	431a      	orrs	r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	493e      	ldr	r1, [pc, #248]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a5e:	468c      	mov	ip, r1
 8005a60:	4463      	add	r3, ip
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	0609      	lsls	r1, r1, #24
 8005a66:	430a      	orrs	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e065      	b.n	8005b38 <USB_EPStartXfer+0x3ac>
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d121      	bne.n	8005ab6 <USB_EPStartXfer+0x32a>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4a37      	ldr	r2, [pc, #220]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a7a:	4694      	mov	ip, r2
 8005a7c:	4463      	add	r3, ip
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4934      	ldr	r1, [pc, #208]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a88:	468c      	mov	ip, r1
 8005a8a:	4463      	add	r3, ip
 8005a8c:	4935      	ldr	r1, [pc, #212]	; (8005b64 <USB_EPStartXfer+0x3d8>)
 8005a8e:	400a      	ands	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005a9a:	4694      	mov	ip, r2
 8005a9c:	4463      	add	r3, ip
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	492c      	ldr	r1, [pc, #176]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005aa8:	468c      	mov	ip, r1
 8005aaa:	4463      	add	r3, ip
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	0609      	lsls	r1, r1, #24
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e040      	b.n	8005b38 <USB_EPStartXfer+0x3ac>
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d002      	beq.n	8005aca <USB_EPStartXfer+0x33e>
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005ad2:	4694      	mov	ip, r2
 8005ad4:	4463      	add	r3, ip
 8005ad6:	6819      	ldr	r1, [r3, #0]
 8005ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ada:	069a      	lsls	r2, r3, #26
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	481d      	ldr	r0, [pc, #116]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005ae4:	4684      	mov	ip, r0
 8005ae6:	4463      	add	r3, ip
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	e024      	b.n	8005b38 <USB_EPStartXfer+0x3ac>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d120      	bne.n	8005b38 <USB_EPStartXfer+0x3ac>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005afe:	4694      	mov	ip, r2
 8005b00:	4463      	add	r3, ip
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4913      	ldr	r1, [pc, #76]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005b0c:	468c      	mov	ip, r1
 8005b0e:	4463      	add	r3, ip
 8005b10:	0412      	lsls	r2, r2, #16
 8005b12:	0c12      	lsrs	r2, r2, #16
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005b1e:	4694      	mov	ip, r2
 8005b20:	4463      	add	r3, ip
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b26:	041a      	lsls	r2, r3, #16
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	480a      	ldr	r0, [pc, #40]	; (8005b58 <USB_EPStartXfer+0x3cc>)
 8005b30:	4684      	mov	ip, r0
 8005b32:	4463      	add	r3, ip
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b38:	201a      	movs	r0, #26
 8005b3a:	183b      	adds	r3, r7, r0
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	88d2      	ldrh	r2, [r2, #6]
 8005b40:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6959      	ldr	r1, [r3, #20]
 8005b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b48:	b29c      	uxth	r4, r3
 8005b4a:	183b      	adds	r3, r7, r0
 8005b4c:	881a      	ldrh	r2, [r3, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	0023      	movs	r3, r4
 8005b52:	f000 fff3 	bl	8006b3c <USB_WritePMA>
 8005b56:	e32c      	b.n	80061b2 <USB_EPStartXfer+0xa26>
 8005b58:	40009800 	.word	0x40009800
 8005b5c:	07ff8f8f 	.word	0x07ff8f8f
 8005b60:	00008180 	.word	0x00008180
 8005b64:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d172      	bne.n	8005c56 <USB_EPStartXfer+0x4ca>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4ad7      	ldr	r2, [pc, #860]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005b78:	4694      	mov	ip, r2
 8005b7a:	4463      	add	r3, ip
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	49d3      	ldr	r1, [pc, #844]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005b86:	468c      	mov	ip, r1
 8005b88:	4463      	add	r3, ip
 8005b8a:	0412      	lsls	r2, r2, #16
 8005b8c:	0c12      	lsrs	r2, r2, #16
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b92:	2b3e      	cmp	r3, #62	; 0x3e
 8005b94:	d91e      	bls.n	8005bd4 <USB_EPStartXfer+0x448>
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9e:	221f      	movs	r2, #31
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d102      	bne.n	8005baa <USB_EPStartXfer+0x41e>
 8005ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4ac8      	ldr	r2, [pc, #800]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005bb2:	4694      	mov	ip, r2
 8005bb4:	4463      	add	r3, ip
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bba:	069b      	lsls	r3, r3, #26
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	49c3      	ldr	r1, [pc, #780]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005bc6:	468c      	mov	ip, r1
 8005bc8:	4463      	add	r3, ip
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	0609      	lsls	r1, r1, #24
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e065      	b.n	8005ca0 <USB_EPStartXfer+0x514>
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d121      	bne.n	8005c1e <USB_EPStartXfer+0x492>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4abc      	ldr	r2, [pc, #752]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005be2:	4694      	mov	ip, r2
 8005be4:	4463      	add	r3, ip
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	49b9      	ldr	r1, [pc, #740]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005bf0:	468c      	mov	ip, r1
 8005bf2:	4463      	add	r3, ip
 8005bf4:	49b8      	ldr	r1, [pc, #736]	; (8005ed8 <USB_EPStartXfer+0x74c>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4ab4      	ldr	r2, [pc, #720]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c02:	4694      	mov	ip, r2
 8005c04:	4463      	add	r3, ip
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	49b1      	ldr	r1, [pc, #708]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c10:	468c      	mov	ip, r1
 8005c12:	4463      	add	r3, ip
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	0609      	lsls	r1, r1, #24
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e040      	b.n	8005ca0 <USB_EPStartXfer+0x514>
 8005c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c26:	2201      	movs	r2, #1
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d002      	beq.n	8005c32 <USB_EPStartXfer+0x4a6>
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2e:	3301      	adds	r3, #1
 8005c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4aa6      	ldr	r2, [pc, #664]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c3a:	4694      	mov	ip, r2
 8005c3c:	4463      	add	r3, ip
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c42:	069a      	lsls	r2, r3, #26
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	48a2      	ldr	r0, [pc, #648]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c4c:	4684      	mov	ip, r0
 8005c4e:	4463      	add	r3, ip
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e024      	b.n	8005ca0 <USB_EPStartXfer+0x514>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d120      	bne.n	8005ca0 <USB_EPStartXfer+0x514>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4a9b      	ldr	r2, [pc, #620]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c66:	4694      	mov	ip, r2
 8005c68:	4463      	add	r3, ip
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4998      	ldr	r1, [pc, #608]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c74:	468c      	mov	ip, r1
 8005c76:	4463      	add	r3, ip
 8005c78:	0412      	lsls	r2, r2, #16
 8005c7a:	0c12      	lsrs	r2, r2, #16
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4a93      	ldr	r2, [pc, #588]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c86:	4694      	mov	ip, r2
 8005c88:	4463      	add	r3, ip
 8005c8a:	6819      	ldr	r1, [r3, #0]
 8005c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8e:	041a      	lsls	r2, r3, #16
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	488f      	ldr	r0, [pc, #572]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005c98:	4684      	mov	ip, r0
 8005c9a:	4463      	add	r3, ip
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ca0:	201a      	movs	r0, #26
 8005ca2:	183b      	adds	r3, r7, r0
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	88d2      	ldrh	r2, [r2, #6]
 8005ca8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6959      	ldr	r1, [r3, #20]
 8005cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb0:	b29c      	uxth	r4, r3
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	0023      	movs	r3, r4
 8005cba:	f000 ff3f 	bl	8006b3c <USB_WritePMA>
            ep->xfer_buff += len;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc4:	18d2      	adds	r2, r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d906      	bls.n	8005ce4 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	621a      	str	r2, [r3, #32]
 8005ce2:	e005      	b.n	8005cf0 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2200      	movs	r2, #0
 8005cee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d172      	bne.n	8005dde <USB_EPStartXfer+0x652>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4a75      	ldr	r2, [pc, #468]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d00:	4694      	mov	ip, r2
 8005d02:	4463      	add	r3, ip
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4971      	ldr	r1, [pc, #452]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d0e:	468c      	mov	ip, r1
 8005d10:	4463      	add	r3, ip
 8005d12:	0412      	lsls	r2, r2, #16
 8005d14:	0c12      	lsrs	r2, r2, #16
 8005d16:	605a      	str	r2, [r3, #4]
 8005d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d1c:	d91e      	bls.n	8005d5c <USB_EPStartXfer+0x5d0>
 8005d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	647b      	str	r3, [r7, #68]	; 0x44
 8005d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d26:	221f      	movs	r2, #31
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d102      	bne.n	8005d32 <USB_EPStartXfer+0x5a6>
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4a66      	ldr	r2, [pc, #408]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d3a:	4694      	mov	ip, r2
 8005d3c:	4463      	add	r3, ip
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	069b      	lsls	r3, r3, #26
 8005d44:	431a      	orrs	r2, r3
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4961      	ldr	r1, [pc, #388]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d4e:	468c      	mov	ip, r1
 8005d50:	4463      	add	r3, ip
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	0609      	lsls	r1, r1, #24
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	e065      	b.n	8005e28 <USB_EPStartXfer+0x69c>
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d121      	bne.n	8005da6 <USB_EPStartXfer+0x61a>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d6a:	4694      	mov	ip, r2
 8005d6c:	4463      	add	r3, ip
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4957      	ldr	r1, [pc, #348]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d78:	468c      	mov	ip, r1
 8005d7a:	4463      	add	r3, ip
 8005d7c:	4956      	ldr	r1, [pc, #344]	; (8005ed8 <USB_EPStartXfer+0x74c>)
 8005d7e:	400a      	ands	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4a52      	ldr	r2, [pc, #328]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d8a:	4694      	mov	ip, r2
 8005d8c:	4463      	add	r3, ip
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	494f      	ldr	r1, [pc, #316]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005d98:	468c      	mov	ip, r1
 8005d9a:	4463      	add	r3, ip
 8005d9c:	2180      	movs	r1, #128	; 0x80
 8005d9e:	0609      	lsls	r1, r1, #24
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	e040      	b.n	8005e28 <USB_EPStartXfer+0x69c>
 8005da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
 8005dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dae:	2201      	movs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	d002      	beq.n	8005dba <USB_EPStartXfer+0x62e>
 8005db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db6:	3301      	adds	r3, #1
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4a44      	ldr	r2, [pc, #272]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005dc2:	4694      	mov	ip, r2
 8005dc4:	4463      	add	r3, ip
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	069a      	lsls	r2, r3, #26
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4840      	ldr	r0, [pc, #256]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005dd4:	4684      	mov	ip, r0
 8005dd6:	4463      	add	r3, ip
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	e024      	b.n	8005e28 <USB_EPStartXfer+0x69c>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d120      	bne.n	8005e28 <USB_EPStartXfer+0x69c>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4a39      	ldr	r2, [pc, #228]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005dee:	4694      	mov	ip, r2
 8005df0:	4463      	add	r3, ip
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4936      	ldr	r1, [pc, #216]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005dfc:	468c      	mov	ip, r1
 8005dfe:	4463      	add	r3, ip
 8005e00:	0412      	lsls	r2, r2, #16
 8005e02:	0c12      	lsrs	r2, r2, #16
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005e0e:	4694      	mov	ip, r2
 8005e10:	4463      	add	r3, ip
 8005e12:	6859      	ldr	r1, [r3, #4]
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	041a      	lsls	r2, r3, #16
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	482d      	ldr	r0, [pc, #180]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005e20:	4684      	mov	ip, r0
 8005e22:	4463      	add	r3, ip
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8005e28:	201a      	movs	r0, #26
 8005e2a:	183b      	adds	r3, r7, r0
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	8912      	ldrh	r2, [r2, #8]
 8005e30:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	b29c      	uxth	r4, r3
 8005e3a:	183b      	adds	r3, r7, r0
 8005e3c:	881a      	ldrh	r2, [r3, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	0023      	movs	r3, r4
 8005e42:	f000 fe7b 	bl	8006b3c <USB_WritePMA>
 8005e46:	e1b4      	b.n	80061b2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	18d3      	adds	r3, r2, r3
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a20      	ldr	r2, [pc, #128]	; (8005edc <USB_EPStartXfer+0x750>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	18d3      	adds	r3, r2, r3
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	491c      	ldr	r1, [pc, #112]	; (8005ee0 <USB_EPStartXfer+0x754>)
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005e7a:	4694      	mov	ip, r2
 8005e7c:	4463      	add	r3, ip
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4913      	ldr	r1, [pc, #76]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005e88:	468c      	mov	ip, r1
 8005e8a:	4463      	add	r3, ip
 8005e8c:	0412      	lsls	r2, r2, #16
 8005e8e:	0c12      	lsrs	r2, r2, #16
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005e9a:	4694      	mov	ip, r2
 8005e9c:	4463      	add	r3, ip
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea2:	041a      	lsls	r2, r3, #16
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	480a      	ldr	r0, [pc, #40]	; (8005ed4 <USB_EPStartXfer+0x748>)
 8005eac:	4684      	mov	ip, r0
 8005eae:	4463      	add	r3, ip
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005eb4:	201a      	movs	r0, #26
 8005eb6:	183b      	adds	r3, r7, r0
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	88d2      	ldrh	r2, [r2, #6]
 8005ebc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6959      	ldr	r1, [r3, #20]
 8005ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec4:	b29c      	uxth	r4, r3
 8005ec6:	183b      	adds	r3, r7, r0
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	0023      	movs	r3, r4
 8005ece:	f000 fe35 	bl	8006b3c <USB_WritePMA>
 8005ed2:	e16e      	b.n	80061b2 <USB_EPStartXfer+0xa26>
 8005ed4:	40009800 	.word	0x40009800
 8005ed8:	83ffffff 	.word	0x83ffffff
 8005edc:	07ff8e8f 	.word	0x07ff8e8f
 8005ee0:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	18d3      	adds	r3, r2, r3
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	4013      	ands	r3, r2
 8005f00:	d100      	bne.n	8005f04 <USB_EPStartXfer+0x778>
 8005f02:	e0ab      	b.n	800605c <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d172      	bne.n	8005ff2 <USB_EPStartXfer+0x866>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4adc      	ldr	r2, [pc, #880]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f14:	4694      	mov	ip, r2
 8005f16:	4463      	add	r3, ip
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	49d8      	ldr	r1, [pc, #864]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f22:	468c      	mov	ip, r1
 8005f24:	4463      	add	r3, ip
 8005f26:	0412      	lsls	r2, r2, #16
 8005f28:	0c12      	lsrs	r2, r2, #16
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f30:	d91e      	bls.n	8005f70 <USB_EPStartXfer+0x7e4>
 8005f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
 8005f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3a:	221f      	movs	r2, #31
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d102      	bne.n	8005f46 <USB_EPStartXfer+0x7ba>
 8005f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f42:	3b01      	subs	r3, #1
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4acd      	ldr	r2, [pc, #820]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f4e:	4694      	mov	ip, r2
 8005f50:	4463      	add	r3, ip
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f56:	069b      	lsls	r3, r3, #26
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	49c8      	ldr	r1, [pc, #800]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f62:	468c      	mov	ip, r1
 8005f64:	4463      	add	r3, ip
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	0609      	lsls	r1, r1, #24
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	e065      	b.n	800603c <USB_EPStartXfer+0x8b0>
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d121      	bne.n	8005fba <USB_EPStartXfer+0x82e>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4ac1      	ldr	r2, [pc, #772]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f7e:	4694      	mov	ip, r2
 8005f80:	4463      	add	r3, ip
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	49be      	ldr	r1, [pc, #760]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f8c:	468c      	mov	ip, r1
 8005f8e:	4463      	add	r3, ip
 8005f90:	49bd      	ldr	r1, [pc, #756]	; (8006288 <USB_EPStartXfer+0xafc>)
 8005f92:	400a      	ands	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4ab9      	ldr	r2, [pc, #740]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005f9e:	4694      	mov	ip, r2
 8005fa0:	4463      	add	r3, ip
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	49b6      	ldr	r1, [pc, #728]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005fac:	468c      	mov	ip, r1
 8005fae:	4463      	add	r3, ip
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	0609      	lsls	r1, r1, #24
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	e040      	b.n	800603c <USB_EPStartXfer+0x8b0>
 8005fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d002      	beq.n	8005fce <USB_EPStartXfer+0x842>
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fca:	3301      	adds	r3, #1
 8005fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4aab      	ldr	r2, [pc, #684]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005fd6:	4694      	mov	ip, r2
 8005fd8:	4463      	add	r3, ip
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	069a      	lsls	r2, r3, #26
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	48a7      	ldr	r0, [pc, #668]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8005fe8:	4684      	mov	ip, r0
 8005fea:	4463      	add	r3, ip
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
 8005ff0:	e024      	b.n	800603c <USB_EPStartXfer+0x8b0>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d120      	bne.n	800603c <USB_EPStartXfer+0x8b0>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4aa0      	ldr	r2, [pc, #640]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006002:	4694      	mov	ip, r2
 8006004:	4463      	add	r3, ip
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	499d      	ldr	r1, [pc, #628]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006010:	468c      	mov	ip, r1
 8006012:	4463      	add	r3, ip
 8006014:	0412      	lsls	r2, r2, #16
 8006016:	0c12      	lsrs	r2, r2, #16
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4a98      	ldr	r2, [pc, #608]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006022:	4694      	mov	ip, r2
 8006024:	4463      	add	r3, ip
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602a:	041a      	lsls	r2, r3, #16
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4894      	ldr	r0, [pc, #592]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006034:	4684      	mov	ip, r0
 8006036:	4463      	add	r3, ip
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800603c:	201a      	movs	r0, #26
 800603e:	183b      	adds	r3, r7, r0
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	8912      	ldrh	r2, [r2, #8]
 8006044:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6959      	ldr	r1, [r3, #20]
 800604a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604c:	b29c      	uxth	r4, r3
 800604e:	183b      	adds	r3, r7, r0
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	0023      	movs	r3, r4
 8006056:	f000 fd71 	bl	8006b3c <USB_WritePMA>
 800605a:	e0aa      	b.n	80061b2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d172      	bne.n	800614a <USB_EPStartXfer+0x9be>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4a86      	ldr	r2, [pc, #536]	; (8006284 <USB_EPStartXfer+0xaf8>)
 800606c:	4694      	mov	ip, r2
 800606e:	4463      	add	r3, ip
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4982      	ldr	r1, [pc, #520]	; (8006284 <USB_EPStartXfer+0xaf8>)
 800607a:	468c      	mov	ip, r1
 800607c:	4463      	add	r3, ip
 800607e:	0412      	lsls	r2, r2, #16
 8006080:	0c12      	lsrs	r2, r2, #16
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006086:	2b3e      	cmp	r3, #62	; 0x3e
 8006088:	d91e      	bls.n	80060c8 <USB_EPStartXfer+0x93c>
 800608a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006092:	221f      	movs	r2, #31
 8006094:	4013      	ands	r3, r2
 8006096:	d102      	bne.n	800609e <USB_EPStartXfer+0x912>
 8006098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609a:	3b01      	subs	r3, #1
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4a77      	ldr	r2, [pc, #476]	; (8006284 <USB_EPStartXfer+0xaf8>)
 80060a6:	4694      	mov	ip, r2
 80060a8:	4463      	add	r3, ip
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ae:	069b      	lsls	r3, r3, #26
 80060b0:	431a      	orrs	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4972      	ldr	r1, [pc, #456]	; (8006284 <USB_EPStartXfer+0xaf8>)
 80060ba:	468c      	mov	ip, r1
 80060bc:	4463      	add	r3, ip
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	0609      	lsls	r1, r1, #24
 80060c2:	430a      	orrs	r2, r1
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e065      	b.n	8006194 <USB_EPStartXfer+0xa08>
 80060c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d121      	bne.n	8006112 <USB_EPStartXfer+0x986>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4a6b      	ldr	r2, [pc, #428]	; (8006284 <USB_EPStartXfer+0xaf8>)
 80060d6:	4694      	mov	ip, r2
 80060d8:	4463      	add	r3, ip
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4968      	ldr	r1, [pc, #416]	; (8006284 <USB_EPStartXfer+0xaf8>)
 80060e4:	468c      	mov	ip, r1
 80060e6:	4463      	add	r3, ip
 80060e8:	4967      	ldr	r1, [pc, #412]	; (8006288 <USB_EPStartXfer+0xafc>)
 80060ea:	400a      	ands	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4a63      	ldr	r2, [pc, #396]	; (8006284 <USB_EPStartXfer+0xaf8>)
 80060f6:	4694      	mov	ip, r2
 80060f8:	4463      	add	r3, ip
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4960      	ldr	r1, [pc, #384]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006104:	468c      	mov	ip, r1
 8006106:	4463      	add	r3, ip
 8006108:	2180      	movs	r1, #128	; 0x80
 800610a:	0609      	lsls	r1, r1, #24
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e040      	b.n	8006194 <USB_EPStartXfer+0xa08>
 8006112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611a:	2201      	movs	r2, #1
 800611c:	4013      	ands	r3, r2
 800611e:	d002      	beq.n	8006126 <USB_EPStartXfer+0x99a>
 8006120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006122:	3301      	adds	r3, #1
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4a55      	ldr	r2, [pc, #340]	; (8006284 <USB_EPStartXfer+0xaf8>)
 800612e:	4694      	mov	ip, r2
 8006130:	4463      	add	r3, ip
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006136:	069a      	lsls	r2, r3, #26
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4851      	ldr	r0, [pc, #324]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006140:	4684      	mov	ip, r0
 8006142:	4463      	add	r3, ip
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e024      	b.n	8006194 <USB_EPStartXfer+0xa08>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d120      	bne.n	8006194 <USB_EPStartXfer+0xa08>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4a4a      	ldr	r2, [pc, #296]	; (8006284 <USB_EPStartXfer+0xaf8>)
 800615a:	4694      	mov	ip, r2
 800615c:	4463      	add	r3, ip
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4947      	ldr	r1, [pc, #284]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006168:	468c      	mov	ip, r1
 800616a:	4463      	add	r3, ip
 800616c:	0412      	lsls	r2, r2, #16
 800616e:	0c12      	lsrs	r2, r2, #16
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4a42      	ldr	r2, [pc, #264]	; (8006284 <USB_EPStartXfer+0xaf8>)
 800617a:	4694      	mov	ip, r2
 800617c:	4463      	add	r3, ip
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006182:	041a      	lsls	r2, r3, #16
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	483e      	ldr	r0, [pc, #248]	; (8006284 <USB_EPStartXfer+0xaf8>)
 800618c:	4684      	mov	ip, r0
 800618e:	4463      	add	r3, ip
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006194:	201a      	movs	r0, #26
 8006196:	183b      	adds	r3, r7, r0
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	88d2      	ldrh	r2, [r2, #6]
 800619c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6959      	ldr	r1, [r3, #20]
 80061a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a4:	b29c      	uxth	r4, r3
 80061a6:	183b      	adds	r3, r7, r0
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	0023      	movs	r3, r4
 80061ae:	f000 fcc5 	bl	8006b3c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	18d3      	adds	r3, r2, r3
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a33      	ldr	r2, [pc, #204]	; (800628c <USB_EPStartXfer+0xb00>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2210      	movs	r2, #16
 80061c8:	4053      	eors	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	4053      	eors	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	492b      	ldr	r1, [pc, #172]	; (8006290 <USB_EPStartXfer+0xb04>)
 80061e2:	430a      	orrs	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	f000 fb97 	bl	8006918 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	7a9b      	ldrb	r3, [r3, #10]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d000      	beq.n	80061f4 <USB_EPStartXfer+0xa68>
 80061f2:	e090      	b.n	8006316 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d909      	bls.n	8006214 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	619a      	str	r2, [r3, #24]
 8006212:	e005      	b.n	8006220 <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	4a17      	ldr	r2, [pc, #92]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006228:	4694      	mov	ip, r2
 800622a:	4463      	add	r3, ip
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	4913      	ldr	r1, [pc, #76]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006236:	468c      	mov	ip, r1
 8006238:	4463      	add	r3, ip
 800623a:	0412      	lsls	r2, r2, #16
 800623c:	0c12      	lsrs	r2, r2, #16
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006242:	2b3e      	cmp	r3, #62	; 0x3e
 8006244:	d926      	bls.n	8006294 <USB_EPStartXfer+0xb08>
 8006246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
 800624c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800624e:	221f      	movs	r2, #31
 8006250:	4013      	ands	r3, r2
 8006252:	d102      	bne.n	800625a <USB_EPStartXfer+0xace>
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	3b01      	subs	r3, #1
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006262:	4694      	mov	ip, r2
 8006264:	4463      	add	r3, ip
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	069b      	lsls	r3, r3, #26
 800626c:	431a      	orrs	r2, r3
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4903      	ldr	r1, [pc, #12]	; (8006284 <USB_EPStartXfer+0xaf8>)
 8006276:	468c      	mov	ip, r1
 8006278:	4463      	add	r3, ip
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	0609      	lsls	r1, r1, #24
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	e32d      	b.n	80068e0 <USB_EPStartXfer+0x1154>
 8006284:	40009800 	.word	0x40009800
 8006288:	83ffffff 	.word	0x83ffffff
 800628c:	07ff8fbf 	.word	0x07ff8fbf
 8006290:	00008080 	.word	0x00008080
 8006294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006296:	2b00      	cmp	r3, #0
 8006298:	d121      	bne.n	80062de <USB_EPStartXfer+0xb52>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4ae0      	ldr	r2, [pc, #896]	; (8006624 <USB_EPStartXfer+0xe98>)
 80062a2:	4694      	mov	ip, r2
 80062a4:	4463      	add	r3, ip
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	49dd      	ldr	r1, [pc, #884]	; (8006624 <USB_EPStartXfer+0xe98>)
 80062b0:	468c      	mov	ip, r1
 80062b2:	4463      	add	r3, ip
 80062b4:	49dc      	ldr	r1, [pc, #880]	; (8006628 <USB_EPStartXfer+0xe9c>)
 80062b6:	400a      	ands	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4ad8      	ldr	r2, [pc, #864]	; (8006624 <USB_EPStartXfer+0xe98>)
 80062c2:	4694      	mov	ip, r2
 80062c4:	4463      	add	r3, ip
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	49d5      	ldr	r1, [pc, #852]	; (8006624 <USB_EPStartXfer+0xe98>)
 80062d0:	468c      	mov	ip, r1
 80062d2:	4463      	add	r3, ip
 80062d4:	2180      	movs	r1, #128	; 0x80
 80062d6:	0609      	lsls	r1, r1, #24
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
 80062dc:	e300      	b.n	80068e0 <USB_EPStartXfer+0x1154>
 80062de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e6:	2201      	movs	r2, #1
 80062e8:	4013      	ands	r3, r2
 80062ea:	d002      	beq.n	80062f2 <USB_EPStartXfer+0xb66>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	3301      	adds	r3, #1
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4aca      	ldr	r2, [pc, #808]	; (8006624 <USB_EPStartXfer+0xe98>)
 80062fa:	4694      	mov	ip, r2
 80062fc:	4463      	add	r3, ip
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	069a      	lsls	r2, r3, #26
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	48c6      	ldr	r0, [pc, #792]	; (8006624 <USB_EPStartXfer+0xe98>)
 800630c:	4684      	mov	ip, r0
 800630e:	4463      	add	r3, ip
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	e2e4      	b.n	80068e0 <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	78db      	ldrb	r3, [r3, #3]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d000      	beq.n	8006320 <USB_EPStartXfer+0xb94>
 800631e:	e189      	b.n	8006634 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d000      	beq.n	800632a <USB_EPStartXfer+0xb9e>
 8006328:	e078      	b.n	800641c <USB_EPStartXfer+0xc90>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4abc      	ldr	r2, [pc, #752]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006332:	4694      	mov	ip, r2
 8006334:	4463      	add	r3, ip
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	49b9      	ldr	r1, [pc, #740]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006340:	468c      	mov	ip, r1
 8006342:	4463      	add	r3, ip
 8006344:	0412      	lsls	r2, r2, #16
 8006346:	0c12      	lsrs	r2, r2, #16
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b3e      	cmp	r3, #62	; 0x3e
 8006350:	d920      	bls.n	8006394 <USB_EPStartXfer+0xc08>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	221f      	movs	r2, #31
 8006360:	4013      	ands	r3, r2
 8006362:	d102      	bne.n	800636a <USB_EPStartXfer+0xbde>
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	3b01      	subs	r3, #1
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4aac      	ldr	r2, [pc, #688]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006372:	4694      	mov	ip, r2
 8006374:	4463      	add	r3, ip
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	069b      	lsls	r3, r3, #26
 800637c:	431a      	orrs	r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	49a7      	ldr	r1, [pc, #668]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006386:	468c      	mov	ip, r1
 8006388:	4463      	add	r3, ip
 800638a:	2180      	movs	r1, #128	; 0x80
 800638c:	0609      	lsls	r1, r1, #24
 800638e:	430a      	orrs	r2, r1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e069      	b.n	8006468 <USB_EPStartXfer+0xcdc>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d121      	bne.n	80063e0 <USB_EPStartXfer+0xc54>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4aa0      	ldr	r2, [pc, #640]	; (8006624 <USB_EPStartXfer+0xe98>)
 80063a4:	4694      	mov	ip, r2
 80063a6:	4463      	add	r3, ip
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	499c      	ldr	r1, [pc, #624]	; (8006624 <USB_EPStartXfer+0xe98>)
 80063b2:	468c      	mov	ip, r1
 80063b4:	4463      	add	r3, ip
 80063b6:	499c      	ldr	r1, [pc, #624]	; (8006628 <USB_EPStartXfer+0xe9c>)
 80063b8:	400a      	ands	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4a98      	ldr	r2, [pc, #608]	; (8006624 <USB_EPStartXfer+0xe98>)
 80063c4:	4694      	mov	ip, r2
 80063c6:	4463      	add	r3, ip
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	4994      	ldr	r1, [pc, #592]	; (8006624 <USB_EPStartXfer+0xe98>)
 80063d2:	468c      	mov	ip, r1
 80063d4:	4463      	add	r3, ip
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	0609      	lsls	r1, r1, #24
 80063da:	430a      	orrs	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e043      	b.n	8006468 <USB_EPStartXfer+0xcdc>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	637b      	str	r3, [r7, #52]	; 0x34
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2201      	movs	r2, #1
 80063ee:	4013      	ands	r3, r2
 80063f0:	d002      	beq.n	80063f8 <USB_EPStartXfer+0xc6c>
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	3301      	adds	r3, #1
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4a89      	ldr	r2, [pc, #548]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006400:	4694      	mov	ip, r2
 8006402:	4463      	add	r3, ip
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	069a      	lsls	r2, r3, #26
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4884      	ldr	r0, [pc, #528]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006412:	4684      	mov	ip, r0
 8006414:	4463      	add	r3, ip
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e025      	b.n	8006468 <USB_EPStartXfer+0xcdc>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d121      	bne.n	8006468 <USB_EPStartXfer+0xcdc>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4a7e      	ldr	r2, [pc, #504]	; (8006624 <USB_EPStartXfer+0xe98>)
 800642c:	4694      	mov	ip, r2
 800642e:	4463      	add	r3, ip
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	497a      	ldr	r1, [pc, #488]	; (8006624 <USB_EPStartXfer+0xe98>)
 800643a:	468c      	mov	ip, r1
 800643c:	4463      	add	r3, ip
 800643e:	0412      	lsls	r2, r2, #16
 8006440:	0c12      	lsrs	r2, r2, #16
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4a76      	ldr	r2, [pc, #472]	; (8006624 <USB_EPStartXfer+0xe98>)
 800644c:	4694      	mov	ip, r2
 800644e:	4463      	add	r3, ip
 8006450:	6819      	ldr	r1, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	041a      	lsls	r2, r3, #16
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	4871      	ldr	r0, [pc, #452]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006460:	4684      	mov	ip, r0
 8006462:	4463      	add	r3, ip
 8006464:	430a      	orrs	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d000      	beq.n	8006472 <USB_EPStartXfer+0xce6>
 8006470:	e078      	b.n	8006564 <USB_EPStartXfer+0xdd8>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4a6a      	ldr	r2, [pc, #424]	; (8006624 <USB_EPStartXfer+0xe98>)
 800647a:	4694      	mov	ip, r2
 800647c:	4463      	add	r3, ip
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4967      	ldr	r1, [pc, #412]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006488:	468c      	mov	ip, r1
 800648a:	4463      	add	r3, ip
 800648c:	0412      	lsls	r2, r2, #16
 800648e:	0c12      	lsrs	r2, r2, #16
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b3e      	cmp	r3, #62	; 0x3e
 8006498:	d920      	bls.n	80064dc <USB_EPStartXfer+0xd50>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	221f      	movs	r2, #31
 80064a8:	4013      	ands	r3, r2
 80064aa:	d102      	bne.n	80064b2 <USB_EPStartXfer+0xd26>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	3b01      	subs	r3, #1
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4a5a      	ldr	r2, [pc, #360]	; (8006624 <USB_EPStartXfer+0xe98>)
 80064ba:	4694      	mov	ip, r2
 80064bc:	4463      	add	r3, ip
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	069b      	lsls	r3, r3, #26
 80064c4:	431a      	orrs	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4955      	ldr	r1, [pc, #340]	; (8006624 <USB_EPStartXfer+0xe98>)
 80064ce:	468c      	mov	ip, r1
 80064d0:	4463      	add	r3, ip
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	0609      	lsls	r1, r1, #24
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	e069      	b.n	80065b0 <USB_EPStartXfer+0xe24>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d121      	bne.n	8006528 <USB_EPStartXfer+0xd9c>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4a4e      	ldr	r2, [pc, #312]	; (8006624 <USB_EPStartXfer+0xe98>)
 80064ec:	4694      	mov	ip, r2
 80064ee:	4463      	add	r3, ip
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	494a      	ldr	r1, [pc, #296]	; (8006624 <USB_EPStartXfer+0xe98>)
 80064fa:	468c      	mov	ip, r1
 80064fc:	4463      	add	r3, ip
 80064fe:	494a      	ldr	r1, [pc, #296]	; (8006628 <USB_EPStartXfer+0xe9c>)
 8006500:	400a      	ands	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4a46      	ldr	r2, [pc, #280]	; (8006624 <USB_EPStartXfer+0xe98>)
 800650c:	4694      	mov	ip, r2
 800650e:	4463      	add	r3, ip
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4942      	ldr	r1, [pc, #264]	; (8006624 <USB_EPStartXfer+0xe98>)
 800651a:	468c      	mov	ip, r1
 800651c:	4463      	add	r3, ip
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	0609      	lsls	r1, r1, #24
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	e043      	b.n	80065b0 <USB_EPStartXfer+0xe24>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2201      	movs	r2, #1
 8006536:	4013      	ands	r3, r2
 8006538:	d002      	beq.n	8006540 <USB_EPStartXfer+0xdb4>
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	3301      	adds	r3, #1
 800653e:	633b      	str	r3, [r7, #48]	; 0x30
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4a37      	ldr	r2, [pc, #220]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006548:	4694      	mov	ip, r2
 800654a:	4463      	add	r3, ip
 800654c:	6859      	ldr	r1, [r3, #4]
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	069a      	lsls	r2, r3, #26
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4832      	ldr	r0, [pc, #200]	; (8006624 <USB_EPStartXfer+0xe98>)
 800655a:	4684      	mov	ip, r0
 800655c:	4463      	add	r3, ip
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e025      	b.n	80065b0 <USB_EPStartXfer+0xe24>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d121      	bne.n	80065b0 <USB_EPStartXfer+0xe24>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	4a2c      	ldr	r2, [pc, #176]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006574:	4694      	mov	ip, r2
 8006576:	4463      	add	r3, ip
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4928      	ldr	r1, [pc, #160]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006582:	468c      	mov	ip, r1
 8006584:	4463      	add	r3, ip
 8006586:	0412      	lsls	r2, r2, #16
 8006588:	0c12      	lsrs	r2, r2, #16
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	4a24      	ldr	r2, [pc, #144]	; (8006624 <USB_EPStartXfer+0xe98>)
 8006594:	4694      	mov	ip, r2
 8006596:	4463      	add	r3, ip
 8006598:	6859      	ldr	r1, [r3, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	041a      	lsls	r2, r3, #16
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	481f      	ldr	r0, [pc, #124]	; (8006624 <USB_EPStartXfer+0xe98>)
 80065a8:	4684      	mov	ip, r0
 80065aa:	4463      	add	r3, ip
 80065ac:	430a      	orrs	r2, r1
 80065ae:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d100      	bne.n	80065ba <USB_EPStartXfer+0xe2e>
 80065b8:	e192      	b.n	80068e0 <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	18d3      	adds	r3, r2, r3
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	2126      	movs	r1, #38	; 0x26
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065cc:	187b      	adds	r3, r7, r1
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	01db      	lsls	r3, r3, #7
 80065d4:	4013      	ands	r3, r2
 80065d6:	d004      	beq.n	80065e2 <USB_EPStartXfer+0xe56>
 80065d8:	187b      	adds	r3, r7, r1
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	2240      	movs	r2, #64	; 0x40
 80065de:	4013      	ands	r3, r2
 80065e0:	d10d      	bne.n	80065fe <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065e2:	2126      	movs	r1, #38	; 0x26
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	881a      	ldrh	r2, [r3, #0]
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	01db      	lsls	r3, r3, #7
 80065ec:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065ee:	d000      	beq.n	80065f2 <USB_EPStartXfer+0xe66>
 80065f0:	e176      	b.n	80068e0 <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	2240      	movs	r2, #64	; 0x40
 80065f8:	4013      	ands	r3, r2
 80065fa:	d000      	beq.n	80065fe <USB_EPStartXfer+0xe72>
 80065fc:	e170      	b.n	80068e0 <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	18d3      	adds	r3, r2, r3
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <USB_EPStartXfer+0xea0>)
 800660c:	4013      	ands	r3, r2
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	18d3      	adds	r3, r2, r3
 800661a:	6a3a      	ldr	r2, [r7, #32]
 800661c:	4904      	ldr	r1, [pc, #16]	; (8006630 <USB_EPStartXfer+0xea4>)
 800661e:	430a      	orrs	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e15d      	b.n	80068e0 <USB_EPStartXfer+0x1154>
 8006624:	40009800 	.word	0x40009800
 8006628:	83ffffff 	.word	0x83ffffff
 800662c:	07ff8f8f 	.word	0x07ff8f8f
 8006630:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	78db      	ldrb	r3, [r3, #3]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d000      	beq.n	800663e <USB_EPStartXfer+0xeb2>
 800663c:	e14e      	b.n	80068dc <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	d909      	bls.n	800665e <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	619a      	str	r2, [r3, #24]
 800665c:	e005      	b.n	800666a <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d172      	bne.n	8006758 <USB_EPStartXfer+0xfcc>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4aaa      	ldr	r2, [pc, #680]	; (8006924 <USB_EPStartXfer+0x1198>)
 800667a:	4694      	mov	ip, r2
 800667c:	4463      	add	r3, ip
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	49a7      	ldr	r1, [pc, #668]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006688:	468c      	mov	ip, r1
 800668a:	4463      	add	r3, ip
 800668c:	0412      	lsls	r2, r2, #16
 800668e:	0c12      	lsrs	r2, r2, #16
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006694:	2b3e      	cmp	r3, #62	; 0x3e
 8006696:	d91e      	bls.n	80066d6 <USB_EPStartXfer+0xf4a>
 8006698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a0:	221f      	movs	r2, #31
 80066a2:	4013      	ands	r3, r2
 80066a4:	d102      	bne.n	80066ac <USB_EPStartXfer+0xf20>
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	3b01      	subs	r3, #1
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4a9c      	ldr	r2, [pc, #624]	; (8006924 <USB_EPStartXfer+0x1198>)
 80066b4:	4694      	mov	ip, r2
 80066b6:	4463      	add	r3, ip
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	069b      	lsls	r3, r3, #26
 80066be:	431a      	orrs	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4997      	ldr	r1, [pc, #604]	; (8006924 <USB_EPStartXfer+0x1198>)
 80066c8:	468c      	mov	ip, r1
 80066ca:	4463      	add	r3, ip
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	0609      	lsls	r1, r1, #24
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e065      	b.n	80067a2 <USB_EPStartXfer+0x1016>
 80066d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d121      	bne.n	8006720 <USB_EPStartXfer+0xf94>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4a90      	ldr	r2, [pc, #576]	; (8006924 <USB_EPStartXfer+0x1198>)
 80066e4:	4694      	mov	ip, r2
 80066e6:	4463      	add	r3, ip
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	498c      	ldr	r1, [pc, #560]	; (8006924 <USB_EPStartXfer+0x1198>)
 80066f2:	468c      	mov	ip, r1
 80066f4:	4463      	add	r3, ip
 80066f6:	498c      	ldr	r1, [pc, #560]	; (8006928 <USB_EPStartXfer+0x119c>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4a88      	ldr	r2, [pc, #544]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006704:	4694      	mov	ip, r2
 8006706:	4463      	add	r3, ip
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4984      	ldr	r1, [pc, #528]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006712:	468c      	mov	ip, r1
 8006714:	4463      	add	r3, ip
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	0609      	lsls	r1, r1, #24
 800671a:	430a      	orrs	r2, r1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e040      	b.n	80067a2 <USB_EPStartXfer+0x1016>
 8006720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006728:	2201      	movs	r2, #1
 800672a:	4013      	ands	r3, r2
 800672c:	d002      	beq.n	8006734 <USB_EPStartXfer+0xfa8>
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	3301      	adds	r3, #1
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4a7a      	ldr	r2, [pc, #488]	; (8006924 <USB_EPStartXfer+0x1198>)
 800673c:	4694      	mov	ip, r2
 800673e:	4463      	add	r3, ip
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	069a      	lsls	r2, r3, #26
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4875      	ldr	r0, [pc, #468]	; (8006924 <USB_EPStartXfer+0x1198>)
 800674e:	4684      	mov	ip, r0
 8006750:	4463      	add	r3, ip
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e024      	b.n	80067a2 <USB_EPStartXfer+0x1016>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d120      	bne.n	80067a2 <USB_EPStartXfer+0x1016>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4a6f      	ldr	r2, [pc, #444]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006768:	4694      	mov	ip, r2
 800676a:	4463      	add	r3, ip
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	496b      	ldr	r1, [pc, #428]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006776:	468c      	mov	ip, r1
 8006778:	4463      	add	r3, ip
 800677a:	0412      	lsls	r2, r2, #16
 800677c:	0c12      	lsrs	r2, r2, #16
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4a67      	ldr	r2, [pc, #412]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006788:	4694      	mov	ip, r2
 800678a:	4463      	add	r3, ip
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006790:	041a      	lsls	r2, r3, #16
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	4862      	ldr	r0, [pc, #392]	; (8006924 <USB_EPStartXfer+0x1198>)
 800679a:	4684      	mov	ip, r0
 800679c:	4463      	add	r3, ip
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d172      	bne.n	8006890 <USB_EPStartXfer+0x1104>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4a5c      	ldr	r2, [pc, #368]	; (8006924 <USB_EPStartXfer+0x1198>)
 80067b2:	4694      	mov	ip, r2
 80067b4:	4463      	add	r3, ip
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4959      	ldr	r1, [pc, #356]	; (8006924 <USB_EPStartXfer+0x1198>)
 80067c0:	468c      	mov	ip, r1
 80067c2:	4463      	add	r3, ip
 80067c4:	0412      	lsls	r2, r2, #16
 80067c6:	0c12      	lsrs	r2, r2, #16
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067cc:	2b3e      	cmp	r3, #62	; 0x3e
 80067ce:	d91e      	bls.n	800680e <USB_EPStartXfer+0x1082>
 80067d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d8:	221f      	movs	r2, #31
 80067da:	4013      	ands	r3, r2
 80067dc:	d102      	bne.n	80067e4 <USB_EPStartXfer+0x1058>
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	3b01      	subs	r3, #1
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	4a4e      	ldr	r2, [pc, #312]	; (8006924 <USB_EPStartXfer+0x1198>)
 80067ec:	4694      	mov	ip, r2
 80067ee:	4463      	add	r3, ip
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	069b      	lsls	r3, r3, #26
 80067f6:	431a      	orrs	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4949      	ldr	r1, [pc, #292]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006800:	468c      	mov	ip, r1
 8006802:	4463      	add	r3, ip
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	0609      	lsls	r1, r1, #24
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	e068      	b.n	80068e0 <USB_EPStartXfer+0x1154>
 800680e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006810:	2b00      	cmp	r3, #0
 8006812:	d121      	bne.n	8006858 <USB_EPStartXfer+0x10cc>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4a42      	ldr	r2, [pc, #264]	; (8006924 <USB_EPStartXfer+0x1198>)
 800681c:	4694      	mov	ip, r2
 800681e:	4463      	add	r3, ip
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	493e      	ldr	r1, [pc, #248]	; (8006924 <USB_EPStartXfer+0x1198>)
 800682a:	468c      	mov	ip, r1
 800682c:	4463      	add	r3, ip
 800682e:	493e      	ldr	r1, [pc, #248]	; (8006928 <USB_EPStartXfer+0x119c>)
 8006830:	400a      	ands	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4a3a      	ldr	r2, [pc, #232]	; (8006924 <USB_EPStartXfer+0x1198>)
 800683c:	4694      	mov	ip, r2
 800683e:	4463      	add	r3, ip
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4936      	ldr	r1, [pc, #216]	; (8006924 <USB_EPStartXfer+0x1198>)
 800684a:	468c      	mov	ip, r1
 800684c:	4463      	add	r3, ip
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	0609      	lsls	r1, r1, #24
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	e043      	b.n	80068e0 <USB_EPStartXfer+0x1154>
 8006858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
 800685e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006860:	2201      	movs	r2, #1
 8006862:	4013      	ands	r3, r2
 8006864:	d002      	beq.n	800686c <USB_EPStartXfer+0x10e0>
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	3301      	adds	r3, #1
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4a2c      	ldr	r2, [pc, #176]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006874:	4694      	mov	ip, r2
 8006876:	4463      	add	r3, ip
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	069a      	lsls	r2, r3, #26
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4827      	ldr	r0, [pc, #156]	; (8006924 <USB_EPStartXfer+0x1198>)
 8006886:	4684      	mov	ip, r0
 8006888:	4463      	add	r3, ip
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	e027      	b.n	80068e0 <USB_EPStartXfer+0x1154>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d123      	bne.n	80068e0 <USB_EPStartXfer+0x1154>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4a21      	ldr	r2, [pc, #132]	; (8006924 <USB_EPStartXfer+0x1198>)
 80068a0:	4694      	mov	ip, r2
 80068a2:	4463      	add	r3, ip
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	491d      	ldr	r1, [pc, #116]	; (8006924 <USB_EPStartXfer+0x1198>)
 80068ae:	468c      	mov	ip, r1
 80068b0:	4463      	add	r3, ip
 80068b2:	0412      	lsls	r2, r2, #16
 80068b4:	0c12      	lsrs	r2, r2, #16
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	4a19      	ldr	r2, [pc, #100]	; (8006924 <USB_EPStartXfer+0x1198>)
 80068c0:	4694      	mov	ip, r2
 80068c2:	4463      	add	r3, ip
 80068c4:	6859      	ldr	r1, [r3, #4]
 80068c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c8:	041a      	lsls	r2, r3, #16
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	4814      	ldr	r0, [pc, #80]	; (8006924 <USB_EPStartXfer+0x1198>)
 80068d2:	4684      	mov	ip, r0
 80068d4:	4463      	add	r3, ip
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	e001      	b.n	80068e0 <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e01c      	b.n	800691a <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a0f      	ldr	r2, [pc, #60]	; (800692c <USB_EPStartXfer+0x11a0>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2280      	movs	r2, #128	; 0x80
 80068f6:	0152      	lsls	r2, r2, #5
 80068f8:	4053      	eors	r3, r2
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2280      	movs	r2, #128	; 0x80
 8006900:	0192      	lsls	r2, r2, #6
 8006902:	4053      	eors	r3, r2
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	18d3      	adds	r3, r2, r3
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	4907      	ldr	r1, [pc, #28]	; (8006930 <USB_EPStartXfer+0x11a4>)
 8006914:	430a      	orrs	r2, r1
 8006916:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b017      	add	sp, #92	; 0x5c
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	40009800 	.word	0x40009800
 8006928:	83ffffff 	.word	0x83ffffff
 800692c:	07ffbf8f 	.word	0x07ffbf8f
 8006930:	00008080 	.word	0x00008080

08006934 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d016      	beq.n	8006974 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	18d3      	adds	r3, r2, r3
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a16      	ldr	r2, [pc, #88]	; (80069ac <USB_EPSetStall+0x78>)
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2210      	movs	r2, #16
 800695c:	4053      	eors	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4910      	ldr	r1, [pc, #64]	; (80069b0 <USB_EPSetStall+0x7c>)
 800696e:	430a      	orrs	r2, r1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e016      	b.n	80069a2 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	18d3      	adds	r3, r2, r3
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0c      	ldr	r2, [pc, #48]	; (80069b4 <USB_EPSetStall+0x80>)
 8006982:	4013      	ands	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	0152      	lsls	r2, r2, #5
 800698c:	4053      	eors	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	18d3      	adds	r3, r2, r3
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4904      	ldr	r1, [pc, #16]	; (80069b0 <USB_EPSetStall+0x7c>)
 800699e:	430a      	orrs	r2, r1
 80069a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	0018      	movs	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b004      	add	sp, #16
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	07ff8fbf 	.word	0x07ff8fbf
 80069b0:	00008080 	.word	0x00008080
 80069b4:	07ffbf8f 	.word	0x07ffbf8f

080069b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	7a9b      	ldrb	r3, [r3, #10]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d000      	beq.n	80069cc <USB_EPClearStall+0x14>
 80069ca:	e075      	b.n	8006ab8 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d037      	beq.n	8006a44 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	18d3      	adds	r3, r2, r3
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2240      	movs	r2, #64	; 0x40
 80069e6:	4013      	ands	r3, r2
 80069e8:	d011      	beq.n	8006a0e <USB_EPClearStall+0x56>
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	18d3      	adds	r3, r2, r3
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a33      	ldr	r2, [pc, #204]	; (8006ac4 <USB_EPClearStall+0x10c>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	18d3      	adds	r3, r2, r3
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	492f      	ldr	r1, [pc, #188]	; (8006ac8 <USB_EPClearStall+0x110>)
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	78db      	ldrb	r3, [r3, #3]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d050      	beq.n	8006ab8 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	18d3      	adds	r3, r2, r3
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2a      	ldr	r2, [pc, #168]	; (8006acc <USB_EPClearStall+0x114>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	4053      	eors	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	18d3      	adds	r3, r2, r3
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4924      	ldr	r1, [pc, #144]	; (8006ad0 <USB_EPClearStall+0x118>)
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e039      	b.n	8006ab8 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d011      	beq.n	8006a80 <USB_EPClearStall+0xc8>
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	18d3      	adds	r3, r2, r3
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <USB_EPClearStall+0x10c>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	18d3      	adds	r3, r2, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4916      	ldr	r1, [pc, #88]	; (8006ad4 <USB_EPClearStall+0x11c>)
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	18d3      	adds	r3, r2, r3
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a12      	ldr	r2, [pc, #72]	; (8006ad8 <USB_EPClearStall+0x120>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	0152      	lsls	r2, r2, #5
 8006a98:	4053      	eors	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	0192      	lsls	r2, r2, #6
 8006aa2:	4053      	eors	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	18d3      	adds	r3, r2, r3
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4907      	ldr	r1, [pc, #28]	; (8006ad0 <USB_EPClearStall+0x118>)
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	0018      	movs	r0, r3
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b008      	add	sp, #32
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	07ff8f8f 	.word	0x07ff8f8f
 8006ac8:	000080c0 	.word	0x000080c0
 8006acc:	07ff8fbf 	.word	0x07ff8fbf
 8006ad0:	00008080 	.word	0x00008080
 8006ad4:	0000c080 	.word	0x0000c080
 8006ad8:	07ffbf8f 	.word	0x07ffbf8f

08006adc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	000a      	movs	r2, r1
 8006ae6:	1cfb      	adds	r3, r7, #3
 8006ae8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006aea:	1cfb      	adds	r3, r7, #3
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	0018      	movs	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b002      	add	sp, #8
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	2280      	movs	r2, #128	; 0x80
 8006b10:	0212      	lsls	r2, r2, #8
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b002      	add	sp, #8
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	0018      	movs	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	b004      	add	sp, #16
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	0019      	movs	r1, r3
 8006b48:	1dbb      	adds	r3, r7, #6
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	1c0a      	adds	r2, r1, #0
 8006b50:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	3303      	adds	r3, #3
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006b5c:	2016      	movs	r0, #22
 8006b5e:	183b      	adds	r3, r7, r0
 8006b60:	1d3a      	adds	r2, r7, #4
 8006b62:	8812      	ldrh	r2, [r2, #0]
 8006b64:	2103      	movs	r1, #3
 8006b66:	400a      	ands	r2, r1
 8006b68:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8006b6e:	183b      	adds	r3, r7, r0
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <USB_WritePMA+0x40>
  {
    NbWords--;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006b7c:	1dbb      	adds	r3, r7, #6
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	4a28      	ldr	r2, [pc, #160]	; (8006c24 <USB_WritePMA+0xe8>)
 8006b82:	4694      	mov	ip, r2
 8006b84:	4463      	add	r3, ip
 8006b86:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	623b      	str	r3, [r7, #32]
 8006b8c:	e01f      	b.n	8006bce <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	7859      	ldrb	r1, [r3, #1]
 8006b94:	0209      	lsls	r1, r1, #8
 8006b96:	430a      	orrs	r2, r1
 8006b98:	7899      	ldrb	r1, [r3, #2]
 8006b9a:	0409      	lsls	r1, r1, #16
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	78db      	ldrb	r3, [r3, #3]
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	001a      	movs	r2, r3
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3304      	adds	r3, #4
 8006bae:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	623b      	str	r3, [r7, #32]
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1dc      	bne.n	8006b8e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8006bd4:	2316      	movs	r3, #22
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01e      	beq.n	8006c1c <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	001a      	movs	r2, r3
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	409a      	lsls	r2, r3
 8006bee:	0013      	movs	r3, r2
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	623b      	str	r3, [r7, #32]
      pBuf++;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8006c02:	2116      	movs	r1, #22
 8006c04:	187b      	adds	r3, r7, r1
 8006c06:	881a      	ldrh	r2, [r3, #0]
 8006c08:	187b      	adds	r3, r7, r1
 8006c0a:	3a01      	subs	r2, #1
 8006c0c:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8006c0e:	187b      	adds	r3, r7, r1
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1a:	601a      	str	r2, [r3, #0]
  }
}
 8006c1c:	46c0      	nop			; (mov r8, r8)
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b00a      	add	sp, #40	; 0x28
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40009800 	.word	0x40009800

08006c28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b08b      	sub	sp, #44	; 0x2c
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	0019      	movs	r1, r3
 8006c34:	1dbb      	adds	r3, r7, #6
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	1d3b      	adds	r3, r7, #4
 8006c3a:	1c0a      	adds	r2, r1, #0
 8006c3c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	3303      	adds	r3, #3
 8006c44:	089b      	lsrs	r3, r3, #2
 8006c46:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006c48:	201a      	movs	r0, #26
 8006c4a:	183b      	adds	r3, r7, r0
 8006c4c:	1d3a      	adds	r2, r7, #4
 8006c4e:	8812      	ldrh	r2, [r2, #0]
 8006c50:	2103      	movs	r1, #3
 8006c52:	400a      	ands	r2, r1
 8006c54:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006c5a:	1dbb      	adds	r3, r7, #6
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	4a39      	ldr	r2, [pc, #228]	; (8006d44 <USB_ReadPMA+0x11c>)
 8006c60:	4694      	mov	ip, r2
 8006c62:	4463      	add	r3, ip
 8006c64:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8006c66:	183b      	adds	r3, r7, r0
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
 8006c78:	e03c      	b.n	8006cf4 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	21ff      	movs	r1, #255	; 0xff
 8006c82:	4011      	ands	r1, r2
 8006c84:	000c      	movs	r4, r1
 8006c86:	7819      	ldrb	r1, [r3, #0]
 8006c88:	2000      	movs	r0, #0
 8006c8a:	4001      	ands	r1, r0
 8006c8c:	1c08      	adds	r0, r1, #0
 8006c8e:	1c21      	adds	r1, r4, #0
 8006c90:	4301      	orrs	r1, r0
 8006c92:	7019      	strb	r1, [r3, #0]
 8006c94:	0a11      	lsrs	r1, r2, #8
 8006c96:	20ff      	movs	r0, #255	; 0xff
 8006c98:	4001      	ands	r1, r0
 8006c9a:	000c      	movs	r4, r1
 8006c9c:	7859      	ldrb	r1, [r3, #1]
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	4001      	ands	r1, r0
 8006ca2:	1c08      	adds	r0, r1, #0
 8006ca4:	1c21      	adds	r1, r4, #0
 8006ca6:	4301      	orrs	r1, r0
 8006ca8:	7059      	strb	r1, [r3, #1]
 8006caa:	0c11      	lsrs	r1, r2, #16
 8006cac:	20ff      	movs	r0, #255	; 0xff
 8006cae:	4001      	ands	r1, r0
 8006cb0:	000c      	movs	r4, r1
 8006cb2:	7899      	ldrb	r1, [r3, #2]
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4001      	ands	r1, r0
 8006cb8:	1c08      	adds	r0, r1, #0
 8006cba:	1c21      	adds	r1, r4, #0
 8006cbc:	4301      	orrs	r1, r0
 8006cbe:	7099      	strb	r1, [r3, #2]
 8006cc0:	0e10      	lsrs	r0, r2, #24
 8006cc2:	78da      	ldrb	r2, [r3, #3]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	400a      	ands	r2, r1
 8006cc8:	1c11      	adds	r1, r2, #0
 8006cca:	1c02      	adds	r2, r0, #0
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	623b      	str	r3, [r7, #32]
    pBuf++;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3301      	adds	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1bf      	bne.n	8006c7a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8006cfa:	231a      	movs	r3, #26
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01b      	beq.n	8006d3c <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	40da      	lsrs	r2, r3
 8006d14:	0013      	movs	r3, r2
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	701a      	strb	r2, [r3, #0]
      count++;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	3301      	adds	r3, #1
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3301      	adds	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8006d28:	211a      	movs	r1, #26
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	881a      	ldrh	r2, [r3, #0]
 8006d2e:	187b      	adds	r3, r7, r1
 8006d30:	3a01      	subs	r2, #1
 8006d32:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8006d34:	187b      	adds	r3, r7, r1
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <USB_ReadPMA+0xe2>
  }
}
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b00b      	add	sp, #44	; 0x2c
 8006d42:	bd90      	pop	{r4, r7, pc}
 8006d44:	40009800 	.word	0x40009800

08006d48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	000a      	movs	r2, r1
 8006d52:	1cfb      	adds	r3, r7, #3
 8006d54:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d56:	2387      	movs	r3, #135	; 0x87
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f002 ff70 	bl	8009c40 <USBD_static_malloc>
 8006d60:	0003      	movs	r3, r0
 8006d62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	23b5      	movs	r3, #181	; 0xb5
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	58d2      	ldr	r2, [r2, r3]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32b0      	adds	r2, #176	; 0xb0
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	2100      	movs	r1, #0
 8006d7a:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e0e9      	b.n	8006f54 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d80:	2387      	movs	r3, #135	; 0x87
 8006d82:	009a      	lsls	r2, r3, #2
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2100      	movs	r1, #0
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f002 ffab 	bl	8009ce4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	23b5      	movs	r3, #181	; 0xb5
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	58d2      	ldr	r2, [r2, r3]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	32b0      	adds	r2, #176	; 0xb0
 8006d9a:	0092      	lsls	r2, r2, #2
 8006d9c:	68f9      	ldr	r1, [r7, #12]
 8006d9e:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	23b5      	movs	r3, #181	; 0xb5
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	58d2      	ldr	r2, [r2, r3]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	32b0      	adds	r2, #176	; 0xb0
 8006dac:	0092      	lsls	r2, r2, #2
 8006dae:	58d1      	ldr	r1, [r2, r3]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	23af      	movs	r3, #175	; 0xaf
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7c1b      	ldrb	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d13c      	bne.n	8006e3a <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dc0:	4b66      	ldr	r3, [pc, #408]	; (8006f5c <USBD_CDC_Init+0x214>)
 8006dc2:	7819      	ldrb	r1, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	; 0x80
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f002 fd73 	bl	80098b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dd0:	4b62      	ldr	r3, [pc, #392]	; (8006f5c <USBD_CDC_Init+0x214>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	230f      	movs	r3, #15
 8006dd8:	401a      	ands	r2, r3
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	0013      	movs	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	189b      	adds	r3, r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	18cb      	adds	r3, r1, r3
 8006de6:	3324      	adds	r3, #36	; 0x24
 8006de8:	2201      	movs	r2, #1
 8006dea:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dec:	4b5c      	ldr	r3, [pc, #368]	; (8006f60 <USBD_CDC_Init+0x218>)
 8006dee:	7819      	ldrb	r1, [r3, #0]
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f002 fd5d 	bl	80098b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dfc:	4b58      	ldr	r3, [pc, #352]	; (8006f60 <USBD_CDC_Init+0x218>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	001a      	movs	r2, r3
 8006e02:	230f      	movs	r3, #15
 8006e04:	401a      	ands	r2, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	23b2      	movs	r3, #178	; 0xb2
 8006e0a:	0059      	lsls	r1, r3, #1
 8006e0c:	0013      	movs	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	18c3      	adds	r3, r0, r3
 8006e16:	185b      	adds	r3, r3, r1
 8006e18:	2201      	movs	r2, #1
 8006e1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e1c:	4b51      	ldr	r3, [pc, #324]	; (8006f64 <USBD_CDC_Init+0x21c>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	001a      	movs	r2, r3
 8006e22:	230f      	movs	r3, #15
 8006e24:	401a      	ands	r2, r3
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	0013      	movs	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	189b      	adds	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	18cb      	adds	r3, r1, r3
 8006e32:	3326      	adds	r3, #38	; 0x26
 8006e34:	2210      	movs	r2, #16
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	e039      	b.n	8006eae <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e3a:	4b48      	ldr	r3, [pc, #288]	; (8006f5c <USBD_CDC_Init+0x214>)
 8006e3c:	7819      	ldrb	r1, [r3, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	2202      	movs	r2, #2
 8006e44:	f002 fd37 	bl	80098b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e48:	4b44      	ldr	r3, [pc, #272]	; (8006f5c <USBD_CDC_Init+0x214>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	230f      	movs	r3, #15
 8006e50:	401a      	ands	r2, r3
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	0013      	movs	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	18cb      	adds	r3, r1, r3
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	2201      	movs	r2, #1
 8006e62:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e64:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <USBD_CDC_Init+0x218>)
 8006e66:	7819      	ldrb	r1, [r3, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f002 fd22 	bl	80098b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e72:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <USBD_CDC_Init+0x218>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	001a      	movs	r2, r3
 8006e78:	230f      	movs	r3, #15
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	23b2      	movs	r3, #178	; 0xb2
 8006e80:	0059      	lsls	r1, r3, #1
 8006e82:	0013      	movs	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	189b      	adds	r3, r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	18c3      	adds	r3, r0, r3
 8006e8c:	185b      	adds	r3, r3, r1
 8006e8e:	2201      	movs	r2, #1
 8006e90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e92:	4b34      	ldr	r3, [pc, #208]	; (8006f64 <USBD_CDC_Init+0x21c>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	001a      	movs	r2, r3
 8006e98:	230f      	movs	r3, #15
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	0013      	movs	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	18cb      	adds	r3, r1, r3
 8006ea8:	3326      	adds	r3, #38	; 0x26
 8006eaa:	2210      	movs	r2, #16
 8006eac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eae:	4b2d      	ldr	r3, [pc, #180]	; (8006f64 <USBD_CDC_Init+0x21c>)
 8006eb0:	7819      	ldrb	r1, [r3, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	f002 fcfd 	bl	80098b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ebc:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <USBD_CDC_Init+0x21c>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	001a      	movs	r2, r3
 8006ec2:	230f      	movs	r3, #15
 8006ec4:	401a      	ands	r2, r3
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	0013      	movs	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	189b      	adds	r3, r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	18cb      	adds	r3, r1, r3
 8006ed2:	3324      	adds	r3, #36	; 0x24
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	2381      	movs	r3, #129	; 0x81
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	2100      	movs	r1, #0
 8006ee0:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	23b5      	movs	r3, #181	; 0xb5
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	58d3      	ldr	r3, [r2, r3]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	33b0      	adds	r3, #176	; 0xb0
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	18d3      	adds	r3, r2, r3
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	2385      	movs	r3, #133	; 0x85
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	2100      	movs	r1, #0
 8006f02:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	2386      	movs	r3, #134	; 0x86
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	2381      	movs	r3, #129	; 0x81
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	58d3      	ldr	r3, [r2, r3]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e01a      	b.n	8006f54 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7c1b      	ldrb	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10b      	bne.n	8006f3e <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <USBD_CDC_Init+0x218>)
 8006f28:	7819      	ldrb	r1, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	2381      	movs	r3, #129	; 0x81
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	58d2      	ldr	r2, [r2, r3]
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f002 fe01 	bl	8009b3e <USBD_LL_PrepareReceive>
 8006f3c:	e009      	b.n	8006f52 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <USBD_CDC_Init+0x218>)
 8006f40:	7819      	ldrb	r1, [r3, #0]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	2381      	movs	r3, #129	; 0x81
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	58d2      	ldr	r2, [r2, r3]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	f002 fdf6 	bl	8009b3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	0018      	movs	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b004      	add	sp, #16
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000093 	.word	0x20000093
 8006f60:	20000094 	.word	0x20000094
 8006f64:	20000095 	.word	0x20000095

08006f68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	000a      	movs	r2, r1
 8006f72:	1cfb      	adds	r3, r7, #3
 8006f74:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f76:	4b41      	ldr	r3, [pc, #260]	; (800707c <USBD_CDC_DeInit+0x114>)
 8006f78:	781a      	ldrb	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	0011      	movs	r1, r2
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f002 fcd0 	bl	8009924 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f84:	4b3d      	ldr	r3, [pc, #244]	; (800707c <USBD_CDC_DeInit+0x114>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	001a      	movs	r2, r3
 8006f8a:	230f      	movs	r3, #15
 8006f8c:	401a      	ands	r2, r3
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	0013      	movs	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	189b      	adds	r3, r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	18cb      	adds	r3, r1, r3
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fa0:	4b37      	ldr	r3, [pc, #220]	; (8007080 <USBD_CDC_DeInit+0x118>)
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	0011      	movs	r1, r2
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f002 fcbb 	bl	8009924 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fae:	4b34      	ldr	r3, [pc, #208]	; (8007080 <USBD_CDC_DeInit+0x118>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	230f      	movs	r3, #15
 8006fb6:	401a      	ands	r2, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	23b2      	movs	r3, #178	; 0xb2
 8006fbc:	0059      	lsls	r1, r3, #1
 8006fbe:	0013      	movs	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	18c3      	adds	r3, r0, r3
 8006fc8:	185b      	adds	r3, r3, r1
 8006fca:	2200      	movs	r2, #0
 8006fcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fce:	4b2d      	ldr	r3, [pc, #180]	; (8007084 <USBD_CDC_DeInit+0x11c>)
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	0011      	movs	r1, r2
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f002 fca4 	bl	8009924 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fdc:	4b29      	ldr	r3, [pc, #164]	; (8007084 <USBD_CDC_DeInit+0x11c>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	001a      	movs	r2, r3
 8006fe2:	230f      	movs	r3, #15
 8006fe4:	401a      	ands	r2, r3
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	0013      	movs	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	18cb      	adds	r3, r1, r3
 8006ff2:	3324      	adds	r3, #36	; 0x24
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ff8:	4b22      	ldr	r3, [pc, #136]	; (8007084 <USBD_CDC_DeInit+0x11c>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	230f      	movs	r3, #15
 8007000:	401a      	ands	r2, r3
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	0013      	movs	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	189b      	adds	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	18cb      	adds	r3, r1, r3
 800700e:	3326      	adds	r3, #38	; 0x26
 8007010:	2200      	movs	r2, #0
 8007012:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	23b5      	movs	r3, #181	; 0xb5
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	58d2      	ldr	r2, [r2, r3]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	32b0      	adds	r2, #176	; 0xb0
 8007020:	0092      	lsls	r2, r2, #2
 8007022:	58d3      	ldr	r3, [r2, r3]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d024      	beq.n	8007072 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	23b5      	movs	r3, #181	; 0xb5
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	58d3      	ldr	r3, [r2, r3]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	33b0      	adds	r3, #176	; 0xb0
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	18d3      	adds	r3, r2, r3
 8007038:	3304      	adds	r3, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	23b5      	movs	r3, #181	; 0xb5
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	58d2      	ldr	r2, [r2, r3]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32b0      	adds	r2, #176	; 0xb0
 800704c:	0092      	lsls	r2, r2, #2
 800704e:	58d3      	ldr	r3, [r2, r3]
 8007050:	0018      	movs	r0, r3
 8007052:	f002 fe01 	bl	8009c58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	23b5      	movs	r3, #181	; 0xb5
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	58d2      	ldr	r2, [r2, r3]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32b0      	adds	r2, #176	; 0xb0
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	2100      	movs	r1, #0
 8007066:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	23af      	movs	r3, #175	; 0xaf
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	2100      	movs	r1, #0
 8007070:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	0018      	movs	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	b002      	add	sp, #8
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000093 	.word	0x20000093
 8007080:	20000094 	.word	0x20000094
 8007084:	20000095 	.word	0x20000095

08007088 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	23b5      	movs	r3, #181	; 0xb5
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	58d2      	ldr	r2, [r2, r3]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	32b0      	adds	r2, #176	; 0xb0
 800709e:	0092      	lsls	r2, r2, #2
 80070a0:	58d3      	ldr	r3, [r2, r3]
 80070a2:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070a4:	230d      	movs	r3, #13
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80070ac:	230a      	movs	r3, #10
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	2200      	movs	r2, #0
 80070b2:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b4:	2317      	movs	r3, #23
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e0d1      	b.n	800726a <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	001a      	movs	r2, r3
 80070cc:	2360      	movs	r3, #96	; 0x60
 80070ce:	4013      	ands	r3, r2
 80070d0:	d05b      	beq.n	800718a <USBD_CDC_Setup+0x102>
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d000      	beq.n	80070d8 <USBD_CDC_Setup+0x50>
 80070d6:	e0ba      	b.n	800724e <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	88db      	ldrh	r3, [r3, #6]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d043      	beq.n	8007168 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da22      	bge.n	8007130 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	23b5      	movs	r3, #181	; 0xb5
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	58d3      	ldr	r3, [r2, r3]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	33b0      	adds	r3, #176	; 0xb0
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	18d3      	adds	r3, r2, r3
 80070fa:	3304      	adds	r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007104:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	88d2      	ldrh	r2, [r2, #6]
 800710a:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	88db      	ldrh	r3, [r3, #6]
 8007110:	220e      	movs	r2, #14
 8007112:	18ba      	adds	r2, r7, r2
 8007114:	b299      	uxth	r1, r3
 8007116:	2907      	cmp	r1, #7
 8007118:	d900      	bls.n	800711c <USBD_CDC_Setup+0x94>
 800711a:	2307      	movs	r3, #7
 800711c:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800711e:	6939      	ldr	r1, [r7, #16]
 8007120:	230e      	movs	r3, #14
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	881a      	ldrh	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	0018      	movs	r0, r3
 800712a:	f001 ff8b 	bl	8009044 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800712e:	e099      	b.n	8007264 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	7859      	ldrb	r1, [r3, #1]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	2380      	movs	r3, #128	; 0x80
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	88db      	ldrh	r3, [r3, #6]
 8007140:	2b3f      	cmp	r3, #63	; 0x3f
 8007142:	d803      	bhi.n	800714c <USBD_CDC_Setup+0xc4>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	88db      	ldrh	r3, [r3, #6]
 8007148:	b2da      	uxtb	r2, r3
 800714a:	e000      	b.n	800714e <USBD_CDC_Setup+0xc6>
 800714c:	2240      	movs	r2, #64	; 0x40
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4948      	ldr	r1, [pc, #288]	; (8007274 <USBD_CDC_Setup+0x1ec>)
 8007152:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007154:	6939      	ldr	r1, [r7, #16]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	4a46      	ldr	r2, [pc, #280]	; (8007274 <USBD_CDC_Setup+0x1ec>)
 800715a:	5c9b      	ldrb	r3, [r3, r2]
 800715c:	001a      	movs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0018      	movs	r0, r3
 8007162:	f001 ff9c 	bl	800909e <USBD_CtlPrepareRx>
      break;
 8007166:	e07d      	b.n	8007264 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	23b5      	movs	r3, #181	; 0xb5
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	58d3      	ldr	r3, [r2, r3]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	33b0      	adds	r3, #176	; 0xb0
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	3304      	adds	r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	7850      	ldrb	r0, [r2, #1]
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	4798      	blx	r3
      break;
 8007188:	e06c      	b.n	8007264 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	2b0b      	cmp	r3, #11
 8007190:	d03c      	beq.n	800720c <USBD_CDC_Setup+0x184>
 8007192:	dc4d      	bgt.n	8007230 <USBD_CDC_Setup+0x1a8>
 8007194:	2b0a      	cmp	r3, #10
 8007196:	d01f      	beq.n	80071d8 <USBD_CDC_Setup+0x150>
 8007198:	dc4a      	bgt.n	8007230 <USBD_CDC_Setup+0x1a8>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <USBD_CDC_Setup+0x11c>
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d051      	beq.n	8007246 <USBD_CDC_Setup+0x1be>
 80071a2:	e045      	b.n	8007230 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	23a7      	movs	r3, #167	; 0xa7
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	5cd3      	ldrb	r3, [r2, r3]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d107      	bne.n	80071c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071b2:	230a      	movs	r3, #10
 80071b4:	18f9      	adds	r1, r7, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	0018      	movs	r0, r3
 80071bc:	f001 ff42 	bl	8009044 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c0:	e044      	b.n	800724c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	0011      	movs	r1, r2
 80071c8:	0018      	movs	r0, r3
 80071ca:	f001 feb3 	bl	8008f34 <USBD_CtlError>
            ret = USBD_FAIL;
 80071ce:	2317      	movs	r3, #23
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	2203      	movs	r2, #3
 80071d4:	701a      	strb	r2, [r3, #0]
          break;
 80071d6:	e039      	b.n	800724c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	23a7      	movs	r3, #167	; 0xa7
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	5cd3      	ldrb	r3, [r2, r3]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d107      	bne.n	80071f6 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071e6:	230d      	movs	r3, #13
 80071e8:	18f9      	adds	r1, r7, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	0018      	movs	r0, r3
 80071f0:	f001 ff28 	bl	8009044 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071f4:	e02a      	b.n	800724c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	0011      	movs	r1, r2
 80071fc:	0018      	movs	r0, r3
 80071fe:	f001 fe99 	bl	8008f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8007202:	2317      	movs	r3, #23
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	2203      	movs	r2, #3
 8007208:	701a      	strb	r2, [r3, #0]
          break;
 800720a:	e01f      	b.n	800724c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	23a7      	movs	r3, #167	; 0xa7
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	5cd3      	ldrb	r3, [r2, r3]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d017      	beq.n	800724a <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0011      	movs	r1, r2
 8007220:	0018      	movs	r0, r3
 8007222:	f001 fe87 	bl	8008f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8007226:	2317      	movs	r3, #23
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	2203      	movs	r2, #3
 800722c:	701a      	strb	r2, [r3, #0]
          }
          break;
 800722e:	e00c      	b.n	800724a <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	0011      	movs	r1, r2
 8007236:	0018      	movs	r0, r3
 8007238:	f001 fe7c 	bl	8008f34 <USBD_CtlError>
          ret = USBD_FAIL;
 800723c:	2317      	movs	r3, #23
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	2203      	movs	r2, #3
 8007242:	701a      	strb	r2, [r3, #0]
          break;
 8007244:	e002      	b.n	800724c <USBD_CDC_Setup+0x1c4>
          break;
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	e00c      	b.n	8007264 <USBD_CDC_Setup+0x1dc>
          break;
 800724a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800724c:	e00a      	b.n	8007264 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	0011      	movs	r1, r2
 8007254:	0018      	movs	r0, r3
 8007256:	f001 fe6d 	bl	8008f34 <USBD_CtlError>
      ret = USBD_FAIL;
 800725a:	2317      	movs	r3, #23
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	2203      	movs	r2, #3
 8007260:	701a      	strb	r2, [r3, #0]
      break;
 8007262:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8007264:	2317      	movs	r3, #23
 8007266:	18fb      	adds	r3, r7, r3
 8007268:	781b      	ldrb	r3, [r3, #0]
}
 800726a:	0018      	movs	r0, r3
 800726c:	46bd      	mov	sp, r7
 800726e:	b006      	add	sp, #24
 8007270:	bd80      	pop	{r7, pc}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	00000201 	.word	0x00000201

08007278 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	000a      	movs	r2, r1
 8007282:	1cfb      	adds	r3, r7, #3
 8007284:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	23b2      	movs	r3, #178	; 0xb2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	58d3      	ldr	r3, [r2, r3]
 800728e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	23b5      	movs	r3, #181	; 0xb5
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	58d2      	ldr	r2, [r2, r3]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	32b0      	adds	r2, #176	; 0xb0
 800729c:	0092      	lsls	r2, r2, #2
 800729e:	58d3      	ldr	r3, [r2, r3]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e072      	b.n	800738e <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	23b5      	movs	r3, #181	; 0xb5
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	58d2      	ldr	r2, [r2, r3]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	; 0xb0
 80072b4:	0092      	lsls	r2, r2, #2
 80072b6:	58d3      	ldr	r3, [r2, r3]
 80072b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072ba:	1cfb      	adds	r3, r7, #3
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	220f      	movs	r2, #15
 80072c0:	401a      	ands	r2, r3
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	0013      	movs	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	189b      	adds	r3, r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	18cb      	adds	r3, r1, r3
 80072ce:	3318      	adds	r3, #24
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d031      	beq.n	800733a <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072d6:	1cfb      	adds	r3, r7, #3
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	220f      	movs	r2, #15
 80072dc:	401a      	ands	r2, r3
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	0013      	movs	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	18cb      	adds	r3, r1, r3
 80072ea:	3318      	adds	r3, #24
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	1cfb      	adds	r3, r7, #3
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	220f      	movs	r2, #15
 80072f4:	401a      	ands	r2, r3
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	0013      	movs	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	18cb      	adds	r3, r1, r3
 8007302:	334c      	adds	r3, #76	; 0x4c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	0019      	movs	r1, r3
 8007308:	f7f8 ff82 	bl	8000210 <__aeabi_uidivmod>
 800730c:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800730e:	d114      	bne.n	800733a <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007310:	1cfb      	adds	r3, r7, #3
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	220f      	movs	r2, #15
 8007316:	401a      	ands	r2, r3
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	0013      	movs	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	189b      	adds	r3, r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	18cb      	adds	r3, r1, r3
 8007324:	3318      	adds	r3, #24
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800732a:	1cfb      	adds	r3, r7, #3
 800732c:	7819      	ldrb	r1, [r3, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	2300      	movs	r3, #0
 8007332:	2200      	movs	r2, #0
 8007334:	f002 fbd3 	bl	8009ade <USBD_LL_Transmit>
 8007338:	e028      	b.n	800738c <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	2385      	movs	r3, #133	; 0x85
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	2100      	movs	r1, #0
 8007342:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	23b5      	movs	r3, #181	; 0xb5
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	58d3      	ldr	r3, [r2, r3]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	33b0      	adds	r3, #176	; 0xb0
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	18d3      	adds	r3, r2, r3
 8007354:	3304      	adds	r3, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d016      	beq.n	800738c <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	23b5      	movs	r3, #181	; 0xb5
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	58d3      	ldr	r3, [r2, r3]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	; 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	18d3      	adds	r3, r2, r3
 800736e:	3304      	adds	r3, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691c      	ldr	r4, [r3, #16]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	2382      	movs	r3, #130	; 0x82
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	58d0      	ldr	r0, [r2, r3]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2284      	movs	r2, #132	; 0x84
 8007380:	0092      	lsls	r2, r2, #2
 8007382:	1899      	adds	r1, r3, r2
 8007384:	1cfb      	adds	r3, r7, #3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	001a      	movs	r2, r3
 800738a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b005      	add	sp, #20
 8007394:	bd90      	pop	{r4, r7, pc}

08007396 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	000a      	movs	r2, r1
 80073a0:	1cfb      	adds	r3, r7, #3
 80073a2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	23b5      	movs	r3, #181	; 0xb5
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	58d2      	ldr	r2, [r2, r3]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	32b0      	adds	r2, #176	; 0xb0
 80073b0:	0092      	lsls	r2, r2, #2
 80073b2:	58d3      	ldr	r3, [r2, r3]
 80073b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	23b5      	movs	r3, #181	; 0xb5
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	58d2      	ldr	r2, [r2, r3]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32b0      	adds	r2, #176	; 0xb0
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	58d3      	ldr	r3, [r2, r3]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e022      	b.n	8007414 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073ce:	1cfb      	adds	r3, r7, #3
 80073d0:	781a      	ldrb	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	0011      	movs	r1, r2
 80073d6:	0018      	movs	r0, r3
 80073d8:	f002 fbe1 	bl	8009b9e <USBD_LL_GetRxDataSize>
 80073dc:	0001      	movs	r1, r0
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	2383      	movs	r3, #131	; 0x83
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	23b5      	movs	r3, #181	; 0xb5
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	58d3      	ldr	r3, [r2, r3]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	33b0      	adds	r3, #176	; 0xb0
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	18d3      	adds	r3, r2, r3
 80073f6:	3304      	adds	r3, #4
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	2381      	movs	r3, #129	; 0x81
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	58c8      	ldr	r0, [r1, r3]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2183      	movs	r1, #131	; 0x83
 8007408:	0089      	lsls	r1, r1, #2
 800740a:	468c      	mov	ip, r1
 800740c:	4463      	add	r3, ip
 800740e:	0019      	movs	r1, r3
 8007410:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	0018      	movs	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	b004      	add	sp, #16
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800741c:	b590      	push	{r4, r7, lr}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	23b5      	movs	r3, #181	; 0xb5
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	58d2      	ldr	r2, [r2, r3]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	32b0      	adds	r2, #176	; 0xb0
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	58d3      	ldr	r3, [r2, r3]
 8007434:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	e02c      	b.n	800749a <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	23b5      	movs	r3, #181	; 0xb5
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	58d3      	ldr	r3, [r2, r3]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	33b0      	adds	r3, #176	; 0xb0
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	18d3      	adds	r3, r2, r3
 8007450:	3304      	adds	r3, #4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01f      	beq.n	8007498 <USBD_CDC_EP0_RxReady+0x7c>
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	5cd3      	ldrb	r3, [r2, r3]
 8007460:	2bff      	cmp	r3, #255	; 0xff
 8007462:	d019      	beq.n	8007498 <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	23b5      	movs	r3, #181	; 0xb5
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	58d3      	ldr	r3, [r2, r3]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	33b0      	adds	r3, #176	; 0xb0
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	18d3      	adds	r3, r2, r3
 8007474:	3304      	adds	r3, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	2280      	movs	r2, #128	; 0x80
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 8007482:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4c07      	ldr	r4, [pc, #28]	; (80074a4 <USBD_CDC_EP0_RxReady+0x88>)
 8007488:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800748a:	b292      	uxth	r2, r2
 800748c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	21ff      	movs	r1, #255	; 0xff
 8007496:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	0018      	movs	r0, r3
 800749c:	46bd      	mov	sp, r7
 800749e:	b005      	add	sp, #20
 80074a0:	bd90      	pop	{r4, r7, pc}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	00000201 	.word	0x00000201

080074a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074b0:	4b20      	ldr	r3, [pc, #128]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80074b2:	2182      	movs	r1, #130	; 0x82
 80074b4:	0018      	movs	r0, r3
 80074b6:	f000 fd9c 	bl	8007ff2 <USBD_GetEpDesc>
 80074ba:	0003      	movs	r3, r0
 80074bc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074be:	4b1d      	ldr	r3, [pc, #116]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80074c0:	2101      	movs	r1, #1
 80074c2:	0018      	movs	r0, r3
 80074c4:	f000 fd95 	bl	8007ff2 <USBD_GetEpDesc>
 80074c8:	0003      	movs	r3, r0
 80074ca:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074cc:	4b19      	ldr	r3, [pc, #100]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80074ce:	2181      	movs	r1, #129	; 0x81
 80074d0:	0018      	movs	r0, r3
 80074d2:	f000 fd8e 	bl	8007ff2 <USBD_GetEpDesc>
 80074d6:	0003      	movs	r3, r0
 80074d8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2210      	movs	r2, #16
 80074e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	791a      	ldrb	r2, [r3, #4]
 80074f0:	2100      	movs	r1, #0
 80074f2:	400a      	ands	r2, r1
 80074f4:	1c11      	adds	r1, r2, #0
 80074f6:	2240      	movs	r2, #64	; 0x40
 80074f8:	430a      	orrs	r2, r1
 80074fa:	711a      	strb	r2, [r3, #4]
 80074fc:	795a      	ldrb	r2, [r3, #5]
 80074fe:	2100      	movs	r1, #0
 8007500:	400a      	ands	r2, r1
 8007502:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	791a      	ldrb	r2, [r3, #4]
 800750e:	2100      	movs	r1, #0
 8007510:	400a      	ands	r2, r1
 8007512:	1c11      	adds	r1, r2, #0
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	430a      	orrs	r2, r1
 8007518:	711a      	strb	r2, [r3, #4]
 800751a:	795a      	ldrb	r2, [r3, #5]
 800751c:	2100      	movs	r1, #0
 800751e:	400a      	ands	r2, r1
 8007520:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2243      	movs	r2, #67	; 0x43
 8007526:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007528:	4b02      	ldr	r3, [pc, #8]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800752a:	0018      	movs	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	b006      	add	sp, #24
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	20000050 	.word	0x20000050

08007538 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007540:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8007542:	2182      	movs	r1, #130	; 0x82
 8007544:	0018      	movs	r0, r3
 8007546:	f000 fd54 	bl	8007ff2 <USBD_GetEpDesc>
 800754a:	0003      	movs	r3, r0
 800754c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8007550:	2101      	movs	r1, #1
 8007552:	0018      	movs	r0, r3
 8007554:	f000 fd4d 	bl	8007ff2 <USBD_GetEpDesc>
 8007558:	0003      	movs	r3, r0
 800755a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800755c:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800755e:	2181      	movs	r1, #129	; 0x81
 8007560:	0018      	movs	r0, r3
 8007562:	f000 fd46 	bl	8007ff2 <USBD_GetEpDesc>
 8007566:	0003      	movs	r3, r0
 8007568:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2210      	movs	r2, #16
 8007574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	791a      	ldrb	r2, [r3, #4]
 8007580:	2100      	movs	r1, #0
 8007582:	400a      	ands	r2, r1
 8007584:	711a      	strb	r2, [r3, #4]
 8007586:	795a      	ldrb	r2, [r3, #5]
 8007588:	2100      	movs	r1, #0
 800758a:	400a      	ands	r2, r1
 800758c:	1c11      	adds	r1, r2, #0
 800758e:	2202      	movs	r2, #2
 8007590:	430a      	orrs	r2, r1
 8007592:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	791a      	ldrb	r2, [r3, #4]
 800759e:	2100      	movs	r1, #0
 80075a0:	400a      	ands	r2, r1
 80075a2:	711a      	strb	r2, [r3, #4]
 80075a4:	795a      	ldrb	r2, [r3, #5]
 80075a6:	2100      	movs	r1, #0
 80075a8:	400a      	ands	r2, r1
 80075aa:	1c11      	adds	r1, r2, #0
 80075ac:	2202      	movs	r2, #2
 80075ae:	430a      	orrs	r2, r1
 80075b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2243      	movs	r2, #67	; 0x43
 80075b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075b8:	4b02      	ldr	r3, [pc, #8]	; (80075c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 80075ba:	0018      	movs	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	b006      	add	sp, #24
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	20000050 	.word	0x20000050

080075c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075d0:	4b20      	ldr	r3, [pc, #128]	; (8007654 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80075d2:	2182      	movs	r1, #130	; 0x82
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 fd0c 	bl	8007ff2 <USBD_GetEpDesc>
 80075da:	0003      	movs	r3, r0
 80075dc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075de:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80075e0:	2101      	movs	r1, #1
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 fd05 	bl	8007ff2 <USBD_GetEpDesc>
 80075e8:	0003      	movs	r3, r0
 80075ea:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80075ee:	2181      	movs	r1, #129	; 0x81
 80075f0:	0018      	movs	r0, r3
 80075f2:	f000 fcfe 	bl	8007ff2 <USBD_GetEpDesc>
 80075f6:	0003      	movs	r3, r0
 80075f8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2210      	movs	r2, #16
 8007604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	791a      	ldrb	r2, [r3, #4]
 8007610:	2100      	movs	r1, #0
 8007612:	400a      	ands	r2, r1
 8007614:	1c11      	adds	r1, r2, #0
 8007616:	2240      	movs	r2, #64	; 0x40
 8007618:	430a      	orrs	r2, r1
 800761a:	711a      	strb	r2, [r3, #4]
 800761c:	795a      	ldrb	r2, [r3, #5]
 800761e:	2100      	movs	r1, #0
 8007620:	400a      	ands	r2, r1
 8007622:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	791a      	ldrb	r2, [r3, #4]
 800762e:	2100      	movs	r1, #0
 8007630:	400a      	ands	r2, r1
 8007632:	1c11      	adds	r1, r2, #0
 8007634:	2240      	movs	r2, #64	; 0x40
 8007636:	430a      	orrs	r2, r1
 8007638:	711a      	strb	r2, [r3, #4]
 800763a:	795a      	ldrb	r2, [r3, #5]
 800763c:	2100      	movs	r1, #0
 800763e:	400a      	ands	r2, r1
 8007640:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2243      	movs	r2, #67	; 0x43
 8007646:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007648:	4b02      	ldr	r3, [pc, #8]	; (8007654 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b006      	add	sp, #24
 8007650:	bd80      	pop	{r7, pc}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	20000050 	.word	0x20000050

08007658 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	220a      	movs	r2, #10
 8007664:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007666:	4b02      	ldr	r3, [pc, #8]	; (8007670 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007668:	0018      	movs	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	b002      	add	sp, #8
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000000c 	.word	0x2000000c

08007674 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e00b      	b.n	80076a0 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	23b5      	movs	r3, #181	; 0xb5
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	58d3      	ldr	r3, [r2, r3]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	33b0      	adds	r3, #176	; 0xb0
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	18d3      	adds	r3, r2, r3
 8007698:	3304      	adds	r3, #4
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	0018      	movs	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	b002      	add	sp, #8
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	23b5      	movs	r3, #181	; 0xb5
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	58d2      	ldr	r2, [r2, r3]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	32b0      	adds	r2, #176	; 0xb0
 80076c0:	0092      	lsls	r2, r2, #2
 80076c2:	58d3      	ldr	r3, [r2, r3]
 80076c4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e00a      	b.n	80076e6 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	2382      	movs	r3, #130	; 0x82
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	2384      	movs	r3, #132	; 0x84
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	0018      	movs	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	b006      	add	sp, #24
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	23b5      	movs	r3, #181	; 0xb5
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	58d2      	ldr	r2, [r2, r3]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	32b0      	adds	r2, #176	; 0xb0
 8007704:	0092      	lsls	r2, r2, #2
 8007706:	58d3      	ldr	r3, [r2, r3]
 8007708:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007710:	2303      	movs	r3, #3
 8007712:	e005      	b.n	8007720 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	2381      	movs	r3, #129	; 0x81
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	0018      	movs	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	b004      	add	sp, #16
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	23b5      	movs	r3, #181	; 0xb5
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	58d2      	ldr	r2, [r2, r3]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	32b0      	adds	r2, #176	; 0xb0
 800773c:	0092      	lsls	r2, r2, #2
 800773e:	58d3      	ldr	r3, [r2, r3]
 8007740:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007742:	230f      	movs	r3, #15
 8007744:	18fb      	adds	r3, r7, r3
 8007746:	2201      	movs	r2, #1
 8007748:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	e030      	b.n	80077b6 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	2385      	movs	r3, #133	; 0x85
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	58d3      	ldr	r3, [r2, r3]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d127      	bne.n	80077b0 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	2385      	movs	r3, #133	; 0x85
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	2101      	movs	r1, #1
 8007768:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800776a:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <USBD_CDC_TransmitPacket+0x98>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	001a      	movs	r2, r3
 8007770:	230f      	movs	r3, #15
 8007772:	401a      	ands	r2, r3
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	2384      	movs	r3, #132	; 0x84
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	58c9      	ldr	r1, [r1, r3]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	0013      	movs	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	189b      	adds	r3, r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	18c3      	adds	r3, r0, r3
 8007788:	3318      	adds	r3, #24
 800778a:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <USBD_CDC_TransmitPacket+0x98>)
 800778e:	7819      	ldrb	r1, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	2382      	movs	r3, #130	; 0x82
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	58d4      	ldr	r4, [r2, r3]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	2384      	movs	r3, #132	; 0x84
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	58d3      	ldr	r3, [r2, r3]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	0022      	movs	r2, r4
 80077a4:	f002 f99b 	bl	8009ade <USBD_LL_Transmit>

    ret = USBD_OK;
 80077a8:	230f      	movs	r3, #15
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 80077b0:	230f      	movs	r3, #15
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	781b      	ldrb	r3, [r3, #0]
}
 80077b6:	0018      	movs	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b005      	add	sp, #20
 80077bc:	bd90      	pop	{r4, r7, pc}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	20000093 	.word	0x20000093

080077c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	23b5      	movs	r3, #181	; 0xb5
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	58d2      	ldr	r2, [r2, r3]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	32b0      	adds	r2, #176	; 0xb0
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	58d3      	ldr	r3, [r2, r3]
 80077dc:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	23b5      	movs	r3, #181	; 0xb5
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	58d2      	ldr	r2, [r2, r3]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32b0      	adds	r2, #176	; 0xb0
 80077ea:	0092      	lsls	r2, r2, #2
 80077ec:	58d3      	ldr	r3, [r2, r3]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e01a      	b.n	800782c <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7c1b      	ldrb	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <USBD_CDC_ReceivePacket+0x70>)
 8007800:	7819      	ldrb	r1, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	2381      	movs	r3, #129	; 0x81
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	58d2      	ldr	r2, [r2, r3]
 800780a:	2380      	movs	r3, #128	; 0x80
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f002 f995 	bl	8009b3e <USBD_LL_PrepareReceive>
 8007814:	e009      	b.n	800782a <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007816:	4b07      	ldr	r3, [pc, #28]	; (8007834 <USBD_CDC_ReceivePacket+0x70>)
 8007818:	7819      	ldrb	r1, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	2381      	movs	r3, #129	; 0x81
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	58d2      	ldr	r2, [r2, r3]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	f002 f98a 	bl	8009b3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	0018      	movs	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	b004      	add	sp, #16
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000094 	.word	0x20000094

08007838 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007838:	b5b0      	push	{r4, r5, r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	1dfb      	adds	r3, r7, #7
 8007844:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800784c:	2303      	movs	r3, #3
 800784e:	e029      	b.n	80078a4 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	23ae      	movs	r3, #174	; 0xae
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	2100      	movs	r1, #0
 8007858:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	23b1      	movs	r3, #177	; 0xb1
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	2100      	movs	r1, #0
 8007862:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	23b4      	movs	r3, #180	; 0xb4
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	2100      	movs	r1, #0
 800786c:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	23ad      	movs	r3, #173	; 0xad
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	23a7      	movs	r3, #167	; 0xa7
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	2101      	movs	r1, #1
 8007886:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1dfa      	adds	r2, r7, #7
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007890:	2517      	movs	r5, #23
 8007892:	197c      	adds	r4, r7, r5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0018      	movs	r0, r3
 8007898:	f001 ff76 	bl	8009788 <USBD_LL_Init>
 800789c:	0003      	movs	r3, r0
 800789e:	7023      	strb	r3, [r4, #0]

  return ret;
 80078a0:	197b      	adds	r3, r7, r5
 80078a2:	781b      	ldrb	r3, [r3, #0]
}
 80078a4:	0018      	movs	r0, r3
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b006      	add	sp, #24
 80078aa:	bdb0      	pop	{r4, r5, r7, pc}

080078ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078b6:	230e      	movs	r3, #14
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2200      	movs	r2, #0
 80078bc:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e02b      	b.n	8007920 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	23ae      	movs	r3, #174	; 0xae
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	23b5      	movs	r3, #181	; 0xb5
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	58d2      	ldr	r2, [r2, r3]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32ae      	adds	r2, #174	; 0xae
 80078de:	0092      	lsls	r2, r2, #2
 80078e0:	58d3      	ldr	r3, [r2, r3]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d011      	beq.n	800790c <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	23b5      	movs	r3, #181	; 0xb5
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	58d2      	ldr	r2, [r2, r3]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	32ae      	adds	r2, #174	; 0xae
 80078f4:	0092      	lsls	r2, r2, #2
 80078f6:	58d3      	ldr	r3, [r2, r3]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	220e      	movs	r2, #14
 80078fc:	18ba      	adds	r2, r7, r2
 80078fe:	0010      	movs	r0, r2
 8007900:	4798      	blx	r3
 8007902:	0001      	movs	r1, r0
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	23b4      	movs	r3, #180	; 0xb4
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	23b6      	movs	r3, #182	; 0xb6
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	58d3      	ldr	r3, [r2, r3]
 8007914:	1c59      	adds	r1, r3, #1
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	23b6      	movs	r3, #182	; 0xb6
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	0018      	movs	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	b004      	add	sp, #16
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	0018      	movs	r0, r3
 8007934:	f001 ff9a 	bl	800986c <USBD_LL_Start>
 8007938:	0003      	movs	r3, r0
}
 800793a:	0018      	movs	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	b002      	add	sp, #8
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007954:	b590      	push	{r4, r7, lr}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	000a      	movs	r2, r1
 800795e:	1cfb      	adds	r3, r7, #3
 8007960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	210f      	movs	r1, #15
 8007964:	187b      	adds	r3, r7, r1
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	23ae      	movs	r3, #174	; 0xae
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	58d3      	ldr	r3, [r2, r3]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00c      	beq.n	8007990 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	23ae      	movs	r3, #174	; 0xae
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	58d3      	ldr	r3, [r2, r3]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	187c      	adds	r4, r7, r1
 8007982:	1cfa      	adds	r2, r7, #3
 8007984:	7811      	ldrb	r1, [r2, #0]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	0010      	movs	r0, r2
 800798a:	4798      	blx	r3
 800798c:	0003      	movs	r3, r0
 800798e:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007990:	230f      	movs	r3, #15
 8007992:	18fb      	adds	r3, r7, r3
 8007994:	781b      	ldrb	r3, [r3, #0]
}
 8007996:	0018      	movs	r0, r3
 8007998:	46bd      	mov	sp, r7
 800799a:	b005      	add	sp, #20
 800799c:	bd90      	pop	{r4, r7, pc}

0800799e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799e:	b590      	push	{r4, r7, lr}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	000a      	movs	r2, r1
 80079a8:	1cfb      	adds	r3, r7, #3
 80079aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ac:	240f      	movs	r4, #15
 80079ae:	193b      	adds	r3, r7, r4
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	23ae      	movs	r3, #174	; 0xae
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	58d3      	ldr	r3, [r2, r3]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	1cfa      	adds	r2, r7, #3
 80079c0:	7811      	ldrb	r1, [r2, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	0010      	movs	r0, r2
 80079c6:	4798      	blx	r3
 80079c8:	1e03      	subs	r3, r0, #0
 80079ca:	d002      	beq.n	80079d2 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 80079cc:	193b      	adds	r3, r7, r4
 80079ce:	2203      	movs	r2, #3
 80079d0:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079d2:	230f      	movs	r3, #15
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	781b      	ldrb	r3, [r3, #0]
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b005      	add	sp, #20
 80079de:	bd90      	pop	{r4, r7, pc}

080079e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a30      	ldr	r2, [pc, #192]	; (8007ab0 <USBD_LL_SetupStage+0xd0>)
 80079ee:	4694      	mov	ip, r2
 80079f0:	4463      	add	r3, ip
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	0011      	movs	r1, r2
 80079f6:	0018      	movs	r0, r3
 80079f8:	f001 fa5f 	bl	8008eba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	23a5      	movs	r3, #165	; 0xa5
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	2101      	movs	r1, #1
 8007a04:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	23ac      	movs	r3, #172	; 0xac
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	5ad3      	ldrh	r3, [r2, r3]
 8007a0e:	0019      	movs	r1, r3
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	23a6      	movs	r3, #166	; 0xa6
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <USBD_LL_SetupStage+0xd0>)
 8007a1c:	5c9b      	ldrb	r3, [r3, r2]
 8007a1e:	001a      	movs	r2, r3
 8007a20:	231f      	movs	r3, #31
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d01f      	beq.n	8007a68 <USBD_LL_SetupStage+0x88>
 8007a28:	d82b      	bhi.n	8007a82 <USBD_LL_SetupStage+0xa2>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <USBD_LL_SetupStage+0x54>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d00d      	beq.n	8007a4e <USBD_LL_SetupStage+0x6e>
 8007a32:	e026      	b.n	8007a82 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a1e      	ldr	r2, [pc, #120]	; (8007ab0 <USBD_LL_SetupStage+0xd0>)
 8007a38:	189a      	adds	r2, r3, r2
 8007a3a:	230f      	movs	r3, #15
 8007a3c:	18fc      	adds	r4, r7, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0011      	movs	r1, r2
 8007a42:	0018      	movs	r0, r3
 8007a44:	f000 fb5e 	bl	8008104 <USBD_StdDevReq>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	7023      	strb	r3, [r4, #0]
      break;
 8007a4c:	e029      	b.n	8007aa2 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <USBD_LL_SetupStage+0xd0>)
 8007a52:	189a      	adds	r2, r3, r2
 8007a54:	230f      	movs	r3, #15
 8007a56:	18fc      	adds	r4, r7, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	0011      	movs	r1, r2
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f000 fbcf 	bl	8008200 <USBD_StdItfReq>
 8007a62:	0003      	movs	r3, r0
 8007a64:	7023      	strb	r3, [r4, #0]
      break;
 8007a66:	e01c      	b.n	8007aa2 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a11      	ldr	r2, [pc, #68]	; (8007ab0 <USBD_LL_SetupStage+0xd0>)
 8007a6c:	189a      	adds	r2, r3, r2
 8007a6e:	230f      	movs	r3, #15
 8007a70:	18fc      	adds	r4, r7, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	0011      	movs	r1, r2
 8007a76:	0018      	movs	r0, r3
 8007a78:	f000 fc4f 	bl	800831a <USBD_StdEPReq>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	7023      	strb	r3, [r4, #0]
      break;
 8007a80:	e00f      	b.n	8007aa2 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <USBD_LL_SetupStage+0xd0>)
 8007a86:	5c9b      	ldrb	r3, [r3, r2]
 8007a88:	227f      	movs	r2, #127	; 0x7f
 8007a8a:	4393      	bics	r3, r2
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	230f      	movs	r3, #15
 8007a90:	18fc      	adds	r4, r7, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0011      	movs	r1, r2
 8007a96:	0018      	movs	r0, r3
 8007a98:	f001 ff6f 	bl	800997a <USBD_LL_StallEP>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	7023      	strb	r3, [r4, #0]
      break;
 8007aa0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007aa2:	230f      	movs	r3, #15
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b005      	add	sp, #20
 8007aae:	bd90      	pop	{r4, r7, pc}
 8007ab0:	000002aa 	.word	0x000002aa

08007ab4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	607a      	str	r2, [r7, #4]
 8007abe:	200b      	movs	r0, #11
 8007ac0:	183b      	adds	r3, r7, r0
 8007ac2:	1c0a      	adds	r2, r1, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac6:	2317      	movs	r3, #23
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8007ace:	183b      	adds	r3, r7, r0
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d000      	beq.n	8007ad8 <USBD_LL_DataOutStage+0x24>
 8007ad6:	e084      	b.n	8007be2 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3355      	adds	r3, #85	; 0x55
 8007adc:	33ff      	adds	r3, #255	; 0xff
 8007ade:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	23a5      	movs	r3, #165	; 0xa5
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	58d3      	ldr	r3, [r2, r3]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d000      	beq.n	8007aee <USBD_LL_DataOutStage+0x3a>
 8007aec:	e0c0      	b.n	8007c70 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d914      	bls.n	8007b24 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	68d9      	ldr	r1, [r3, #12]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	000b      	movs	r3, r1
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d900      	bls.n	8007b18 <USBD_LL_DataOutStage+0x64>
 8007b16:	0013      	movs	r3, r2
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	001a      	movs	r2, r3
 8007b1e:	f001 fade 	bl	80090de <USBD_CtlContinueRx>
 8007b22:	e0a5      	b.n	8007c70 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4a55      	ldr	r2, [pc, #340]	; (8007c7c <USBD_LL_DataOutStage+0x1c8>)
 8007b28:	5c9b      	ldrb	r3, [r3, r2]
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	231f      	movs	r3, #31
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d018      	beq.n	8007b66 <USBD_LL_DataOutStage+0xb2>
 8007b34:	d825      	bhi.n	8007b82 <USBD_LL_DataOutStage+0xce>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <USBD_LL_DataOutStage+0x8c>
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d005      	beq.n	8007b4a <USBD_LL_DataOutStage+0x96>
 8007b3e:	e020      	b.n	8007b82 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b40:	2316      	movs	r3, #22
 8007b42:	18fb      	adds	r3, r7, r3
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
            break;
 8007b48:	e020      	b.n	8007b8c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4a4c      	ldr	r2, [pc, #304]	; (8007c80 <USBD_LL_DataOutStage+0x1cc>)
 8007b4e:	5a9b      	ldrh	r3, [r3, r2]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	2316      	movs	r3, #22
 8007b54:	18fc      	adds	r4, r7, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	0011      	movs	r1, r2
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 fa31 	bl	8007fc2 <USBD_CoreFindIF>
 8007b60:	0003      	movs	r3, r0
 8007b62:	7023      	strb	r3, [r4, #0]
            break;
 8007b64:	e012      	b.n	8007b8c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4a45      	ldr	r2, [pc, #276]	; (8007c80 <USBD_LL_DataOutStage+0x1cc>)
 8007b6a:	5a9b      	ldrh	r3, [r3, r2]
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	2316      	movs	r3, #22
 8007b70:	18fc      	adds	r4, r7, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	0011      	movs	r1, r2
 8007b76:	0018      	movs	r0, r3
 8007b78:	f000 fa2f 	bl	8007fda <USBD_CoreFindEP>
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	7023      	strb	r3, [r4, #0]
            break;
 8007b80:	e004      	b.n	8007b8c <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b82:	2316      	movs	r3, #22
 8007b84:	18fb      	adds	r3, r7, r3
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
            break;
 8007b8a:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b8c:	2116      	movs	r1, #22
 8007b8e:	187b      	adds	r3, r7, r1
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d120      	bne.n	8007bd8 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	23a7      	movs	r3, #167	; 0xa7
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	5cd3      	ldrb	r3, [r2, r3]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d119      	bne.n	8007bd8 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ba4:	187b      	adds	r3, r7, r1
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	32ae      	adds	r2, #174	; 0xae
 8007bac:	0092      	lsls	r2, r2, #2
 8007bae:	58d3      	ldr	r3, [r2, r3]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d010      	beq.n	8007bd8 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 8007bb6:	0008      	movs	r0, r1
 8007bb8:	187b      	adds	r3, r7, r1
 8007bba:	7819      	ldrb	r1, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	23b5      	movs	r3, #181	; 0xb5
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007bc4:	183b      	adds	r3, r7, r0
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	32ae      	adds	r2, #174	; 0xae
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	58d3      	ldr	r3, [r2, r3]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	0010      	movs	r0, r2
 8007bd6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f001 fa90 	bl	8009100 <USBD_CtlSendStatus>
 8007be0:	e046      	b.n	8007c70 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007be2:	260b      	movs	r6, #11
 8007be4:	19bb      	adds	r3, r7, r6
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	227f      	movs	r2, #127	; 0x7f
 8007bea:	4013      	ands	r3, r2
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	2516      	movs	r5, #22
 8007bf0:	197c      	adds	r4, r7, r5
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	0011      	movs	r1, r2
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f000 f9ef 	bl	8007fda <USBD_CoreFindEP>
 8007bfc:	0003      	movs	r3, r0
 8007bfe:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c00:	0029      	movs	r1, r5
 8007c02:	187b      	adds	r3, r7, r1
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2bff      	cmp	r3, #255	; 0xff
 8007c08:	d032      	beq.n	8007c70 <USBD_LL_DataOutStage+0x1bc>
 8007c0a:	187b      	adds	r3, r7, r1
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d12e      	bne.n	8007c70 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	23a7      	movs	r3, #167	; 0xa7
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	5cd3      	ldrb	r3, [r2, r3]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d11f      	bne.n	8007c60 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c20:	187b      	adds	r3, r7, r1
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	32ae      	adds	r2, #174	; 0xae
 8007c28:	0092      	lsls	r2, r2, #2
 8007c2a:	58d3      	ldr	r3, [r2, r3]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d016      	beq.n	8007c60 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8007c32:	0008      	movs	r0, r1
 8007c34:	187b      	adds	r3, r7, r1
 8007c36:	7819      	ldrb	r1, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	23b5      	movs	r3, #181	; 0xb5
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c40:	183b      	adds	r3, r7, r0
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	32ae      	adds	r2, #174	; 0xae
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	58d3      	ldr	r3, [r2, r3]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2217      	movs	r2, #23
 8007c50:	18bc      	adds	r4, r7, r2
 8007c52:	19ba      	adds	r2, r7, r6
 8007c54:	7811      	ldrb	r1, [r2, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	0010      	movs	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	0003      	movs	r3, r0
 8007c5e:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8007c60:	2217      	movs	r2, #23
 8007c62:	18bb      	adds	r3, r7, r2
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8007c6a:	18bb      	adds	r3, r7, r2
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	e000      	b.n	8007c72 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	0018      	movs	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b007      	add	sp, #28
 8007c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	000002aa 	.word	0x000002aa
 8007c80:	000002ae 	.word	0x000002ae

08007c84 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	200b      	movs	r0, #11
 8007c90:	183b      	adds	r3, r7, r0
 8007c92:	1c0a      	adds	r2, r1, #0
 8007c94:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c96:	183b      	adds	r3, r7, r0
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d000      	beq.n	8007ca0 <USBD_LL_DataInStage+0x1c>
 8007c9e:	e07d      	b.n	8007d9c <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3314      	adds	r3, #20
 8007ca4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	23a5      	movs	r3, #165	; 0xa5
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	58d3      	ldr	r3, [r2, r3]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d164      	bne.n	8007d7c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d914      	bls.n	8007ce8 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f001 f9d1 	bl	800907c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f001 ff2c 	bl	8009b3e <USBD_LL_PrepareReceive>
 8007ce6:	e049      	b.n	8007d7c <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d11f      	bne.n	8007d34 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d319      	bcc.n	8007d34 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	23a6      	movs	r3, #166	; 0xa6
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d211      	bcs.n	8007d34 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2100      	movs	r1, #0
 8007d16:	0018      	movs	r0, r3
 8007d18:	f001 f9b0 	bl	800907c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	23a6      	movs	r3, #166	; 0xa6
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	2100      	movs	r1, #0
 8007d24:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f001 ff06 	bl	8009b3e <USBD_LL_PrepareReceive>
 8007d32:	e023      	b.n	8007d7c <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	23a7      	movs	r3, #167	; 0xa7
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	5cd3      	ldrb	r3, [r2, r3]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d113      	bne.n	8007d6a <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	23ae      	movs	r3, #174	; 0xae
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	58d3      	ldr	r3, [r2, r3]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00c      	beq.n	8007d6a <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	23b5      	movs	r3, #181	; 0xb5
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	2100      	movs	r1, #0
 8007d58:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	23ae      	movs	r3, #174	; 0xae
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	58d3      	ldr	r3, [r2, r3]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	0010      	movs	r0, r2
 8007d68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2180      	movs	r1, #128	; 0x80
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f001 fe03 	bl	800997a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f001 f9d6 	bl	8009128 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	23a8      	movs	r3, #168	; 0xa8
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	5cd3      	ldrb	r3, [r2, r3]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d050      	beq.n	8007e2a <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f7ff fdd9 	bl	8007942 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	23a8      	movs	r3, #168	; 0xa8
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	2100      	movs	r1, #0
 8007d98:	54d1      	strb	r1, [r2, r3]
 8007d9a:	e046      	b.n	8007e2a <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d9c:	260b      	movs	r6, #11
 8007d9e:	19bb      	adds	r3, r7, r6
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2280      	movs	r2, #128	; 0x80
 8007da4:	4252      	negs	r2, r2
 8007da6:	4313      	orrs	r3, r2
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	2517      	movs	r5, #23
 8007dac:	197c      	adds	r4, r7, r5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	0011      	movs	r1, r2
 8007db2:	0018      	movs	r0, r3
 8007db4:	f000 f911 	bl	8007fda <USBD_CoreFindEP>
 8007db8:	0003      	movs	r3, r0
 8007dba:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dbc:	0029      	movs	r1, r5
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2bff      	cmp	r3, #255	; 0xff
 8007dc4:	d031      	beq.n	8007e2a <USBD_LL_DataInStage+0x1a6>
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d12d      	bne.n	8007e2a <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	23a7      	movs	r3, #167	; 0xa7
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	5cd3      	ldrb	r3, [r2, r3]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d126      	bne.n	8007e2a <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ddc:	187b      	adds	r3, r7, r1
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	32ae      	adds	r2, #174	; 0xae
 8007de4:	0092      	lsls	r2, r2, #2
 8007de6:	58d3      	ldr	r3, [r2, r3]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d01d      	beq.n	8007e2a <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8007dee:	0008      	movs	r0, r1
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	7819      	ldrb	r1, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	23b5      	movs	r3, #181	; 0xb5
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007dfc:	183b      	adds	r3, r7, r0
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	32ae      	adds	r2, #174	; 0xae
 8007e04:	0092      	lsls	r2, r2, #2
 8007e06:	58d3      	ldr	r3, [r2, r3]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	2516      	movs	r5, #22
 8007e0c:	197c      	adds	r4, r7, r5
 8007e0e:	19ba      	adds	r2, r7, r6
 8007e10:	7811      	ldrb	r1, [r2, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	0010      	movs	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	0003      	movs	r3, r0
 8007e1a:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 8007e1c:	197b      	adds	r3, r7, r5
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8007e24:	197b      	adds	r3, r7, r5
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	e000      	b.n	8007e2c <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b007      	add	sp, #28
 8007e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e34 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3c:	240f      	movs	r4, #15
 8007e3e:	193b      	adds	r3, r7, r4
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	23a7      	movs	r3, #167	; 0xa7
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	23a5      	movs	r3, #165	; 0xa5
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	2100      	movs	r1, #0
 8007e56:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	23a9      	movs	r3, #169	; 0xa9
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	2100      	movs	r1, #0
 8007e66:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	23a8      	movs	r3, #168	; 0xa8
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	2100      	movs	r1, #0
 8007e70:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	23ae      	movs	r3, #174	; 0xae
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	58d3      	ldr	r3, [r2, r3]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	23ae      	movs	r3, #174	; 0xae
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	58d3      	ldr	r3, [r2, r3]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00f      	beq.n	8007eac <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	23ae      	movs	r3, #174	; 0xae
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	58d3      	ldr	r3, [r2, r3]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	b2d9      	uxtb	r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	4790      	blx	r2
 8007ea2:	1e03      	subs	r3, r0, #0
 8007ea4:	d002      	beq.n	8007eac <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8007ea6:	193b      	adds	r3, r7, r4
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	f001 fcff 	bl	80098b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	23b2      	movs	r3, #178	; 0xb2
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	23b0      	movs	r3, #176	; 0xb0
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	2140      	movs	r1, #64	; 0x40
 8007eca:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	2340      	movs	r3, #64	; 0x40
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	f001 fcef 	bl	80098b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	621a      	str	r2, [r3, #32]

  return ret;
 8007ee4:	230f      	movs	r3, #15
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	781b      	ldrb	r3, [r3, #0]
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b005      	add	sp, #20
 8007ef0:	bd90      	pop	{r4, r7, pc}

08007ef2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	000a      	movs	r2, r1
 8007efc:	1cfb      	adds	r3, r7, #3
 8007efe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	1cfa      	adds	r2, r7, #3
 8007f04:	7812      	ldrb	r2, [r2, #0]
 8007f06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b002      	add	sp, #8
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	23a7      	movs	r3, #167	; 0xa7
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	5cd3      	ldrb	r3, [r2, r3]
 8007f24:	b2d9      	uxtb	r1, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a05      	ldr	r2, [pc, #20]	; (8007f40 <USBD_LL_Suspend+0x2c>)
 8007f2a:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	23a7      	movs	r3, #167	; 0xa7
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	2104      	movs	r1, #4
 8007f34:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	0018      	movs	r0, r3
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b002      	add	sp, #8
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	0000029d 	.word	0x0000029d

08007f44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	23a7      	movs	r3, #167	; 0xa7
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	5cd3      	ldrb	r3, [r2, r3]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d107      	bne.n	8007f6a <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <USBD_LL_Resume+0x30>)
 8007f5e:	5c9b      	ldrb	r3, [r3, r2]
 8007f60:	b2d9      	uxtb	r1, r3
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	23a7      	movs	r3, #167	; 0xa7
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b002      	add	sp, #8
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	0000029d 	.word	0x0000029d

08007f78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	23a7      	movs	r3, #167	; 0xa7
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	5cd3      	ldrb	r3, [r2, r3]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d114      	bne.n	8007fb8 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	23ae      	movs	r3, #174	; 0xae
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	58d3      	ldr	r3, [r2, r3]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00e      	beq.n	8007fb8 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	23ae      	movs	r3, #174	; 0xae
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	58d3      	ldr	r3, [r2, r3]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	23ae      	movs	r3, #174	; 0xae
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	58d3      	ldr	r3, [r2, r3]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	0010      	movs	r0, r2
 8007fb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	0018      	movs	r0, r3
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	b002      	add	sp, #8
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	000a      	movs	r2, r1
 8007fcc:	1cfb      	adds	r3, r7, #3
 8007fce:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	b002      	add	sp, #8
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	000a      	movs	r2, r1
 8007fe4:	1cfb      	adds	r3, r7, #3
 8007fe6:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fe8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fea:	0018      	movs	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b002      	add	sp, #8
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	000a      	movs	r2, r1
 8007ffc:	1cfb      	adds	r3, r7, #3
 8007ffe:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	789a      	ldrb	r2, [r3, #2]
 8008010:	78db      	ldrb	r3, [r3, #3]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	4313      	orrs	r3, r2
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	429a      	cmp	r2, r3
 8008020:	d92a      	bls.n	8008078 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b29a      	uxth	r2, r3
 8008028:	230a      	movs	r3, #10
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800802e:	e016      	b.n	800805e <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008030:	230a      	movs	r3, #10
 8008032:	18fa      	adds	r2, r7, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	0011      	movs	r1, r2
 8008038:	0018      	movs	r0, r3
 800803a:	f000 f822 	bl	8008082 <USBD_GetNextDesc>
 800803e:	0003      	movs	r3, r0
 8008040:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	2b05      	cmp	r3, #5
 8008048:	d109      	bne.n	800805e <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	789b      	ldrb	r3, [r3, #2]
 8008052:	1cfa      	adds	r2, r7, #3
 8008054:	7812      	ldrb	r2, [r2, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d00d      	beq.n	8008076 <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	789a      	ldrb	r2, [r3, #2]
 8008062:	78db      	ldrb	r3, [r3, #3]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	4313      	orrs	r3, r2
 8008068:	b29a      	uxth	r2, r3
 800806a:	230a      	movs	r3, #10
 800806c:	18fb      	adds	r3, r7, r3
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d8dd      	bhi.n	8008030 <USBD_GetEpDesc+0x3e>
 8008074:	e000      	b.n	8008078 <USBD_GetEpDesc+0x86>
          break;
 8008076:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008078:	693b      	ldr	r3, [r7, #16]
}
 800807a:	0018      	movs	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	b006      	add	sp, #24
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	881a      	ldrh	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	18d3      	adds	r3, r2, r3
 800809c:	b29a      	uxth	r2, r3
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	001a      	movs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	189b      	adds	r3, r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080ae:	68fb      	ldr	r3, [r7, #12]
}
 80080b0:	0018      	movs	r0, r3
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b004      	add	sp, #16
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	781a      	ldrb	r2, [r3, #0]
 80080c8:	2112      	movs	r1, #18
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	3301      	adds	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	2010      	movs	r0, #16
 80080da:	183b      	adds	r3, r7, r0
 80080dc:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080de:	183b      	adds	r3, r7, r0
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	b21a      	sxth	r2, r3
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	2100      	movs	r1, #0
 80080ea:	5e5b      	ldrsh	r3, [r3, r1]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	b21a      	sxth	r2, r3
 80080f0:	210e      	movs	r1, #14
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 80080f6:	187b      	adds	r3, r7, r1
 80080f8:	881b      	ldrh	r3, [r3, #0]
}
 80080fa:	0018      	movs	r0, r3
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b006      	add	sp, #24
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	230f      	movs	r3, #15
 8008110:	18fb      	adds	r3, r7, r3
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	001a      	movs	r2, r3
 800811c:	2360      	movs	r3, #96	; 0x60
 800811e:	4013      	ands	r3, r2
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d004      	beq.n	800812e <USBD_StdDevReq+0x2a>
 8008124:	d85b      	bhi.n	80081de <USBD_StdDevReq+0xda>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d013      	beq.n	8008152 <USBD_StdDevReq+0x4e>
 800812a:	2b20      	cmp	r3, #32
 800812c:	d157      	bne.n	80081de <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	23b5      	movs	r3, #181	; 0xb5
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	58d2      	ldr	r2, [r2, r3]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	; 0xae
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	58d3      	ldr	r3, [r2, r3]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	220f      	movs	r2, #15
 8008142:	18bc      	adds	r4, r7, r2
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	0010      	movs	r0, r2
 800814a:	4798      	blx	r3
 800814c:	0003      	movs	r3, r0
 800814e:	7023      	strb	r3, [r4, #0]
      break;
 8008150:	e04c      	b.n	80081ec <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b09      	cmp	r3, #9
 8008158:	d839      	bhi.n	80081ce <USBD_StdDevReq+0xca>
 800815a:	009a      	lsls	r2, r3, #2
 800815c:	4b27      	ldr	r3, [pc, #156]	; (80081fc <USBD_StdDevReq+0xf8>)
 800815e:	18d3      	adds	r3, r2, r3
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	0011      	movs	r1, r2
 800816a:	0018      	movs	r0, r3
 800816c:	f000 fada 	bl	8008724 <USBD_GetDescriptor>
          break;
 8008170:	e034      	b.n	80081dc <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	0011      	movs	r1, r2
 8008178:	0018      	movs	r0, r3
 800817a:	f000 fcad 	bl	8008ad8 <USBD_SetAddress>
          break;
 800817e:	e02d      	b.n	80081dc <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008180:	230f      	movs	r3, #15
 8008182:	18fc      	adds	r4, r7, r3
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0011      	movs	r1, r2
 800818a:	0018      	movs	r0, r3
 800818c:	f000 fcfa 	bl	8008b84 <USBD_SetConfig>
 8008190:	0003      	movs	r3, r0
 8008192:	7023      	strb	r3, [r4, #0]
          break;
 8008194:	e022      	b.n	80081dc <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	0011      	movs	r1, r2
 800819c:	0018      	movs	r0, r3
 800819e:	f000 fdbf 	bl	8008d20 <USBD_GetConfig>
          break;
 80081a2:	e01b      	b.n	80081dc <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f000 fdf4 	bl	8008d98 <USBD_GetStatus>
          break;
 80081b0:	e014      	b.n	80081dc <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	0011      	movs	r1, r2
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 fe28 	bl	8008e0e <USBD_SetFeature>
          break;
 80081be:	e00d      	b.n	80081dc <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	0011      	movs	r1, r2
 80081c6:	0018      	movs	r0, r3
 80081c8:	f000 fe50 	bl	8008e6c <USBD_ClrFeature>
          break;
 80081cc:	e006      	b.n	80081dc <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	0011      	movs	r1, r2
 80081d4:	0018      	movs	r0, r3
 80081d6:	f000 fead 	bl	8008f34 <USBD_CtlError>
          break;
 80081da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80081dc:	e006      	b.n	80081ec <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	0011      	movs	r1, r2
 80081e4:	0018      	movs	r0, r3
 80081e6:	f000 fea5 	bl	8008f34 <USBD_CtlError>
      break;
 80081ea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80081ec:	230f      	movs	r3, #15
 80081ee:	18fb      	adds	r3, r7, r3
 80081f0:	781b      	ldrb	r3, [r3, #0]
}
 80081f2:	0018      	movs	r0, r3
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b005      	add	sp, #20
 80081f8:	bd90      	pop	{r4, r7, pc}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	08009e34 	.word	0x08009e34

08008200 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008200:	b5b0      	push	{r4, r5, r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800820a:	230f      	movs	r3, #15
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	001a      	movs	r2, r3
 8008218:	2360      	movs	r3, #96	; 0x60
 800821a:	4013      	ands	r3, r2
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	d005      	beq.n	800822c <USBD_StdItfReq+0x2c>
 8008220:	d900      	bls.n	8008224 <USBD_StdItfReq+0x24>
 8008222:	e06c      	b.n	80082fe <USBD_StdItfReq+0xfe>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <USBD_StdItfReq+0x2c>
 8008228:	2b20      	cmp	r3, #32
 800822a:	d168      	bne.n	80082fe <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	23a7      	movs	r3, #167	; 0xa7
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	5cd3      	ldrb	r3, [r2, r3]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	2b02      	cmp	r3, #2
 800823a:	d857      	bhi.n	80082ec <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	889b      	ldrh	r3, [r3, #4]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	d84b      	bhi.n	80082de <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	889b      	ldrh	r3, [r3, #4]
 800824a:	b2da      	uxtb	r2, r3
 800824c:	250e      	movs	r5, #14
 800824e:	197c      	adds	r4, r7, r5
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0011      	movs	r1, r2
 8008254:	0018      	movs	r0, r3
 8008256:	f7ff feb4 	bl	8007fc2 <USBD_CoreFindIF>
 800825a:	0003      	movs	r3, r0
 800825c:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800825e:	0029      	movs	r1, r5
 8008260:	187b      	adds	r3, r7, r1
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2bff      	cmp	r3, #255	; 0xff
 8008266:	d028      	beq.n	80082ba <USBD_StdItfReq+0xba>
 8008268:	187b      	adds	r3, r7, r1
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d124      	bne.n	80082ba <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008270:	187b      	adds	r3, r7, r1
 8008272:	781a      	ldrb	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32ae      	adds	r2, #174	; 0xae
 8008278:	0092      	lsls	r2, r2, #2
 800827a:	58d3      	ldr	r3, [r2, r3]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d016      	beq.n	80082b0 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8008282:	0008      	movs	r0, r1
 8008284:	187b      	adds	r3, r7, r1
 8008286:	7819      	ldrb	r1, [r3, #0]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	23b5      	movs	r3, #181	; 0xb5
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008290:	183b      	adds	r3, r7, r0
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	32ae      	adds	r2, #174	; 0xae
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	58d3      	ldr	r3, [r2, r3]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	220f      	movs	r2, #15
 80082a0:	18bc      	adds	r4, r7, r2
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	0010      	movs	r0, r2
 80082a8:	4798      	blx	r3
 80082aa:	0003      	movs	r3, r0
 80082ac:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 80082ae:	e008      	b.n	80082c2 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082b0:	230f      	movs	r3, #15
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	2203      	movs	r2, #3
 80082b6:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 80082b8:	e003      	b.n	80082c2 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082ba:	230f      	movs	r3, #15
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	2203      	movs	r2, #3
 80082c0:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	88db      	ldrh	r3, [r3, #6]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d117      	bne.n	80082fa <USBD_StdItfReq+0xfa>
 80082ca:	230f      	movs	r3, #15
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d112      	bne.n	80082fa <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	0018      	movs	r0, r3
 80082d8:	f000 ff12 	bl	8009100 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082dc:	e00d      	b.n	80082fa <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	0011      	movs	r1, r2
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 fe25 	bl	8008f34 <USBD_CtlError>
          break;
 80082ea:	e006      	b.n	80082fa <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	0011      	movs	r1, r2
 80082f2:	0018      	movs	r0, r3
 80082f4:	f000 fe1e 	bl	8008f34 <USBD_CtlError>
          break;
 80082f8:	e000      	b.n	80082fc <USBD_StdItfReq+0xfc>
          break;
 80082fa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80082fc:	e006      	b.n	800830c <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	0011      	movs	r1, r2
 8008304:	0018      	movs	r0, r3
 8008306:	f000 fe15 	bl	8008f34 <USBD_CtlError>
      break;
 800830a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800830c:	230f      	movs	r3, #15
 800830e:	18fb      	adds	r3, r7, r3
 8008310:	781b      	ldrb	r3, [r3, #0]
}
 8008312:	0018      	movs	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	b004      	add	sp, #16
 8008318:	bdb0      	pop	{r4, r5, r7, pc}

0800831a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831a:	b5b0      	push	{r4, r5, r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008324:	230f      	movs	r3, #15
 8008326:	18fb      	adds	r3, r7, r3
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	889a      	ldrh	r2, [r3, #4]
 8008330:	230e      	movs	r3, #14
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	001a      	movs	r2, r3
 800833c:	2360      	movs	r3, #96	; 0x60
 800833e:	4013      	ands	r3, r2
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	d006      	beq.n	8008352 <USBD_StdEPReq+0x38>
 8008344:	d900      	bls.n	8008348 <USBD_StdEPReq+0x2e>
 8008346:	e1de      	b.n	8008706 <USBD_StdEPReq+0x3ec>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d039      	beq.n	80083c0 <USBD_StdEPReq+0xa6>
 800834c:	2b20      	cmp	r3, #32
 800834e:	d000      	beq.n	8008352 <USBD_StdEPReq+0x38>
 8008350:	e1d9      	b.n	8008706 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008352:	250d      	movs	r5, #13
 8008354:	197c      	adds	r4, r7, r5
 8008356:	230e      	movs	r3, #14
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	0011      	movs	r1, r2
 8008360:	0018      	movs	r0, r3
 8008362:	f7ff fe3a 	bl	8007fda <USBD_CoreFindEP>
 8008366:	0003      	movs	r3, r0
 8008368:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800836a:	197b      	adds	r3, r7, r5
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2bff      	cmp	r3, #255	; 0xff
 8008370:	d100      	bne.n	8008374 <USBD_StdEPReq+0x5a>
 8008372:	e1cf      	b.n	8008714 <USBD_StdEPReq+0x3fa>
 8008374:	197b      	adds	r3, r7, r5
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d000      	beq.n	800837e <USBD_StdEPReq+0x64>
 800837c:	e1ca      	b.n	8008714 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 800837e:	197b      	adds	r3, r7, r5
 8008380:	7819      	ldrb	r1, [r3, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	23b5      	movs	r3, #181	; 0xb5
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800838a:	0029      	movs	r1, r5
 800838c:	187b      	adds	r3, r7, r1
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	32ae      	adds	r2, #174	; 0xae
 8008394:	0092      	lsls	r2, r2, #2
 8008396:	58d3      	ldr	r3, [r2, r3]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d100      	bne.n	80083a0 <USBD_StdEPReq+0x86>
 800839e:	e1b9      	b.n	8008714 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083a0:	187b      	adds	r3, r7, r1
 80083a2:	781a      	ldrb	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32ae      	adds	r2, #174	; 0xae
 80083a8:	0092      	lsls	r2, r2, #2
 80083aa:	58d3      	ldr	r3, [r2, r3]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	220f      	movs	r2, #15
 80083b0:	18bc      	adds	r4, r7, r2
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	0010      	movs	r0, r2
 80083b8:	4798      	blx	r3
 80083ba:	0003      	movs	r3, r0
 80083bc:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 80083be:	e1a9      	b.n	8008714 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d007      	beq.n	80083d8 <USBD_StdEPReq+0xbe>
 80083c8:	dd00      	ble.n	80083cc <USBD_StdEPReq+0xb2>
 80083ca:	e194      	b.n	80086f6 <USBD_StdEPReq+0x3dc>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d100      	bne.n	80083d2 <USBD_StdEPReq+0xb8>
 80083d0:	e0c9      	b.n	8008566 <USBD_StdEPReq+0x24c>
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d04d      	beq.n	8008472 <USBD_StdEPReq+0x158>
 80083d6:	e18e      	b.n	80086f6 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	23a7      	movs	r3, #167	; 0xa7
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	5cd3      	ldrb	r3, [r2, r3]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d002      	beq.n	80083ec <USBD_StdEPReq+0xd2>
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d01e      	beq.n	8008428 <USBD_StdEPReq+0x10e>
 80083ea:	e03a      	b.n	8008462 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ec:	220e      	movs	r2, #14
 80083ee:	18bb      	adds	r3, r7, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <USBD_StdEPReq+0x100>
 80083f6:	18bb      	adds	r3, r7, r2
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b80      	cmp	r3, #128	; 0x80
 80083fc:	d00d      	beq.n	800841a <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083fe:	18bb      	adds	r3, r7, r2
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	0011      	movs	r1, r2
 8008406:	0018      	movs	r0, r3
 8008408:	f001 fab7 	bl	800997a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	0018      	movs	r0, r3
 8008412:	f001 fab2 	bl	800997a <USBD_LL_StallEP>
 8008416:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008418:	e02a      	b.n	8008470 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	0011      	movs	r1, r2
 8008420:	0018      	movs	r0, r3
 8008422:	f000 fd87 	bl	8008f34 <USBD_CtlError>
              break;
 8008426:	e023      	b.n	8008470 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	885b      	ldrh	r3, [r3, #2]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d113      	bne.n	8008458 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008430:	220e      	movs	r2, #14
 8008432:	18bb      	adds	r3, r7, r2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <USBD_StdEPReq+0x13e>
 800843a:	18bb      	adds	r3, r7, r2
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d00a      	beq.n	8008458 <USBD_StdEPReq+0x13e>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	88db      	ldrh	r3, [r3, #6]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800844a:	18bb      	adds	r3, r7, r2
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	0011      	movs	r1, r2
 8008452:	0018      	movs	r0, r3
 8008454:	f001 fa91 	bl	800997a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	0018      	movs	r0, r3
 800845c:	f000 fe50 	bl	8009100 <USBD_CtlSendStatus>

              break;
 8008460:	e006      	b.n	8008470 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0011      	movs	r1, r2
 8008468:	0018      	movs	r0, r3
 800846a:	f000 fd63 	bl	8008f34 <USBD_CtlError>
              break;
 800846e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008470:	e148      	b.n	8008704 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	23a7      	movs	r3, #167	; 0xa7
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	5cd3      	ldrb	r3, [r2, r3]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d002      	beq.n	8008486 <USBD_StdEPReq+0x16c>
 8008480:	2b03      	cmp	r3, #3
 8008482:	d01e      	beq.n	80084c2 <USBD_StdEPReq+0x1a8>
 8008484:	e066      	b.n	8008554 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008486:	220e      	movs	r2, #14
 8008488:	18bb      	adds	r3, r7, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d011      	beq.n	80084b4 <USBD_StdEPReq+0x19a>
 8008490:	18bb      	adds	r3, r7, r2
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d00d      	beq.n	80084b4 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008498:	18bb      	adds	r3, r7, r2
 800849a:	781a      	ldrb	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	0011      	movs	r1, r2
 80084a0:	0018      	movs	r0, r3
 80084a2:	f001 fa6a 	bl	800997a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2180      	movs	r1, #128	; 0x80
 80084aa:	0018      	movs	r0, r3
 80084ac:	f001 fa65 	bl	800997a <USBD_LL_StallEP>
 80084b0:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084b2:	e057      	b.n	8008564 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	0011      	movs	r1, r2
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 fd3a 	bl	8008f34 <USBD_CtlError>
              break;
 80084c0:	e050      	b.n	8008564 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d14b      	bne.n	8008562 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084ca:	210e      	movs	r1, #14
 80084cc:	187b      	adds	r3, r7, r1
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	227f      	movs	r2, #127	; 0x7f
 80084d2:	4013      	ands	r3, r2
 80084d4:	d006      	beq.n	80084e4 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084d6:	187b      	adds	r3, r7, r1
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	0011      	movs	r1, r2
 80084de:	0018      	movs	r0, r3
 80084e0:	f001 fa76 	bl	80099d0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	0018      	movs	r0, r3
 80084e8:	f000 fe0a 	bl	8009100 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084ec:	250d      	movs	r5, #13
 80084ee:	197c      	adds	r4, r7, r5
 80084f0:	230e      	movs	r3, #14
 80084f2:	18fb      	adds	r3, r7, r3
 80084f4:	781a      	ldrb	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	0011      	movs	r1, r2
 80084fa:	0018      	movs	r0, r3
 80084fc:	f7ff fd6d 	bl	8007fda <USBD_CoreFindEP>
 8008500:	0003      	movs	r3, r0
 8008502:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008504:	197b      	adds	r3, r7, r5
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2bff      	cmp	r3, #255	; 0xff
 800850a:	d02a      	beq.n	8008562 <USBD_StdEPReq+0x248>
 800850c:	197b      	adds	r3, r7, r5
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d126      	bne.n	8008562 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8008514:	197b      	adds	r3, r7, r5
 8008516:	7819      	ldrb	r1, [r3, #0]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	23b5      	movs	r3, #181	; 0xb5
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008520:	0029      	movs	r1, r5
 8008522:	187b      	adds	r3, r7, r1
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32ae      	adds	r2, #174	; 0xae
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	58d3      	ldr	r3, [r2, r3]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d016      	beq.n	8008562 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008534:	187b      	adds	r3, r7, r1
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	32ae      	adds	r2, #174	; 0xae
 800853c:	0092      	lsls	r2, r2, #2
 800853e:	58d3      	ldr	r3, [r2, r3]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	220f      	movs	r2, #15
 8008544:	18bc      	adds	r4, r7, r2
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	0010      	movs	r0, r2
 800854c:	4798      	blx	r3
 800854e:	0003      	movs	r3, r0
 8008550:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 8008552:	e006      	b.n	8008562 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	0011      	movs	r1, r2
 800855a:	0018      	movs	r0, r3
 800855c:	f000 fcea 	bl	8008f34 <USBD_CtlError>
              break;
 8008560:	e000      	b.n	8008564 <USBD_StdEPReq+0x24a>
              break;
 8008562:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008564:	e0ce      	b.n	8008704 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	23a7      	movs	r3, #167	; 0xa7
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	5cd3      	ldrb	r3, [r2, r3]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d002      	beq.n	800857a <USBD_StdEPReq+0x260>
 8008574:	2b03      	cmp	r3, #3
 8008576:	d03c      	beq.n	80085f2 <USBD_StdEPReq+0x2d8>
 8008578:	e0b5      	b.n	80086e6 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800857a:	220e      	movs	r2, #14
 800857c:	18bb      	adds	r3, r7, r2
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <USBD_StdEPReq+0x280>
 8008584:	18bb      	adds	r3, r7, r2
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b80      	cmp	r3, #128	; 0x80
 800858a:	d006      	beq.n	800859a <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	0011      	movs	r1, r2
 8008592:	0018      	movs	r0, r3
 8008594:	f000 fcce 	bl	8008f34 <USBD_CtlError>
                break;
 8008598:	e0ac      	b.n	80086f4 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859a:	220e      	movs	r2, #14
 800859c:	18bb      	adds	r3, r7, r2
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	da0c      	bge.n	80085c0 <USBD_StdEPReq+0x2a6>
 80085a6:	18bb      	adds	r3, r7, r2
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	227f      	movs	r2, #127	; 0x7f
 80085ac:	401a      	ands	r2, r3
 80085ae:	0013      	movs	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3310      	adds	r3, #16
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	18d3      	adds	r3, r2, r3
 80085bc:	3304      	adds	r3, #4
 80085be:	e00d      	b.n	80085dc <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085c0:	230e      	movs	r3, #14
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	227f      	movs	r2, #127	; 0x7f
 80085c8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ca:	0013      	movs	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	189b      	adds	r3, r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	3351      	adds	r3, #81	; 0x51
 80085d4:	33ff      	adds	r3, #255	; 0xff
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	18d3      	adds	r3, r2, r3
 80085da:	3304      	adds	r3, #4
 80085dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	0018      	movs	r0, r3
 80085ec:	f000 fd2a 	bl	8009044 <USBD_CtlSendData>
              break;
 80085f0:	e080      	b.n	80086f4 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085f2:	220e      	movs	r2, #14
 80085f4:	18bb      	adds	r3, r7, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	b25b      	sxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da14      	bge.n	8008628 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085fe:	18bb      	adds	r3, r7, r2
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	220f      	movs	r2, #15
 8008604:	401a      	ands	r2, r3
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	0013      	movs	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	189b      	adds	r3, r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	18cb      	adds	r3, r1, r3
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d11e      	bne.n	8008658 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	0011      	movs	r1, r2
 8008620:	0018      	movs	r0, r3
 8008622:	f000 fc87 	bl	8008f34 <USBD_CtlError>
                  break;
 8008626:	e065      	b.n	80086f4 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008628:	230e      	movs	r3, #14
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	220f      	movs	r2, #15
 8008630:	401a      	ands	r2, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	23b2      	movs	r3, #178	; 0xb2
 8008636:	0059      	lsls	r1, r3, #1
 8008638:	0013      	movs	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	189b      	adds	r3, r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	18c3      	adds	r3, r0, r3
 8008642:	185b      	adds	r3, r3, r1
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d106      	bne.n	8008658 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	0011      	movs	r1, r2
 8008650:	0018      	movs	r0, r3
 8008652:	f000 fc6f 	bl	8008f34 <USBD_CtlError>
                  break;
 8008656:	e04d      	b.n	80086f4 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008658:	220e      	movs	r2, #14
 800865a:	18bb      	adds	r3, r7, r2
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b25b      	sxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0c      	bge.n	800867e <USBD_StdEPReq+0x364>
 8008664:	18bb      	adds	r3, r7, r2
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	227f      	movs	r2, #127	; 0x7f
 800866a:	401a      	ands	r2, r3
 800866c:	0013      	movs	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	189b      	adds	r3, r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	3310      	adds	r3, #16
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	18d3      	adds	r3, r2, r3
 800867a:	3304      	adds	r3, #4
 800867c:	e00d      	b.n	800869a <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800867e:	230e      	movs	r3, #14
 8008680:	18fb      	adds	r3, r7, r3
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	227f      	movs	r2, #127	; 0x7f
 8008686:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008688:	0013      	movs	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	189b      	adds	r3, r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	3351      	adds	r3, #81	; 0x51
 8008692:	33ff      	adds	r3, #255	; 0xff
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	18d3      	adds	r3, r2, r3
 8008698:	3304      	adds	r3, #4
 800869a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800869c:	220e      	movs	r2, #14
 800869e:	18bb      	adds	r3, r7, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <USBD_StdEPReq+0x394>
 80086a6:	18bb      	adds	r3, r7, r2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d103      	bne.n	80086b6 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	e010      	b.n	80086d8 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086b6:	230e      	movs	r3, #14
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	781a      	ldrb	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	0011      	movs	r1, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	f001 f9b0 	bl	8009a26 <USBD_LL_IsStallEP>
 80086c6:	1e03      	subs	r3, r0, #0
 80086c8:	d003      	beq.n	80086d2 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2201      	movs	r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e002      	b.n	80086d8 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	0018      	movs	r0, r3
 80086e0:	f000 fcb0 	bl	8009044 <USBD_CtlSendData>
              break;
 80086e4:	e006      	b.n	80086f4 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	0011      	movs	r1, r2
 80086ec:	0018      	movs	r0, r3
 80086ee:	f000 fc21 	bl	8008f34 <USBD_CtlError>
              break;
 80086f2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80086f4:	e006      	b.n	8008704 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	0011      	movs	r1, r2
 80086fc:	0018      	movs	r0, r3
 80086fe:	f000 fc19 	bl	8008f34 <USBD_CtlError>
          break;
 8008702:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008704:	e007      	b.n	8008716 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	0011      	movs	r1, r2
 800870c:	0018      	movs	r0, r3
 800870e:	f000 fc11 	bl	8008f34 <USBD_CtlError>
      break;
 8008712:	e000      	b.n	8008716 <USBD_StdEPReq+0x3fc>
      break;
 8008714:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008716:	230f      	movs	r3, #15
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	781b      	ldrb	r3, [r3, #0]
}
 800871c:	0018      	movs	r0, r3
 800871e:	46bd      	mov	sp, r7
 8008720:	b004      	add	sp, #16
 8008722:	bdb0      	pop	{r4, r5, r7, pc}

08008724 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800872e:	2308      	movs	r3, #8
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	2200      	movs	r2, #0
 8008734:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800873a:	230b      	movs	r3, #11
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b0f      	cmp	r3, #15
 800874c:	d900      	bls.n	8008750 <USBD_GetDescriptor+0x2c>
 800874e:	e17b      	b.n	8008a48 <USBD_GetDescriptor+0x324>
 8008750:	009a      	lsls	r2, r3, #2
 8008752:	4bdd      	ldr	r3, [pc, #884]	; (8008ac8 <USBD_GetDescriptor+0x3a4>)
 8008754:	18d3      	adds	r3, r2, r3
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	23ad      	movs	r3, #173	; 0xad
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	58d3      	ldr	r3, [r2, r3]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00d      	beq.n	8008784 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	23ad      	movs	r3, #173	; 0xad
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	58d3      	ldr	r3, [r2, r3]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	7c12      	ldrb	r2, [r2, #16]
 8008776:	2108      	movs	r1, #8
 8008778:	1879      	adds	r1, r7, r1
 800877a:	0010      	movs	r0, r2
 800877c:	4798      	blx	r3
 800877e:	0003      	movs	r3, r0
 8008780:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008782:	e16e      	b.n	8008a62 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	0011      	movs	r1, r2
 800878a:	0018      	movs	r0, r3
 800878c:	f000 fbd2 	bl	8008f34 <USBD_CtlError>
        err++;
 8008790:	210b      	movs	r1, #11
 8008792:	187b      	adds	r3, r7, r1
 8008794:	781a      	ldrb	r2, [r3, #0]
 8008796:	187b      	adds	r3, r7, r1
 8008798:	3201      	adds	r2, #1
 800879a:	701a      	strb	r2, [r3, #0]
      break;
 800879c:	e161      	b.n	8008a62 <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	23ad      	movs	r3, #173	; 0xad
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	58d3      	ldr	r3, [r2, r3]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	7c12      	ldrb	r2, [r2, #16]
 80087ac:	2108      	movs	r1, #8
 80087ae:	1879      	adds	r1, r7, r1
 80087b0:	0010      	movs	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	0003      	movs	r3, r0
 80087b6:	60fb      	str	r3, [r7, #12]
      break;
 80087b8:	e153      	b.n	8008a62 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	7c1b      	ldrb	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10f      	bne.n	80087e2 <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	23ae      	movs	r3, #174	; 0xae
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	58d3      	ldr	r3, [r2, r3]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	2208      	movs	r2, #8
 80087ce:	18ba      	adds	r2, r7, r2
 80087d0:	0010      	movs	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	0003      	movs	r3, r0
 80087d6:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	2202      	movs	r2, #2
 80087de:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087e0:	e13f      	b.n	8008a62 <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	23ae      	movs	r3, #174	; 0xae
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	58d3      	ldr	r3, [r2, r3]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	2208      	movs	r2, #8
 80087ee:	18ba      	adds	r2, r7, r2
 80087f0:	0010      	movs	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	0003      	movs	r3, r0
 80087f6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	2202      	movs	r2, #2
 80087fe:	701a      	strb	r2, [r3, #0]
      break;
 8008800:	e12f      	b.n	8008a62 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b05      	cmp	r3, #5
 800880a:	d900      	bls.n	800880e <USBD_GetDescriptor+0xea>
 800880c:	e0d0      	b.n	80089b0 <USBD_GetDescriptor+0x28c>
 800880e:	009a      	lsls	r2, r3, #2
 8008810:	4bae      	ldr	r3, [pc, #696]	; (8008acc <USBD_GetDescriptor+0x3a8>)
 8008812:	18d3      	adds	r3, r2, r3
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	23ad      	movs	r3, #173	; 0xad
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	58d3      	ldr	r3, [r2, r3]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00d      	beq.n	8008842 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	23ad      	movs	r3, #173	; 0xad
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	58d3      	ldr	r3, [r2, r3]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7c12      	ldrb	r2, [r2, #16]
 8008834:	2108      	movs	r1, #8
 8008836:	1879      	adds	r1, r7, r1
 8008838:	0010      	movs	r0, r2
 800883a:	4798      	blx	r3
 800883c:	0003      	movs	r3, r0
 800883e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008840:	e0c3      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	0011      	movs	r1, r2
 8008848:	0018      	movs	r0, r3
 800884a:	f000 fb73 	bl	8008f34 <USBD_CtlError>
            err++;
 800884e:	210b      	movs	r1, #11
 8008850:	187b      	adds	r3, r7, r1
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	187b      	adds	r3, r7, r1
 8008856:	3201      	adds	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
          break;
 800885a:	e0b6      	b.n	80089ca <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	23ad      	movs	r3, #173	; 0xad
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	58d3      	ldr	r3, [r2, r3]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00d      	beq.n	8008886 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	23ad      	movs	r3, #173	; 0xad
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	58d3      	ldr	r3, [r2, r3]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	2108      	movs	r1, #8
 800887a:	1879      	adds	r1, r7, r1
 800887c:	0010      	movs	r0, r2
 800887e:	4798      	blx	r3
 8008880:	0003      	movs	r3, r0
 8008882:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008884:	e0a1      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	0011      	movs	r1, r2
 800888c:	0018      	movs	r0, r3
 800888e:	f000 fb51 	bl	8008f34 <USBD_CtlError>
            err++;
 8008892:	210b      	movs	r1, #11
 8008894:	187b      	adds	r3, r7, r1
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	187b      	adds	r3, r7, r1
 800889a:	3201      	adds	r2, #1
 800889c:	701a      	strb	r2, [r3, #0]
          break;
 800889e:	e094      	b.n	80089ca <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	23ad      	movs	r3, #173	; 0xad
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	58d3      	ldr	r3, [r2, r3]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00d      	beq.n	80088ca <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	23ad      	movs	r3, #173	; 0xad
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	58d3      	ldr	r3, [r2, r3]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	2108      	movs	r1, #8
 80088be:	1879      	adds	r1, r7, r1
 80088c0:	0010      	movs	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	0003      	movs	r3, r0
 80088c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c8:	e07f      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0011      	movs	r1, r2
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 fb2f 	bl	8008f34 <USBD_CtlError>
            err++;
 80088d6:	210b      	movs	r1, #11
 80088d8:	187b      	adds	r3, r7, r1
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	3201      	adds	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
          break;
 80088e2:	e072      	b.n	80089ca <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	23ad      	movs	r3, #173	; 0xad
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	58d3      	ldr	r3, [r2, r3]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00d      	beq.n	800890e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	23ad      	movs	r3, #173	; 0xad
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	58d3      	ldr	r3, [r2, r3]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	7c12      	ldrb	r2, [r2, #16]
 8008900:	2108      	movs	r1, #8
 8008902:	1879      	adds	r1, r7, r1
 8008904:	0010      	movs	r0, r2
 8008906:	4798      	blx	r3
 8008908:	0003      	movs	r3, r0
 800890a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890c:	e05d      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	0011      	movs	r1, r2
 8008914:	0018      	movs	r0, r3
 8008916:	f000 fb0d 	bl	8008f34 <USBD_CtlError>
            err++;
 800891a:	210b      	movs	r1, #11
 800891c:	187b      	adds	r3, r7, r1
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	187b      	adds	r3, r7, r1
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
          break;
 8008926:	e050      	b.n	80089ca <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	23ad      	movs	r3, #173	; 0xad
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	58d3      	ldr	r3, [r2, r3]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00d      	beq.n	8008952 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	23ad      	movs	r3, #173	; 0xad
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	58d3      	ldr	r3, [r2, r3]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	2108      	movs	r1, #8
 8008946:	1879      	adds	r1, r7, r1
 8008948:	0010      	movs	r0, r2
 800894a:	4798      	blx	r3
 800894c:	0003      	movs	r3, r0
 800894e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008950:	e03b      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	0011      	movs	r1, r2
 8008958:	0018      	movs	r0, r3
 800895a:	f000 faeb 	bl	8008f34 <USBD_CtlError>
            err++;
 800895e:	210b      	movs	r1, #11
 8008960:	187b      	adds	r3, r7, r1
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	187b      	adds	r3, r7, r1
 8008966:	3201      	adds	r2, #1
 8008968:	701a      	strb	r2, [r3, #0]
          break;
 800896a:	e02e      	b.n	80089ca <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	23ad      	movs	r3, #173	; 0xad
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	58d3      	ldr	r3, [r2, r3]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	23ad      	movs	r3, #173	; 0xad
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	58d3      	ldr	r3, [r2, r3]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	2108      	movs	r1, #8
 800898a:	1879      	adds	r1, r7, r1
 800898c:	0010      	movs	r0, r2
 800898e:	4798      	blx	r3
 8008990:	0003      	movs	r3, r0
 8008992:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008994:	e019      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f000 fac9 	bl	8008f34 <USBD_CtlError>
            err++;
 80089a2:	210b      	movs	r1, #11
 80089a4:	187b      	adds	r3, r7, r1
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	3201      	adds	r2, #1
 80089ac:	701a      	strb	r2, [r3, #0]
          break;
 80089ae:	e00c      	b.n	80089ca <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	0011      	movs	r1, r2
 80089b6:	0018      	movs	r0, r3
 80089b8:	f000 fabc 	bl	8008f34 <USBD_CtlError>
          err++;
 80089bc:	210b      	movs	r1, #11
 80089be:	187b      	adds	r3, r7, r1
 80089c0:	781a      	ldrb	r2, [r3, #0]
 80089c2:	187b      	adds	r3, r7, r1
 80089c4:	3201      	adds	r2, #1
 80089c6:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089c8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80089ca:	e04a      	b.n	8008a62 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	7c1b      	ldrb	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	23ae      	movs	r3, #174	; 0xae
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	58d3      	ldr	r3, [r2, r3]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	2208      	movs	r2, #8
 80089e0:	18ba      	adds	r2, r7, r2
 80089e2:	0010      	movs	r0, r2
 80089e4:	4798      	blx	r3
 80089e6:	0003      	movs	r3, r0
 80089e8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ea:	e03a      	b.n	8008a62 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	0011      	movs	r1, r2
 80089f2:	0018      	movs	r0, r3
 80089f4:	f000 fa9e 	bl	8008f34 <USBD_CtlError>
        err++;
 80089f8:	210b      	movs	r1, #11
 80089fa:	187b      	adds	r3, r7, r1
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	187b      	adds	r3, r7, r1
 8008a00:	3201      	adds	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
      break;
 8008a04:	e02d      	b.n	8008a62 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	7c1b      	ldrb	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10f      	bne.n	8008a2e <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	23ae      	movs	r3, #174	; 0xae
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	58d3      	ldr	r3, [r2, r3]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	2208      	movs	r2, #8
 8008a1a:	18ba      	adds	r2, r7, r2
 8008a1c:	0010      	movs	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	0003      	movs	r3, r0
 8008a22:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	2207      	movs	r2, #7
 8008a2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2c:	e019      	b.n	8008a62 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f000 fa7d 	bl	8008f34 <USBD_CtlError>
        err++;
 8008a3a:	210b      	movs	r1, #11
 8008a3c:	187b      	adds	r3, r7, r1
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	187b      	adds	r3, r7, r1
 8008a42:	3201      	adds	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
      break;
 8008a46:	e00c      	b.n	8008a62 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	0011      	movs	r1, r2
 8008a4e:	0018      	movs	r0, r3
 8008a50:	f000 fa70 	bl	8008f34 <USBD_CtlError>
      err++;
 8008a54:	210b      	movs	r1, #11
 8008a56:	187b      	adds	r3, r7, r1
 8008a58:	781a      	ldrb	r2, [r3, #0]
 8008a5a:	187b      	adds	r3, r7, r1
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	701a      	strb	r2, [r3, #0]
      break;
 8008a60:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008a62:	230b      	movs	r3, #11
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d131      	bne.n	8008ad0 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	88db      	ldrh	r3, [r3, #6]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d023      	beq.n	8008abc <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 8008a74:	2108      	movs	r1, #8
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d017      	beq.n	8008aae <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88da      	ldrh	r2, [r3, #6]
 8008a82:	187b      	adds	r3, r7, r1
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	1c18      	adds	r0, r3, #0
 8008a88:	1c11      	adds	r1, r2, #0
 8008a8a:	b28a      	uxth	r2, r1
 8008a8c:	b283      	uxth	r3, r0
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d900      	bls.n	8008a94 <USBD_GetDescriptor+0x370>
 8008a92:	1c01      	adds	r1, r0, #0
 8008a94:	b28a      	uxth	r2, r1
 8008a96:	2108      	movs	r1, #8
 8008a98:	187b      	adds	r3, r7, r1
 8008a9a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a9c:	187b      	adds	r3, r7, r1
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	001a      	movs	r2, r3
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	f000 facc 	bl	8009044 <USBD_CtlSendData>
 8008aac:	e011      	b.n	8008ad2 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0011      	movs	r1, r2
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f000 fa3d 	bl	8008f34 <USBD_CtlError>
 8008aba:	e00a      	b.n	8008ad2 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f000 fb1e 	bl	8009100 <USBD_CtlSendStatus>
 8008ac4:	e005      	b.n	8008ad2 <USBD_GetDescriptor+0x3ae>
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	08009e5c 	.word	0x08009e5c
 8008acc:	08009e9c 	.word	0x08009e9c
    return;
 8008ad0:	46c0      	nop			; (mov r8, r8)
  }
}
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b004      	add	sp, #16
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	889b      	ldrh	r3, [r3, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d13e      	bne.n	8008b68 <USBD_SetAddress+0x90>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	88db      	ldrh	r3, [r3, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d13a      	bne.n	8008b68 <USBD_SetAddress+0x90>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	885b      	ldrh	r3, [r3, #2]
 8008af6:	2b7f      	cmp	r3, #127	; 0x7f
 8008af8:	d836      	bhi.n	8008b68 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	885b      	ldrh	r3, [r3, #2]
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	230f      	movs	r3, #15
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	217f      	movs	r1, #127	; 0x7f
 8008b06:	400a      	ands	r2, r1
 8008b08:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	23a7      	movs	r3, #167	; 0xa7
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	5cd3      	ldrb	r3, [r2, r3]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d106      	bne.n	8008b26 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	0011      	movs	r1, r2
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f000 fa08 	bl	8008f34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	e027      	b.n	8008b76 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	240f      	movs	r4, #15
 8008b2a:	193a      	adds	r2, r7, r4
 8008b2c:	4914      	ldr	r1, [pc, #80]	; (8008b80 <USBD_SetAddress+0xa8>)
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b32:	193b      	adds	r3, r7, r4
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	0011      	movs	r1, r2
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f000 ffa4 	bl	8009a88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f000 fadc 	bl	8009100 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b48:	193b      	adds	r3, r7, r4
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	23a7      	movs	r3, #167	; 0xa7
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	2102      	movs	r1, #2
 8008b58:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	e00c      	b.n	8008b76 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	23a7      	movs	r3, #167	; 0xa7
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	2101      	movs	r1, #1
 8008b64:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b66:	e006      	b.n	8008b76 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	0011      	movs	r1, r2
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f000 f9e0 	bl	8008f34 <USBD_CtlError>
  }
}
 8008b74:	46c0      	nop			; (mov r8, r8)
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b005      	add	sp, #20
 8008b7c:	bd90      	pop	{r4, r7, pc}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	0000029e 	.word	0x0000029e

08008b84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b5b0      	push	{r4, r5, r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8e:	230f      	movs	r3, #15
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	4b5f      	ldr	r3, [pc, #380]	; (8008d1c <USBD_SetConfig+0x198>)
 8008b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ba0:	4b5e      	ldr	r3, [pc, #376]	; (8008d1c <USBD_SetConfig+0x198>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d907      	bls.n	8008bb8 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	0011      	movs	r1, r2
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f000 f9c0 	bl	8008f34 <USBD_CtlError>
    return USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e0ac      	b.n	8008d12 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	23a7      	movs	r3, #167	; 0xa7
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	5cd3      	ldrb	r3, [r2, r3]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d002      	beq.n	8008bcc <USBD_SetConfig+0x48>
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d033      	beq.n	8008c32 <USBD_SetConfig+0xae>
 8008bca:	e08d      	b.n	8008ce8 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bcc:	4b53      	ldr	r3, [pc, #332]	; (8008d1c <USBD_SetConfig+0x198>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d029      	beq.n	8008c28 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 8008bd4:	4b51      	ldr	r3, [pc, #324]	; (8008d1c <USBD_SetConfig+0x198>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	001a      	movs	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bde:	4b4f      	ldr	r3, [pc, #316]	; (8008d1c <USBD_SetConfig+0x198>)
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	250f      	movs	r5, #15
 8008be4:	197c      	adds	r4, r7, r5
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	0011      	movs	r1, r2
 8008bea:	0018      	movs	r0, r3
 8008bec:	f7fe feb2 	bl	8007954 <USBD_SetClassConfig>
 8008bf0:	0003      	movs	r3, r0
 8008bf2:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8008bf4:	197b      	adds	r3, r7, r5
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	0011      	movs	r1, r2
 8008c02:	0018      	movs	r0, r3
 8008c04:	f000 f996 	bl	8008f34 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	23a7      	movs	r3, #167	; 0xa7
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	2102      	movs	r1, #2
 8008c10:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c12:	e07b      	b.n	8008d0c <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	0018      	movs	r0, r3
 8008c18:	f000 fa72 	bl	8009100 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	23a7      	movs	r3, #167	; 0xa7
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	2103      	movs	r1, #3
 8008c24:	54d1      	strb	r1, [r2, r3]
      break;
 8008c26:	e071      	b.n	8008d0c <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f000 fa68 	bl	8009100 <USBD_CtlSendStatus>
      break;
 8008c30:	e06c      	b.n	8008d0c <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c32:	4b3a      	ldr	r3, [pc, #232]	; (8008d1c <USBD_SetConfig+0x198>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d115      	bne.n	8008c66 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	23a7      	movs	r3, #167	; 0xa7
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	2102      	movs	r1, #2
 8008c42:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8008c44:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <USBD_SetConfig+0x198>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	001a      	movs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c4e:	4b33      	ldr	r3, [pc, #204]	; (8008d1c <USBD_SetConfig+0x198>)
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0011      	movs	r1, r2
 8008c56:	0018      	movs	r0, r3
 8008c58:	f7fe fea1 	bl	800799e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	0018      	movs	r0, r3
 8008c60:	f000 fa4e 	bl	8009100 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c64:	e052      	b.n	8008d0c <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 8008c66:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <USBD_SetConfig+0x198>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d034      	beq.n	8008cde <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f7fe fe8d 	bl	800799e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c84:	4b25      	ldr	r3, [pc, #148]	; (8008d1c <USBD_SetConfig+0x198>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	001a      	movs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c8e:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <USBD_SetConfig+0x198>)
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	250f      	movs	r5, #15
 8008c94:	197c      	adds	r4, r7, r5
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	0011      	movs	r1, r2
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7fe fe5a 	bl	8007954 <USBD_SetClassConfig>
 8008ca0:	0003      	movs	r3, r0
 8008ca2:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 8008ca4:	197b      	adds	r3, r7, r5
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d013      	beq.n	8008cd4 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	0011      	movs	r1, r2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f000 f93e 	bl	8008f34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	0011      	movs	r1, r2
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f7fe fe6b 	bl	800799e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	23a7      	movs	r3, #167	; 0xa7
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	2102      	movs	r1, #2
 8008cd0:	54d1      	strb	r1, [r2, r3]
      break;
 8008cd2:	e01b      	b.n	8008d0c <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f000 fa12 	bl	8009100 <USBD_CtlSendStatus>
      break;
 8008cdc:	e016      	b.n	8008d0c <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f000 fa0d 	bl	8009100 <USBD_CtlSendStatus>
      break;
 8008ce6:	e011      	b.n	8008d0c <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0011      	movs	r1, r2
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f000 f920 	bl	8008f34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cf4:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <USBD_SetConfig+0x198>)
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	0011      	movs	r1, r2
 8008cfc:	0018      	movs	r0, r3
 8008cfe:	f7fe fe4e 	bl	800799e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d02:	230f      	movs	r3, #15
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	2203      	movs	r2, #3
 8008d08:	701a      	strb	r2, [r3, #0]
      break;
 8008d0a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008d0c:	230f      	movs	r3, #15
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	781b      	ldrb	r3, [r3, #0]
}
 8008d12:	0018      	movs	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	b004      	add	sp, #16
 8008d18:	bdb0      	pop	{r4, r5, r7, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	200001b4 	.word	0x200001b4

08008d20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d006      	beq.n	8008d40 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	0011      	movs	r1, r2
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f000 f8fb 	bl	8008f34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d3e:	e027      	b.n	8008d90 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	23a7      	movs	r3, #167	; 0xa7
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	5cd3      	ldrb	r3, [r2, r3]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	dc02      	bgt.n	8008d54 <USBD_GetConfig+0x34>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dc03      	bgt.n	8008d5a <USBD_GetConfig+0x3a>
 8008d52:	e016      	b.n	8008d82 <USBD_GetConfig+0x62>
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d00c      	beq.n	8008d72 <USBD_GetConfig+0x52>
 8008d58:	e013      	b.n	8008d82 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3308      	adds	r3, #8
 8008d64:	0019      	movs	r1, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 f96a 	bl	8009044 <USBD_CtlSendData>
        break;
 8008d70:	e00e      	b.n	8008d90 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1d19      	adds	r1, r3, #4
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f000 f962 	bl	8009044 <USBD_CtlSendData>
        break;
 8008d80:	e006      	b.n	8008d90 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	0011      	movs	r1, r2
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f000 f8d3 	bl	8008f34 <USBD_CtlError>
        break;
 8008d8e:	46c0      	nop			; (mov r8, r8)
}
 8008d90:	46c0      	nop			; (mov r8, r8)
 8008d92:	46bd      	mov	sp, r7
 8008d94:	b002      	add	sp, #8
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	23a7      	movs	r3, #167	; 0xa7
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	5cd3      	ldrb	r3, [r2, r3]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d822      	bhi.n	8008df8 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	88db      	ldrh	r3, [r3, #6]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d006      	beq.n	8008dc8 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	0011      	movs	r1, r2
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f000 f8b7 	bl	8008f34 <USBD_CtlError>
        break;
 8008dc6:	e01e      	b.n	8008e06 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	23a9      	movs	r3, #169	; 0xa9
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	58d3      	ldr	r3, [r2, r3]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2202      	movs	r2, #2
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	330c      	adds	r3, #12
 8008dea:	0019      	movs	r1, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	0018      	movs	r0, r3
 8008df2:	f000 f927 	bl	8009044 <USBD_CtlSendData>
      break;
 8008df6:	e006      	b.n	8008e06 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	0011      	movs	r1, r2
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f000 f898 	bl	8008f34 <USBD_CtlError>
      break;
 8008e04:	46c0      	nop			; (mov r8, r8)
  }
}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	b002      	add	sp, #8
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	885b      	ldrh	r3, [r3, #2]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d109      	bne.n	8008e34 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	23a9      	movs	r3, #169	; 0xa9
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	2101      	movs	r1, #1
 8008e28:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	f000 f967 	bl	8009100 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e32:	e017      	b.n	8008e64 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d10d      	bne.n	8008e58 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	889b      	ldrh	r3, [r3, #4]
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	b2d9      	uxtb	r1, r3
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	23a8      	movs	r3, #168	; 0xa8
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f000 f955 	bl	8009100 <USBD_CtlSendStatus>
}
 8008e56:	e005      	b.n	8008e64 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	0011      	movs	r1, r2
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f000 f868 	bl	8008f34 <USBD_CtlError>
}
 8008e64:	46c0      	nop			; (mov r8, r8)
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	23a7      	movs	r3, #167	; 0xa7
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	5cd3      	ldrb	r3, [r2, r3]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d80d      	bhi.n	8008ea2 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	885b      	ldrh	r3, [r3, #2]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d110      	bne.n	8008eb0 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	23a9      	movs	r3, #169	; 0xa9
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	2100      	movs	r1, #0
 8008e96:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f000 f930 	bl	8009100 <USBD_CtlSendStatus>
      }
      break;
 8008ea0:	e006      	b.n	8008eb0 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	0011      	movs	r1, r2
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 f843 	bl	8008f34 <USBD_CtlError>
      break;
 8008eae:	e000      	b.n	8008eb2 <USBD_ClrFeature+0x46>
      break;
 8008eb0:	46c0      	nop			; (mov r8, r8)
  }
}
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	b002      	add	sp, #8
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f7ff f8e6 	bl	80080b8 <SWAPBYTE>
 8008eec:	0003      	movs	r3, r0
 8008eee:	001a      	movs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7ff f8d8 	bl	80080b8 <SWAPBYTE>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	001a      	movs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f7ff f8ca 	bl	80080b8 <SWAPBYTE>
 8008f24:	0003      	movs	r3, r0
 8008f26:	001a      	movs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	80da      	strh	r2, [r3, #6]
}
 8008f2c:	46c0      	nop			; (mov r8, r8)
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b004      	add	sp, #16
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 fd19 	bl	800997a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	f000 fd14 	bl	800997a <USBD_LL_StallEP>
}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b002      	add	sp, #8
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f5a:	b590      	push	{r4, r7, lr}
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f66:	2417      	movs	r4, #23
 8008f68:	193b      	adds	r3, r7, r4
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d044      	beq.n	8008ffe <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f000 f843 	bl	8009006 <USBD_GetLen>
 8008f80:	0003      	movs	r3, r0
 8008f82:	3301      	adds	r3, #1
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	18db      	adds	r3, r3, r3
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f8e:	193b      	adds	r3, r7, r4
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	18d3      	adds	r3, r2, r3
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	7812      	ldrb	r2, [r2, #0]
 8008f9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f9c:	193b      	adds	r3, r7, r4
 8008f9e:	781a      	ldrb	r2, [r3, #0]
 8008fa0:	193b      	adds	r3, r7, r4
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fa6:	193b      	adds	r3, r7, r4
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	2203      	movs	r2, #3
 8008fb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fb2:	193b      	adds	r3, r7, r4
 8008fb4:	781a      	ldrb	r2, [r3, #0]
 8008fb6:	193b      	adds	r3, r7, r4
 8008fb8:	3201      	adds	r2, #1
 8008fba:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8008fbc:	e01a      	b.n	8008ff4 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8008fbe:	2117      	movs	r1, #23
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	18d3      	adds	r3, r2, r3
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	7812      	ldrb	r2, [r2, #0]
 8008fcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	613b      	str	r3, [r7, #16]
    idx++;
 8008fd4:	187b      	adds	r3, r7, r1
 8008fd6:	781a      	ldrb	r2, [r3, #0]
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	3201      	adds	r2, #1
 8008fdc:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8008fde:	187b      	adds	r3, r7, r1
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	18d3      	adds	r3, r2, r3
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fea:	187b      	adds	r3, r7, r1
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	3201      	adds	r2, #1
 8008ff2:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e0      	bne.n	8008fbe <USBD_GetString+0x64>
 8008ffc:	e000      	b.n	8009000 <USBD_GetString+0xa6>
    return;
 8008ffe:	46c0      	nop			; (mov r8, r8)
  }
}
 8009000:	46bd      	mov	sp, r7
 8009002:	b007      	add	sp, #28
 8009004:	bd90      	pop	{r4, r7, pc}

08009006 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800900e:	230f      	movs	r3, #15
 8009010:	18fb      	adds	r3, r7, r3
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800901a:	e008      	b.n	800902e <USBD_GetLen+0x28>
  {
    len++;
 800901c:	210f      	movs	r1, #15
 800901e:	187b      	adds	r3, r7, r1
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	187b      	adds	r3, r7, r1
 8009024:	3201      	adds	r2, #1
 8009026:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	3301      	adds	r3, #1
 800902c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f2      	bne.n	800901c <USBD_GetLen+0x16>
  }

  return len;
 8009036:	230f      	movs	r3, #15
 8009038:	18fb      	adds	r3, r7, r3
 800903a:	781b      	ldrb	r3, [r3, #0]
}
 800903c:	0018      	movs	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	b004      	add	sp, #16
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	23a5      	movs	r3, #165	; 0xa5
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	2102      	movs	r1, #2
 8009058:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	2100      	movs	r1, #0
 800906e:	f000 fd36 	bl	8009ade <USBD_LL_Transmit>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	0018      	movs	r0, r3
 8009076:	46bd      	mov	sp, r7
 8009078:	b004      	add	sp, #16
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	2100      	movs	r1, #0
 8009090:	f000 fd25 	bl	8009ade <USBD_LL_Transmit>

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b004      	add	sp, #16
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	23a5      	movs	r3, #165	; 0xa5
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	2103      	movs	r1, #3
 80090b2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	23ac      	movs	r3, #172	; 0xac
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	23ae      	movs	r3, #174	; 0xae
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	2100      	movs	r1, #0
 80090d0:	f000 fd35 	bl	8009b3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	0018      	movs	r0, r3
 80090d8:	46bd      	mov	sp, r7
 80090da:	b004      	add	sp, #16
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	2100      	movs	r1, #0
 80090f2:	f000 fd24 	bl	8009b3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	0018      	movs	r0, r3
 80090fa:	46bd      	mov	sp, r7
 80090fc:	b004      	add	sp, #16
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	23a5      	movs	r3, #165	; 0xa5
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	2104      	movs	r1, #4
 8009110:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	2300      	movs	r3, #0
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	f000 fce0 	bl	8009ade <USBD_LL_Transmit>

  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	0018      	movs	r0, r3
 8009122:	46bd      	mov	sp, r7
 8009124:	b002      	add	sp, #8
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	23a5      	movs	r3, #165	; 0xa5
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	2105      	movs	r1, #5
 8009138:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	2300      	movs	r3, #0
 800913e:	2200      	movs	r2, #0
 8009140:	2100      	movs	r1, #0
 8009142:	f000 fcfc 	bl	8009b3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b002      	add	sp, #8
 800914e:	bd80      	pop	{r7, pc}

08009150 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009154:	4914      	ldr	r1, [pc, #80]	; (80091a8 <MX_USB_Device_Init+0x58>)
 8009156:	4b15      	ldr	r3, [pc, #84]	; (80091ac <MX_USB_Device_Init+0x5c>)
 8009158:	2200      	movs	r2, #0
 800915a:	0018      	movs	r0, r3
 800915c:	f7fe fb6c 	bl	8007838 <USBD_Init>
 8009160:	1e03      	subs	r3, r0, #0
 8009162:	d001      	beq.n	8009168 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009164:	f7f7 fc78 	bl	8000a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009168:	4a11      	ldr	r2, [pc, #68]	; (80091b0 <MX_USB_Device_Init+0x60>)
 800916a:	4b10      	ldr	r3, [pc, #64]	; (80091ac <MX_USB_Device_Init+0x5c>)
 800916c:	0011      	movs	r1, r2
 800916e:	0018      	movs	r0, r3
 8009170:	f7fe fb9c 	bl	80078ac <USBD_RegisterClass>
 8009174:	1e03      	subs	r3, r0, #0
 8009176:	d001      	beq.n	800917c <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8009178:	f7f7 fc6e 	bl	8000a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800917c:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <MX_USB_Device_Init+0x64>)
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <MX_USB_Device_Init+0x5c>)
 8009180:	0011      	movs	r1, r2
 8009182:	0018      	movs	r0, r3
 8009184:	f7fe fa76 	bl	8007674 <USBD_CDC_RegisterInterface>
 8009188:	1e03      	subs	r3, r0, #0
 800918a:	d001      	beq.n	8009190 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800918c:	f7f7 fc64 	bl	8000a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009190:	4b06      	ldr	r3, [pc, #24]	; (80091ac <MX_USB_Device_Init+0x5c>)
 8009192:	0018      	movs	r0, r3
 8009194:	f7fe fbc8 	bl	8007928 <USBD_Start>
 8009198:	1e03      	subs	r3, r0, #0
 800919a:	d001      	beq.n	80091a0 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800919c:	f7f7 fc5c 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80091a0:	46c0      	nop			; (mov r8, r8)
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	200000ac 	.word	0x200000ac
 80091ac:	200001b8 	.word	0x200001b8
 80091b0:	20000018 	.word	0x20000018
 80091b4:	20000098 	.word	0x20000098

080091b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091bc:	4907      	ldr	r1, [pc, #28]	; (80091dc <CDC_Init_FS+0x24>)
 80091be:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <CDC_Init_FS+0x28>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	0018      	movs	r0, r3
 80091c4:	f7fe fa70 	bl	80076a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091c8:	4a06      	ldr	r2, [pc, #24]	; (80091e4 <CDC_Init_FS+0x2c>)
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <CDC_Init_FS+0x28>)
 80091cc:	0011      	movs	r1, r2
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7fe fa8d 	bl	80076ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091d4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091d6:	0018      	movs	r0, r3
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20000c94 	.word	0x20000c94
 80091e0:	200001b8 	.word	0x200001b8
 80091e4:	20000494 	.word	0x20000494

080091e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091ee:	0018      	movs	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6039      	str	r1, [r7, #0]
 80091fc:	0011      	movs	r1, r2
 80091fe:	1dfb      	adds	r3, r7, #7
 8009200:	1c02      	adds	r2, r0, #0
 8009202:	701a      	strb	r2, [r3, #0]
 8009204:	1d3b      	adds	r3, r7, #4
 8009206:	1c0a      	adds	r2, r1, #0
 8009208:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800920a:	1dfb      	adds	r3, r7, #7
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b23      	cmp	r3, #35	; 0x23
 8009210:	d804      	bhi.n	800921c <CDC_Control_FS+0x28>
 8009212:	009a      	lsls	r2, r3, #2
 8009214:	4b04      	ldr	r3, [pc, #16]	; (8009228 <CDC_Control_FS+0x34>)
 8009216:	18d3      	adds	r3, r2, r3
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800921c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800921e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009220:	0018      	movs	r0, r3
 8009222:	46bd      	mov	sp, r7
 8009224:	b002      	add	sp, #8
 8009226:	bd80      	pop	{r7, pc}
 8009228:	08009eb4 	.word	0x08009eb4

0800922c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4b09      	ldr	r3, [pc, #36]	; (8009260 <CDC_Receive_FS+0x34>)
 800923a:	0011      	movs	r1, r2
 800923c:	0018      	movs	r0, r3
 800923e:	f7fe fa56 	bl	80076ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009242:	4b07      	ldr	r3, [pc, #28]	; (8009260 <CDC_Receive_FS+0x34>)
 8009244:	0018      	movs	r0, r3
 8009246:	f7fe fabd 	bl	80077c4 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf, sizeof(Buf));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2104      	movs	r1, #4
 800924e:	0018      	movs	r0, r3
 8009250:	f000 f808 	bl	8009264 <CDC_Transmit_FS>
  return (USBD_OK);
 8009254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009256:	0018      	movs	r0, r3
 8009258:	46bd      	mov	sp, r7
 800925a:	b002      	add	sp, #8
 800925c:	bd80      	pop	{r7, pc}
 800925e:	46c0      	nop			; (mov r8, r8)
 8009260:	200001b8 	.word	0x200001b8

08009264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009264:	b5b0      	push	{r4, r5, r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	000a      	movs	r2, r1
 800926e:	1cbb      	adds	r3, r7, #2
 8009270:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8009272:	230f      	movs	r3, #15
 8009274:	18fb      	adds	r3, r7, r3
 8009276:	2200      	movs	r2, #0
 8009278:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800927a:	4a11      	ldr	r2, [pc, #68]	; (80092c0 <CDC_Transmit_FS+0x5c>)
 800927c:	23af      	movs	r3, #175	; 0xaf
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	58d3      	ldr	r3, [r2, r3]
 8009282:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	2385      	movs	r3, #133	; 0x85
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	58d3      	ldr	r3, [r2, r3]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8009290:	2301      	movs	r3, #1
 8009292:	e010      	b.n	80092b6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009294:	1cbb      	adds	r3, r7, #2
 8009296:	881a      	ldrh	r2, [r3, #0]
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <CDC_Transmit_FS+0x5c>)
 800929c:	0018      	movs	r0, r3
 800929e:	f7fe fa03 	bl	80076a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092a2:	250f      	movs	r5, #15
 80092a4:	197c      	adds	r4, r7, r5
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <CDC_Transmit_FS+0x5c>)
 80092a8:	0018      	movs	r0, r3
 80092aa:	f7fe fa3d 	bl	8007728 <USBD_CDC_TransmitPacket>
 80092ae:	0003      	movs	r3, r0
 80092b0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80092b2:	197b      	adds	r3, r7, r5
 80092b4:	781b      	ldrb	r3, [r3, #0]
}
 80092b6:	0018      	movs	r0, r3
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b004      	add	sp, #16
 80092bc:	bdb0      	pop	{r4, r5, r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	200001b8 	.word	0x200001b8

080092c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	1dfb      	adds	r3, r7, #7
 80092d0:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80092d2:	2117      	movs	r1, #23
 80092d4:	187b      	adds	r3, r7, r1
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092da:	187b      	adds	r3, r7, r1
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	b25b      	sxtb	r3, r3
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b006      	add	sp, #24
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	0002      	movs	r2, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	1dfb      	adds	r3, r7, #7
 80092f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2212      	movs	r2, #18
 80092fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092fe:	0018      	movs	r0, r3
 8009300:	46bd      	mov	sp, r7
 8009302:	b002      	add	sp, #8
 8009304:	bd80      	pop	{r7, pc}
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	200000cc 	.word	0x200000cc

0800930c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	0002      	movs	r2, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	1dfb      	adds	r3, r7, #7
 8009318:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2204      	movs	r2, #4
 800931e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009322:	0018      	movs	r0, r3
 8009324:	46bd      	mov	sp, r7
 8009326:	b002      	add	sp, #8
 8009328:	bd80      	pop	{r7, pc}
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	200000e0 	.word	0x200000e0

08009330 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	0002      	movs	r2, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	1dfb      	adds	r3, r7, #7
 800933c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800933e:	1dfb      	adds	r3, r7, #7
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d106      	bne.n	8009354 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4908      	ldr	r1, [pc, #32]	; (800936c <USBD_CDC_ProductStrDescriptor+0x3c>)
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <USBD_CDC_ProductStrDescriptor+0x40>)
 800934c:	0018      	movs	r0, r3
 800934e:	f7ff fe04 	bl	8008f5a <USBD_GetString>
 8009352:	e005      	b.n	8009360 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	4905      	ldr	r1, [pc, #20]	; (800936c <USBD_CDC_ProductStrDescriptor+0x3c>)
 8009358:	4b05      	ldr	r3, [pc, #20]	; (8009370 <USBD_CDC_ProductStrDescriptor+0x40>)
 800935a:	0018      	movs	r0, r3
 800935c:	f7ff fdfd 	bl	8008f5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009360:	4b02      	ldr	r3, [pc, #8]	; (800936c <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b002      	add	sp, #8
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	20001494 	.word	0x20001494
 8009370:	08009d64 	.word	0x08009d64

08009374 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	0002      	movs	r2, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	1dfb      	adds	r3, r7, #7
 8009380:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4904      	ldr	r1, [pc, #16]	; (8009398 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8009388:	0018      	movs	r0, r3
 800938a:	f7ff fde6 	bl	8008f5a <USBD_GetString>
  return USBD_StrDesc;
 800938e:	4b02      	ldr	r3, [pc, #8]	; (8009398 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b002      	add	sp, #8
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20001494 	.word	0x20001494
 800939c:	08009d7c 	.word	0x08009d7c

080093a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	0002      	movs	r2, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	1dfb      	adds	r3, r7, #7
 80093ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	221a      	movs	r2, #26
 80093b2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093b4:	f000 f84c 	bl	8009450 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093b8:	4b02      	ldr	r3, [pc, #8]	; (80093c4 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 80093ba:	0018      	movs	r0, r3
 80093bc:	46bd      	mov	sp, r7
 80093be:	b002      	add	sp, #8
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	200000e4 	.word	0x200000e4

080093c8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	0002      	movs	r2, r0
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	1dfb      	adds	r3, r7, #7
 80093d4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80093d6:	1dfb      	adds	r3, r7, #7
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4908      	ldr	r1, [pc, #32]	; (8009404 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <USBD_CDC_ConfigStrDescriptor+0x40>)
 80093e4:	0018      	movs	r0, r3
 80093e6:	f7ff fdb8 	bl	8008f5a <USBD_GetString>
 80093ea:	e005      	b.n	80093f8 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	4905      	ldr	r1, [pc, #20]	; (8009404 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 80093f0:	4b05      	ldr	r3, [pc, #20]	; (8009408 <USBD_CDC_ConfigStrDescriptor+0x40>)
 80093f2:	0018      	movs	r0, r3
 80093f4:	f7ff fdb1 	bl	8008f5a <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 80093fa:	0018      	movs	r0, r3
 80093fc:	46bd      	mov	sp, r7
 80093fe:	b002      	add	sp, #8
 8009400:	bd80      	pop	{r7, pc}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	20001494 	.word	0x20001494
 8009408:	08009d90 	.word	0x08009d90

0800940c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	0002      	movs	r2, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	1dfb      	adds	r3, r7, #7
 8009418:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800941a:	1dfb      	adds	r3, r7, #7
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	4908      	ldr	r1, [pc, #32]	; (8009448 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8009426:	4b09      	ldr	r3, [pc, #36]	; (800944c <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8009428:	0018      	movs	r0, r3
 800942a:	f7ff fd96 	bl	8008f5a <USBD_GetString>
 800942e:	e005      	b.n	800943c <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	4905      	ldr	r1, [pc, #20]	; (8009448 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8009436:	0018      	movs	r0, r3
 8009438:	f7ff fd8f 	bl	8008f5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800943e:	0018      	movs	r0, r3
 8009440:	46bd      	mov	sp, r7
 8009442:	b002      	add	sp, #8
 8009444:	bd80      	pop	{r7, pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	20001494 	.word	0x20001494
 800944c:	08009d9c 	.word	0x08009d9c

08009450 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009456:	4b10      	ldr	r3, [pc, #64]	; (8009498 <Get_SerialNum+0x48>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800945c:	4b0f      	ldr	r3, [pc, #60]	; (800949c <Get_SerialNum+0x4c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009462:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <Get_SerialNum+0x50>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	18d3      	adds	r3, r2, r3
 800946e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009476:	490b      	ldr	r1, [pc, #44]	; (80094a4 <Get_SerialNum+0x54>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2208      	movs	r2, #8
 800947c:	0018      	movs	r0, r3
 800947e:	f000 f815 	bl	80094ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009482:	4909      	ldr	r1, [pc, #36]	; (80094a8 <Get_SerialNum+0x58>)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2204      	movs	r2, #4
 8009488:	0018      	movs	r0, r3
 800948a:	f000 f80f 	bl	80094ac <IntToUnicode>
  }
}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	46bd      	mov	sp, r7
 8009492:	b004      	add	sp, #16
 8009494:	bd80      	pop	{r7, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	1fff7590 	.word	0x1fff7590
 800949c:	1fff7594 	.word	0x1fff7594
 80094a0:	1fff7598 	.word	0x1fff7598
 80094a4:	200000e6 	.word	0x200000e6
 80094a8:	200000f6 	.word	0x200000f6

080094ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	1dfb      	adds	r3, r7, #7
 80094b8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80094ba:	2117      	movs	r1, #23
 80094bc:	187b      	adds	r3, r7, r1
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80094c2:	187b      	adds	r3, r7, r1
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	e02f      	b.n	800952a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	0f1b      	lsrs	r3, r3, #28
 80094ce:	2b09      	cmp	r3, #9
 80094d0:	d80d      	bhi.n	80094ee <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	0f1b      	lsrs	r3, r3, #28
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	2317      	movs	r3, #23
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	0019      	movs	r1, r3
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	185b      	adds	r3, r3, r1
 80094e6:	3230      	adds	r2, #48	; 0x30
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e00c      	b.n	8009508 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	0f1b      	lsrs	r3, r3, #28
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	2317      	movs	r3, #23
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	0019      	movs	r1, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	185b      	adds	r3, r3, r1
 8009502:	3237      	adds	r2, #55	; 0x37
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800950e:	2117      	movs	r1, #23
 8009510:	187b      	adds	r3, r7, r1
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	3301      	adds	r3, #1
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	18d3      	adds	r3, r2, r3
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009520:	187b      	adds	r3, r7, r1
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	187b      	adds	r3, r7, r1
 8009526:	3201      	adds	r2, #1
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	2317      	movs	r3, #23
 800952c:	18fa      	adds	r2, r7, r3
 800952e:	1dfb      	adds	r3, r7, #7
 8009530:	7812      	ldrb	r2, [r2, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	429a      	cmp	r2, r3
 8009536:	d3c8      	bcc.n	80094ca <IntToUnicode+0x1e>
  }
}
 8009538:	46c0      	nop			; (mov r8, r8)
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	46bd      	mov	sp, r7
 800953e:	b006      	add	sp, #24
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009544:	b590      	push	{r4, r7, lr}
 8009546:	b099      	sub	sp, #100	; 0x64
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800954c:	2414      	movs	r4, #20
 800954e:	193b      	adds	r3, r7, r4
 8009550:	0018      	movs	r0, r3
 8009552:	234c      	movs	r3, #76	; 0x4c
 8009554:	001a      	movs	r2, r3
 8009556:	2100      	movs	r1, #0
 8009558:	f000 fbc4 	bl	8009ce4 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a25      	ldr	r2, [pc, #148]	; (80095f8 <HAL_PCD_MspInit+0xb4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d143      	bne.n	80095ee <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009566:	193b      	adds	r3, r7, r4
 8009568:	2280      	movs	r2, #128	; 0x80
 800956a:	0452      	lsls	r2, r2, #17
 800956c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800956e:	193b      	adds	r3, r7, r4
 8009570:	2200      	movs	r2, #0
 8009572:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009574:	193b      	adds	r3, r7, r4
 8009576:	0018      	movs	r0, r3
 8009578:	f7fa fa0e 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 800957c:	1e03      	subs	r3, r0, #0
 800957e:	d001      	beq.n	8009584 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009580:	f7f7 fa6a 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009584:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 8009586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009588:	4b1c      	ldr	r3, [pc, #112]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 800958a:	2180      	movs	r1, #128	; 0x80
 800958c:	0189      	lsls	r1, r1, #6
 800958e:	430a      	orrs	r2, r1
 8009590:	63da      	str	r2, [r3, #60]	; 0x3c
 8009592:	4b1a      	ldr	r3, [pc, #104]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 8009594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009596:	2380      	movs	r3, #128	; 0x80
 8009598:	019b      	lsls	r3, r3, #6
 800959a:	4013      	ands	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
 800959e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095a0:	4b16      	ldr	r3, [pc, #88]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 80095a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095a4:	2380      	movs	r3, #128	; 0x80
 80095a6:	055b      	lsls	r3, r3, #21
 80095a8:	4013      	ands	r3, r2
 80095aa:	d116      	bne.n	80095da <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ac:	4b13      	ldr	r3, [pc, #76]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 80095ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b0:	4b12      	ldr	r3, [pc, #72]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 80095b2:	2180      	movs	r1, #128	; 0x80
 80095b4:	0549      	lsls	r1, r1, #21
 80095b6:	430a      	orrs	r2, r1
 80095b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80095ba:	4b10      	ldr	r3, [pc, #64]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 80095bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095be:	2380      	movs	r3, #128	; 0x80
 80095c0:	055b      	lsls	r3, r3, #21
 80095c2:	4013      	ands	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80095c8:	f7f9 fc82 	bl	8002ed0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80095cc:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 80095ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d0:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <HAL_PCD_MspInit+0xb8>)
 80095d2:	490b      	ldr	r1, [pc, #44]	; (8009600 <HAL_PCD_MspInit+0xbc>)
 80095d4:	400a      	ands	r2, r1
 80095d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80095d8:	e001      	b.n	80095de <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80095da:	f7f9 fc79 	bl	8002ed0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 80095de:	2200      	movs	r2, #0
 80095e0:	2100      	movs	r1, #0
 80095e2:	2008      	movs	r0, #8
 80095e4:	f7f7 fc6c 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80095e8:	2008      	movs	r0, #8
 80095ea:	f7f7 fc7e 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 80095ee:	46c0      	nop			; (mov r8, r8)
 80095f0:	46bd      	mov	sp, r7
 80095f2:	b019      	add	sp, #100	; 0x64
 80095f4:	bd90      	pop	{r4, r7, pc}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	40005c00 	.word	0x40005c00
 80095fc:	40021000 	.word	0x40021000
 8009600:	efffffff 	.word	0xefffffff

08009604 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	23c1      	movs	r3, #193	; 0xc1
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	58d2      	ldr	r2, [r2, r3]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	21b1      	movs	r1, #177	; 0xb1
 8009618:	0089      	lsls	r1, r1, #2
 800961a:	468c      	mov	ip, r1
 800961c:	4463      	add	r3, ip
 800961e:	0019      	movs	r1, r3
 8009620:	0010      	movs	r0, r2
 8009622:	f7fe f9dd 	bl	80079e0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	46bd      	mov	sp, r7
 800962a:	b002      	add	sp, #8
 800962c:	bd80      	pop	{r7, pc}

0800962e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800962e:	b590      	push	{r4, r7, lr}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	000a      	movs	r2, r1
 8009638:	1cfb      	adds	r3, r7, #3
 800963a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	23c1      	movs	r3, #193	; 0xc1
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	58d4      	ldr	r4, [r2, r3]
 8009644:	1cfb      	adds	r3, r7, #3
 8009646:	781a      	ldrb	r2, [r3, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	23c8      	movs	r3, #200	; 0xc8
 800964c:	0059      	lsls	r1, r3, #1
 800964e:	0013      	movs	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	189b      	adds	r3, r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	18c3      	adds	r3, r0, r3
 8009658:	185b      	adds	r3, r3, r1
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	1cfb      	adds	r3, r7, #3
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	0019      	movs	r1, r3
 8009662:	0020      	movs	r0, r4
 8009664:	f7fe fa26 	bl	8007ab4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009668:	46c0      	nop			; (mov r8, r8)
 800966a:	46bd      	mov	sp, r7
 800966c:	b003      	add	sp, #12
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	000a      	movs	r2, r1
 800967a:	1cfb      	adds	r3, r7, #3
 800967c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	23c1      	movs	r3, #193	; 0xc1
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	58d0      	ldr	r0, [r2, r3]
 8009686:	1cfb      	adds	r3, r7, #3
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	0013      	movs	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	189b      	adds	r3, r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	18cb      	adds	r3, r1, r3
 8009696:	3350      	adds	r3, #80	; 0x50
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	1cfb      	adds	r3, r7, #3
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	0019      	movs	r1, r3
 80096a0:	f7fe faf0 	bl	8007c84 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80096a4:	46c0      	nop			; (mov r8, r8)
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b002      	add	sp, #8
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	23c1      	movs	r3, #193	; 0xc1
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	58d3      	ldr	r3, [r2, r3]
 80096bc:	0018      	movs	r0, r3
 80096be:	f7fe fc5b 	bl	8007f78 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	46bd      	mov	sp, r7
 80096c6:	b002      	add	sp, #8
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096d2:	230f      	movs	r3, #15
 80096d4:	18fb      	adds	r3, r7, r3
 80096d6:	2201      	movs	r2, #1
 80096d8:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d001      	beq.n	80096e6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80096e2:	f7f7 f9b9 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	23c1      	movs	r3, #193	; 0xc1
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	58d2      	ldr	r2, [r2, r3]
 80096ee:	230f      	movs	r3, #15
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	0019      	movs	r1, r3
 80096f6:	0010      	movs	r0, r2
 80096f8:	f7fe fbfb 	bl	8007ef2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	23c1      	movs	r3, #193	; 0xc1
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	58d3      	ldr	r3, [r2, r3]
 8009704:	0018      	movs	r0, r3
 8009706:	f7fe fb95 	bl	8007e34 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	46bd      	mov	sp, r7
 800970e:	b004      	add	sp, #16
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	23c1      	movs	r3, #193	; 0xc1
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	58d3      	ldr	r3, [r2, r3]
 8009724:	0018      	movs	r0, r3
 8009726:	f7fe fbf5 	bl	8007f14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d005      	beq.n	800973e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009732:	4b05      	ldr	r3, [pc, #20]	; (8009748 <HAL_PCD_SuspendCallback+0x34>)
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	4b04      	ldr	r3, [pc, #16]	; (8009748 <HAL_PCD_SuspendCallback+0x34>)
 8009738:	2106      	movs	r1, #6
 800973a:	430a      	orrs	r2, r1
 800973c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	46bd      	mov	sp, r7
 8009742:	b002      	add	sp, #8
 8009744:	bd80      	pop	{r7, pc}
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	e000ed00 	.word	0xe000ed00

0800974c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800975c:	4b09      	ldr	r3, [pc, #36]	; (8009784 <HAL_PCD_ResumeCallback+0x38>)
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	4b08      	ldr	r3, [pc, #32]	; (8009784 <HAL_PCD_ResumeCallback+0x38>)
 8009762:	2106      	movs	r1, #6
 8009764:	438a      	bics	r2, r1
 8009766:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009768:	f000 fa7e 	bl	8009c68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	23c1      	movs	r3, #193	; 0xc1
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	58d3      	ldr	r3, [r2, r3]
 8009774:	0018      	movs	r0, r3
 8009776:	f7fe fbe5 	bl	8007f44 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800977a:	46c0      	nop			; (mov r8, r8)
 800977c:	46bd      	mov	sp, r7
 800977e:	b002      	add	sp, #8
 8009780:	bd80      	pop	{r7, pc}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	e000ed00 	.word	0xe000ed00

08009788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 8009790:	4a34      	ldr	r2, [pc, #208]	; (8009864 <USBD_LL_Init+0xdc>)
 8009792:	23c1      	movs	r3, #193	; 0xc1
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	23b2      	movs	r3, #178	; 0xb2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4930      	ldr	r1, [pc, #192]	; (8009864 <USBD_LL_Init+0xdc>)
 80097a2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80097a4:	4b2f      	ldr	r3, [pc, #188]	; (8009864 <USBD_LL_Init+0xdc>)
 80097a6:	4a30      	ldr	r2, [pc, #192]	; (8009868 <USBD_LL_Init+0xe0>)
 80097a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80097aa:	4b2e      	ldr	r3, [pc, #184]	; (8009864 <USBD_LL_Init+0xdc>)
 80097ac:	2208      	movs	r2, #8
 80097ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 80097b0:	4b2c      	ldr	r3, [pc, #176]	; (8009864 <USBD_LL_Init+0xdc>)
 80097b2:	2208      	movs	r2, #8
 80097b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80097b6:	4b2b      	ldr	r3, [pc, #172]	; (8009864 <USBD_LL_Init+0xdc>)
 80097b8:	2202      	movs	r2, #2
 80097ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097bc:	4b29      	ldr	r3, [pc, #164]	; (8009864 <USBD_LL_Init+0xdc>)
 80097be:	2202      	movs	r2, #2
 80097c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80097c2:	4b28      	ldr	r3, [pc, #160]	; (8009864 <USBD_LL_Init+0xdc>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80097c8:	4b26      	ldr	r3, [pc, #152]	; (8009864 <USBD_LL_Init+0xdc>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80097ce:	4b25      	ldr	r3, [pc, #148]	; (8009864 <USBD_LL_Init+0xdc>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80097d4:	4b23      	ldr	r3, [pc, #140]	; (8009864 <USBD_LL_Init+0xdc>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80097da:	4b22      	ldr	r3, [pc, #136]	; (8009864 <USBD_LL_Init+0xdc>)
 80097dc:	2200      	movs	r2, #0
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80097e0:	4b20      	ldr	r3, [pc, #128]	; (8009864 <USBD_LL_Init+0xdc>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80097e6:	4b1f      	ldr	r3, [pc, #124]	; (8009864 <USBD_LL_Init+0xdc>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80097ec:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <USBD_LL_Init+0xdc>)
 80097ee:	0018      	movs	r0, r3
 80097f0:	f7f7 fd88 	bl	8001304 <HAL_PCD_Init>
 80097f4:	1e03      	subs	r3, r0, #0
 80097f6:	d001      	beq.n	80097fc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80097f8:	f7f7 f92e 	bl	8000a58 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	23b2      	movs	r3, #178	; 0xb2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	58d0      	ldr	r0, [r2, r3]
 8009804:	2318      	movs	r3, #24
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	f7f9 faef 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	23b2      	movs	r3, #178	; 0xb2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	58d0      	ldr	r0, [r2, r3]
 8009816:	2358      	movs	r3, #88	; 0x58
 8009818:	2200      	movs	r2, #0
 800981a:	2180      	movs	r1, #128	; 0x80
 800981c:	f7f9 fae6 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	23b2      	movs	r3, #178	; 0xb2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	58d0      	ldr	r0, [r2, r3]
 8009828:	23c0      	movs	r3, #192	; 0xc0
 800982a:	2200      	movs	r2, #0
 800982c:	2181      	movs	r1, #129	; 0x81
 800982e:	f7f9 fadd 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	23b2      	movs	r3, #178	; 0xb2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	58d0      	ldr	r0, [r2, r3]
 800983a:	2388      	movs	r3, #136	; 0x88
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	2200      	movs	r2, #0
 8009840:	2101      	movs	r1, #1
 8009842:	f7f9 fad3 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	23b2      	movs	r3, #178	; 0xb2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	58d0      	ldr	r0, [r2, r3]
 800984e:	2380      	movs	r3, #128	; 0x80
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	2200      	movs	r2, #0
 8009854:	2182      	movs	r1, #130	; 0x82
 8009856:	f7f9 fac9 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	0018      	movs	r0, r3
 800985e:	46bd      	mov	sp, r7
 8009860:	b002      	add	sp, #8
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20001694 	.word	0x20001694
 8009868:	40005c00 	.word	0x40005c00

0800986c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009874:	210f      	movs	r1, #15
 8009876:	187b      	adds	r3, r7, r1
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987c:	260e      	movs	r6, #14
 800987e:	19bb      	adds	r3, r7, r6
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	23b2      	movs	r3, #178	; 0xb2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	58d3      	ldr	r3, [r2, r3]
 800988c:	000d      	movs	r5, r1
 800988e:	187c      	adds	r4, r7, r1
 8009890:	0018      	movs	r0, r3
 8009892:	f7f7 fe51 	bl	8001538 <HAL_PCD_Start>
 8009896:	0003      	movs	r3, r0
 8009898:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989a:	19bc      	adds	r4, r7, r6
 800989c:	197b      	adds	r3, r7, r5
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	0018      	movs	r0, r3
 80098a2:	f000 f9e8 	bl	8009c76 <USBD_Get_USB_Status>
 80098a6:	0003      	movs	r3, r0
 80098a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80098aa:	19bb      	adds	r3, r7, r6
 80098ac:	781b      	ldrb	r3, [r3, #0]
}
 80098ae:	0018      	movs	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	b005      	add	sp, #20
 80098b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	000c      	movs	r4, r1
 80098c0:	0010      	movs	r0, r2
 80098c2:	0019      	movs	r1, r3
 80098c4:	1cfb      	adds	r3, r7, #3
 80098c6:	1c22      	adds	r2, r4, #0
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	1cbb      	adds	r3, r7, #2
 80098cc:	1c02      	adds	r2, r0, #0
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	003b      	movs	r3, r7
 80098d2:	1c0a      	adds	r2, r1, #0
 80098d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d6:	260f      	movs	r6, #15
 80098d8:	19bb      	adds	r3, r7, r6
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098de:	250e      	movs	r5, #14
 80098e0:	197b      	adds	r3, r7, r5
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	23b2      	movs	r3, #178	; 0xb2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	58d0      	ldr	r0, [r2, r3]
 80098ee:	19bc      	adds	r4, r7, r6
 80098f0:	1cbb      	adds	r3, r7, #2
 80098f2:	781d      	ldrb	r5, [r3, #0]
 80098f4:	003b      	movs	r3, r7
 80098f6:	881a      	ldrh	r2, [r3, #0]
 80098f8:	1cfb      	adds	r3, r7, #3
 80098fa:	7819      	ldrb	r1, [r3, #0]
 80098fc:	002b      	movs	r3, r5
 80098fe:	f7f7 ff82 	bl	8001806 <HAL_PCD_EP_Open>
 8009902:	0003      	movs	r3, r0
 8009904:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009906:	250e      	movs	r5, #14
 8009908:	197c      	adds	r4, r7, r5
 800990a:	19bb      	adds	r3, r7, r6
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	0018      	movs	r0, r3
 8009910:	f000 f9b1 	bl	8009c76 <USBD_Get_USB_Status>
 8009914:	0003      	movs	r3, r0
 8009916:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009918:	197b      	adds	r3, r7, r5
 800991a:	781b      	ldrb	r3, [r3, #0]
}
 800991c:	0018      	movs	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	b005      	add	sp, #20
 8009922:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009924 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	000a      	movs	r2, r1
 800992e:	1cfb      	adds	r3, r7, #3
 8009930:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009932:	210f      	movs	r1, #15
 8009934:	187b      	adds	r3, r7, r1
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993a:	260e      	movs	r6, #14
 800993c:	19bb      	adds	r3, r7, r6
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	23b2      	movs	r3, #178	; 0xb2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	58d2      	ldr	r2, [r2, r3]
 800994a:	000d      	movs	r5, r1
 800994c:	187c      	adds	r4, r7, r1
 800994e:	1cfb      	adds	r3, r7, #3
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	0019      	movs	r1, r3
 8009954:	0010      	movs	r0, r2
 8009956:	f7f7 ffd0 	bl	80018fa <HAL_PCD_EP_Close>
 800995a:	0003      	movs	r3, r0
 800995c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995e:	19bc      	adds	r4, r7, r6
 8009960:	197b      	adds	r3, r7, r5
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	0018      	movs	r0, r3
 8009966:	f000 f986 	bl	8009c76 <USBD_Get_USB_Status>
 800996a:	0003      	movs	r3, r0
 800996c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800996e:	19bb      	adds	r3, r7, r6
 8009970:	781b      	ldrb	r3, [r3, #0]
}
 8009972:	0018      	movs	r0, r3
 8009974:	46bd      	mov	sp, r7
 8009976:	b005      	add	sp, #20
 8009978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800997a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	000a      	movs	r2, r1
 8009984:	1cfb      	adds	r3, r7, #3
 8009986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	210f      	movs	r1, #15
 800998a:	187b      	adds	r3, r7, r1
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009990:	260e      	movs	r6, #14
 8009992:	19bb      	adds	r3, r7, r6
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	23b2      	movs	r3, #178	; 0xb2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	58d2      	ldr	r2, [r2, r3]
 80099a0:	000d      	movs	r5, r1
 80099a2:	187c      	adds	r4, r7, r1
 80099a4:	1cfb      	adds	r3, r7, #3
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	0019      	movs	r1, r3
 80099aa:	0010      	movs	r0, r2
 80099ac:	f7f8 f8a0 	bl	8001af0 <HAL_PCD_EP_SetStall>
 80099b0:	0003      	movs	r3, r0
 80099b2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b4:	19bc      	adds	r4, r7, r6
 80099b6:	197b      	adds	r3, r7, r5
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	0018      	movs	r0, r3
 80099bc:	f000 f95b 	bl	8009c76 <USBD_Get_USB_Status>
 80099c0:	0003      	movs	r3, r0
 80099c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80099c4:	19bb      	adds	r3, r7, r6
 80099c6:	781b      	ldrb	r3, [r3, #0]
}
 80099c8:	0018      	movs	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b005      	add	sp, #20
 80099ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	000a      	movs	r2, r1
 80099da:	1cfb      	adds	r3, r7, #3
 80099dc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099de:	210f      	movs	r1, #15
 80099e0:	187b      	adds	r3, r7, r1
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e6:	260e      	movs	r6, #14
 80099e8:	19bb      	adds	r3, r7, r6
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	23b2      	movs	r3, #178	; 0xb2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	58d2      	ldr	r2, [r2, r3]
 80099f6:	000d      	movs	r5, r1
 80099f8:	187c      	adds	r4, r7, r1
 80099fa:	1cfb      	adds	r3, r7, #3
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	0019      	movs	r1, r3
 8009a00:	0010      	movs	r0, r2
 8009a02:	f7f8 f8d3 	bl	8001bac <HAL_PCD_EP_ClrStall>
 8009a06:	0003      	movs	r3, r0
 8009a08:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0a:	19bc      	adds	r4, r7, r6
 8009a0c:	197b      	adds	r3, r7, r5
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	0018      	movs	r0, r3
 8009a12:	f000 f930 	bl	8009c76 <USBD_Get_USB_Status>
 8009a16:	0003      	movs	r3, r0
 8009a18:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a1a:	19bb      	adds	r3, r7, r6
 8009a1c:	781b      	ldrb	r3, [r3, #0]
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b005      	add	sp, #20
 8009a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a26 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	000a      	movs	r2, r1
 8009a30:	1cfb      	adds	r3, r7, #3
 8009a32:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	23b2      	movs	r3, #178	; 0xb2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	58d3      	ldr	r3, [r2, r3]
 8009a3c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a3e:	1cfb      	adds	r3, r7, #3
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da0d      	bge.n	8009a64 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a48:	1cfb      	adds	r3, r7, #3
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	227f      	movs	r2, #127	; 0x7f
 8009a4e:	401a      	ands	r2, r3
 8009a50:	68f9      	ldr	r1, [r7, #12]
 8009a52:	203e      	movs	r0, #62	; 0x3e
 8009a54:	0013      	movs	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	189b      	adds	r3, r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	18cb      	adds	r3, r1, r3
 8009a5e:	181b      	adds	r3, r3, r0
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	e00d      	b.n	8009a80 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a64:	1cfb      	adds	r3, r7, #3
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	227f      	movs	r2, #127	; 0x7f
 8009a6a:	401a      	ands	r2, r3
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	23bf      	movs	r3, #191	; 0xbf
 8009a70:	0059      	lsls	r1, r3, #1
 8009a72:	0013      	movs	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	189b      	adds	r3, r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	18c3      	adds	r3, r0, r3
 8009a7c:	185b      	adds	r3, r3, r1
 8009a7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a80:	0018      	movs	r0, r3
 8009a82:	46bd      	mov	sp, r7
 8009a84:	b004      	add	sp, #16
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	000a      	movs	r2, r1
 8009a92:	1cfb      	adds	r3, r7, #3
 8009a94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a96:	210f      	movs	r1, #15
 8009a98:	187b      	adds	r3, r7, r1
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9e:	260e      	movs	r6, #14
 8009aa0:	19bb      	adds	r3, r7, r6
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	23b2      	movs	r3, #178	; 0xb2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	58d2      	ldr	r2, [r2, r3]
 8009aae:	000d      	movs	r5, r1
 8009ab0:	187c      	adds	r4, r7, r1
 8009ab2:	1cfb      	adds	r3, r7, #3
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	0019      	movs	r1, r3
 8009ab8:	0010      	movs	r0, r2
 8009aba:	f7f7 fe79 	bl	80017b0 <HAL_PCD_SetAddress>
 8009abe:	0003      	movs	r3, r0
 8009ac0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac2:	19bc      	adds	r4, r7, r6
 8009ac4:	197b      	adds	r3, r7, r5
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	0018      	movs	r0, r3
 8009aca:	f000 f8d4 	bl	8009c76 <USBD_Get_USB_Status>
 8009ace:	0003      	movs	r3, r0
 8009ad0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009ad2:	19bb      	adds	r3, r7, r6
 8009ad4:	781b      	ldrb	r3, [r3, #0]
}
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	b005      	add	sp, #20
 8009adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ade <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae0:	b087      	sub	sp, #28
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
 8009aea:	230b      	movs	r3, #11
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	1c0a      	adds	r2, r1, #0
 8009af0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af2:	2617      	movs	r6, #23
 8009af4:	19bb      	adds	r3, r7, r6
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afa:	2516      	movs	r5, #22
 8009afc:	197b      	adds	r3, r7, r5
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	23b2      	movs	r3, #178	; 0xb2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	58d0      	ldr	r0, [r2, r3]
 8009b0a:	19bc      	adds	r4, r7, r6
 8009b0c:	683d      	ldr	r5, [r7, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	230b      	movs	r3, #11
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	7819      	ldrb	r1, [r3, #0]
 8009b16:	002b      	movs	r3, r5
 8009b18:	f7f7 ffa0 	bl	8001a5c <HAL_PCD_EP_Transmit>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b20:	2516      	movs	r5, #22
 8009b22:	197c      	adds	r4, r7, r5
 8009b24:	19bb      	adds	r3, r7, r6
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f000 f8a4 	bl	8009c76 <USBD_Get_USB_Status>
 8009b2e:	0003      	movs	r3, r0
 8009b30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b32:	197b      	adds	r3, r7, r5
 8009b34:	781b      	ldrb	r3, [r3, #0]
}
 8009b36:	0018      	movs	r0, r3
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	b007      	add	sp, #28
 8009b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b40:	b087      	sub	sp, #28
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
 8009b4a:	230b      	movs	r3, #11
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	1c0a      	adds	r2, r1, #0
 8009b50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b52:	2617      	movs	r6, #23
 8009b54:	19bb      	adds	r3, r7, r6
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5a:	2516      	movs	r5, #22
 8009b5c:	197b      	adds	r3, r7, r5
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	23b2      	movs	r3, #178	; 0xb2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	58d0      	ldr	r0, [r2, r3]
 8009b6a:	19bc      	adds	r4, r7, r6
 8009b6c:	683d      	ldr	r5, [r7, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	230b      	movs	r3, #11
 8009b72:	18fb      	adds	r3, r7, r3
 8009b74:	7819      	ldrb	r1, [r3, #0]
 8009b76:	002b      	movs	r3, r5
 8009b78:	f7f7 ff12 	bl	80019a0 <HAL_PCD_EP_Receive>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b80:	2516      	movs	r5, #22
 8009b82:	197c      	adds	r4, r7, r5
 8009b84:	19bb      	adds	r3, r7, r6
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f000 f874 	bl	8009c76 <USBD_Get_USB_Status>
 8009b8e:	0003      	movs	r3, r0
 8009b90:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b92:	197b      	adds	r3, r7, r5
 8009b94:	781b      	ldrb	r3, [r3, #0]
}
 8009b96:	0018      	movs	r0, r3
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b007      	add	sp, #28
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	000a      	movs	r2, r1
 8009ba8:	1cfb      	adds	r3, r7, #3
 8009baa:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	23b2      	movs	r3, #178	; 0xb2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	58d2      	ldr	r2, [r2, r3]
 8009bb4:	1cfb      	adds	r3, r7, #3
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	0019      	movs	r1, r3
 8009bba:	0010      	movs	r0, r2
 8009bbc:	f7f7 ff35 	bl	8001a2a <HAL_PCD_EP_GetRxCount>
 8009bc0:	0003      	movs	r3, r0
}
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	b002      	add	sp, #8
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	000a      	movs	r2, r1
 8009bd6:	1cfb      	adds	r3, r7, #3
 8009bd8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009bda:	1cfb      	adds	r3, r7, #3
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <HAL_PCDEx_LPM_Callback+0x1c>
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d014      	beq.n	8009c10 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009be6:	e025      	b.n	8009c34 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 8009bf0:	f000 f83a 	bl	8009c68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bf4:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <HAL_PCDEx_LPM_Callback+0x70>)
 8009bf6:	691a      	ldr	r2, [r3, #16]
 8009bf8:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <HAL_PCDEx_LPM_Callback+0x70>)
 8009bfa:	2106      	movs	r1, #6
 8009bfc:	438a      	bics	r2, r1
 8009bfe:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	23c1      	movs	r3, #193	; 0xc1
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	58d3      	ldr	r3, [r2, r3]
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f7fe f99b 	bl	8007f44 <USBD_LL_Resume>
    break;
 8009c0e:	e011      	b.n	8009c34 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	23c1      	movs	r3, #193	; 0xc1
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	58d3      	ldr	r3, [r2, r3]
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7fe f97b 	bl	8007f14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <HAL_PCDEx_LPM_Callback+0x70>)
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <HAL_PCDEx_LPM_Callback+0x70>)
 8009c2c:	2106      	movs	r1, #6
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	611a      	str	r2, [r3, #16]
    break;
 8009c32:	46c0      	nop			; (mov r8, r8)
}
 8009c34:	46c0      	nop			; (mov r8, r8)
 8009c36:	46bd      	mov	sp, r7
 8009c38:	b002      	add	sp, #8
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	e000ed00 	.word	0xe000ed00

08009c40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <USBD_static_malloc+0x14>)
}
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	b002      	add	sp, #8
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	2000199c 	.word	0x2000199c

08009c58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]

}
 8009c60:	46c0      	nop			; (mov r8, r8)
 8009c62:	46bd      	mov	sp, r7
 8009c64:	b002      	add	sp, #8
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c6c:	f7f6 fdaa 	bl	80007c4 <SystemClock_Config>
}
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	0002      	movs	r2, r0
 8009c7e:	1dfb      	adds	r3, r7, #7
 8009c80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c82:	230f      	movs	r3, #15
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	2200      	movs	r2, #0
 8009c88:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009c8a:	1dfb      	adds	r3, r7, #7
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d017      	beq.n	8009cc2 <USBD_Get_USB_Status+0x4c>
 8009c92:	dc1b      	bgt.n	8009ccc <USBD_Get_USB_Status+0x56>
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d00f      	beq.n	8009cb8 <USBD_Get_USB_Status+0x42>
 8009c98:	dc18      	bgt.n	8009ccc <USBD_Get_USB_Status+0x56>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <USBD_Get_USB_Status+0x2e>
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d005      	beq.n	8009cae <USBD_Get_USB_Status+0x38>
 8009ca2:	e013      	b.n	8009ccc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca4:	230f      	movs	r3, #15
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	2200      	movs	r2, #0
 8009caa:	701a      	strb	r2, [r3, #0]
    break;
 8009cac:	e013      	b.n	8009cd6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cae:	230f      	movs	r3, #15
 8009cb0:	18fb      	adds	r3, r7, r3
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	701a      	strb	r2, [r3, #0]
    break;
 8009cb6:	e00e      	b.n	8009cd6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cb8:	230f      	movs	r3, #15
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]
    break;
 8009cc0:	e009      	b.n	8009cd6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cc2:	230f      	movs	r3, #15
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	701a      	strb	r2, [r3, #0]
    break;
 8009cca:	e004      	b.n	8009cd6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009ccc:	230f      	movs	r3, #15
 8009cce:	18fb      	adds	r3, r7, r3
 8009cd0:	2203      	movs	r2, #3
 8009cd2:	701a      	strb	r2, [r3, #0]
    break;
 8009cd4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009cd6:	230f      	movs	r3, #15
 8009cd8:	18fb      	adds	r3, r7, r3
 8009cda:	781b      	ldrb	r3, [r3, #0]
}
 8009cdc:	0018      	movs	r0, r3
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b004      	add	sp, #16
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <memset>:
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	1882      	adds	r2, r0, r2
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d100      	bne.n	8009cee <memset+0xa>
 8009cec:	4770      	bx	lr
 8009cee:	7019      	strb	r1, [r3, #0]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	e7f9      	b.n	8009ce8 <memset+0x4>

08009cf4 <__libc_init_array>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	4c0c      	ldr	r4, [pc, #48]	; (8009d2c <__libc_init_array+0x38>)
 8009cfa:	4d0d      	ldr	r5, [pc, #52]	; (8009d30 <__libc_init_array+0x3c>)
 8009cfc:	1b64      	subs	r4, r4, r5
 8009cfe:	10a4      	asrs	r4, r4, #2
 8009d00:	42a6      	cmp	r6, r4
 8009d02:	d109      	bne.n	8009d18 <__libc_init_array+0x24>
 8009d04:	2600      	movs	r6, #0
 8009d06:	f000 f819 	bl	8009d3c <_init>
 8009d0a:	4c0a      	ldr	r4, [pc, #40]	; (8009d34 <__libc_init_array+0x40>)
 8009d0c:	4d0a      	ldr	r5, [pc, #40]	; (8009d38 <__libc_init_array+0x44>)
 8009d0e:	1b64      	subs	r4, r4, r5
 8009d10:	10a4      	asrs	r4, r4, #2
 8009d12:	42a6      	cmp	r6, r4
 8009d14:	d105      	bne.n	8009d22 <__libc_init_array+0x2e>
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	00b3      	lsls	r3, r6, #2
 8009d1a:	58eb      	ldr	r3, [r5, r3]
 8009d1c:	4798      	blx	r3
 8009d1e:	3601      	adds	r6, #1
 8009d20:	e7ee      	b.n	8009d00 <__libc_init_array+0xc>
 8009d22:	00b3      	lsls	r3, r6, #2
 8009d24:	58eb      	ldr	r3, [r5, r3]
 8009d26:	4798      	blx	r3
 8009d28:	3601      	adds	r6, #1
 8009d2a:	e7f2      	b.n	8009d12 <__libc_init_array+0x1e>
 8009d2c:	08009f4c 	.word	0x08009f4c
 8009d30:	08009f4c 	.word	0x08009f4c
 8009d34:	08009f50 	.word	0x08009f50
 8009d38:	08009f4c 	.word	0x08009f4c

08009d3c <_init>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr

08009d48 <_fini>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr
